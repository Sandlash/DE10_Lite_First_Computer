
Math_Training.elf:     file format elf32-littlenios2
Math_Training.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012d98 memsz 0x00012d98 flags r-x
    LOAD off    0x00013db8 vaddr 0x00012db8 paddr 0x000148b0 align 2**12
         filesz 0x00001af8 memsz 0x00001af8 flags rw-
    LOAD off    0x000163a8 vaddr 0x000163a8 paddr 0x000163a8 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000125c8  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005c0  000127f8  000127f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af8  00012db8  000148b0  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  000163a8  000163a8  000163a8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00016508  00016508  000158b0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000158b0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001150  00000000  00000000  000158d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002c27a  00000000  00000000  00016a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b1de  00000000  00000000  00042ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d913  00000000  00000000  0004de80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002928  00000000  00000000  0005b794  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004199  00000000  00000000  0005e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019aba  00000000  00000000  00062255  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0007bd10  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001b88  00000000  00000000  0007bd20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000810ed  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  000810f0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000810f4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000810f5  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000810f6  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000810fa  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000810fe  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00081102  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0008110d  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00081118  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  00081123  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  00081137  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00062588  00000000  00000000  00081185  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
000127f8 l    d  .rodata	00000000 .rodata
00012db8 l    d  .rwdata	00000000 .rwdata
000163a8 l    d  .bss	00000000 .bss
00016508 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/emilio/UNI/Magistrale/Embedded/progetto/DE10_Lite_First_Computer/Software/Math_Training_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 1lnn.c
00000000 l    df *ABS*	00000000 main.c
00014864 l     O .rwdata	00000004 DEFAULT_TEXT_COLOR
00000000 l    df *ABS*	00000000 mnist-stats.c
00014868 l     O .rwdata	00000004 DEFAULT_TEXT_COLOR
00000000 l    df *ABS*	00000000 mnist-utils.c
00000000 l    df *ABS*	00000000 screen.c
0001486c l     O .rwdata	00000004 DEFAULT_TEXT_COLOR
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004f40 l     F .text	00000008 __fp_unlock
00004f54 l     F .text	0000019c __sinit.part.1
000050f0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012db8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00006efc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012c02 l     O .rodata	00000010 zeroes.4404
00009720 l     F .text	000000bc __sbprintf
00012c12 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00009b64 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00013604 l     O .rwdata	00000020 lc_ctype_charset
000135e4 l     O .rwdata	00000020 lc_message_charset
00013624 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00012c40 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000d68c l     F .text	000000fc __sprint_r.part.0
00012d64 l     O .rodata	00000010 zeroes.4349
0000ecc8 l     F .text	000000bc __sbprintf
00012d74 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001020c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00010320 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00010380 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00010474 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001055c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00010648 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00010824 l     F .text	0000003c alt_get_errno
00010860 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00010aa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000148a0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00010d1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010e58 l     F .text	00000034 alt_dev_reg
00013804 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001114c l     F .text	0000020c altera_avalon_jtag_uart_irq
00011358 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00011990 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011bd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001228c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
000163dc g     O .bss	00000004 alt_instruction_exception_handler
00006e10 g     F .text	00000018 putchar
0000cc98 g     F .text	00000074 _mprec_log10
0000cd84 g     F .text	0000008c __any_on
0000b988 g     F .text	00000054 _isatty_r
00012c4c g     O .rodata	00000028 __mprec_tinytens
00010760 g     F .text	0000007c alt_main
00007300 g     F .text	00000090 strcpy
00006e28 g     F .text	000000c0 _puts_r
00016408 g     O .bss	00000100 alt_irq
0000bab8 g     F .text	00000060 _lseek_r
000148b0 g       *ABS*	00000000 __flash_rwdata_start
0000b414 g     F .text	000000ac __sflags
0000ff68 g     F .text	00000088 .hidden __eqdf2
00016508 g       *ABS*	00000000 __alt_heap_start
00006dcc g     F .text	0000003c printf
0000f1c0 g     F .text	0000009c _wcrtomb_r
00007218 g     F .text	0000005c __sseek
000052a0 g     F .text	00000010 __sinit
0000ed84 g     F .text	00000140 __swbuf_r
0000b9dc g     F .text	0000007c _setlocale_r
000050f8 g     F .text	00000078 __sfmoreglue
00010800 g     F .text	00000024 __malloc_unlock
000019a4 g     F .text	00000440 .hidden __divsf3
00001450 g     F .text	0000012c readImageFileHeader
0000bbfc g     F .text	0000015c memmove
00005288 g     F .text	00000018 _cleanup
0000bd58 g     F .text	000000a8 _Balloc
00002214 g     F .text	00000070 .hidden __fixsfsi
00003624 g     F .text	000000dc .hidden __gtdf2
00012590 g     F .text	00000024 altera_nios2_gen2_irq_init
00000980 g     F .text	000001e8 trainLayer
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00005f20 g     F .text	0000005c _fstat_r
000163a8 g     O .bss	00000004 errno
00007194 g     F .text	00000008 __seofread
000163c8 g     O .bss	00000004 alt_argv
0001c864 g       *ABS*	00000000 _gp
00013684 g     O .rwdata	00000180 alt_fd_list
00006e08 g     F .text	00000008 _putchar_r
00000e18 g     F .text	000000e8 displayImageFrame
00011d70 g     F .text	00000090 alt_find_dev
00006acc g     F .text	00000148 memcpy
00004f48 g     F .text	0000000c _cleanup_r
00004868 g     F .text	000000dc .hidden __floatsidf
00012370 g     F .text	0000007c alt_io_redirect
0000fff0 g     F .text	000000f4 .hidden __ltdf2
000127f8 g       *ABS*	00000000 __DTOR_END__
00006ee8 g     F .text	00000014 puts
000125b4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000d53c g     F .text	00000074 __fpclassifyd
0000cbf4 g     F .text	000000a4 __ratio
0000ecac g     F .text	0000001c __vfiprintf_internal
00011550 g     F .text	0000021c altera_avalon_jtag_uart_read
00006d9c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004aa0 g     F .text	00000064 .hidden __udivsi3
000104b0 g     F .text	000000ac isatty
00012c9c g     O .rodata	000000c8 __mprec_tens
0000ba58 g     F .text	0000000c __locale_charset
00001934 g     F .text	00000048 locateCursor
000163b4 g     O .bss	00000004 __malloc_top_pad
000007a4 g     F .text	00000128 updateCellWeights
00014880 g     O .rwdata	00000004 __mb_cur_max
0000ba88 g     F .text	0000000c _localeconv_r
0000c18c g     F .text	0000003c __i2b
0000b4c0 g     F .text	000004c8 __sfvwrite_r
00001790 g     F .text	00000068 getLabel
000070ec g     F .text	00000054 _sbrk_r
0000cf78 g     F .text	00000060 _read_r
00014898 g     O .rwdata	00000004 alt_max_fd
00004b94 g     F .text	000000f0 _fclose_r
00004f10 g     F .text	00000030 fflush
000163b0 g     O .bss	00000004 __malloc_max_sbrked_mem
000023a8 g     F .text	000008ac .hidden __adddf3
0000c99c g     F .text	0000010c __b2d
0000f9a4 g     F .text	000005c4 .hidden __umoddi3
00010684 g     F .text	000000dc lseek
00014870 g     O .rwdata	00000004 _global_impure_ptr
0000182c g     F .text	00000108 setColor
0000cfd8 g     F .text	00000564 _realloc_r
00016508 g       *ABS*	00000000 __bss_end
0001219c g     F .text	000000f0 alt_iic_isr_register
00012488 g     F .text	00000108 alt_tick
0000f3a8 g     F .text	000005fc .hidden __udivdi3
0000f11c g     F .text	00000024 _fputwc_r
00012c74 g     O .rodata	00000028 __mprec_bigtens
0000bf70 g     F .text	00000104 __s2b
00010164 g     F .text	000000a8 .hidden __floatunsidf
0000c6dc g     F .text	00000060 __mcmp
000052c0 g     F .text	00000018 __fp_lock_all
00012150 g     F .text	0000004c alt_ic_irq_enabled
00001708 g     F .text	00000088 getImage
000123ec g     F .text	0000009c alt_alarm_stop
000163d0 g     O .bss	00000004 alt_irq_active
00005ac0 g     F .text	00000444 _fseeko_r
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001365c g     O .rwdata	00000028 alt_dev_null
000008cc g     F .text	0000006c trainCell
00011bb0 g     F .text	00000020 alt_dcache_flush_all
0000c074 g     F .text	00000068 __hi0bits
000100e4 g     F .text	00000080 .hidden __fixdfsi
00000938 g     F .text	00000048 testCell
000148b0 g       *ABS*	00000000 __ram_rwdata_end
00014890 g     O .rwdata	00000008 alt_dev_list
00010d58 g     F .text	00000100 write
0000ce10 g     F .text	000000a0 _putc_r
00012db8 g       *ABS*	00000000 __ram_rodata_end
000103bc g     F .text	000000b8 fstat
0000fff0 g     F .text	000000f4 .hidden __ledf2
0000727c g     F .text	00000084 strcat
0000c454 g     F .text	00000140 __pow5mult
0000d7a0 g     F .text	0000150c ___vfiprintf_internal_r
000163c0 g     O .bss	00000004 __nlocale_changed
00004b04 g     F .text	00000058 .hidden __umodsi3
00016508 g       *ABS*	00000000 end
00005f04 g     F .text	0000001c fseeko
00005aa4 g     F .text	0000001c fseek
0001108c g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000127f8 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00011a08 g     F .text	0000007c alt_avalon_timer_sc_init
00004944 g     F .text	00000064 .hidden __clzsi2
0001176c g     F .text	00000224 altera_avalon_jtag_uart_write
000013dc g     F .text	00000074 flipBytes
000005e4 g     F .text	0000013c calcCellOutput
000052b0 g     F .text	00000004 __sfp_lock_acquire
0000bb18 g     F .text	000000e4 memchr
00007428 g     F .text	000022dc ___vfprintf_internal_r
00005790 g     F .text	00000310 _free_r
0000ba64 g     F .text	00000010 __locale_mb_cur_max
000099e4 g     F .text	00000180 __call_exitprocs
000163bc g     O .bss	00000004 __mlocale_changed
00014878 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
000163d4 g     O .bss	00000004 _alt_tick_rate
00000558 g     F .text	0000008c setCellInput
0000c594 g     F .text	00000148 __lshift
000163d8 g     O .bss	00000004 _alt_nticks
00010ae4 g     F .text	00000104 read
00000f00 g     F .text	00000238 displayImage
00010ec4 g     F .text	00000064 alt_sys_init
00002284 g     F .text	00000124 .hidden __floatsisf
00001138 g     F .text	000000c0 displayLoadingProgressTraining
00006d3c g     F .text	00000060 _open_r
000126e0 g     F .text	00000118 __register_exitproc
00001628 g     F .text	00000070 openMNISTImageFile
0000c1c8 g     F .text	0000028c __multiply
000113f8 g     F .text	00000068 altera_avalon_jtag_uart_close
0000197c g     F .text	00000028 .hidden __mulsi3
00012db8 g       *ABS*	00000000 __ram_rwdata_start
000127f8 g       *ABS*	00000000 __ram_rodata_start
00000488 g     F .text	000000d0 getLayerPrediction
000163e0 g     O .bss	00000028 __malloc_current_mallinfo
0000caa8 g     F .text	0000014c __d2b
00010f28 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011f08 g     F .text	000000c4 alt_get_fd
00009990 g     F .text	00000054 _close_r
00012664 g     F .text	0000007c memcmp
00010fe8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00016508 g       *ABS*	00000000 __alt_stack_base
00011038 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000983c g     F .text	00000154 __swsetup_r
00002c54 g     F .text	000009d0 .hidden __divdf3
00005170 g     F .text	00000118 __sfp
0000cd0c g     F .text	00000078 __copybits
000131dc g     O .rwdata	00000408 __malloc_av_
000052bc g     F .text	00000004 __sinit_lock_release
00003700 g     F .text	0000086c .hidden __muldf3
00007140 g     F .text	00000054 __sread
00005638 g     F .text	00000034 fread
00011e00 g     F .text	00000108 alt_find_file
00011c0c g     F .text	000000a4 alt_dev_llist_insert
000107dc g     F .text	00000024 __malloc_lock
00010c6c g     F .text	000000b0 sbrk
00004eb4 g     F .text	0000005c _fflush_r
0000eedc g     F .text	000000dc _calloc_r
000053e4 g     F .text	00000018 fopen
000163a8 g       *ABS*	00000000 __bss_start
00006c14 g     F .text	00000128 memset
000012b8 g     F .text	00000124 displayProgress
00000d50 g     F .text	000000c8 main
000163cc g     O .bss	00000004 alt_envp
000163ac g     O .bss	00000004 __malloc_max_total_mem
00010f88 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000eec4 g     F .text	00000018 __swbuf
000053fc g     F .text	0000023c _fread_r
00001698 g     F .text	00000070 openMNISTLabelFile
00007274 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00004c84 g     F .text	00000014 fclose
00009d8c g     F .text	00001688 _dtoa_r
000062c0 g     F .text	0000080c _malloc_r
0000f31c g     F .text	00000030 __ascii_wctomb
0001489c g     O .rwdata	00000004 alt_errno
00005f7c g     F .text	000000c4 _fwalk
0000ceb0 g     F .text	000000c8 putc
000049a8 g     F .text	00000084 .hidden __divsi3
0000566c g     F .text	00000124 _malloc_trim_r
000127f8 g       *ABS*	00000000 __CTOR_END__
00001de4 g     F .text	00000430 .hidden __mulsf3
0000d5b0 g     F .text	000000dc strcmp
000127f8 g       *ABS*	00000000 __flash_rodata_start
000127f8 g       *ABS*	00000000 __DTOR_LIST__
0000ff68 g     F .text	00000088 .hidden __nedf2
0000157c g     F .text	000000ac readLabelFileHeader
00010e8c g     F .text	00000038 alt_irq_init
00010be8 g     F .text	00000084 alt_release_fd
00012ab6 g     O .rodata	00000100 .hidden __clz_tab
000163b8 g     O .bss	00000004 _PathLocale
00012650 g     F .text	00000014 atexit
000097dc g     F .text	00000060 _write_r
0000ba94 g     F .text	00000018 setlocale
00014874 g     O .rwdata	00000004 _impure_ptr
000163c4 g     O .bss	00000004 alt_argc
00004c98 g     F .text	0000021c __sflush_r
00011d10 g     F .text	00000060 _do_dtors
0000ba80 g     F .text	00000008 __locale_cjk_lang
00005aa0 g     F .text	00000004 _fseek_r
00006f18 g     F .text	000001d4 __srefill_r
00000720 g     F .text	00000084 getCellError
00000020 g       .exceptions	00000000 alt_irq_entry
0000c938 g     F .text	00000064 __ulp
000052d8 g     F .text	00000018 __fp_unlock_all
00014888 g     O .rwdata	00000008 alt_fs_list
000011f8 g     F .text	000000c0 displayLoadingProgressTesting
00000b68 g     F .text	000001e8 testLayer
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000baac g     F .text	0000000c localeconv
00011fec g     F .text	00000050 alt_ic_isr_register
0000026c g     F .text	000000c8 getTargetOutput
000148b0 g       *ABS*	00000000 _edata
00016508 g       *ABS*	00000000 _end
0000efb8 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
00011460 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00000334 g     F .text	00000154 initLayer
000120c4 g     F .text	0000008c alt_ic_irq_disable
0000719c g     F .text	0000007c __swrite
0001487c g     O .rwdata	00000004 __malloc_trim_threshold
0000ba74 g     F .text	0000000c __locale_msgcharset
00004b5c g     F .text	00000038 exit
00006040 g     F .text	000000c4 _fwalk_reent
0000c73c g     F .text	000001fc __mdiff
00004a2c g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000052b4 g     F .text	00000004 __sfp_lock_release
000052f0 g     F .text	000000f4 _fopen_r
0001034c g     F .text	00000034 _exit
00011a84 g     F .text	0000012c alt_alarm_start
00006104 g     F .text	000001bc __smakebuf_r
00007390 g     F .text	00000098 strlen
0001094c g     F .text	0000015c open
00003624 g     F .text	000000dc .hidden __gedf2
000017f8 g     F .text	00000034 clearScreen
00014884 g     O .rwdata	00000004 __wctomb
0000d788 g     F .text	00000018 __sprint_r
00011fcc g     F .text	00000020 alt_icache_flush_all
000148a4 g     O .rwdata	00000004 alt_priority_mask
0001203c g     F .text	00000088 alt_ic_irq_enable
00009704 g     F .text	0000001c __vfprintf_internal
0000f34c g     F .text	0000005c _wctomb_r
00003f6c g     F .text	000008fc .hidden __subdf3
0000c0dc g     F .text	000000b0 __lo0bits
000148a8 g     O .rwdata	00000008 alt_alarm_list
00011cb0 g     F .text	00000060 _do_ctors
0000f25c g     F .text	000000c0 wcrtomb
00010248 g     F .text	000000d8 close
000105c4 g     F .text	00000084 alt_load
0000f140 g     F .text	00000080 fputwc
000052b8 g     F .text	00000004 __sinit_lock_acquire
0000be28 g     F .text	00000148 __multadd
0000be00 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10990204 	addi	r2,r2,25608
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10990204 	addi	r2,r2,25608
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6de17 	ldw	r2,-25736(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6de17 	ldw	r2,-25736(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6b21914 	ori	gp,gp,51300
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	1098ea14 	ori	r2,r2,25512

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d94214 	ori	r3,r3,25864

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00105c40 	call	105c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00107600 	call	10760 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffe0268>

0000026c <getTargetOutput>:

/**
 * @details Returns an output vector with targetIndex set to 1, all others to 0
 */

Vector getTargetOutput(int targetIndex){
     26c:	defff204 	addi	sp,sp,-56
     270:	df000d15 	stw	fp,52(sp)
     274:	df000d04 	addi	fp,sp,52
     278:	e13ffe15 	stw	r4,-8(fp)
     27c:	e17fff15 	stw	r5,-4(fp)
    Vector v;
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     280:	e03ff315 	stw	zero,-52(fp)
     284:	00000e06 	br	2c0 <getTargetOutput+0x54>
        v.val[i] = (i==targetIndex) ? 1 : 0;
     288:	e0fff317 	ldw	r3,-52(fp)
     28c:	e0bfff17 	ldw	r2,-4(fp)
     290:	1885003a 	cmpeq	r2,r3,r2
     294:	10c03fcc 	andi	r3,r2,255
     298:	e0bff317 	ldw	r2,-52(fp)
     29c:	1085883a 	add	r2,r2,r2
     2a0:	1085883a 	add	r2,r2,r2
     2a4:	e13ff304 	addi	r4,fp,-52
     2a8:	2085883a 	add	r2,r4,r2
     2ac:	10800104 	addi	r2,r2,4
     2b0:	10c00015 	stw	r3,0(r2)
 * @details Returns an output vector with targetIndex set to 1, all others to 0
 */

Vector getTargetOutput(int targetIndex){
    Vector v;
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     2b4:	e0bff317 	ldw	r2,-52(fp)
     2b8:	10800044 	addi	r2,r2,1
     2bc:	e0bff315 	stw	r2,-52(fp)
     2c0:	e0bff317 	ldw	r2,-52(fp)
     2c4:	10800290 	cmplti	r2,r2,10
     2c8:	103fef1e 	bne	r2,zero,288 <__alt_data_end+0xfffe0288>
        v.val[i] = (i==targetIndex) ? 1 : 0;
    }
    return v;
     2cc:	e0bffe17 	ldw	r2,-8(fp)
     2d0:	e0fff417 	ldw	r3,-48(fp)
     2d4:	10c00015 	stw	r3,0(r2)
     2d8:	e0fff517 	ldw	r3,-44(fp)
     2dc:	10c00115 	stw	r3,4(r2)
     2e0:	e0fff617 	ldw	r3,-40(fp)
     2e4:	10c00215 	stw	r3,8(r2)
     2e8:	e0fff717 	ldw	r3,-36(fp)
     2ec:	10c00315 	stw	r3,12(r2)
     2f0:	e0fff817 	ldw	r3,-32(fp)
     2f4:	10c00415 	stw	r3,16(r2)
     2f8:	e0fff917 	ldw	r3,-28(fp)
     2fc:	10c00515 	stw	r3,20(r2)
     300:	e0fffa17 	ldw	r3,-24(fp)
     304:	10c00615 	stw	r3,24(r2)
     308:	e0fffb17 	ldw	r3,-20(fp)
     30c:	10c00715 	stw	r3,28(r2)
     310:	e0fffc17 	ldw	r3,-16(fp)
     314:	10c00815 	stw	r3,32(r2)
     318:	e0fffd17 	ldw	r3,-12(fp)
     31c:	10c00915 	stw	r3,36(r2)
}
     320:	e0bffe17 	ldw	r2,-8(fp)
     324:	e037883a 	mov	sp,fp
     328:	df000017 	ldw	fp,0(sp)
     32c:	dec00104 	addi	sp,sp,4
     330:	f800283a 	ret

00000334 <initLayer>:
 * @attention It actually makes no difference whether the weights are
 * initialized to a constant (e.g. 0.5) or to a random number.
 * The result (85% success rate) will not change significantly.
 */

void initLayer(Layer *l, FILE *weightsFile){
     334:	defff804 	addi	sp,sp,-32
     338:	dfc00715 	stw	ra,28(sp)
     33c:	df000615 	stw	fp,24(sp)
     340:	dc000515 	stw	r16,20(sp)
     344:	df000604 	addi	fp,sp,24
     348:	e13ffd15 	stw	r4,-12(fp)
     34c:	e17ffe15 	stw	r5,-8(fp)
	int result=0;
     350:	e03ffc15 	stw	zero,-16(fp)
    
    for (int o=0; o<NUMBER_OF_OUTPUT_CELLS; o++){
     354:	e03ffa15 	stw	zero,-24(fp)
     358:	00004106 	br	460 <initLayer+0x12c>
        
        for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     35c:	e03ffb15 	stw	zero,-20(fp)
     360:	00002706 	br	400 <initLayer+0xcc>
            l->cell[o].input[i]=0;
     364:	e43ffd17 	ldw	r16,-12(fp)
     368:	e0bffa17 	ldw	r2,-24(fp)
     36c:	01418884 	movi	r5,1570
     370:	1009883a 	mov	r4,r2
     374:	000197c0 	call	197c <__mulsi3>
     378:	1007883a 	mov	r3,r2
     37c:	e0bffb17 	ldw	r2,-20(fp)
     380:	1885883a 	add	r2,r3,r2
     384:	100490fa 	slli	r2,r2,3
     388:	8085883a 	add	r2,r16,r2
     38c:	10000015 	stw	zero,0(r2)
     390:	10000115 	stw	zero,4(r2)
            result=fread(&l->cell[o].weight[i], sizeof(double), 1, weightsFile);
     394:	01418884 	movi	r5,1570
     398:	e13ffa17 	ldw	r4,-24(fp)
     39c:	000197c0 	call	197c <__mulsi3>
     3a0:	1007883a 	mov	r3,r2
     3a4:	e0bffb17 	ldw	r2,-20(fp)
     3a8:	1885883a 	add	r2,r3,r2
     3ac:	1080c404 	addi	r2,r2,784
     3b0:	100490fa 	slli	r2,r2,3
     3b4:	e0fffd17 	ldw	r3,-12(fp)
     3b8:	1885883a 	add	r2,r3,r2
     3bc:	e1fffe17 	ldw	r7,-8(fp)
     3c0:	01800044 	movi	r6,1
     3c4:	01400204 	movi	r5,8
     3c8:	1009883a 	mov	r4,r2
     3cc:	00056380 	call	5638 <fread>
     3d0:	e0bffc15 	stw	r2,-16(fp)

            if (result!=1) {
     3d4:	e0bffc17 	ldw	r2,-16(fp)
     3d8:	10800060 	cmpeqi	r2,r2,1
     3dc:	1000051e 	bne	r2,zero,3f4 <initLayer+0xc0>
                    printf("\nError when reading WEIGHTS file! Abort!\n");
     3e0:	01000074 	movhi	r4,1
     3e4:	2109fe04 	addi	r4,r4,10232
     3e8:	0006ee80 	call	6ee8 <puts>
                    exit(1);
     3ec:	01000044 	movi	r4,1
     3f0:	0004b5c0 	call	4b5c <exit>
void initLayer(Layer *l, FILE *weightsFile){
	int result=0;
    
    for (int o=0; o<NUMBER_OF_OUTPUT_CELLS; o++){
        
        for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     3f4:	e0bffb17 	ldw	r2,-20(fp)
     3f8:	10800044 	addi	r2,r2,1
     3fc:	e0bffb15 	stw	r2,-20(fp)
     400:	e0bffb17 	ldw	r2,-20(fp)
     404:	1080c410 	cmplti	r2,r2,784
     408:	103fd61e 	bne	r2,zero,364 <__alt_data_end+0xfffe0364>
                    printf("\nError when reading WEIGHTS file! Abort!\n");
                    exit(1);
                }
        }
        
        l->cell[o].output = 0;
     40c:	e43ffd17 	ldw	r16,-12(fp)
     410:	e0bffa17 	ldw	r2,-24(fp)
     414:	014c4404 	movi	r5,12560
     418:	1009883a 	mov	r4,r2
     41c:	000197c0 	call	197c <__mulsi3>
     420:	8085883a 	add	r2,r16,r2
     424:	108c4004 	addi	r2,r2,12544
     428:	10000015 	stw	zero,0(r2)
     42c:	10000115 	stw	zero,4(r2)
        l->cell[o].bias = 0;
     430:	e43ffd17 	ldw	r16,-12(fp)
     434:	e0bffa17 	ldw	r2,-24(fp)
     438:	014c4404 	movi	r5,12560
     43c:	1009883a 	mov	r4,r2
     440:	000197c0 	call	197c <__mulsi3>
     444:	8085883a 	add	r2,r16,r2
     448:	108c4204 	addi	r2,r2,12552
     44c:	10000015 	stw	zero,0(r2)
     450:	10000115 	stw	zero,4(r2)
 */

void initLayer(Layer *l, FILE *weightsFile){
	int result=0;
    
    for (int o=0; o<NUMBER_OF_OUTPUT_CELLS; o++){
     454:	e0bffa17 	ldw	r2,-24(fp)
     458:	10800044 	addi	r2,r2,1
     45c:	e0bffa15 	stw	r2,-24(fp)
     460:	e0bffa17 	ldw	r2,-24(fp)
     464:	10800290 	cmplti	r2,r2,10
     468:	103fbc1e 	bne	r2,zero,35c <__alt_data_end+0xfffe035c>
        }
        
        l->cell[o].output = 0;
        l->cell[o].bias = 0;
    }
}
     46c:	0001883a 	nop
     470:	e6ffff04 	addi	sp,fp,-4
     474:	dfc00217 	ldw	ra,8(sp)
     478:	df000117 	ldw	fp,4(sp)
     47c:	dc000017 	ldw	r16,0(sp)
     480:	dec00304 	addi	sp,sp,12
     484:	f800283a 	ret

00000488 <getLayerPrediction>:
/**
 * @details The output prediction is derived by simply sorting all output values
 * and using the index (=0-9 number) of the highest value as the prediction.
 */

int getLayerPrediction(Layer *l){
     488:	defff804 	addi	sp,sp,-32
     48c:	dfc00715 	stw	ra,28(sp)
     490:	df000615 	stw	fp,24(sp)
     494:	dc000515 	stw	r16,20(sp)
     498:	df000604 	addi	fp,sp,24
     49c:	e13ffe15 	stw	r4,-8(fp)
    
    double maxOut = 0;
     4a0:	e03ffa15 	stw	zero,-24(fp)
     4a4:	e03ffb15 	stw	zero,-20(fp)
    int maxInd = 0;
     4a8:	e03ffc15 	stw	zero,-16(fp)
    
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     4ac:	e03ffd15 	stw	zero,-12(fp)
     4b0:	00001f06 	br	530 <getLayerPrediction+0xa8>
        
        if (l->cell[i].output > maxOut){
     4b4:	e43ffe17 	ldw	r16,-8(fp)
     4b8:	e0bffd17 	ldw	r2,-12(fp)
     4bc:	014c4404 	movi	r5,12560
     4c0:	1009883a 	mov	r4,r2
     4c4:	000197c0 	call	197c <__mulsi3>
     4c8:	8085883a 	add	r2,r16,r2
     4cc:	110c4004 	addi	r4,r2,12544
     4d0:	20800017 	ldw	r2,0(r4)
     4d4:	20c00117 	ldw	r3,4(r4)
     4d8:	e1bffa17 	ldw	r6,-24(fp)
     4dc:	e1fffb17 	ldw	r7,-20(fp)
     4e0:	1009883a 	mov	r4,r2
     4e4:	180b883a 	mov	r5,r3
     4e8:	00036240 	call	3624 <__gedf2>
     4ec:	00800d0e 	bge	zero,r2,524 <getLayerPrediction+0x9c>
            maxOut = l->cell[i].output;
     4f0:	e43ffe17 	ldw	r16,-8(fp)
     4f4:	e0bffd17 	ldw	r2,-12(fp)
     4f8:	014c4404 	movi	r5,12560
     4fc:	1009883a 	mov	r4,r2
     500:	000197c0 	call	197c <__mulsi3>
     504:	8085883a 	add	r2,r16,r2
     508:	108c4004 	addi	r2,r2,12544
     50c:	10c00017 	ldw	r3,0(r2)
     510:	e0fffa15 	stw	r3,-24(fp)
     514:	10800117 	ldw	r2,4(r2)
     518:	e0bffb15 	stw	r2,-20(fp)
            maxInd = i;
     51c:	e0bffd17 	ldw	r2,-12(fp)
     520:	e0bffc15 	stw	r2,-16(fp)
int getLayerPrediction(Layer *l){
    
    double maxOut = 0;
    int maxInd = 0;
    
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     524:	e0bffd17 	ldw	r2,-12(fp)
     528:	10800044 	addi	r2,r2,1
     52c:	e0bffd15 	stw	r2,-12(fp)
     530:	e0bffd17 	ldw	r2,-12(fp)
     534:	10800290 	cmplti	r2,r2,10
     538:	103fde1e 	bne	r2,zero,4b4 <__alt_data_end+0xfffe04b4>
            maxOut = l->cell[i].output;
            maxInd = i;
        }
    }
    
    return maxInd;
     53c:	e0bffc17 	ldw	r2,-16(fp)
    
}
     540:	e6ffff04 	addi	sp,fp,-4
     544:	dfc00217 	ldw	ra,8(sp)
     548:	df000117 	ldw	fp,4(sp)
     54c:	dc000017 	ldw	r16,0(sp)
     550:	dec00304 	addi	sp,sp,12
     554:	f800283a 	ret

00000558 <setCellInput>:
 * of a given MNIST image, setting input vector cells to [0,1]
 * based on the pixels of the image.
 * Scalar pixel intensity [=grey-scale] is ignored, only 0 or 1 [=black-white].
 */

void setCellInput(Cell *c, MNIST_Image *img){
     558:	defffc04 	addi	sp,sp,-16
     55c:	df000315 	stw	fp,12(sp)
     560:	df000304 	addi	fp,sp,12
     564:	e13ffe15 	stw	r4,-8(fp)
     568:	e17fff15 	stw	r5,-4(fp)
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     56c:	e03ffd15 	stw	zero,-12(fp)
     570:	00001406 	br	5c4 <setCellInput+0x6c>
        c->input[i] = img->pixel[i] ? 1 : 0;
     574:	e0ffff17 	ldw	r3,-4(fp)
     578:	e0bffd17 	ldw	r2,-12(fp)
     57c:	1885883a 	add	r2,r3,r2
     580:	10800003 	ldbu	r2,0(r2)
     584:	10803fcc 	andi	r2,r2,255
     588:	10000326 	beq	r2,zero,598 <setCellInput+0x40>
     58c:	0005883a 	mov	r2,zero
     590:	00cffc34 	movhi	r3,16368
     594:	00000206 	br	5a0 <setCellInput+0x48>
     598:	0005883a 	mov	r2,zero
     59c:	0007883a 	mov	r3,zero
     5a0:	e17ffe17 	ldw	r5,-8(fp)
     5a4:	e13ffd17 	ldw	r4,-12(fp)
     5a8:	200890fa 	slli	r4,r4,3
     5ac:	2909883a 	add	r4,r5,r4
     5b0:	20800015 	stw	r2,0(r4)
     5b4:	20c00115 	stw	r3,4(r4)
 * Scalar pixel intensity [=grey-scale] is ignored, only 0 or 1 [=black-white].
 */

void setCellInput(Cell *c, MNIST_Image *img){
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     5b8:	e0bffd17 	ldw	r2,-12(fp)
     5bc:	10800044 	addi	r2,r2,1
     5c0:	e0bffd15 	stw	r2,-12(fp)
     5c4:	e0bffd17 	ldw	r2,-12(fp)
     5c8:	1080c410 	cmplti	r2,r2,784
     5cc:	103fe91e 	bne	r2,zero,574 <__alt_data_end+0xfffe0574>
        c->input[i] = img->pixel[i] ? 1 : 0;
    }
}
     5d0:	0001883a 	nop
     5d4:	e037883a 	mov	sp,fp
     5d8:	df000017 	ldw	fp,0(sp)
     5dc:	dec00104 	addi	sp,sp,4
     5e0:	f800283a 	ret

000005e4 <calcCellOutput>:
/**
 * @details Calculates a cell's output by suming all input-weight-products
 * and normalizes to [0-1].
 */

void calcCellOutput(Cell *c){
     5e4:	defffa04 	addi	sp,sp,-24
     5e8:	dfc00515 	stw	ra,20(sp)
     5ec:	df000415 	stw	fp,16(sp)
     5f0:	dc400315 	stw	r17,12(sp)
     5f4:	dc000215 	stw	r16,8(sp)
     5f8:	df000404 	addi	fp,sp,16
     5fc:	e13ffd15 	stw	r4,-12(fp)
    
    c->output=0;
     600:	e0bffd17 	ldw	r2,-12(fp)
     604:	100c4015 	stw	zero,12544(r2)
     608:	100c4115 	stw	zero,12548(r2)
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     60c:	e03ffc15 	stw	zero,-16(fp)
     610:	00002806 	br	6b4 <calcCellOutput+0xd0>
        c->output += c->input[i] * c->weight[i];
     614:	e0bffd17 	ldw	r2,-12(fp)
     618:	140c4017 	ldw	r16,12544(r2)
     61c:	144c4117 	ldw	r17,12548(r2)
     620:	e0fffd17 	ldw	r3,-12(fp)
     624:	e0bffc17 	ldw	r2,-16(fp)
     628:	100490fa 	slli	r2,r2,3
     62c:	1889883a 	add	r4,r3,r2
     630:	20800017 	ldw	r2,0(r4)
     634:	20c00117 	ldw	r3,4(r4)
     638:	e17ffd17 	ldw	r5,-12(fp)
     63c:	e13ffc17 	ldw	r4,-16(fp)
     640:	2100c404 	addi	r4,r4,784
     644:	200890fa 	slli	r4,r4,3
     648:	290d883a 	add	r6,r5,r4
     64c:	31000017 	ldw	r4,0(r6)
     650:	31400117 	ldw	r5,4(r6)
     654:	200d883a 	mov	r6,r4
     658:	280f883a 	mov	r7,r5
     65c:	1009883a 	mov	r4,r2
     660:	180b883a 	mov	r5,r3
     664:	00037000 	call	3700 <__muldf3>
     668:	1009883a 	mov	r4,r2
     66c:	180b883a 	mov	r5,r3
     670:	2005883a 	mov	r2,r4
     674:	2807883a 	mov	r3,r5
     678:	100d883a 	mov	r6,r2
     67c:	180f883a 	mov	r7,r3
     680:	8009883a 	mov	r4,r16
     684:	880b883a 	mov	r5,r17
     688:	00023a80 	call	23a8 <__adddf3>
     68c:	1009883a 	mov	r4,r2
     690:	180b883a 	mov	r5,r3
     694:	2005883a 	mov	r2,r4
     698:	2807883a 	mov	r3,r5
     69c:	e13ffd17 	ldw	r4,-12(fp)
     6a0:	208c4015 	stw	r2,12544(r4)
     6a4:	20cc4115 	stw	r3,12548(r4)

void calcCellOutput(Cell *c){
    
    c->output=0;
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     6a8:	e0bffc17 	ldw	r2,-16(fp)
     6ac:	10800044 	addi	r2,r2,1
     6b0:	e0bffc15 	stw	r2,-16(fp)
     6b4:	e0bffc17 	ldw	r2,-16(fp)
     6b8:	1080c410 	cmplti	r2,r2,784
     6bc:	103fd51e 	bne	r2,zero,614 <__alt_data_end+0xfffe0614>
        c->output += c->input[i] * c->weight[i];
    }
    
    c->output /= NUMBER_OF_INPUT_CELLS;             // normalize output (0-1)
     6c0:	e13ffd17 	ldw	r4,-12(fp)
     6c4:	208c4017 	ldw	r2,12544(r4)
     6c8:	20cc4117 	ldw	r3,12548(r4)
     6cc:	000d883a 	mov	r6,zero
     6d0:	01d02274 	movhi	r7,16521
     6d4:	39e00004 	addi	r7,r7,-32768
     6d8:	1009883a 	mov	r4,r2
     6dc:	180b883a 	mov	r5,r3
     6e0:	0002c540 	call	2c54 <__divdf3>
     6e4:	1009883a 	mov	r4,r2
     6e8:	180b883a 	mov	r5,r3
     6ec:	2005883a 	mov	r2,r4
     6f0:	2807883a 	mov	r3,r5
     6f4:	e13ffd17 	ldw	r4,-12(fp)
     6f8:	208c4015 	stw	r2,12544(r4)
     6fc:	20cc4115 	stw	r3,12548(r4)
}
     700:	0001883a 	nop
     704:	e6fffe04 	addi	sp,fp,-8
     708:	dfc00317 	ldw	ra,12(sp)
     70c:	df000217 	ldw	fp,8(sp)
     710:	dc400117 	ldw	r17,4(sp)
     714:	dc000017 	ldw	r16,0(sp)
     718:	dec00404 	addi	sp,sp,16
     71c:	f800283a 	ret

00000720 <getCellError>:

/**
 * @details Returns the difference between a target value and the cell's ouput
 */

double getCellError(Cell *c, int target){
     720:	defffa04 	addi	sp,sp,-24
     724:	dfc00515 	stw	ra,20(sp)
     728:	df000415 	stw	fp,16(sp)
     72c:	df000404 	addi	fp,sp,16
     730:	e13ffe15 	stw	r4,-8(fp)
     734:	e17fff15 	stw	r5,-4(fp)

    double err = target - c->output;
     738:	e13fff17 	ldw	r4,-4(fp)
     73c:	00048680 	call	4868 <__floatsidf>
     740:	1011883a 	mov	r8,r2
     744:	1813883a 	mov	r9,r3
     748:	e13ffe17 	ldw	r4,-8(fp)
     74c:	208c4017 	ldw	r2,12544(r4)
     750:	20cc4117 	ldw	r3,12548(r4)
     754:	100d883a 	mov	r6,r2
     758:	180f883a 	mov	r7,r3
     75c:	4009883a 	mov	r4,r8
     760:	480b883a 	mov	r5,r9
     764:	0003f6c0 	call	3f6c <__subdf3>
     768:	1009883a 	mov	r4,r2
     76c:	180b883a 	mov	r5,r3
     770:	e13ffc15 	stw	r4,-16(fp)
     774:	e17ffd15 	stw	r5,-12(fp)

    return err;
     778:	e0bffc17 	ldw	r2,-16(fp)
     77c:	e0fffd17 	ldw	r3,-12(fp)
     780:	1009883a 	mov	r4,r2
     784:	180b883a 	mov	r5,r3
}
     788:	2005883a 	mov	r2,r4
     78c:	2807883a 	mov	r3,r5
     790:	e037883a 	mov	sp,fp
     794:	dfc00117 	ldw	ra,4(sp)
     798:	df000017 	ldw	fp,0(sp)
     79c:	dec00204 	addi	sp,sp,8
     7a0:	f800283a 	ret

000007a4 <updateCellWeights>:

/**
 * @details Updates a cell's weights based on given error and LEARNING_RATE
 */

void updateCellWeights(Cell *c, double err){
     7a4:	defff804 	addi	sp,sp,-32
     7a8:	dfc00715 	stw	ra,28(sp)
     7ac:	df000615 	stw	fp,24(sp)
     7b0:	dc400515 	stw	r17,20(sp)
     7b4:	dc000415 	stw	r16,16(sp)
     7b8:	df000604 	addi	fp,sp,24
     7bc:	e13ffb15 	stw	r4,-20(fp)
     7c0:	e17ffc15 	stw	r5,-16(fp)
     7c4:	e1bffd15 	stw	r6,-12(fp)
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     7c8:	e03ffa15 	stw	zero,-24(fp)
     7cc:	00003406 	br	8a0 <updateCellWeights+0xfc>
        c->weight[i] += LEARNING_RATE * c->input[i] * err;
     7d0:	e0fffb17 	ldw	r3,-20(fp)
     7d4:	e0bffa17 	ldw	r2,-24(fp)
     7d8:	1080c404 	addi	r2,r2,784
     7dc:	100490fa 	slli	r2,r2,3
     7e0:	1885883a 	add	r2,r3,r2
     7e4:	14000017 	ldw	r16,0(r2)
     7e8:	14400117 	ldw	r17,4(r2)
     7ec:	e0fffb17 	ldw	r3,-20(fp)
     7f0:	e0bffa17 	ldw	r2,-24(fp)
     7f4:	100490fa 	slli	r2,r2,3
     7f8:	1889883a 	add	r4,r3,r2
     7fc:	20800017 	ldw	r2,0(r4)
     800:	20c00117 	ldw	r3,4(r4)
     804:	01a666b4 	movhi	r6,39322
     808:	31a66684 	addi	r6,r6,-26214
     80c:	01cfeab4 	movhi	r7,16298
     810:	39e66644 	addi	r7,r7,-26215
     814:	1009883a 	mov	r4,r2
     818:	180b883a 	mov	r5,r3
     81c:	00037000 	call	3700 <__muldf3>
     820:	1009883a 	mov	r4,r2
     824:	180b883a 	mov	r5,r3
     828:	2005883a 	mov	r2,r4
     82c:	2807883a 	mov	r3,r5
     830:	e1bffc17 	ldw	r6,-16(fp)
     834:	e1fffd17 	ldw	r7,-12(fp)
     838:	1009883a 	mov	r4,r2
     83c:	180b883a 	mov	r5,r3
     840:	00037000 	call	3700 <__muldf3>
     844:	1009883a 	mov	r4,r2
     848:	180b883a 	mov	r5,r3
     84c:	2005883a 	mov	r2,r4
     850:	2807883a 	mov	r3,r5
     854:	100d883a 	mov	r6,r2
     858:	180f883a 	mov	r7,r3
     85c:	8009883a 	mov	r4,r16
     860:	880b883a 	mov	r5,r17
     864:	00023a80 	call	23a8 <__adddf3>
     868:	1009883a 	mov	r4,r2
     86c:	180b883a 	mov	r5,r3
     870:	2005883a 	mov	r2,r4
     874:	2807883a 	mov	r3,r5
     878:	e17ffb17 	ldw	r5,-20(fp)
     87c:	e13ffa17 	ldw	r4,-24(fp)
     880:	2100c404 	addi	r4,r4,784
     884:	200890fa 	slli	r4,r4,3
     888:	2909883a 	add	r4,r5,r4
     88c:	20800015 	stw	r2,0(r4)
     890:	20c00115 	stw	r3,4(r4)
 * @details Updates a cell's weights based on given error and LEARNING_RATE
 */

void updateCellWeights(Cell *c, double err){
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     894:	e0bffa17 	ldw	r2,-24(fp)
     898:	10800044 	addi	r2,r2,1
     89c:	e0bffa15 	stw	r2,-24(fp)
     8a0:	e0bffa17 	ldw	r2,-24(fp)
     8a4:	1080c410 	cmplti	r2,r2,784
     8a8:	103fc91e 	bne	r2,zero,7d0 <__alt_data_end+0xfffe07d0>
        c->weight[i] += LEARNING_RATE * c->input[i] * err;
    }
}
     8ac:	0001883a 	nop
     8b0:	e6fffe04 	addi	sp,fp,-8
     8b4:	dfc00317 	ldw	ra,12(sp)
     8b8:	df000217 	ldw	fp,8(sp)
     8bc:	dc400117 	ldw	r17,4(sp)
     8c0:	dc000017 	ldw	r16,0(sp)
     8c4:	dec00404 	addi	sp,sp,16
     8c8:	f800283a 	ret

000008cc <trainCell>:
/**
 * @details Performs the training algorithm:
 * feeding input, calculate output, calculate error, update weights)
 */

void trainCell(Cell *c, MNIST_Image *img, int target){
     8cc:	defff904 	addi	sp,sp,-28
     8d0:	dfc00615 	stw	ra,24(sp)
     8d4:	df000515 	stw	fp,20(sp)
     8d8:	df000504 	addi	fp,sp,20
     8dc:	e13ffd15 	stw	r4,-12(fp)
     8e0:	e17ffe15 	stw	r5,-8(fp)
     8e4:	e1bfff15 	stw	r6,-4(fp)
    
    setCellInput(c, img);
     8e8:	e17ffe17 	ldw	r5,-8(fp)
     8ec:	e13ffd17 	ldw	r4,-12(fp)
     8f0:	00005580 	call	558 <setCellInput>
    calcCellOutput(c);
     8f4:	e13ffd17 	ldw	r4,-12(fp)
     8f8:	00005e40 	call	5e4 <calcCellOutput>
    
    // learning (by updating the weights)
    double err = getCellError(c, target);
     8fc:	e17fff17 	ldw	r5,-4(fp)
     900:	e13ffd17 	ldw	r4,-12(fp)
     904:	00007200 	call	720 <getCellError>
     908:	e0bffb15 	stw	r2,-20(fp)
     90c:	e0fffc15 	stw	r3,-16(fp)
    updateCellWeights(c, err);
     910:	e17ffb17 	ldw	r5,-20(fp)
     914:	e1bffc17 	ldw	r6,-16(fp)
     918:	e13ffd17 	ldw	r4,-12(fp)
     91c:	00007a40 	call	7a4 <updateCellWeights>
}
     920:	0001883a 	nop
     924:	e037883a 	mov	sp,fp
     928:	dfc00117 	ldw	ra,4(sp)
     92c:	df000017 	ldw	fp,0(sp)
     930:	dec00204 	addi	sp,sp,8
     934:	f800283a 	ret

00000938 <testCell>:
/**
 * @details Performs the testing of the trained network
 * Same as training a cell, but without updating weights (learning)
 */

void testCell(Cell *c, MNIST_Image *img, int target){
     938:	defffb04 	addi	sp,sp,-20
     93c:	dfc00415 	stw	ra,16(sp)
     940:	df000315 	stw	fp,12(sp)
     944:	df000304 	addi	fp,sp,12
     948:	e13ffd15 	stw	r4,-12(fp)
     94c:	e17ffe15 	stw	r5,-8(fp)
     950:	e1bfff15 	stw	r6,-4(fp)
    
    setCellInput(c, img);
     954:	e17ffe17 	ldw	r5,-8(fp)
     958:	e13ffd17 	ldw	r4,-12(fp)
     95c:	00005580 	call	558 <setCellInput>
    calcCellOutput(c);
     960:	e13ffd17 	ldw	r4,-12(fp)
     964:	00005e40 	call	5e4 <calcCellOutput>
    
}
     968:	0001883a 	nop
     96c:	e037883a 	mov	sp,fp
     970:	dfc00117 	ldw	ra,4(sp)
     974:	df000017 	ldw	fp,0(sp)
     978:	dec00204 	addi	sp,sp,8
     97c:	f800283a 	ret

00000980 <trainLayer>:
/**
 * @details Trains a layer by looping through and training its cells
 * @param l A pointer to the layer that is to be training
 */

void trainLayer(Layer *l){
     980:	deff1e04 	addi	sp,sp,-904
     984:	dfc0e115 	stw	ra,900(sp)
     988:	df00e015 	stw	fp,896(sp)
     98c:	df00e004 	addi	fp,sp,896
     990:	e13ff515 	stw	r4,-44(fp)
    
    // open MNIST files
    FILE *imageFile, *labelFile;
    imageFile = openMNISTImageFile(MNIST_TRAINING_SET_IMAGE_FILE_NAME);
     994:	01000074 	movhi	r4,1
     998:	210a0904 	addi	r4,r4,10276
     99c:	00016280 	call	1628 <openMNISTImageFile>
     9a0:	e0bf2315 	stw	r2,-884(fp)
    labelFile = openMNISTLabelFile(MNIST_TRAINING_SET_LABEL_FILE_NAME);
     9a4:	01000074 	movhi	r4,1
     9a8:	210a1104 	addi	r4,r4,10308
     9ac:	00016980 	call	1698 <openMNISTLabelFile>
     9b0:	e0bf2415 	stw	r2,-880(fp)
    
    
    // screen output for monitoring progress
    displayImageFrame(5,5);
     9b4:	01400144 	movi	r5,5
     9b8:	01000144 	movi	r4,5
     9bc:	0000e180 	call	e18 <displayImageFrame>

    int errCount = 0;
     9c0:	e03f2015 	stw	zero,-896(fp)
    
    // Loop through all images in the file
    for (int imgCount=0; imgCount<MNIST_MAX_TRAINING_IMAGES; imgCount++){
     9c4:	e03f2115 	stw	zero,-892(fp)
     9c8:	00005a06 	br	b34 <trainLayer+0x1b4>
        
        // display progress
        displayLoadingProgressTraining(imgCount,3,5);
     9cc:	01800144 	movi	r6,5
     9d0:	014000c4 	movi	r5,3
     9d4:	e13f2117 	ldw	r4,-892(fp)
     9d8:	00011380 	call	1138 <displayLoadingProgressTraining>
        
        // Reading next image and corresponding label
        MNIST_Image img = getImage(imageFile);
     9dc:	e0bf2704 	addi	r2,fp,-868
     9e0:	e17f2317 	ldw	r5,-884(fp)
     9e4:	1009883a 	mov	r4,r2
     9e8:	00017080 	call	1708 <getImage>
        MNIST_Label lbl = getLabel(labelFile);
     9ec:	e13f2417 	ldw	r4,-880(fp)
     9f0:	00017900 	call	1790 <getLabel>
     9f4:	e0bf2505 	stb	r2,-876(fp)
        
        // set target ouput of the number displayed in the current image (=label) to 1, all others to 0
        Vector targetOutput;
        targetOutput = getTargetOutput(lbl);
     9f8:	e0ff2503 	ldbu	r3,-876(fp)
     9fc:	e0bff604 	addi	r2,fp,-40
     a00:	180b883a 	mov	r5,r3
     a04:	1009883a 	mov	r4,r2
     a08:	000026c0 	call	26c <getTargetOutput>
     a0c:	e0bff617 	ldw	r2,-40(fp)
     a10:	e0bfeb15 	stw	r2,-84(fp)
     a14:	e0bff717 	ldw	r2,-36(fp)
     a18:	e0bfec15 	stw	r2,-80(fp)
     a1c:	e0bff817 	ldw	r2,-32(fp)
     a20:	e0bfed15 	stw	r2,-76(fp)
     a24:	e0bff917 	ldw	r2,-28(fp)
     a28:	e0bfee15 	stw	r2,-72(fp)
     a2c:	e0bffa17 	ldw	r2,-24(fp)
     a30:	e0bfef15 	stw	r2,-68(fp)
     a34:	e0bffb17 	ldw	r2,-20(fp)
     a38:	e0bff015 	stw	r2,-64(fp)
     a3c:	e0bffc17 	ldw	r2,-16(fp)
     a40:	e0bff115 	stw	r2,-60(fp)
     a44:	e0bffd17 	ldw	r2,-12(fp)
     a48:	e0bff215 	stw	r2,-56(fp)
     a4c:	e0bffe17 	ldw	r2,-8(fp)
     a50:	e0bff315 	stw	r2,-52(fp)
     a54:	e0bfff17 	ldw	r2,-4(fp)
     a58:	e0bff415 	stw	r2,-48(fp)
        
        displayImage(&img, 6,6);
     a5c:	e0bf2704 	addi	r2,fp,-868
     a60:	01800184 	movi	r6,6
     a64:	01400184 	movi	r5,6
     a68:	1009883a 	mov	r4,r2
     a6c:	0000f000 	call	f00 <displayImage>
     
        // loop through all output cells for the given image
        for (int i=0; i < NUMBER_OF_OUTPUT_CELLS; i++){
     a70:	e03f2215 	stw	zero,-888(fp)
     a74:	00001506 	br	acc <trainLayer+0x14c>
            trainCell(&l->cell[i], &img, targetOutput.val[i]);
     a78:	014c4404 	movi	r5,12560
     a7c:	e13f2217 	ldw	r4,-888(fp)
     a80:	000197c0 	call	197c <__mulsi3>
     a84:	1007883a 	mov	r3,r2
     a88:	e0bff517 	ldw	r2,-44(fp)
     a8c:	10c7883a 	add	r3,r2,r3
     a90:	e0bf2217 	ldw	r2,-888(fp)
     a94:	1085883a 	add	r2,r2,r2
     a98:	1085883a 	add	r2,r2,r2
     a9c:	e13f2004 	addi	r4,fp,-896
     aa0:	2085883a 	add	r2,r4,r2
     aa4:	1080cb04 	addi	r2,r2,812
     aa8:	11000017 	ldw	r4,0(r2)
     aac:	e0bf2704 	addi	r2,fp,-868
     ab0:	200d883a 	mov	r6,r4
     ab4:	100b883a 	mov	r5,r2
     ab8:	1809883a 	mov	r4,r3
     abc:	00008cc0 	call	8cc <trainCell>
        targetOutput = getTargetOutput(lbl);
        
        displayImage(&img, 6,6);
     
        // loop through all output cells for the given image
        for (int i=0; i < NUMBER_OF_OUTPUT_CELLS; i++){
     ac0:	e0bf2217 	ldw	r2,-888(fp)
     ac4:	10800044 	addi	r2,r2,1
     ac8:	e0bf2215 	stw	r2,-888(fp)
     acc:	e0bf2217 	ldw	r2,-888(fp)
     ad0:	10800290 	cmplti	r2,r2,10
     ad4:	103fe81e 	bne	r2,zero,a78 <__alt_data_end+0xfffe0a78>
            trainCell(&l->cell[i], &img, targetOutput.val[i]);
        }
        
        int predictedNum = getLayerPrediction(l);
     ad8:	e13ff517 	ldw	r4,-44(fp)
     adc:	00004880 	call	488 <getLayerPrediction>
     ae0:	e0bf2615 	stw	r2,-872(fp)
        if (predictedNum!=lbl) errCount++;
     ae4:	e0ff2503 	ldbu	r3,-876(fp)
     ae8:	e0bf2617 	ldw	r2,-872(fp)
     aec:	18800326 	beq	r3,r2,afc <trainLayer+0x17c>
     af0:	e0bf2017 	ldw	r2,-896(fp)
     af4:	10800044 	addi	r2,r2,1
     af8:	e0bf2015 	stw	r2,-896(fp)
        
        printf("\n      Prediction: %d   Actual: %d ",predictedNum, lbl);
     afc:	e0bf2503 	ldbu	r2,-876(fp)
     b00:	100d883a 	mov	r6,r2
     b04:	e17f2617 	ldw	r5,-872(fp)
     b08:	01000074 	movhi	r4,1
     b0c:	210a1904 	addi	r4,r4,10340
     b10:	0006dcc0 	call	6dcc <printf>

        displayProgress(imgCount, errCount, 3, 66);
     b14:	01c01084 	movi	r7,66
     b18:	018000c4 	movi	r6,3
     b1c:	e17f2017 	ldw	r5,-896(fp)
     b20:	e13f2117 	ldw	r4,-892(fp)
     b24:	00012b80 	call	12b8 <displayProgress>
    displayImageFrame(5,5);

    int errCount = 0;
    
    // Loop through all images in the file
    for (int imgCount=0; imgCount<MNIST_MAX_TRAINING_IMAGES; imgCount++){
     b28:	e0bf2117 	ldw	r2,-892(fp)
     b2c:	10800044 	addi	r2,r2,1
     b30:	e0bf2115 	stw	r2,-892(fp)
     b34:	e0bf2117 	ldw	r2,-892(fp)
     b38:	00fa97d4 	movui	r3,59999
     b3c:	18bfa30e 	bge	r3,r2,9cc <__alt_data_end+0xfffe09cc>
        displayProgress(imgCount, errCount, 3, 66);
        
    }
    
    // Close files
    fclose(imageFile);
     b40:	e13f2317 	ldw	r4,-884(fp)
     b44:	0004c840 	call	4c84 <fclose>
    fclose(labelFile);
     b48:	e13f2417 	ldw	r4,-880(fp)
     b4c:	0004c840 	call	4c84 <fclose>

}
     b50:	0001883a 	nop
     b54:	e037883a 	mov	sp,fp
     b58:	dfc00117 	ldw	ra,4(sp)
     b5c:	df000017 	ldw	fp,0(sp)
     b60:	dec00204 	addi	sp,sp,8
     b64:	f800283a 	ret

00000b68 <testLayer>:
 * @details Tests a layer by looping through and testing its cells
 * Exactly the same as TrainLayer() but WITHOUT LEARNING.
 * @param l A pointer to the layer that is to be training
 */

void testLayer(Layer *l){
     b68:	deff1e04 	addi	sp,sp,-904
     b6c:	dfc0e115 	stw	ra,900(sp)
     b70:	df00e015 	stw	fp,896(sp)
     b74:	df00e004 	addi	fp,sp,896
     b78:	e13ff515 	stw	r4,-44(fp)
    
    // open MNIST files
    FILE *imageFile, *labelFile;
    imageFile = openMNISTImageFile(MNIST_TESTING_SET_IMAGE_FILE_NAME);
     b7c:	01000074 	movhi	r4,1
     b80:	210a2204 	addi	r4,r4,10376
     b84:	00016280 	call	1628 <openMNISTImageFile>
     b88:	e0bf2315 	stw	r2,-884(fp)
    labelFile = openMNISTLabelFile(MNIST_TESTING_SET_LABEL_FILE_NAME);
     b8c:	01000074 	movhi	r4,1
     b90:	210a2904 	addi	r4,r4,10404
     b94:	00016980 	call	1698 <openMNISTLabelFile>
     b98:	e0bf2415 	stw	r2,-880(fp)
    
    
    // screen output for monitoring progress
    displayImageFrame(7,5);
     b9c:	01400144 	movi	r5,5
     ba0:	010001c4 	movi	r4,7
     ba4:	0000e180 	call	e18 <displayImageFrame>
    
    int errCount = 0;
     ba8:	e03f2015 	stw	zero,-896(fp)
    
    // Loop through all images in the file
    for (int imgCount=0; imgCount<MNIST_MAX_TESTING_IMAGES; imgCount++){
     bac:	e03f2115 	stw	zero,-892(fp)
     bb0:	00005a06 	br	d1c <testLayer+0x1b4>
        
        // display progress
        displayLoadingProgressTesting(imgCount,5,5);
     bb4:	01800144 	movi	r6,5
     bb8:	01400144 	movi	r5,5
     bbc:	e13f2117 	ldw	r4,-892(fp)
     bc0:	00011f80 	call	11f8 <displayLoadingProgressTesting>
        
        // Reading next image and corresponding label
        MNIST_Image img = getImage(imageFile);
     bc4:	e0bf2704 	addi	r2,fp,-868
     bc8:	e17f2317 	ldw	r5,-884(fp)
     bcc:	1009883a 	mov	r4,r2
     bd0:	00017080 	call	1708 <getImage>
        MNIST_Label lbl = getLabel(labelFile);
     bd4:	e13f2417 	ldw	r4,-880(fp)
     bd8:	00017900 	call	1790 <getLabel>
     bdc:	e0bf2505 	stb	r2,-876(fp)
        
        // set target ouput of the number displayed in the current image (=label) to 1, all others to 0
        Vector targetOutput;
        targetOutput = getTargetOutput(lbl);
     be0:	e0ff2503 	ldbu	r3,-876(fp)
     be4:	e0bff604 	addi	r2,fp,-40
     be8:	180b883a 	mov	r5,r3
     bec:	1009883a 	mov	r4,r2
     bf0:	000026c0 	call	26c <getTargetOutput>
     bf4:	e0bff617 	ldw	r2,-40(fp)
     bf8:	e0bfeb15 	stw	r2,-84(fp)
     bfc:	e0bff717 	ldw	r2,-36(fp)
     c00:	e0bfec15 	stw	r2,-80(fp)
     c04:	e0bff817 	ldw	r2,-32(fp)
     c08:	e0bfed15 	stw	r2,-76(fp)
     c0c:	e0bff917 	ldw	r2,-28(fp)
     c10:	e0bfee15 	stw	r2,-72(fp)
     c14:	e0bffa17 	ldw	r2,-24(fp)
     c18:	e0bfef15 	stw	r2,-68(fp)
     c1c:	e0bffb17 	ldw	r2,-20(fp)
     c20:	e0bff015 	stw	r2,-64(fp)
     c24:	e0bffc17 	ldw	r2,-16(fp)
     c28:	e0bff115 	stw	r2,-60(fp)
     c2c:	e0bffd17 	ldw	r2,-12(fp)
     c30:	e0bff215 	stw	r2,-56(fp)
     c34:	e0bffe17 	ldw	r2,-8(fp)
     c38:	e0bff315 	stw	r2,-52(fp)
     c3c:	e0bfff17 	ldw	r2,-4(fp)
     c40:	e0bff415 	stw	r2,-48(fp)
        
        displayImage(&img, 8,6);
     c44:	e0bf2704 	addi	r2,fp,-868
     c48:	01800184 	movi	r6,6
     c4c:	01400204 	movi	r5,8
     c50:	1009883a 	mov	r4,r2
     c54:	0000f000 	call	f00 <displayImage>
        
        // loop through all output cells for the given image
        for (int i=0; i < NUMBER_OF_OUTPUT_CELLS; i++){
     c58:	e03f2215 	stw	zero,-888(fp)
     c5c:	00001506 	br	cb4 <testLayer+0x14c>
            testCell(&l->cell[i], &img, targetOutput.val[i]);
     c60:	014c4404 	movi	r5,12560
     c64:	e13f2217 	ldw	r4,-888(fp)
     c68:	000197c0 	call	197c <__mulsi3>
     c6c:	1007883a 	mov	r3,r2
     c70:	e0bff517 	ldw	r2,-44(fp)
     c74:	10c7883a 	add	r3,r2,r3
     c78:	e0bf2217 	ldw	r2,-888(fp)
     c7c:	1085883a 	add	r2,r2,r2
     c80:	1085883a 	add	r2,r2,r2
     c84:	e13f2004 	addi	r4,fp,-896
     c88:	2085883a 	add	r2,r4,r2
     c8c:	1080cb04 	addi	r2,r2,812
     c90:	11000017 	ldw	r4,0(r2)
     c94:	e0bf2704 	addi	r2,fp,-868
     c98:	200d883a 	mov	r6,r4
     c9c:	100b883a 	mov	r5,r2
     ca0:	1809883a 	mov	r4,r3
     ca4:	00009380 	call	938 <testCell>
        targetOutput = getTargetOutput(lbl);
        
        displayImage(&img, 8,6);
        
        // loop through all output cells for the given image
        for (int i=0; i < NUMBER_OF_OUTPUT_CELLS; i++){
     ca8:	e0bf2217 	ldw	r2,-888(fp)
     cac:	10800044 	addi	r2,r2,1
     cb0:	e0bf2215 	stw	r2,-888(fp)
     cb4:	e0bf2217 	ldw	r2,-888(fp)
     cb8:	10800290 	cmplti	r2,r2,10
     cbc:	103fe81e 	bne	r2,zero,c60 <__alt_data_end+0xfffe0c60>
            testCell(&l->cell[i], &img, targetOutput.val[i]);
        }
        
        int predictedNum = getLayerPrediction(l);
     cc0:	e13ff517 	ldw	r4,-44(fp)
     cc4:	00004880 	call	488 <getLayerPrediction>
     cc8:	e0bf2615 	stw	r2,-872(fp)
        if (predictedNum!=lbl) errCount++;
     ccc:	e0ff2503 	ldbu	r3,-876(fp)
     cd0:	e0bf2617 	ldw	r2,-872(fp)
     cd4:	18800326 	beq	r3,r2,ce4 <testLayer+0x17c>
     cd8:	e0bf2017 	ldw	r2,-896(fp)
     cdc:	10800044 	addi	r2,r2,1
     ce0:	e0bf2015 	stw	r2,-896(fp)
        
        printf("\n      Prediction: %d   Actual: %d ",predictedNum, lbl);
     ce4:	e0bf2503 	ldbu	r2,-876(fp)
     ce8:	100d883a 	mov	r6,r2
     cec:	e17f2617 	ldw	r5,-872(fp)
     cf0:	01000074 	movhi	r4,1
     cf4:	210a1904 	addi	r4,r4,10340
     cf8:	0006dcc0 	call	6dcc <printf>
        
        displayProgress(imgCount, errCount, 5, 66);
     cfc:	01c01084 	movi	r7,66
     d00:	01800144 	movi	r6,5
     d04:	e17f2017 	ldw	r5,-896(fp)
     d08:	e13f2117 	ldw	r4,-892(fp)
     d0c:	00012b80 	call	12b8 <displayProgress>
    displayImageFrame(7,5);
    
    int errCount = 0;
    
    // Loop through all images in the file
    for (int imgCount=0; imgCount<MNIST_MAX_TESTING_IMAGES; imgCount++){
     d10:	e0bf2117 	ldw	r2,-892(fp)
     d14:	10800044 	addi	r2,r2,1
     d18:	e0bf2115 	stw	r2,-892(fp)
     d1c:	e0bf2117 	ldw	r2,-892(fp)
     d20:	1089c410 	cmplti	r2,r2,10000
     d24:	103fa31e 	bne	r2,zero,bb4 <__alt_data_end+0xfffe0bb4>
        displayProgress(imgCount, errCount, 5, 66);
        
    }
    
    // Close files
    fclose(imageFile);
     d28:	e13f2317 	ldw	r4,-884(fp)
     d2c:	0004c840 	call	4c84 <fclose>
    fclose(labelFile);
     d30:	e13f2417 	ldw	r4,-880(fp)
     d34:	0004c840 	call	4c84 <fclose>
    
}
     d38:	0001883a 	nop
     d3c:	e037883a 	mov	sp,fp
     d40:	dfc00117 	ldw	ra,4(sp)
     d44:	df000017 	ldw	fp,0(sp)
     d48:	dec00204 	addi	sp,sp,8
     d4c:	f800283a 	ret

00000d50 <main>:

/**
 * @details Main function to run MNIST-1LNN
 */

int main(int argc, const char * argv[]) {
     d50:	defffe04 	addi	sp,sp,-8
     d54:	dfc00115 	stw	ra,4(sp)
     d58:	df000015 	stw	fp,0(sp)
     d5c:	d839883a 	mov	fp,sp
     d60:	023fffb4 	movhi	r8,65534
     d64:	42055504 	addi	r8,r8,5460
     d68:	da37883a 	add	sp,sp,r8
     d6c:	008000b4 	movhi	r2,2
     d70:	10baa904 	addi	r2,r2,-5468
     d74:	00ffffb4 	movhi	r3,65534
     d78:	18c55504 	addi	r3,r3,5460
     d7c:	1f07883a 	add	r3,r3,fp
     d80:	1885883a 	add	r2,r3,r2
     d84:	11000015 	stw	r4,0(r2)
     d88:	008000b4 	movhi	r2,2
     d8c:	10baaa04 	addi	r2,r2,-5464
     d90:	00ffffb4 	movhi	r3,65534
     d94:	18c55504 	addi	r3,r3,5460
     d98:	1f07883a 	add	r3,r3,fp
     d9c:	1885883a 	add	r2,r3,r2
     da0:	11400015 	stw	r5,0(r2)

    Layer outputLayer;
    FILE *weightsFile;

    weightsFile=fopen(MNIST_WEIGHTS_INIT_FILE_NAME, "rb");
     da4:	01400074 	movhi	r5,1
     da8:	294a3004 	addi	r5,r5,10432
     dac:	01000074 	movhi	r4,1
     db0:	210a3104 	addi	r4,r4,10436
     db4:	00053e40 	call	53e4 <fopen>
     db8:	00ffffb4 	movhi	r3,65534
     dbc:	18c55504 	addi	r3,r3,5460
     dc0:	1f07883a 	add	r3,r3,fp
     dc4:	18800015 	stw	r2,0(r3)
    initLayer(&outputLayer, weightsFile);
     dc8:	00ffffb4 	movhi	r3,65534
     dcc:	18c55604 	addi	r3,r3,5464
     dd0:	e0c5883a 	add	r2,fp,r3
     dd4:	00ffffb4 	movhi	r3,65534
     dd8:	18c55504 	addi	r3,r3,5460
     ddc:	1f07883a 	add	r3,r3,fp
     de0:	19400017 	ldw	r5,0(r3)
     de4:	1009883a 	mov	r4,r2
     de8:	00003340 	call	334 <initLayer>
    fclose(weightsFile);
     dec:	00bfffb4 	movhi	r2,65534
     df0:	10855504 	addi	r2,r2,5460
     df4:	1705883a 	add	r2,r2,fp
     df8:	11000017 	ldw	r4,0(r2)
     dfc:	0004c840 	call	4c84 <fclose>
    
    //testLayer(&outputLayer);

    
    return 0;
     e00:	0005883a 	mov	r2,zero
}
     e04:	e037883a 	mov	sp,fp
     e08:	dfc00117 	ldw	ra,4(sp)
     e0c:	df000017 	ldw	fp,0(sp)
     e10:	dec00204 	addi	sp,sp,8
     e14:	f800283a 	ret

00000e18 <displayImageFrame>:

/**
 * @details Outputs a 28x28 text frame at a defined screen position
 */

void displayImageFrame(int row, int col){
     e18:	defff904 	addi	sp,sp,-28
     e1c:	dfc00615 	stw	ra,24(sp)
     e20:	df000515 	stw	fp,20(sp)
     e24:	df000504 	addi	fp,sp,20
     e28:	e13ffe15 	stw	r4,-8(fp)
     e2c:	e17fff15 	stw	r5,-4(fp)
    
    if (col!=0 && row!=0) locateCursor(row, col);
     e30:	e0bfff17 	ldw	r2,-4(fp)
     e34:	10000526 	beq	r2,zero,e4c <displayImageFrame+0x34>
     e38:	e0bffe17 	ldw	r2,-8(fp)
     e3c:	10000326 	beq	r2,zero,e4c <displayImageFrame+0x34>
     e40:	e17fff17 	ldw	r5,-4(fp)
     e44:	e13ffe17 	ldw	r4,-8(fp)
     e48:	00019340 	call	1934 <locateCursor>

    printf("------------------------------\n");
     e4c:	01000074 	movhi	r4,1
     e50:	210a3404 	addi	r4,r4,10448
     e54:	0006ee80 	call	6ee8 <puts>
    
    for (int i=0; i<MNIST_IMG_HEIGHT; i++){
     e58:	e03ffb15 	stw	zero,-20(fp)
     e5c:	00001106 	br	ea4 <displayImageFrame+0x8c>
        for (int o=0; o<col-1; o++) printf(" ");
     e60:	e03ffc15 	stw	zero,-16(fp)
     e64:	00000506 	br	e7c <displayImageFrame+0x64>
     e68:	01000804 	movi	r4,32
     e6c:	0006e100 	call	6e10 <putchar>
     e70:	e0bffc17 	ldw	r2,-16(fp)
     e74:	10800044 	addi	r2,r2,1
     e78:	e0bffc15 	stw	r2,-16(fp)
     e7c:	e0bfff17 	ldw	r2,-4(fp)
     e80:	10bfffc4 	addi	r2,r2,-1
     e84:	e0fffc17 	ldw	r3,-16(fp)
     e88:	18bff716 	blt	r3,r2,e68 <__alt_data_end+0xfffe0e68>
        printf("|                            |\n");
     e8c:	01000074 	movhi	r4,1
     e90:	210a3c04 	addi	r4,r4,10480
     e94:	0006ee80 	call	6ee8 <puts>
    
    if (col!=0 && row!=0) locateCursor(row, col);

    printf("------------------------------\n");
    
    for (int i=0; i<MNIST_IMG_HEIGHT; i++){
     e98:	e0bffb17 	ldw	r2,-20(fp)
     e9c:	10800044 	addi	r2,r2,1
     ea0:	e0bffb15 	stw	r2,-20(fp)
     ea4:	e0bffb17 	ldw	r2,-20(fp)
     ea8:	10800710 	cmplti	r2,r2,28
     eac:	103fec1e 	bne	r2,zero,e60 <__alt_data_end+0xfffe0e60>
        for (int o=0; o<col-1; o++) printf(" ");
        printf("|                            |\n");
    }

    for (int o=0; o<col-1; o++) printf(" ");
     eb0:	e03ffd15 	stw	zero,-12(fp)
     eb4:	00000506 	br	ecc <displayImageFrame+0xb4>
     eb8:	01000804 	movi	r4,32
     ebc:	0006e100 	call	6e10 <putchar>
     ec0:	e0bffd17 	ldw	r2,-12(fp)
     ec4:	10800044 	addi	r2,r2,1
     ec8:	e0bffd15 	stw	r2,-12(fp)
     ecc:	e0bfff17 	ldw	r2,-4(fp)
     ed0:	10bfffc4 	addi	r2,r2,-1
     ed4:	e0fffd17 	ldw	r3,-12(fp)
     ed8:	18bff716 	blt	r3,r2,eb8 <__alt_data_end+0xfffe0eb8>
    printf("------------------------------");
     edc:	01000074 	movhi	r4,1
     ee0:	210a3404 	addi	r4,r4,10448
     ee4:	0006dcc0 	call	6dcc <printf>
    
}
     ee8:	0001883a 	nop
     eec:	e037883a 	mov	sp,fp
     ef0:	dfc00117 	ldw	ra,4(sp)
     ef4:	df000017 	ldw	fp,0(sp)
     ef8:	dec00204 	addi	sp,sp,8
     efc:	f800283a 	ret

00000f00 <displayImage>:

/**
 * @details Outputs a 28x28 MNIST image as charachters ("."s and "X"s)
 */

void displayImage(MNIST_Image *img, int row, int col){
     f00:	deffed04 	addi	sp,sp,-76
     f04:	dfc01215 	stw	ra,72(sp)
     f08:	df001115 	stw	fp,68(sp)
     f0c:	ddc01015 	stw	r23,64(sp)
     f10:	dd800f15 	stw	r22,60(sp)
     f14:	dd400e15 	stw	r21,56(sp)
     f18:	dd000d15 	stw	r20,52(sp)
     f1c:	dcc00c15 	stw	r19,48(sp)
     f20:	dc800b15 	stw	r18,44(sp)
     f24:	dc400a15 	stw	r17,40(sp)
     f28:	dc000915 	stw	r16,36(sp)
     f2c:	df001104 	addi	fp,sp,68
     f30:	e13ff415 	stw	r4,-48(fp)
     f34:	e17ff515 	stw	r5,-44(fp)
     f38:	e1bff615 	stw	r6,-40(fp)
     f3c:	d805883a 	mov	r2,sp
     f40:	e0bff715 	stw	r2,-36(fp)

    char imgStr[(MNIST_IMG_HEIGHT * MNIST_IMG_WIDTH)+((col+1)*MNIST_IMG_HEIGHT)+1];
     f44:	e0bff617 	ldw	r2,-40(fp)
     f48:	10800044 	addi	r2,r2,1
     f4c:	01400704 	movi	r5,28
     f50:	1009883a 	mov	r4,r2
     f54:	000197c0 	call	197c <__mulsi3>
     f58:	1080c444 	addi	r2,r2,785
     f5c:	10ffffc4 	addi	r3,r2,-1
     f60:	e0fff215 	stw	r3,-56(fp)
     f64:	1007883a 	mov	r3,r2
     f68:	182d883a 	mov	r22,r3
     f6c:	002f883a 	mov	r23,zero
     f70:	b006d77a 	srli	r3,r22,29
     f74:	b82690fa 	slli	r19,r23,3
     f78:	1ce6b03a 	or	r19,r3,r19
     f7c:	b02490fa 	slli	r18,r22,3
     f80:	1007883a 	mov	r3,r2
     f84:	1829883a 	mov	r20,r3
     f88:	002b883a 	mov	r21,zero
     f8c:	a006d77a 	srli	r3,r20,29
     f90:	a82290fa 	slli	r17,r21,3
     f94:	1c62b03a 	or	r17,r3,r17
     f98:	a02090fa 	slli	r16,r20,3
     f9c:	108000c4 	addi	r2,r2,3
     fa0:	1004d0ba 	srli	r2,r2,2
     fa4:	1085883a 	add	r2,r2,r2
     fa8:	1085883a 	add	r2,r2,r2
     fac:	d8b7c83a 	sub	sp,sp,r2
     fb0:	d805883a 	mov	r2,sp
     fb4:	1005883a 	mov	r2,r2
     fb8:	e0bff315 	stw	r2,-52(fp)
    strcpy(imgStr, "");
     fbc:	e0bff317 	ldw	r2,-52(fp)
     fc0:	10000005 	stb	zero,0(r2)
    
    for (int y=0; y<MNIST_IMG_HEIGHT; y++){
     fc4:	e03fef15 	stw	zero,-68(fp)
     fc8:	00003d06 	br	10c0 <displayImage+0x1c0>
        
        for (int o=0; o<col-2; o++) strcat(imgStr," ");
     fcc:	e03ff015 	stw	zero,-64(fp)
     fd0:	00000a06 	br	ffc <displayImage+0xfc>
     fd4:	e43ff317 	ldw	r16,-52(fp)
     fd8:	8009883a 	mov	r4,r16
     fdc:	00073900 	call	7390 <strlen>
     fe0:	8085883a 	add	r2,r16,r2
     fe4:	00c00804 	movi	r3,32
     fe8:	10c00005 	stb	r3,0(r2)
     fec:	10000045 	stb	zero,1(r2)
     ff0:	e0bff017 	ldw	r2,-64(fp)
     ff4:	10800044 	addi	r2,r2,1
     ff8:	e0bff015 	stw	r2,-64(fp)
     ffc:	e0bff617 	ldw	r2,-40(fp)
    1000:	10bfff84 	addi	r2,r2,-2
    1004:	e0fff017 	ldw	r3,-64(fp)
    1008:	18bff216 	blt	r3,r2,fd4 <__alt_data_end+0xfffe0fd4>
        strcat(imgStr,"|");
    100c:	e43ff317 	ldw	r16,-52(fp)
    1010:	8009883a 	mov	r4,r16
    1014:	00073900 	call	7390 <strlen>
    1018:	8085883a 	add	r2,r16,r2
    101c:	00c01f04 	movi	r3,124
    1020:	10c00005 	stb	r3,0(r2)
    1024:	10000045 	stb	zero,1(r2)
        
        for (int x=0; x<MNIST_IMG_WIDTH; x++){
    1028:	e03ff115 	stw	zero,-60(fp)
    102c:	00001706 	br	108c <displayImage+0x18c>
            strcat(imgStr, img->pixel[y*MNIST_IMG_HEIGHT+x] ? "X" : "." );
    1030:	e43ff317 	ldw	r16,-52(fp)
    1034:	01400704 	movi	r5,28
    1038:	e13fef17 	ldw	r4,-68(fp)
    103c:	000197c0 	call	197c <__mulsi3>
    1040:	1007883a 	mov	r3,r2
    1044:	e0bff117 	ldw	r2,-60(fp)
    1048:	1885883a 	add	r2,r3,r2
    104c:	e0fff417 	ldw	r3,-48(fp)
    1050:	1885883a 	add	r2,r3,r2
    1054:	10800003 	ldbu	r2,0(r2)
    1058:	10803fcc 	andi	r2,r2,255
    105c:	10000326 	beq	r2,zero,106c <displayImage+0x16c>
    1060:	00800074 	movhi	r2,1
    1064:	108a4404 	addi	r2,r2,10512
    1068:	00000206 	br	1074 <displayImage+0x174>
    106c:	00800074 	movhi	r2,1
    1070:	108a4504 	addi	r2,r2,10516
    1074:	100b883a 	mov	r5,r2
    1078:	8009883a 	mov	r4,r16
    107c:	000727c0 	call	727c <strcat>
    for (int y=0; y<MNIST_IMG_HEIGHT; y++){
        
        for (int o=0; o<col-2; o++) strcat(imgStr," ");
        strcat(imgStr,"|");
        
        for (int x=0; x<MNIST_IMG_WIDTH; x++){
    1080:	e0bff117 	ldw	r2,-60(fp)
    1084:	10800044 	addi	r2,r2,1
    1088:	e0bff115 	stw	r2,-60(fp)
    108c:	e0bff117 	ldw	r2,-60(fp)
    1090:	10800710 	cmplti	r2,r2,28
    1094:	103fe61e 	bne	r2,zero,1030 <__alt_data_end+0xfffe1030>
            strcat(imgStr, img->pixel[y*MNIST_IMG_HEIGHT+x] ? "X" : "." );
        }
        strcat(imgStr,"\n");
    1098:	e43ff317 	ldw	r16,-52(fp)
    109c:	8009883a 	mov	r4,r16
    10a0:	00073900 	call	7390 <strlen>
    10a4:	8085883a 	add	r2,r16,r2
    10a8:	00c00284 	movi	r3,10
    10ac:	10c00005 	stb	r3,0(r2)
    10b0:	10000045 	stb	zero,1(r2)
void displayImage(MNIST_Image *img, int row, int col){

    char imgStr[(MNIST_IMG_HEIGHT * MNIST_IMG_WIDTH)+((col+1)*MNIST_IMG_HEIGHT)+1];
    strcpy(imgStr, "");
    
    for (int y=0; y<MNIST_IMG_HEIGHT; y++){
    10b4:	e0bfef17 	ldw	r2,-68(fp)
    10b8:	10800044 	addi	r2,r2,1
    10bc:	e0bfef15 	stw	r2,-68(fp)
    10c0:	e0bfef17 	ldw	r2,-68(fp)
    10c4:	10800710 	cmplti	r2,r2,28
    10c8:	103fc01e 	bne	r2,zero,fcc <__alt_data_end+0xfffe0fcc>
            strcat(imgStr, img->pixel[y*MNIST_IMG_HEIGHT+x] ? "X" : "." );
        }
        strcat(imgStr,"\n");
    }
    
    if (col!=0 && row!=0) locateCursor(row, 0);
    10cc:	e0bff617 	ldw	r2,-40(fp)
    10d0:	10000526 	beq	r2,zero,10e8 <displayImage+0x1e8>
    10d4:	e0bff517 	ldw	r2,-44(fp)
    10d8:	10000326 	beq	r2,zero,10e8 <displayImage+0x1e8>
    10dc:	000b883a 	mov	r5,zero
    10e0:	e13ff517 	ldw	r4,-44(fp)
    10e4:	00019340 	call	1934 <locateCursor>
    printf("%s",imgStr);
    10e8:	e0bff317 	ldw	r2,-52(fp)
    10ec:	100b883a 	mov	r5,r2
    10f0:	01000074 	movhi	r4,1
    10f4:	210a4604 	addi	r4,r4,10520
    10f8:	0006dcc0 	call	6dcc <printf>
    10fc:	e6fff717 	ldw	sp,-36(fp)
}
    1100:	0001883a 	nop
    1104:	e6fff804 	addi	sp,fp,-32
    1108:	dfc00917 	ldw	ra,36(sp)
    110c:	df000817 	ldw	fp,32(sp)
    1110:	ddc00717 	ldw	r23,28(sp)
    1114:	dd800617 	ldw	r22,24(sp)
    1118:	dd400517 	ldw	r21,20(sp)
    111c:	dd000417 	ldw	r20,16(sp)
    1120:	dcc00317 	ldw	r19,12(sp)
    1124:	dc800217 	ldw	r18,8(sp)
    1128:	dc400117 	ldw	r17,4(sp)
    112c:	dc000017 	ldw	r16,0(sp)
    1130:	dec00a04 	addi	sp,sp,40
    1134:	f800283a 	ret

00001138 <displayLoadingProgressTraining>:

/**
 * @details Outputs reading progress while processing MNIST training images
 */

void displayLoadingProgressTraining(int imgCount, int y, int x){
    1138:	defff904 	addi	sp,sp,-28
    113c:	dfc00615 	stw	ra,24(sp)
    1140:	df000515 	stw	fp,20(sp)
    1144:	dc000415 	stw	r16,16(sp)
    1148:	df000504 	addi	fp,sp,20
    114c:	e13ffc15 	stw	r4,-16(fp)
    1150:	e17ffd15 	stw	r5,-12(fp)
    1154:	e1bffe15 	stw	r6,-8(fp)
    
    float progress = (float)(imgCount+1)/(float)(MNIST_MAX_TRAINING_IMAGES)*100;
    1158:	e0bffc17 	ldw	r2,-16(fp)
    115c:	10800044 	addi	r2,r2,1
    1160:	1009883a 	mov	r4,r2
    1164:	00022840 	call	2284 <__floatsisf>
    1168:	1007883a 	mov	r3,r2
    116c:	0151dab4 	movhi	r5,18282
    1170:	29580004 	addi	r5,r5,24576
    1174:	1809883a 	mov	r4,r3
    1178:	00019a40 	call	19a4 <__divsf3>
    117c:	1007883a 	mov	r3,r2
    1180:	1805883a 	mov	r2,r3
    1184:	0150b234 	movhi	r5,17096
    1188:	1009883a 	mov	r4,r2
    118c:	0001de40 	call	1de4 <__mulsf3>
    1190:	1007883a 	mov	r3,r2
    1194:	e0fffb15 	stw	r3,-20(fp)
    
    if (x!=0 && y!=0) locateCursor(y, x);
    1198:	e0bffe17 	ldw	r2,-8(fp)
    119c:	10000526 	beq	r2,zero,11b4 <displayLoadingProgressTraining+0x7c>
    11a0:	e0bffd17 	ldw	r2,-12(fp)
    11a4:	10000326 	beq	r2,zero,11b4 <displayLoadingProgressTraining+0x7c>
    11a8:	e17ffe17 	ldw	r5,-8(fp)
    11ac:	e13ffd17 	ldw	r4,-12(fp)
    11b0:	00019340 	call	1934 <locateCursor>
    
    printf("1: TRAINING: Reading image No. %5d of %5d images [%d%%]",(imgCount+1),MNIST_MAX_TRAINING_IMAGES,(int)progress);
    11b4:	e0bffc17 	ldw	r2,-16(fp)
    11b8:	14000044 	addi	r16,r2,1
    11bc:	e13ffb17 	ldw	r4,-20(fp)
    11c0:	00022140 	call	2214 <__fixsfsi>
    11c4:	100f883a 	mov	r7,r2
    11c8:	01ba9814 	movui	r6,60000
    11cc:	800b883a 	mov	r5,r16
    11d0:	01000074 	movhi	r4,1
    11d4:	210a4704 	addi	r4,r4,10524
    11d8:	0006dcc0 	call	6dcc <printf>
    
}
    11dc:	0001883a 	nop
    11e0:	e6ffff04 	addi	sp,fp,-4
    11e4:	dfc00217 	ldw	ra,8(sp)
    11e8:	df000117 	ldw	fp,4(sp)
    11ec:	dc000017 	ldw	r16,0(sp)
    11f0:	dec00304 	addi	sp,sp,12
    11f4:	f800283a 	ret

000011f8 <displayLoadingProgressTesting>:

/**
 * @details Outputs reading progress while processing MNIST testing images
 */

void displayLoadingProgressTesting(int imgCount, int y, int x){
    11f8:	defff904 	addi	sp,sp,-28
    11fc:	dfc00615 	stw	ra,24(sp)
    1200:	df000515 	stw	fp,20(sp)
    1204:	dc000415 	stw	r16,16(sp)
    1208:	df000504 	addi	fp,sp,20
    120c:	e13ffc15 	stw	r4,-16(fp)
    1210:	e17ffd15 	stw	r5,-12(fp)
    1214:	e1bffe15 	stw	r6,-8(fp)
    
    float progress = (float)(imgCount+1)/(float)(MNIST_MAX_TESTING_IMAGES)*100;
    1218:	e0bffc17 	ldw	r2,-16(fp)
    121c:	10800044 	addi	r2,r2,1
    1220:	1009883a 	mov	r4,r2
    1224:	00022840 	call	2284 <__floatsisf>
    1228:	1007883a 	mov	r3,r2
    122c:	01518734 	movhi	r5,17948
    1230:	29500004 	addi	r5,r5,16384
    1234:	1809883a 	mov	r4,r3
    1238:	00019a40 	call	19a4 <__divsf3>
    123c:	1007883a 	mov	r3,r2
    1240:	1805883a 	mov	r2,r3
    1244:	0150b234 	movhi	r5,17096
    1248:	1009883a 	mov	r4,r2
    124c:	0001de40 	call	1de4 <__mulsf3>
    1250:	1007883a 	mov	r3,r2
    1254:	e0fffb15 	stw	r3,-20(fp)
    
    if (x!=0 && y!=0) locateCursor(y, x);
    1258:	e0bffe17 	ldw	r2,-8(fp)
    125c:	10000526 	beq	r2,zero,1274 <displayLoadingProgressTesting+0x7c>
    1260:	e0bffd17 	ldw	r2,-12(fp)
    1264:	10000326 	beq	r2,zero,1274 <displayLoadingProgressTesting+0x7c>
    1268:	e17ffe17 	ldw	r5,-8(fp)
    126c:	e13ffd17 	ldw	r4,-12(fp)
    1270:	00019340 	call	1934 <locateCursor>
    
    printf("2: TESTING:  Reading image No. %5d of %5d images [%d%%]\n                                  ",(imgCount+1),MNIST_MAX_TESTING_IMAGES,(int)progress);
    1274:	e0bffc17 	ldw	r2,-16(fp)
    1278:	14000044 	addi	r16,r2,1
    127c:	e13ffb17 	ldw	r4,-20(fp)
    1280:	00022140 	call	2214 <__fixsfsi>
    1284:	100f883a 	mov	r7,r2
    1288:	0189c404 	movi	r6,10000
    128c:	800b883a 	mov	r5,r16
    1290:	01000074 	movhi	r4,1
    1294:	210a5504 	addi	r4,r4,10580
    1298:	0006dcc0 	call	6dcc <printf>
    
}
    129c:	0001883a 	nop
    12a0:	e6ffff04 	addi	sp,fp,-4
    12a4:	dfc00217 	ldw	ra,8(sp)
    12a8:	df000117 	ldw	fp,4(sp)
    12ac:	dc000017 	ldw	r16,0(sp)
    12b0:	dec00304 	addi	sp,sp,12
    12b4:	f800283a 	ret

000012b8 <displayProgress>:

/**
 * @details Outputs image recognition progress and error count
 */

void displayProgress(int imgCount, int errCount, int y, int x){
    12b8:	defff504 	addi	sp,sp,-44
    12bc:	dfc00a15 	stw	ra,40(sp)
    12c0:	df000915 	stw	fp,36(sp)
    12c4:	dc400815 	stw	r17,32(sp)
    12c8:	dc000715 	stw	r16,28(sp)
    12cc:	df000904 	addi	fp,sp,36
    12d0:	e13ffa15 	stw	r4,-24(fp)
    12d4:	e17ffb15 	stw	r5,-20(fp)
    12d8:	e1bffc15 	stw	r6,-16(fp)
    12dc:	e1fffd15 	stw	r7,-12(fp)
    
    double successRate = 1 - ((double)errCount/(double)(imgCount+1));
    12e0:	e13ffb17 	ldw	r4,-20(fp)
    12e4:	00048680 	call	4868 <__floatsidf>
    12e8:	1021883a 	mov	r16,r2
    12ec:	1823883a 	mov	r17,r3
    12f0:	e0bffa17 	ldw	r2,-24(fp)
    12f4:	10800044 	addi	r2,r2,1
    12f8:	1009883a 	mov	r4,r2
    12fc:	00048680 	call	4868 <__floatsidf>
    1300:	1009883a 	mov	r4,r2
    1304:	180b883a 	mov	r5,r3
    1308:	200d883a 	mov	r6,r4
    130c:	280f883a 	mov	r7,r5
    1310:	8009883a 	mov	r4,r16
    1314:	880b883a 	mov	r5,r17
    1318:	0002c540 	call	2c54 <__divdf3>
    131c:	1009883a 	mov	r4,r2
    1320:	180b883a 	mov	r5,r3
    1324:	2005883a 	mov	r2,r4
    1328:	2807883a 	mov	r3,r5
    132c:	100d883a 	mov	r6,r2
    1330:	180f883a 	mov	r7,r3
    1334:	0009883a 	mov	r4,zero
    1338:	014ffc34 	movhi	r5,16368
    133c:	0003f6c0 	call	3f6c <__subdf3>
    1340:	1009883a 	mov	r4,r2
    1344:	180b883a 	mov	r5,r3
    1348:	e13ff815 	stw	r4,-32(fp)
    134c:	e17ff915 	stw	r5,-28(fp)
    
    if (x!=0 && y!=0) locateCursor(y, x);
    1350:	e0bffd17 	ldw	r2,-12(fp)
    1354:	10000526 	beq	r2,zero,136c <displayProgress+0xb4>
    1358:	e0bffc17 	ldw	r2,-16(fp)
    135c:	10000326 	beq	r2,zero,136c <displayProgress+0xb4>
    1360:	e17ffd17 	ldw	r5,-12(fp)
    1364:	e13ffc17 	ldw	r4,-16(fp)
    1368:	00019340 	call	1934 <locateCursor>
    
    printf("Result: Correct=%5d  Incorrect=%5d  Success-Rate=%5.2f%% \n",imgCount+1-errCount, errCount, successRate*100);
    136c:	e0bffa17 	ldw	r2,-24(fp)
    1370:	10c00044 	addi	r3,r2,1
    1374:	e0bffb17 	ldw	r2,-20(fp)
    1378:	18a1c83a 	sub	r16,r3,r2
    137c:	000d883a 	mov	r6,zero
    1380:	01d01674 	movhi	r7,16473
    1384:	e13ff817 	ldw	r4,-32(fp)
    1388:	e17ff917 	ldw	r5,-28(fp)
    138c:	00037000 	call	3700 <__muldf3>
    1390:	1009883a 	mov	r4,r2
    1394:	180b883a 	mov	r5,r3
    1398:	2005883a 	mov	r2,r4
    139c:	2807883a 	mov	r3,r5
    13a0:	d8c00015 	stw	r3,0(sp)
    13a4:	100f883a 	mov	r7,r2
    13a8:	e1bffb17 	ldw	r6,-20(fp)
    13ac:	800b883a 	mov	r5,r16
    13b0:	01000074 	movhi	r4,1
    13b4:	210a6c04 	addi	r4,r4,10672
    13b8:	0006dcc0 	call	6dcc <printf>
    
    
}
    13bc:	0001883a 	nop
    13c0:	e6fffe04 	addi	sp,fp,-8
    13c4:	dfc00317 	ldw	ra,12(sp)
    13c8:	df000217 	ldw	fp,8(sp)
    13cc:	dc400117 	ldw	r17,4(sp)
    13d0:	dc000017 	ldw	r16,0(sp)
    13d4:	dec00404 	addi	sp,sp,16
    13d8:	f800283a 	ret

000013dc <flipBytes>:
 * @details Reverse byte order in 32bit numbers
 * MNIST files contain all numbers in reversed byte order,
 * and hence must be reversed before using
 */

uint32_t flipBytes(uint32_t n){
    13dc:	defffa04 	addi	sp,sp,-24
    13e0:	df000515 	stw	fp,20(sp)
    13e4:	df000504 	addi	fp,sp,20
    13e8:	e13fff15 	stw	r4,-4(fp)
    
    uint32_t b0,b1,b2,b3;
    
    b0 = (n & 0x000000ff) <<  24u;
    13ec:	e0bfff17 	ldw	r2,-4(fp)
    13f0:	1004963a 	slli	r2,r2,24
    13f4:	e0bffb15 	stw	r2,-20(fp)
    b1 = (n & 0x0000ff00) <<   8u;
    13f8:	e0bfff17 	ldw	r2,-4(fp)
    13fc:	10bfc00c 	andi	r2,r2,65280
    1400:	1004923a 	slli	r2,r2,8
    1404:	e0bffc15 	stw	r2,-16(fp)
    b2 = (n & 0x00ff0000) >>   8u;
    1408:	e0bfff17 	ldw	r2,-4(fp)
    140c:	10803fec 	andhi	r2,r2,255
    1410:	1004d23a 	srli	r2,r2,8
    1414:	e0bffd15 	stw	r2,-12(fp)
    b3 = (n & 0xff000000) >>  24u;
    1418:	e0bfff17 	ldw	r2,-4(fp)
    141c:	1004d63a 	srli	r2,r2,24
    1420:	e0bffe15 	stw	r2,-8(fp)
    
    return (b0 | b1 | b2 | b3);
    1424:	e0fffb17 	ldw	r3,-20(fp)
    1428:	e0bffc17 	ldw	r2,-16(fp)
    142c:	1886b03a 	or	r3,r3,r2
    1430:	e0bffd17 	ldw	r2,-12(fp)
    1434:	1886b03a 	or	r3,r3,r2
    1438:	e0bffe17 	ldw	r2,-8(fp)
    143c:	1884b03a 	or	r2,r3,r2
    
}
    1440:	e037883a 	mov	sp,fp
    1444:	df000017 	ldw	fp,0(sp)
    1448:	dec00104 	addi	sp,sp,4
    144c:	f800283a 	ret

00001450 <readImageFileHeader>:
/**
 * @details Read MNIST image file header
 * @see http://yann.lecun.com/exdb/mnist/ for definition details
 */

void readImageFileHeader(FILE *imageFile, MNIST_ImageFileHeader *ifh){
    1450:	defffc04 	addi	sp,sp,-16
    1454:	dfc00315 	stw	ra,12(sp)
    1458:	df000215 	stw	fp,8(sp)
    145c:	df000204 	addi	fp,sp,8
    1460:	e13ffe15 	stw	r4,-8(fp)
    1464:	e17fff15 	stw	r5,-4(fp)
    
    ifh->magicNumber =0;
    1468:	e0bfff17 	ldw	r2,-4(fp)
    146c:	10000015 	stw	zero,0(r2)
    ifh->maxImages   =0;
    1470:	e0bfff17 	ldw	r2,-4(fp)
    1474:	10000115 	stw	zero,4(r2)
    ifh->imgWidth    =0;
    1478:	e0bfff17 	ldw	r2,-4(fp)
    147c:	10000215 	stw	zero,8(r2)
    ifh->imgHeight   =0;
    1480:	e0bfff17 	ldw	r2,-4(fp)
    1484:	10000315 	stw	zero,12(r2)
    
    fread(&ifh->magicNumber, 4, 1, imageFile);
    1488:	e0bfff17 	ldw	r2,-4(fp)
    148c:	e1fffe17 	ldw	r7,-8(fp)
    1490:	01800044 	movi	r6,1
    1494:	01400104 	movi	r5,4
    1498:	1009883a 	mov	r4,r2
    149c:	00056380 	call	5638 <fread>
    ifh->magicNumber = flipBytes(ifh->magicNumber);
    14a0:	e0bfff17 	ldw	r2,-4(fp)
    14a4:	10800017 	ldw	r2,0(r2)
    14a8:	1009883a 	mov	r4,r2
    14ac:	00013dc0 	call	13dc <flipBytes>
    14b0:	1007883a 	mov	r3,r2
    14b4:	e0bfff17 	ldw	r2,-4(fp)
    14b8:	10c00015 	stw	r3,0(r2)
    
    fread(&ifh->maxImages, 4, 1, imageFile);
    14bc:	e0bfff17 	ldw	r2,-4(fp)
    14c0:	10800104 	addi	r2,r2,4
    14c4:	e1fffe17 	ldw	r7,-8(fp)
    14c8:	01800044 	movi	r6,1
    14cc:	01400104 	movi	r5,4
    14d0:	1009883a 	mov	r4,r2
    14d4:	00056380 	call	5638 <fread>
    ifh->maxImages = flipBytes(ifh->maxImages);
    14d8:	e0bfff17 	ldw	r2,-4(fp)
    14dc:	10800117 	ldw	r2,4(r2)
    14e0:	1009883a 	mov	r4,r2
    14e4:	00013dc0 	call	13dc <flipBytes>
    14e8:	1007883a 	mov	r3,r2
    14ec:	e0bfff17 	ldw	r2,-4(fp)
    14f0:	10c00115 	stw	r3,4(r2)
    
    fread(&ifh->imgWidth, 4, 1, imageFile);
    14f4:	e0bfff17 	ldw	r2,-4(fp)
    14f8:	10800204 	addi	r2,r2,8
    14fc:	e1fffe17 	ldw	r7,-8(fp)
    1500:	01800044 	movi	r6,1
    1504:	01400104 	movi	r5,4
    1508:	1009883a 	mov	r4,r2
    150c:	00056380 	call	5638 <fread>
    ifh->imgWidth = flipBytes(ifh->imgWidth);
    1510:	e0bfff17 	ldw	r2,-4(fp)
    1514:	10800217 	ldw	r2,8(r2)
    1518:	1009883a 	mov	r4,r2
    151c:	00013dc0 	call	13dc <flipBytes>
    1520:	1007883a 	mov	r3,r2
    1524:	e0bfff17 	ldw	r2,-4(fp)
    1528:	10c00215 	stw	r3,8(r2)
    
    fread(&ifh->imgHeight, 4, 1, imageFile);
    152c:	e0bfff17 	ldw	r2,-4(fp)
    1530:	10800304 	addi	r2,r2,12
    1534:	e1fffe17 	ldw	r7,-8(fp)
    1538:	01800044 	movi	r6,1
    153c:	01400104 	movi	r5,4
    1540:	1009883a 	mov	r4,r2
    1544:	00056380 	call	5638 <fread>
    ifh->imgHeight = flipBytes(ifh->imgHeight);
    1548:	e0bfff17 	ldw	r2,-4(fp)
    154c:	10800317 	ldw	r2,12(r2)
    1550:	1009883a 	mov	r4,r2
    1554:	00013dc0 	call	13dc <flipBytes>
    1558:	1007883a 	mov	r3,r2
    155c:	e0bfff17 	ldw	r2,-4(fp)
    1560:	10c00315 	stw	r3,12(r2)
}
    1564:	0001883a 	nop
    1568:	e037883a 	mov	sp,fp
    156c:	dfc00117 	ldw	ra,4(sp)
    1570:	df000017 	ldw	fp,0(sp)
    1574:	dec00204 	addi	sp,sp,8
    1578:	f800283a 	ret

0000157c <readLabelFileHeader>:
/**
 * @details Read MNIST label file header
 * @see http://yann.lecun.com/exdb/mnist/ for definition details
 */

void readLabelFileHeader(FILE *imageFile, MNIST_LabelFileHeader *lfh){
    157c:	defffc04 	addi	sp,sp,-16
    1580:	dfc00315 	stw	ra,12(sp)
    1584:	df000215 	stw	fp,8(sp)
    1588:	df000204 	addi	fp,sp,8
    158c:	e13ffe15 	stw	r4,-8(fp)
    1590:	e17fff15 	stw	r5,-4(fp)
    
    lfh->magicNumber =0;
    1594:	e0bfff17 	ldw	r2,-4(fp)
    1598:	10000015 	stw	zero,0(r2)
    lfh->maxImages   =0;
    159c:	e0bfff17 	ldw	r2,-4(fp)
    15a0:	10000115 	stw	zero,4(r2)
    
    fread(&lfh->magicNumber, 4, 1, imageFile);
    15a4:	e0bfff17 	ldw	r2,-4(fp)
    15a8:	e1fffe17 	ldw	r7,-8(fp)
    15ac:	01800044 	movi	r6,1
    15b0:	01400104 	movi	r5,4
    15b4:	1009883a 	mov	r4,r2
    15b8:	00056380 	call	5638 <fread>
    lfh->magicNumber = flipBytes(lfh->magicNumber);
    15bc:	e0bfff17 	ldw	r2,-4(fp)
    15c0:	10800017 	ldw	r2,0(r2)
    15c4:	1009883a 	mov	r4,r2
    15c8:	00013dc0 	call	13dc <flipBytes>
    15cc:	1007883a 	mov	r3,r2
    15d0:	e0bfff17 	ldw	r2,-4(fp)
    15d4:	10c00015 	stw	r3,0(r2)
    
    fread(&lfh->maxImages, 4, 1, imageFile);
    15d8:	e0bfff17 	ldw	r2,-4(fp)
    15dc:	10800104 	addi	r2,r2,4
    15e0:	e1fffe17 	ldw	r7,-8(fp)
    15e4:	01800044 	movi	r6,1
    15e8:	01400104 	movi	r5,4
    15ec:	1009883a 	mov	r4,r2
    15f0:	00056380 	call	5638 <fread>
    lfh->maxImages = flipBytes(lfh->maxImages);
    15f4:	e0bfff17 	ldw	r2,-4(fp)
    15f8:	10800117 	ldw	r2,4(r2)
    15fc:	1009883a 	mov	r4,r2
    1600:	00013dc0 	call	13dc <flipBytes>
    1604:	1007883a 	mov	r3,r2
    1608:	e0bfff17 	ldw	r2,-4(fp)
    160c:	10c00115 	stw	r3,4(r2)
    
}
    1610:	0001883a 	nop
    1614:	e037883a 	mov	sp,fp
    1618:	dfc00117 	ldw	ra,4(sp)
    161c:	df000017 	ldw	fp,0(sp)
    1620:	dec00204 	addi	sp,sp,8
    1624:	f800283a 	ret

00001628 <openMNISTImageFile>:
 * @details Open MNIST image file and read header info
 * by reading the header info, the read pointer
 * is moved to the position of the 1st IMAGE
 */

FILE *openMNISTImageFile(char *fileName){
    1628:	defff804 	addi	sp,sp,-32
    162c:	dfc00715 	stw	ra,28(sp)
    1630:	df000615 	stw	fp,24(sp)
    1634:	df000604 	addi	fp,sp,24
    1638:	e13fff15 	stw	r4,-4(fp)

    FILE *imageFile;
    imageFile = fopen (fileName, "rb");
    163c:	01400074 	movhi	r5,1
    1640:	294a7b04 	addi	r5,r5,10732
    1644:	e13fff17 	ldw	r4,-4(fp)
    1648:	00053e40 	call	53e4 <fopen>
    164c:	e0bffa15 	stw	r2,-24(fp)
    if (imageFile == NULL) {
    1650:	e0bffa17 	ldw	r2,-24(fp)
    1654:	1000061e 	bne	r2,zero,1670 <openMNISTImageFile+0x48>
        printf("Abort! Could not fine MNIST IMAGE file: %s\n",fileName);
    1658:	e17fff17 	ldw	r5,-4(fp)
    165c:	01000074 	movhi	r4,1
    1660:	210a7c04 	addi	r4,r4,10736
    1664:	0006dcc0 	call	6dcc <printf>
        exit(0);
    1668:	0009883a 	mov	r4,zero
    166c:	0004b5c0 	call	4b5c <exit>
    }

    MNIST_ImageFileHeader imageFileHeader;
    readImageFileHeader(imageFile, &imageFileHeader);
    1670:	e0bffb04 	addi	r2,fp,-20
    1674:	100b883a 	mov	r5,r2
    1678:	e13ffa17 	ldw	r4,-24(fp)
    167c:	00014500 	call	1450 <readImageFileHeader>
    
    return imageFile;
    1680:	e0bffa17 	ldw	r2,-24(fp)
}
    1684:	e037883a 	mov	sp,fp
    1688:	dfc00117 	ldw	ra,4(sp)
    168c:	df000017 	ldw	fp,0(sp)
    1690:	dec00204 	addi	sp,sp,8
    1694:	f800283a 	ret

00001698 <openMNISTLabelFile>:
 * @details Open MNIST label file and read header info
 * by reading the header info, the read pointer
 * is moved to the position of the 1st LABEL
 */

FILE *openMNISTLabelFile(char *fileName){
    1698:	defffa04 	addi	sp,sp,-24
    169c:	dfc00515 	stw	ra,20(sp)
    16a0:	df000415 	stw	fp,16(sp)
    16a4:	df000404 	addi	fp,sp,16
    16a8:	e13fff15 	stw	r4,-4(fp)
    
    FILE *labelFile;
    labelFile = fopen (fileName, "rb");
    16ac:	01400074 	movhi	r5,1
    16b0:	294a7b04 	addi	r5,r5,10732
    16b4:	e13fff17 	ldw	r4,-4(fp)
    16b8:	00053e40 	call	53e4 <fopen>
    16bc:	e0bffc15 	stw	r2,-16(fp)
    if (labelFile == NULL) {
    16c0:	e0bffc17 	ldw	r2,-16(fp)
    16c4:	1000061e 	bne	r2,zero,16e0 <openMNISTLabelFile+0x48>
        printf("Abort! Could not find MNIST LABEL file: %s\n",fileName);
    16c8:	e17fff17 	ldw	r5,-4(fp)
    16cc:	01000074 	movhi	r4,1
    16d0:	210a8704 	addi	r4,r4,10780
    16d4:	0006dcc0 	call	6dcc <printf>
        exit(0);
    16d8:	0009883a 	mov	r4,zero
    16dc:	0004b5c0 	call	4b5c <exit>
    }

    MNIST_LabelFileHeader labelFileHeader;
    readLabelFileHeader(labelFile, &labelFileHeader);
    16e0:	e0bffd04 	addi	r2,fp,-12
    16e4:	100b883a 	mov	r5,r2
    16e8:	e13ffc17 	ldw	r4,-16(fp)
    16ec:	000157c0 	call	157c <readLabelFileHeader>
    
    return labelFile;
    16f0:	e0bffc17 	ldw	r2,-16(fp)
}
    16f4:	e037883a 	mov	sp,fp
    16f8:	dfc00117 	ldw	ra,4(sp)
    16fc:	df000017 	ldw	fp,0(sp)
    1700:	dec00204 	addi	sp,sp,8
    1704:	f800283a 	ret

00001708 <getImage>:

/**
 * @details Returns the next image in the given MNIST image file
 */

MNIST_Image getImage(FILE *imageFile){
    1708:	deff3704 	addi	sp,sp,-804
    170c:	dfc0c815 	stw	ra,800(sp)
    1710:	df00c715 	stw	fp,796(sp)
    1714:	df00c704 	addi	fp,sp,796
    1718:	e13ffe15 	stw	r4,-8(fp)
    171c:	e17fff15 	stw	r5,-4(fp)
    
    MNIST_Image img;
    size_t result;
    result = fread(&img, sizeof(img), 1, imageFile);
    1720:	e0bf3a04 	addi	r2,fp,-792
    1724:	e1ffff17 	ldw	r7,-4(fp)
    1728:	01800044 	movi	r6,1
    172c:	0140c404 	movi	r5,784
    1730:	1009883a 	mov	r4,r2
    1734:	00056380 	call	5638 <fread>
    1738:	e0bf3915 	stw	r2,-796(fp)
    if (result!=1) {
    173c:	e0bf3917 	ldw	r2,-796(fp)
    1740:	10800060 	cmpeqi	r2,r2,1
    1744:	1000051e 	bne	r2,zero,175c <getImage+0x54>
        printf("\nError when reading IMAGE file! Abort!\n");
    1748:	01000074 	movhi	r4,1
    174c:	210a9204 	addi	r4,r4,10824
    1750:	0006ee80 	call	6ee8 <puts>
        exit(1);
    1754:	01000044 	movi	r4,1
    1758:	0004b5c0 	call	4b5c <exit>
    }
    
    return img;
    175c:	e0bffe17 	ldw	r2,-8(fp)
    1760:	1009883a 	mov	r4,r2
    1764:	e0bf3a04 	addi	r2,fp,-792
    1768:	00c0c404 	movi	r3,784
    176c:	180d883a 	mov	r6,r3
    1770:	100b883a 	mov	r5,r2
    1774:	0006acc0 	call	6acc <memcpy>
}
    1778:	e0bffe17 	ldw	r2,-8(fp)
    177c:	e037883a 	mov	sp,fp
    1780:	dfc00117 	ldw	ra,4(sp)
    1784:	df000017 	ldw	fp,0(sp)
    1788:	dec00204 	addi	sp,sp,8
    178c:	f800283a 	ret

00001790 <getLabel>:

/**
 * @details Returns the next label in the given MNIST label file
 */

MNIST_Label getLabel(FILE *labelFile){
    1790:	defffb04 	addi	sp,sp,-20
    1794:	dfc00415 	stw	ra,16(sp)
    1798:	df000315 	stw	fp,12(sp)
    179c:	df000304 	addi	fp,sp,12
    17a0:	e13fff15 	stw	r4,-4(fp)
    
    MNIST_Label lbl;
    size_t result;
    result = fread(&lbl, sizeof(lbl), 1, labelFile);
    17a4:	e0bffe04 	addi	r2,fp,-8
    17a8:	e1ffff17 	ldw	r7,-4(fp)
    17ac:	01800044 	movi	r6,1
    17b0:	01400044 	movi	r5,1
    17b4:	1009883a 	mov	r4,r2
    17b8:	00056380 	call	5638 <fread>
    17bc:	e0bffd15 	stw	r2,-12(fp)
    if (result!=1) {
    17c0:	e0bffd17 	ldw	r2,-12(fp)
    17c4:	10800060 	cmpeqi	r2,r2,1
    17c8:	1000051e 	bne	r2,zero,17e0 <getLabel+0x50>
        printf("\nError when reading LABEL file! Abort!\n");
    17cc:	01000074 	movhi	r4,1
    17d0:	210a9c04 	addi	r4,r4,10864
    17d4:	0006ee80 	call	6ee8 <puts>
        exit(1);
    17d8:	01000044 	movi	r4,1
    17dc:	0004b5c0 	call	4b5c <exit>
    }
    
    return lbl;
    17e0:	e0bffe03 	ldbu	r2,-8(fp)
}
    17e4:	e037883a 	mov	sp,fp
    17e8:	dfc00117 	ldw	ra,4(sp)
    17ec:	df000017 	ldw	fp,0(sp)
    17f0:	dec00204 	addi	sp,sp,8
    17f4:	f800283a 	ret

000017f8 <clearScreen>:

/**
 * @details Clear terminal screen by printing an escape sequence
 */

void clearScreen(){
    17f8:	defffe04 	addi	sp,sp,-8
    17fc:	dfc00115 	stw	ra,4(sp)
    1800:	df000015 	stw	fp,0(sp)
    1804:	d839883a 	mov	fp,sp
    printf("\e[1;1H\e[2J");
    1808:	01000074 	movhi	r4,1
    180c:	210aa604 	addi	r4,r4,10904
    1810:	0006dcc0 	call	6dcc <printf>
}
    1814:	0001883a 	nop
    1818:	e037883a 	mov	sp,fp
    181c:	dfc00117 	ldw	ra,4(sp)
    1820:	df000017 	ldw	fp,0(sp)
    1824:	dec00204 	addi	sp,sp,8
    1828:	f800283a 	ret

0000182c <setColor>:

/**
 * @details Set text color in terminal by printing an escape sequence
 */

void setColor(Color c){
    182c:	defffb04 	addi	sp,sp,-20
    1830:	dfc00415 	stw	ra,16(sp)
    1834:	df000315 	stw	fp,12(sp)
    1838:	df000304 	addi	fp,sp,12
    183c:	e13fff15 	stw	r4,-4(fp)
    char esc[5];
    strcpy(esc, "0;00");    // default WHITE
    1840:	008c0c34 	movhi	r2,12336
    1844:	108ecc04 	addi	r2,r2,15152
    1848:	e0bffd15 	stw	r2,-12(fp)
    184c:	e03ffe05 	stb	zero,-8(fp)
    switch (c) {
    1850:	e0bfff17 	ldw	r2,-4(fp)
    1854:	108001a8 	cmpgeui	r2,r2,6
    1858:	10002b1e 	bne	r2,zero,1908 <setColor+0xdc>
    185c:	e0bfff17 	ldw	r2,-4(fp)
    1860:	100690ba 	slli	r3,r2,2
    1864:	00800034 	movhi	r2,0
    1868:	10861e04 	addi	r2,r2,6264
    186c:	1885883a 	add	r2,r3,r2
    1870:	10800017 	ldw	r2,0(r2)
    1874:	1000683a 	jmp	r2
    1878:	00001890 	cmplti	zero,zero,98
    187c:	000018a4 	muli	zero,zero,98
    1880:	000018b8 	rdprs	zero,zero,98
    1884:	000018cc 	andi	zero,zero,99
    1888:	000018e0 	cmpeqi	zero,zero,99
    188c:	000018f4 	movhi	zero,99
        case WHITE : strcpy(esc, "0;00");
    1890:	008c0c34 	movhi	r2,12336
    1894:	108ecc04 	addi	r2,r2,15152
    1898:	e0bffd15 	stw	r2,-12(fp)
    189c:	e03ffe05 	stb	zero,-8(fp)
            break;
    18a0:	00001906 	br	1908 <setColor+0xdc>
        case RED   : strcpy(esc, "1;31");
    18a4:	008c4cf4 	movhi	r2,12595
    18a8:	108ecc44 	addi	r2,r2,15153
    18ac:	e0bffd15 	stw	r2,-12(fp)
    18b0:	e03ffe05 	stb	zero,-8(fp)
            break;
    18b4:	00001406 	br	1908 <setColor+0xdc>
        case GREEN : strcpy(esc, "1;32");
    18b8:	008c8cf4 	movhi	r2,12851
    18bc:	108ecc44 	addi	r2,r2,15153
    18c0:	e0bffd15 	stw	r2,-12(fp)
    18c4:	e03ffe05 	stb	zero,-8(fp)
            break;
    18c8:	00000f06 	br	1908 <setColor+0xdc>
        case YELLOW: strcpy(esc, "1;33");
    18cc:	008cccf4 	movhi	r2,13107
    18d0:	108ecc44 	addi	r2,r2,15153
    18d4:	e0bffd15 	stw	r2,-12(fp)
    18d8:	e03ffe05 	stb	zero,-8(fp)
            break;
    18dc:	00000a06 	br	1908 <setColor+0xdc>
        case BLUE  : strcpy(esc, "1;34");
    18e0:	008d0cf4 	movhi	r2,13363
    18e4:	108ecc44 	addi	r2,r2,15153
    18e8:	e0bffd15 	stw	r2,-12(fp)
    18ec:	e03ffe05 	stb	zero,-8(fp)
            break;
    18f0:	00000506 	br	1908 <setColor+0xdc>
        case CYAN  : strcpy(esc, "1;36");
    18f4:	008d8cf4 	movhi	r2,13875
    18f8:	108ecc44 	addi	r2,r2,15153
    18fc:	e0bffd15 	stw	r2,-12(fp)
    1900:	e03ffe05 	stb	zero,-8(fp)
            break;
    1904:	0001883a 	nop
    }
    printf("%c[%sm",27,esc);
    1908:	e1bffd04 	addi	r6,fp,-12
    190c:	014006c4 	movi	r5,27
    1910:	01000074 	movhi	r4,1
    1914:	210aa904 	addi	r4,r4,10916
    1918:	0006dcc0 	call	6dcc <printf>
}
    191c:	0001883a 	nop
    1920:	e037883a 	mov	sp,fp
    1924:	dfc00117 	ldw	ra,4(sp)
    1928:	df000017 	ldw	fp,0(sp)
    192c:	dec00204 	addi	sp,sp,8
    1930:	f800283a 	ret

00001934 <locateCursor>:

/**
 * @details Set cursor position to given coordinates in the terminal window
 */

void locateCursor(const int row, const int col){
    1934:	defffc04 	addi	sp,sp,-16
    1938:	dfc00315 	stw	ra,12(sp)
    193c:	df000215 	stw	fp,8(sp)
    1940:	df000204 	addi	fp,sp,8
    1944:	e13ffe15 	stw	r4,-8(fp)
    1948:	e17fff15 	stw	r5,-4(fp)
    printf("%c[%d;%dH",27,row,col);
    194c:	e1ffff17 	ldw	r7,-4(fp)
    1950:	e1bffe17 	ldw	r6,-8(fp)
    1954:	014006c4 	movi	r5,27
    1958:	01000074 	movhi	r4,1
    195c:	210aab04 	addi	r4,r4,10924
    1960:	0006dcc0 	call	6dcc <printf>
}
    1964:	0001883a 	nop
    1968:	e037883a 	mov	sp,fp
    196c:	dfc00117 	ldw	ra,4(sp)
    1970:	df000017 	ldw	fp,0(sp)
    1974:	dec00204 	addi	sp,sp,8
    1978:	f800283a 	ret

0000197c <__mulsi3>:
    197c:	0005883a 	mov	r2,zero
    1980:	20000726 	beq	r4,zero,19a0 <__mulsi3+0x24>
    1984:	20c0004c 	andi	r3,r4,1
    1988:	2008d07a 	srli	r4,r4,1
    198c:	18000126 	beq	r3,zero,1994 <__mulsi3+0x18>
    1990:	1145883a 	add	r2,r2,r5
    1994:	294b883a 	add	r5,r5,r5
    1998:	203ffa1e 	bne	r4,zero,1984 <__alt_data_end+0xfffe1984>
    199c:	f800283a 	ret
    19a0:	f800283a 	ret

000019a4 <__divsf3>:
    19a4:	defff504 	addi	sp,sp,-44
    19a8:	200cd5fa 	srli	r6,r4,23
    19ac:	dcc00415 	stw	r19,16(sp)
    19b0:	2026d7fa 	srli	r19,r4,31
    19b4:	00c02034 	movhi	r3,128
    19b8:	dd800715 	stw	r22,28(sp)
    19bc:	dd000515 	stw	r20,20(sp)
    19c0:	dc800315 	stw	r18,12(sp)
    19c4:	18ffffc4 	addi	r3,r3,-1
    19c8:	dfc00a15 	stw	ra,40(sp)
    19cc:	df000915 	stw	fp,36(sp)
    19d0:	ddc00815 	stw	r23,32(sp)
    19d4:	dd400615 	stw	r21,24(sp)
    19d8:	dc400215 	stw	r17,8(sp)
    19dc:	dc000115 	stw	r16,4(sp)
    19e0:	35003fcc 	andi	r20,r6,255
    19e4:	1924703a 	and	r18,r3,r4
    19e8:	9d803fcc 	andi	r22,r19,255
    19ec:	a0005226 	beq	r20,zero,1b38 <__divsf3+0x194>
    19f0:	00803fc4 	movi	r2,255
    19f4:	a0802e26 	beq	r20,r2,1ab0 <__divsf3+0x10c>
    19f8:	91002034 	orhi	r4,r18,128
    19fc:	202490fa 	slli	r18,r4,3
    1a00:	a53fe044 	addi	r20,r20,-127
    1a04:	0021883a 	mov	r16,zero
    1a08:	002f883a 	mov	r23,zero
    1a0c:	280cd5fa 	srli	r6,r5,23
    1a10:	282ad7fa 	srli	r21,r5,31
    1a14:	00c02034 	movhi	r3,128
    1a18:	18ffffc4 	addi	r3,r3,-1
    1a1c:	31803fcc 	andi	r6,r6,255
    1a20:	1962703a 	and	r17,r3,r5
    1a24:	af003fcc 	andi	fp,r21,255
    1a28:	30004a26 	beq	r6,zero,1b54 <__divsf3+0x1b0>
    1a2c:	00803fc4 	movi	r2,255
    1a30:	30804526 	beq	r6,r2,1b48 <__divsf3+0x1a4>
    1a34:	89402034 	orhi	r5,r17,128
    1a38:	282290fa 	slli	r17,r5,3
    1a3c:	31bfe044 	addi	r6,r6,-127
    1a40:	000b883a 	mov	r5,zero
    1a44:	2c20b03a 	or	r16,r5,r16
    1a48:	802090ba 	slli	r16,r16,2
    1a4c:	00800034 	movhi	r2,0
    1a50:	10869c04 	addi	r2,r2,6768
    1a54:	80a1883a 	add	r16,r16,r2
    1a58:	81000017 	ldw	r4,0(r16)
    1a5c:	9d46f03a 	xor	r3,r19,r21
    1a60:	180f883a 	mov	r7,r3
    1a64:	18803fcc 	andi	r2,r3,255
    1a68:	a18dc83a 	sub	r6,r20,r6
    1a6c:	2000683a 	jmp	r4
    1a70:	00001c54 	movui	zero,113
    1a74:	00001ad8 	cmpnei	zero,zero,107
    1a78:	00001c48 	cmpgei	zero,zero,113
    1a7c:	00001ac4 	movi	zero,107
    1a80:	00001c48 	cmpgei	zero,zero,113
    1a84:	00001c20 	cmpeqi	zero,zero,112
    1a88:	00001c48 	cmpgei	zero,zero,113
    1a8c:	00001ac4 	movi	zero,107
    1a90:	00001ad8 	cmpnei	zero,zero,107
    1a94:	00001ad8 	cmpnei	zero,zero,107
    1a98:	00001c20 	cmpeqi	zero,zero,112
    1a9c:	00001ac4 	movi	zero,107
    1aa0:	00001d34 	movhi	zero,116
    1aa4:	00001d34 	movhi	zero,116
    1aa8:	00001d34 	movhi	zero,116
    1aac:	00001ce8 	cmpgeui	zero,zero,115
    1ab0:	9000581e 	bne	r18,zero,1c14 <__divsf3+0x270>
    1ab4:	04000204 	movi	r16,8
    1ab8:	05c00084 	movi	r23,2
    1abc:	003fd306 	br	1a0c <__alt_data_end+0xfffe1a0c>
    1ac0:	0023883a 	mov	r17,zero
    1ac4:	e02d883a 	mov	r22,fp
    1ac8:	282f883a 	mov	r23,r5
    1acc:	00800084 	movi	r2,2
    1ad0:	b8808f1e 	bne	r23,r2,1d10 <__divsf3+0x36c>
    1ad4:	b005883a 	mov	r2,r22
    1ad8:	11c0004c 	andi	r7,r2,1
    1adc:	013fffc4 	movi	r4,-1
    1ae0:	000d883a 	mov	r6,zero
    1ae4:	21003fcc 	andi	r4,r4,255
    1ae8:	200895fa 	slli	r4,r4,23
    1aec:	38803fcc 	andi	r2,r7,255
    1af0:	00c02034 	movhi	r3,128
    1af4:	100497fa 	slli	r2,r2,31
    1af8:	18ffffc4 	addi	r3,r3,-1
    1afc:	30c6703a 	and	r3,r6,r3
    1b00:	1906b03a 	or	r3,r3,r4
    1b04:	1884b03a 	or	r2,r3,r2
    1b08:	dfc00a17 	ldw	ra,40(sp)
    1b0c:	df000917 	ldw	fp,36(sp)
    1b10:	ddc00817 	ldw	r23,32(sp)
    1b14:	dd800717 	ldw	r22,28(sp)
    1b18:	dd400617 	ldw	r21,24(sp)
    1b1c:	dd000517 	ldw	r20,20(sp)
    1b20:	dcc00417 	ldw	r19,16(sp)
    1b24:	dc800317 	ldw	r18,12(sp)
    1b28:	dc400217 	ldw	r17,8(sp)
    1b2c:	dc000117 	ldw	r16,4(sp)
    1b30:	dec00b04 	addi	sp,sp,44
    1b34:	f800283a 	ret
    1b38:	90002b1e 	bne	r18,zero,1be8 <__divsf3+0x244>
    1b3c:	04000104 	movi	r16,4
    1b40:	05c00044 	movi	r23,1
    1b44:	003fb106 	br	1a0c <__alt_data_end+0xfffe1a0c>
    1b48:	8800251e 	bne	r17,zero,1be0 <__divsf3+0x23c>
    1b4c:	01400084 	movi	r5,2
    1b50:	00000206 	br	1b5c <__divsf3+0x1b8>
    1b54:	88001a1e 	bne	r17,zero,1bc0 <__divsf3+0x21c>
    1b58:	01400044 	movi	r5,1
    1b5c:	8160b03a 	or	r16,r16,r5
    1b60:	802090ba 	slli	r16,r16,2
    1b64:	00c00034 	movhi	r3,0
    1b68:	18c6e004 	addi	r3,r3,7040
    1b6c:	80e1883a 	add	r16,r16,r3
    1b70:	80c00017 	ldw	r3,0(r16)
    1b74:	9d44f03a 	xor	r2,r19,r21
    1b78:	a18dc83a 	sub	r6,r20,r6
    1b7c:	1800683a 	jmp	r3
    1b80:	00001ad8 	cmpnei	zero,zero,107
    1b84:	00001ad8 	cmpnei	zero,zero,107
    1b88:	00001d24 	muli	zero,zero,116
    1b8c:	00001ac0 	call	1ac <alt_irq_handler+0xb0>
    1b90:	00001d24 	muli	zero,zero,116
    1b94:	00001c20 	cmpeqi	zero,zero,112
    1b98:	00001d24 	muli	zero,zero,116
    1b9c:	00001ac0 	call	1ac <alt_irq_handler+0xb0>
    1ba0:	00001ad8 	cmpnei	zero,zero,107
    1ba4:	00001ad8 	cmpnei	zero,zero,107
    1ba8:	00001c20 	cmpeqi	zero,zero,112
    1bac:	00001ac0 	call	1ac <alt_irq_handler+0xb0>
    1bb0:	00001d34 	movhi	zero,116
    1bb4:	00001d34 	movhi	zero,116
    1bb8:	00001d34 	movhi	zero,116
    1bbc:	00001d4c 	andi	zero,zero,117
    1bc0:	8809883a 	mov	r4,r17
    1bc4:	00049440 	call	4944 <__clzsi2>
    1bc8:	10fffec4 	addi	r3,r2,-5
    1bcc:	10801d84 	addi	r2,r2,118
    1bd0:	88e2983a 	sll	r17,r17,r3
    1bd4:	008dc83a 	sub	r6,zero,r2
    1bd8:	000b883a 	mov	r5,zero
    1bdc:	003f9906 	br	1a44 <__alt_data_end+0xfffe1a44>
    1be0:	014000c4 	movi	r5,3
    1be4:	003f9706 	br	1a44 <__alt_data_end+0xfffe1a44>
    1be8:	9009883a 	mov	r4,r18
    1bec:	d9400015 	stw	r5,0(sp)
    1bf0:	00049440 	call	4944 <__clzsi2>
    1bf4:	10fffec4 	addi	r3,r2,-5
    1bf8:	11801d84 	addi	r6,r2,118
    1bfc:	90e4983a 	sll	r18,r18,r3
    1c00:	01a9c83a 	sub	r20,zero,r6
    1c04:	0021883a 	mov	r16,zero
    1c08:	002f883a 	mov	r23,zero
    1c0c:	d9400017 	ldw	r5,0(sp)
    1c10:	003f7e06 	br	1a0c <__alt_data_end+0xfffe1a0c>
    1c14:	04000304 	movi	r16,12
    1c18:	05c000c4 	movi	r23,3
    1c1c:	003f7b06 	br	1a0c <__alt_data_end+0xfffe1a0c>
    1c20:	01802034 	movhi	r6,128
    1c24:	000f883a 	mov	r7,zero
    1c28:	31bfffc4 	addi	r6,r6,-1
    1c2c:	013fffc4 	movi	r4,-1
    1c30:	003fac06 	br	1ae4 <__alt_data_end+0xfffe1ae4>
    1c34:	01400044 	movi	r5,1
    1c38:	2909c83a 	sub	r4,r5,r4
    1c3c:	00c006c4 	movi	r3,27
    1c40:	19004b0e 	bge	r3,r4,1d70 <__divsf3+0x3cc>
    1c44:	114e703a 	and	r7,r2,r5
    1c48:	0009883a 	mov	r4,zero
    1c4c:	000d883a 	mov	r6,zero
    1c50:	003fa406 	br	1ae4 <__alt_data_end+0xfffe1ae4>
    1c54:	9006917a 	slli	r3,r18,5
    1c58:	8822917a 	slli	r17,r17,5
    1c5c:	1c40372e 	bgeu	r3,r17,1d3c <__divsf3+0x398>
    1c60:	31bfffc4 	addi	r6,r6,-1
    1c64:	010006c4 	movi	r4,27
    1c68:	000b883a 	mov	r5,zero
    1c6c:	180f883a 	mov	r7,r3
    1c70:	294b883a 	add	r5,r5,r5
    1c74:	18c7883a 	add	r3,r3,r3
    1c78:	38000116 	blt	r7,zero,1c80 <__divsf3+0x2dc>
    1c7c:	1c400236 	bltu	r3,r17,1c88 <__divsf3+0x2e4>
    1c80:	1c47c83a 	sub	r3,r3,r17
    1c84:	29400054 	ori	r5,r5,1
    1c88:	213fffc4 	addi	r4,r4,-1
    1c8c:	203ff71e 	bne	r4,zero,1c6c <__alt_data_end+0xfffe1c6c>
    1c90:	1806c03a 	cmpne	r3,r3,zero
    1c94:	1962b03a 	or	r17,r3,r5
    1c98:	31001fc4 	addi	r4,r6,127
    1c9c:	013fe50e 	bge	zero,r4,1c34 <__alt_data_end+0xfffe1c34>
    1ca0:	88c001cc 	andi	r3,r17,7
    1ca4:	18000426 	beq	r3,zero,1cb8 <__divsf3+0x314>
    1ca8:	88c003cc 	andi	r3,r17,15
    1cac:	01400104 	movi	r5,4
    1cb0:	19400126 	beq	r3,r5,1cb8 <__divsf3+0x314>
    1cb4:	8963883a 	add	r17,r17,r5
    1cb8:	88c2002c 	andhi	r3,r17,2048
    1cbc:	18000426 	beq	r3,zero,1cd0 <__divsf3+0x32c>
    1cc0:	00fe0034 	movhi	r3,63488
    1cc4:	18ffffc4 	addi	r3,r3,-1
    1cc8:	31002004 	addi	r4,r6,128
    1ccc:	88e2703a 	and	r17,r17,r3
    1cd0:	00c03f84 	movi	r3,254
    1cd4:	193f8016 	blt	r3,r4,1ad8 <__alt_data_end+0xfffe1ad8>
    1cd8:	880c91ba 	slli	r6,r17,6
    1cdc:	11c0004c 	andi	r7,r2,1
    1ce0:	300cd27a 	srli	r6,r6,9
    1ce4:	003f7f06 	br	1ae4 <__alt_data_end+0xfffe1ae4>
    1ce8:	9080102c 	andhi	r2,r18,64
    1cec:	10000226 	beq	r2,zero,1cf8 <__divsf3+0x354>
    1cf0:	8880102c 	andhi	r2,r17,64
    1cf4:	10001826 	beq	r2,zero,1d58 <__divsf3+0x3b4>
    1cf8:	00802034 	movhi	r2,128
    1cfc:	91801034 	orhi	r6,r18,64
    1d00:	10bfffc4 	addi	r2,r2,-1
    1d04:	980f883a 	mov	r7,r19
    1d08:	308c703a 	and	r6,r6,r2
    1d0c:	003fc706 	br	1c2c <__alt_data_end+0xfffe1c2c>
    1d10:	008000c4 	movi	r2,3
    1d14:	b8802d26 	beq	r23,r2,1dcc <__divsf3+0x428>
    1d18:	00c00044 	movi	r3,1
    1d1c:	b005883a 	mov	r2,r22
    1d20:	b8ffdd1e 	bne	r23,r3,1c98 <__alt_data_end+0xfffe1c98>
    1d24:	11c0004c 	andi	r7,r2,1
    1d28:	0009883a 	mov	r4,zero
    1d2c:	000d883a 	mov	r6,zero
    1d30:	003f6c06 	br	1ae4 <__alt_data_end+0xfffe1ae4>
    1d34:	9023883a 	mov	r17,r18
    1d38:	003f6406 	br	1acc <__alt_data_end+0xfffe1acc>
    1d3c:	1c47c83a 	sub	r3,r3,r17
    1d40:	01000684 	movi	r4,26
    1d44:	01400044 	movi	r5,1
    1d48:	003fc806 	br	1c6c <__alt_data_end+0xfffe1c6c>
    1d4c:	9080102c 	andhi	r2,r18,64
    1d50:	103fe926 	beq	r2,zero,1cf8 <__alt_data_end+0xfffe1cf8>
    1d54:	0023883a 	mov	r17,zero
    1d58:	00802034 	movhi	r2,128
    1d5c:	89801034 	orhi	r6,r17,64
    1d60:	10bfffc4 	addi	r2,r2,-1
    1d64:	a80f883a 	mov	r7,r21
    1d68:	308c703a 	and	r6,r6,r2
    1d6c:	003faf06 	br	1c2c <__alt_data_end+0xfffe1c2c>
    1d70:	01c00804 	movi	r7,32
    1d74:	390fc83a 	sub	r7,r7,r4
    1d78:	89ce983a 	sll	r7,r17,r7
    1d7c:	890ad83a 	srl	r5,r17,r4
    1d80:	380ec03a 	cmpne	r7,r7,zero
    1d84:	29cab03a 	or	r5,r5,r7
    1d88:	28c001cc 	andi	r3,r5,7
    1d8c:	18000426 	beq	r3,zero,1da0 <__divsf3+0x3fc>
    1d90:	28c003cc 	andi	r3,r5,15
    1d94:	01000104 	movi	r4,4
    1d98:	19000126 	beq	r3,r4,1da0 <__divsf3+0x3fc>
    1d9c:	290b883a 	add	r5,r5,r4
    1da0:	28c1002c 	andhi	r3,r5,1024
    1da4:	18000426 	beq	r3,zero,1db8 <__divsf3+0x414>
    1da8:	11c0004c 	andi	r7,r2,1
    1dac:	01000044 	movi	r4,1
    1db0:	000d883a 	mov	r6,zero
    1db4:	003f4b06 	br	1ae4 <__alt_data_end+0xfffe1ae4>
    1db8:	280a91ba 	slli	r5,r5,6
    1dbc:	11c0004c 	andi	r7,r2,1
    1dc0:	0009883a 	mov	r4,zero
    1dc4:	280cd27a 	srli	r6,r5,9
    1dc8:	003f4606 	br	1ae4 <__alt_data_end+0xfffe1ae4>
    1dcc:	00802034 	movhi	r2,128
    1dd0:	89801034 	orhi	r6,r17,64
    1dd4:	10bfffc4 	addi	r2,r2,-1
    1dd8:	b00f883a 	mov	r7,r22
    1ddc:	308c703a 	and	r6,r6,r2
    1de0:	003f9206 	br	1c2c <__alt_data_end+0xfffe1c2c>

00001de4 <__mulsf3>:
    1de4:	defff504 	addi	sp,sp,-44
    1de8:	dc000115 	stw	r16,4(sp)
    1dec:	2020d5fa 	srli	r16,r4,23
    1df0:	dd400615 	stw	r21,24(sp)
    1df4:	202ad7fa 	srli	r21,r4,31
    1df8:	dc800315 	stw	r18,12(sp)
    1dfc:	04802034 	movhi	r18,128
    1e00:	df000915 	stw	fp,36(sp)
    1e04:	dd000515 	stw	r20,20(sp)
    1e08:	94bfffc4 	addi	r18,r18,-1
    1e0c:	dfc00a15 	stw	ra,40(sp)
    1e10:	ddc00815 	stw	r23,32(sp)
    1e14:	dd800715 	stw	r22,28(sp)
    1e18:	dcc00415 	stw	r19,16(sp)
    1e1c:	dc400215 	stw	r17,8(sp)
    1e20:	84003fcc 	andi	r16,r16,255
    1e24:	9124703a 	and	r18,r18,r4
    1e28:	a829883a 	mov	r20,r21
    1e2c:	af003fcc 	andi	fp,r21,255
    1e30:	80005426 	beq	r16,zero,1f84 <__mulsf3+0x1a0>
    1e34:	00803fc4 	movi	r2,255
    1e38:	80802f26 	beq	r16,r2,1ef8 <__mulsf3+0x114>
    1e3c:	91002034 	orhi	r4,r18,128
    1e40:	202490fa 	slli	r18,r4,3
    1e44:	843fe044 	addi	r16,r16,-127
    1e48:	0023883a 	mov	r17,zero
    1e4c:	002f883a 	mov	r23,zero
    1e50:	2804d5fa 	srli	r2,r5,23
    1e54:	282cd7fa 	srli	r22,r5,31
    1e58:	01002034 	movhi	r4,128
    1e5c:	213fffc4 	addi	r4,r4,-1
    1e60:	10803fcc 	andi	r2,r2,255
    1e64:	2166703a 	and	r19,r4,r5
    1e68:	b1803fcc 	andi	r6,r22,255
    1e6c:	10004c26 	beq	r2,zero,1fa0 <__mulsf3+0x1bc>
    1e70:	00c03fc4 	movi	r3,255
    1e74:	10c04726 	beq	r2,r3,1f94 <__mulsf3+0x1b0>
    1e78:	99002034 	orhi	r4,r19,128
    1e7c:	202690fa 	slli	r19,r4,3
    1e80:	10bfe044 	addi	r2,r2,-127
    1e84:	0007883a 	mov	r3,zero
    1e88:	80a1883a 	add	r16,r16,r2
    1e8c:	010003c4 	movi	r4,15
    1e90:	1c44b03a 	or	r2,r3,r17
    1e94:	b56af03a 	xor	r21,r22,r21
    1e98:	81c00044 	addi	r7,r16,1
    1e9c:	20806b36 	bltu	r4,r2,204c <__mulsf3+0x268>
    1ea0:	100490ba 	slli	r2,r2,2
    1ea4:	01000034 	movhi	r4,0
    1ea8:	2107ae04 	addi	r4,r4,7864
    1eac:	1105883a 	add	r2,r2,r4
    1eb0:	10800017 	ldw	r2,0(r2)
    1eb4:	1000683a 	jmp	r2
    1eb8:	0000204c 	andi	zero,zero,129
    1ebc:	00001f0c 	andi	zero,zero,124
    1ec0:	00001f0c 	andi	zero,zero,124
    1ec4:	00001f08 	cmpgei	zero,zero,124
    1ec8:	00002030 	cmpltui	zero,zero,128
    1ecc:	00002030 	cmpltui	zero,zero,128
    1ed0:	0000201c 	xori	zero,zero,128
    1ed4:	00001f08 	cmpgei	zero,zero,124
    1ed8:	00002030 	cmpltui	zero,zero,128
    1edc:	0000201c 	xori	zero,zero,128
    1ee0:	00002030 	cmpltui	zero,zero,128
    1ee4:	00001f08 	cmpgei	zero,zero,124
    1ee8:	0000203c 	xorhi	zero,zero,128
    1eec:	0000203c 	xorhi	zero,zero,128
    1ef0:	0000203c 	xorhi	zero,zero,128
    1ef4:	0000214c 	andi	zero,zero,133
    1ef8:	90003b1e 	bne	r18,zero,1fe8 <__mulsf3+0x204>
    1efc:	04400204 	movi	r17,8
    1f00:	05c00084 	movi	r23,2
    1f04:	003fd206 	br	1e50 <__alt_data_end+0xfffe1e50>
    1f08:	302b883a 	mov	r21,r6
    1f0c:	00800084 	movi	r2,2
    1f10:	18802626 	beq	r3,r2,1fac <__mulsf3+0x1c8>
    1f14:	008000c4 	movi	r2,3
    1f18:	1880b826 	beq	r3,r2,21fc <__mulsf3+0x418>
    1f1c:	00800044 	movi	r2,1
    1f20:	1880af1e 	bne	r3,r2,21e0 <__mulsf3+0x3fc>
    1f24:	a829883a 	mov	r20,r21
    1f28:	0007883a 	mov	r3,zero
    1f2c:	0009883a 	mov	r4,zero
    1f30:	18803fcc 	andi	r2,r3,255
    1f34:	100695fa 	slli	r3,r2,23
    1f38:	a0803fcc 	andi	r2,r20,255
    1f3c:	100a97fa 	slli	r5,r2,31
    1f40:	00802034 	movhi	r2,128
    1f44:	10bfffc4 	addi	r2,r2,-1
    1f48:	2084703a 	and	r2,r4,r2
    1f4c:	10c4b03a 	or	r2,r2,r3
    1f50:	1144b03a 	or	r2,r2,r5
    1f54:	dfc00a17 	ldw	ra,40(sp)
    1f58:	df000917 	ldw	fp,36(sp)
    1f5c:	ddc00817 	ldw	r23,32(sp)
    1f60:	dd800717 	ldw	r22,28(sp)
    1f64:	dd400617 	ldw	r21,24(sp)
    1f68:	dd000517 	ldw	r20,20(sp)
    1f6c:	dcc00417 	ldw	r19,16(sp)
    1f70:	dc800317 	ldw	r18,12(sp)
    1f74:	dc400217 	ldw	r17,8(sp)
    1f78:	dc000117 	ldw	r16,4(sp)
    1f7c:	dec00b04 	addi	sp,sp,44
    1f80:	f800283a 	ret
    1f84:	90000d1e 	bne	r18,zero,1fbc <__mulsf3+0x1d8>
    1f88:	04400104 	movi	r17,4
    1f8c:	05c00044 	movi	r23,1
    1f90:	003faf06 	br	1e50 <__alt_data_end+0xfffe1e50>
    1f94:	9806c03a 	cmpne	r3,r19,zero
    1f98:	18c00084 	addi	r3,r3,2
    1f9c:	003fba06 	br	1e88 <__alt_data_end+0xfffe1e88>
    1fa0:	9800141e 	bne	r19,zero,1ff4 <__mulsf3+0x210>
    1fa4:	00c00044 	movi	r3,1
    1fa8:	003fb706 	br	1e88 <__alt_data_end+0xfffe1e88>
    1fac:	a829883a 	mov	r20,r21
    1fb0:	00ffffc4 	movi	r3,-1
    1fb4:	0009883a 	mov	r4,zero
    1fb8:	003fdd06 	br	1f30 <__alt_data_end+0xfffe1f30>
    1fbc:	9009883a 	mov	r4,r18
    1fc0:	d9400015 	stw	r5,0(sp)
    1fc4:	00049440 	call	4944 <__clzsi2>
    1fc8:	10fffec4 	addi	r3,r2,-5
    1fcc:	10801d84 	addi	r2,r2,118
    1fd0:	90e4983a 	sll	r18,r18,r3
    1fd4:	00a1c83a 	sub	r16,zero,r2
    1fd8:	0023883a 	mov	r17,zero
    1fdc:	002f883a 	mov	r23,zero
    1fe0:	d9400017 	ldw	r5,0(sp)
    1fe4:	003f9a06 	br	1e50 <__alt_data_end+0xfffe1e50>
    1fe8:	04400304 	movi	r17,12
    1fec:	05c000c4 	movi	r23,3
    1ff0:	003f9706 	br	1e50 <__alt_data_end+0xfffe1e50>
    1ff4:	9809883a 	mov	r4,r19
    1ff8:	d9800015 	stw	r6,0(sp)
    1ffc:	00049440 	call	4944 <__clzsi2>
    2000:	10fffec4 	addi	r3,r2,-5
    2004:	10801d84 	addi	r2,r2,118
    2008:	98e6983a 	sll	r19,r19,r3
    200c:	0085c83a 	sub	r2,zero,r2
    2010:	0007883a 	mov	r3,zero
    2014:	d9800017 	ldw	r6,0(sp)
    2018:	003f9b06 	br	1e88 <__alt_data_end+0xfffe1e88>
    201c:	01002034 	movhi	r4,128
    2020:	0029883a 	mov	r20,zero
    2024:	213fffc4 	addi	r4,r4,-1
    2028:	00ffffc4 	movi	r3,-1
    202c:	003fc006 	br	1f30 <__alt_data_end+0xfffe1f30>
    2030:	9027883a 	mov	r19,r18
    2034:	b807883a 	mov	r3,r23
    2038:	003fb406 	br	1f0c <__alt_data_end+0xfffe1f0c>
    203c:	9027883a 	mov	r19,r18
    2040:	e02b883a 	mov	r21,fp
    2044:	b807883a 	mov	r3,r23
    2048:	003fb006 	br	1f0c <__alt_data_end+0xfffe1f0c>
    204c:	9028d43a 	srli	r20,r18,16
    2050:	982cd43a 	srli	r22,r19,16
    2054:	94bfffcc 	andi	r18,r18,65535
    2058:	9cffffcc 	andi	r19,r19,65535
    205c:	980b883a 	mov	r5,r19
    2060:	9009883a 	mov	r4,r18
    2064:	d9c00015 	stw	r7,0(sp)
    2068:	000197c0 	call	197c <__mulsi3>
    206c:	a00b883a 	mov	r5,r20
    2070:	9809883a 	mov	r4,r19
    2074:	1023883a 	mov	r17,r2
    2078:	000197c0 	call	197c <__mulsi3>
    207c:	a009883a 	mov	r4,r20
    2080:	b00b883a 	mov	r5,r22
    2084:	1027883a 	mov	r19,r2
    2088:	000197c0 	call	197c <__mulsi3>
    208c:	b00b883a 	mov	r5,r22
    2090:	9009883a 	mov	r4,r18
    2094:	1029883a 	mov	r20,r2
    2098:	000197c0 	call	197c <__mulsi3>
    209c:	8806d43a 	srli	r3,r17,16
    20a0:	14c5883a 	add	r2,r2,r19
    20a4:	d9c00017 	ldw	r7,0(sp)
    20a8:	1885883a 	add	r2,r3,r2
    20ac:	14c0022e 	bgeu	r2,r19,20b8 <__mulsf3+0x2d4>
    20b0:	00c00074 	movhi	r3,1
    20b4:	a0e9883a 	add	r20,r20,r3
    20b8:	1026943a 	slli	r19,r2,16
    20bc:	8c7fffcc 	andi	r17,r17,65535
    20c0:	1004d43a 	srli	r2,r2,16
    20c4:	9c63883a 	add	r17,r19,r17
    20c8:	882691ba 	slli	r19,r17,6
    20cc:	1505883a 	add	r2,r2,r20
    20d0:	8822d6ba 	srli	r17,r17,26
    20d4:	100891ba 	slli	r4,r2,6
    20d8:	9826c03a 	cmpne	r19,r19,zero
    20dc:	9c62b03a 	or	r17,r19,r17
    20e0:	8926b03a 	or	r19,r17,r4
    20e4:	9882002c 	andhi	r2,r19,2048
    20e8:	10000426 	beq	r2,zero,20fc <__mulsf3+0x318>
    20ec:	9804d07a 	srli	r2,r19,1
    20f0:	9900004c 	andi	r4,r19,1
    20f4:	3821883a 	mov	r16,r7
    20f8:	1126b03a 	or	r19,r2,r4
    20fc:	80c01fc4 	addi	r3,r16,127
    2100:	00c0210e 	bge	zero,r3,2188 <__mulsf3+0x3a4>
    2104:	988001cc 	andi	r2,r19,7
    2108:	10000426 	beq	r2,zero,211c <__mulsf3+0x338>
    210c:	988003cc 	andi	r2,r19,15
    2110:	01000104 	movi	r4,4
    2114:	11000126 	beq	r2,r4,211c <__mulsf3+0x338>
    2118:	9927883a 	add	r19,r19,r4
    211c:	9882002c 	andhi	r2,r19,2048
    2120:	10000426 	beq	r2,zero,2134 <__mulsf3+0x350>
    2124:	00be0034 	movhi	r2,63488
    2128:	10bfffc4 	addi	r2,r2,-1
    212c:	80c02004 	addi	r3,r16,128
    2130:	98a6703a 	and	r19,r19,r2
    2134:	00803f84 	movi	r2,254
    2138:	10ff9c16 	blt	r2,r3,1fac <__alt_data_end+0xfffe1fac>
    213c:	980891ba 	slli	r4,r19,6
    2140:	a829883a 	mov	r20,r21
    2144:	2008d27a 	srli	r4,r4,9
    2148:	003f7906 	br	1f30 <__alt_data_end+0xfffe1f30>
    214c:	9080102c 	andhi	r2,r18,64
    2150:	10000826 	beq	r2,zero,2174 <__mulsf3+0x390>
    2154:	9880102c 	andhi	r2,r19,64
    2158:	1000061e 	bne	r2,zero,2174 <__mulsf3+0x390>
    215c:	00802034 	movhi	r2,128
    2160:	99001034 	orhi	r4,r19,64
    2164:	10bfffc4 	addi	r2,r2,-1
    2168:	b029883a 	mov	r20,r22
    216c:	2088703a 	and	r4,r4,r2
    2170:	003fad06 	br	2028 <__alt_data_end+0xfffe2028>
    2174:	00802034 	movhi	r2,128
    2178:	91001034 	orhi	r4,r18,64
    217c:	10bfffc4 	addi	r2,r2,-1
    2180:	2088703a 	and	r4,r4,r2
    2184:	003fa806 	br	2028 <__alt_data_end+0xfffe2028>
    2188:	00800044 	movi	r2,1
    218c:	10c7c83a 	sub	r3,r2,r3
    2190:	008006c4 	movi	r2,27
    2194:	10ff6316 	blt	r2,r3,1f24 <__alt_data_end+0xfffe1f24>
    2198:	00800804 	movi	r2,32
    219c:	10c5c83a 	sub	r2,r2,r3
    21a0:	9884983a 	sll	r2,r19,r2
    21a4:	98c6d83a 	srl	r3,r19,r3
    21a8:	1004c03a 	cmpne	r2,r2,zero
    21ac:	1884b03a 	or	r2,r3,r2
    21b0:	10c001cc 	andi	r3,r2,7
    21b4:	18000426 	beq	r3,zero,21c8 <__mulsf3+0x3e4>
    21b8:	10c003cc 	andi	r3,r2,15
    21bc:	01000104 	movi	r4,4
    21c0:	19000126 	beq	r3,r4,21c8 <__mulsf3+0x3e4>
    21c4:	1105883a 	add	r2,r2,r4
    21c8:	10c1002c 	andhi	r3,r2,1024
    21cc:	18000626 	beq	r3,zero,21e8 <__mulsf3+0x404>
    21d0:	a829883a 	mov	r20,r21
    21d4:	00c00044 	movi	r3,1
    21d8:	0009883a 	mov	r4,zero
    21dc:	003f5406 	br	1f30 <__alt_data_end+0xfffe1f30>
    21e0:	3821883a 	mov	r16,r7
    21e4:	003fc506 	br	20fc <__alt_data_end+0xfffe20fc>
    21e8:	100491ba 	slli	r2,r2,6
    21ec:	a829883a 	mov	r20,r21
    21f0:	0007883a 	mov	r3,zero
    21f4:	1008d27a 	srli	r4,r2,9
    21f8:	003f4d06 	br	1f30 <__alt_data_end+0xfffe1f30>
    21fc:	00802034 	movhi	r2,128
    2200:	99001034 	orhi	r4,r19,64
    2204:	10bfffc4 	addi	r2,r2,-1
    2208:	a829883a 	mov	r20,r21
    220c:	2088703a 	and	r4,r4,r2
    2210:	003f8506 	br	2028 <__alt_data_end+0xfffe2028>

00002214 <__fixsfsi>:
    2214:	200ad5fa 	srli	r5,r4,23
    2218:	00c02034 	movhi	r3,128
    221c:	18ffffc4 	addi	r3,r3,-1
    2220:	29403fcc 	andi	r5,r5,255
    2224:	00801f84 	movi	r2,126
    2228:	1906703a 	and	r3,r3,r4
    222c:	2008d7fa 	srli	r4,r4,31
    2230:	11400e0e 	bge	r2,r5,226c <__fixsfsi+0x58>
    2234:	00802744 	movi	r2,157
    2238:	11400816 	blt	r2,r5,225c <__fixsfsi+0x48>
    223c:	00802544 	movi	r2,149
    2240:	18c02034 	orhi	r3,r3,128
    2244:	11400b0e 	bge	r2,r5,2274 <__fixsfsi+0x60>
    2248:	28bfda84 	addi	r2,r5,-150
    224c:	1884983a 	sll	r2,r3,r2
    2250:	20000726 	beq	r4,zero,2270 <__fixsfsi+0x5c>
    2254:	0085c83a 	sub	r2,zero,r2
    2258:	f800283a 	ret
    225c:	00a00034 	movhi	r2,32768
    2260:	10bfffc4 	addi	r2,r2,-1
    2264:	2085883a 	add	r2,r4,r2
    2268:	f800283a 	ret
    226c:	0005883a 	mov	r2,zero
    2270:	f800283a 	ret
    2274:	00802584 	movi	r2,150
    2278:	1145c83a 	sub	r2,r2,r5
    227c:	1884d83a 	srl	r2,r3,r2
    2280:	003ff306 	br	2250 <__alt_data_end+0xfffe2250>

00002284 <__floatsisf>:
    2284:	defffd04 	addi	sp,sp,-12
    2288:	dfc00215 	stw	ra,8(sp)
    228c:	dc400115 	stw	r17,4(sp)
    2290:	dc000015 	stw	r16,0(sp)
    2294:	20003526 	beq	r4,zero,236c <__floatsisf+0xe8>
    2298:	2021883a 	mov	r16,r4
    229c:	2022d7fa 	srli	r17,r4,31
    22a0:	20003616 	blt	r4,zero,237c <__floatsisf+0xf8>
    22a4:	8009883a 	mov	r4,r16
    22a8:	00049440 	call	4944 <__clzsi2>
    22ac:	00c02784 	movi	r3,158
    22b0:	1887c83a 	sub	r3,r3,r2
    22b4:	01002584 	movi	r4,150
    22b8:	20c01416 	blt	r4,r3,230c <__floatsisf+0x88>
    22bc:	20c9c83a 	sub	r4,r4,r3
    22c0:	8120983a 	sll	r16,r16,r4
    22c4:	00802034 	movhi	r2,128
    22c8:	10bfffc4 	addi	r2,r2,-1
    22cc:	8809883a 	mov	r4,r17
    22d0:	80a0703a 	and	r16,r16,r2
    22d4:	18803fcc 	andi	r2,r3,255
    22d8:	100695fa 	slli	r3,r2,23
    22dc:	20803fcc 	andi	r2,r4,255
    22e0:	100897fa 	slli	r4,r2,31
    22e4:	00802034 	movhi	r2,128
    22e8:	10bfffc4 	addi	r2,r2,-1
    22ec:	8084703a 	and	r2,r16,r2
    22f0:	10c4b03a 	or	r2,r2,r3
    22f4:	1104b03a 	or	r2,r2,r4
    22f8:	dfc00217 	ldw	ra,8(sp)
    22fc:	dc400117 	ldw	r17,4(sp)
    2300:	dc000017 	ldw	r16,0(sp)
    2304:	dec00304 	addi	sp,sp,12
    2308:	f800283a 	ret
    230c:	01002644 	movi	r4,153
    2310:	20c01c16 	blt	r4,r3,2384 <__floatsisf+0x100>
    2314:	20c9c83a 	sub	r4,r4,r3
    2318:	8120983a 	sll	r16,r16,r4
    231c:	013f0034 	movhi	r4,64512
    2320:	213fffc4 	addi	r4,r4,-1
    2324:	814001cc 	andi	r5,r16,7
    2328:	8108703a 	and	r4,r16,r4
    232c:	28000426 	beq	r5,zero,2340 <__floatsisf+0xbc>
    2330:	840003cc 	andi	r16,r16,15
    2334:	01400104 	movi	r5,4
    2338:	81400126 	beq	r16,r5,2340 <__floatsisf+0xbc>
    233c:	2149883a 	add	r4,r4,r5
    2340:	2141002c 	andhi	r5,r4,1024
    2344:	28000526 	beq	r5,zero,235c <__floatsisf+0xd8>
    2348:	00c027c4 	movi	r3,159
    234c:	1887c83a 	sub	r3,r3,r2
    2350:	00bf0034 	movhi	r2,64512
    2354:	10bfffc4 	addi	r2,r2,-1
    2358:	2088703a 	and	r4,r4,r2
    235c:	202091ba 	slli	r16,r4,6
    2360:	8809883a 	mov	r4,r17
    2364:	8020d27a 	srli	r16,r16,9
    2368:	003fda06 	br	22d4 <__alt_data_end+0xfffe22d4>
    236c:	0009883a 	mov	r4,zero
    2370:	0007883a 	mov	r3,zero
    2374:	0021883a 	mov	r16,zero
    2378:	003fd606 	br	22d4 <__alt_data_end+0xfffe22d4>
    237c:	0121c83a 	sub	r16,zero,r4
    2380:	003fc806 	br	22a4 <__alt_data_end+0xfffe22a4>
    2384:	01002e44 	movi	r4,185
    2388:	20c9c83a 	sub	r4,r4,r3
    238c:	01400144 	movi	r5,5
    2390:	8108983a 	sll	r4,r16,r4
    2394:	288bc83a 	sub	r5,r5,r2
    2398:	8160d83a 	srl	r16,r16,r5
    239c:	2008c03a 	cmpne	r4,r4,zero
    23a0:	8120b03a 	or	r16,r16,r4
    23a4:	003fdd06 	br	231c <__alt_data_end+0xfffe231c>

000023a8 <__adddf3>:
    23a8:	02c00434 	movhi	r11,16
    23ac:	5affffc4 	addi	r11,r11,-1
    23b0:	2806d7fa 	srli	r3,r5,31
    23b4:	2ad4703a 	and	r10,r5,r11
    23b8:	3ad2703a 	and	r9,r7,r11
    23bc:	3804d53a 	srli	r2,r7,20
    23c0:	3018d77a 	srli	r12,r6,29
    23c4:	280ad53a 	srli	r5,r5,20
    23c8:	501490fa 	slli	r10,r10,3
    23cc:	2010d77a 	srli	r8,r4,29
    23d0:	481290fa 	slli	r9,r9,3
    23d4:	380ed7fa 	srli	r7,r7,31
    23d8:	defffb04 	addi	sp,sp,-20
    23dc:	dc800215 	stw	r18,8(sp)
    23e0:	dc400115 	stw	r17,4(sp)
    23e4:	dc000015 	stw	r16,0(sp)
    23e8:	dfc00415 	stw	ra,16(sp)
    23ec:	dcc00315 	stw	r19,12(sp)
    23f0:	1c803fcc 	andi	r18,r3,255
    23f4:	2c01ffcc 	andi	r16,r5,2047
    23f8:	5210b03a 	or	r8,r10,r8
    23fc:	202290fa 	slli	r17,r4,3
    2400:	1081ffcc 	andi	r2,r2,2047
    2404:	4b12b03a 	or	r9,r9,r12
    2408:	300c90fa 	slli	r6,r6,3
    240c:	91c07526 	beq	r18,r7,25e4 <__adddf3+0x23c>
    2410:	8087c83a 	sub	r3,r16,r2
    2414:	00c0ab0e 	bge	zero,r3,26c4 <__adddf3+0x31c>
    2418:	10002a1e 	bne	r2,zero,24c4 <__adddf3+0x11c>
    241c:	4984b03a 	or	r2,r9,r6
    2420:	1000961e 	bne	r2,zero,267c <__adddf3+0x2d4>
    2424:	888001cc 	andi	r2,r17,7
    2428:	10000726 	beq	r2,zero,2448 <__adddf3+0xa0>
    242c:	888003cc 	andi	r2,r17,15
    2430:	00c00104 	movi	r3,4
    2434:	10c00426 	beq	r2,r3,2448 <__adddf3+0xa0>
    2438:	88c7883a 	add	r3,r17,r3
    243c:	1c63803a 	cmpltu	r17,r3,r17
    2440:	4451883a 	add	r8,r8,r17
    2444:	1823883a 	mov	r17,r3
    2448:	4080202c 	andhi	r2,r8,128
    244c:	10005926 	beq	r2,zero,25b4 <__adddf3+0x20c>
    2450:	84000044 	addi	r16,r16,1
    2454:	0081ffc4 	movi	r2,2047
    2458:	8080ba26 	beq	r16,r2,2744 <__adddf3+0x39c>
    245c:	00bfe034 	movhi	r2,65408
    2460:	10bfffc4 	addi	r2,r2,-1
    2464:	4090703a 	and	r8,r8,r2
    2468:	4004977a 	slli	r2,r8,29
    246c:	4010927a 	slli	r8,r8,9
    2470:	8822d0fa 	srli	r17,r17,3
    2474:	8401ffcc 	andi	r16,r16,2047
    2478:	4010d33a 	srli	r8,r8,12
    247c:	9007883a 	mov	r3,r18
    2480:	1444b03a 	or	r2,r2,r17
    2484:	8401ffcc 	andi	r16,r16,2047
    2488:	8020953a 	slli	r16,r16,20
    248c:	18c03fcc 	andi	r3,r3,255
    2490:	01000434 	movhi	r4,16
    2494:	213fffc4 	addi	r4,r4,-1
    2498:	180697fa 	slli	r3,r3,31
    249c:	4110703a 	and	r8,r8,r4
    24a0:	4410b03a 	or	r8,r8,r16
    24a4:	40c6b03a 	or	r3,r8,r3
    24a8:	dfc00417 	ldw	ra,16(sp)
    24ac:	dcc00317 	ldw	r19,12(sp)
    24b0:	dc800217 	ldw	r18,8(sp)
    24b4:	dc400117 	ldw	r17,4(sp)
    24b8:	dc000017 	ldw	r16,0(sp)
    24bc:	dec00504 	addi	sp,sp,20
    24c0:	f800283a 	ret
    24c4:	0081ffc4 	movi	r2,2047
    24c8:	80bfd626 	beq	r16,r2,2424 <__alt_data_end+0xfffe2424>
    24cc:	4a402034 	orhi	r9,r9,128
    24d0:	00800e04 	movi	r2,56
    24d4:	10c09f16 	blt	r2,r3,2754 <__adddf3+0x3ac>
    24d8:	008007c4 	movi	r2,31
    24dc:	10c0c216 	blt	r2,r3,27e8 <__adddf3+0x440>
    24e0:	00800804 	movi	r2,32
    24e4:	10c5c83a 	sub	r2,r2,r3
    24e8:	488a983a 	sll	r5,r9,r2
    24ec:	30c8d83a 	srl	r4,r6,r3
    24f0:	3084983a 	sll	r2,r6,r2
    24f4:	48c6d83a 	srl	r3,r9,r3
    24f8:	290cb03a 	or	r6,r5,r4
    24fc:	1004c03a 	cmpne	r2,r2,zero
    2500:	308cb03a 	or	r6,r6,r2
    2504:	898dc83a 	sub	r6,r17,r6
    2508:	89a3803a 	cmpltu	r17,r17,r6
    250c:	40d1c83a 	sub	r8,r8,r3
    2510:	4451c83a 	sub	r8,r8,r17
    2514:	3023883a 	mov	r17,r6
    2518:	4080202c 	andhi	r2,r8,128
    251c:	10002326 	beq	r2,zero,25ac <__adddf3+0x204>
    2520:	04c02034 	movhi	r19,128
    2524:	9cffffc4 	addi	r19,r19,-1
    2528:	44e6703a 	and	r19,r8,r19
    252c:	98007626 	beq	r19,zero,2708 <__adddf3+0x360>
    2530:	9809883a 	mov	r4,r19
    2534:	00049440 	call	4944 <__clzsi2>
    2538:	10fffe04 	addi	r3,r2,-8
    253c:	010007c4 	movi	r4,31
    2540:	20c07716 	blt	r4,r3,2720 <__adddf3+0x378>
    2544:	00800804 	movi	r2,32
    2548:	10c5c83a 	sub	r2,r2,r3
    254c:	8884d83a 	srl	r2,r17,r2
    2550:	98d0983a 	sll	r8,r19,r3
    2554:	88e2983a 	sll	r17,r17,r3
    2558:	1204b03a 	or	r2,r2,r8
    255c:	1c007416 	blt	r3,r16,2730 <__adddf3+0x388>
    2560:	1c21c83a 	sub	r16,r3,r16
    2564:	82000044 	addi	r8,r16,1
    2568:	00c007c4 	movi	r3,31
    256c:	1a009116 	blt	r3,r8,27b4 <__adddf3+0x40c>
    2570:	00c00804 	movi	r3,32
    2574:	1a07c83a 	sub	r3,r3,r8
    2578:	8a08d83a 	srl	r4,r17,r8
    257c:	88e2983a 	sll	r17,r17,r3
    2580:	10c6983a 	sll	r3,r2,r3
    2584:	1210d83a 	srl	r8,r2,r8
    2588:	8804c03a 	cmpne	r2,r17,zero
    258c:	1906b03a 	or	r3,r3,r4
    2590:	18a2b03a 	or	r17,r3,r2
    2594:	0021883a 	mov	r16,zero
    2598:	003fa206 	br	2424 <__alt_data_end+0xfffe2424>
    259c:	1890b03a 	or	r8,r3,r2
    25a0:	40017d26 	beq	r8,zero,2b98 <__adddf3+0x7f0>
    25a4:	1011883a 	mov	r8,r2
    25a8:	1823883a 	mov	r17,r3
    25ac:	888001cc 	andi	r2,r17,7
    25b0:	103f9e1e 	bne	r2,zero,242c <__alt_data_end+0xfffe242c>
    25b4:	4004977a 	slli	r2,r8,29
    25b8:	8822d0fa 	srli	r17,r17,3
    25bc:	4010d0fa 	srli	r8,r8,3
    25c0:	9007883a 	mov	r3,r18
    25c4:	1444b03a 	or	r2,r2,r17
    25c8:	0101ffc4 	movi	r4,2047
    25cc:	81002426 	beq	r16,r4,2660 <__adddf3+0x2b8>
    25d0:	8120703a 	and	r16,r16,r4
    25d4:	01000434 	movhi	r4,16
    25d8:	213fffc4 	addi	r4,r4,-1
    25dc:	4110703a 	and	r8,r8,r4
    25e0:	003fa806 	br	2484 <__alt_data_end+0xfffe2484>
    25e4:	8089c83a 	sub	r4,r16,r2
    25e8:	01005e0e 	bge	zero,r4,2764 <__adddf3+0x3bc>
    25ec:	10002b26 	beq	r2,zero,269c <__adddf3+0x2f4>
    25f0:	0081ffc4 	movi	r2,2047
    25f4:	80bf8b26 	beq	r16,r2,2424 <__alt_data_end+0xfffe2424>
    25f8:	4a402034 	orhi	r9,r9,128
    25fc:	00800e04 	movi	r2,56
    2600:	1100a40e 	bge	r2,r4,2894 <__adddf3+0x4ec>
    2604:	498cb03a 	or	r6,r9,r6
    2608:	300ac03a 	cmpne	r5,r6,zero
    260c:	0013883a 	mov	r9,zero
    2610:	2c4b883a 	add	r5,r5,r17
    2614:	2c63803a 	cmpltu	r17,r5,r17
    2618:	4a11883a 	add	r8,r9,r8
    261c:	8a11883a 	add	r8,r17,r8
    2620:	2823883a 	mov	r17,r5
    2624:	4080202c 	andhi	r2,r8,128
    2628:	103fe026 	beq	r2,zero,25ac <__alt_data_end+0xfffe25ac>
    262c:	84000044 	addi	r16,r16,1
    2630:	0081ffc4 	movi	r2,2047
    2634:	8080d226 	beq	r16,r2,2980 <__adddf3+0x5d8>
    2638:	00bfe034 	movhi	r2,65408
    263c:	10bfffc4 	addi	r2,r2,-1
    2640:	4090703a 	and	r8,r8,r2
    2644:	880ad07a 	srli	r5,r17,1
    2648:	400897fa 	slli	r4,r8,31
    264c:	88c0004c 	andi	r3,r17,1
    2650:	28e2b03a 	or	r17,r5,r3
    2654:	4010d07a 	srli	r8,r8,1
    2658:	2462b03a 	or	r17,r4,r17
    265c:	003f7106 	br	2424 <__alt_data_end+0xfffe2424>
    2660:	4088b03a 	or	r4,r8,r2
    2664:	20014526 	beq	r4,zero,2b7c <__adddf3+0x7d4>
    2668:	01000434 	movhi	r4,16
    266c:	42000234 	orhi	r8,r8,8
    2670:	213fffc4 	addi	r4,r4,-1
    2674:	4110703a 	and	r8,r8,r4
    2678:	003f8206 	br	2484 <__alt_data_end+0xfffe2484>
    267c:	18ffffc4 	addi	r3,r3,-1
    2680:	1800491e 	bne	r3,zero,27a8 <__adddf3+0x400>
    2684:	898bc83a 	sub	r5,r17,r6
    2688:	8963803a 	cmpltu	r17,r17,r5
    268c:	4251c83a 	sub	r8,r8,r9
    2690:	4451c83a 	sub	r8,r8,r17
    2694:	2823883a 	mov	r17,r5
    2698:	003f9f06 	br	2518 <__alt_data_end+0xfffe2518>
    269c:	4984b03a 	or	r2,r9,r6
    26a0:	103f6026 	beq	r2,zero,2424 <__alt_data_end+0xfffe2424>
    26a4:	213fffc4 	addi	r4,r4,-1
    26a8:	2000931e 	bne	r4,zero,28f8 <__adddf3+0x550>
    26ac:	898d883a 	add	r6,r17,r6
    26b0:	3463803a 	cmpltu	r17,r6,r17
    26b4:	4251883a 	add	r8,r8,r9
    26b8:	8a11883a 	add	r8,r17,r8
    26bc:	3023883a 	mov	r17,r6
    26c0:	003fd806 	br	2624 <__alt_data_end+0xfffe2624>
    26c4:	1800541e 	bne	r3,zero,2818 <__adddf3+0x470>
    26c8:	80800044 	addi	r2,r16,1
    26cc:	1081ffcc 	andi	r2,r2,2047
    26d0:	00c00044 	movi	r3,1
    26d4:	1880a00e 	bge	r3,r2,2958 <__adddf3+0x5b0>
    26d8:	8989c83a 	sub	r4,r17,r6
    26dc:	8905803a 	cmpltu	r2,r17,r4
    26e0:	4267c83a 	sub	r19,r8,r9
    26e4:	98a7c83a 	sub	r19,r19,r2
    26e8:	9880202c 	andhi	r2,r19,128
    26ec:	10006326 	beq	r2,zero,287c <__adddf3+0x4d4>
    26f0:	3463c83a 	sub	r17,r6,r17
    26f4:	4a07c83a 	sub	r3,r9,r8
    26f8:	344d803a 	cmpltu	r6,r6,r17
    26fc:	19a7c83a 	sub	r19,r3,r6
    2700:	3825883a 	mov	r18,r7
    2704:	983f8a1e 	bne	r19,zero,2530 <__alt_data_end+0xfffe2530>
    2708:	8809883a 	mov	r4,r17
    270c:	00049440 	call	4944 <__clzsi2>
    2710:	10800804 	addi	r2,r2,32
    2714:	10fffe04 	addi	r3,r2,-8
    2718:	010007c4 	movi	r4,31
    271c:	20ff890e 	bge	r4,r3,2544 <__alt_data_end+0xfffe2544>
    2720:	10bff604 	addi	r2,r2,-40
    2724:	8884983a 	sll	r2,r17,r2
    2728:	0023883a 	mov	r17,zero
    272c:	1c3f8c0e 	bge	r3,r16,2560 <__alt_data_end+0xfffe2560>
    2730:	023fe034 	movhi	r8,65408
    2734:	423fffc4 	addi	r8,r8,-1
    2738:	80e1c83a 	sub	r16,r16,r3
    273c:	1210703a 	and	r8,r2,r8
    2740:	003f3806 	br	2424 <__alt_data_end+0xfffe2424>
    2744:	9007883a 	mov	r3,r18
    2748:	0011883a 	mov	r8,zero
    274c:	0005883a 	mov	r2,zero
    2750:	003f4c06 	br	2484 <__alt_data_end+0xfffe2484>
    2754:	498cb03a 	or	r6,r9,r6
    2758:	300cc03a 	cmpne	r6,r6,zero
    275c:	0007883a 	mov	r3,zero
    2760:	003f6806 	br	2504 <__alt_data_end+0xfffe2504>
    2764:	20009c1e 	bne	r4,zero,29d8 <__adddf3+0x630>
    2768:	80800044 	addi	r2,r16,1
    276c:	1141ffcc 	andi	r5,r2,2047
    2770:	01000044 	movi	r4,1
    2774:	2140670e 	bge	r4,r5,2914 <__adddf3+0x56c>
    2778:	0101ffc4 	movi	r4,2047
    277c:	11007f26 	beq	r2,r4,297c <__adddf3+0x5d4>
    2780:	898d883a 	add	r6,r17,r6
    2784:	4247883a 	add	r3,r8,r9
    2788:	3451803a 	cmpltu	r8,r6,r17
    278c:	40d1883a 	add	r8,r8,r3
    2790:	402297fa 	slli	r17,r8,31
    2794:	300cd07a 	srli	r6,r6,1
    2798:	4010d07a 	srli	r8,r8,1
    279c:	1021883a 	mov	r16,r2
    27a0:	89a2b03a 	or	r17,r17,r6
    27a4:	003f1f06 	br	2424 <__alt_data_end+0xfffe2424>
    27a8:	0081ffc4 	movi	r2,2047
    27ac:	80bf481e 	bne	r16,r2,24d0 <__alt_data_end+0xfffe24d0>
    27b0:	003f1c06 	br	2424 <__alt_data_end+0xfffe2424>
    27b4:	843ff844 	addi	r16,r16,-31
    27b8:	01000804 	movi	r4,32
    27bc:	1406d83a 	srl	r3,r2,r16
    27c0:	41005026 	beq	r8,r4,2904 <__adddf3+0x55c>
    27c4:	01001004 	movi	r4,64
    27c8:	2211c83a 	sub	r8,r4,r8
    27cc:	1204983a 	sll	r2,r2,r8
    27d0:	88a2b03a 	or	r17,r17,r2
    27d4:	8822c03a 	cmpne	r17,r17,zero
    27d8:	1c62b03a 	or	r17,r3,r17
    27dc:	0011883a 	mov	r8,zero
    27e0:	0021883a 	mov	r16,zero
    27e4:	003f7106 	br	25ac <__alt_data_end+0xfffe25ac>
    27e8:	193ff804 	addi	r4,r3,-32
    27ec:	00800804 	movi	r2,32
    27f0:	4908d83a 	srl	r4,r9,r4
    27f4:	18804526 	beq	r3,r2,290c <__adddf3+0x564>
    27f8:	00801004 	movi	r2,64
    27fc:	10c5c83a 	sub	r2,r2,r3
    2800:	4886983a 	sll	r3,r9,r2
    2804:	198cb03a 	or	r6,r3,r6
    2808:	300cc03a 	cmpne	r6,r6,zero
    280c:	218cb03a 	or	r6,r4,r6
    2810:	0007883a 	mov	r3,zero
    2814:	003f3b06 	br	2504 <__alt_data_end+0xfffe2504>
    2818:	80002a26 	beq	r16,zero,28c4 <__adddf3+0x51c>
    281c:	0101ffc4 	movi	r4,2047
    2820:	11006826 	beq	r2,r4,29c4 <__adddf3+0x61c>
    2824:	00c7c83a 	sub	r3,zero,r3
    2828:	42002034 	orhi	r8,r8,128
    282c:	01000e04 	movi	r4,56
    2830:	20c07c16 	blt	r4,r3,2a24 <__adddf3+0x67c>
    2834:	010007c4 	movi	r4,31
    2838:	20c0da16 	blt	r4,r3,2ba4 <__adddf3+0x7fc>
    283c:	01000804 	movi	r4,32
    2840:	20c9c83a 	sub	r4,r4,r3
    2844:	4114983a 	sll	r10,r8,r4
    2848:	88cad83a 	srl	r5,r17,r3
    284c:	8908983a 	sll	r4,r17,r4
    2850:	40c6d83a 	srl	r3,r8,r3
    2854:	5162b03a 	or	r17,r10,r5
    2858:	2008c03a 	cmpne	r4,r4,zero
    285c:	8922b03a 	or	r17,r17,r4
    2860:	3463c83a 	sub	r17,r6,r17
    2864:	48c7c83a 	sub	r3,r9,r3
    2868:	344d803a 	cmpltu	r6,r6,r17
    286c:	1991c83a 	sub	r8,r3,r6
    2870:	1021883a 	mov	r16,r2
    2874:	3825883a 	mov	r18,r7
    2878:	003f2706 	br	2518 <__alt_data_end+0xfffe2518>
    287c:	24d0b03a 	or	r8,r4,r19
    2880:	40001b1e 	bne	r8,zero,28f0 <__adddf3+0x548>
    2884:	0005883a 	mov	r2,zero
    2888:	0007883a 	mov	r3,zero
    288c:	0021883a 	mov	r16,zero
    2890:	003f4d06 	br	25c8 <__alt_data_end+0xfffe25c8>
    2894:	008007c4 	movi	r2,31
    2898:	11003c16 	blt	r2,r4,298c <__adddf3+0x5e4>
    289c:	00800804 	movi	r2,32
    28a0:	1105c83a 	sub	r2,r2,r4
    28a4:	488e983a 	sll	r7,r9,r2
    28a8:	310ad83a 	srl	r5,r6,r4
    28ac:	3084983a 	sll	r2,r6,r2
    28b0:	4912d83a 	srl	r9,r9,r4
    28b4:	394ab03a 	or	r5,r7,r5
    28b8:	1004c03a 	cmpne	r2,r2,zero
    28bc:	288ab03a 	or	r5,r5,r2
    28c0:	003f5306 	br	2610 <__alt_data_end+0xfffe2610>
    28c4:	4448b03a 	or	r4,r8,r17
    28c8:	20003e26 	beq	r4,zero,29c4 <__adddf3+0x61c>
    28cc:	00c6303a 	nor	r3,zero,r3
    28d0:	18003a1e 	bne	r3,zero,29bc <__adddf3+0x614>
    28d4:	3463c83a 	sub	r17,r6,r17
    28d8:	4a07c83a 	sub	r3,r9,r8
    28dc:	344d803a 	cmpltu	r6,r6,r17
    28e0:	1991c83a 	sub	r8,r3,r6
    28e4:	1021883a 	mov	r16,r2
    28e8:	3825883a 	mov	r18,r7
    28ec:	003f0a06 	br	2518 <__alt_data_end+0xfffe2518>
    28f0:	2023883a 	mov	r17,r4
    28f4:	003f0d06 	br	252c <__alt_data_end+0xfffe252c>
    28f8:	0081ffc4 	movi	r2,2047
    28fc:	80bf3f1e 	bne	r16,r2,25fc <__alt_data_end+0xfffe25fc>
    2900:	003ec806 	br	2424 <__alt_data_end+0xfffe2424>
    2904:	0005883a 	mov	r2,zero
    2908:	003fb106 	br	27d0 <__alt_data_end+0xfffe27d0>
    290c:	0007883a 	mov	r3,zero
    2910:	003fbc06 	br	2804 <__alt_data_end+0xfffe2804>
    2914:	4444b03a 	or	r2,r8,r17
    2918:	8000871e 	bne	r16,zero,2b38 <__adddf3+0x790>
    291c:	1000ba26 	beq	r2,zero,2c08 <__adddf3+0x860>
    2920:	4984b03a 	or	r2,r9,r6
    2924:	103ebf26 	beq	r2,zero,2424 <__alt_data_end+0xfffe2424>
    2928:	8985883a 	add	r2,r17,r6
    292c:	4247883a 	add	r3,r8,r9
    2930:	1451803a 	cmpltu	r8,r2,r17
    2934:	40d1883a 	add	r8,r8,r3
    2938:	40c0202c 	andhi	r3,r8,128
    293c:	1023883a 	mov	r17,r2
    2940:	183f1a26 	beq	r3,zero,25ac <__alt_data_end+0xfffe25ac>
    2944:	00bfe034 	movhi	r2,65408
    2948:	10bfffc4 	addi	r2,r2,-1
    294c:	2021883a 	mov	r16,r4
    2950:	4090703a 	and	r8,r8,r2
    2954:	003eb306 	br	2424 <__alt_data_end+0xfffe2424>
    2958:	4444b03a 	or	r2,r8,r17
    295c:	8000291e 	bne	r16,zero,2a04 <__adddf3+0x65c>
    2960:	10004b1e 	bne	r2,zero,2a90 <__adddf3+0x6e8>
    2964:	4990b03a 	or	r8,r9,r6
    2968:	40008b26 	beq	r8,zero,2b98 <__adddf3+0x7f0>
    296c:	4811883a 	mov	r8,r9
    2970:	3023883a 	mov	r17,r6
    2974:	3825883a 	mov	r18,r7
    2978:	003eaa06 	br	2424 <__alt_data_end+0xfffe2424>
    297c:	1021883a 	mov	r16,r2
    2980:	0011883a 	mov	r8,zero
    2984:	0005883a 	mov	r2,zero
    2988:	003f0f06 	br	25c8 <__alt_data_end+0xfffe25c8>
    298c:	217ff804 	addi	r5,r4,-32
    2990:	00800804 	movi	r2,32
    2994:	494ad83a 	srl	r5,r9,r5
    2998:	20807d26 	beq	r4,r2,2b90 <__adddf3+0x7e8>
    299c:	00801004 	movi	r2,64
    29a0:	1109c83a 	sub	r4,r2,r4
    29a4:	4912983a 	sll	r9,r9,r4
    29a8:	498cb03a 	or	r6,r9,r6
    29ac:	300cc03a 	cmpne	r6,r6,zero
    29b0:	298ab03a 	or	r5,r5,r6
    29b4:	0013883a 	mov	r9,zero
    29b8:	003f1506 	br	2610 <__alt_data_end+0xfffe2610>
    29bc:	0101ffc4 	movi	r4,2047
    29c0:	113f9a1e 	bne	r2,r4,282c <__alt_data_end+0xfffe282c>
    29c4:	4811883a 	mov	r8,r9
    29c8:	3023883a 	mov	r17,r6
    29cc:	1021883a 	mov	r16,r2
    29d0:	3825883a 	mov	r18,r7
    29d4:	003e9306 	br	2424 <__alt_data_end+0xfffe2424>
    29d8:	8000161e 	bne	r16,zero,2a34 <__adddf3+0x68c>
    29dc:	444ab03a 	or	r5,r8,r17
    29e0:	28005126 	beq	r5,zero,2b28 <__adddf3+0x780>
    29e4:	0108303a 	nor	r4,zero,r4
    29e8:	20004d1e 	bne	r4,zero,2b20 <__adddf3+0x778>
    29ec:	89a3883a 	add	r17,r17,r6
    29f0:	4253883a 	add	r9,r8,r9
    29f4:	898d803a 	cmpltu	r6,r17,r6
    29f8:	3251883a 	add	r8,r6,r9
    29fc:	1021883a 	mov	r16,r2
    2a00:	003f0806 	br	2624 <__alt_data_end+0xfffe2624>
    2a04:	1000301e 	bne	r2,zero,2ac8 <__adddf3+0x720>
    2a08:	4984b03a 	or	r2,r9,r6
    2a0c:	10007126 	beq	r2,zero,2bd4 <__adddf3+0x82c>
    2a10:	4811883a 	mov	r8,r9
    2a14:	3023883a 	mov	r17,r6
    2a18:	3825883a 	mov	r18,r7
    2a1c:	0401ffc4 	movi	r16,2047
    2a20:	003e8006 	br	2424 <__alt_data_end+0xfffe2424>
    2a24:	4462b03a 	or	r17,r8,r17
    2a28:	8822c03a 	cmpne	r17,r17,zero
    2a2c:	0007883a 	mov	r3,zero
    2a30:	003f8b06 	br	2860 <__alt_data_end+0xfffe2860>
    2a34:	0141ffc4 	movi	r5,2047
    2a38:	11403b26 	beq	r2,r5,2b28 <__adddf3+0x780>
    2a3c:	0109c83a 	sub	r4,zero,r4
    2a40:	42002034 	orhi	r8,r8,128
    2a44:	01400e04 	movi	r5,56
    2a48:	29006716 	blt	r5,r4,2be8 <__adddf3+0x840>
    2a4c:	014007c4 	movi	r5,31
    2a50:	29007016 	blt	r5,r4,2c14 <__adddf3+0x86c>
    2a54:	01400804 	movi	r5,32
    2a58:	290bc83a 	sub	r5,r5,r4
    2a5c:	4154983a 	sll	r10,r8,r5
    2a60:	890ed83a 	srl	r7,r17,r4
    2a64:	894a983a 	sll	r5,r17,r5
    2a68:	4108d83a 	srl	r4,r8,r4
    2a6c:	51e2b03a 	or	r17,r10,r7
    2a70:	280ac03a 	cmpne	r5,r5,zero
    2a74:	8962b03a 	or	r17,r17,r5
    2a78:	89a3883a 	add	r17,r17,r6
    2a7c:	2253883a 	add	r9,r4,r9
    2a80:	898d803a 	cmpltu	r6,r17,r6
    2a84:	3251883a 	add	r8,r6,r9
    2a88:	1021883a 	mov	r16,r2
    2a8c:	003ee506 	br	2624 <__alt_data_end+0xfffe2624>
    2a90:	4984b03a 	or	r2,r9,r6
    2a94:	103e6326 	beq	r2,zero,2424 <__alt_data_end+0xfffe2424>
    2a98:	8987c83a 	sub	r3,r17,r6
    2a9c:	88c9803a 	cmpltu	r4,r17,r3
    2aa0:	4245c83a 	sub	r2,r8,r9
    2aa4:	1105c83a 	sub	r2,r2,r4
    2aa8:	1100202c 	andhi	r4,r2,128
    2aac:	203ebb26 	beq	r4,zero,259c <__alt_data_end+0xfffe259c>
    2ab0:	3463c83a 	sub	r17,r6,r17
    2ab4:	4a07c83a 	sub	r3,r9,r8
    2ab8:	344d803a 	cmpltu	r6,r6,r17
    2abc:	1991c83a 	sub	r8,r3,r6
    2ac0:	3825883a 	mov	r18,r7
    2ac4:	003e5706 	br	2424 <__alt_data_end+0xfffe2424>
    2ac8:	4984b03a 	or	r2,r9,r6
    2acc:	10002e26 	beq	r2,zero,2b88 <__adddf3+0x7e0>
    2ad0:	4004d0fa 	srli	r2,r8,3
    2ad4:	8822d0fa 	srli	r17,r17,3
    2ad8:	4010977a 	slli	r8,r8,29
    2adc:	10c0022c 	andhi	r3,r2,8
    2ae0:	4462b03a 	or	r17,r8,r17
    2ae4:	18000826 	beq	r3,zero,2b08 <__adddf3+0x760>
    2ae8:	4808d0fa 	srli	r4,r9,3
    2aec:	20c0022c 	andhi	r3,r4,8
    2af0:	1800051e 	bne	r3,zero,2b08 <__adddf3+0x760>
    2af4:	300cd0fa 	srli	r6,r6,3
    2af8:	4806977a 	slli	r3,r9,29
    2afc:	2005883a 	mov	r2,r4
    2b00:	3825883a 	mov	r18,r7
    2b04:	19a2b03a 	or	r17,r3,r6
    2b08:	8810d77a 	srli	r8,r17,29
    2b0c:	100490fa 	slli	r2,r2,3
    2b10:	882290fa 	slli	r17,r17,3
    2b14:	0401ffc4 	movi	r16,2047
    2b18:	4090b03a 	or	r8,r8,r2
    2b1c:	003e4106 	br	2424 <__alt_data_end+0xfffe2424>
    2b20:	0141ffc4 	movi	r5,2047
    2b24:	117fc71e 	bne	r2,r5,2a44 <__alt_data_end+0xfffe2a44>
    2b28:	4811883a 	mov	r8,r9
    2b2c:	3023883a 	mov	r17,r6
    2b30:	1021883a 	mov	r16,r2
    2b34:	003e3b06 	br	2424 <__alt_data_end+0xfffe2424>
    2b38:	10002f26 	beq	r2,zero,2bf8 <__adddf3+0x850>
    2b3c:	4984b03a 	or	r2,r9,r6
    2b40:	10001126 	beq	r2,zero,2b88 <__adddf3+0x7e0>
    2b44:	4004d0fa 	srli	r2,r8,3
    2b48:	8822d0fa 	srli	r17,r17,3
    2b4c:	4010977a 	slli	r8,r8,29
    2b50:	10c0022c 	andhi	r3,r2,8
    2b54:	4462b03a 	or	r17,r8,r17
    2b58:	183feb26 	beq	r3,zero,2b08 <__alt_data_end+0xfffe2b08>
    2b5c:	4808d0fa 	srli	r4,r9,3
    2b60:	20c0022c 	andhi	r3,r4,8
    2b64:	183fe81e 	bne	r3,zero,2b08 <__alt_data_end+0xfffe2b08>
    2b68:	300cd0fa 	srli	r6,r6,3
    2b6c:	4806977a 	slli	r3,r9,29
    2b70:	2005883a 	mov	r2,r4
    2b74:	19a2b03a 	or	r17,r3,r6
    2b78:	003fe306 	br	2b08 <__alt_data_end+0xfffe2b08>
    2b7c:	0011883a 	mov	r8,zero
    2b80:	0005883a 	mov	r2,zero
    2b84:	003e3f06 	br	2484 <__alt_data_end+0xfffe2484>
    2b88:	0401ffc4 	movi	r16,2047
    2b8c:	003e2506 	br	2424 <__alt_data_end+0xfffe2424>
    2b90:	0013883a 	mov	r9,zero
    2b94:	003f8406 	br	29a8 <__alt_data_end+0xfffe29a8>
    2b98:	0005883a 	mov	r2,zero
    2b9c:	0007883a 	mov	r3,zero
    2ba0:	003e8906 	br	25c8 <__alt_data_end+0xfffe25c8>
    2ba4:	197ff804 	addi	r5,r3,-32
    2ba8:	01000804 	movi	r4,32
    2bac:	414ad83a 	srl	r5,r8,r5
    2bb0:	19002426 	beq	r3,r4,2c44 <__adddf3+0x89c>
    2bb4:	01001004 	movi	r4,64
    2bb8:	20c7c83a 	sub	r3,r4,r3
    2bbc:	40c6983a 	sll	r3,r8,r3
    2bc0:	1c46b03a 	or	r3,r3,r17
    2bc4:	1806c03a 	cmpne	r3,r3,zero
    2bc8:	28e2b03a 	or	r17,r5,r3
    2bcc:	0007883a 	mov	r3,zero
    2bd0:	003f2306 	br	2860 <__alt_data_end+0xfffe2860>
    2bd4:	0007883a 	mov	r3,zero
    2bd8:	5811883a 	mov	r8,r11
    2bdc:	00bfffc4 	movi	r2,-1
    2be0:	0401ffc4 	movi	r16,2047
    2be4:	003e7806 	br	25c8 <__alt_data_end+0xfffe25c8>
    2be8:	4462b03a 	or	r17,r8,r17
    2bec:	8822c03a 	cmpne	r17,r17,zero
    2bf0:	0009883a 	mov	r4,zero
    2bf4:	003fa006 	br	2a78 <__alt_data_end+0xfffe2a78>
    2bf8:	4811883a 	mov	r8,r9
    2bfc:	3023883a 	mov	r17,r6
    2c00:	0401ffc4 	movi	r16,2047
    2c04:	003e0706 	br	2424 <__alt_data_end+0xfffe2424>
    2c08:	4811883a 	mov	r8,r9
    2c0c:	3023883a 	mov	r17,r6
    2c10:	003e0406 	br	2424 <__alt_data_end+0xfffe2424>
    2c14:	21fff804 	addi	r7,r4,-32
    2c18:	01400804 	movi	r5,32
    2c1c:	41ced83a 	srl	r7,r8,r7
    2c20:	21400a26 	beq	r4,r5,2c4c <__adddf3+0x8a4>
    2c24:	01401004 	movi	r5,64
    2c28:	2909c83a 	sub	r4,r5,r4
    2c2c:	4108983a 	sll	r4,r8,r4
    2c30:	2448b03a 	or	r4,r4,r17
    2c34:	2008c03a 	cmpne	r4,r4,zero
    2c38:	3922b03a 	or	r17,r7,r4
    2c3c:	0009883a 	mov	r4,zero
    2c40:	003f8d06 	br	2a78 <__alt_data_end+0xfffe2a78>
    2c44:	0007883a 	mov	r3,zero
    2c48:	003fdd06 	br	2bc0 <__alt_data_end+0xfffe2bc0>
    2c4c:	0009883a 	mov	r4,zero
    2c50:	003ff706 	br	2c30 <__alt_data_end+0xfffe2c30>

00002c54 <__divdf3>:
    2c54:	defff004 	addi	sp,sp,-64
    2c58:	dc800815 	stw	r18,32(sp)
    2c5c:	2824d53a 	srli	r18,r5,20
    2c60:	dd800c15 	stw	r22,48(sp)
    2c64:	282cd7fa 	srli	r22,r5,31
    2c68:	dc000615 	stw	r16,24(sp)
    2c6c:	04000434 	movhi	r16,16
    2c70:	843fffc4 	addi	r16,r16,-1
    2c74:	dfc00f15 	stw	ra,60(sp)
    2c78:	df000e15 	stw	fp,56(sp)
    2c7c:	ddc00d15 	stw	r23,52(sp)
    2c80:	dd400b15 	stw	r21,44(sp)
    2c84:	dd000a15 	stw	r20,40(sp)
    2c88:	dcc00915 	stw	r19,36(sp)
    2c8c:	dc400715 	stw	r17,28(sp)
    2c90:	9481ffcc 	andi	r18,r18,2047
    2c94:	2c20703a 	and	r16,r5,r16
    2c98:	b2003fcc 	andi	r8,r22,255
    2c9c:	90006126 	beq	r18,zero,2e24 <__divdf3+0x1d0>
    2ca0:	0081ffc4 	movi	r2,2047
    2ca4:	202b883a 	mov	r21,r4
    2ca8:	90803726 	beq	r18,r2,2d88 <__divdf3+0x134>
    2cac:	80800434 	orhi	r2,r16,16
    2cb0:	100490fa 	slli	r2,r2,3
    2cb4:	2020d77a 	srli	r16,r4,29
    2cb8:	202a90fa 	slli	r21,r4,3
    2cbc:	94bf0044 	addi	r18,r18,-1023
    2cc0:	80a0b03a 	or	r16,r16,r2
    2cc4:	0013883a 	mov	r9,zero
    2cc8:	000b883a 	mov	r5,zero
    2ccc:	3806d53a 	srli	r3,r7,20
    2cd0:	382ed7fa 	srli	r23,r7,31
    2cd4:	04400434 	movhi	r17,16
    2cd8:	8c7fffc4 	addi	r17,r17,-1
    2cdc:	18c1ffcc 	andi	r3,r3,2047
    2ce0:	3029883a 	mov	r20,r6
    2ce4:	3c62703a 	and	r17,r7,r17
    2ce8:	bf003fcc 	andi	fp,r23,255
    2cec:	18006e26 	beq	r3,zero,2ea8 <__divdf3+0x254>
    2cf0:	0081ffc4 	movi	r2,2047
    2cf4:	18806626 	beq	r3,r2,2e90 <__divdf3+0x23c>
    2cf8:	88800434 	orhi	r2,r17,16
    2cfc:	100490fa 	slli	r2,r2,3
    2d00:	3022d77a 	srli	r17,r6,29
    2d04:	302890fa 	slli	r20,r6,3
    2d08:	18ff0044 	addi	r3,r3,-1023
    2d0c:	88a2b03a 	or	r17,r17,r2
    2d10:	000f883a 	mov	r7,zero
    2d14:	b5e6f03a 	xor	r19,r22,r23
    2d18:	3a4cb03a 	or	r6,r7,r9
    2d1c:	008003c4 	movi	r2,15
    2d20:	9809883a 	mov	r4,r19
    2d24:	90c7c83a 	sub	r3,r18,r3
    2d28:	9cc03fcc 	andi	r19,r19,255
    2d2c:	11809636 	bltu	r2,r6,2f88 <__divdf3+0x334>
    2d30:	300c90ba 	slli	r6,r6,2
    2d34:	00800034 	movhi	r2,0
    2d38:	108b5204 	addi	r2,r2,11592
    2d3c:	308d883a 	add	r6,r6,r2
    2d40:	30800017 	ldw	r2,0(r6)
    2d44:	1000683a 	jmp	r2
    2d48:	00002f88 	cmpgei	zero,zero,190
    2d4c:	00002dc0 	call	2dc <getTargetOutput+0x70>
    2d50:	00002f78 	rdprs	zero,zero,189
    2d54:	00002db4 	movhi	zero,182
    2d58:	00002f78 	rdprs	zero,zero,189
    2d5c:	00002f4c 	andi	zero,zero,189
    2d60:	00002f78 	rdprs	zero,zero,189
    2d64:	00002db4 	movhi	zero,182
    2d68:	00002dc0 	call	2dc <getTargetOutput+0x70>
    2d6c:	00002dc0 	call	2dc <getTargetOutput+0x70>
    2d70:	00002f4c 	andi	zero,zero,189
    2d74:	00002db4 	movhi	zero,182
    2d78:	00002da4 	muli	zero,zero,182
    2d7c:	00002da4 	muli	zero,zero,182
    2d80:	00002da4 	muli	zero,zero,182
    2d84:	00003310 	cmplti	zero,zero,204
    2d88:	2404b03a 	or	r2,r4,r16
    2d8c:	10006c1e 	bne	r2,zero,2f40 <__divdf3+0x2ec>
    2d90:	02400204 	movi	r9,8
    2d94:	0021883a 	mov	r16,zero
    2d98:	002b883a 	mov	r21,zero
    2d9c:	01400084 	movi	r5,2
    2da0:	003fca06 	br	2ccc <__alt_data_end+0xfffe2ccc>
    2da4:	8023883a 	mov	r17,r16
    2da8:	a829883a 	mov	r20,r21
    2dac:	4039883a 	mov	fp,r8
    2db0:	280f883a 	mov	r7,r5
    2db4:	00800084 	movi	r2,2
    2db8:	3881601e 	bne	r7,r2,333c <__divdf3+0x6e8>
    2dbc:	e027883a 	mov	r19,fp
    2dc0:	9900004c 	andi	r4,r19,1
    2dc4:	0081ffc4 	movi	r2,2047
    2dc8:	0021883a 	mov	r16,zero
    2dcc:	002b883a 	mov	r21,zero
    2dd0:	1004953a 	slli	r2,r2,20
    2dd4:	20c03fcc 	andi	r3,r4,255
    2dd8:	01400434 	movhi	r5,16
    2ddc:	297fffc4 	addi	r5,r5,-1
    2de0:	180697fa 	slli	r3,r3,31
    2de4:	8160703a 	and	r16,r16,r5
    2de8:	80a0b03a 	or	r16,r16,r2
    2dec:	80c6b03a 	or	r3,r16,r3
    2df0:	a805883a 	mov	r2,r21
    2df4:	dfc00f17 	ldw	ra,60(sp)
    2df8:	df000e17 	ldw	fp,56(sp)
    2dfc:	ddc00d17 	ldw	r23,52(sp)
    2e00:	dd800c17 	ldw	r22,48(sp)
    2e04:	dd400b17 	ldw	r21,44(sp)
    2e08:	dd000a17 	ldw	r20,40(sp)
    2e0c:	dcc00917 	ldw	r19,36(sp)
    2e10:	dc800817 	ldw	r18,32(sp)
    2e14:	dc400717 	ldw	r17,28(sp)
    2e18:	dc000617 	ldw	r16,24(sp)
    2e1c:	dec01004 	addi	sp,sp,64
    2e20:	f800283a 	ret
    2e24:	2404b03a 	or	r2,r4,r16
    2e28:	2023883a 	mov	r17,r4
    2e2c:	10003f26 	beq	r2,zero,2f2c <__divdf3+0x2d8>
    2e30:	80015e26 	beq	r16,zero,33ac <__divdf3+0x758>
    2e34:	8009883a 	mov	r4,r16
    2e38:	d9800215 	stw	r6,8(sp)
    2e3c:	d9c00515 	stw	r7,20(sp)
    2e40:	da000415 	stw	r8,16(sp)
    2e44:	00049440 	call	4944 <__clzsi2>
    2e48:	d9800217 	ldw	r6,8(sp)
    2e4c:	d9c00517 	ldw	r7,20(sp)
    2e50:	da000417 	ldw	r8,16(sp)
    2e54:	113ffd44 	addi	r4,r2,-11
    2e58:	00c00704 	movi	r3,28
    2e5c:	19014f16 	blt	r3,r4,339c <__divdf3+0x748>
    2e60:	00c00744 	movi	r3,29
    2e64:	157ffe04 	addi	r21,r2,-8
    2e68:	1907c83a 	sub	r3,r3,r4
    2e6c:	8560983a 	sll	r16,r16,r21
    2e70:	88c6d83a 	srl	r3,r17,r3
    2e74:	8d6a983a 	sll	r21,r17,r21
    2e78:	1c20b03a 	or	r16,r3,r16
    2e7c:	1080fcc4 	addi	r2,r2,1011
    2e80:	00a5c83a 	sub	r18,zero,r2
    2e84:	0013883a 	mov	r9,zero
    2e88:	000b883a 	mov	r5,zero
    2e8c:	003f8f06 	br	2ccc <__alt_data_end+0xfffe2ccc>
    2e90:	3444b03a 	or	r2,r6,r17
    2e94:	1000231e 	bne	r2,zero,2f24 <__divdf3+0x2d0>
    2e98:	0023883a 	mov	r17,zero
    2e9c:	0029883a 	mov	r20,zero
    2ea0:	01c00084 	movi	r7,2
    2ea4:	003f9b06 	br	2d14 <__alt_data_end+0xfffe2d14>
    2ea8:	3444b03a 	or	r2,r6,r17
    2eac:	10001926 	beq	r2,zero,2f14 <__divdf3+0x2c0>
    2eb0:	88014b26 	beq	r17,zero,33e0 <__divdf3+0x78c>
    2eb4:	8809883a 	mov	r4,r17
    2eb8:	d9400115 	stw	r5,4(sp)
    2ebc:	d9800215 	stw	r6,8(sp)
    2ec0:	da000415 	stw	r8,16(sp)
    2ec4:	da400315 	stw	r9,12(sp)
    2ec8:	00049440 	call	4944 <__clzsi2>
    2ecc:	d9400117 	ldw	r5,4(sp)
    2ed0:	d9800217 	ldw	r6,8(sp)
    2ed4:	da000417 	ldw	r8,16(sp)
    2ed8:	da400317 	ldw	r9,12(sp)
    2edc:	113ffd44 	addi	r4,r2,-11
    2ee0:	00c00704 	movi	r3,28
    2ee4:	19013a16 	blt	r3,r4,33d0 <__divdf3+0x77c>
    2ee8:	00c00744 	movi	r3,29
    2eec:	153ffe04 	addi	r20,r2,-8
    2ef0:	1907c83a 	sub	r3,r3,r4
    2ef4:	8d22983a 	sll	r17,r17,r20
    2ef8:	30c6d83a 	srl	r3,r6,r3
    2efc:	3528983a 	sll	r20,r6,r20
    2f00:	1c62b03a 	or	r17,r3,r17
    2f04:	1080fcc4 	addi	r2,r2,1011
    2f08:	0087c83a 	sub	r3,zero,r2
    2f0c:	000f883a 	mov	r7,zero
    2f10:	003f8006 	br	2d14 <__alt_data_end+0xfffe2d14>
    2f14:	0023883a 	mov	r17,zero
    2f18:	0029883a 	mov	r20,zero
    2f1c:	01c00044 	movi	r7,1
    2f20:	003f7c06 	br	2d14 <__alt_data_end+0xfffe2d14>
    2f24:	01c000c4 	movi	r7,3
    2f28:	003f7a06 	br	2d14 <__alt_data_end+0xfffe2d14>
    2f2c:	02400104 	movi	r9,4
    2f30:	0021883a 	mov	r16,zero
    2f34:	002b883a 	mov	r21,zero
    2f38:	01400044 	movi	r5,1
    2f3c:	003f6306 	br	2ccc <__alt_data_end+0xfffe2ccc>
    2f40:	02400304 	movi	r9,12
    2f44:	014000c4 	movi	r5,3
    2f48:	003f6006 	br	2ccc <__alt_data_end+0xfffe2ccc>
    2f4c:	04000434 	movhi	r16,16
    2f50:	0009883a 	mov	r4,zero
    2f54:	843fffc4 	addi	r16,r16,-1
    2f58:	057fffc4 	movi	r21,-1
    2f5c:	0081ffc4 	movi	r2,2047
    2f60:	003f9b06 	br	2dd0 <__alt_data_end+0xfffe2dd0>
    2f64:	00c00044 	movi	r3,1
    2f68:	1887c83a 	sub	r3,r3,r2
    2f6c:	01000e04 	movi	r4,56
    2f70:	20c1530e 	bge	r4,r3,34c0 <__divdf3+0x86c>
    2f74:	9900004c 	andi	r4,r19,1
    2f78:	0005883a 	mov	r2,zero
    2f7c:	0021883a 	mov	r16,zero
    2f80:	002b883a 	mov	r21,zero
    2f84:	003f9206 	br	2dd0 <__alt_data_end+0xfffe2dd0>
    2f88:	8c012e36 	bltu	r17,r16,3444 <__divdf3+0x7f0>
    2f8c:	84412c26 	beq	r16,r17,3440 <__divdf3+0x7ec>
    2f90:	a82f883a 	mov	r23,r21
    2f94:	18ffffc4 	addi	r3,r3,-1
    2f98:	002b883a 	mov	r21,zero
    2f9c:	a004d63a 	srli	r2,r20,24
    2fa0:	8822923a 	slli	r17,r17,8
    2fa4:	a028923a 	slli	r20,r20,8
    2fa8:	8009883a 	mov	r4,r16
    2fac:	88acb03a 	or	r22,r17,r2
    2fb0:	dd000015 	stw	r20,0(sp)
    2fb4:	b028d43a 	srli	r20,r22,16
    2fb8:	d8c00215 	stw	r3,8(sp)
    2fbc:	b4bfffcc 	andi	r18,r22,65535
    2fc0:	a00b883a 	mov	r5,r20
    2fc4:	0004aa00 	call	4aa0 <__udivsi3>
    2fc8:	100b883a 	mov	r5,r2
    2fcc:	9009883a 	mov	r4,r18
    2fd0:	1023883a 	mov	r17,r2
    2fd4:	000197c0 	call	197c <__mulsi3>
    2fd8:	8009883a 	mov	r4,r16
    2fdc:	a00b883a 	mov	r5,r20
    2fe0:	1039883a 	mov	fp,r2
    2fe4:	0004b040 	call	4b04 <__umodsi3>
    2fe8:	1004943a 	slli	r2,r2,16
    2fec:	b808d43a 	srli	r4,r23,16
    2ff0:	d8c00217 	ldw	r3,8(sp)
    2ff4:	2084b03a 	or	r2,r4,r2
    2ff8:	1700062e 	bgeu	r2,fp,3014 <__divdf3+0x3c0>
    2ffc:	1585883a 	add	r2,r2,r22
    3000:	893fffc4 	addi	r4,r17,-1
    3004:	15811d36 	bltu	r2,r22,347c <__divdf3+0x828>
    3008:	17011c2e 	bgeu	r2,fp,347c <__divdf3+0x828>
    300c:	8c7fff84 	addi	r17,r17,-2
    3010:	1585883a 	add	r2,r2,r22
    3014:	1739c83a 	sub	fp,r2,fp
    3018:	a00b883a 	mov	r5,r20
    301c:	e009883a 	mov	r4,fp
    3020:	d8c00215 	stw	r3,8(sp)
    3024:	0004aa00 	call	4aa0 <__udivsi3>
    3028:	100b883a 	mov	r5,r2
    302c:	9009883a 	mov	r4,r18
    3030:	1021883a 	mov	r16,r2
    3034:	000197c0 	call	197c <__mulsi3>
    3038:	a00b883a 	mov	r5,r20
    303c:	e009883a 	mov	r4,fp
    3040:	d8800415 	stw	r2,16(sp)
    3044:	0004b040 	call	4b04 <__umodsi3>
    3048:	1004943a 	slli	r2,r2,16
    304c:	da000417 	ldw	r8,16(sp)
    3050:	bdffffcc 	andi	r23,r23,65535
    3054:	b884b03a 	or	r2,r23,r2
    3058:	d8c00217 	ldw	r3,8(sp)
    305c:	1200062e 	bgeu	r2,r8,3078 <__divdf3+0x424>
    3060:	1585883a 	add	r2,r2,r22
    3064:	813fffc4 	addi	r4,r16,-1
    3068:	15810236 	bltu	r2,r22,3474 <__divdf3+0x820>
    306c:	1201012e 	bgeu	r2,r8,3474 <__divdf3+0x820>
    3070:	843fff84 	addi	r16,r16,-2
    3074:	1585883a 	add	r2,r2,r22
    3078:	8822943a 	slli	r17,r17,16
    307c:	d9800017 	ldw	r6,0(sp)
    3080:	1211c83a 	sub	r8,r2,r8
    3084:	8c22b03a 	or	r17,r17,r16
    3088:	373fffcc 	andi	fp,r6,65535
    308c:	8abfffcc 	andi	r10,r17,65535
    3090:	8820d43a 	srli	r16,r17,16
    3094:	5009883a 	mov	r4,r10
    3098:	e00b883a 	mov	r5,fp
    309c:	302ed43a 	srli	r23,r6,16
    30a0:	d8c00215 	stw	r3,8(sp)
    30a4:	da000415 	stw	r8,16(sp)
    30a8:	da800115 	stw	r10,4(sp)
    30ac:	000197c0 	call	197c <__mulsi3>
    30b0:	800b883a 	mov	r5,r16
    30b4:	e009883a 	mov	r4,fp
    30b8:	d8800515 	stw	r2,20(sp)
    30bc:	000197c0 	call	197c <__mulsi3>
    30c0:	8009883a 	mov	r4,r16
    30c4:	b80b883a 	mov	r5,r23
    30c8:	d8800315 	stw	r2,12(sp)
    30cc:	000197c0 	call	197c <__mulsi3>
    30d0:	da800117 	ldw	r10,4(sp)
    30d4:	b80b883a 	mov	r5,r23
    30d8:	1021883a 	mov	r16,r2
    30dc:	5009883a 	mov	r4,r10
    30e0:	000197c0 	call	197c <__mulsi3>
    30e4:	d9c00517 	ldw	r7,20(sp)
    30e8:	da400317 	ldw	r9,12(sp)
    30ec:	d8c00217 	ldw	r3,8(sp)
    30f0:	3808d43a 	srli	r4,r7,16
    30f4:	1245883a 	add	r2,r2,r9
    30f8:	da000417 	ldw	r8,16(sp)
    30fc:	2085883a 	add	r2,r4,r2
    3100:	1240022e 	bgeu	r2,r9,310c <__divdf3+0x4b8>
    3104:	01000074 	movhi	r4,1
    3108:	8121883a 	add	r16,r16,r4
    310c:	1008d43a 	srli	r4,r2,16
    3110:	1004943a 	slli	r2,r2,16
    3114:	39ffffcc 	andi	r7,r7,65535
    3118:	2409883a 	add	r4,r4,r16
    311c:	11c5883a 	add	r2,r2,r7
    3120:	4100bb36 	bltu	r8,r4,3410 <__divdf3+0x7bc>
    3124:	4100d726 	beq	r8,r4,3484 <__divdf3+0x830>
    3128:	4109c83a 	sub	r4,r8,r4
    312c:	a8a1c83a 	sub	r16,r21,r2
    3130:	ac2b803a 	cmpltu	r21,r21,r16
    3134:	256bc83a 	sub	r21,r4,r21
    3138:	b540d926 	beq	r22,r21,34a0 <__divdf3+0x84c>
    313c:	a00b883a 	mov	r5,r20
    3140:	a809883a 	mov	r4,r21
    3144:	d8c00215 	stw	r3,8(sp)
    3148:	0004aa00 	call	4aa0 <__udivsi3>
    314c:	100b883a 	mov	r5,r2
    3150:	9009883a 	mov	r4,r18
    3154:	d8800515 	stw	r2,20(sp)
    3158:	000197c0 	call	197c <__mulsi3>
    315c:	a809883a 	mov	r4,r21
    3160:	a00b883a 	mov	r5,r20
    3164:	d8800415 	stw	r2,16(sp)
    3168:	0004b040 	call	4b04 <__umodsi3>
    316c:	1004943a 	slli	r2,r2,16
    3170:	8008d43a 	srli	r4,r16,16
    3174:	da000417 	ldw	r8,16(sp)
    3178:	d8c00217 	ldw	r3,8(sp)
    317c:	2084b03a 	or	r2,r4,r2
    3180:	d9c00517 	ldw	r7,20(sp)
    3184:	1200062e 	bgeu	r2,r8,31a0 <__divdf3+0x54c>
    3188:	1585883a 	add	r2,r2,r22
    318c:	393fffc4 	addi	r4,r7,-1
    3190:	1580c536 	bltu	r2,r22,34a8 <__divdf3+0x854>
    3194:	1200c42e 	bgeu	r2,r8,34a8 <__divdf3+0x854>
    3198:	39ffff84 	addi	r7,r7,-2
    319c:	1585883a 	add	r2,r2,r22
    31a0:	122bc83a 	sub	r21,r2,r8
    31a4:	a00b883a 	mov	r5,r20
    31a8:	a809883a 	mov	r4,r21
    31ac:	d8c00215 	stw	r3,8(sp)
    31b0:	d9c00515 	stw	r7,20(sp)
    31b4:	0004aa00 	call	4aa0 <__udivsi3>
    31b8:	9009883a 	mov	r4,r18
    31bc:	100b883a 	mov	r5,r2
    31c0:	d8800415 	stw	r2,16(sp)
    31c4:	000197c0 	call	197c <__mulsi3>
    31c8:	a809883a 	mov	r4,r21
    31cc:	a00b883a 	mov	r5,r20
    31d0:	1025883a 	mov	r18,r2
    31d4:	0004b040 	call	4b04 <__umodsi3>
    31d8:	1004943a 	slli	r2,r2,16
    31dc:	813fffcc 	andi	r4,r16,65535
    31e0:	d8c00217 	ldw	r3,8(sp)
    31e4:	20a0b03a 	or	r16,r4,r2
    31e8:	d9c00517 	ldw	r7,20(sp)
    31ec:	da000417 	ldw	r8,16(sp)
    31f0:	8480062e 	bgeu	r16,r18,320c <__divdf3+0x5b8>
    31f4:	85a1883a 	add	r16,r16,r22
    31f8:	40bfffc4 	addi	r2,r8,-1
    31fc:	8580ac36 	bltu	r16,r22,34b0 <__divdf3+0x85c>
    3200:	8480ab2e 	bgeu	r16,r18,34b0 <__divdf3+0x85c>
    3204:	423fff84 	addi	r8,r8,-2
    3208:	85a1883a 	add	r16,r16,r22
    320c:	3804943a 	slli	r2,r7,16
    3210:	84a1c83a 	sub	r16,r16,r18
    3214:	e009883a 	mov	r4,fp
    3218:	1228b03a 	or	r20,r2,r8
    321c:	a1ffffcc 	andi	r7,r20,65535
    3220:	a024d43a 	srli	r18,r20,16
    3224:	380b883a 	mov	r5,r7
    3228:	d8c00215 	stw	r3,8(sp)
    322c:	d9c00515 	stw	r7,20(sp)
    3230:	000197c0 	call	197c <__mulsi3>
    3234:	900b883a 	mov	r5,r18
    3238:	e009883a 	mov	r4,fp
    323c:	102b883a 	mov	r21,r2
    3240:	000197c0 	call	197c <__mulsi3>
    3244:	900b883a 	mov	r5,r18
    3248:	b809883a 	mov	r4,r23
    324c:	1039883a 	mov	fp,r2
    3250:	000197c0 	call	197c <__mulsi3>
    3254:	d9c00517 	ldw	r7,20(sp)
    3258:	b80b883a 	mov	r5,r23
    325c:	1025883a 	mov	r18,r2
    3260:	3809883a 	mov	r4,r7
    3264:	000197c0 	call	197c <__mulsi3>
    3268:	a808d43a 	srli	r4,r21,16
    326c:	1705883a 	add	r2,r2,fp
    3270:	d8c00217 	ldw	r3,8(sp)
    3274:	2085883a 	add	r2,r4,r2
    3278:	1700022e 	bgeu	r2,fp,3284 <__divdf3+0x630>
    327c:	01000074 	movhi	r4,1
    3280:	9125883a 	add	r18,r18,r4
    3284:	1008d43a 	srli	r4,r2,16
    3288:	1004943a 	slli	r2,r2,16
    328c:	ad7fffcc 	andi	r21,r21,65535
    3290:	2489883a 	add	r4,r4,r18
    3294:	1545883a 	add	r2,r2,r21
    3298:	81003836 	bltu	r16,r4,337c <__divdf3+0x728>
    329c:	81003626 	beq	r16,r4,3378 <__divdf3+0x724>
    32a0:	a5000054 	ori	r20,r20,1
    32a4:	1880ffc4 	addi	r2,r3,1023
    32a8:	00bf2e0e 	bge	zero,r2,2f64 <__alt_data_end+0xfffe2f64>
    32ac:	a10001cc 	andi	r4,r20,7
    32b0:	20000726 	beq	r4,zero,32d0 <__divdf3+0x67c>
    32b4:	a10003cc 	andi	r4,r20,15
    32b8:	01400104 	movi	r5,4
    32bc:	21400426 	beq	r4,r5,32d0 <__divdf3+0x67c>
    32c0:	a149883a 	add	r4,r20,r5
    32c4:	2529803a 	cmpltu	r20,r4,r20
    32c8:	8d23883a 	add	r17,r17,r20
    32cc:	2029883a 	mov	r20,r4
    32d0:	8900402c 	andhi	r4,r17,256
    32d4:	20000426 	beq	r4,zero,32e8 <__divdf3+0x694>
    32d8:	18810004 	addi	r2,r3,1024
    32dc:	00ffc034 	movhi	r3,65280
    32e0:	18ffffc4 	addi	r3,r3,-1
    32e4:	88e2703a 	and	r17,r17,r3
    32e8:	00c1ff84 	movi	r3,2046
    32ec:	18beb416 	blt	r3,r2,2dc0 <__alt_data_end+0xfffe2dc0>
    32f0:	a028d0fa 	srli	r20,r20,3
    32f4:	882a977a 	slli	r21,r17,29
    32f8:	8820927a 	slli	r16,r17,9
    32fc:	1081ffcc 	andi	r2,r2,2047
    3300:	ad2ab03a 	or	r21,r21,r20
    3304:	8020d33a 	srli	r16,r16,12
    3308:	9900004c 	andi	r4,r19,1
    330c:	003eb006 	br	2dd0 <__alt_data_end+0xfffe2dd0>
    3310:	8080022c 	andhi	r2,r16,8
    3314:	10001226 	beq	r2,zero,3360 <__divdf3+0x70c>
    3318:	8880022c 	andhi	r2,r17,8
    331c:	1000101e 	bne	r2,zero,3360 <__divdf3+0x70c>
    3320:	00800434 	movhi	r2,16
    3324:	8c000234 	orhi	r16,r17,8
    3328:	10bfffc4 	addi	r2,r2,-1
    332c:	b809883a 	mov	r4,r23
    3330:	80a0703a 	and	r16,r16,r2
    3334:	a02b883a 	mov	r21,r20
    3338:	003f0806 	br	2f5c <__alt_data_end+0xfffe2f5c>
    333c:	008000c4 	movi	r2,3
    3340:	3880b126 	beq	r7,r2,3608 <__divdf3+0x9b4>
    3344:	00800044 	movi	r2,1
    3348:	38805b1e 	bne	r7,r2,34b8 <__divdf3+0x864>
    334c:	e009883a 	mov	r4,fp
    3350:	0005883a 	mov	r2,zero
    3354:	0021883a 	mov	r16,zero
    3358:	002b883a 	mov	r21,zero
    335c:	003e9c06 	br	2dd0 <__alt_data_end+0xfffe2dd0>
    3360:	00800434 	movhi	r2,16
    3364:	84000234 	orhi	r16,r16,8
    3368:	10bfffc4 	addi	r2,r2,-1
    336c:	b009883a 	mov	r4,r22
    3370:	80a0703a 	and	r16,r16,r2
    3374:	003ef906 	br	2f5c <__alt_data_end+0xfffe2f5c>
    3378:	103fca26 	beq	r2,zero,32a4 <__alt_data_end+0xfffe32a4>
    337c:	b421883a 	add	r16,r22,r16
    3380:	a17fffc4 	addi	r5,r20,-1
    3384:	8580422e 	bgeu	r16,r22,3490 <__divdf3+0x83c>
    3388:	2829883a 	mov	r20,r5
    338c:	813fc41e 	bne	r16,r4,32a0 <__alt_data_end+0xfffe32a0>
    3390:	d9800017 	ldw	r6,0(sp)
    3394:	30bfc21e 	bne	r6,r2,32a0 <__alt_data_end+0xfffe32a0>
    3398:	003fc206 	br	32a4 <__alt_data_end+0xfffe32a4>
    339c:	143ff604 	addi	r16,r2,-40
    33a0:	8c20983a 	sll	r16,r17,r16
    33a4:	002b883a 	mov	r21,zero
    33a8:	003eb406 	br	2e7c <__alt_data_end+0xfffe2e7c>
    33ac:	d9800215 	stw	r6,8(sp)
    33b0:	d9c00515 	stw	r7,20(sp)
    33b4:	da000415 	stw	r8,16(sp)
    33b8:	00049440 	call	4944 <__clzsi2>
    33bc:	10800804 	addi	r2,r2,32
    33c0:	da000417 	ldw	r8,16(sp)
    33c4:	d9c00517 	ldw	r7,20(sp)
    33c8:	d9800217 	ldw	r6,8(sp)
    33cc:	003ea106 	br	2e54 <__alt_data_end+0xfffe2e54>
    33d0:	147ff604 	addi	r17,r2,-40
    33d4:	3462983a 	sll	r17,r6,r17
    33d8:	0029883a 	mov	r20,zero
    33dc:	003ec906 	br	2f04 <__alt_data_end+0xfffe2f04>
    33e0:	3009883a 	mov	r4,r6
    33e4:	d9400115 	stw	r5,4(sp)
    33e8:	d9800215 	stw	r6,8(sp)
    33ec:	da000415 	stw	r8,16(sp)
    33f0:	da400315 	stw	r9,12(sp)
    33f4:	00049440 	call	4944 <__clzsi2>
    33f8:	10800804 	addi	r2,r2,32
    33fc:	da400317 	ldw	r9,12(sp)
    3400:	da000417 	ldw	r8,16(sp)
    3404:	d9800217 	ldw	r6,8(sp)
    3408:	d9400117 	ldw	r5,4(sp)
    340c:	003eb306 	br	2edc <__alt_data_end+0xfffe2edc>
    3410:	d9800017 	ldw	r6,0(sp)
    3414:	a9ab883a 	add	r21,r21,r6
    3418:	a98b803a 	cmpltu	r5,r21,r6
    341c:	2d8b883a 	add	r5,r5,r22
    3420:	2a11883a 	add	r8,r5,r8
    3424:	897fffc4 	addi	r5,r17,-1
    3428:	b2000c2e 	bgeu	r22,r8,345c <__divdf3+0x808>
    342c:	41003f36 	bltu	r8,r4,352c <__divdf3+0x8d8>
    3430:	22006c26 	beq	r4,r8,35e4 <__divdf3+0x990>
    3434:	4109c83a 	sub	r4,r8,r4
    3438:	2823883a 	mov	r17,r5
    343c:	003f3b06 	br	312c <__alt_data_end+0xfffe312c>
    3440:	ad3ed336 	bltu	r21,r20,2f90 <__alt_data_end+0xfffe2f90>
    3444:	a804d07a 	srli	r2,r21,1
    3448:	802e97fa 	slli	r23,r16,31
    344c:	a82a97fa 	slli	r21,r21,31
    3450:	8020d07a 	srli	r16,r16,1
    3454:	b8aeb03a 	or	r23,r23,r2
    3458:	003ed006 	br	2f9c <__alt_data_end+0xfffe2f9c>
    345c:	b23ff51e 	bne	r22,r8,3434 <__alt_data_end+0xfffe3434>
    3460:	d9800017 	ldw	r6,0(sp)
    3464:	a9bff12e 	bgeu	r21,r6,342c <__alt_data_end+0xfffe342c>
    3468:	b109c83a 	sub	r4,r22,r4
    346c:	2823883a 	mov	r17,r5
    3470:	003f2e06 	br	312c <__alt_data_end+0xfffe312c>
    3474:	2021883a 	mov	r16,r4
    3478:	003eff06 	br	3078 <__alt_data_end+0xfffe3078>
    347c:	2023883a 	mov	r17,r4
    3480:	003ee406 	br	3014 <__alt_data_end+0xfffe3014>
    3484:	a8bfe236 	bltu	r21,r2,3410 <__alt_data_end+0xfffe3410>
    3488:	0009883a 	mov	r4,zero
    348c:	003f2706 	br	312c <__alt_data_end+0xfffe312c>
    3490:	81002d36 	bltu	r16,r4,3548 <__divdf3+0x8f4>
    3494:	24005626 	beq	r4,r16,35f0 <__divdf3+0x99c>
    3498:	2829883a 	mov	r20,r5
    349c:	003f8006 	br	32a0 <__alt_data_end+0xfffe32a0>
    34a0:	053fffc4 	movi	r20,-1
    34a4:	003f7f06 	br	32a4 <__alt_data_end+0xfffe32a4>
    34a8:	200f883a 	mov	r7,r4
    34ac:	003f3c06 	br	31a0 <__alt_data_end+0xfffe31a0>
    34b0:	1011883a 	mov	r8,r2
    34b4:	003f5506 	br	320c <__alt_data_end+0xfffe320c>
    34b8:	e027883a 	mov	r19,fp
    34bc:	003f7906 	br	32a4 <__alt_data_end+0xfffe32a4>
    34c0:	010007c4 	movi	r4,31
    34c4:	20c02816 	blt	r4,r3,3568 <__divdf3+0x914>
    34c8:	00800804 	movi	r2,32
    34cc:	10c5c83a 	sub	r2,r2,r3
    34d0:	888a983a 	sll	r5,r17,r2
    34d4:	a0c8d83a 	srl	r4,r20,r3
    34d8:	a084983a 	sll	r2,r20,r2
    34dc:	88e2d83a 	srl	r17,r17,r3
    34e0:	2906b03a 	or	r3,r5,r4
    34e4:	1004c03a 	cmpne	r2,r2,zero
    34e8:	1886b03a 	or	r3,r3,r2
    34ec:	188001cc 	andi	r2,r3,7
    34f0:	10000726 	beq	r2,zero,3510 <__divdf3+0x8bc>
    34f4:	188003cc 	andi	r2,r3,15
    34f8:	01000104 	movi	r4,4
    34fc:	11000426 	beq	r2,r4,3510 <__divdf3+0x8bc>
    3500:	1805883a 	mov	r2,r3
    3504:	10c00104 	addi	r3,r2,4
    3508:	1885803a 	cmpltu	r2,r3,r2
    350c:	88a3883a 	add	r17,r17,r2
    3510:	8880202c 	andhi	r2,r17,128
    3514:	10002926 	beq	r2,zero,35bc <__divdf3+0x968>
    3518:	9900004c 	andi	r4,r19,1
    351c:	00800044 	movi	r2,1
    3520:	0021883a 	mov	r16,zero
    3524:	002b883a 	mov	r21,zero
    3528:	003e2906 	br	2dd0 <__alt_data_end+0xfffe2dd0>
    352c:	d9800017 	ldw	r6,0(sp)
    3530:	8c7fff84 	addi	r17,r17,-2
    3534:	a9ab883a 	add	r21,r21,r6
    3538:	a98b803a 	cmpltu	r5,r21,r6
    353c:	2d8b883a 	add	r5,r5,r22
    3540:	2a11883a 	add	r8,r5,r8
    3544:	003ef806 	br	3128 <__alt_data_end+0xfffe3128>
    3548:	d9800017 	ldw	r6,0(sp)
    354c:	318f883a 	add	r7,r6,r6
    3550:	398b803a 	cmpltu	r5,r7,r6
    3554:	2d8d883a 	add	r6,r5,r22
    3558:	81a1883a 	add	r16,r16,r6
    355c:	a17fff84 	addi	r5,r20,-2
    3560:	d9c00015 	stw	r7,0(sp)
    3564:	003f8806 	br	3388 <__alt_data_end+0xfffe3388>
    3568:	013ff844 	movi	r4,-31
    356c:	2085c83a 	sub	r2,r4,r2
    3570:	8888d83a 	srl	r4,r17,r2
    3574:	00800804 	movi	r2,32
    3578:	18802126 	beq	r3,r2,3600 <__divdf3+0x9ac>
    357c:	04001004 	movi	r16,64
    3580:	80c7c83a 	sub	r3,r16,r3
    3584:	88e0983a 	sll	r16,r17,r3
    3588:	8504b03a 	or	r2,r16,r20
    358c:	1004c03a 	cmpne	r2,r2,zero
    3590:	2084b03a 	or	r2,r4,r2
    3594:	144001cc 	andi	r17,r2,7
    3598:	88000d1e 	bne	r17,zero,35d0 <__divdf3+0x97c>
    359c:	0021883a 	mov	r16,zero
    35a0:	102ad0fa 	srli	r21,r2,3
    35a4:	9900004c 	andi	r4,r19,1
    35a8:	0005883a 	mov	r2,zero
    35ac:	ac6ab03a 	or	r21,r21,r17
    35b0:	003e0706 	br	2dd0 <__alt_data_end+0xfffe2dd0>
    35b4:	1007883a 	mov	r3,r2
    35b8:	0023883a 	mov	r17,zero
    35bc:	8820927a 	slli	r16,r17,9
    35c0:	1805883a 	mov	r2,r3
    35c4:	8822977a 	slli	r17,r17,29
    35c8:	8020d33a 	srli	r16,r16,12
    35cc:	003ff406 	br	35a0 <__alt_data_end+0xfffe35a0>
    35d0:	10c003cc 	andi	r3,r2,15
    35d4:	01000104 	movi	r4,4
    35d8:	193ff626 	beq	r3,r4,35b4 <__alt_data_end+0xfffe35b4>
    35dc:	0023883a 	mov	r17,zero
    35e0:	003fc806 	br	3504 <__alt_data_end+0xfffe3504>
    35e4:	a8bfd136 	bltu	r21,r2,352c <__alt_data_end+0xfffe352c>
    35e8:	2823883a 	mov	r17,r5
    35ec:	003fa606 	br	3488 <__alt_data_end+0xfffe3488>
    35f0:	d9800017 	ldw	r6,0(sp)
    35f4:	30bfd436 	bltu	r6,r2,3548 <__alt_data_end+0xfffe3548>
    35f8:	2829883a 	mov	r20,r5
    35fc:	003f6406 	br	3390 <__alt_data_end+0xfffe3390>
    3600:	0021883a 	mov	r16,zero
    3604:	003fe006 	br	3588 <__alt_data_end+0xfffe3588>
    3608:	00800434 	movhi	r2,16
    360c:	8c000234 	orhi	r16,r17,8
    3610:	10bfffc4 	addi	r2,r2,-1
    3614:	e009883a 	mov	r4,fp
    3618:	80a0703a 	and	r16,r16,r2
    361c:	a02b883a 	mov	r21,r20
    3620:	003e4e06 	br	2f5c <__alt_data_end+0xfffe2f5c>

00003624 <__gedf2>:
    3624:	2804d53a 	srli	r2,r5,20
    3628:	3806d53a 	srli	r3,r7,20
    362c:	02000434 	movhi	r8,16
    3630:	423fffc4 	addi	r8,r8,-1
    3634:	1081ffcc 	andi	r2,r2,2047
    3638:	0241ffc4 	movi	r9,2047
    363c:	2a14703a 	and	r10,r5,r8
    3640:	18c1ffcc 	andi	r3,r3,2047
    3644:	3a10703a 	and	r8,r7,r8
    3648:	280ad7fa 	srli	r5,r5,31
    364c:	380ed7fa 	srli	r7,r7,31
    3650:	12401d26 	beq	r2,r9,36c8 <__gedf2+0xa4>
    3654:	0241ffc4 	movi	r9,2047
    3658:	1a401226 	beq	r3,r9,36a4 <__gedf2+0x80>
    365c:	1000081e 	bne	r2,zero,3680 <__gedf2+0x5c>
    3660:	2296b03a 	or	r11,r4,r10
    3664:	5813003a 	cmpeq	r9,r11,zero
    3668:	1800091e 	bne	r3,zero,3690 <__gedf2+0x6c>
    366c:	3218b03a 	or	r12,r6,r8
    3670:	6000071e 	bne	r12,zero,3690 <__gedf2+0x6c>
    3674:	0005883a 	mov	r2,zero
    3678:	5800101e 	bne	r11,zero,36bc <__gedf2+0x98>
    367c:	f800283a 	ret
    3680:	18000c1e 	bne	r3,zero,36b4 <__gedf2+0x90>
    3684:	3212b03a 	or	r9,r6,r8
    3688:	48000c26 	beq	r9,zero,36bc <__gedf2+0x98>
    368c:	0013883a 	mov	r9,zero
    3690:	39c03fcc 	andi	r7,r7,255
    3694:	48000826 	beq	r9,zero,36b8 <__gedf2+0x94>
    3698:	38000926 	beq	r7,zero,36c0 <__gedf2+0x9c>
    369c:	00800044 	movi	r2,1
    36a0:	f800283a 	ret
    36a4:	3212b03a 	or	r9,r6,r8
    36a8:	483fec26 	beq	r9,zero,365c <__alt_data_end+0xfffe365c>
    36ac:	00bfff84 	movi	r2,-2
    36b0:	f800283a 	ret
    36b4:	39c03fcc 	andi	r7,r7,255
    36b8:	29c00626 	beq	r5,r7,36d4 <__gedf2+0xb0>
    36bc:	283ff726 	beq	r5,zero,369c <__alt_data_end+0xfffe369c>
    36c0:	00bfffc4 	movi	r2,-1
    36c4:	f800283a 	ret
    36c8:	2292b03a 	or	r9,r4,r10
    36cc:	483fe126 	beq	r9,zero,3654 <__alt_data_end+0xfffe3654>
    36d0:	003ff606 	br	36ac <__alt_data_end+0xfffe36ac>
    36d4:	18bff916 	blt	r3,r2,36bc <__alt_data_end+0xfffe36bc>
    36d8:	10c00316 	blt	r2,r3,36e8 <__gedf2+0xc4>
    36dc:	42bff736 	bltu	r8,r10,36bc <__alt_data_end+0xfffe36bc>
    36e0:	52000326 	beq	r10,r8,36f0 <__gedf2+0xcc>
    36e4:	5200042e 	bgeu	r10,r8,36f8 <__gedf2+0xd4>
    36e8:	283fec1e 	bne	r5,zero,369c <__alt_data_end+0xfffe369c>
    36ec:	003ff406 	br	36c0 <__alt_data_end+0xfffe36c0>
    36f0:	313ff236 	bltu	r6,r4,36bc <__alt_data_end+0xfffe36bc>
    36f4:	21bffc36 	bltu	r4,r6,36e8 <__alt_data_end+0xfffe36e8>
    36f8:	0005883a 	mov	r2,zero
    36fc:	f800283a 	ret

00003700 <__muldf3>:
    3700:	deffee04 	addi	sp,sp,-72
    3704:	dd000c15 	stw	r20,48(sp)
    3708:	2828d53a 	srli	r20,r5,20
    370c:	ddc00f15 	stw	r23,60(sp)
    3710:	282ed7fa 	srli	r23,r5,31
    3714:	dc000815 	stw	r16,32(sp)
    3718:	04000434 	movhi	r16,16
    371c:	dcc00b15 	stw	r19,44(sp)
    3720:	843fffc4 	addi	r16,r16,-1
    3724:	dfc01115 	stw	ra,68(sp)
    3728:	df001015 	stw	fp,64(sp)
    372c:	dd800e15 	stw	r22,56(sp)
    3730:	dd400d15 	stw	r21,52(sp)
    3734:	dc800a15 	stw	r18,40(sp)
    3738:	dc400915 	stw	r17,36(sp)
    373c:	a501ffcc 	andi	r20,r20,2047
    3740:	2c20703a 	and	r16,r5,r16
    3744:	b827883a 	mov	r19,r23
    3748:	ba403fcc 	andi	r9,r23,255
    374c:	a0006026 	beq	r20,zero,38d0 <__muldf3+0x1d0>
    3750:	0081ffc4 	movi	r2,2047
    3754:	202d883a 	mov	r22,r4
    3758:	a0803626 	beq	r20,r2,3834 <__muldf3+0x134>
    375c:	84000434 	orhi	r16,r16,16
    3760:	200ad77a 	srli	r5,r4,29
    3764:	800490fa 	slli	r2,r16,3
    3768:	202c90fa 	slli	r22,r4,3
    376c:	a53f0044 	addi	r20,r20,-1023
    3770:	28a0b03a 	or	r16,r5,r2
    3774:	002b883a 	mov	r21,zero
    3778:	000b883a 	mov	r5,zero
    377c:	3804d53a 	srli	r2,r7,20
    3780:	3838d7fa 	srli	fp,r7,31
    3784:	04400434 	movhi	r17,16
    3788:	8c7fffc4 	addi	r17,r17,-1
    378c:	1081ffcc 	andi	r2,r2,2047
    3790:	3025883a 	mov	r18,r6
    3794:	3c62703a 	and	r17,r7,r17
    3798:	e2803fcc 	andi	r10,fp,255
    379c:	10006d26 	beq	r2,zero,3954 <__muldf3+0x254>
    37a0:	00c1ffc4 	movi	r3,2047
    37a4:	10c06526 	beq	r2,r3,393c <__muldf3+0x23c>
    37a8:	8c400434 	orhi	r17,r17,16
    37ac:	300ed77a 	srli	r7,r6,29
    37b0:	880690fa 	slli	r3,r17,3
    37b4:	302490fa 	slli	r18,r6,3
    37b8:	10bf0044 	addi	r2,r2,-1023
    37bc:	38e2b03a 	or	r17,r7,r3
    37c0:	000f883a 	mov	r7,zero
    37c4:	a087883a 	add	r3,r20,r2
    37c8:	010003c4 	movi	r4,15
    37cc:	3d44b03a 	or	r2,r7,r21
    37d0:	e5ccf03a 	xor	r6,fp,r23
    37d4:	1a000044 	addi	r8,r3,1
    37d8:	20809b36 	bltu	r4,r2,3a48 <__muldf3+0x348>
    37dc:	100490ba 	slli	r2,r2,2
    37e0:	01000034 	movhi	r4,0
    37e4:	210dfd04 	addi	r4,r4,14324
    37e8:	1105883a 	add	r2,r2,r4
    37ec:	10800017 	ldw	r2,0(r2)
    37f0:	1000683a 	jmp	r2
    37f4:	00003a48 	cmpgei	zero,zero,233
    37f8:	00003854 	movui	zero,225
    37fc:	00003854 	movui	zero,225
    3800:	00003850 	cmplti	zero,zero,225
    3804:	00003a24 	muli	zero,zero,232
    3808:	00003a24 	muli	zero,zero,232
    380c:	00003a0c 	andi	zero,zero,232
    3810:	00003850 	cmplti	zero,zero,225
    3814:	00003a24 	muli	zero,zero,232
    3818:	00003a0c 	andi	zero,zero,232
    381c:	00003a24 	muli	zero,zero,232
    3820:	00003850 	cmplti	zero,zero,225
    3824:	00003a34 	movhi	zero,232
    3828:	00003a34 	movhi	zero,232
    382c:	00003a34 	movhi	zero,232
    3830:	00003d94 	movui	zero,246
    3834:	2404b03a 	or	r2,r4,r16
    3838:	1000711e 	bne	r2,zero,3a00 <__muldf3+0x300>
    383c:	05400204 	movi	r21,8
    3840:	0021883a 	mov	r16,zero
    3844:	002d883a 	mov	r22,zero
    3848:	01400084 	movi	r5,2
    384c:	003fcb06 	br	377c <__alt_data_end+0xfffe377c>
    3850:	500d883a 	mov	r6,r10
    3854:	00800084 	movi	r2,2
    3858:	38805926 	beq	r7,r2,39c0 <__muldf3+0x2c0>
    385c:	008000c4 	movi	r2,3
    3860:	3881bb26 	beq	r7,r2,3f50 <__muldf3+0x850>
    3864:	00800044 	movi	r2,1
    3868:	3881961e 	bne	r7,r2,3ec4 <__muldf3+0x7c4>
    386c:	3027883a 	mov	r19,r6
    3870:	0005883a 	mov	r2,zero
    3874:	0021883a 	mov	r16,zero
    3878:	002d883a 	mov	r22,zero
    387c:	1004953a 	slli	r2,r2,20
    3880:	98c03fcc 	andi	r3,r19,255
    3884:	04400434 	movhi	r17,16
    3888:	8c7fffc4 	addi	r17,r17,-1
    388c:	180697fa 	slli	r3,r3,31
    3890:	8460703a 	and	r16,r16,r17
    3894:	80a0b03a 	or	r16,r16,r2
    3898:	80c6b03a 	or	r3,r16,r3
    389c:	b005883a 	mov	r2,r22
    38a0:	dfc01117 	ldw	ra,68(sp)
    38a4:	df001017 	ldw	fp,64(sp)
    38a8:	ddc00f17 	ldw	r23,60(sp)
    38ac:	dd800e17 	ldw	r22,56(sp)
    38b0:	dd400d17 	ldw	r21,52(sp)
    38b4:	dd000c17 	ldw	r20,48(sp)
    38b8:	dcc00b17 	ldw	r19,44(sp)
    38bc:	dc800a17 	ldw	r18,40(sp)
    38c0:	dc400917 	ldw	r17,36(sp)
    38c4:	dc000817 	ldw	r16,32(sp)
    38c8:	dec01204 	addi	sp,sp,72
    38cc:	f800283a 	ret
    38d0:	2404b03a 	or	r2,r4,r16
    38d4:	202b883a 	mov	r21,r4
    38d8:	10004426 	beq	r2,zero,39ec <__muldf3+0x2ec>
    38dc:	80015126 	beq	r16,zero,3e24 <__muldf3+0x724>
    38e0:	8009883a 	mov	r4,r16
    38e4:	d9800715 	stw	r6,28(sp)
    38e8:	d9c00215 	stw	r7,8(sp)
    38ec:	da400415 	stw	r9,16(sp)
    38f0:	00049440 	call	4944 <__clzsi2>
    38f4:	d9800717 	ldw	r6,28(sp)
    38f8:	d9c00217 	ldw	r7,8(sp)
    38fc:	da400417 	ldw	r9,16(sp)
    3900:	113ffd44 	addi	r4,r2,-11
    3904:	00c00704 	movi	r3,28
    3908:	19014216 	blt	r3,r4,3e14 <__muldf3+0x714>
    390c:	00c00744 	movi	r3,29
    3910:	15bffe04 	addi	r22,r2,-8
    3914:	1907c83a 	sub	r3,r3,r4
    3918:	85a0983a 	sll	r16,r16,r22
    391c:	a8c6d83a 	srl	r3,r21,r3
    3920:	adac983a 	sll	r22,r21,r22
    3924:	1c20b03a 	or	r16,r3,r16
    3928:	1080fcc4 	addi	r2,r2,1011
    392c:	00a9c83a 	sub	r20,zero,r2
    3930:	002b883a 	mov	r21,zero
    3934:	000b883a 	mov	r5,zero
    3938:	003f9006 	br	377c <__alt_data_end+0xfffe377c>
    393c:	3446b03a 	or	r3,r6,r17
    3940:	1800281e 	bne	r3,zero,39e4 <__muldf3+0x2e4>
    3944:	0023883a 	mov	r17,zero
    3948:	0025883a 	mov	r18,zero
    394c:	01c00084 	movi	r7,2
    3950:	003f9c06 	br	37c4 <__alt_data_end+0xfffe37c4>
    3954:	3446b03a 	or	r3,r6,r17
    3958:	18001e26 	beq	r3,zero,39d4 <__muldf3+0x2d4>
    395c:	88012126 	beq	r17,zero,3de4 <__muldf3+0x6e4>
    3960:	8809883a 	mov	r4,r17
    3964:	d9400215 	stw	r5,8(sp)
    3968:	d9800715 	stw	r6,28(sp)
    396c:	da400415 	stw	r9,16(sp)
    3970:	da800315 	stw	r10,12(sp)
    3974:	00049440 	call	4944 <__clzsi2>
    3978:	d9400217 	ldw	r5,8(sp)
    397c:	d9800717 	ldw	r6,28(sp)
    3980:	da400417 	ldw	r9,16(sp)
    3984:	da800317 	ldw	r10,12(sp)
    3988:	113ffd44 	addi	r4,r2,-11
    398c:	00c00704 	movi	r3,28
    3990:	19011016 	blt	r3,r4,3dd4 <__muldf3+0x6d4>
    3994:	00c00744 	movi	r3,29
    3998:	14bffe04 	addi	r18,r2,-8
    399c:	1907c83a 	sub	r3,r3,r4
    39a0:	8ca2983a 	sll	r17,r17,r18
    39a4:	30c6d83a 	srl	r3,r6,r3
    39a8:	34a4983a 	sll	r18,r6,r18
    39ac:	1c62b03a 	or	r17,r3,r17
    39b0:	1080fcc4 	addi	r2,r2,1011
    39b4:	0085c83a 	sub	r2,zero,r2
    39b8:	000f883a 	mov	r7,zero
    39bc:	003f8106 	br	37c4 <__alt_data_end+0xfffe37c4>
    39c0:	3027883a 	mov	r19,r6
    39c4:	0081ffc4 	movi	r2,2047
    39c8:	0021883a 	mov	r16,zero
    39cc:	002d883a 	mov	r22,zero
    39d0:	003faa06 	br	387c <__alt_data_end+0xfffe387c>
    39d4:	0023883a 	mov	r17,zero
    39d8:	0025883a 	mov	r18,zero
    39dc:	01c00044 	movi	r7,1
    39e0:	003f7806 	br	37c4 <__alt_data_end+0xfffe37c4>
    39e4:	01c000c4 	movi	r7,3
    39e8:	003f7606 	br	37c4 <__alt_data_end+0xfffe37c4>
    39ec:	05400104 	movi	r21,4
    39f0:	0021883a 	mov	r16,zero
    39f4:	002d883a 	mov	r22,zero
    39f8:	01400044 	movi	r5,1
    39fc:	003f5f06 	br	377c <__alt_data_end+0xfffe377c>
    3a00:	05400304 	movi	r21,12
    3a04:	014000c4 	movi	r5,3
    3a08:	003f5c06 	br	377c <__alt_data_end+0xfffe377c>
    3a0c:	04000434 	movhi	r16,16
    3a10:	0027883a 	mov	r19,zero
    3a14:	843fffc4 	addi	r16,r16,-1
    3a18:	05bfffc4 	movi	r22,-1
    3a1c:	0081ffc4 	movi	r2,2047
    3a20:	003f9606 	br	387c <__alt_data_end+0xfffe387c>
    3a24:	8023883a 	mov	r17,r16
    3a28:	b025883a 	mov	r18,r22
    3a2c:	280f883a 	mov	r7,r5
    3a30:	003f8806 	br	3854 <__alt_data_end+0xfffe3854>
    3a34:	8023883a 	mov	r17,r16
    3a38:	b025883a 	mov	r18,r22
    3a3c:	480d883a 	mov	r6,r9
    3a40:	280f883a 	mov	r7,r5
    3a44:	003f8306 	br	3854 <__alt_data_end+0xfffe3854>
    3a48:	b026d43a 	srli	r19,r22,16
    3a4c:	902ed43a 	srli	r23,r18,16
    3a50:	b5bfffcc 	andi	r22,r22,65535
    3a54:	94bfffcc 	andi	r18,r18,65535
    3a58:	b00b883a 	mov	r5,r22
    3a5c:	9009883a 	mov	r4,r18
    3a60:	d8c00515 	stw	r3,20(sp)
    3a64:	d9800715 	stw	r6,28(sp)
    3a68:	da000615 	stw	r8,24(sp)
    3a6c:	000197c0 	call	197c <__mulsi3>
    3a70:	980b883a 	mov	r5,r19
    3a74:	9009883a 	mov	r4,r18
    3a78:	1029883a 	mov	r20,r2
    3a7c:	000197c0 	call	197c <__mulsi3>
    3a80:	b80b883a 	mov	r5,r23
    3a84:	9809883a 	mov	r4,r19
    3a88:	102b883a 	mov	r21,r2
    3a8c:	000197c0 	call	197c <__mulsi3>
    3a90:	b809883a 	mov	r4,r23
    3a94:	b00b883a 	mov	r5,r22
    3a98:	1039883a 	mov	fp,r2
    3a9c:	000197c0 	call	197c <__mulsi3>
    3aa0:	a008d43a 	srli	r4,r20,16
    3aa4:	1545883a 	add	r2,r2,r21
    3aa8:	d8c00517 	ldw	r3,20(sp)
    3aac:	2085883a 	add	r2,r4,r2
    3ab0:	d9800717 	ldw	r6,28(sp)
    3ab4:	da000617 	ldw	r8,24(sp)
    3ab8:	1540022e 	bgeu	r2,r21,3ac4 <__muldf3+0x3c4>
    3abc:	01000074 	movhi	r4,1
    3ac0:	e139883a 	add	fp,fp,r4
    3ac4:	100e943a 	slli	r7,r2,16
    3ac8:	1004d43a 	srli	r2,r2,16
    3acc:	882ad43a 	srli	r21,r17,16
    3ad0:	a53fffcc 	andi	r20,r20,65535
    3ad4:	8c7fffcc 	andi	r17,r17,65535
    3ad8:	3d29883a 	add	r20,r7,r20
    3adc:	b00b883a 	mov	r5,r22
    3ae0:	8809883a 	mov	r4,r17
    3ae4:	d8c00515 	stw	r3,20(sp)
    3ae8:	d9800715 	stw	r6,28(sp)
    3aec:	da000615 	stw	r8,24(sp)
    3af0:	dd000115 	stw	r20,4(sp)
    3af4:	d8800015 	stw	r2,0(sp)
    3af8:	000197c0 	call	197c <__mulsi3>
    3afc:	980b883a 	mov	r5,r19
    3b00:	8809883a 	mov	r4,r17
    3b04:	d8800215 	stw	r2,8(sp)
    3b08:	000197c0 	call	197c <__mulsi3>
    3b0c:	9809883a 	mov	r4,r19
    3b10:	a80b883a 	mov	r5,r21
    3b14:	1029883a 	mov	r20,r2
    3b18:	000197c0 	call	197c <__mulsi3>
    3b1c:	b00b883a 	mov	r5,r22
    3b20:	a809883a 	mov	r4,r21
    3b24:	d8800415 	stw	r2,16(sp)
    3b28:	000197c0 	call	197c <__mulsi3>
    3b2c:	d9c00217 	ldw	r7,8(sp)
    3b30:	1505883a 	add	r2,r2,r20
    3b34:	d8c00517 	ldw	r3,20(sp)
    3b38:	3826d43a 	srli	r19,r7,16
    3b3c:	d9800717 	ldw	r6,28(sp)
    3b40:	da000617 	ldw	r8,24(sp)
    3b44:	9885883a 	add	r2,r19,r2
    3b48:	da400417 	ldw	r9,16(sp)
    3b4c:	1500022e 	bgeu	r2,r20,3b58 <__muldf3+0x458>
    3b50:	01000074 	movhi	r4,1
    3b54:	4913883a 	add	r9,r9,r4
    3b58:	1028d43a 	srli	r20,r2,16
    3b5c:	1004943a 	slli	r2,r2,16
    3b60:	802cd43a 	srli	r22,r16,16
    3b64:	843fffcc 	andi	r16,r16,65535
    3b68:	3cffffcc 	andi	r19,r7,65535
    3b6c:	9009883a 	mov	r4,r18
    3b70:	800b883a 	mov	r5,r16
    3b74:	a269883a 	add	r20,r20,r9
    3b78:	d8c00515 	stw	r3,20(sp)
    3b7c:	d9800715 	stw	r6,28(sp)
    3b80:	da000615 	stw	r8,24(sp)
    3b84:	14e7883a 	add	r19,r2,r19
    3b88:	000197c0 	call	197c <__mulsi3>
    3b8c:	9009883a 	mov	r4,r18
    3b90:	b00b883a 	mov	r5,r22
    3b94:	d8800315 	stw	r2,12(sp)
    3b98:	000197c0 	call	197c <__mulsi3>
    3b9c:	b809883a 	mov	r4,r23
    3ba0:	b00b883a 	mov	r5,r22
    3ba4:	d8800215 	stw	r2,8(sp)
    3ba8:	000197c0 	call	197c <__mulsi3>
    3bac:	b80b883a 	mov	r5,r23
    3bb0:	8009883a 	mov	r4,r16
    3bb4:	d8800415 	stw	r2,16(sp)
    3bb8:	000197c0 	call	197c <__mulsi3>
    3bbc:	da800317 	ldw	r10,12(sp)
    3bc0:	d9c00217 	ldw	r7,8(sp)
    3bc4:	d9000017 	ldw	r4,0(sp)
    3bc8:	502ed43a 	srli	r23,r10,16
    3bcc:	11c5883a 	add	r2,r2,r7
    3bd0:	24e5883a 	add	r18,r4,r19
    3bd4:	b885883a 	add	r2,r23,r2
    3bd8:	d8c00517 	ldw	r3,20(sp)
    3bdc:	d9800717 	ldw	r6,28(sp)
    3be0:	da000617 	ldw	r8,24(sp)
    3be4:	da400417 	ldw	r9,16(sp)
    3be8:	11c0022e 	bgeu	r2,r7,3bf4 <__muldf3+0x4f4>
    3bec:	01000074 	movhi	r4,1
    3bf0:	4913883a 	add	r9,r9,r4
    3bf4:	100ed43a 	srli	r7,r2,16
    3bf8:	1004943a 	slli	r2,r2,16
    3bfc:	55ffffcc 	andi	r23,r10,65535
    3c00:	3a53883a 	add	r9,r7,r9
    3c04:	8809883a 	mov	r4,r17
    3c08:	800b883a 	mov	r5,r16
    3c0c:	d8c00515 	stw	r3,20(sp)
    3c10:	d9800715 	stw	r6,28(sp)
    3c14:	da000615 	stw	r8,24(sp)
    3c18:	da400415 	stw	r9,16(sp)
    3c1c:	15ef883a 	add	r23,r2,r23
    3c20:	000197c0 	call	197c <__mulsi3>
    3c24:	8809883a 	mov	r4,r17
    3c28:	b00b883a 	mov	r5,r22
    3c2c:	d8800215 	stw	r2,8(sp)
    3c30:	000197c0 	call	197c <__mulsi3>
    3c34:	b00b883a 	mov	r5,r22
    3c38:	a809883a 	mov	r4,r21
    3c3c:	d8800315 	stw	r2,12(sp)
    3c40:	000197c0 	call	197c <__mulsi3>
    3c44:	8009883a 	mov	r4,r16
    3c48:	a80b883a 	mov	r5,r21
    3c4c:	1023883a 	mov	r17,r2
    3c50:	000197c0 	call	197c <__mulsi3>
    3c54:	d9c00217 	ldw	r7,8(sp)
    3c58:	da800317 	ldw	r10,12(sp)
    3c5c:	d8c00517 	ldw	r3,20(sp)
    3c60:	3808d43a 	srli	r4,r7,16
    3c64:	1285883a 	add	r2,r2,r10
    3c68:	d9800717 	ldw	r6,28(sp)
    3c6c:	2085883a 	add	r2,r4,r2
    3c70:	da000617 	ldw	r8,24(sp)
    3c74:	da400417 	ldw	r9,16(sp)
    3c78:	1280022e 	bgeu	r2,r10,3c84 <__muldf3+0x584>
    3c7c:	01000074 	movhi	r4,1
    3c80:	8923883a 	add	r17,r17,r4
    3c84:	1008943a 	slli	r4,r2,16
    3c88:	39ffffcc 	andi	r7,r7,65535
    3c8c:	e4b9883a 	add	fp,fp,r18
    3c90:	21cf883a 	add	r7,r4,r7
    3c94:	e4e7803a 	cmpltu	r19,fp,r19
    3c98:	3d0f883a 	add	r7,r7,r20
    3c9c:	bf39883a 	add	fp,r23,fp
    3ca0:	99c9883a 	add	r4,r19,r7
    3ca4:	e5ef803a 	cmpltu	r23,fp,r23
    3ca8:	490b883a 	add	r5,r9,r4
    3cac:	1004d43a 	srli	r2,r2,16
    3cb0:	b965883a 	add	r18,r23,r5
    3cb4:	24c9803a 	cmpltu	r4,r4,r19
    3cb8:	3d29803a 	cmpltu	r20,r7,r20
    3cbc:	a128b03a 	or	r20,r20,r4
    3cc0:	95ef803a 	cmpltu	r23,r18,r23
    3cc4:	2a53803a 	cmpltu	r9,r5,r9
    3cc8:	a0a9883a 	add	r20,r20,r2
    3ccc:	4deeb03a 	or	r23,r9,r23
    3cd0:	a5ef883a 	add	r23,r20,r23
    3cd4:	bc63883a 	add	r17,r23,r17
    3cd8:	e004927a 	slli	r2,fp,9
    3cdc:	d9000117 	ldw	r4,4(sp)
    3ce0:	882e927a 	slli	r23,r17,9
    3ce4:	9022d5fa 	srli	r17,r18,23
    3ce8:	e038d5fa 	srli	fp,fp,23
    3cec:	1104b03a 	or	r2,r2,r4
    3cf0:	9024927a 	slli	r18,r18,9
    3cf4:	1004c03a 	cmpne	r2,r2,zero
    3cf8:	bc62b03a 	or	r17,r23,r17
    3cfc:	1738b03a 	or	fp,r2,fp
    3d00:	8880402c 	andhi	r2,r17,256
    3d04:	e4a4b03a 	or	r18,fp,r18
    3d08:	10000726 	beq	r2,zero,3d28 <__muldf3+0x628>
    3d0c:	9006d07a 	srli	r3,r18,1
    3d10:	880497fa 	slli	r2,r17,31
    3d14:	9480004c 	andi	r18,r18,1
    3d18:	8822d07a 	srli	r17,r17,1
    3d1c:	1ca4b03a 	or	r18,r3,r18
    3d20:	14a4b03a 	or	r18,r2,r18
    3d24:	4007883a 	mov	r3,r8
    3d28:	1880ffc4 	addi	r2,r3,1023
    3d2c:	0080460e 	bge	zero,r2,3e48 <__muldf3+0x748>
    3d30:	910001cc 	andi	r4,r18,7
    3d34:	20000726 	beq	r4,zero,3d54 <__muldf3+0x654>
    3d38:	910003cc 	andi	r4,r18,15
    3d3c:	01400104 	movi	r5,4
    3d40:	21400426 	beq	r4,r5,3d54 <__muldf3+0x654>
    3d44:	9149883a 	add	r4,r18,r5
    3d48:	24a5803a 	cmpltu	r18,r4,r18
    3d4c:	8ca3883a 	add	r17,r17,r18
    3d50:	2025883a 	mov	r18,r4
    3d54:	8900402c 	andhi	r4,r17,256
    3d58:	20000426 	beq	r4,zero,3d6c <__muldf3+0x66c>
    3d5c:	18810004 	addi	r2,r3,1024
    3d60:	00ffc034 	movhi	r3,65280
    3d64:	18ffffc4 	addi	r3,r3,-1
    3d68:	88e2703a 	and	r17,r17,r3
    3d6c:	00c1ff84 	movi	r3,2046
    3d70:	18bf1316 	blt	r3,r2,39c0 <__alt_data_end+0xfffe39c0>
    3d74:	882c977a 	slli	r22,r17,29
    3d78:	9024d0fa 	srli	r18,r18,3
    3d7c:	8822927a 	slli	r17,r17,9
    3d80:	1081ffcc 	andi	r2,r2,2047
    3d84:	b4acb03a 	or	r22,r22,r18
    3d88:	8820d33a 	srli	r16,r17,12
    3d8c:	3027883a 	mov	r19,r6
    3d90:	003eba06 	br	387c <__alt_data_end+0xfffe387c>
    3d94:	8080022c 	andhi	r2,r16,8
    3d98:	10000926 	beq	r2,zero,3dc0 <__muldf3+0x6c0>
    3d9c:	8880022c 	andhi	r2,r17,8
    3da0:	1000071e 	bne	r2,zero,3dc0 <__muldf3+0x6c0>
    3da4:	00800434 	movhi	r2,16
    3da8:	8c000234 	orhi	r16,r17,8
    3dac:	10bfffc4 	addi	r2,r2,-1
    3db0:	e027883a 	mov	r19,fp
    3db4:	80a0703a 	and	r16,r16,r2
    3db8:	902d883a 	mov	r22,r18
    3dbc:	003f1706 	br	3a1c <__alt_data_end+0xfffe3a1c>
    3dc0:	00800434 	movhi	r2,16
    3dc4:	84000234 	orhi	r16,r16,8
    3dc8:	10bfffc4 	addi	r2,r2,-1
    3dcc:	80a0703a 	and	r16,r16,r2
    3dd0:	003f1206 	br	3a1c <__alt_data_end+0xfffe3a1c>
    3dd4:	147ff604 	addi	r17,r2,-40
    3dd8:	3462983a 	sll	r17,r6,r17
    3ddc:	0025883a 	mov	r18,zero
    3de0:	003ef306 	br	39b0 <__alt_data_end+0xfffe39b0>
    3de4:	3009883a 	mov	r4,r6
    3de8:	d9400215 	stw	r5,8(sp)
    3dec:	d9800715 	stw	r6,28(sp)
    3df0:	da400415 	stw	r9,16(sp)
    3df4:	da800315 	stw	r10,12(sp)
    3df8:	00049440 	call	4944 <__clzsi2>
    3dfc:	10800804 	addi	r2,r2,32
    3e00:	da800317 	ldw	r10,12(sp)
    3e04:	da400417 	ldw	r9,16(sp)
    3e08:	d9800717 	ldw	r6,28(sp)
    3e0c:	d9400217 	ldw	r5,8(sp)
    3e10:	003edd06 	br	3988 <__alt_data_end+0xfffe3988>
    3e14:	143ff604 	addi	r16,r2,-40
    3e18:	ac20983a 	sll	r16,r21,r16
    3e1c:	002d883a 	mov	r22,zero
    3e20:	003ec106 	br	3928 <__alt_data_end+0xfffe3928>
    3e24:	d9800715 	stw	r6,28(sp)
    3e28:	d9c00215 	stw	r7,8(sp)
    3e2c:	da400415 	stw	r9,16(sp)
    3e30:	00049440 	call	4944 <__clzsi2>
    3e34:	10800804 	addi	r2,r2,32
    3e38:	da400417 	ldw	r9,16(sp)
    3e3c:	d9c00217 	ldw	r7,8(sp)
    3e40:	d9800717 	ldw	r6,28(sp)
    3e44:	003eae06 	br	3900 <__alt_data_end+0xfffe3900>
    3e48:	00c00044 	movi	r3,1
    3e4c:	1887c83a 	sub	r3,r3,r2
    3e50:	01000e04 	movi	r4,56
    3e54:	20fe8516 	blt	r4,r3,386c <__alt_data_end+0xfffe386c>
    3e58:	010007c4 	movi	r4,31
    3e5c:	20c01b16 	blt	r4,r3,3ecc <__muldf3+0x7cc>
    3e60:	00800804 	movi	r2,32
    3e64:	10c5c83a 	sub	r2,r2,r3
    3e68:	888a983a 	sll	r5,r17,r2
    3e6c:	90c8d83a 	srl	r4,r18,r3
    3e70:	9084983a 	sll	r2,r18,r2
    3e74:	88e2d83a 	srl	r17,r17,r3
    3e78:	2906b03a 	or	r3,r5,r4
    3e7c:	1004c03a 	cmpne	r2,r2,zero
    3e80:	1886b03a 	or	r3,r3,r2
    3e84:	188001cc 	andi	r2,r3,7
    3e88:	10000726 	beq	r2,zero,3ea8 <__muldf3+0x7a8>
    3e8c:	188003cc 	andi	r2,r3,15
    3e90:	01000104 	movi	r4,4
    3e94:	11000426 	beq	r2,r4,3ea8 <__muldf3+0x7a8>
    3e98:	1805883a 	mov	r2,r3
    3e9c:	10c00104 	addi	r3,r2,4
    3ea0:	1885803a 	cmpltu	r2,r3,r2
    3ea4:	88a3883a 	add	r17,r17,r2
    3ea8:	8880202c 	andhi	r2,r17,128
    3eac:	10001c26 	beq	r2,zero,3f20 <__muldf3+0x820>
    3eb0:	3027883a 	mov	r19,r6
    3eb4:	00800044 	movi	r2,1
    3eb8:	0021883a 	mov	r16,zero
    3ebc:	002d883a 	mov	r22,zero
    3ec0:	003e6e06 	br	387c <__alt_data_end+0xfffe387c>
    3ec4:	4007883a 	mov	r3,r8
    3ec8:	003f9706 	br	3d28 <__alt_data_end+0xfffe3d28>
    3ecc:	017ff844 	movi	r5,-31
    3ed0:	2885c83a 	sub	r2,r5,r2
    3ed4:	888ad83a 	srl	r5,r17,r2
    3ed8:	00800804 	movi	r2,32
    3edc:	18801a26 	beq	r3,r2,3f48 <__muldf3+0x848>
    3ee0:	01001004 	movi	r4,64
    3ee4:	20c7c83a 	sub	r3,r4,r3
    3ee8:	88e2983a 	sll	r17,r17,r3
    3eec:	8ca4b03a 	or	r18,r17,r18
    3ef0:	9004c03a 	cmpne	r2,r18,zero
    3ef4:	2884b03a 	or	r2,r5,r2
    3ef8:	144001cc 	andi	r17,r2,7
    3efc:	88000d1e 	bne	r17,zero,3f34 <__muldf3+0x834>
    3f00:	0021883a 	mov	r16,zero
    3f04:	102cd0fa 	srli	r22,r2,3
    3f08:	3027883a 	mov	r19,r6
    3f0c:	0005883a 	mov	r2,zero
    3f10:	b46cb03a 	or	r22,r22,r17
    3f14:	003e5906 	br	387c <__alt_data_end+0xfffe387c>
    3f18:	1007883a 	mov	r3,r2
    3f1c:	0023883a 	mov	r17,zero
    3f20:	8820927a 	slli	r16,r17,9
    3f24:	1805883a 	mov	r2,r3
    3f28:	8822977a 	slli	r17,r17,29
    3f2c:	8020d33a 	srli	r16,r16,12
    3f30:	003ff406 	br	3f04 <__alt_data_end+0xfffe3f04>
    3f34:	10c003cc 	andi	r3,r2,15
    3f38:	01000104 	movi	r4,4
    3f3c:	193ff626 	beq	r3,r4,3f18 <__alt_data_end+0xfffe3f18>
    3f40:	0023883a 	mov	r17,zero
    3f44:	003fd506 	br	3e9c <__alt_data_end+0xfffe3e9c>
    3f48:	0023883a 	mov	r17,zero
    3f4c:	003fe706 	br	3eec <__alt_data_end+0xfffe3eec>
    3f50:	00800434 	movhi	r2,16
    3f54:	8c000234 	orhi	r16,r17,8
    3f58:	10bfffc4 	addi	r2,r2,-1
    3f5c:	3027883a 	mov	r19,r6
    3f60:	80a0703a 	and	r16,r16,r2
    3f64:	902d883a 	mov	r22,r18
    3f68:	003eac06 	br	3a1c <__alt_data_end+0xfffe3a1c>

00003f6c <__subdf3>:
    3f6c:	02000434 	movhi	r8,16
    3f70:	423fffc4 	addi	r8,r8,-1
    3f74:	defffb04 	addi	sp,sp,-20
    3f78:	2a14703a 	and	r10,r5,r8
    3f7c:	3812d53a 	srli	r9,r7,20
    3f80:	3a10703a 	and	r8,r7,r8
    3f84:	2006d77a 	srli	r3,r4,29
    3f88:	3004d77a 	srli	r2,r6,29
    3f8c:	dc000015 	stw	r16,0(sp)
    3f90:	501490fa 	slli	r10,r10,3
    3f94:	2820d53a 	srli	r16,r5,20
    3f98:	401090fa 	slli	r8,r8,3
    3f9c:	dc800215 	stw	r18,8(sp)
    3fa0:	dc400115 	stw	r17,4(sp)
    3fa4:	dfc00415 	stw	ra,16(sp)
    3fa8:	202290fa 	slli	r17,r4,3
    3fac:	dcc00315 	stw	r19,12(sp)
    3fb0:	4a41ffcc 	andi	r9,r9,2047
    3fb4:	0101ffc4 	movi	r4,2047
    3fb8:	2824d7fa 	srli	r18,r5,31
    3fbc:	8401ffcc 	andi	r16,r16,2047
    3fc0:	50c6b03a 	or	r3,r10,r3
    3fc4:	380ed7fa 	srli	r7,r7,31
    3fc8:	408ab03a 	or	r5,r8,r2
    3fcc:	300c90fa 	slli	r6,r6,3
    3fd0:	49009626 	beq	r9,r4,422c <__subdf3+0x2c0>
    3fd4:	39c0005c 	xori	r7,r7,1
    3fd8:	8245c83a 	sub	r2,r16,r9
    3fdc:	3c807426 	beq	r7,r18,41b0 <__subdf3+0x244>
    3fe0:	0080af0e 	bge	zero,r2,42a0 <__subdf3+0x334>
    3fe4:	48002a1e 	bne	r9,zero,4090 <__subdf3+0x124>
    3fe8:	2988b03a 	or	r4,r5,r6
    3fec:	20009a1e 	bne	r4,zero,4258 <__subdf3+0x2ec>
    3ff0:	888001cc 	andi	r2,r17,7
    3ff4:	10000726 	beq	r2,zero,4014 <__subdf3+0xa8>
    3ff8:	888003cc 	andi	r2,r17,15
    3ffc:	01000104 	movi	r4,4
    4000:	11000426 	beq	r2,r4,4014 <__subdf3+0xa8>
    4004:	890b883a 	add	r5,r17,r4
    4008:	2c63803a 	cmpltu	r17,r5,r17
    400c:	1c47883a 	add	r3,r3,r17
    4010:	2823883a 	mov	r17,r5
    4014:	1880202c 	andhi	r2,r3,128
    4018:	10005926 	beq	r2,zero,4180 <__subdf3+0x214>
    401c:	84000044 	addi	r16,r16,1
    4020:	0081ffc4 	movi	r2,2047
    4024:	8080be26 	beq	r16,r2,4320 <__subdf3+0x3b4>
    4028:	017fe034 	movhi	r5,65408
    402c:	297fffc4 	addi	r5,r5,-1
    4030:	1946703a 	and	r3,r3,r5
    4034:	1804977a 	slli	r2,r3,29
    4038:	1806927a 	slli	r3,r3,9
    403c:	8822d0fa 	srli	r17,r17,3
    4040:	8401ffcc 	andi	r16,r16,2047
    4044:	180ad33a 	srli	r5,r3,12
    4048:	9100004c 	andi	r4,r18,1
    404c:	1444b03a 	or	r2,r2,r17
    4050:	80c1ffcc 	andi	r3,r16,2047
    4054:	1820953a 	slli	r16,r3,20
    4058:	20c03fcc 	andi	r3,r4,255
    405c:	180897fa 	slli	r4,r3,31
    4060:	00c00434 	movhi	r3,16
    4064:	18ffffc4 	addi	r3,r3,-1
    4068:	28c6703a 	and	r3,r5,r3
    406c:	1c06b03a 	or	r3,r3,r16
    4070:	1906b03a 	or	r3,r3,r4
    4074:	dfc00417 	ldw	ra,16(sp)
    4078:	dcc00317 	ldw	r19,12(sp)
    407c:	dc800217 	ldw	r18,8(sp)
    4080:	dc400117 	ldw	r17,4(sp)
    4084:	dc000017 	ldw	r16,0(sp)
    4088:	dec00504 	addi	sp,sp,20
    408c:	f800283a 	ret
    4090:	0101ffc4 	movi	r4,2047
    4094:	813fd626 	beq	r16,r4,3ff0 <__alt_data_end+0xfffe3ff0>
    4098:	29402034 	orhi	r5,r5,128
    409c:	01000e04 	movi	r4,56
    40a0:	2080a316 	blt	r4,r2,4330 <__subdf3+0x3c4>
    40a4:	010007c4 	movi	r4,31
    40a8:	2080c616 	blt	r4,r2,43c4 <__subdf3+0x458>
    40ac:	01000804 	movi	r4,32
    40b0:	2089c83a 	sub	r4,r4,r2
    40b4:	2910983a 	sll	r8,r5,r4
    40b8:	308ed83a 	srl	r7,r6,r2
    40bc:	3108983a 	sll	r4,r6,r4
    40c0:	2884d83a 	srl	r2,r5,r2
    40c4:	41ccb03a 	or	r6,r8,r7
    40c8:	2008c03a 	cmpne	r4,r4,zero
    40cc:	310cb03a 	or	r6,r6,r4
    40d0:	898dc83a 	sub	r6,r17,r6
    40d4:	89a3803a 	cmpltu	r17,r17,r6
    40d8:	1887c83a 	sub	r3,r3,r2
    40dc:	1c47c83a 	sub	r3,r3,r17
    40e0:	3023883a 	mov	r17,r6
    40e4:	1880202c 	andhi	r2,r3,128
    40e8:	10002326 	beq	r2,zero,4178 <__subdf3+0x20c>
    40ec:	04c02034 	movhi	r19,128
    40f0:	9cffffc4 	addi	r19,r19,-1
    40f4:	1ce6703a 	and	r19,r3,r19
    40f8:	98007a26 	beq	r19,zero,42e4 <__subdf3+0x378>
    40fc:	9809883a 	mov	r4,r19
    4100:	00049440 	call	4944 <__clzsi2>
    4104:	113ffe04 	addi	r4,r2,-8
    4108:	00c007c4 	movi	r3,31
    410c:	19007b16 	blt	r3,r4,42fc <__subdf3+0x390>
    4110:	00800804 	movi	r2,32
    4114:	1105c83a 	sub	r2,r2,r4
    4118:	8884d83a 	srl	r2,r17,r2
    411c:	9906983a 	sll	r3,r19,r4
    4120:	8922983a 	sll	r17,r17,r4
    4124:	10c4b03a 	or	r2,r2,r3
    4128:	24007816 	blt	r4,r16,430c <__subdf3+0x3a0>
    412c:	2421c83a 	sub	r16,r4,r16
    4130:	80c00044 	addi	r3,r16,1
    4134:	010007c4 	movi	r4,31
    4138:	20c09516 	blt	r4,r3,4390 <__subdf3+0x424>
    413c:	01400804 	movi	r5,32
    4140:	28cbc83a 	sub	r5,r5,r3
    4144:	88c8d83a 	srl	r4,r17,r3
    4148:	8962983a 	sll	r17,r17,r5
    414c:	114a983a 	sll	r5,r2,r5
    4150:	10c6d83a 	srl	r3,r2,r3
    4154:	8804c03a 	cmpne	r2,r17,zero
    4158:	290ab03a 	or	r5,r5,r4
    415c:	28a2b03a 	or	r17,r5,r2
    4160:	0021883a 	mov	r16,zero
    4164:	003fa206 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    4168:	2090b03a 	or	r8,r4,r2
    416c:	40018e26 	beq	r8,zero,47a8 <__subdf3+0x83c>
    4170:	1007883a 	mov	r3,r2
    4174:	2023883a 	mov	r17,r4
    4178:	888001cc 	andi	r2,r17,7
    417c:	103f9e1e 	bne	r2,zero,3ff8 <__alt_data_end+0xfffe3ff8>
    4180:	1804977a 	slli	r2,r3,29
    4184:	8822d0fa 	srli	r17,r17,3
    4188:	1810d0fa 	srli	r8,r3,3
    418c:	9100004c 	andi	r4,r18,1
    4190:	1444b03a 	or	r2,r2,r17
    4194:	00c1ffc4 	movi	r3,2047
    4198:	80c02826 	beq	r16,r3,423c <__subdf3+0x2d0>
    419c:	01400434 	movhi	r5,16
    41a0:	297fffc4 	addi	r5,r5,-1
    41a4:	80e0703a 	and	r16,r16,r3
    41a8:	414a703a 	and	r5,r8,r5
    41ac:	003fa806 	br	4050 <__alt_data_end+0xfffe4050>
    41b0:	0080630e 	bge	zero,r2,4340 <__subdf3+0x3d4>
    41b4:	48003026 	beq	r9,zero,4278 <__subdf3+0x30c>
    41b8:	0101ffc4 	movi	r4,2047
    41bc:	813f8c26 	beq	r16,r4,3ff0 <__alt_data_end+0xfffe3ff0>
    41c0:	29402034 	orhi	r5,r5,128
    41c4:	01000e04 	movi	r4,56
    41c8:	2080a90e 	bge	r4,r2,4470 <__subdf3+0x504>
    41cc:	298cb03a 	or	r6,r5,r6
    41d0:	3012c03a 	cmpne	r9,r6,zero
    41d4:	0005883a 	mov	r2,zero
    41d8:	4c53883a 	add	r9,r9,r17
    41dc:	4c63803a 	cmpltu	r17,r9,r17
    41e0:	10c7883a 	add	r3,r2,r3
    41e4:	88c7883a 	add	r3,r17,r3
    41e8:	4823883a 	mov	r17,r9
    41ec:	1880202c 	andhi	r2,r3,128
    41f0:	1000d026 	beq	r2,zero,4534 <__subdf3+0x5c8>
    41f4:	84000044 	addi	r16,r16,1
    41f8:	0081ffc4 	movi	r2,2047
    41fc:	8080fe26 	beq	r16,r2,45f8 <__subdf3+0x68c>
    4200:	00bfe034 	movhi	r2,65408
    4204:	10bfffc4 	addi	r2,r2,-1
    4208:	1886703a 	and	r3,r3,r2
    420c:	880ad07a 	srli	r5,r17,1
    4210:	180497fa 	slli	r2,r3,31
    4214:	8900004c 	andi	r4,r17,1
    4218:	2922b03a 	or	r17,r5,r4
    421c:	1806d07a 	srli	r3,r3,1
    4220:	1462b03a 	or	r17,r2,r17
    4224:	3825883a 	mov	r18,r7
    4228:	003f7106 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    422c:	2984b03a 	or	r2,r5,r6
    4230:	103f6826 	beq	r2,zero,3fd4 <__alt_data_end+0xfffe3fd4>
    4234:	39c03fcc 	andi	r7,r7,255
    4238:	003f6706 	br	3fd8 <__alt_data_end+0xfffe3fd8>
    423c:	4086b03a 	or	r3,r8,r2
    4240:	18015226 	beq	r3,zero,478c <__subdf3+0x820>
    4244:	00c00434 	movhi	r3,16
    4248:	41400234 	orhi	r5,r8,8
    424c:	18ffffc4 	addi	r3,r3,-1
    4250:	28ca703a 	and	r5,r5,r3
    4254:	003f7e06 	br	4050 <__alt_data_end+0xfffe4050>
    4258:	10bfffc4 	addi	r2,r2,-1
    425c:	1000491e 	bne	r2,zero,4384 <__subdf3+0x418>
    4260:	898fc83a 	sub	r7,r17,r6
    4264:	89e3803a 	cmpltu	r17,r17,r7
    4268:	1947c83a 	sub	r3,r3,r5
    426c:	1c47c83a 	sub	r3,r3,r17
    4270:	3823883a 	mov	r17,r7
    4274:	003f9b06 	br	40e4 <__alt_data_end+0xfffe40e4>
    4278:	2988b03a 	or	r4,r5,r6
    427c:	203f5c26 	beq	r4,zero,3ff0 <__alt_data_end+0xfffe3ff0>
    4280:	10bfffc4 	addi	r2,r2,-1
    4284:	1000931e 	bne	r2,zero,44d4 <__subdf3+0x568>
    4288:	898d883a 	add	r6,r17,r6
    428c:	3463803a 	cmpltu	r17,r6,r17
    4290:	1947883a 	add	r3,r3,r5
    4294:	88c7883a 	add	r3,r17,r3
    4298:	3023883a 	mov	r17,r6
    429c:	003fd306 	br	41ec <__alt_data_end+0xfffe41ec>
    42a0:	1000541e 	bne	r2,zero,43f4 <__subdf3+0x488>
    42a4:	80800044 	addi	r2,r16,1
    42a8:	1081ffcc 	andi	r2,r2,2047
    42ac:	01000044 	movi	r4,1
    42b0:	2080a20e 	bge	r4,r2,453c <__subdf3+0x5d0>
    42b4:	8989c83a 	sub	r4,r17,r6
    42b8:	8905803a 	cmpltu	r2,r17,r4
    42bc:	1967c83a 	sub	r19,r3,r5
    42c0:	98a7c83a 	sub	r19,r19,r2
    42c4:	9880202c 	andhi	r2,r19,128
    42c8:	10006326 	beq	r2,zero,4458 <__subdf3+0x4ec>
    42cc:	3463c83a 	sub	r17,r6,r17
    42d0:	28c7c83a 	sub	r3,r5,r3
    42d4:	344d803a 	cmpltu	r6,r6,r17
    42d8:	19a7c83a 	sub	r19,r3,r6
    42dc:	3825883a 	mov	r18,r7
    42e0:	983f861e 	bne	r19,zero,40fc <__alt_data_end+0xfffe40fc>
    42e4:	8809883a 	mov	r4,r17
    42e8:	00049440 	call	4944 <__clzsi2>
    42ec:	10800804 	addi	r2,r2,32
    42f0:	113ffe04 	addi	r4,r2,-8
    42f4:	00c007c4 	movi	r3,31
    42f8:	193f850e 	bge	r3,r4,4110 <__alt_data_end+0xfffe4110>
    42fc:	10bff604 	addi	r2,r2,-40
    4300:	8884983a 	sll	r2,r17,r2
    4304:	0023883a 	mov	r17,zero
    4308:	243f880e 	bge	r4,r16,412c <__alt_data_end+0xfffe412c>
    430c:	00ffe034 	movhi	r3,65408
    4310:	18ffffc4 	addi	r3,r3,-1
    4314:	8121c83a 	sub	r16,r16,r4
    4318:	10c6703a 	and	r3,r2,r3
    431c:	003f3406 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    4320:	9100004c 	andi	r4,r18,1
    4324:	000b883a 	mov	r5,zero
    4328:	0005883a 	mov	r2,zero
    432c:	003f4806 	br	4050 <__alt_data_end+0xfffe4050>
    4330:	298cb03a 	or	r6,r5,r6
    4334:	300cc03a 	cmpne	r6,r6,zero
    4338:	0005883a 	mov	r2,zero
    433c:	003f6406 	br	40d0 <__alt_data_end+0xfffe40d0>
    4340:	10009a1e 	bne	r2,zero,45ac <__subdf3+0x640>
    4344:	82400044 	addi	r9,r16,1
    4348:	4881ffcc 	andi	r2,r9,2047
    434c:	02800044 	movi	r10,1
    4350:	5080670e 	bge	r10,r2,44f0 <__subdf3+0x584>
    4354:	0081ffc4 	movi	r2,2047
    4358:	4880af26 	beq	r9,r2,4618 <__subdf3+0x6ac>
    435c:	898d883a 	add	r6,r17,r6
    4360:	1945883a 	add	r2,r3,r5
    4364:	3447803a 	cmpltu	r3,r6,r17
    4368:	1887883a 	add	r3,r3,r2
    436c:	182297fa 	slli	r17,r3,31
    4370:	300cd07a 	srli	r6,r6,1
    4374:	1806d07a 	srli	r3,r3,1
    4378:	4821883a 	mov	r16,r9
    437c:	89a2b03a 	or	r17,r17,r6
    4380:	003f1b06 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    4384:	0101ffc4 	movi	r4,2047
    4388:	813f441e 	bne	r16,r4,409c <__alt_data_end+0xfffe409c>
    438c:	003f1806 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    4390:	843ff844 	addi	r16,r16,-31
    4394:	01400804 	movi	r5,32
    4398:	1408d83a 	srl	r4,r2,r16
    439c:	19405026 	beq	r3,r5,44e0 <__subdf3+0x574>
    43a0:	01401004 	movi	r5,64
    43a4:	28c7c83a 	sub	r3,r5,r3
    43a8:	10c4983a 	sll	r2,r2,r3
    43ac:	88a2b03a 	or	r17,r17,r2
    43b0:	8822c03a 	cmpne	r17,r17,zero
    43b4:	2462b03a 	or	r17,r4,r17
    43b8:	0007883a 	mov	r3,zero
    43bc:	0021883a 	mov	r16,zero
    43c0:	003f6d06 	br	4178 <__alt_data_end+0xfffe4178>
    43c4:	11fff804 	addi	r7,r2,-32
    43c8:	01000804 	movi	r4,32
    43cc:	29ced83a 	srl	r7,r5,r7
    43d0:	11004526 	beq	r2,r4,44e8 <__subdf3+0x57c>
    43d4:	01001004 	movi	r4,64
    43d8:	2089c83a 	sub	r4,r4,r2
    43dc:	2904983a 	sll	r2,r5,r4
    43e0:	118cb03a 	or	r6,r2,r6
    43e4:	300cc03a 	cmpne	r6,r6,zero
    43e8:	398cb03a 	or	r6,r7,r6
    43ec:	0005883a 	mov	r2,zero
    43f0:	003f3706 	br	40d0 <__alt_data_end+0xfffe40d0>
    43f4:	80002a26 	beq	r16,zero,44a0 <__subdf3+0x534>
    43f8:	0101ffc4 	movi	r4,2047
    43fc:	49006626 	beq	r9,r4,4598 <__subdf3+0x62c>
    4400:	0085c83a 	sub	r2,zero,r2
    4404:	18c02034 	orhi	r3,r3,128
    4408:	01000e04 	movi	r4,56
    440c:	20807e16 	blt	r4,r2,4608 <__subdf3+0x69c>
    4410:	010007c4 	movi	r4,31
    4414:	2080e716 	blt	r4,r2,47b4 <__subdf3+0x848>
    4418:	01000804 	movi	r4,32
    441c:	2089c83a 	sub	r4,r4,r2
    4420:	1914983a 	sll	r10,r3,r4
    4424:	8890d83a 	srl	r8,r17,r2
    4428:	8908983a 	sll	r4,r17,r4
    442c:	1884d83a 	srl	r2,r3,r2
    4430:	5222b03a 	or	r17,r10,r8
    4434:	2006c03a 	cmpne	r3,r4,zero
    4438:	88e2b03a 	or	r17,r17,r3
    443c:	3463c83a 	sub	r17,r6,r17
    4440:	2885c83a 	sub	r2,r5,r2
    4444:	344d803a 	cmpltu	r6,r6,r17
    4448:	1187c83a 	sub	r3,r2,r6
    444c:	4821883a 	mov	r16,r9
    4450:	3825883a 	mov	r18,r7
    4454:	003f2306 	br	40e4 <__alt_data_end+0xfffe40e4>
    4458:	24d0b03a 	or	r8,r4,r19
    445c:	40001b1e 	bne	r8,zero,44cc <__subdf3+0x560>
    4460:	0005883a 	mov	r2,zero
    4464:	0009883a 	mov	r4,zero
    4468:	0021883a 	mov	r16,zero
    446c:	003f4906 	br	4194 <__alt_data_end+0xfffe4194>
    4470:	010007c4 	movi	r4,31
    4474:	20803a16 	blt	r4,r2,4560 <__subdf3+0x5f4>
    4478:	01000804 	movi	r4,32
    447c:	2089c83a 	sub	r4,r4,r2
    4480:	2912983a 	sll	r9,r5,r4
    4484:	3090d83a 	srl	r8,r6,r2
    4488:	3108983a 	sll	r4,r6,r4
    448c:	2884d83a 	srl	r2,r5,r2
    4490:	4a12b03a 	or	r9,r9,r8
    4494:	2008c03a 	cmpne	r4,r4,zero
    4498:	4912b03a 	or	r9,r9,r4
    449c:	003f4e06 	br	41d8 <__alt_data_end+0xfffe41d8>
    44a0:	1c48b03a 	or	r4,r3,r17
    44a4:	20003c26 	beq	r4,zero,4598 <__subdf3+0x62c>
    44a8:	0084303a 	nor	r2,zero,r2
    44ac:	1000381e 	bne	r2,zero,4590 <__subdf3+0x624>
    44b0:	3463c83a 	sub	r17,r6,r17
    44b4:	28c5c83a 	sub	r2,r5,r3
    44b8:	344d803a 	cmpltu	r6,r6,r17
    44bc:	1187c83a 	sub	r3,r2,r6
    44c0:	4821883a 	mov	r16,r9
    44c4:	3825883a 	mov	r18,r7
    44c8:	003f0606 	br	40e4 <__alt_data_end+0xfffe40e4>
    44cc:	2023883a 	mov	r17,r4
    44d0:	003f0906 	br	40f8 <__alt_data_end+0xfffe40f8>
    44d4:	0101ffc4 	movi	r4,2047
    44d8:	813f3a1e 	bne	r16,r4,41c4 <__alt_data_end+0xfffe41c4>
    44dc:	003ec406 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    44e0:	0005883a 	mov	r2,zero
    44e4:	003fb106 	br	43ac <__alt_data_end+0xfffe43ac>
    44e8:	0005883a 	mov	r2,zero
    44ec:	003fbc06 	br	43e0 <__alt_data_end+0xfffe43e0>
    44f0:	1c44b03a 	or	r2,r3,r17
    44f4:	80008e1e 	bne	r16,zero,4730 <__subdf3+0x7c4>
    44f8:	1000c826 	beq	r2,zero,481c <__subdf3+0x8b0>
    44fc:	2984b03a 	or	r2,r5,r6
    4500:	103ebb26 	beq	r2,zero,3ff0 <__alt_data_end+0xfffe3ff0>
    4504:	8989883a 	add	r4,r17,r6
    4508:	1945883a 	add	r2,r3,r5
    450c:	2447803a 	cmpltu	r3,r4,r17
    4510:	1887883a 	add	r3,r3,r2
    4514:	1880202c 	andhi	r2,r3,128
    4518:	2023883a 	mov	r17,r4
    451c:	103f1626 	beq	r2,zero,4178 <__alt_data_end+0xfffe4178>
    4520:	00bfe034 	movhi	r2,65408
    4524:	10bfffc4 	addi	r2,r2,-1
    4528:	5021883a 	mov	r16,r10
    452c:	1886703a 	and	r3,r3,r2
    4530:	003eaf06 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    4534:	3825883a 	mov	r18,r7
    4538:	003f0f06 	br	4178 <__alt_data_end+0xfffe4178>
    453c:	1c44b03a 	or	r2,r3,r17
    4540:	8000251e 	bne	r16,zero,45d8 <__subdf3+0x66c>
    4544:	1000661e 	bne	r2,zero,46e0 <__subdf3+0x774>
    4548:	2990b03a 	or	r8,r5,r6
    454c:	40009626 	beq	r8,zero,47a8 <__subdf3+0x83c>
    4550:	2807883a 	mov	r3,r5
    4554:	3023883a 	mov	r17,r6
    4558:	3825883a 	mov	r18,r7
    455c:	003ea406 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    4560:	127ff804 	addi	r9,r2,-32
    4564:	01000804 	movi	r4,32
    4568:	2a52d83a 	srl	r9,r5,r9
    456c:	11008c26 	beq	r2,r4,47a0 <__subdf3+0x834>
    4570:	01001004 	movi	r4,64
    4574:	2085c83a 	sub	r2,r4,r2
    4578:	2884983a 	sll	r2,r5,r2
    457c:	118cb03a 	or	r6,r2,r6
    4580:	300cc03a 	cmpne	r6,r6,zero
    4584:	4992b03a 	or	r9,r9,r6
    4588:	0005883a 	mov	r2,zero
    458c:	003f1206 	br	41d8 <__alt_data_end+0xfffe41d8>
    4590:	0101ffc4 	movi	r4,2047
    4594:	493f9c1e 	bne	r9,r4,4408 <__alt_data_end+0xfffe4408>
    4598:	2807883a 	mov	r3,r5
    459c:	3023883a 	mov	r17,r6
    45a0:	4821883a 	mov	r16,r9
    45a4:	3825883a 	mov	r18,r7
    45a8:	003e9106 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    45ac:	80001f1e 	bne	r16,zero,462c <__subdf3+0x6c0>
    45b0:	1c48b03a 	or	r4,r3,r17
    45b4:	20005a26 	beq	r4,zero,4720 <__subdf3+0x7b4>
    45b8:	0084303a 	nor	r2,zero,r2
    45bc:	1000561e 	bne	r2,zero,4718 <__subdf3+0x7ac>
    45c0:	89a3883a 	add	r17,r17,r6
    45c4:	1945883a 	add	r2,r3,r5
    45c8:	898d803a 	cmpltu	r6,r17,r6
    45cc:	3087883a 	add	r3,r6,r2
    45d0:	4821883a 	mov	r16,r9
    45d4:	003f0506 	br	41ec <__alt_data_end+0xfffe41ec>
    45d8:	10002b1e 	bne	r2,zero,4688 <__subdf3+0x71c>
    45dc:	2984b03a 	or	r2,r5,r6
    45e0:	10008026 	beq	r2,zero,47e4 <__subdf3+0x878>
    45e4:	2807883a 	mov	r3,r5
    45e8:	3023883a 	mov	r17,r6
    45ec:	3825883a 	mov	r18,r7
    45f0:	0401ffc4 	movi	r16,2047
    45f4:	003e7e06 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    45f8:	3809883a 	mov	r4,r7
    45fc:	0011883a 	mov	r8,zero
    4600:	0005883a 	mov	r2,zero
    4604:	003ee306 	br	4194 <__alt_data_end+0xfffe4194>
    4608:	1c62b03a 	or	r17,r3,r17
    460c:	8822c03a 	cmpne	r17,r17,zero
    4610:	0005883a 	mov	r2,zero
    4614:	003f8906 	br	443c <__alt_data_end+0xfffe443c>
    4618:	3809883a 	mov	r4,r7
    461c:	4821883a 	mov	r16,r9
    4620:	0011883a 	mov	r8,zero
    4624:	0005883a 	mov	r2,zero
    4628:	003eda06 	br	4194 <__alt_data_end+0xfffe4194>
    462c:	0101ffc4 	movi	r4,2047
    4630:	49003b26 	beq	r9,r4,4720 <__subdf3+0x7b4>
    4634:	0085c83a 	sub	r2,zero,r2
    4638:	18c02034 	orhi	r3,r3,128
    463c:	01000e04 	movi	r4,56
    4640:	20806e16 	blt	r4,r2,47fc <__subdf3+0x890>
    4644:	010007c4 	movi	r4,31
    4648:	20807716 	blt	r4,r2,4828 <__subdf3+0x8bc>
    464c:	01000804 	movi	r4,32
    4650:	2089c83a 	sub	r4,r4,r2
    4654:	1914983a 	sll	r10,r3,r4
    4658:	8890d83a 	srl	r8,r17,r2
    465c:	8908983a 	sll	r4,r17,r4
    4660:	1884d83a 	srl	r2,r3,r2
    4664:	5222b03a 	or	r17,r10,r8
    4668:	2006c03a 	cmpne	r3,r4,zero
    466c:	88e2b03a 	or	r17,r17,r3
    4670:	89a3883a 	add	r17,r17,r6
    4674:	1145883a 	add	r2,r2,r5
    4678:	898d803a 	cmpltu	r6,r17,r6
    467c:	3087883a 	add	r3,r6,r2
    4680:	4821883a 	mov	r16,r9
    4684:	003ed906 	br	41ec <__alt_data_end+0xfffe41ec>
    4688:	2984b03a 	or	r2,r5,r6
    468c:	10004226 	beq	r2,zero,4798 <__subdf3+0x82c>
    4690:	1808d0fa 	srli	r4,r3,3
    4694:	8822d0fa 	srli	r17,r17,3
    4698:	1806977a 	slli	r3,r3,29
    469c:	2080022c 	andhi	r2,r4,8
    46a0:	1c62b03a 	or	r17,r3,r17
    46a4:	10000826 	beq	r2,zero,46c8 <__subdf3+0x75c>
    46a8:	2812d0fa 	srli	r9,r5,3
    46ac:	4880022c 	andhi	r2,r9,8
    46b0:	1000051e 	bne	r2,zero,46c8 <__subdf3+0x75c>
    46b4:	300cd0fa 	srli	r6,r6,3
    46b8:	2804977a 	slli	r2,r5,29
    46bc:	4809883a 	mov	r4,r9
    46c0:	3825883a 	mov	r18,r7
    46c4:	11a2b03a 	or	r17,r2,r6
    46c8:	8806d77a 	srli	r3,r17,29
    46cc:	200890fa 	slli	r4,r4,3
    46d0:	882290fa 	slli	r17,r17,3
    46d4:	0401ffc4 	movi	r16,2047
    46d8:	1906b03a 	or	r3,r3,r4
    46dc:	003e4406 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    46e0:	2984b03a 	or	r2,r5,r6
    46e4:	103e4226 	beq	r2,zero,3ff0 <__alt_data_end+0xfffe3ff0>
    46e8:	8989c83a 	sub	r4,r17,r6
    46ec:	8911803a 	cmpltu	r8,r17,r4
    46f0:	1945c83a 	sub	r2,r3,r5
    46f4:	1205c83a 	sub	r2,r2,r8
    46f8:	1200202c 	andhi	r8,r2,128
    46fc:	403e9a26 	beq	r8,zero,4168 <__alt_data_end+0xfffe4168>
    4700:	3463c83a 	sub	r17,r6,r17
    4704:	28c5c83a 	sub	r2,r5,r3
    4708:	344d803a 	cmpltu	r6,r6,r17
    470c:	1187c83a 	sub	r3,r2,r6
    4710:	3825883a 	mov	r18,r7
    4714:	003e3606 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    4718:	0101ffc4 	movi	r4,2047
    471c:	493fc71e 	bne	r9,r4,463c <__alt_data_end+0xfffe463c>
    4720:	2807883a 	mov	r3,r5
    4724:	3023883a 	mov	r17,r6
    4728:	4821883a 	mov	r16,r9
    472c:	003e3006 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    4730:	10003626 	beq	r2,zero,480c <__subdf3+0x8a0>
    4734:	2984b03a 	or	r2,r5,r6
    4738:	10001726 	beq	r2,zero,4798 <__subdf3+0x82c>
    473c:	1808d0fa 	srli	r4,r3,3
    4740:	8822d0fa 	srli	r17,r17,3
    4744:	1806977a 	slli	r3,r3,29
    4748:	2080022c 	andhi	r2,r4,8
    474c:	1c62b03a 	or	r17,r3,r17
    4750:	10000726 	beq	r2,zero,4770 <__subdf3+0x804>
    4754:	2812d0fa 	srli	r9,r5,3
    4758:	4880022c 	andhi	r2,r9,8
    475c:	1000041e 	bne	r2,zero,4770 <__subdf3+0x804>
    4760:	300cd0fa 	srli	r6,r6,3
    4764:	2804977a 	slli	r2,r5,29
    4768:	4809883a 	mov	r4,r9
    476c:	11a2b03a 	or	r17,r2,r6
    4770:	8806d77a 	srli	r3,r17,29
    4774:	200890fa 	slli	r4,r4,3
    4778:	882290fa 	slli	r17,r17,3
    477c:	3825883a 	mov	r18,r7
    4780:	1906b03a 	or	r3,r3,r4
    4784:	0401ffc4 	movi	r16,2047
    4788:	003e1906 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    478c:	000b883a 	mov	r5,zero
    4790:	0005883a 	mov	r2,zero
    4794:	003e2e06 	br	4050 <__alt_data_end+0xfffe4050>
    4798:	0401ffc4 	movi	r16,2047
    479c:	003e1406 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    47a0:	0005883a 	mov	r2,zero
    47a4:	003f7506 	br	457c <__alt_data_end+0xfffe457c>
    47a8:	0005883a 	mov	r2,zero
    47ac:	0009883a 	mov	r4,zero
    47b0:	003e7806 	br	4194 <__alt_data_end+0xfffe4194>
    47b4:	123ff804 	addi	r8,r2,-32
    47b8:	01000804 	movi	r4,32
    47bc:	1a10d83a 	srl	r8,r3,r8
    47c0:	11002526 	beq	r2,r4,4858 <__subdf3+0x8ec>
    47c4:	01001004 	movi	r4,64
    47c8:	2085c83a 	sub	r2,r4,r2
    47cc:	1884983a 	sll	r2,r3,r2
    47d0:	1444b03a 	or	r2,r2,r17
    47d4:	1004c03a 	cmpne	r2,r2,zero
    47d8:	40a2b03a 	or	r17,r8,r2
    47dc:	0005883a 	mov	r2,zero
    47e0:	003f1606 	br	443c <__alt_data_end+0xfffe443c>
    47e4:	02000434 	movhi	r8,16
    47e8:	0009883a 	mov	r4,zero
    47ec:	423fffc4 	addi	r8,r8,-1
    47f0:	00bfffc4 	movi	r2,-1
    47f4:	0401ffc4 	movi	r16,2047
    47f8:	003e6606 	br	4194 <__alt_data_end+0xfffe4194>
    47fc:	1c62b03a 	or	r17,r3,r17
    4800:	8822c03a 	cmpne	r17,r17,zero
    4804:	0005883a 	mov	r2,zero
    4808:	003f9906 	br	4670 <__alt_data_end+0xfffe4670>
    480c:	2807883a 	mov	r3,r5
    4810:	3023883a 	mov	r17,r6
    4814:	0401ffc4 	movi	r16,2047
    4818:	003df506 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    481c:	2807883a 	mov	r3,r5
    4820:	3023883a 	mov	r17,r6
    4824:	003df206 	br	3ff0 <__alt_data_end+0xfffe3ff0>
    4828:	123ff804 	addi	r8,r2,-32
    482c:	01000804 	movi	r4,32
    4830:	1a10d83a 	srl	r8,r3,r8
    4834:	11000a26 	beq	r2,r4,4860 <__subdf3+0x8f4>
    4838:	01001004 	movi	r4,64
    483c:	2085c83a 	sub	r2,r4,r2
    4840:	1884983a 	sll	r2,r3,r2
    4844:	1444b03a 	or	r2,r2,r17
    4848:	1004c03a 	cmpne	r2,r2,zero
    484c:	40a2b03a 	or	r17,r8,r2
    4850:	0005883a 	mov	r2,zero
    4854:	003f8606 	br	4670 <__alt_data_end+0xfffe4670>
    4858:	0005883a 	mov	r2,zero
    485c:	003fdc06 	br	47d0 <__alt_data_end+0xfffe47d0>
    4860:	0005883a 	mov	r2,zero
    4864:	003ff706 	br	4844 <__alt_data_end+0xfffe4844>

00004868 <__floatsidf>:
    4868:	defffd04 	addi	sp,sp,-12
    486c:	dfc00215 	stw	ra,8(sp)
    4870:	dc400115 	stw	r17,4(sp)
    4874:	dc000015 	stw	r16,0(sp)
    4878:	20002b26 	beq	r4,zero,4928 <__floatsidf+0xc0>
    487c:	2023883a 	mov	r17,r4
    4880:	2020d7fa 	srli	r16,r4,31
    4884:	20002d16 	blt	r4,zero,493c <__floatsidf+0xd4>
    4888:	8809883a 	mov	r4,r17
    488c:	00049440 	call	4944 <__clzsi2>
    4890:	01410784 	movi	r5,1054
    4894:	288bc83a 	sub	r5,r5,r2
    4898:	01010cc4 	movi	r4,1075
    489c:	2149c83a 	sub	r4,r4,r5
    48a0:	00c007c4 	movi	r3,31
    48a4:	1900160e 	bge	r3,r4,4900 <__floatsidf+0x98>
    48a8:	00c104c4 	movi	r3,1043
    48ac:	1947c83a 	sub	r3,r3,r5
    48b0:	88c6983a 	sll	r3,r17,r3
    48b4:	00800434 	movhi	r2,16
    48b8:	10bfffc4 	addi	r2,r2,-1
    48bc:	1886703a 	and	r3,r3,r2
    48c0:	2941ffcc 	andi	r5,r5,2047
    48c4:	800d883a 	mov	r6,r16
    48c8:	0005883a 	mov	r2,zero
    48cc:	280a953a 	slli	r5,r5,20
    48d0:	31803fcc 	andi	r6,r6,255
    48d4:	01000434 	movhi	r4,16
    48d8:	300c97fa 	slli	r6,r6,31
    48dc:	213fffc4 	addi	r4,r4,-1
    48e0:	1906703a 	and	r3,r3,r4
    48e4:	1946b03a 	or	r3,r3,r5
    48e8:	1986b03a 	or	r3,r3,r6
    48ec:	dfc00217 	ldw	ra,8(sp)
    48f0:	dc400117 	ldw	r17,4(sp)
    48f4:	dc000017 	ldw	r16,0(sp)
    48f8:	dec00304 	addi	sp,sp,12
    48fc:	f800283a 	ret
    4900:	00c002c4 	movi	r3,11
    4904:	1887c83a 	sub	r3,r3,r2
    4908:	88c6d83a 	srl	r3,r17,r3
    490c:	8904983a 	sll	r2,r17,r4
    4910:	01000434 	movhi	r4,16
    4914:	213fffc4 	addi	r4,r4,-1
    4918:	2941ffcc 	andi	r5,r5,2047
    491c:	1906703a 	and	r3,r3,r4
    4920:	800d883a 	mov	r6,r16
    4924:	003fe906 	br	48cc <__alt_data_end+0xfffe48cc>
    4928:	000d883a 	mov	r6,zero
    492c:	000b883a 	mov	r5,zero
    4930:	0007883a 	mov	r3,zero
    4934:	0005883a 	mov	r2,zero
    4938:	003fe406 	br	48cc <__alt_data_end+0xfffe48cc>
    493c:	0123c83a 	sub	r17,zero,r4
    4940:	003fd106 	br	4888 <__alt_data_end+0xfffe4888>

00004944 <__clzsi2>:
    4944:	00bfffd4 	movui	r2,65535
    4948:	11000536 	bltu	r2,r4,4960 <__clzsi2+0x1c>
    494c:	00803fc4 	movi	r2,255
    4950:	11000f36 	bltu	r2,r4,4990 <__clzsi2+0x4c>
    4954:	00800804 	movi	r2,32
    4958:	0007883a 	mov	r3,zero
    495c:	00000506 	br	4974 <__clzsi2+0x30>
    4960:	00804034 	movhi	r2,256
    4964:	10bfffc4 	addi	r2,r2,-1
    4968:	11000c2e 	bgeu	r2,r4,499c <__clzsi2+0x58>
    496c:	00800204 	movi	r2,8
    4970:	00c00604 	movi	r3,24
    4974:	20c8d83a 	srl	r4,r4,r3
    4978:	00c00074 	movhi	r3,1
    497c:	18caad84 	addi	r3,r3,10934
    4980:	1909883a 	add	r4,r3,r4
    4984:	20c00003 	ldbu	r3,0(r4)
    4988:	10c5c83a 	sub	r2,r2,r3
    498c:	f800283a 	ret
    4990:	00800604 	movi	r2,24
    4994:	00c00204 	movi	r3,8
    4998:	003ff606 	br	4974 <__alt_data_end+0xfffe4974>
    499c:	00800404 	movi	r2,16
    49a0:	1007883a 	mov	r3,r2
    49a4:	003ff306 	br	4974 <__alt_data_end+0xfffe4974>

000049a8 <__divsi3>:
    49a8:	20001b16 	blt	r4,zero,4a18 <__divsi3+0x70>
    49ac:	000f883a 	mov	r7,zero
    49b0:	28001616 	blt	r5,zero,4a0c <__divsi3+0x64>
    49b4:	200d883a 	mov	r6,r4
    49b8:	29001a2e 	bgeu	r5,r4,4a24 <__divsi3+0x7c>
    49bc:	00800804 	movi	r2,32
    49c0:	00c00044 	movi	r3,1
    49c4:	00000106 	br	49cc <__divsi3+0x24>
    49c8:	10000d26 	beq	r2,zero,4a00 <__divsi3+0x58>
    49cc:	294b883a 	add	r5,r5,r5
    49d0:	10bfffc4 	addi	r2,r2,-1
    49d4:	18c7883a 	add	r3,r3,r3
    49d8:	293ffb36 	bltu	r5,r4,49c8 <__alt_data_end+0xfffe49c8>
    49dc:	0005883a 	mov	r2,zero
    49e0:	18000726 	beq	r3,zero,4a00 <__divsi3+0x58>
    49e4:	0005883a 	mov	r2,zero
    49e8:	31400236 	bltu	r6,r5,49f4 <__divsi3+0x4c>
    49ec:	314dc83a 	sub	r6,r6,r5
    49f0:	10c4b03a 	or	r2,r2,r3
    49f4:	1806d07a 	srli	r3,r3,1
    49f8:	280ad07a 	srli	r5,r5,1
    49fc:	183ffa1e 	bne	r3,zero,49e8 <__alt_data_end+0xfffe49e8>
    4a00:	38000126 	beq	r7,zero,4a08 <__divsi3+0x60>
    4a04:	0085c83a 	sub	r2,zero,r2
    4a08:	f800283a 	ret
    4a0c:	014bc83a 	sub	r5,zero,r5
    4a10:	39c0005c 	xori	r7,r7,1
    4a14:	003fe706 	br	49b4 <__alt_data_end+0xfffe49b4>
    4a18:	0109c83a 	sub	r4,zero,r4
    4a1c:	01c00044 	movi	r7,1
    4a20:	003fe306 	br	49b0 <__alt_data_end+0xfffe49b0>
    4a24:	00c00044 	movi	r3,1
    4a28:	003fee06 	br	49e4 <__alt_data_end+0xfffe49e4>

00004a2c <__modsi3>:
    4a2c:	20001716 	blt	r4,zero,4a8c <__modsi3+0x60>
    4a30:	000f883a 	mov	r7,zero
    4a34:	2005883a 	mov	r2,r4
    4a38:	28001216 	blt	r5,zero,4a84 <__modsi3+0x58>
    4a3c:	2900162e 	bgeu	r5,r4,4a98 <__modsi3+0x6c>
    4a40:	01800804 	movi	r6,32
    4a44:	00c00044 	movi	r3,1
    4a48:	00000106 	br	4a50 <__modsi3+0x24>
    4a4c:	30000a26 	beq	r6,zero,4a78 <__modsi3+0x4c>
    4a50:	294b883a 	add	r5,r5,r5
    4a54:	31bfffc4 	addi	r6,r6,-1
    4a58:	18c7883a 	add	r3,r3,r3
    4a5c:	293ffb36 	bltu	r5,r4,4a4c <__alt_data_end+0xfffe4a4c>
    4a60:	18000526 	beq	r3,zero,4a78 <__modsi3+0x4c>
    4a64:	1806d07a 	srli	r3,r3,1
    4a68:	11400136 	bltu	r2,r5,4a70 <__modsi3+0x44>
    4a6c:	1145c83a 	sub	r2,r2,r5
    4a70:	280ad07a 	srli	r5,r5,1
    4a74:	183ffb1e 	bne	r3,zero,4a64 <__alt_data_end+0xfffe4a64>
    4a78:	38000126 	beq	r7,zero,4a80 <__modsi3+0x54>
    4a7c:	0085c83a 	sub	r2,zero,r2
    4a80:	f800283a 	ret
    4a84:	014bc83a 	sub	r5,zero,r5
    4a88:	003fec06 	br	4a3c <__alt_data_end+0xfffe4a3c>
    4a8c:	0109c83a 	sub	r4,zero,r4
    4a90:	01c00044 	movi	r7,1
    4a94:	003fe706 	br	4a34 <__alt_data_end+0xfffe4a34>
    4a98:	00c00044 	movi	r3,1
    4a9c:	003ff106 	br	4a64 <__alt_data_end+0xfffe4a64>

00004aa0 <__udivsi3>:
    4aa0:	200d883a 	mov	r6,r4
    4aa4:	2900152e 	bgeu	r5,r4,4afc <__udivsi3+0x5c>
    4aa8:	28001416 	blt	r5,zero,4afc <__udivsi3+0x5c>
    4aac:	00800804 	movi	r2,32
    4ab0:	00c00044 	movi	r3,1
    4ab4:	00000206 	br	4ac0 <__udivsi3+0x20>
    4ab8:	10000e26 	beq	r2,zero,4af4 <__udivsi3+0x54>
    4abc:	28000516 	blt	r5,zero,4ad4 <__udivsi3+0x34>
    4ac0:	294b883a 	add	r5,r5,r5
    4ac4:	10bfffc4 	addi	r2,r2,-1
    4ac8:	18c7883a 	add	r3,r3,r3
    4acc:	293ffa36 	bltu	r5,r4,4ab8 <__alt_data_end+0xfffe4ab8>
    4ad0:	18000826 	beq	r3,zero,4af4 <__udivsi3+0x54>
    4ad4:	0005883a 	mov	r2,zero
    4ad8:	31400236 	bltu	r6,r5,4ae4 <__udivsi3+0x44>
    4adc:	314dc83a 	sub	r6,r6,r5
    4ae0:	10c4b03a 	or	r2,r2,r3
    4ae4:	1806d07a 	srli	r3,r3,1
    4ae8:	280ad07a 	srli	r5,r5,1
    4aec:	183ffa1e 	bne	r3,zero,4ad8 <__alt_data_end+0xfffe4ad8>
    4af0:	f800283a 	ret
    4af4:	0005883a 	mov	r2,zero
    4af8:	f800283a 	ret
    4afc:	00c00044 	movi	r3,1
    4b00:	003ff406 	br	4ad4 <__alt_data_end+0xfffe4ad4>

00004b04 <__umodsi3>:
    4b04:	2005883a 	mov	r2,r4
    4b08:	2900122e 	bgeu	r5,r4,4b54 <__umodsi3+0x50>
    4b0c:	28001116 	blt	r5,zero,4b54 <__umodsi3+0x50>
    4b10:	01800804 	movi	r6,32
    4b14:	00c00044 	movi	r3,1
    4b18:	00000206 	br	4b24 <__umodsi3+0x20>
    4b1c:	30000c26 	beq	r6,zero,4b50 <__umodsi3+0x4c>
    4b20:	28000516 	blt	r5,zero,4b38 <__umodsi3+0x34>
    4b24:	294b883a 	add	r5,r5,r5
    4b28:	31bfffc4 	addi	r6,r6,-1
    4b2c:	18c7883a 	add	r3,r3,r3
    4b30:	293ffa36 	bltu	r5,r4,4b1c <__alt_data_end+0xfffe4b1c>
    4b34:	18000626 	beq	r3,zero,4b50 <__umodsi3+0x4c>
    4b38:	1806d07a 	srli	r3,r3,1
    4b3c:	11400136 	bltu	r2,r5,4b44 <__umodsi3+0x40>
    4b40:	1145c83a 	sub	r2,r2,r5
    4b44:	280ad07a 	srli	r5,r5,1
    4b48:	183ffb1e 	bne	r3,zero,4b38 <__alt_data_end+0xfffe4b38>
    4b4c:	f800283a 	ret
    4b50:	f800283a 	ret
    4b54:	00c00044 	movi	r3,1
    4b58:	003ff706 	br	4b38 <__alt_data_end+0xfffe4b38>

00004b5c <exit>:
    4b5c:	defffe04 	addi	sp,sp,-8
    4b60:	000b883a 	mov	r5,zero
    4b64:	dc000015 	stw	r16,0(sp)
    4b68:	dfc00115 	stw	ra,4(sp)
    4b6c:	2021883a 	mov	r16,r4
    4b70:	00099e40 	call	99e4 <__call_exitprocs>
    4b74:	00800074 	movhi	r2,1
    4b78:	10921c04 	addi	r2,r2,18544
    4b7c:	11000017 	ldw	r4,0(r2)
    4b80:	20800f17 	ldw	r2,60(r4)
    4b84:	10000126 	beq	r2,zero,4b8c <exit+0x30>
    4b88:	103ee83a 	callr	r2
    4b8c:	8009883a 	mov	r4,r16
    4b90:	001034c0 	call	1034c <_exit>

00004b94 <_fclose_r>:
    4b94:	28003926 	beq	r5,zero,4c7c <_fclose_r+0xe8>
    4b98:	defffc04 	addi	sp,sp,-16
    4b9c:	dc400115 	stw	r17,4(sp)
    4ba0:	dc000015 	stw	r16,0(sp)
    4ba4:	dfc00315 	stw	ra,12(sp)
    4ba8:	dc800215 	stw	r18,8(sp)
    4bac:	2023883a 	mov	r17,r4
    4bb0:	2821883a 	mov	r16,r5
    4bb4:	20000226 	beq	r4,zero,4bc0 <_fclose_r+0x2c>
    4bb8:	20800e17 	ldw	r2,56(r4)
    4bbc:	10002726 	beq	r2,zero,4c5c <_fclose_r+0xc8>
    4bc0:	8080030f 	ldh	r2,12(r16)
    4bc4:	1000071e 	bne	r2,zero,4be4 <_fclose_r+0x50>
    4bc8:	0005883a 	mov	r2,zero
    4bcc:	dfc00317 	ldw	ra,12(sp)
    4bd0:	dc800217 	ldw	r18,8(sp)
    4bd4:	dc400117 	ldw	r17,4(sp)
    4bd8:	dc000017 	ldw	r16,0(sp)
    4bdc:	dec00404 	addi	sp,sp,16
    4be0:	f800283a 	ret
    4be4:	800b883a 	mov	r5,r16
    4be8:	8809883a 	mov	r4,r17
    4bec:	0004c980 	call	4c98 <__sflush_r>
    4bf0:	1025883a 	mov	r18,r2
    4bf4:	80800b17 	ldw	r2,44(r16)
    4bf8:	10000426 	beq	r2,zero,4c0c <_fclose_r+0x78>
    4bfc:	81400717 	ldw	r5,28(r16)
    4c00:	8809883a 	mov	r4,r17
    4c04:	103ee83a 	callr	r2
    4c08:	10001616 	blt	r2,zero,4c64 <_fclose_r+0xd0>
    4c0c:	8080030b 	ldhu	r2,12(r16)
    4c10:	1080200c 	andi	r2,r2,128
    4c14:	1000151e 	bne	r2,zero,4c6c <_fclose_r+0xd8>
    4c18:	81400c17 	ldw	r5,48(r16)
    4c1c:	28000526 	beq	r5,zero,4c34 <_fclose_r+0xa0>
    4c20:	80801004 	addi	r2,r16,64
    4c24:	28800226 	beq	r5,r2,4c30 <_fclose_r+0x9c>
    4c28:	8809883a 	mov	r4,r17
    4c2c:	00057900 	call	5790 <_free_r>
    4c30:	80000c15 	stw	zero,48(r16)
    4c34:	81401117 	ldw	r5,68(r16)
    4c38:	28000326 	beq	r5,zero,4c48 <_fclose_r+0xb4>
    4c3c:	8809883a 	mov	r4,r17
    4c40:	00057900 	call	5790 <_free_r>
    4c44:	80001115 	stw	zero,68(r16)
    4c48:	00052b00 	call	52b0 <__sfp_lock_acquire>
    4c4c:	8000030d 	sth	zero,12(r16)
    4c50:	00052b40 	call	52b4 <__sfp_lock_release>
    4c54:	9005883a 	mov	r2,r18
    4c58:	003fdc06 	br	4bcc <__alt_data_end+0xfffe4bcc>
    4c5c:	00052a00 	call	52a0 <__sinit>
    4c60:	003fd706 	br	4bc0 <__alt_data_end+0xfffe4bc0>
    4c64:	04bfffc4 	movi	r18,-1
    4c68:	003fe806 	br	4c0c <__alt_data_end+0xfffe4c0c>
    4c6c:	81400417 	ldw	r5,16(r16)
    4c70:	8809883a 	mov	r4,r17
    4c74:	00057900 	call	5790 <_free_r>
    4c78:	003fe706 	br	4c18 <__alt_data_end+0xfffe4c18>
    4c7c:	0005883a 	mov	r2,zero
    4c80:	f800283a 	ret

00004c84 <fclose>:
    4c84:	00800074 	movhi	r2,1
    4c88:	10921d04 	addi	r2,r2,18548
    4c8c:	200b883a 	mov	r5,r4
    4c90:	11000017 	ldw	r4,0(r2)
    4c94:	0004b941 	jmpi	4b94 <_fclose_r>

00004c98 <__sflush_r>:
    4c98:	2880030b 	ldhu	r2,12(r5)
    4c9c:	defffb04 	addi	sp,sp,-20
    4ca0:	dcc00315 	stw	r19,12(sp)
    4ca4:	dc400115 	stw	r17,4(sp)
    4ca8:	dfc00415 	stw	ra,16(sp)
    4cac:	dc800215 	stw	r18,8(sp)
    4cb0:	dc000015 	stw	r16,0(sp)
    4cb4:	10c0020c 	andi	r3,r2,8
    4cb8:	2823883a 	mov	r17,r5
    4cbc:	2027883a 	mov	r19,r4
    4cc0:	1800311e 	bne	r3,zero,4d88 <__sflush_r+0xf0>
    4cc4:	28c00117 	ldw	r3,4(r5)
    4cc8:	10820014 	ori	r2,r2,2048
    4ccc:	2880030d 	sth	r2,12(r5)
    4cd0:	00c04b0e 	bge	zero,r3,4e00 <__sflush_r+0x168>
    4cd4:	8a000a17 	ldw	r8,40(r17)
    4cd8:	40002326 	beq	r8,zero,4d68 <__sflush_r+0xd0>
    4cdc:	9c000017 	ldw	r16,0(r19)
    4ce0:	10c4000c 	andi	r3,r2,4096
    4ce4:	98000015 	stw	zero,0(r19)
    4ce8:	18004826 	beq	r3,zero,4e0c <__sflush_r+0x174>
    4cec:	89801417 	ldw	r6,80(r17)
    4cf0:	10c0010c 	andi	r3,r2,4
    4cf4:	18000626 	beq	r3,zero,4d10 <__sflush_r+0x78>
    4cf8:	88c00117 	ldw	r3,4(r17)
    4cfc:	88800c17 	ldw	r2,48(r17)
    4d00:	30cdc83a 	sub	r6,r6,r3
    4d04:	10000226 	beq	r2,zero,4d10 <__sflush_r+0x78>
    4d08:	88800f17 	ldw	r2,60(r17)
    4d0c:	308dc83a 	sub	r6,r6,r2
    4d10:	89400717 	ldw	r5,28(r17)
    4d14:	000f883a 	mov	r7,zero
    4d18:	9809883a 	mov	r4,r19
    4d1c:	403ee83a 	callr	r8
    4d20:	00ffffc4 	movi	r3,-1
    4d24:	10c04426 	beq	r2,r3,4e38 <__sflush_r+0x1a0>
    4d28:	88c0030b 	ldhu	r3,12(r17)
    4d2c:	89000417 	ldw	r4,16(r17)
    4d30:	88000115 	stw	zero,4(r17)
    4d34:	197dffcc 	andi	r5,r3,63487
    4d38:	8940030d 	sth	r5,12(r17)
    4d3c:	89000015 	stw	r4,0(r17)
    4d40:	18c4000c 	andi	r3,r3,4096
    4d44:	18002c1e 	bne	r3,zero,4df8 <__sflush_r+0x160>
    4d48:	89400c17 	ldw	r5,48(r17)
    4d4c:	9c000015 	stw	r16,0(r19)
    4d50:	28000526 	beq	r5,zero,4d68 <__sflush_r+0xd0>
    4d54:	88801004 	addi	r2,r17,64
    4d58:	28800226 	beq	r5,r2,4d64 <__sflush_r+0xcc>
    4d5c:	9809883a 	mov	r4,r19
    4d60:	00057900 	call	5790 <_free_r>
    4d64:	88000c15 	stw	zero,48(r17)
    4d68:	0005883a 	mov	r2,zero
    4d6c:	dfc00417 	ldw	ra,16(sp)
    4d70:	dcc00317 	ldw	r19,12(sp)
    4d74:	dc800217 	ldw	r18,8(sp)
    4d78:	dc400117 	ldw	r17,4(sp)
    4d7c:	dc000017 	ldw	r16,0(sp)
    4d80:	dec00504 	addi	sp,sp,20
    4d84:	f800283a 	ret
    4d88:	2c800417 	ldw	r18,16(r5)
    4d8c:	903ff626 	beq	r18,zero,4d68 <__alt_data_end+0xfffe4d68>
    4d90:	2c000017 	ldw	r16,0(r5)
    4d94:	108000cc 	andi	r2,r2,3
    4d98:	2c800015 	stw	r18,0(r5)
    4d9c:	84a1c83a 	sub	r16,r16,r18
    4da0:	1000131e 	bne	r2,zero,4df0 <__sflush_r+0x158>
    4da4:	28800517 	ldw	r2,20(r5)
    4da8:	88800215 	stw	r2,8(r17)
    4dac:	04000316 	blt	zero,r16,4dbc <__sflush_r+0x124>
    4db0:	003fed06 	br	4d68 <__alt_data_end+0xfffe4d68>
    4db4:	90a5883a 	add	r18,r18,r2
    4db8:	043feb0e 	bge	zero,r16,4d68 <__alt_data_end+0xfffe4d68>
    4dbc:	88800917 	ldw	r2,36(r17)
    4dc0:	89400717 	ldw	r5,28(r17)
    4dc4:	800f883a 	mov	r7,r16
    4dc8:	900d883a 	mov	r6,r18
    4dcc:	9809883a 	mov	r4,r19
    4dd0:	103ee83a 	callr	r2
    4dd4:	80a1c83a 	sub	r16,r16,r2
    4dd8:	00bff616 	blt	zero,r2,4db4 <__alt_data_end+0xfffe4db4>
    4ddc:	88c0030b 	ldhu	r3,12(r17)
    4de0:	00bfffc4 	movi	r2,-1
    4de4:	18c01014 	ori	r3,r3,64
    4de8:	88c0030d 	sth	r3,12(r17)
    4dec:	003fdf06 	br	4d6c <__alt_data_end+0xfffe4d6c>
    4df0:	0005883a 	mov	r2,zero
    4df4:	003fec06 	br	4da8 <__alt_data_end+0xfffe4da8>
    4df8:	88801415 	stw	r2,80(r17)
    4dfc:	003fd206 	br	4d48 <__alt_data_end+0xfffe4d48>
    4e00:	28c00f17 	ldw	r3,60(r5)
    4e04:	00ffb316 	blt	zero,r3,4cd4 <__alt_data_end+0xfffe4cd4>
    4e08:	003fd706 	br	4d68 <__alt_data_end+0xfffe4d68>
    4e0c:	89400717 	ldw	r5,28(r17)
    4e10:	000d883a 	mov	r6,zero
    4e14:	01c00044 	movi	r7,1
    4e18:	9809883a 	mov	r4,r19
    4e1c:	403ee83a 	callr	r8
    4e20:	100d883a 	mov	r6,r2
    4e24:	00bfffc4 	movi	r2,-1
    4e28:	30801426 	beq	r6,r2,4e7c <__sflush_r+0x1e4>
    4e2c:	8880030b 	ldhu	r2,12(r17)
    4e30:	8a000a17 	ldw	r8,40(r17)
    4e34:	003fae06 	br	4cf0 <__alt_data_end+0xfffe4cf0>
    4e38:	98c00017 	ldw	r3,0(r19)
    4e3c:	183fba26 	beq	r3,zero,4d28 <__alt_data_end+0xfffe4d28>
    4e40:	01000744 	movi	r4,29
    4e44:	19000626 	beq	r3,r4,4e60 <__sflush_r+0x1c8>
    4e48:	01000584 	movi	r4,22
    4e4c:	19000426 	beq	r3,r4,4e60 <__sflush_r+0x1c8>
    4e50:	88c0030b 	ldhu	r3,12(r17)
    4e54:	18c01014 	ori	r3,r3,64
    4e58:	88c0030d 	sth	r3,12(r17)
    4e5c:	003fc306 	br	4d6c <__alt_data_end+0xfffe4d6c>
    4e60:	8880030b 	ldhu	r2,12(r17)
    4e64:	88c00417 	ldw	r3,16(r17)
    4e68:	88000115 	stw	zero,4(r17)
    4e6c:	10bdffcc 	andi	r2,r2,63487
    4e70:	8880030d 	sth	r2,12(r17)
    4e74:	88c00015 	stw	r3,0(r17)
    4e78:	003fb306 	br	4d48 <__alt_data_end+0xfffe4d48>
    4e7c:	98800017 	ldw	r2,0(r19)
    4e80:	103fea26 	beq	r2,zero,4e2c <__alt_data_end+0xfffe4e2c>
    4e84:	00c00744 	movi	r3,29
    4e88:	10c00226 	beq	r2,r3,4e94 <__sflush_r+0x1fc>
    4e8c:	00c00584 	movi	r3,22
    4e90:	10c0031e 	bne	r2,r3,4ea0 <__sflush_r+0x208>
    4e94:	9c000015 	stw	r16,0(r19)
    4e98:	0005883a 	mov	r2,zero
    4e9c:	003fb306 	br	4d6c <__alt_data_end+0xfffe4d6c>
    4ea0:	88c0030b 	ldhu	r3,12(r17)
    4ea4:	3005883a 	mov	r2,r6
    4ea8:	18c01014 	ori	r3,r3,64
    4eac:	88c0030d 	sth	r3,12(r17)
    4eb0:	003fae06 	br	4d6c <__alt_data_end+0xfffe4d6c>

00004eb4 <_fflush_r>:
    4eb4:	defffd04 	addi	sp,sp,-12
    4eb8:	dc000115 	stw	r16,4(sp)
    4ebc:	dfc00215 	stw	ra,8(sp)
    4ec0:	2021883a 	mov	r16,r4
    4ec4:	20000226 	beq	r4,zero,4ed0 <_fflush_r+0x1c>
    4ec8:	20800e17 	ldw	r2,56(r4)
    4ecc:	10000c26 	beq	r2,zero,4f00 <_fflush_r+0x4c>
    4ed0:	2880030f 	ldh	r2,12(r5)
    4ed4:	1000051e 	bne	r2,zero,4eec <_fflush_r+0x38>
    4ed8:	0005883a 	mov	r2,zero
    4edc:	dfc00217 	ldw	ra,8(sp)
    4ee0:	dc000117 	ldw	r16,4(sp)
    4ee4:	dec00304 	addi	sp,sp,12
    4ee8:	f800283a 	ret
    4eec:	8009883a 	mov	r4,r16
    4ef0:	dfc00217 	ldw	ra,8(sp)
    4ef4:	dc000117 	ldw	r16,4(sp)
    4ef8:	dec00304 	addi	sp,sp,12
    4efc:	0004c981 	jmpi	4c98 <__sflush_r>
    4f00:	d9400015 	stw	r5,0(sp)
    4f04:	00052a00 	call	52a0 <__sinit>
    4f08:	d9400017 	ldw	r5,0(sp)
    4f0c:	003ff006 	br	4ed0 <__alt_data_end+0xfffe4ed0>

00004f10 <fflush>:
    4f10:	20000526 	beq	r4,zero,4f28 <fflush+0x18>
    4f14:	00800074 	movhi	r2,1
    4f18:	10921d04 	addi	r2,r2,18548
    4f1c:	200b883a 	mov	r5,r4
    4f20:	11000017 	ldw	r4,0(r2)
    4f24:	0004eb41 	jmpi	4eb4 <_fflush_r>
    4f28:	00800074 	movhi	r2,1
    4f2c:	10921c04 	addi	r2,r2,18544
    4f30:	11000017 	ldw	r4,0(r2)
    4f34:	01400034 	movhi	r5,0
    4f38:	2953ad04 	addi	r5,r5,20148
    4f3c:	00060401 	jmpi	6040 <_fwalk_reent>

00004f40 <__fp_unlock>:
    4f40:	0005883a 	mov	r2,zero
    4f44:	f800283a 	ret

00004f48 <_cleanup_r>:
    4f48:	01400034 	movhi	r5,0
    4f4c:	2952e504 	addi	r5,r5,19348
    4f50:	00060401 	jmpi	6040 <_fwalk_reent>

00004f54 <__sinit.part.1>:
    4f54:	defff704 	addi	sp,sp,-36
    4f58:	00c00034 	movhi	r3,0
    4f5c:	dfc00815 	stw	ra,32(sp)
    4f60:	ddc00715 	stw	r23,28(sp)
    4f64:	dd800615 	stw	r22,24(sp)
    4f68:	dd400515 	stw	r21,20(sp)
    4f6c:	dd000415 	stw	r20,16(sp)
    4f70:	dcc00315 	stw	r19,12(sp)
    4f74:	dc800215 	stw	r18,8(sp)
    4f78:	dc400115 	stw	r17,4(sp)
    4f7c:	dc000015 	stw	r16,0(sp)
    4f80:	18d3d204 	addi	r3,r3,20296
    4f84:	24000117 	ldw	r16,4(r4)
    4f88:	20c00f15 	stw	r3,60(r4)
    4f8c:	2080bb04 	addi	r2,r4,748
    4f90:	00c000c4 	movi	r3,3
    4f94:	20c0b915 	stw	r3,740(r4)
    4f98:	2080ba15 	stw	r2,744(r4)
    4f9c:	2000b815 	stw	zero,736(r4)
    4fa0:	05c00204 	movi	r23,8
    4fa4:	00800104 	movi	r2,4
    4fa8:	2025883a 	mov	r18,r4
    4fac:	b80d883a 	mov	r6,r23
    4fb0:	81001704 	addi	r4,r16,92
    4fb4:	000b883a 	mov	r5,zero
    4fb8:	80000015 	stw	zero,0(r16)
    4fbc:	80000115 	stw	zero,4(r16)
    4fc0:	80000215 	stw	zero,8(r16)
    4fc4:	8080030d 	sth	r2,12(r16)
    4fc8:	80001915 	stw	zero,100(r16)
    4fcc:	8000038d 	sth	zero,14(r16)
    4fd0:	80000415 	stw	zero,16(r16)
    4fd4:	80000515 	stw	zero,20(r16)
    4fd8:	80000615 	stw	zero,24(r16)
    4fdc:	0006c140 	call	6c14 <memset>
    4fe0:	05800034 	movhi	r22,0
    4fe4:	94400217 	ldw	r17,8(r18)
    4fe8:	05400034 	movhi	r21,0
    4fec:	05000034 	movhi	r20,0
    4ff0:	04c00034 	movhi	r19,0
    4ff4:	b59c5004 	addi	r22,r22,28992
    4ff8:	ad5c6704 	addi	r21,r21,29084
    4ffc:	a51c8604 	addi	r20,r20,29208
    5000:	9cdc9d04 	addi	r19,r19,29300
    5004:	85800815 	stw	r22,32(r16)
    5008:	85400915 	stw	r21,36(r16)
    500c:	85000a15 	stw	r20,40(r16)
    5010:	84c00b15 	stw	r19,44(r16)
    5014:	84000715 	stw	r16,28(r16)
    5018:	00800284 	movi	r2,10
    501c:	8880030d 	sth	r2,12(r17)
    5020:	00800044 	movi	r2,1
    5024:	b80d883a 	mov	r6,r23
    5028:	89001704 	addi	r4,r17,92
    502c:	000b883a 	mov	r5,zero
    5030:	88000015 	stw	zero,0(r17)
    5034:	88000115 	stw	zero,4(r17)
    5038:	88000215 	stw	zero,8(r17)
    503c:	88001915 	stw	zero,100(r17)
    5040:	8880038d 	sth	r2,14(r17)
    5044:	88000415 	stw	zero,16(r17)
    5048:	88000515 	stw	zero,20(r17)
    504c:	88000615 	stw	zero,24(r17)
    5050:	0006c140 	call	6c14 <memset>
    5054:	94000317 	ldw	r16,12(r18)
    5058:	00800484 	movi	r2,18
    505c:	8c400715 	stw	r17,28(r17)
    5060:	8d800815 	stw	r22,32(r17)
    5064:	8d400915 	stw	r21,36(r17)
    5068:	8d000a15 	stw	r20,40(r17)
    506c:	8cc00b15 	stw	r19,44(r17)
    5070:	8080030d 	sth	r2,12(r16)
    5074:	00800084 	movi	r2,2
    5078:	80000015 	stw	zero,0(r16)
    507c:	80000115 	stw	zero,4(r16)
    5080:	80000215 	stw	zero,8(r16)
    5084:	80001915 	stw	zero,100(r16)
    5088:	8080038d 	sth	r2,14(r16)
    508c:	80000415 	stw	zero,16(r16)
    5090:	80000515 	stw	zero,20(r16)
    5094:	80000615 	stw	zero,24(r16)
    5098:	b80d883a 	mov	r6,r23
    509c:	000b883a 	mov	r5,zero
    50a0:	81001704 	addi	r4,r16,92
    50a4:	0006c140 	call	6c14 <memset>
    50a8:	00800044 	movi	r2,1
    50ac:	84000715 	stw	r16,28(r16)
    50b0:	85800815 	stw	r22,32(r16)
    50b4:	85400915 	stw	r21,36(r16)
    50b8:	85000a15 	stw	r20,40(r16)
    50bc:	84c00b15 	stw	r19,44(r16)
    50c0:	90800e15 	stw	r2,56(r18)
    50c4:	dfc00817 	ldw	ra,32(sp)
    50c8:	ddc00717 	ldw	r23,28(sp)
    50cc:	dd800617 	ldw	r22,24(sp)
    50d0:	dd400517 	ldw	r21,20(sp)
    50d4:	dd000417 	ldw	r20,16(sp)
    50d8:	dcc00317 	ldw	r19,12(sp)
    50dc:	dc800217 	ldw	r18,8(sp)
    50e0:	dc400117 	ldw	r17,4(sp)
    50e4:	dc000017 	ldw	r16,0(sp)
    50e8:	dec00904 	addi	sp,sp,36
    50ec:	f800283a 	ret

000050f0 <__fp_lock>:
    50f0:	0005883a 	mov	r2,zero
    50f4:	f800283a 	ret

000050f8 <__sfmoreglue>:
    50f8:	defffc04 	addi	sp,sp,-16
    50fc:	dc800215 	stw	r18,8(sp)
    5100:	2825883a 	mov	r18,r5
    5104:	dc000015 	stw	r16,0(sp)
    5108:	01401a04 	movi	r5,104
    510c:	2021883a 	mov	r16,r4
    5110:	913fffc4 	addi	r4,r18,-1
    5114:	dfc00315 	stw	ra,12(sp)
    5118:	dc400115 	stw	r17,4(sp)
    511c:	000197c0 	call	197c <__mulsi3>
    5120:	8009883a 	mov	r4,r16
    5124:	11401d04 	addi	r5,r2,116
    5128:	1023883a 	mov	r17,r2
    512c:	00062c00 	call	62c0 <_malloc_r>
    5130:	1021883a 	mov	r16,r2
    5134:	10000726 	beq	r2,zero,5154 <__sfmoreglue+0x5c>
    5138:	11000304 	addi	r4,r2,12
    513c:	10000015 	stw	zero,0(r2)
    5140:	14800115 	stw	r18,4(r2)
    5144:	11000215 	stw	r4,8(r2)
    5148:	89801a04 	addi	r6,r17,104
    514c:	000b883a 	mov	r5,zero
    5150:	0006c140 	call	6c14 <memset>
    5154:	8005883a 	mov	r2,r16
    5158:	dfc00317 	ldw	ra,12(sp)
    515c:	dc800217 	ldw	r18,8(sp)
    5160:	dc400117 	ldw	r17,4(sp)
    5164:	dc000017 	ldw	r16,0(sp)
    5168:	dec00404 	addi	sp,sp,16
    516c:	f800283a 	ret

00005170 <__sfp>:
    5170:	defffb04 	addi	sp,sp,-20
    5174:	dc000015 	stw	r16,0(sp)
    5178:	04000074 	movhi	r16,1
    517c:	84121c04 	addi	r16,r16,18544
    5180:	dcc00315 	stw	r19,12(sp)
    5184:	2027883a 	mov	r19,r4
    5188:	81000017 	ldw	r4,0(r16)
    518c:	dfc00415 	stw	ra,16(sp)
    5190:	dc800215 	stw	r18,8(sp)
    5194:	20800e17 	ldw	r2,56(r4)
    5198:	dc400115 	stw	r17,4(sp)
    519c:	1000021e 	bne	r2,zero,51a8 <__sfp+0x38>
    51a0:	0004f540 	call	4f54 <__sinit.part.1>
    51a4:	81000017 	ldw	r4,0(r16)
    51a8:	2480b804 	addi	r18,r4,736
    51ac:	047fffc4 	movi	r17,-1
    51b0:	91000117 	ldw	r4,4(r18)
    51b4:	94000217 	ldw	r16,8(r18)
    51b8:	213fffc4 	addi	r4,r4,-1
    51bc:	20000a16 	blt	r4,zero,51e8 <__sfp+0x78>
    51c0:	8080030f 	ldh	r2,12(r16)
    51c4:	10000c26 	beq	r2,zero,51f8 <__sfp+0x88>
    51c8:	80c01d04 	addi	r3,r16,116
    51cc:	00000206 	br	51d8 <__sfp+0x68>
    51d0:	18bfe60f 	ldh	r2,-104(r3)
    51d4:	10000826 	beq	r2,zero,51f8 <__sfp+0x88>
    51d8:	213fffc4 	addi	r4,r4,-1
    51dc:	1c3ffd04 	addi	r16,r3,-12
    51e0:	18c01a04 	addi	r3,r3,104
    51e4:	247ffa1e 	bne	r4,r17,51d0 <__alt_data_end+0xfffe51d0>
    51e8:	90800017 	ldw	r2,0(r18)
    51ec:	10001d26 	beq	r2,zero,5264 <__sfp+0xf4>
    51f0:	1025883a 	mov	r18,r2
    51f4:	003fee06 	br	51b0 <__alt_data_end+0xfffe51b0>
    51f8:	00bfffc4 	movi	r2,-1
    51fc:	8080038d 	sth	r2,14(r16)
    5200:	00800044 	movi	r2,1
    5204:	8080030d 	sth	r2,12(r16)
    5208:	80001915 	stw	zero,100(r16)
    520c:	80000015 	stw	zero,0(r16)
    5210:	80000215 	stw	zero,8(r16)
    5214:	80000115 	stw	zero,4(r16)
    5218:	80000415 	stw	zero,16(r16)
    521c:	80000515 	stw	zero,20(r16)
    5220:	80000615 	stw	zero,24(r16)
    5224:	01800204 	movi	r6,8
    5228:	000b883a 	mov	r5,zero
    522c:	81001704 	addi	r4,r16,92
    5230:	0006c140 	call	6c14 <memset>
    5234:	8005883a 	mov	r2,r16
    5238:	80000c15 	stw	zero,48(r16)
    523c:	80000d15 	stw	zero,52(r16)
    5240:	80001115 	stw	zero,68(r16)
    5244:	80001215 	stw	zero,72(r16)
    5248:	dfc00417 	ldw	ra,16(sp)
    524c:	dcc00317 	ldw	r19,12(sp)
    5250:	dc800217 	ldw	r18,8(sp)
    5254:	dc400117 	ldw	r17,4(sp)
    5258:	dc000017 	ldw	r16,0(sp)
    525c:	dec00504 	addi	sp,sp,20
    5260:	f800283a 	ret
    5264:	01400104 	movi	r5,4
    5268:	9809883a 	mov	r4,r19
    526c:	00050f80 	call	50f8 <__sfmoreglue>
    5270:	90800015 	stw	r2,0(r18)
    5274:	103fde1e 	bne	r2,zero,51f0 <__alt_data_end+0xfffe51f0>
    5278:	00800304 	movi	r2,12
    527c:	98800015 	stw	r2,0(r19)
    5280:	0005883a 	mov	r2,zero
    5284:	003ff006 	br	5248 <__alt_data_end+0xfffe5248>

00005288 <_cleanup>:
    5288:	00800074 	movhi	r2,1
    528c:	10921c04 	addi	r2,r2,18544
    5290:	11000017 	ldw	r4,0(r2)
    5294:	01400034 	movhi	r5,0
    5298:	2952e504 	addi	r5,r5,19348
    529c:	00060401 	jmpi	6040 <_fwalk_reent>

000052a0 <__sinit>:
    52a0:	20800e17 	ldw	r2,56(r4)
    52a4:	10000126 	beq	r2,zero,52ac <__sinit+0xc>
    52a8:	f800283a 	ret
    52ac:	0004f541 	jmpi	4f54 <__sinit.part.1>

000052b0 <__sfp_lock_acquire>:
    52b0:	f800283a 	ret

000052b4 <__sfp_lock_release>:
    52b4:	f800283a 	ret

000052b8 <__sinit_lock_acquire>:
    52b8:	f800283a 	ret

000052bc <__sinit_lock_release>:
    52bc:	f800283a 	ret

000052c0 <__fp_lock_all>:
    52c0:	00800074 	movhi	r2,1
    52c4:	10921d04 	addi	r2,r2,18548
    52c8:	11000017 	ldw	r4,0(r2)
    52cc:	01400034 	movhi	r5,0
    52d0:	29543c04 	addi	r5,r5,20720
    52d4:	0005f7c1 	jmpi	5f7c <_fwalk>

000052d8 <__fp_unlock_all>:
    52d8:	00800074 	movhi	r2,1
    52dc:	10921d04 	addi	r2,r2,18548
    52e0:	11000017 	ldw	r4,0(r2)
    52e4:	01400034 	movhi	r5,0
    52e8:	2953d004 	addi	r5,r5,20288
    52ec:	0005f7c1 	jmpi	5f7c <_fwalk>

000052f0 <_fopen_r>:
    52f0:	defffa04 	addi	sp,sp,-24
    52f4:	3005883a 	mov	r2,r6
    52f8:	dcc00415 	stw	r19,16(sp)
    52fc:	d80d883a 	mov	r6,sp
    5300:	2827883a 	mov	r19,r5
    5304:	100b883a 	mov	r5,r2
    5308:	dc800315 	stw	r18,12(sp)
    530c:	dfc00515 	stw	ra,20(sp)
    5310:	dc400215 	stw	r17,8(sp)
    5314:	dc000115 	stw	r16,4(sp)
    5318:	2025883a 	mov	r18,r4
    531c:	000b4140 	call	b414 <__sflags>
    5320:	10002726 	beq	r2,zero,53c0 <_fopen_r+0xd0>
    5324:	9009883a 	mov	r4,r18
    5328:	1023883a 	mov	r17,r2
    532c:	00051700 	call	5170 <__sfp>
    5330:	1021883a 	mov	r16,r2
    5334:	10002226 	beq	r2,zero,53c0 <_fopen_r+0xd0>
    5338:	d9800017 	ldw	r6,0(sp)
    533c:	01c06d84 	movi	r7,438
    5340:	980b883a 	mov	r5,r19
    5344:	9009883a 	mov	r4,r18
    5348:	0006d3c0 	call	6d3c <_open_r>
    534c:	10001916 	blt	r2,zero,53b4 <_fopen_r+0xc4>
    5350:	8080038d 	sth	r2,14(r16)
    5354:	00800034 	movhi	r2,0
    5358:	109c5004 	addi	r2,r2,28992
    535c:	80800815 	stw	r2,32(r16)
    5360:	00800034 	movhi	r2,0
    5364:	109c6704 	addi	r2,r2,29084
    5368:	80800915 	stw	r2,36(r16)
    536c:	00800034 	movhi	r2,0
    5370:	109c8604 	addi	r2,r2,29208
    5374:	80800a15 	stw	r2,40(r16)
    5378:	00800034 	movhi	r2,0
    537c:	109c9d04 	addi	r2,r2,29300
    5380:	8440030d 	sth	r17,12(r16)
    5384:	84000715 	stw	r16,28(r16)
    5388:	80800b15 	stw	r2,44(r16)
    538c:	8c40400c 	andi	r17,r17,256
    5390:	88000d1e 	bne	r17,zero,53c8 <_fopen_r+0xd8>
    5394:	8005883a 	mov	r2,r16
    5398:	dfc00517 	ldw	ra,20(sp)
    539c:	dcc00417 	ldw	r19,16(sp)
    53a0:	dc800317 	ldw	r18,12(sp)
    53a4:	dc400217 	ldw	r17,8(sp)
    53a8:	dc000117 	ldw	r16,4(sp)
    53ac:	dec00604 	addi	sp,sp,24
    53b0:	f800283a 	ret
    53b4:	00052b00 	call	52b0 <__sfp_lock_acquire>
    53b8:	8000030d 	sth	zero,12(r16)
    53bc:	00052b40 	call	52b4 <__sfp_lock_release>
    53c0:	0005883a 	mov	r2,zero
    53c4:	003ff406 	br	5398 <__alt_data_end+0xfffe5398>
    53c8:	01c00084 	movi	r7,2
    53cc:	000d883a 	mov	r6,zero
    53d0:	800b883a 	mov	r5,r16
    53d4:	9009883a 	mov	r4,r18
    53d8:	0005aa00 	call	5aa0 <_fseek_r>
    53dc:	8005883a 	mov	r2,r16
    53e0:	003fed06 	br	5398 <__alt_data_end+0xfffe5398>

000053e4 <fopen>:
    53e4:	00800074 	movhi	r2,1
    53e8:	10921d04 	addi	r2,r2,18548
    53ec:	280d883a 	mov	r6,r5
    53f0:	200b883a 	mov	r5,r4
    53f4:	11000017 	ldw	r4,0(r2)
    53f8:	00052f01 	jmpi	52f0 <_fopen_r>

000053fc <_fread_r>:
    53fc:	defff404 	addi	sp,sp,-48
    5400:	dd000615 	stw	r20,24(sp)
    5404:	dcc00515 	stw	r19,20(sp)
    5408:	2029883a 	mov	r20,r4
    540c:	2827883a 	mov	r19,r5
    5410:	3809883a 	mov	r4,r7
    5414:	300b883a 	mov	r5,r6
    5418:	ddc00915 	stw	r23,36(sp)
    541c:	dd400715 	stw	r21,28(sp)
    5420:	dc000215 	stw	r16,8(sp)
    5424:	dfc00b15 	stw	ra,44(sp)
    5428:	df000a15 	stw	fp,40(sp)
    542c:	dd800815 	stw	r22,32(sp)
    5430:	dc800415 	stw	r18,16(sp)
    5434:	dc400315 	stw	r17,12(sp)
    5438:	302f883a 	mov	r23,r6
    543c:	382b883a 	mov	r21,r7
    5440:	000197c0 	call	197c <__mulsi3>
    5444:	dc000c17 	ldw	r16,48(sp)
    5448:	10003826 	beq	r2,zero,552c <_fread_r+0x130>
    544c:	102d883a 	mov	r22,r2
    5450:	a0000226 	beq	r20,zero,545c <_fread_r+0x60>
    5454:	a0800e17 	ldw	r2,56(r20)
    5458:	10006e26 	beq	r2,zero,5614 <_fread_r+0x218>
    545c:	8080030b 	ldhu	r2,12(r16)
    5460:	10c8000c 	andi	r3,r2,8192
    5464:	1800061e 	bne	r3,zero,5480 <_fread_r+0x84>
    5468:	81001917 	ldw	r4,100(r16)
    546c:	00f7ffc4 	movi	r3,-8193
    5470:	10880014 	ori	r2,r2,8192
    5474:	20c6703a 	and	r3,r4,r3
    5478:	8080030d 	sth	r2,12(r16)
    547c:	80c01915 	stw	r3,100(r16)
    5480:	84400117 	ldw	r17,4(r16)
    5484:	88005f16 	blt	r17,zero,5604 <_fread_r+0x208>
    5488:	8809883a 	mov	r4,r17
    548c:	1080008c 	andi	r2,r2,2
    5490:	1000281e 	bne	r2,zero,5534 <_fread_r+0x138>
    5494:	b025883a 	mov	r18,r22
    5498:	00000b06 	br	54c8 <_fread_r+0xcc>
    549c:	0006acc0 	call	6acc <memcpy>
    54a0:	80800017 	ldw	r2,0(r16)
    54a4:	9c67883a 	add	r19,r19,r17
    54a8:	9465c83a 	sub	r18,r18,r17
    54ac:	1463883a 	add	r17,r2,r17
    54b0:	800b883a 	mov	r5,r16
    54b4:	a009883a 	mov	r4,r20
    54b8:	84400015 	stw	r17,0(r16)
    54bc:	0006f180 	call	6f18 <__srefill_r>
    54c0:	10004c1e 	bne	r2,zero,55f4 <_fread_r+0x1f8>
    54c4:	84400117 	ldw	r17,4(r16)
    54c8:	880d883a 	mov	r6,r17
    54cc:	9809883a 	mov	r4,r19
    54d0:	81400017 	ldw	r5,0(r16)
    54d4:	8cbff136 	bltu	r17,r18,549c <__alt_data_end+0xfffe549c>
    54d8:	900d883a 	mov	r6,r18
    54dc:	0006acc0 	call	6acc <memcpy>
    54e0:	80c00117 	ldw	r3,4(r16)
    54e4:	81000017 	ldw	r4,0(r16)
    54e8:	a805883a 	mov	r2,r21
    54ec:	1c87c83a 	sub	r3,r3,r18
    54f0:	24a5883a 	add	r18,r4,r18
    54f4:	80c00115 	stw	r3,4(r16)
    54f8:	84800015 	stw	r18,0(r16)
    54fc:	dfc00b17 	ldw	ra,44(sp)
    5500:	df000a17 	ldw	fp,40(sp)
    5504:	ddc00917 	ldw	r23,36(sp)
    5508:	dd800817 	ldw	r22,32(sp)
    550c:	dd400717 	ldw	r21,28(sp)
    5510:	dd000617 	ldw	r20,24(sp)
    5514:	dcc00517 	ldw	r19,20(sp)
    5518:	dc800417 	ldw	r18,16(sp)
    551c:	dc400317 	ldw	r17,12(sp)
    5520:	dc000217 	ldw	r16,8(sp)
    5524:	dec00c04 	addi	sp,sp,48
    5528:	f800283a 	ret
    552c:	0005883a 	mov	r2,zero
    5530:	003ff206 	br	54fc <__alt_data_end+0xfffe54fc>
    5534:	b007883a 	mov	r3,r22
    5538:	2580012e 	bgeu	r4,r22,5540 <_fread_r+0x144>
    553c:	2007883a 	mov	r3,r4
    5540:	81400017 	ldw	r5,0(r16)
    5544:	180d883a 	mov	r6,r3
    5548:	9809883a 	mov	r4,r19
    554c:	d8c00115 	stw	r3,4(sp)
    5550:	0006acc0 	call	6acc <memcpy>
    5554:	d8c00117 	ldw	r3,4(sp)
    5558:	84400017 	ldw	r17,0(r16)
    555c:	80800117 	ldw	r2,4(r16)
    5560:	81400c17 	ldw	r5,48(r16)
    5564:	88e3883a 	add	r17,r17,r3
    5568:	10c5c83a 	sub	r2,r2,r3
    556c:	84400015 	stw	r17,0(r16)
    5570:	80800115 	stw	r2,4(r16)
    5574:	b0e5c83a 	sub	r18,r22,r3
    5578:	28002c26 	beq	r5,zero,562c <_fread_r+0x230>
    557c:	90002c26 	beq	r18,zero,5630 <_fread_r+0x234>
    5580:	80801004 	addi	r2,r16,64
    5584:	28800526 	beq	r5,r2,559c <_fread_r+0x1a0>
    5588:	a009883a 	mov	r4,r20
    558c:	d8c00115 	stw	r3,4(sp)
    5590:	00057900 	call	5790 <_free_r>
    5594:	d8c00117 	ldw	r3,4(sp)
    5598:	84400017 	ldw	r17,0(r16)
    559c:	80000c15 	stw	zero,48(r16)
    55a0:	80800517 	ldw	r2,20(r16)
    55a4:	87000417 	ldw	fp,16(r16)
    55a8:	98e7883a 	add	r19,r19,r3
    55ac:	d8800015 	stw	r2,0(sp)
    55b0:	00000106 	br	55b8 <_fread_r+0x1bc>
    55b4:	90001e26 	beq	r18,zero,5630 <_fread_r+0x234>
    55b8:	84c00415 	stw	r19,16(r16)
    55bc:	84800515 	stw	r18,20(r16)
    55c0:	84c00015 	stw	r19,0(r16)
    55c4:	a009883a 	mov	r4,r20
    55c8:	800b883a 	mov	r5,r16
    55cc:	0006f180 	call	6f18 <__srefill_r>
    55d0:	d9000017 	ldw	r4,0(sp)
    55d4:	80c00117 	ldw	r3,4(r16)
    55d8:	87000415 	stw	fp,16(r16)
    55dc:	81000515 	stw	r4,20(r16)
    55e0:	84400015 	stw	r17,0(r16)
    55e4:	80000115 	stw	zero,4(r16)
    55e8:	90e5c83a 	sub	r18,r18,r3
    55ec:	98e7883a 	add	r19,r19,r3
    55f0:	103ff026 	beq	r2,zero,55b4 <__alt_data_end+0xfffe55b4>
    55f4:	b80b883a 	mov	r5,r23
    55f8:	b489c83a 	sub	r4,r22,r18
    55fc:	0004aa00 	call	4aa0 <__udivsi3>
    5600:	003fbe06 	br	54fc <__alt_data_end+0xfffe54fc>
    5604:	80000115 	stw	zero,4(r16)
    5608:	0009883a 	mov	r4,zero
    560c:	0023883a 	mov	r17,zero
    5610:	003f9e06 	br	548c <__alt_data_end+0xfffe548c>
    5614:	a009883a 	mov	r4,r20
    5618:	00052a00 	call	52a0 <__sinit>
    561c:	8080030b 	ldhu	r2,12(r16)
    5620:	10c8000c 	andi	r3,r2,8192
    5624:	183f961e 	bne	r3,zero,5480 <__alt_data_end+0xfffe5480>
    5628:	003f8f06 	br	5468 <__alt_data_end+0xfffe5468>
    562c:	903fdc1e 	bne	r18,zero,55a0 <__alt_data_end+0xfffe55a0>
    5630:	a805883a 	mov	r2,r21
    5634:	003fb106 	br	54fc <__alt_data_end+0xfffe54fc>

00005638 <fread>:
    5638:	defffe04 	addi	sp,sp,-8
    563c:	00800074 	movhi	r2,1
    5640:	d9c00015 	stw	r7,0(sp)
    5644:	10921d04 	addi	r2,r2,18548
    5648:	300f883a 	mov	r7,r6
    564c:	280d883a 	mov	r6,r5
    5650:	200b883a 	mov	r5,r4
    5654:	11000017 	ldw	r4,0(r2)
    5658:	dfc00115 	stw	ra,4(sp)
    565c:	00053fc0 	call	53fc <_fread_r>
    5660:	dfc00117 	ldw	ra,4(sp)
    5664:	dec00204 	addi	sp,sp,8
    5668:	f800283a 	ret

0000566c <_malloc_trim_r>:
    566c:	defffb04 	addi	sp,sp,-20
    5670:	dcc00315 	stw	r19,12(sp)
    5674:	04c00074 	movhi	r19,1
    5678:	dc800215 	stw	r18,8(sp)
    567c:	dc400115 	stw	r17,4(sp)
    5680:	dc000015 	stw	r16,0(sp)
    5684:	dfc00415 	stw	ra,16(sp)
    5688:	2821883a 	mov	r16,r5
    568c:	9ccc7704 	addi	r19,r19,12764
    5690:	2025883a 	mov	r18,r4
    5694:	00107dc0 	call	107dc <__malloc_lock>
    5698:	98800217 	ldw	r2,8(r19)
    569c:	14400117 	ldw	r17,4(r2)
    56a0:	00bfff04 	movi	r2,-4
    56a4:	88a2703a 	and	r17,r17,r2
    56a8:	8c21c83a 	sub	r16,r17,r16
    56ac:	8403fbc4 	addi	r16,r16,4079
    56b0:	8020d33a 	srli	r16,r16,12
    56b4:	0083ffc4 	movi	r2,4095
    56b8:	843fffc4 	addi	r16,r16,-1
    56bc:	8020933a 	slli	r16,r16,12
    56c0:	1400060e 	bge	r2,r16,56dc <_malloc_trim_r+0x70>
    56c4:	000b883a 	mov	r5,zero
    56c8:	9009883a 	mov	r4,r18
    56cc:	00070ec0 	call	70ec <_sbrk_r>
    56d0:	98c00217 	ldw	r3,8(r19)
    56d4:	1c47883a 	add	r3,r3,r17
    56d8:	10c00a26 	beq	r2,r3,5704 <_malloc_trim_r+0x98>
    56dc:	9009883a 	mov	r4,r18
    56e0:	00108000 	call	10800 <__malloc_unlock>
    56e4:	0005883a 	mov	r2,zero
    56e8:	dfc00417 	ldw	ra,16(sp)
    56ec:	dcc00317 	ldw	r19,12(sp)
    56f0:	dc800217 	ldw	r18,8(sp)
    56f4:	dc400117 	ldw	r17,4(sp)
    56f8:	dc000017 	ldw	r16,0(sp)
    56fc:	dec00504 	addi	sp,sp,20
    5700:	f800283a 	ret
    5704:	040bc83a 	sub	r5,zero,r16
    5708:	9009883a 	mov	r4,r18
    570c:	00070ec0 	call	70ec <_sbrk_r>
    5710:	00ffffc4 	movi	r3,-1
    5714:	10c00d26 	beq	r2,r3,574c <_malloc_trim_r+0xe0>
    5718:	00c00074 	movhi	r3,1
    571c:	18d8f804 	addi	r3,r3,25568
    5720:	18800017 	ldw	r2,0(r3)
    5724:	99000217 	ldw	r4,8(r19)
    5728:	8c23c83a 	sub	r17,r17,r16
    572c:	8c400054 	ori	r17,r17,1
    5730:	1421c83a 	sub	r16,r2,r16
    5734:	24400115 	stw	r17,4(r4)
    5738:	9009883a 	mov	r4,r18
    573c:	1c000015 	stw	r16,0(r3)
    5740:	00108000 	call	10800 <__malloc_unlock>
    5744:	00800044 	movi	r2,1
    5748:	003fe706 	br	56e8 <__alt_data_end+0xfffe56e8>
    574c:	000b883a 	mov	r5,zero
    5750:	9009883a 	mov	r4,r18
    5754:	00070ec0 	call	70ec <_sbrk_r>
    5758:	99000217 	ldw	r4,8(r19)
    575c:	014003c4 	movi	r5,15
    5760:	1107c83a 	sub	r3,r2,r4
    5764:	28ffdd0e 	bge	r5,r3,56dc <__alt_data_end+0xfffe56dc>
    5768:	01400074 	movhi	r5,1
    576c:	29521e04 	addi	r5,r5,18552
    5770:	29400017 	ldw	r5,0(r5)
    5774:	18c00054 	ori	r3,r3,1
    5778:	20c00115 	stw	r3,4(r4)
    577c:	00c00074 	movhi	r3,1
    5780:	1145c83a 	sub	r2,r2,r5
    5784:	18d8f804 	addi	r3,r3,25568
    5788:	18800015 	stw	r2,0(r3)
    578c:	003fd306 	br	56dc <__alt_data_end+0xfffe56dc>

00005790 <_free_r>:
    5790:	28004126 	beq	r5,zero,5898 <_free_r+0x108>
    5794:	defffd04 	addi	sp,sp,-12
    5798:	dc400115 	stw	r17,4(sp)
    579c:	dc000015 	stw	r16,0(sp)
    57a0:	2023883a 	mov	r17,r4
    57a4:	2821883a 	mov	r16,r5
    57a8:	dfc00215 	stw	ra,8(sp)
    57ac:	00107dc0 	call	107dc <__malloc_lock>
    57b0:	81ffff17 	ldw	r7,-4(r16)
    57b4:	00bfff84 	movi	r2,-2
    57b8:	01000074 	movhi	r4,1
    57bc:	81bffe04 	addi	r6,r16,-8
    57c0:	3884703a 	and	r2,r7,r2
    57c4:	210c7704 	addi	r4,r4,12764
    57c8:	308b883a 	add	r5,r6,r2
    57cc:	2a400117 	ldw	r9,4(r5)
    57d0:	22000217 	ldw	r8,8(r4)
    57d4:	00ffff04 	movi	r3,-4
    57d8:	48c6703a 	and	r3,r9,r3
    57dc:	2a005726 	beq	r5,r8,593c <_free_r+0x1ac>
    57e0:	28c00115 	stw	r3,4(r5)
    57e4:	39c0004c 	andi	r7,r7,1
    57e8:	3800091e 	bne	r7,zero,5810 <_free_r+0x80>
    57ec:	823ffe17 	ldw	r8,-8(r16)
    57f0:	22400204 	addi	r9,r4,8
    57f4:	320dc83a 	sub	r6,r6,r8
    57f8:	31c00217 	ldw	r7,8(r6)
    57fc:	1205883a 	add	r2,r2,r8
    5800:	3a406526 	beq	r7,r9,5998 <_free_r+0x208>
    5804:	32000317 	ldw	r8,12(r6)
    5808:	3a000315 	stw	r8,12(r7)
    580c:	41c00215 	stw	r7,8(r8)
    5810:	28cf883a 	add	r7,r5,r3
    5814:	39c00117 	ldw	r7,4(r7)
    5818:	39c0004c 	andi	r7,r7,1
    581c:	38003a26 	beq	r7,zero,5908 <_free_r+0x178>
    5820:	10c00054 	ori	r3,r2,1
    5824:	30c00115 	stw	r3,4(r6)
    5828:	3087883a 	add	r3,r6,r2
    582c:	18800015 	stw	r2,0(r3)
    5830:	00c07fc4 	movi	r3,511
    5834:	18801936 	bltu	r3,r2,589c <_free_r+0x10c>
    5838:	1004d0fa 	srli	r2,r2,3
    583c:	01c00044 	movi	r7,1
    5840:	21400117 	ldw	r5,4(r4)
    5844:	10c00044 	addi	r3,r2,1
    5848:	18c7883a 	add	r3,r3,r3
    584c:	1005d0ba 	srai	r2,r2,2
    5850:	18c7883a 	add	r3,r3,r3
    5854:	18c7883a 	add	r3,r3,r3
    5858:	1907883a 	add	r3,r3,r4
    585c:	3884983a 	sll	r2,r7,r2
    5860:	19c00017 	ldw	r7,0(r3)
    5864:	1a3ffe04 	addi	r8,r3,-8
    5868:	1144b03a 	or	r2,r2,r5
    586c:	32000315 	stw	r8,12(r6)
    5870:	31c00215 	stw	r7,8(r6)
    5874:	20800115 	stw	r2,4(r4)
    5878:	19800015 	stw	r6,0(r3)
    587c:	39800315 	stw	r6,12(r7)
    5880:	8809883a 	mov	r4,r17
    5884:	dfc00217 	ldw	ra,8(sp)
    5888:	dc400117 	ldw	r17,4(sp)
    588c:	dc000017 	ldw	r16,0(sp)
    5890:	dec00304 	addi	sp,sp,12
    5894:	00108001 	jmpi	10800 <__malloc_unlock>
    5898:	f800283a 	ret
    589c:	100ad27a 	srli	r5,r2,9
    58a0:	00c00104 	movi	r3,4
    58a4:	19404a36 	bltu	r3,r5,59d0 <_free_r+0x240>
    58a8:	100ad1ba 	srli	r5,r2,6
    58ac:	28c00e44 	addi	r3,r5,57
    58b0:	18c7883a 	add	r3,r3,r3
    58b4:	29400e04 	addi	r5,r5,56
    58b8:	18c7883a 	add	r3,r3,r3
    58bc:	18c7883a 	add	r3,r3,r3
    58c0:	1909883a 	add	r4,r3,r4
    58c4:	20c00017 	ldw	r3,0(r4)
    58c8:	01c00074 	movhi	r7,1
    58cc:	213ffe04 	addi	r4,r4,-8
    58d0:	39cc7704 	addi	r7,r7,12764
    58d4:	20c04426 	beq	r4,r3,59e8 <_free_r+0x258>
    58d8:	01ffff04 	movi	r7,-4
    58dc:	19400117 	ldw	r5,4(r3)
    58e0:	29ca703a 	and	r5,r5,r7
    58e4:	1140022e 	bgeu	r2,r5,58f0 <_free_r+0x160>
    58e8:	18c00217 	ldw	r3,8(r3)
    58ec:	20fffb1e 	bne	r4,r3,58dc <__alt_data_end+0xfffe58dc>
    58f0:	19000317 	ldw	r4,12(r3)
    58f4:	31000315 	stw	r4,12(r6)
    58f8:	30c00215 	stw	r3,8(r6)
    58fc:	21800215 	stw	r6,8(r4)
    5900:	19800315 	stw	r6,12(r3)
    5904:	003fde06 	br	5880 <__alt_data_end+0xfffe5880>
    5908:	29c00217 	ldw	r7,8(r5)
    590c:	10c5883a 	add	r2,r2,r3
    5910:	00c00074 	movhi	r3,1
    5914:	18cc7904 	addi	r3,r3,12772
    5918:	38c03b26 	beq	r7,r3,5a08 <_free_r+0x278>
    591c:	2a000317 	ldw	r8,12(r5)
    5920:	11400054 	ori	r5,r2,1
    5924:	3087883a 	add	r3,r6,r2
    5928:	3a000315 	stw	r8,12(r7)
    592c:	41c00215 	stw	r7,8(r8)
    5930:	31400115 	stw	r5,4(r6)
    5934:	18800015 	stw	r2,0(r3)
    5938:	003fbd06 	br	5830 <__alt_data_end+0xfffe5830>
    593c:	39c0004c 	andi	r7,r7,1
    5940:	10c5883a 	add	r2,r2,r3
    5944:	3800071e 	bne	r7,zero,5964 <_free_r+0x1d4>
    5948:	81fffe17 	ldw	r7,-8(r16)
    594c:	31cdc83a 	sub	r6,r6,r7
    5950:	30c00317 	ldw	r3,12(r6)
    5954:	31400217 	ldw	r5,8(r6)
    5958:	11c5883a 	add	r2,r2,r7
    595c:	28c00315 	stw	r3,12(r5)
    5960:	19400215 	stw	r5,8(r3)
    5964:	10c00054 	ori	r3,r2,1
    5968:	30c00115 	stw	r3,4(r6)
    596c:	00c00074 	movhi	r3,1
    5970:	18d21f04 	addi	r3,r3,18556
    5974:	18c00017 	ldw	r3,0(r3)
    5978:	21800215 	stw	r6,8(r4)
    597c:	10ffc036 	bltu	r2,r3,5880 <__alt_data_end+0xfffe5880>
    5980:	00800074 	movhi	r2,1
    5984:	1098ed04 	addi	r2,r2,25524
    5988:	11400017 	ldw	r5,0(r2)
    598c:	8809883a 	mov	r4,r17
    5990:	000566c0 	call	566c <_malloc_trim_r>
    5994:	003fba06 	br	5880 <__alt_data_end+0xfffe5880>
    5998:	28c9883a 	add	r4,r5,r3
    599c:	21000117 	ldw	r4,4(r4)
    59a0:	2100004c 	andi	r4,r4,1
    59a4:	2000391e 	bne	r4,zero,5a8c <_free_r+0x2fc>
    59a8:	29c00217 	ldw	r7,8(r5)
    59ac:	29000317 	ldw	r4,12(r5)
    59b0:	1885883a 	add	r2,r3,r2
    59b4:	10c00054 	ori	r3,r2,1
    59b8:	39000315 	stw	r4,12(r7)
    59bc:	21c00215 	stw	r7,8(r4)
    59c0:	30c00115 	stw	r3,4(r6)
    59c4:	308d883a 	add	r6,r6,r2
    59c8:	30800015 	stw	r2,0(r6)
    59cc:	003fac06 	br	5880 <__alt_data_end+0xfffe5880>
    59d0:	00c00504 	movi	r3,20
    59d4:	19401536 	bltu	r3,r5,5a2c <_free_r+0x29c>
    59d8:	28c01704 	addi	r3,r5,92
    59dc:	18c7883a 	add	r3,r3,r3
    59e0:	294016c4 	addi	r5,r5,91
    59e4:	003fb406 	br	58b8 <__alt_data_end+0xfffe58b8>
    59e8:	280bd0ba 	srai	r5,r5,2
    59ec:	00c00044 	movi	r3,1
    59f0:	38800117 	ldw	r2,4(r7)
    59f4:	194a983a 	sll	r5,r3,r5
    59f8:	2007883a 	mov	r3,r4
    59fc:	2884b03a 	or	r2,r5,r2
    5a00:	38800115 	stw	r2,4(r7)
    5a04:	003fbb06 	br	58f4 <__alt_data_end+0xfffe58f4>
    5a08:	21800515 	stw	r6,20(r4)
    5a0c:	21800415 	stw	r6,16(r4)
    5a10:	10c00054 	ori	r3,r2,1
    5a14:	31c00315 	stw	r7,12(r6)
    5a18:	31c00215 	stw	r7,8(r6)
    5a1c:	30c00115 	stw	r3,4(r6)
    5a20:	308d883a 	add	r6,r6,r2
    5a24:	30800015 	stw	r2,0(r6)
    5a28:	003f9506 	br	5880 <__alt_data_end+0xfffe5880>
    5a2c:	00c01504 	movi	r3,84
    5a30:	19400536 	bltu	r3,r5,5a48 <_free_r+0x2b8>
    5a34:	100ad33a 	srli	r5,r2,12
    5a38:	28c01bc4 	addi	r3,r5,111
    5a3c:	18c7883a 	add	r3,r3,r3
    5a40:	29401b84 	addi	r5,r5,110
    5a44:	003f9c06 	br	58b8 <__alt_data_end+0xfffe58b8>
    5a48:	00c05504 	movi	r3,340
    5a4c:	19400536 	bltu	r3,r5,5a64 <_free_r+0x2d4>
    5a50:	100ad3fa 	srli	r5,r2,15
    5a54:	28c01e04 	addi	r3,r5,120
    5a58:	18c7883a 	add	r3,r3,r3
    5a5c:	29401dc4 	addi	r5,r5,119
    5a60:	003f9506 	br	58b8 <__alt_data_end+0xfffe58b8>
    5a64:	00c15504 	movi	r3,1364
    5a68:	19400536 	bltu	r3,r5,5a80 <_free_r+0x2f0>
    5a6c:	100ad4ba 	srli	r5,r2,18
    5a70:	28c01f44 	addi	r3,r5,125
    5a74:	18c7883a 	add	r3,r3,r3
    5a78:	29401f04 	addi	r5,r5,124
    5a7c:	003f8e06 	br	58b8 <__alt_data_end+0xfffe58b8>
    5a80:	00c03f84 	movi	r3,254
    5a84:	01401f84 	movi	r5,126
    5a88:	003f8b06 	br	58b8 <__alt_data_end+0xfffe58b8>
    5a8c:	10c00054 	ori	r3,r2,1
    5a90:	30c00115 	stw	r3,4(r6)
    5a94:	308d883a 	add	r6,r6,r2
    5a98:	30800015 	stw	r2,0(r6)
    5a9c:	003f7806 	br	5880 <__alt_data_end+0xfffe5880>

00005aa0 <_fseek_r>:
    5aa0:	0005ac01 	jmpi	5ac0 <_fseeko_r>

00005aa4 <fseek>:
    5aa4:	00800074 	movhi	r2,1
    5aa8:	10921d04 	addi	r2,r2,18548
    5aac:	300f883a 	mov	r7,r6
    5ab0:	280d883a 	mov	r6,r5
    5ab4:	200b883a 	mov	r5,r4
    5ab8:	11000017 	ldw	r4,0(r2)
    5abc:	0005ac01 	jmpi	5ac0 <_fseeko_r>

00005ac0 <_fseeko_r>:
    5ac0:	deffe804 	addi	sp,sp,-96
    5ac4:	dd401415 	stw	r21,80(sp)
    5ac8:	dc801115 	stw	r18,68(sp)
    5acc:	dc401015 	stw	r17,64(sp)
    5ad0:	dc000f15 	stw	r16,60(sp)
    5ad4:	dfc01715 	stw	ra,92(sp)
    5ad8:	ddc01615 	stw	r23,88(sp)
    5adc:	dd801515 	stw	r22,84(sp)
    5ae0:	dd001315 	stw	r20,76(sp)
    5ae4:	dcc01215 	stw	r19,72(sp)
    5ae8:	2023883a 	mov	r17,r4
    5aec:	2821883a 	mov	r16,r5
    5af0:	302b883a 	mov	r21,r6
    5af4:	3825883a 	mov	r18,r7
    5af8:	20000226 	beq	r4,zero,5b04 <_fseeko_r+0x44>
    5afc:	20800e17 	ldw	r2,56(r4)
    5b00:	10005a26 	beq	r2,zero,5c6c <_fseeko_r+0x1ac>
    5b04:	8080030b 	ldhu	r2,12(r16)
    5b08:	00c04204 	movi	r3,264
    5b0c:	1080420c 	andi	r2,r2,264
    5b10:	10c05b26 	beq	r2,r3,5c80 <_fseeko_r+0x1c0>
    5b14:	85000a17 	ldw	r20,40(r16)
    5b18:	a000f626 	beq	r20,zero,5ef4 <_fseeko_r+0x434>
    5b1c:	00800044 	movi	r2,1
    5b20:	90803e26 	beq	r18,r2,5c1c <_fseeko_r+0x15c>
    5b24:	00800084 	movi	r2,2
    5b28:	90801026 	beq	r18,r2,5b6c <_fseeko_r+0xac>
    5b2c:	90000f26 	beq	r18,zero,5b6c <_fseeko_r+0xac>
    5b30:	00800584 	movi	r2,22
    5b34:	88800015 	stw	r2,0(r17)
    5b38:	04ffffc4 	movi	r19,-1
    5b3c:	9805883a 	mov	r2,r19
    5b40:	dfc01717 	ldw	ra,92(sp)
    5b44:	ddc01617 	ldw	r23,88(sp)
    5b48:	dd801517 	ldw	r22,84(sp)
    5b4c:	dd401417 	ldw	r21,80(sp)
    5b50:	dd001317 	ldw	r20,76(sp)
    5b54:	dcc01217 	ldw	r19,72(sp)
    5b58:	dc801117 	ldw	r18,68(sp)
    5b5c:	dc401017 	ldw	r17,64(sp)
    5b60:	dc000f17 	ldw	r16,60(sp)
    5b64:	dec01804 	addi	sp,sp,96
    5b68:	f800283a 	ret
    5b6c:	80800417 	ldw	r2,16(r16)
    5b70:	002f883a 	mov	r23,zero
    5b74:	0027883a 	mov	r19,zero
    5b78:	1000cb26 	beq	r2,zero,5ea8 <_fseeko_r+0x3e8>
    5b7c:	8080030b 	ldhu	r2,12(r16)
    5b80:	10c2068c 	andi	r3,r2,2074
    5b84:	1800071e 	bne	r3,zero,5ba4 <_fseeko_r+0xe4>
    5b88:	10c1000c 	andi	r3,r2,1024
    5b8c:	1800451e 	bne	r3,zero,5ca4 <_fseeko_r+0x1e4>
    5b90:	00c00034 	movhi	r3,0
    5b94:	18dc8604 	addi	r3,r3,29208
    5b98:	a0c0b726 	beq	r20,r3,5e78 <_fseeko_r+0x3b8>
    5b9c:	10820014 	ori	r2,r2,2048
    5ba0:	8080030d 	sth	r2,12(r16)
    5ba4:	800b883a 	mov	r5,r16
    5ba8:	8809883a 	mov	r4,r17
    5bac:	0004eb40 	call	4eb4 <_fflush_r>
    5bb0:	1027883a 	mov	r19,r2
    5bb4:	103fe01e 	bne	r2,zero,5b38 <__alt_data_end+0xfffe5b38>
    5bb8:	81400717 	ldw	r5,28(r16)
    5bbc:	900f883a 	mov	r7,r18
    5bc0:	a80d883a 	mov	r6,r21
    5bc4:	8809883a 	mov	r4,r17
    5bc8:	a03ee83a 	callr	r20
    5bcc:	00ffffc4 	movi	r3,-1
    5bd0:	10ffd926 	beq	r2,r3,5b38 <__alt_data_end+0xfffe5b38>
    5bd4:	81400c17 	ldw	r5,48(r16)
    5bd8:	28000526 	beq	r5,zero,5bf0 <_fseeko_r+0x130>
    5bdc:	80801004 	addi	r2,r16,64
    5be0:	28800226 	beq	r5,r2,5bec <_fseeko_r+0x12c>
    5be4:	8809883a 	mov	r4,r17
    5be8:	00057900 	call	5790 <_free_r>
    5bec:	80000c15 	stw	zero,48(r16)
    5bf0:	8080030b 	ldhu	r2,12(r16)
    5bf4:	80c00417 	ldw	r3,16(r16)
    5bf8:	80000115 	stw	zero,4(r16)
    5bfc:	10bdf7cc 	andi	r2,r2,63455
    5c00:	80c00015 	stw	r3,0(r16)
    5c04:	8080030d 	sth	r2,12(r16)
    5c08:	01800204 	movi	r6,8
    5c0c:	000b883a 	mov	r5,zero
    5c10:	81001704 	addi	r4,r16,92
    5c14:	0006c140 	call	6c14 <memset>
    5c18:	003fc806 	br	5b3c <__alt_data_end+0xfffe5b3c>
    5c1c:	800b883a 	mov	r5,r16
    5c20:	8809883a 	mov	r4,r17
    5c24:	0004eb40 	call	4eb4 <_fflush_r>
    5c28:	8080030b 	ldhu	r2,12(r16)
    5c2c:	10c4000c 	andi	r3,r2,4096
    5c30:	18008726 	beq	r3,zero,5e50 <_fseeko_r+0x390>
    5c34:	84c01417 	ldw	r19,80(r16)
    5c38:	10c0010c 	andi	r3,r2,4
    5c3c:	1800431e 	bne	r3,zero,5d4c <_fseeko_r+0x28c>
    5c40:	1080020c 	andi	r2,r2,8
    5c44:	10008026 	beq	r2,zero,5e48 <_fseeko_r+0x388>
    5c48:	80c00017 	ldw	r3,0(r16)
    5c4c:	80800417 	ldw	r2,16(r16)
    5c50:	18000226 	beq	r3,zero,5c5c <_fseeko_r+0x19c>
    5c54:	1887c83a 	sub	r3,r3,r2
    5c58:	98e7883a 	add	r19,r19,r3
    5c5c:	aceb883a 	add	r21,r21,r19
    5c60:	05c00044 	movi	r23,1
    5c64:	0025883a 	mov	r18,zero
    5c68:	003fc306 	br	5b78 <__alt_data_end+0xfffe5b78>
    5c6c:	00052a00 	call	52a0 <__sinit>
    5c70:	8080030b 	ldhu	r2,12(r16)
    5c74:	00c04204 	movi	r3,264
    5c78:	1080420c 	andi	r2,r2,264
    5c7c:	10ffa51e 	bne	r2,r3,5b14 <__alt_data_end+0xfffe5b14>
    5c80:	800b883a 	mov	r5,r16
    5c84:	8809883a 	mov	r4,r17
    5c88:	0004eb40 	call	4eb4 <_fflush_r>
    5c8c:	003fa106 	br	5b14 <__alt_data_end+0xfffe5b14>
    5c90:	8080030b 	ldhu	r2,12(r16)
    5c94:	00c10004 	movi	r3,1024
    5c98:	80c01315 	stw	r3,76(r16)
    5c9c:	10c4b03a 	or	r2,r2,r3
    5ca0:	8080030d 	sth	r2,12(r16)
    5ca4:	9000311e 	bne	r18,zero,5d6c <_fseeko_r+0x2ac>
    5ca8:	a82d883a 	mov	r22,r21
    5cac:	b800371e 	bne	r23,zero,5d8c <_fseeko_r+0x2cc>
    5cb0:	8080030b 	ldhu	r2,12(r16)
    5cb4:	1084000c 	andi	r2,r2,4096
    5cb8:	10007f26 	beq	r2,zero,5eb8 <_fseeko_r+0x3f8>
    5cbc:	80801417 	ldw	r2,80(r16)
    5cc0:	81800117 	ldw	r6,4(r16)
    5cc4:	81400c17 	ldw	r5,48(r16)
    5cc8:	11a7c83a 	sub	r19,r2,r6
    5ccc:	28008226 	beq	r5,zero,5ed8 <_fseeko_r+0x418>
    5cd0:	81c00f17 	ldw	r7,60(r16)
    5cd4:	99e7c83a 	sub	r19,r19,r7
    5cd8:	81000e17 	ldw	r4,56(r16)
    5cdc:	80800417 	ldw	r2,16(r16)
    5ce0:	99a7883a 	add	r19,r19,r6
    5ce4:	2087c83a 	sub	r3,r4,r2
    5ce8:	98e7c83a 	sub	r19,r19,r3
    5cec:	38c7883a 	add	r3,r7,r3
    5cf0:	b4c02b16 	blt	r22,r19,5da0 <_fseeko_r+0x2e0>
    5cf4:	98c9883a 	add	r4,r19,r3
    5cf8:	b100292e 	bgeu	r22,r4,5da0 <_fseeko_r+0x2e0>
    5cfc:	b4e7c83a 	sub	r19,r22,r19
    5d00:	14c5883a 	add	r2,r2,r19
    5d04:	1ce7c83a 	sub	r19,r3,r19
    5d08:	80800015 	stw	r2,0(r16)
    5d0c:	84c00115 	stw	r19,4(r16)
    5d10:	28000526 	beq	r5,zero,5d28 <_fseeko_r+0x268>
    5d14:	80801004 	addi	r2,r16,64
    5d18:	28800226 	beq	r5,r2,5d24 <_fseeko_r+0x264>
    5d1c:	8809883a 	mov	r4,r17
    5d20:	00057900 	call	5790 <_free_r>
    5d24:	80000c15 	stw	zero,48(r16)
    5d28:	8080030b 	ldhu	r2,12(r16)
    5d2c:	01800204 	movi	r6,8
    5d30:	000b883a 	mov	r5,zero
    5d34:	10bff7cc 	andi	r2,r2,65503
    5d38:	8080030d 	sth	r2,12(r16)
    5d3c:	81001704 	addi	r4,r16,92
    5d40:	0006c140 	call	6c14 <memset>
    5d44:	0027883a 	mov	r19,zero
    5d48:	003f7c06 	br	5b3c <__alt_data_end+0xfffe5b3c>
    5d4c:	80c00117 	ldw	r3,4(r16)
    5d50:	80800c17 	ldw	r2,48(r16)
    5d54:	98e7c83a 	sub	r19,r19,r3
    5d58:	10003b26 	beq	r2,zero,5e48 <_fseeko_r+0x388>
    5d5c:	80c00f17 	ldw	r3,60(r16)
    5d60:	80800417 	ldw	r2,16(r16)
    5d64:	98e7c83a 	sub	r19,r19,r3
    5d68:	003fbc06 	br	5c5c <__alt_data_end+0xfffe5c5c>
    5d6c:	8140038f 	ldh	r5,14(r16)
    5d70:	d80d883a 	mov	r6,sp
    5d74:	8809883a 	mov	r4,r17
    5d78:	0005f200 	call	5f20 <_fstat_r>
    5d7c:	103f891e 	bne	r2,zero,5ba4 <__alt_data_end+0xfffe5ba4>
    5d80:	dd800417 	ldw	r22,16(sp)
    5d84:	adad883a 	add	r22,r21,r22
    5d88:	b83fc926 	beq	r23,zero,5cb0 <__alt_data_end+0xfffe5cb0>
    5d8c:	81400c17 	ldw	r5,48(r16)
    5d90:	81800117 	ldw	r6,4(r16)
    5d94:	28005026 	beq	r5,zero,5ed8 <_fseeko_r+0x418>
    5d98:	81c00f17 	ldw	r7,60(r16)
    5d9c:	003fce06 	br	5cd8 <__alt_data_end+0xfffe5cd8>
    5da0:	84c01317 	ldw	r19,76(r16)
    5da4:	81400717 	ldw	r5,28(r16)
    5da8:	000f883a 	mov	r7,zero
    5dac:	04e7c83a 	sub	r19,zero,r19
    5db0:	9da6703a 	and	r19,r19,r22
    5db4:	980d883a 	mov	r6,r19
    5db8:	8809883a 	mov	r4,r17
    5dbc:	a03ee83a 	callr	r20
    5dc0:	00ffffc4 	movi	r3,-1
    5dc4:	10ff7726 	beq	r2,r3,5ba4 <__alt_data_end+0xfffe5ba4>
    5dc8:	80800417 	ldw	r2,16(r16)
    5dcc:	81400c17 	ldw	r5,48(r16)
    5dd0:	80000115 	stw	zero,4(r16)
    5dd4:	80800015 	stw	r2,0(r16)
    5dd8:	28000526 	beq	r5,zero,5df0 <_fseeko_r+0x330>
    5ddc:	80801004 	addi	r2,r16,64
    5de0:	28800226 	beq	r5,r2,5dec <_fseeko_r+0x32c>
    5de4:	8809883a 	mov	r4,r17
    5de8:	00057900 	call	5790 <_free_r>
    5dec:	80000c15 	stw	zero,48(r16)
    5df0:	8080030b 	ldhu	r2,12(r16)
    5df4:	b4e7c83a 	sub	r19,r22,r19
    5df8:	10bff7cc 	andi	r2,r2,65503
    5dfc:	8080030d 	sth	r2,12(r16)
    5e00:	98000b26 	beq	r19,zero,5e30 <_fseeko_r+0x370>
    5e04:	800b883a 	mov	r5,r16
    5e08:	8809883a 	mov	r4,r17
    5e0c:	0006f180 	call	6f18 <__srefill_r>
    5e10:	103f641e 	bne	r2,zero,5ba4 <__alt_data_end+0xfffe5ba4>
    5e14:	80800117 	ldw	r2,4(r16)
    5e18:	14ff6236 	bltu	r2,r19,5ba4 <__alt_data_end+0xfffe5ba4>
    5e1c:	80c00017 	ldw	r3,0(r16)
    5e20:	14c5c83a 	sub	r2,r2,r19
    5e24:	80800115 	stw	r2,4(r16)
    5e28:	1ce7883a 	add	r19,r3,r19
    5e2c:	84c00015 	stw	r19,0(r16)
    5e30:	01800204 	movi	r6,8
    5e34:	000b883a 	mov	r5,zero
    5e38:	81001704 	addi	r4,r16,92
    5e3c:	0006c140 	call	6c14 <memset>
    5e40:	0027883a 	mov	r19,zero
    5e44:	003f3d06 	br	5b3c <__alt_data_end+0xfffe5b3c>
    5e48:	80800417 	ldw	r2,16(r16)
    5e4c:	003f8306 	br	5c5c <__alt_data_end+0xfffe5c5c>
    5e50:	81400717 	ldw	r5,28(r16)
    5e54:	900f883a 	mov	r7,r18
    5e58:	000d883a 	mov	r6,zero
    5e5c:	8809883a 	mov	r4,r17
    5e60:	a03ee83a 	callr	r20
    5e64:	1027883a 	mov	r19,r2
    5e68:	00bfffc4 	movi	r2,-1
    5e6c:	98bf3226 	beq	r19,r2,5b38 <__alt_data_end+0xfffe5b38>
    5e70:	8080030b 	ldhu	r2,12(r16)
    5e74:	003f7006 	br	5c38 <__alt_data_end+0xfffe5c38>
    5e78:	8140038f 	ldh	r5,14(r16)
    5e7c:	283f4716 	blt	r5,zero,5b9c <__alt_data_end+0xfffe5b9c>
    5e80:	d80d883a 	mov	r6,sp
    5e84:	8809883a 	mov	r4,r17
    5e88:	0005f200 	call	5f20 <_fstat_r>
    5e8c:	1000041e 	bne	r2,zero,5ea0 <_fseeko_r+0x3e0>
    5e90:	d8800117 	ldw	r2,4(sp)
    5e94:	00e00014 	movui	r3,32768
    5e98:	10bc000c 	andi	r2,r2,61440
    5e9c:	10ff7c26 	beq	r2,r3,5c90 <__alt_data_end+0xfffe5c90>
    5ea0:	8080030b 	ldhu	r2,12(r16)
    5ea4:	003f3d06 	br	5b9c <__alt_data_end+0xfffe5b9c>
    5ea8:	800b883a 	mov	r5,r16
    5eac:	8809883a 	mov	r4,r17
    5eb0:	00061040 	call	6104 <__smakebuf_r>
    5eb4:	003f3106 	br	5b7c <__alt_data_end+0xfffe5b7c>
    5eb8:	81400717 	ldw	r5,28(r16)
    5ebc:	01c00044 	movi	r7,1
    5ec0:	000d883a 	mov	r6,zero
    5ec4:	8809883a 	mov	r4,r17
    5ec8:	a03ee83a 	callr	r20
    5ecc:	00ffffc4 	movi	r3,-1
    5ed0:	10ff7b1e 	bne	r2,r3,5cc0 <__alt_data_end+0xfffe5cc0>
    5ed4:	003f3306 	br	5ba4 <__alt_data_end+0xfffe5ba4>
    5ed8:	80c00017 	ldw	r3,0(r16)
    5edc:	80800417 	ldw	r2,16(r16)
    5ee0:	000b883a 	mov	r5,zero
    5ee4:	1887c83a 	sub	r3,r3,r2
    5ee8:	98e7c83a 	sub	r19,r19,r3
    5eec:	30c7883a 	add	r3,r6,r3
    5ef0:	003f7f06 	br	5cf0 <__alt_data_end+0xfffe5cf0>
    5ef4:	00800744 	movi	r2,29
    5ef8:	88800015 	stw	r2,0(r17)
    5efc:	04ffffc4 	movi	r19,-1
    5f00:	003f0e06 	br	5b3c <__alt_data_end+0xfffe5b3c>

00005f04 <fseeko>:
    5f04:	00800074 	movhi	r2,1
    5f08:	10921d04 	addi	r2,r2,18548
    5f0c:	300f883a 	mov	r7,r6
    5f10:	280d883a 	mov	r6,r5
    5f14:	200b883a 	mov	r5,r4
    5f18:	11000017 	ldw	r4,0(r2)
    5f1c:	0005ac01 	jmpi	5ac0 <_fseeko_r>

00005f20 <_fstat_r>:
    5f20:	defffd04 	addi	sp,sp,-12
    5f24:	2805883a 	mov	r2,r5
    5f28:	dc000015 	stw	r16,0(sp)
    5f2c:	04000074 	movhi	r16,1
    5f30:	dc400115 	stw	r17,4(sp)
    5f34:	8418ea04 	addi	r16,r16,25512
    5f38:	2023883a 	mov	r17,r4
    5f3c:	300b883a 	mov	r5,r6
    5f40:	1009883a 	mov	r4,r2
    5f44:	dfc00215 	stw	ra,8(sp)
    5f48:	80000015 	stw	zero,0(r16)
    5f4c:	00103bc0 	call	103bc <fstat>
    5f50:	00ffffc4 	movi	r3,-1
    5f54:	10c00526 	beq	r2,r3,5f6c <_fstat_r+0x4c>
    5f58:	dfc00217 	ldw	ra,8(sp)
    5f5c:	dc400117 	ldw	r17,4(sp)
    5f60:	dc000017 	ldw	r16,0(sp)
    5f64:	dec00304 	addi	sp,sp,12
    5f68:	f800283a 	ret
    5f6c:	80c00017 	ldw	r3,0(r16)
    5f70:	183ff926 	beq	r3,zero,5f58 <__alt_data_end+0xfffe5f58>
    5f74:	88c00015 	stw	r3,0(r17)
    5f78:	003ff706 	br	5f58 <__alt_data_end+0xfffe5f58>

00005f7c <_fwalk>:
    5f7c:	defff704 	addi	sp,sp,-36
    5f80:	dd000415 	stw	r20,16(sp)
    5f84:	dfc00815 	stw	ra,32(sp)
    5f88:	ddc00715 	stw	r23,28(sp)
    5f8c:	dd800615 	stw	r22,24(sp)
    5f90:	dd400515 	stw	r21,20(sp)
    5f94:	dcc00315 	stw	r19,12(sp)
    5f98:	dc800215 	stw	r18,8(sp)
    5f9c:	dc400115 	stw	r17,4(sp)
    5fa0:	dc000015 	stw	r16,0(sp)
    5fa4:	2500b804 	addi	r20,r4,736
    5fa8:	a0002326 	beq	r20,zero,6038 <_fwalk+0xbc>
    5fac:	282b883a 	mov	r21,r5
    5fb0:	002f883a 	mov	r23,zero
    5fb4:	05800044 	movi	r22,1
    5fb8:	04ffffc4 	movi	r19,-1
    5fbc:	a4400117 	ldw	r17,4(r20)
    5fc0:	a4800217 	ldw	r18,8(r20)
    5fc4:	8c7fffc4 	addi	r17,r17,-1
    5fc8:	88000d16 	blt	r17,zero,6000 <_fwalk+0x84>
    5fcc:	94000304 	addi	r16,r18,12
    5fd0:	94800384 	addi	r18,r18,14
    5fd4:	8080000b 	ldhu	r2,0(r16)
    5fd8:	8c7fffc4 	addi	r17,r17,-1
    5fdc:	813ffd04 	addi	r4,r16,-12
    5fe0:	b080042e 	bgeu	r22,r2,5ff4 <_fwalk+0x78>
    5fe4:	9080000f 	ldh	r2,0(r18)
    5fe8:	14c00226 	beq	r2,r19,5ff4 <_fwalk+0x78>
    5fec:	a83ee83a 	callr	r21
    5ff0:	b8aeb03a 	or	r23,r23,r2
    5ff4:	84001a04 	addi	r16,r16,104
    5ff8:	94801a04 	addi	r18,r18,104
    5ffc:	8cfff51e 	bne	r17,r19,5fd4 <__alt_data_end+0xfffe5fd4>
    6000:	a5000017 	ldw	r20,0(r20)
    6004:	a03fed1e 	bne	r20,zero,5fbc <__alt_data_end+0xfffe5fbc>
    6008:	b805883a 	mov	r2,r23
    600c:	dfc00817 	ldw	ra,32(sp)
    6010:	ddc00717 	ldw	r23,28(sp)
    6014:	dd800617 	ldw	r22,24(sp)
    6018:	dd400517 	ldw	r21,20(sp)
    601c:	dd000417 	ldw	r20,16(sp)
    6020:	dcc00317 	ldw	r19,12(sp)
    6024:	dc800217 	ldw	r18,8(sp)
    6028:	dc400117 	ldw	r17,4(sp)
    602c:	dc000017 	ldw	r16,0(sp)
    6030:	dec00904 	addi	sp,sp,36
    6034:	f800283a 	ret
    6038:	002f883a 	mov	r23,zero
    603c:	003ff206 	br	6008 <__alt_data_end+0xfffe6008>

00006040 <_fwalk_reent>:
    6040:	defff704 	addi	sp,sp,-36
    6044:	dd000415 	stw	r20,16(sp)
    6048:	dfc00815 	stw	ra,32(sp)
    604c:	ddc00715 	stw	r23,28(sp)
    6050:	dd800615 	stw	r22,24(sp)
    6054:	dd400515 	stw	r21,20(sp)
    6058:	dcc00315 	stw	r19,12(sp)
    605c:	dc800215 	stw	r18,8(sp)
    6060:	dc400115 	stw	r17,4(sp)
    6064:	dc000015 	stw	r16,0(sp)
    6068:	2500b804 	addi	r20,r4,736
    606c:	a0002326 	beq	r20,zero,60fc <_fwalk_reent+0xbc>
    6070:	282b883a 	mov	r21,r5
    6074:	2027883a 	mov	r19,r4
    6078:	002f883a 	mov	r23,zero
    607c:	05800044 	movi	r22,1
    6080:	04bfffc4 	movi	r18,-1
    6084:	a4400117 	ldw	r17,4(r20)
    6088:	a4000217 	ldw	r16,8(r20)
    608c:	8c7fffc4 	addi	r17,r17,-1
    6090:	88000c16 	blt	r17,zero,60c4 <_fwalk_reent+0x84>
    6094:	84000304 	addi	r16,r16,12
    6098:	8080000b 	ldhu	r2,0(r16)
    609c:	8c7fffc4 	addi	r17,r17,-1
    60a0:	817ffd04 	addi	r5,r16,-12
    60a4:	b080052e 	bgeu	r22,r2,60bc <_fwalk_reent+0x7c>
    60a8:	8080008f 	ldh	r2,2(r16)
    60ac:	9809883a 	mov	r4,r19
    60b0:	14800226 	beq	r2,r18,60bc <_fwalk_reent+0x7c>
    60b4:	a83ee83a 	callr	r21
    60b8:	b8aeb03a 	or	r23,r23,r2
    60bc:	84001a04 	addi	r16,r16,104
    60c0:	8cbff51e 	bne	r17,r18,6098 <__alt_data_end+0xfffe6098>
    60c4:	a5000017 	ldw	r20,0(r20)
    60c8:	a03fee1e 	bne	r20,zero,6084 <__alt_data_end+0xfffe6084>
    60cc:	b805883a 	mov	r2,r23
    60d0:	dfc00817 	ldw	ra,32(sp)
    60d4:	ddc00717 	ldw	r23,28(sp)
    60d8:	dd800617 	ldw	r22,24(sp)
    60dc:	dd400517 	ldw	r21,20(sp)
    60e0:	dd000417 	ldw	r20,16(sp)
    60e4:	dcc00317 	ldw	r19,12(sp)
    60e8:	dc800217 	ldw	r18,8(sp)
    60ec:	dc400117 	ldw	r17,4(sp)
    60f0:	dc000017 	ldw	r16,0(sp)
    60f4:	dec00904 	addi	sp,sp,36
    60f8:	f800283a 	ret
    60fc:	002f883a 	mov	r23,zero
    6100:	003ff206 	br	60cc <__alt_data_end+0xfffe60cc>

00006104 <__smakebuf_r>:
    6104:	2880030b 	ldhu	r2,12(r5)
    6108:	10c0008c 	andi	r3,r2,2
    610c:	1800411e 	bne	r3,zero,6214 <__smakebuf_r+0x110>
    6110:	deffec04 	addi	sp,sp,-80
    6114:	dc000f15 	stw	r16,60(sp)
    6118:	2821883a 	mov	r16,r5
    611c:	2940038f 	ldh	r5,14(r5)
    6120:	dc401015 	stw	r17,64(sp)
    6124:	dfc01315 	stw	ra,76(sp)
    6128:	dcc01215 	stw	r19,72(sp)
    612c:	dc801115 	stw	r18,68(sp)
    6130:	2023883a 	mov	r17,r4
    6134:	28001c16 	blt	r5,zero,61a8 <__smakebuf_r+0xa4>
    6138:	d80d883a 	mov	r6,sp
    613c:	0005f200 	call	5f20 <_fstat_r>
    6140:	10001816 	blt	r2,zero,61a4 <__smakebuf_r+0xa0>
    6144:	d8800117 	ldw	r2,4(sp)
    6148:	00e00014 	movui	r3,32768
    614c:	10bc000c 	andi	r2,r2,61440
    6150:	14c80020 	cmpeqi	r19,r2,8192
    6154:	10c03726 	beq	r2,r3,6234 <__smakebuf_r+0x130>
    6158:	80c0030b 	ldhu	r3,12(r16)
    615c:	18c20014 	ori	r3,r3,2048
    6160:	80c0030d 	sth	r3,12(r16)
    6164:	00c80004 	movi	r3,8192
    6168:	10c0521e 	bne	r2,r3,62b4 <__smakebuf_r+0x1b0>
    616c:	8140038f 	ldh	r5,14(r16)
    6170:	8809883a 	mov	r4,r17
    6174:	000b9880 	call	b988 <_isatty_r>
    6178:	10004c26 	beq	r2,zero,62ac <__smakebuf_r+0x1a8>
    617c:	8080030b 	ldhu	r2,12(r16)
    6180:	80c010c4 	addi	r3,r16,67
    6184:	80c00015 	stw	r3,0(r16)
    6188:	10800054 	ori	r2,r2,1
    618c:	8080030d 	sth	r2,12(r16)
    6190:	00800044 	movi	r2,1
    6194:	80c00415 	stw	r3,16(r16)
    6198:	80800515 	stw	r2,20(r16)
    619c:	04810004 	movi	r18,1024
    61a0:	00000706 	br	61c0 <__smakebuf_r+0xbc>
    61a4:	8080030b 	ldhu	r2,12(r16)
    61a8:	10c0200c 	andi	r3,r2,128
    61ac:	18001f1e 	bne	r3,zero,622c <__smakebuf_r+0x128>
    61b0:	04810004 	movi	r18,1024
    61b4:	10820014 	ori	r2,r2,2048
    61b8:	8080030d 	sth	r2,12(r16)
    61bc:	0027883a 	mov	r19,zero
    61c0:	900b883a 	mov	r5,r18
    61c4:	8809883a 	mov	r4,r17
    61c8:	00062c00 	call	62c0 <_malloc_r>
    61cc:	10002c26 	beq	r2,zero,6280 <__smakebuf_r+0x17c>
    61d0:	80c0030b 	ldhu	r3,12(r16)
    61d4:	01000034 	movhi	r4,0
    61d8:	2113d204 	addi	r4,r4,20296
    61dc:	89000f15 	stw	r4,60(r17)
    61e0:	18c02014 	ori	r3,r3,128
    61e4:	80c0030d 	sth	r3,12(r16)
    61e8:	80800015 	stw	r2,0(r16)
    61ec:	80800415 	stw	r2,16(r16)
    61f0:	84800515 	stw	r18,20(r16)
    61f4:	98001a1e 	bne	r19,zero,6260 <__smakebuf_r+0x15c>
    61f8:	dfc01317 	ldw	ra,76(sp)
    61fc:	dcc01217 	ldw	r19,72(sp)
    6200:	dc801117 	ldw	r18,68(sp)
    6204:	dc401017 	ldw	r17,64(sp)
    6208:	dc000f17 	ldw	r16,60(sp)
    620c:	dec01404 	addi	sp,sp,80
    6210:	f800283a 	ret
    6214:	288010c4 	addi	r2,r5,67
    6218:	28800015 	stw	r2,0(r5)
    621c:	28800415 	stw	r2,16(r5)
    6220:	00800044 	movi	r2,1
    6224:	28800515 	stw	r2,20(r5)
    6228:	f800283a 	ret
    622c:	04801004 	movi	r18,64
    6230:	003fe006 	br	61b4 <__alt_data_end+0xfffe61b4>
    6234:	81000a17 	ldw	r4,40(r16)
    6238:	00c00034 	movhi	r3,0
    623c:	18dc8604 	addi	r3,r3,29208
    6240:	20ffc51e 	bne	r4,r3,6158 <__alt_data_end+0xfffe6158>
    6244:	8080030b 	ldhu	r2,12(r16)
    6248:	04810004 	movi	r18,1024
    624c:	84801315 	stw	r18,76(r16)
    6250:	1484b03a 	or	r2,r2,r18
    6254:	8080030d 	sth	r2,12(r16)
    6258:	0027883a 	mov	r19,zero
    625c:	003fd806 	br	61c0 <__alt_data_end+0xfffe61c0>
    6260:	8140038f 	ldh	r5,14(r16)
    6264:	8809883a 	mov	r4,r17
    6268:	000b9880 	call	b988 <_isatty_r>
    626c:	103fe226 	beq	r2,zero,61f8 <__alt_data_end+0xfffe61f8>
    6270:	8080030b 	ldhu	r2,12(r16)
    6274:	10800054 	ori	r2,r2,1
    6278:	8080030d 	sth	r2,12(r16)
    627c:	003fde06 	br	61f8 <__alt_data_end+0xfffe61f8>
    6280:	8080030b 	ldhu	r2,12(r16)
    6284:	10c0800c 	andi	r3,r2,512
    6288:	183fdb1e 	bne	r3,zero,61f8 <__alt_data_end+0xfffe61f8>
    628c:	10800094 	ori	r2,r2,2
    6290:	80c010c4 	addi	r3,r16,67
    6294:	8080030d 	sth	r2,12(r16)
    6298:	00800044 	movi	r2,1
    629c:	80c00015 	stw	r3,0(r16)
    62a0:	80c00415 	stw	r3,16(r16)
    62a4:	80800515 	stw	r2,20(r16)
    62a8:	003fd306 	br	61f8 <__alt_data_end+0xfffe61f8>
    62ac:	04810004 	movi	r18,1024
    62b0:	003fc306 	br	61c0 <__alt_data_end+0xfffe61c0>
    62b4:	0027883a 	mov	r19,zero
    62b8:	04810004 	movi	r18,1024
    62bc:	003fc006 	br	61c0 <__alt_data_end+0xfffe61c0>

000062c0 <_malloc_r>:
    62c0:	defff504 	addi	sp,sp,-44
    62c4:	dc800315 	stw	r18,12(sp)
    62c8:	dfc00a15 	stw	ra,40(sp)
    62cc:	df000915 	stw	fp,36(sp)
    62d0:	ddc00815 	stw	r23,32(sp)
    62d4:	dd800715 	stw	r22,28(sp)
    62d8:	dd400615 	stw	r21,24(sp)
    62dc:	dd000515 	stw	r20,20(sp)
    62e0:	dcc00415 	stw	r19,16(sp)
    62e4:	dc400215 	stw	r17,8(sp)
    62e8:	dc000115 	stw	r16,4(sp)
    62ec:	288002c4 	addi	r2,r5,11
    62f0:	00c00584 	movi	r3,22
    62f4:	2025883a 	mov	r18,r4
    62f8:	18807f2e 	bgeu	r3,r2,64f8 <_malloc_r+0x238>
    62fc:	047ffe04 	movi	r17,-8
    6300:	1462703a 	and	r17,r2,r17
    6304:	8800a316 	blt	r17,zero,6594 <_malloc_r+0x2d4>
    6308:	8940a236 	bltu	r17,r5,6594 <_malloc_r+0x2d4>
    630c:	00107dc0 	call	107dc <__malloc_lock>
    6310:	00807dc4 	movi	r2,503
    6314:	1441e92e 	bgeu	r2,r17,6abc <_malloc_r+0x7fc>
    6318:	8804d27a 	srli	r2,r17,9
    631c:	1000a126 	beq	r2,zero,65a4 <_malloc_r+0x2e4>
    6320:	00c00104 	movi	r3,4
    6324:	18811e36 	bltu	r3,r2,67a0 <_malloc_r+0x4e0>
    6328:	8804d1ba 	srli	r2,r17,6
    632c:	12000e44 	addi	r8,r2,57
    6330:	11c00e04 	addi	r7,r2,56
    6334:	4209883a 	add	r4,r8,r8
    6338:	04c00074 	movhi	r19,1
    633c:	2109883a 	add	r4,r4,r4
    6340:	9ccc7704 	addi	r19,r19,12764
    6344:	2109883a 	add	r4,r4,r4
    6348:	9909883a 	add	r4,r19,r4
    634c:	24000117 	ldw	r16,4(r4)
    6350:	213ffe04 	addi	r4,r4,-8
    6354:	24009726 	beq	r4,r16,65b4 <_malloc_r+0x2f4>
    6358:	80800117 	ldw	r2,4(r16)
    635c:	01bfff04 	movi	r6,-4
    6360:	014003c4 	movi	r5,15
    6364:	1184703a 	and	r2,r2,r6
    6368:	1447c83a 	sub	r3,r2,r17
    636c:	28c00716 	blt	r5,r3,638c <_malloc_r+0xcc>
    6370:	1800920e 	bge	r3,zero,65bc <_malloc_r+0x2fc>
    6374:	84000317 	ldw	r16,12(r16)
    6378:	24008e26 	beq	r4,r16,65b4 <_malloc_r+0x2f4>
    637c:	80800117 	ldw	r2,4(r16)
    6380:	1184703a 	and	r2,r2,r6
    6384:	1447c83a 	sub	r3,r2,r17
    6388:	28fff90e 	bge	r5,r3,6370 <__alt_data_end+0xfffe6370>
    638c:	3809883a 	mov	r4,r7
    6390:	01800074 	movhi	r6,1
    6394:	9c000417 	ldw	r16,16(r19)
    6398:	318c7704 	addi	r6,r6,12764
    639c:	32000204 	addi	r8,r6,8
    63a0:	82013426 	beq	r16,r8,6874 <_malloc_r+0x5b4>
    63a4:	80c00117 	ldw	r3,4(r16)
    63a8:	00bfff04 	movi	r2,-4
    63ac:	188e703a 	and	r7,r3,r2
    63b0:	3c45c83a 	sub	r2,r7,r17
    63b4:	00c003c4 	movi	r3,15
    63b8:	18811f16 	blt	r3,r2,6838 <_malloc_r+0x578>
    63bc:	32000515 	stw	r8,20(r6)
    63c0:	32000415 	stw	r8,16(r6)
    63c4:	10007f0e 	bge	r2,zero,65c4 <_malloc_r+0x304>
    63c8:	00807fc4 	movi	r2,511
    63cc:	11c0fd36 	bltu	r2,r7,67c4 <_malloc_r+0x504>
    63d0:	3806d0fa 	srli	r3,r7,3
    63d4:	01c00044 	movi	r7,1
    63d8:	30800117 	ldw	r2,4(r6)
    63dc:	19400044 	addi	r5,r3,1
    63e0:	294b883a 	add	r5,r5,r5
    63e4:	1807d0ba 	srai	r3,r3,2
    63e8:	294b883a 	add	r5,r5,r5
    63ec:	294b883a 	add	r5,r5,r5
    63f0:	298b883a 	add	r5,r5,r6
    63f4:	38c6983a 	sll	r3,r7,r3
    63f8:	29c00017 	ldw	r7,0(r5)
    63fc:	2a7ffe04 	addi	r9,r5,-8
    6400:	1886b03a 	or	r3,r3,r2
    6404:	82400315 	stw	r9,12(r16)
    6408:	81c00215 	stw	r7,8(r16)
    640c:	30c00115 	stw	r3,4(r6)
    6410:	2c000015 	stw	r16,0(r5)
    6414:	3c000315 	stw	r16,12(r7)
    6418:	2005d0ba 	srai	r2,r4,2
    641c:	01400044 	movi	r5,1
    6420:	288a983a 	sll	r5,r5,r2
    6424:	19406f36 	bltu	r3,r5,65e4 <_malloc_r+0x324>
    6428:	28c4703a 	and	r2,r5,r3
    642c:	10000a1e 	bne	r2,zero,6458 <_malloc_r+0x198>
    6430:	00bfff04 	movi	r2,-4
    6434:	294b883a 	add	r5,r5,r5
    6438:	2088703a 	and	r4,r4,r2
    643c:	28c4703a 	and	r2,r5,r3
    6440:	21000104 	addi	r4,r4,4
    6444:	1000041e 	bne	r2,zero,6458 <_malloc_r+0x198>
    6448:	294b883a 	add	r5,r5,r5
    644c:	28c4703a 	and	r2,r5,r3
    6450:	21000104 	addi	r4,r4,4
    6454:	103ffc26 	beq	r2,zero,6448 <__alt_data_end+0xfffe6448>
    6458:	02bfff04 	movi	r10,-4
    645c:	024003c4 	movi	r9,15
    6460:	21800044 	addi	r6,r4,1
    6464:	318d883a 	add	r6,r6,r6
    6468:	318d883a 	add	r6,r6,r6
    646c:	318d883a 	add	r6,r6,r6
    6470:	998d883a 	add	r6,r19,r6
    6474:	333ffe04 	addi	r12,r6,-8
    6478:	2017883a 	mov	r11,r4
    647c:	31800104 	addi	r6,r6,4
    6480:	34000017 	ldw	r16,0(r6)
    6484:	31fffd04 	addi	r7,r6,-12
    6488:	81c0041e 	bne	r16,r7,649c <_malloc_r+0x1dc>
    648c:	0000fb06 	br	687c <_malloc_r+0x5bc>
    6490:	1801030e 	bge	r3,zero,68a0 <_malloc_r+0x5e0>
    6494:	84000317 	ldw	r16,12(r16)
    6498:	81c0f826 	beq	r16,r7,687c <_malloc_r+0x5bc>
    649c:	80800117 	ldw	r2,4(r16)
    64a0:	1284703a 	and	r2,r2,r10
    64a4:	1447c83a 	sub	r3,r2,r17
    64a8:	48fff90e 	bge	r9,r3,6490 <__alt_data_end+0xfffe6490>
    64ac:	80800317 	ldw	r2,12(r16)
    64b0:	81000217 	ldw	r4,8(r16)
    64b4:	89400054 	ori	r5,r17,1
    64b8:	81400115 	stw	r5,4(r16)
    64bc:	20800315 	stw	r2,12(r4)
    64c0:	11000215 	stw	r4,8(r2)
    64c4:	8463883a 	add	r17,r16,r17
    64c8:	9c400515 	stw	r17,20(r19)
    64cc:	9c400415 	stw	r17,16(r19)
    64d0:	18800054 	ori	r2,r3,1
    64d4:	88800115 	stw	r2,4(r17)
    64d8:	8a000315 	stw	r8,12(r17)
    64dc:	8a000215 	stw	r8,8(r17)
    64e0:	88e3883a 	add	r17,r17,r3
    64e4:	88c00015 	stw	r3,0(r17)
    64e8:	9009883a 	mov	r4,r18
    64ec:	00108000 	call	10800 <__malloc_unlock>
    64f0:	80800204 	addi	r2,r16,8
    64f4:	00001b06 	br	6564 <_malloc_r+0x2a4>
    64f8:	04400404 	movi	r17,16
    64fc:	89402536 	bltu	r17,r5,6594 <_malloc_r+0x2d4>
    6500:	00107dc0 	call	107dc <__malloc_lock>
    6504:	00800184 	movi	r2,6
    6508:	01000084 	movi	r4,2
    650c:	04c00074 	movhi	r19,1
    6510:	1085883a 	add	r2,r2,r2
    6514:	9ccc7704 	addi	r19,r19,12764
    6518:	1085883a 	add	r2,r2,r2
    651c:	9885883a 	add	r2,r19,r2
    6520:	14000117 	ldw	r16,4(r2)
    6524:	10fffe04 	addi	r3,r2,-8
    6528:	80c0d926 	beq	r16,r3,6890 <_malloc_r+0x5d0>
    652c:	80c00117 	ldw	r3,4(r16)
    6530:	81000317 	ldw	r4,12(r16)
    6534:	00bfff04 	movi	r2,-4
    6538:	1884703a 	and	r2,r3,r2
    653c:	81400217 	ldw	r5,8(r16)
    6540:	8085883a 	add	r2,r16,r2
    6544:	10c00117 	ldw	r3,4(r2)
    6548:	29000315 	stw	r4,12(r5)
    654c:	21400215 	stw	r5,8(r4)
    6550:	18c00054 	ori	r3,r3,1
    6554:	10c00115 	stw	r3,4(r2)
    6558:	9009883a 	mov	r4,r18
    655c:	00108000 	call	10800 <__malloc_unlock>
    6560:	80800204 	addi	r2,r16,8
    6564:	dfc00a17 	ldw	ra,40(sp)
    6568:	df000917 	ldw	fp,36(sp)
    656c:	ddc00817 	ldw	r23,32(sp)
    6570:	dd800717 	ldw	r22,28(sp)
    6574:	dd400617 	ldw	r21,24(sp)
    6578:	dd000517 	ldw	r20,20(sp)
    657c:	dcc00417 	ldw	r19,16(sp)
    6580:	dc800317 	ldw	r18,12(sp)
    6584:	dc400217 	ldw	r17,8(sp)
    6588:	dc000117 	ldw	r16,4(sp)
    658c:	dec00b04 	addi	sp,sp,44
    6590:	f800283a 	ret
    6594:	00800304 	movi	r2,12
    6598:	90800015 	stw	r2,0(r18)
    659c:	0005883a 	mov	r2,zero
    65a0:	003ff006 	br	6564 <__alt_data_end+0xfffe6564>
    65a4:	01002004 	movi	r4,128
    65a8:	02001004 	movi	r8,64
    65ac:	01c00fc4 	movi	r7,63
    65b0:	003f6106 	br	6338 <__alt_data_end+0xfffe6338>
    65b4:	4009883a 	mov	r4,r8
    65b8:	003f7506 	br	6390 <__alt_data_end+0xfffe6390>
    65bc:	81000317 	ldw	r4,12(r16)
    65c0:	003fde06 	br	653c <__alt_data_end+0xfffe653c>
    65c4:	81c5883a 	add	r2,r16,r7
    65c8:	11400117 	ldw	r5,4(r2)
    65cc:	9009883a 	mov	r4,r18
    65d0:	29400054 	ori	r5,r5,1
    65d4:	11400115 	stw	r5,4(r2)
    65d8:	00108000 	call	10800 <__malloc_unlock>
    65dc:	80800204 	addi	r2,r16,8
    65e0:	003fe006 	br	6564 <__alt_data_end+0xfffe6564>
    65e4:	9c000217 	ldw	r16,8(r19)
    65e8:	00bfff04 	movi	r2,-4
    65ec:	85800117 	ldw	r22,4(r16)
    65f0:	b0ac703a 	and	r22,r22,r2
    65f4:	b4400336 	bltu	r22,r17,6604 <_malloc_r+0x344>
    65f8:	b445c83a 	sub	r2,r22,r17
    65fc:	00c003c4 	movi	r3,15
    6600:	18805d16 	blt	r3,r2,6778 <_malloc_r+0x4b8>
    6604:	05c00074 	movhi	r23,1
    6608:	00800074 	movhi	r2,1
    660c:	1098ed04 	addi	r2,r2,25524
    6610:	bdd21e04 	addi	r23,r23,18552
    6614:	15400017 	ldw	r21,0(r2)
    6618:	b8c00017 	ldw	r3,0(r23)
    661c:	00bfffc4 	movi	r2,-1
    6620:	858d883a 	add	r6,r16,r22
    6624:	8d6b883a 	add	r21,r17,r21
    6628:	1880ea26 	beq	r3,r2,69d4 <_malloc_r+0x714>
    662c:	ad4403c4 	addi	r21,r21,4111
    6630:	00bc0004 	movi	r2,-4096
    6634:	a8aa703a 	and	r21,r21,r2
    6638:	a80b883a 	mov	r5,r21
    663c:	9009883a 	mov	r4,r18
    6640:	d9800015 	stw	r6,0(sp)
    6644:	00070ec0 	call	70ec <_sbrk_r>
    6648:	1029883a 	mov	r20,r2
    664c:	00bfffc4 	movi	r2,-1
    6650:	d9800017 	ldw	r6,0(sp)
    6654:	a080e826 	beq	r20,r2,69f8 <_malloc_r+0x738>
    6658:	a180a636 	bltu	r20,r6,68f4 <_malloc_r+0x634>
    665c:	07000074 	movhi	fp,1
    6660:	e718f804 	addi	fp,fp,25568
    6664:	e0800017 	ldw	r2,0(fp)
    6668:	a887883a 	add	r3,r21,r2
    666c:	e0c00015 	stw	r3,0(fp)
    6670:	3500e626 	beq	r6,r20,6a0c <_malloc_r+0x74c>
    6674:	b9000017 	ldw	r4,0(r23)
    6678:	00bfffc4 	movi	r2,-1
    667c:	2080ee26 	beq	r4,r2,6a38 <_malloc_r+0x778>
    6680:	a185c83a 	sub	r2,r20,r6
    6684:	10c5883a 	add	r2,r2,r3
    6688:	e0800015 	stw	r2,0(fp)
    668c:	a0c001cc 	andi	r3,r20,7
    6690:	1800bc26 	beq	r3,zero,6984 <_malloc_r+0x6c4>
    6694:	a0e9c83a 	sub	r20,r20,r3
    6698:	00840204 	movi	r2,4104
    669c:	a5000204 	addi	r20,r20,8
    66a0:	10c7c83a 	sub	r3,r2,r3
    66a4:	a545883a 	add	r2,r20,r21
    66a8:	1083ffcc 	andi	r2,r2,4095
    66ac:	18abc83a 	sub	r21,r3,r2
    66b0:	a80b883a 	mov	r5,r21
    66b4:	9009883a 	mov	r4,r18
    66b8:	00070ec0 	call	70ec <_sbrk_r>
    66bc:	00ffffc4 	movi	r3,-1
    66c0:	10c0e126 	beq	r2,r3,6a48 <_malloc_r+0x788>
    66c4:	1505c83a 	sub	r2,r2,r20
    66c8:	1545883a 	add	r2,r2,r21
    66cc:	10800054 	ori	r2,r2,1
    66d0:	e0c00017 	ldw	r3,0(fp)
    66d4:	9d000215 	stw	r20,8(r19)
    66d8:	a0800115 	stw	r2,4(r20)
    66dc:	a8c7883a 	add	r3,r21,r3
    66e0:	e0c00015 	stw	r3,0(fp)
    66e4:	84c00e26 	beq	r16,r19,6720 <_malloc_r+0x460>
    66e8:	018003c4 	movi	r6,15
    66ec:	3580a72e 	bgeu	r6,r22,698c <_malloc_r+0x6cc>
    66f0:	81400117 	ldw	r5,4(r16)
    66f4:	013ffe04 	movi	r4,-8
    66f8:	b0bffd04 	addi	r2,r22,-12
    66fc:	1104703a 	and	r2,r2,r4
    6700:	2900004c 	andi	r4,r5,1
    6704:	2088b03a 	or	r4,r4,r2
    6708:	81000115 	stw	r4,4(r16)
    670c:	01400144 	movi	r5,5
    6710:	8089883a 	add	r4,r16,r2
    6714:	21400115 	stw	r5,4(r4)
    6718:	21400215 	stw	r5,8(r4)
    671c:	3080cd36 	bltu	r6,r2,6a54 <_malloc_r+0x794>
    6720:	00800074 	movhi	r2,1
    6724:	1098ec04 	addi	r2,r2,25520
    6728:	11000017 	ldw	r4,0(r2)
    672c:	20c0012e 	bgeu	r4,r3,6734 <_malloc_r+0x474>
    6730:	10c00015 	stw	r3,0(r2)
    6734:	00800074 	movhi	r2,1
    6738:	1098eb04 	addi	r2,r2,25516
    673c:	11000017 	ldw	r4,0(r2)
    6740:	9c000217 	ldw	r16,8(r19)
    6744:	20c0012e 	bgeu	r4,r3,674c <_malloc_r+0x48c>
    6748:	10c00015 	stw	r3,0(r2)
    674c:	80c00117 	ldw	r3,4(r16)
    6750:	00bfff04 	movi	r2,-4
    6754:	1886703a 	and	r3,r3,r2
    6758:	1c45c83a 	sub	r2,r3,r17
    675c:	1c400236 	bltu	r3,r17,6768 <_malloc_r+0x4a8>
    6760:	00c003c4 	movi	r3,15
    6764:	18800416 	blt	r3,r2,6778 <_malloc_r+0x4b8>
    6768:	9009883a 	mov	r4,r18
    676c:	00108000 	call	10800 <__malloc_unlock>
    6770:	0005883a 	mov	r2,zero
    6774:	003f7b06 	br	6564 <__alt_data_end+0xfffe6564>
    6778:	88c00054 	ori	r3,r17,1
    677c:	80c00115 	stw	r3,4(r16)
    6780:	8463883a 	add	r17,r16,r17
    6784:	10800054 	ori	r2,r2,1
    6788:	9c400215 	stw	r17,8(r19)
    678c:	88800115 	stw	r2,4(r17)
    6790:	9009883a 	mov	r4,r18
    6794:	00108000 	call	10800 <__malloc_unlock>
    6798:	80800204 	addi	r2,r16,8
    679c:	003f7106 	br	6564 <__alt_data_end+0xfffe6564>
    67a0:	00c00504 	movi	r3,20
    67a4:	18804a2e 	bgeu	r3,r2,68d0 <_malloc_r+0x610>
    67a8:	00c01504 	movi	r3,84
    67ac:	18806e36 	bltu	r3,r2,6968 <_malloc_r+0x6a8>
    67b0:	8804d33a 	srli	r2,r17,12
    67b4:	12001bc4 	addi	r8,r2,111
    67b8:	11c01b84 	addi	r7,r2,110
    67bc:	4209883a 	add	r4,r8,r8
    67c0:	003edd06 	br	6338 <__alt_data_end+0xfffe6338>
    67c4:	3804d27a 	srli	r2,r7,9
    67c8:	00c00104 	movi	r3,4
    67cc:	1880442e 	bgeu	r3,r2,68e0 <_malloc_r+0x620>
    67d0:	00c00504 	movi	r3,20
    67d4:	18808136 	bltu	r3,r2,69dc <_malloc_r+0x71c>
    67d8:	11401704 	addi	r5,r2,92
    67dc:	10c016c4 	addi	r3,r2,91
    67e0:	294b883a 	add	r5,r5,r5
    67e4:	294b883a 	add	r5,r5,r5
    67e8:	294b883a 	add	r5,r5,r5
    67ec:	994b883a 	add	r5,r19,r5
    67f0:	28800017 	ldw	r2,0(r5)
    67f4:	01800074 	movhi	r6,1
    67f8:	297ffe04 	addi	r5,r5,-8
    67fc:	318c7704 	addi	r6,r6,12764
    6800:	28806526 	beq	r5,r2,6998 <_malloc_r+0x6d8>
    6804:	01bfff04 	movi	r6,-4
    6808:	10c00117 	ldw	r3,4(r2)
    680c:	1986703a 	and	r3,r3,r6
    6810:	38c0022e 	bgeu	r7,r3,681c <_malloc_r+0x55c>
    6814:	10800217 	ldw	r2,8(r2)
    6818:	28bffb1e 	bne	r5,r2,6808 <__alt_data_end+0xfffe6808>
    681c:	11400317 	ldw	r5,12(r2)
    6820:	98c00117 	ldw	r3,4(r19)
    6824:	81400315 	stw	r5,12(r16)
    6828:	80800215 	stw	r2,8(r16)
    682c:	2c000215 	stw	r16,8(r5)
    6830:	14000315 	stw	r16,12(r2)
    6834:	003ef806 	br	6418 <__alt_data_end+0xfffe6418>
    6838:	88c00054 	ori	r3,r17,1
    683c:	80c00115 	stw	r3,4(r16)
    6840:	8463883a 	add	r17,r16,r17
    6844:	34400515 	stw	r17,20(r6)
    6848:	34400415 	stw	r17,16(r6)
    684c:	10c00054 	ori	r3,r2,1
    6850:	8a000315 	stw	r8,12(r17)
    6854:	8a000215 	stw	r8,8(r17)
    6858:	88c00115 	stw	r3,4(r17)
    685c:	88a3883a 	add	r17,r17,r2
    6860:	88800015 	stw	r2,0(r17)
    6864:	9009883a 	mov	r4,r18
    6868:	00108000 	call	10800 <__malloc_unlock>
    686c:	80800204 	addi	r2,r16,8
    6870:	003f3c06 	br	6564 <__alt_data_end+0xfffe6564>
    6874:	30c00117 	ldw	r3,4(r6)
    6878:	003ee706 	br	6418 <__alt_data_end+0xfffe6418>
    687c:	5ac00044 	addi	r11,r11,1
    6880:	588000cc 	andi	r2,r11,3
    6884:	31800204 	addi	r6,r6,8
    6888:	103efd1e 	bne	r2,zero,6480 <__alt_data_end+0xfffe6480>
    688c:	00002406 	br	6920 <_malloc_r+0x660>
    6890:	14000317 	ldw	r16,12(r2)
    6894:	143f251e 	bne	r2,r16,652c <__alt_data_end+0xfffe652c>
    6898:	21000084 	addi	r4,r4,2
    689c:	003ebc06 	br	6390 <__alt_data_end+0xfffe6390>
    68a0:	8085883a 	add	r2,r16,r2
    68a4:	10c00117 	ldw	r3,4(r2)
    68a8:	81000317 	ldw	r4,12(r16)
    68ac:	81400217 	ldw	r5,8(r16)
    68b0:	18c00054 	ori	r3,r3,1
    68b4:	10c00115 	stw	r3,4(r2)
    68b8:	29000315 	stw	r4,12(r5)
    68bc:	21400215 	stw	r5,8(r4)
    68c0:	9009883a 	mov	r4,r18
    68c4:	00108000 	call	10800 <__malloc_unlock>
    68c8:	80800204 	addi	r2,r16,8
    68cc:	003f2506 	br	6564 <__alt_data_end+0xfffe6564>
    68d0:	12001704 	addi	r8,r2,92
    68d4:	11c016c4 	addi	r7,r2,91
    68d8:	4209883a 	add	r4,r8,r8
    68dc:	003e9606 	br	6338 <__alt_data_end+0xfffe6338>
    68e0:	3804d1ba 	srli	r2,r7,6
    68e4:	11400e44 	addi	r5,r2,57
    68e8:	10c00e04 	addi	r3,r2,56
    68ec:	294b883a 	add	r5,r5,r5
    68f0:	003fbc06 	br	67e4 <__alt_data_end+0xfffe67e4>
    68f4:	84ff5926 	beq	r16,r19,665c <__alt_data_end+0xfffe665c>
    68f8:	00800074 	movhi	r2,1
    68fc:	108c7704 	addi	r2,r2,12764
    6900:	14000217 	ldw	r16,8(r2)
    6904:	00bfff04 	movi	r2,-4
    6908:	80c00117 	ldw	r3,4(r16)
    690c:	1886703a 	and	r3,r3,r2
    6910:	003f9106 	br	6758 <__alt_data_end+0xfffe6758>
    6914:	60800217 	ldw	r2,8(r12)
    6918:	213fffc4 	addi	r4,r4,-1
    691c:	1300651e 	bne	r2,r12,6ab4 <_malloc_r+0x7f4>
    6920:	208000cc 	andi	r2,r4,3
    6924:	633ffe04 	addi	r12,r12,-8
    6928:	103ffa1e 	bne	r2,zero,6914 <__alt_data_end+0xfffe6914>
    692c:	98800117 	ldw	r2,4(r19)
    6930:	0146303a 	nor	r3,zero,r5
    6934:	1884703a 	and	r2,r3,r2
    6938:	98800115 	stw	r2,4(r19)
    693c:	294b883a 	add	r5,r5,r5
    6940:	117f2836 	bltu	r2,r5,65e4 <__alt_data_end+0xfffe65e4>
    6944:	283f2726 	beq	r5,zero,65e4 <__alt_data_end+0xfffe65e4>
    6948:	2886703a 	and	r3,r5,r2
    694c:	5809883a 	mov	r4,r11
    6950:	183ec31e 	bne	r3,zero,6460 <__alt_data_end+0xfffe6460>
    6954:	294b883a 	add	r5,r5,r5
    6958:	2886703a 	and	r3,r5,r2
    695c:	21000104 	addi	r4,r4,4
    6960:	183ffc26 	beq	r3,zero,6954 <__alt_data_end+0xfffe6954>
    6964:	003ebe06 	br	6460 <__alt_data_end+0xfffe6460>
    6968:	00c05504 	movi	r3,340
    696c:	18801236 	bltu	r3,r2,69b8 <_malloc_r+0x6f8>
    6970:	8804d3fa 	srli	r2,r17,15
    6974:	12001e04 	addi	r8,r2,120
    6978:	11c01dc4 	addi	r7,r2,119
    697c:	4209883a 	add	r4,r8,r8
    6980:	003e6d06 	br	6338 <__alt_data_end+0xfffe6338>
    6984:	00c40004 	movi	r3,4096
    6988:	003f4606 	br	66a4 <__alt_data_end+0xfffe66a4>
    698c:	00800044 	movi	r2,1
    6990:	a0800115 	stw	r2,4(r20)
    6994:	003f7406 	br	6768 <__alt_data_end+0xfffe6768>
    6998:	1805d0ba 	srai	r2,r3,2
    699c:	01c00044 	movi	r7,1
    69a0:	30c00117 	ldw	r3,4(r6)
    69a4:	388e983a 	sll	r7,r7,r2
    69a8:	2805883a 	mov	r2,r5
    69ac:	38c6b03a 	or	r3,r7,r3
    69b0:	30c00115 	stw	r3,4(r6)
    69b4:	003f9b06 	br	6824 <__alt_data_end+0xfffe6824>
    69b8:	00c15504 	movi	r3,1364
    69bc:	18801a36 	bltu	r3,r2,6a28 <_malloc_r+0x768>
    69c0:	8804d4ba 	srli	r2,r17,18
    69c4:	12001f44 	addi	r8,r2,125
    69c8:	11c01f04 	addi	r7,r2,124
    69cc:	4209883a 	add	r4,r8,r8
    69d0:	003e5906 	br	6338 <__alt_data_end+0xfffe6338>
    69d4:	ad400404 	addi	r21,r21,16
    69d8:	003f1706 	br	6638 <__alt_data_end+0xfffe6638>
    69dc:	00c01504 	movi	r3,84
    69e0:	18802336 	bltu	r3,r2,6a70 <_malloc_r+0x7b0>
    69e4:	3804d33a 	srli	r2,r7,12
    69e8:	11401bc4 	addi	r5,r2,111
    69ec:	10c01b84 	addi	r3,r2,110
    69f0:	294b883a 	add	r5,r5,r5
    69f4:	003f7b06 	br	67e4 <__alt_data_end+0xfffe67e4>
    69f8:	9c000217 	ldw	r16,8(r19)
    69fc:	00bfff04 	movi	r2,-4
    6a00:	80c00117 	ldw	r3,4(r16)
    6a04:	1886703a 	and	r3,r3,r2
    6a08:	003f5306 	br	6758 <__alt_data_end+0xfffe6758>
    6a0c:	3083ffcc 	andi	r2,r6,4095
    6a10:	103f181e 	bne	r2,zero,6674 <__alt_data_end+0xfffe6674>
    6a14:	99000217 	ldw	r4,8(r19)
    6a18:	b545883a 	add	r2,r22,r21
    6a1c:	10800054 	ori	r2,r2,1
    6a20:	20800115 	stw	r2,4(r4)
    6a24:	003f3e06 	br	6720 <__alt_data_end+0xfffe6720>
    6a28:	01003f84 	movi	r4,254
    6a2c:	02001fc4 	movi	r8,127
    6a30:	01c01f84 	movi	r7,126
    6a34:	003e4006 	br	6338 <__alt_data_end+0xfffe6338>
    6a38:	00800074 	movhi	r2,1
    6a3c:	10921e04 	addi	r2,r2,18552
    6a40:	15000015 	stw	r20,0(r2)
    6a44:	003f1106 	br	668c <__alt_data_end+0xfffe668c>
    6a48:	00800044 	movi	r2,1
    6a4c:	002b883a 	mov	r21,zero
    6a50:	003f1f06 	br	66d0 <__alt_data_end+0xfffe66d0>
    6a54:	81400204 	addi	r5,r16,8
    6a58:	9009883a 	mov	r4,r18
    6a5c:	00057900 	call	5790 <_free_r>
    6a60:	00800074 	movhi	r2,1
    6a64:	1098f804 	addi	r2,r2,25568
    6a68:	10c00017 	ldw	r3,0(r2)
    6a6c:	003f2c06 	br	6720 <__alt_data_end+0xfffe6720>
    6a70:	00c05504 	movi	r3,340
    6a74:	18800536 	bltu	r3,r2,6a8c <_malloc_r+0x7cc>
    6a78:	3804d3fa 	srli	r2,r7,15
    6a7c:	11401e04 	addi	r5,r2,120
    6a80:	10c01dc4 	addi	r3,r2,119
    6a84:	294b883a 	add	r5,r5,r5
    6a88:	003f5606 	br	67e4 <__alt_data_end+0xfffe67e4>
    6a8c:	00c15504 	movi	r3,1364
    6a90:	18800536 	bltu	r3,r2,6aa8 <_malloc_r+0x7e8>
    6a94:	3804d4ba 	srli	r2,r7,18
    6a98:	11401f44 	addi	r5,r2,125
    6a9c:	10c01f04 	addi	r3,r2,124
    6aa0:	294b883a 	add	r5,r5,r5
    6aa4:	003f4f06 	br	67e4 <__alt_data_end+0xfffe67e4>
    6aa8:	01403f84 	movi	r5,254
    6aac:	00c01f84 	movi	r3,126
    6ab0:	003f4c06 	br	67e4 <__alt_data_end+0xfffe67e4>
    6ab4:	98800117 	ldw	r2,4(r19)
    6ab8:	003fa006 	br	693c <__alt_data_end+0xfffe693c>
    6abc:	8808d0fa 	srli	r4,r17,3
    6ac0:	20800044 	addi	r2,r4,1
    6ac4:	1085883a 	add	r2,r2,r2
    6ac8:	003e9006 	br	650c <__alt_data_end+0xfffe650c>

00006acc <memcpy>:
    6acc:	defffd04 	addi	sp,sp,-12
    6ad0:	dfc00215 	stw	ra,8(sp)
    6ad4:	dc400115 	stw	r17,4(sp)
    6ad8:	dc000015 	stw	r16,0(sp)
    6adc:	00c003c4 	movi	r3,15
    6ae0:	2005883a 	mov	r2,r4
    6ae4:	1980452e 	bgeu	r3,r6,6bfc <memcpy+0x130>
    6ae8:	2906b03a 	or	r3,r5,r4
    6aec:	18c000cc 	andi	r3,r3,3
    6af0:	1800441e 	bne	r3,zero,6c04 <memcpy+0x138>
    6af4:	347ffc04 	addi	r17,r6,-16
    6af8:	8822d13a 	srli	r17,r17,4
    6afc:	28c00104 	addi	r3,r5,4
    6b00:	23400104 	addi	r13,r4,4
    6b04:	8820913a 	slli	r16,r17,4
    6b08:	2b000204 	addi	r12,r5,8
    6b0c:	22c00204 	addi	r11,r4,8
    6b10:	84000504 	addi	r16,r16,20
    6b14:	2a800304 	addi	r10,r5,12
    6b18:	22400304 	addi	r9,r4,12
    6b1c:	2c21883a 	add	r16,r5,r16
    6b20:	2811883a 	mov	r8,r5
    6b24:	200f883a 	mov	r7,r4
    6b28:	41000017 	ldw	r4,0(r8)
    6b2c:	1fc00017 	ldw	ra,0(r3)
    6b30:	63c00017 	ldw	r15,0(r12)
    6b34:	39000015 	stw	r4,0(r7)
    6b38:	53800017 	ldw	r14,0(r10)
    6b3c:	6fc00015 	stw	ra,0(r13)
    6b40:	5bc00015 	stw	r15,0(r11)
    6b44:	4b800015 	stw	r14,0(r9)
    6b48:	18c00404 	addi	r3,r3,16
    6b4c:	39c00404 	addi	r7,r7,16
    6b50:	42000404 	addi	r8,r8,16
    6b54:	6b400404 	addi	r13,r13,16
    6b58:	63000404 	addi	r12,r12,16
    6b5c:	5ac00404 	addi	r11,r11,16
    6b60:	52800404 	addi	r10,r10,16
    6b64:	4a400404 	addi	r9,r9,16
    6b68:	1c3fef1e 	bne	r3,r16,6b28 <__alt_data_end+0xfffe6b28>
    6b6c:	89c00044 	addi	r7,r17,1
    6b70:	380e913a 	slli	r7,r7,4
    6b74:	310003cc 	andi	r4,r6,15
    6b78:	02c000c4 	movi	r11,3
    6b7c:	11c7883a 	add	r3,r2,r7
    6b80:	29cb883a 	add	r5,r5,r7
    6b84:	5900212e 	bgeu	r11,r4,6c0c <memcpy+0x140>
    6b88:	1813883a 	mov	r9,r3
    6b8c:	2811883a 	mov	r8,r5
    6b90:	200f883a 	mov	r7,r4
    6b94:	42800017 	ldw	r10,0(r8)
    6b98:	4a400104 	addi	r9,r9,4
    6b9c:	39ffff04 	addi	r7,r7,-4
    6ba0:	4abfff15 	stw	r10,-4(r9)
    6ba4:	42000104 	addi	r8,r8,4
    6ba8:	59fffa36 	bltu	r11,r7,6b94 <__alt_data_end+0xfffe6b94>
    6bac:	213fff04 	addi	r4,r4,-4
    6bb0:	2008d0ba 	srli	r4,r4,2
    6bb4:	318000cc 	andi	r6,r6,3
    6bb8:	21000044 	addi	r4,r4,1
    6bbc:	2109883a 	add	r4,r4,r4
    6bc0:	2109883a 	add	r4,r4,r4
    6bc4:	1907883a 	add	r3,r3,r4
    6bc8:	290b883a 	add	r5,r5,r4
    6bcc:	30000626 	beq	r6,zero,6be8 <memcpy+0x11c>
    6bd0:	198d883a 	add	r6,r3,r6
    6bd4:	29c00003 	ldbu	r7,0(r5)
    6bd8:	18c00044 	addi	r3,r3,1
    6bdc:	29400044 	addi	r5,r5,1
    6be0:	19ffffc5 	stb	r7,-1(r3)
    6be4:	19bffb1e 	bne	r3,r6,6bd4 <__alt_data_end+0xfffe6bd4>
    6be8:	dfc00217 	ldw	ra,8(sp)
    6bec:	dc400117 	ldw	r17,4(sp)
    6bf0:	dc000017 	ldw	r16,0(sp)
    6bf4:	dec00304 	addi	sp,sp,12
    6bf8:	f800283a 	ret
    6bfc:	2007883a 	mov	r3,r4
    6c00:	003ff206 	br	6bcc <__alt_data_end+0xfffe6bcc>
    6c04:	2007883a 	mov	r3,r4
    6c08:	003ff106 	br	6bd0 <__alt_data_end+0xfffe6bd0>
    6c0c:	200d883a 	mov	r6,r4
    6c10:	003fee06 	br	6bcc <__alt_data_end+0xfffe6bcc>

00006c14 <memset>:
    6c14:	20c000cc 	andi	r3,r4,3
    6c18:	2005883a 	mov	r2,r4
    6c1c:	18004426 	beq	r3,zero,6d30 <memset+0x11c>
    6c20:	31ffffc4 	addi	r7,r6,-1
    6c24:	30004026 	beq	r6,zero,6d28 <memset+0x114>
    6c28:	2813883a 	mov	r9,r5
    6c2c:	200d883a 	mov	r6,r4
    6c30:	2007883a 	mov	r3,r4
    6c34:	00000406 	br	6c48 <memset+0x34>
    6c38:	3a3fffc4 	addi	r8,r7,-1
    6c3c:	31800044 	addi	r6,r6,1
    6c40:	38003926 	beq	r7,zero,6d28 <memset+0x114>
    6c44:	400f883a 	mov	r7,r8
    6c48:	18c00044 	addi	r3,r3,1
    6c4c:	32400005 	stb	r9,0(r6)
    6c50:	1a0000cc 	andi	r8,r3,3
    6c54:	403ff81e 	bne	r8,zero,6c38 <__alt_data_end+0xfffe6c38>
    6c58:	010000c4 	movi	r4,3
    6c5c:	21c02d2e 	bgeu	r4,r7,6d14 <memset+0x100>
    6c60:	29003fcc 	andi	r4,r5,255
    6c64:	200c923a 	slli	r6,r4,8
    6c68:	3108b03a 	or	r4,r6,r4
    6c6c:	200c943a 	slli	r6,r4,16
    6c70:	218cb03a 	or	r6,r4,r6
    6c74:	010003c4 	movi	r4,15
    6c78:	21c0182e 	bgeu	r4,r7,6cdc <memset+0xc8>
    6c7c:	3b3ffc04 	addi	r12,r7,-16
    6c80:	6018d13a 	srli	r12,r12,4
    6c84:	1a000104 	addi	r8,r3,4
    6c88:	1ac00204 	addi	r11,r3,8
    6c8c:	6008913a 	slli	r4,r12,4
    6c90:	1a800304 	addi	r10,r3,12
    6c94:	1813883a 	mov	r9,r3
    6c98:	21000504 	addi	r4,r4,20
    6c9c:	1909883a 	add	r4,r3,r4
    6ca0:	49800015 	stw	r6,0(r9)
    6ca4:	41800015 	stw	r6,0(r8)
    6ca8:	59800015 	stw	r6,0(r11)
    6cac:	51800015 	stw	r6,0(r10)
    6cb0:	42000404 	addi	r8,r8,16
    6cb4:	4a400404 	addi	r9,r9,16
    6cb8:	5ac00404 	addi	r11,r11,16
    6cbc:	52800404 	addi	r10,r10,16
    6cc0:	413ff71e 	bne	r8,r4,6ca0 <__alt_data_end+0xfffe6ca0>
    6cc4:	63000044 	addi	r12,r12,1
    6cc8:	6018913a 	slli	r12,r12,4
    6ccc:	39c003cc 	andi	r7,r7,15
    6cd0:	010000c4 	movi	r4,3
    6cd4:	1b07883a 	add	r3,r3,r12
    6cd8:	21c00e2e 	bgeu	r4,r7,6d14 <memset+0x100>
    6cdc:	1813883a 	mov	r9,r3
    6ce0:	3811883a 	mov	r8,r7
    6ce4:	010000c4 	movi	r4,3
    6ce8:	49800015 	stw	r6,0(r9)
    6cec:	423fff04 	addi	r8,r8,-4
    6cf0:	4a400104 	addi	r9,r9,4
    6cf4:	223ffc36 	bltu	r4,r8,6ce8 <__alt_data_end+0xfffe6ce8>
    6cf8:	393fff04 	addi	r4,r7,-4
    6cfc:	2008d0ba 	srli	r4,r4,2
    6d00:	39c000cc 	andi	r7,r7,3
    6d04:	21000044 	addi	r4,r4,1
    6d08:	2109883a 	add	r4,r4,r4
    6d0c:	2109883a 	add	r4,r4,r4
    6d10:	1907883a 	add	r3,r3,r4
    6d14:	38000526 	beq	r7,zero,6d2c <memset+0x118>
    6d18:	19cf883a 	add	r7,r3,r7
    6d1c:	19400005 	stb	r5,0(r3)
    6d20:	18c00044 	addi	r3,r3,1
    6d24:	38fffd1e 	bne	r7,r3,6d1c <__alt_data_end+0xfffe6d1c>
    6d28:	f800283a 	ret
    6d2c:	f800283a 	ret
    6d30:	2007883a 	mov	r3,r4
    6d34:	300f883a 	mov	r7,r6
    6d38:	003fc706 	br	6c58 <__alt_data_end+0xfffe6c58>

00006d3c <_open_r>:
    6d3c:	defffd04 	addi	sp,sp,-12
    6d40:	2805883a 	mov	r2,r5
    6d44:	dc000015 	stw	r16,0(sp)
    6d48:	04000074 	movhi	r16,1
    6d4c:	dc400115 	stw	r17,4(sp)
    6d50:	300b883a 	mov	r5,r6
    6d54:	8418ea04 	addi	r16,r16,25512
    6d58:	2023883a 	mov	r17,r4
    6d5c:	380d883a 	mov	r6,r7
    6d60:	1009883a 	mov	r4,r2
    6d64:	dfc00215 	stw	ra,8(sp)
    6d68:	80000015 	stw	zero,0(r16)
    6d6c:	001094c0 	call	1094c <open>
    6d70:	00ffffc4 	movi	r3,-1
    6d74:	10c00526 	beq	r2,r3,6d8c <_open_r+0x50>
    6d78:	dfc00217 	ldw	ra,8(sp)
    6d7c:	dc400117 	ldw	r17,4(sp)
    6d80:	dc000017 	ldw	r16,0(sp)
    6d84:	dec00304 	addi	sp,sp,12
    6d88:	f800283a 	ret
    6d8c:	80c00017 	ldw	r3,0(r16)
    6d90:	183ff926 	beq	r3,zero,6d78 <__alt_data_end+0xfffe6d78>
    6d94:	88c00015 	stw	r3,0(r17)
    6d98:	003ff706 	br	6d78 <__alt_data_end+0xfffe6d78>

00006d9c <_printf_r>:
    6d9c:	defffd04 	addi	sp,sp,-12
    6da0:	2805883a 	mov	r2,r5
    6da4:	dfc00015 	stw	ra,0(sp)
    6da8:	d9800115 	stw	r6,4(sp)
    6dac:	d9c00215 	stw	r7,8(sp)
    6db0:	21400217 	ldw	r5,8(r4)
    6db4:	d9c00104 	addi	r7,sp,4
    6db8:	100d883a 	mov	r6,r2
    6dbc:	00074280 	call	7428 <___vfprintf_internal_r>
    6dc0:	dfc00017 	ldw	ra,0(sp)
    6dc4:	dec00304 	addi	sp,sp,12
    6dc8:	f800283a 	ret

00006dcc <printf>:
    6dcc:	defffc04 	addi	sp,sp,-16
    6dd0:	dfc00015 	stw	ra,0(sp)
    6dd4:	d9400115 	stw	r5,4(sp)
    6dd8:	d9800215 	stw	r6,8(sp)
    6ddc:	d9c00315 	stw	r7,12(sp)
    6de0:	00800074 	movhi	r2,1
    6de4:	10921d04 	addi	r2,r2,18548
    6de8:	10800017 	ldw	r2,0(r2)
    6dec:	200b883a 	mov	r5,r4
    6df0:	d9800104 	addi	r6,sp,4
    6df4:	11000217 	ldw	r4,8(r2)
    6df8:	00097040 	call	9704 <__vfprintf_internal>
    6dfc:	dfc00017 	ldw	ra,0(sp)
    6e00:	dec00404 	addi	sp,sp,16
    6e04:	f800283a 	ret

00006e08 <_putchar_r>:
    6e08:	21800217 	ldw	r6,8(r4)
    6e0c:	000ce101 	jmpi	ce10 <_putc_r>

00006e10 <putchar>:
    6e10:	00800074 	movhi	r2,1
    6e14:	10921d04 	addi	r2,r2,18548
    6e18:	200b883a 	mov	r5,r4
    6e1c:	11000017 	ldw	r4,0(r2)
    6e20:	21800217 	ldw	r6,8(r4)
    6e24:	000ce101 	jmpi	ce10 <_putc_r>

00006e28 <_puts_r>:
    6e28:	defff604 	addi	sp,sp,-40
    6e2c:	dc000715 	stw	r16,28(sp)
    6e30:	2021883a 	mov	r16,r4
    6e34:	2809883a 	mov	r4,r5
    6e38:	dc400815 	stw	r17,32(sp)
    6e3c:	dfc00915 	stw	ra,36(sp)
    6e40:	2823883a 	mov	r17,r5
    6e44:	00073900 	call	7390 <strlen>
    6e48:	10c00044 	addi	r3,r2,1
    6e4c:	d8800115 	stw	r2,4(sp)
    6e50:	00800074 	movhi	r2,1
    6e54:	108aef04 	addi	r2,r2,11196
    6e58:	d8800215 	stw	r2,8(sp)
    6e5c:	00800044 	movi	r2,1
    6e60:	d8800315 	stw	r2,12(sp)
    6e64:	00800084 	movi	r2,2
    6e68:	dc400015 	stw	r17,0(sp)
    6e6c:	d8c00615 	stw	r3,24(sp)
    6e70:	dec00415 	stw	sp,16(sp)
    6e74:	d8800515 	stw	r2,20(sp)
    6e78:	80000226 	beq	r16,zero,6e84 <_puts_r+0x5c>
    6e7c:	80800e17 	ldw	r2,56(r16)
    6e80:	10001426 	beq	r2,zero,6ed4 <_puts_r+0xac>
    6e84:	81400217 	ldw	r5,8(r16)
    6e88:	2880030b 	ldhu	r2,12(r5)
    6e8c:	10c8000c 	andi	r3,r2,8192
    6e90:	1800061e 	bne	r3,zero,6eac <_puts_r+0x84>
    6e94:	29001917 	ldw	r4,100(r5)
    6e98:	00f7ffc4 	movi	r3,-8193
    6e9c:	10880014 	ori	r2,r2,8192
    6ea0:	20c6703a 	and	r3,r4,r3
    6ea4:	2880030d 	sth	r2,12(r5)
    6ea8:	28c01915 	stw	r3,100(r5)
    6eac:	d9800404 	addi	r6,sp,16
    6eb0:	8009883a 	mov	r4,r16
    6eb4:	000b4c00 	call	b4c0 <__sfvwrite_r>
    6eb8:	1000091e 	bne	r2,zero,6ee0 <_puts_r+0xb8>
    6ebc:	00800284 	movi	r2,10
    6ec0:	dfc00917 	ldw	ra,36(sp)
    6ec4:	dc400817 	ldw	r17,32(sp)
    6ec8:	dc000717 	ldw	r16,28(sp)
    6ecc:	dec00a04 	addi	sp,sp,40
    6ed0:	f800283a 	ret
    6ed4:	8009883a 	mov	r4,r16
    6ed8:	00052a00 	call	52a0 <__sinit>
    6edc:	003fe906 	br	6e84 <__alt_data_end+0xfffe6e84>
    6ee0:	00bfffc4 	movi	r2,-1
    6ee4:	003ff606 	br	6ec0 <__alt_data_end+0xfffe6ec0>

00006ee8 <puts>:
    6ee8:	00800074 	movhi	r2,1
    6eec:	10921d04 	addi	r2,r2,18548
    6ef0:	200b883a 	mov	r5,r4
    6ef4:	11000017 	ldw	r4,0(r2)
    6ef8:	0006e281 	jmpi	6e28 <_puts_r>

00006efc <lflush>:
    6efc:	2080030b 	ldhu	r2,12(r4)
    6f00:	00c00244 	movi	r3,9
    6f04:	1080024c 	andi	r2,r2,9
    6f08:	10c00226 	beq	r2,r3,6f14 <lflush+0x18>
    6f0c:	0005883a 	mov	r2,zero
    6f10:	f800283a 	ret
    6f14:	0004f101 	jmpi	4f10 <fflush>

00006f18 <__srefill_r>:
    6f18:	defffc04 	addi	sp,sp,-16
    6f1c:	dc400115 	stw	r17,4(sp)
    6f20:	dc000015 	stw	r16,0(sp)
    6f24:	dfc00315 	stw	ra,12(sp)
    6f28:	dc800215 	stw	r18,8(sp)
    6f2c:	2023883a 	mov	r17,r4
    6f30:	2821883a 	mov	r16,r5
    6f34:	20000226 	beq	r4,zero,6f40 <__srefill_r+0x28>
    6f38:	20800e17 	ldw	r2,56(r4)
    6f3c:	10003c26 	beq	r2,zero,7030 <__srefill_r+0x118>
    6f40:	80c0030b 	ldhu	r3,12(r16)
    6f44:	1908000c 	andi	r4,r3,8192
    6f48:	1805883a 	mov	r2,r3
    6f4c:	2000071e 	bne	r4,zero,6f6c <__srefill_r+0x54>
    6f50:	81001917 	ldw	r4,100(r16)
    6f54:	18880014 	ori	r2,r3,8192
    6f58:	00f7ffc4 	movi	r3,-8193
    6f5c:	20c8703a 	and	r4,r4,r3
    6f60:	8080030d 	sth	r2,12(r16)
    6f64:	1007883a 	mov	r3,r2
    6f68:	81001915 	stw	r4,100(r16)
    6f6c:	80000115 	stw	zero,4(r16)
    6f70:	1100080c 	andi	r4,r2,32
    6f74:	2000571e 	bne	r4,zero,70d4 <__srefill_r+0x1bc>
    6f78:	1100010c 	andi	r4,r2,4
    6f7c:	20001f26 	beq	r4,zero,6ffc <__srefill_r+0xe4>
    6f80:	81400c17 	ldw	r5,48(r16)
    6f84:	28000826 	beq	r5,zero,6fa8 <__srefill_r+0x90>
    6f88:	80801004 	addi	r2,r16,64
    6f8c:	28800226 	beq	r5,r2,6f98 <__srefill_r+0x80>
    6f90:	8809883a 	mov	r4,r17
    6f94:	00057900 	call	5790 <_free_r>
    6f98:	80800f17 	ldw	r2,60(r16)
    6f9c:	80000c15 	stw	zero,48(r16)
    6fa0:	80800115 	stw	r2,4(r16)
    6fa4:	1000391e 	bne	r2,zero,708c <__srefill_r+0x174>
    6fa8:	80800417 	ldw	r2,16(r16)
    6fac:	10004b26 	beq	r2,zero,70dc <__srefill_r+0x1c4>
    6fb0:	8480030b 	ldhu	r18,12(r16)
    6fb4:	908000cc 	andi	r2,r18,3
    6fb8:	10001f1e 	bne	r2,zero,7038 <__srefill_r+0x120>
    6fbc:	81800417 	ldw	r6,16(r16)
    6fc0:	80800817 	ldw	r2,32(r16)
    6fc4:	81c00517 	ldw	r7,20(r16)
    6fc8:	81400717 	ldw	r5,28(r16)
    6fcc:	81800015 	stw	r6,0(r16)
    6fd0:	8809883a 	mov	r4,r17
    6fd4:	103ee83a 	callr	r2
    6fd8:	80800115 	stw	r2,4(r16)
    6fdc:	00800e0e 	bge	zero,r2,7018 <__srefill_r+0x100>
    6fe0:	0005883a 	mov	r2,zero
    6fe4:	dfc00317 	ldw	ra,12(sp)
    6fe8:	dc800217 	ldw	r18,8(sp)
    6fec:	dc400117 	ldw	r17,4(sp)
    6ff0:	dc000017 	ldw	r16,0(sp)
    6ff4:	dec00404 	addi	sp,sp,16
    6ff8:	f800283a 	ret
    6ffc:	1100040c 	andi	r4,r2,16
    7000:	20003026 	beq	r4,zero,70c4 <__srefill_r+0x1ac>
    7004:	1080020c 	andi	r2,r2,8
    7008:	1000241e 	bne	r2,zero,709c <__srefill_r+0x184>
    700c:	18c00114 	ori	r3,r3,4
    7010:	80c0030d 	sth	r3,12(r16)
    7014:	003fe406 	br	6fa8 <__alt_data_end+0xfffe6fa8>
    7018:	80c0030b 	ldhu	r3,12(r16)
    701c:	1000161e 	bne	r2,zero,7078 <__srefill_r+0x160>
    7020:	18c00814 	ori	r3,r3,32
    7024:	00bfffc4 	movi	r2,-1
    7028:	80c0030d 	sth	r3,12(r16)
    702c:	003fed06 	br	6fe4 <__alt_data_end+0xfffe6fe4>
    7030:	00052a00 	call	52a0 <__sinit>
    7034:	003fc206 	br	6f40 <__alt_data_end+0xfffe6f40>
    7038:	00800074 	movhi	r2,1
    703c:	10921c04 	addi	r2,r2,18544
    7040:	11000017 	ldw	r4,0(r2)
    7044:	01400034 	movhi	r5,0
    7048:	00800044 	movi	r2,1
    704c:	295bbf04 	addi	r5,r5,28412
    7050:	8080030d 	sth	r2,12(r16)
    7054:	0005f7c0 	call	5f7c <_fwalk>
    7058:	00800244 	movi	r2,9
    705c:	8480030d 	sth	r18,12(r16)
    7060:	9480024c 	andi	r18,r18,9
    7064:	90bfd51e 	bne	r18,r2,6fbc <__alt_data_end+0xfffe6fbc>
    7068:	800b883a 	mov	r5,r16
    706c:	8809883a 	mov	r4,r17
    7070:	0004c980 	call	4c98 <__sflush_r>
    7074:	003fd106 	br	6fbc <__alt_data_end+0xfffe6fbc>
    7078:	18c01014 	ori	r3,r3,64
    707c:	80000115 	stw	zero,4(r16)
    7080:	00bfffc4 	movi	r2,-1
    7084:	80c0030d 	sth	r3,12(r16)
    7088:	003fd606 	br	6fe4 <__alt_data_end+0xfffe6fe4>
    708c:	80c00e17 	ldw	r3,56(r16)
    7090:	0005883a 	mov	r2,zero
    7094:	80c00015 	stw	r3,0(r16)
    7098:	003fd206 	br	6fe4 <__alt_data_end+0xfffe6fe4>
    709c:	800b883a 	mov	r5,r16
    70a0:	8809883a 	mov	r4,r17
    70a4:	0004eb40 	call	4eb4 <_fflush_r>
    70a8:	10000a1e 	bne	r2,zero,70d4 <__srefill_r+0x1bc>
    70ac:	8080030b 	ldhu	r2,12(r16)
    70b0:	00fffdc4 	movi	r3,-9
    70b4:	80000215 	stw	zero,8(r16)
    70b8:	1886703a 	and	r3,r3,r2
    70bc:	80000615 	stw	zero,24(r16)
    70c0:	003fd206 	br	700c <__alt_data_end+0xfffe700c>
    70c4:	00800244 	movi	r2,9
    70c8:	88800015 	stw	r2,0(r17)
    70cc:	18c01014 	ori	r3,r3,64
    70d0:	80c0030d 	sth	r3,12(r16)
    70d4:	00bfffc4 	movi	r2,-1
    70d8:	003fc206 	br	6fe4 <__alt_data_end+0xfffe6fe4>
    70dc:	800b883a 	mov	r5,r16
    70e0:	8809883a 	mov	r4,r17
    70e4:	00061040 	call	6104 <__smakebuf_r>
    70e8:	003fb106 	br	6fb0 <__alt_data_end+0xfffe6fb0>

000070ec <_sbrk_r>:
    70ec:	defffd04 	addi	sp,sp,-12
    70f0:	dc000015 	stw	r16,0(sp)
    70f4:	04000074 	movhi	r16,1
    70f8:	dc400115 	stw	r17,4(sp)
    70fc:	8418ea04 	addi	r16,r16,25512
    7100:	2023883a 	mov	r17,r4
    7104:	2809883a 	mov	r4,r5
    7108:	dfc00215 	stw	ra,8(sp)
    710c:	80000015 	stw	zero,0(r16)
    7110:	0010c6c0 	call	10c6c <sbrk>
    7114:	00ffffc4 	movi	r3,-1
    7118:	10c00526 	beq	r2,r3,7130 <_sbrk_r+0x44>
    711c:	dfc00217 	ldw	ra,8(sp)
    7120:	dc400117 	ldw	r17,4(sp)
    7124:	dc000017 	ldw	r16,0(sp)
    7128:	dec00304 	addi	sp,sp,12
    712c:	f800283a 	ret
    7130:	80c00017 	ldw	r3,0(r16)
    7134:	183ff926 	beq	r3,zero,711c <__alt_data_end+0xfffe711c>
    7138:	88c00015 	stw	r3,0(r17)
    713c:	003ff706 	br	711c <__alt_data_end+0xfffe711c>

00007140 <__sread>:
    7140:	defffe04 	addi	sp,sp,-8
    7144:	dc000015 	stw	r16,0(sp)
    7148:	2821883a 	mov	r16,r5
    714c:	2940038f 	ldh	r5,14(r5)
    7150:	dfc00115 	stw	ra,4(sp)
    7154:	000cf780 	call	cf78 <_read_r>
    7158:	10000716 	blt	r2,zero,7178 <__sread+0x38>
    715c:	80c01417 	ldw	r3,80(r16)
    7160:	1887883a 	add	r3,r3,r2
    7164:	80c01415 	stw	r3,80(r16)
    7168:	dfc00117 	ldw	ra,4(sp)
    716c:	dc000017 	ldw	r16,0(sp)
    7170:	dec00204 	addi	sp,sp,8
    7174:	f800283a 	ret
    7178:	80c0030b 	ldhu	r3,12(r16)
    717c:	18fbffcc 	andi	r3,r3,61439
    7180:	80c0030d 	sth	r3,12(r16)
    7184:	dfc00117 	ldw	ra,4(sp)
    7188:	dc000017 	ldw	r16,0(sp)
    718c:	dec00204 	addi	sp,sp,8
    7190:	f800283a 	ret

00007194 <__seofread>:
    7194:	0005883a 	mov	r2,zero
    7198:	f800283a 	ret

0000719c <__swrite>:
    719c:	2880030b 	ldhu	r2,12(r5)
    71a0:	defffb04 	addi	sp,sp,-20
    71a4:	dcc00315 	stw	r19,12(sp)
    71a8:	dc800215 	stw	r18,8(sp)
    71ac:	dc400115 	stw	r17,4(sp)
    71b0:	dc000015 	stw	r16,0(sp)
    71b4:	dfc00415 	stw	ra,16(sp)
    71b8:	10c0400c 	andi	r3,r2,256
    71bc:	2821883a 	mov	r16,r5
    71c0:	2023883a 	mov	r17,r4
    71c4:	3025883a 	mov	r18,r6
    71c8:	3827883a 	mov	r19,r7
    71cc:	18000526 	beq	r3,zero,71e4 <__swrite+0x48>
    71d0:	2940038f 	ldh	r5,14(r5)
    71d4:	01c00084 	movi	r7,2
    71d8:	000d883a 	mov	r6,zero
    71dc:	000bab80 	call	bab8 <_lseek_r>
    71e0:	8080030b 	ldhu	r2,12(r16)
    71e4:	8140038f 	ldh	r5,14(r16)
    71e8:	10bbffcc 	andi	r2,r2,61439
    71ec:	980f883a 	mov	r7,r19
    71f0:	900d883a 	mov	r6,r18
    71f4:	8809883a 	mov	r4,r17
    71f8:	8080030d 	sth	r2,12(r16)
    71fc:	dfc00417 	ldw	ra,16(sp)
    7200:	dcc00317 	ldw	r19,12(sp)
    7204:	dc800217 	ldw	r18,8(sp)
    7208:	dc400117 	ldw	r17,4(sp)
    720c:	dc000017 	ldw	r16,0(sp)
    7210:	dec00504 	addi	sp,sp,20
    7214:	00097dc1 	jmpi	97dc <_write_r>

00007218 <__sseek>:
    7218:	defffe04 	addi	sp,sp,-8
    721c:	dc000015 	stw	r16,0(sp)
    7220:	2821883a 	mov	r16,r5
    7224:	2940038f 	ldh	r5,14(r5)
    7228:	dfc00115 	stw	ra,4(sp)
    722c:	000bab80 	call	bab8 <_lseek_r>
    7230:	00ffffc4 	movi	r3,-1
    7234:	10c00826 	beq	r2,r3,7258 <__sseek+0x40>
    7238:	80c0030b 	ldhu	r3,12(r16)
    723c:	80801415 	stw	r2,80(r16)
    7240:	18c40014 	ori	r3,r3,4096
    7244:	80c0030d 	sth	r3,12(r16)
    7248:	dfc00117 	ldw	ra,4(sp)
    724c:	dc000017 	ldw	r16,0(sp)
    7250:	dec00204 	addi	sp,sp,8
    7254:	f800283a 	ret
    7258:	80c0030b 	ldhu	r3,12(r16)
    725c:	18fbffcc 	andi	r3,r3,61439
    7260:	80c0030d 	sth	r3,12(r16)
    7264:	dfc00117 	ldw	ra,4(sp)
    7268:	dc000017 	ldw	r16,0(sp)
    726c:	dec00204 	addi	sp,sp,8
    7270:	f800283a 	ret

00007274 <__sclose>:
    7274:	2940038f 	ldh	r5,14(r5)
    7278:	00099901 	jmpi	9990 <_close_r>

0000727c <strcat>:
    727c:	defffe04 	addi	sp,sp,-8
    7280:	dc000015 	stw	r16,0(sp)
    7284:	dfc00115 	stw	ra,4(sp)
    7288:	208000cc 	andi	r2,r4,3
    728c:	2021883a 	mov	r16,r4
    7290:	1000131e 	bne	r2,zero,72e0 <strcat+0x64>
    7294:	20800017 	ldw	r2,0(r4)
    7298:	01ffbff4 	movhi	r7,65279
    729c:	39ffbfc4 	addi	r7,r7,-257
    72a0:	0086303a 	nor	r3,zero,r2
    72a4:	01a02074 	movhi	r6,32897
    72a8:	11c5883a 	add	r2,r2,r7
    72ac:	31a02004 	addi	r6,r6,-32640
    72b0:	10c4703a 	and	r2,r2,r3
    72b4:	1184703a 	and	r2,r2,r6
    72b8:	1000091e 	bne	r2,zero,72e0 <strcat+0x64>
    72bc:	21000104 	addi	r4,r4,4
    72c0:	20800017 	ldw	r2,0(r4)
    72c4:	11c7883a 	add	r3,r2,r7
    72c8:	0084303a 	nor	r2,zero,r2
    72cc:	1884703a 	and	r2,r3,r2
    72d0:	1184703a 	and	r2,r2,r6
    72d4:	103ff926 	beq	r2,zero,72bc <__alt_data_end+0xfffe72bc>
    72d8:	00000106 	br	72e0 <strcat+0x64>
    72dc:	21000044 	addi	r4,r4,1
    72e0:	20800007 	ldb	r2,0(r4)
    72e4:	103ffd1e 	bne	r2,zero,72dc <__alt_data_end+0xfffe72dc>
    72e8:	00073000 	call	7300 <strcpy>
    72ec:	8005883a 	mov	r2,r16
    72f0:	dfc00117 	ldw	ra,4(sp)
    72f4:	dc000017 	ldw	r16,0(sp)
    72f8:	dec00204 	addi	sp,sp,8
    72fc:	f800283a 	ret

00007300 <strcpy>:
    7300:	2906b03a 	or	r3,r5,r4
    7304:	18c000cc 	andi	r3,r3,3
    7308:	2005883a 	mov	r2,r4
    730c:	1800161e 	bne	r3,zero,7368 <strcpy+0x68>
    7310:	29c00017 	ldw	r7,0(r5)
    7314:	02ffbff4 	movhi	r11,65279
    7318:	5affbfc4 	addi	r11,r11,-257
    731c:	02a02074 	movhi	r10,32897
    7320:	01c6303a 	nor	r3,zero,r7
    7324:	3ac9883a 	add	r4,r7,r11
    7328:	52a02004 	addi	r10,r10,-32640
    732c:	20c6703a 	and	r3,r4,r3
    7330:	1a86703a 	and	r3,r3,r10
    7334:	18000c1e 	bne	r3,zero,7368 <strcpy+0x68>
    7338:	1011883a 	mov	r8,r2
    733c:	41c00015 	stw	r7,0(r8)
    7340:	29400104 	addi	r5,r5,4
    7344:	29c00017 	ldw	r7,0(r5)
    7348:	41800104 	addi	r6,r8,4
    734c:	3011883a 	mov	r8,r6
    7350:	3ad3883a 	add	r9,r7,r11
    7354:	01c6303a 	nor	r3,zero,r7
    7358:	48c6703a 	and	r3,r9,r3
    735c:	1a86703a 	and	r3,r3,r10
    7360:	183ff626 	beq	r3,zero,733c <__alt_data_end+0xfffe733c>
    7364:	00000106 	br	736c <strcpy+0x6c>
    7368:	100d883a 	mov	r6,r2
    736c:	28c00003 	ldbu	r3,0(r5)
    7370:	31800044 	addi	r6,r6,1
    7374:	29400044 	addi	r5,r5,1
    7378:	30ffffc5 	stb	r3,-1(r6)
    737c:	18c03fcc 	andi	r3,r3,255
    7380:	18c0201c 	xori	r3,r3,128
    7384:	18ffe004 	addi	r3,r3,-128
    7388:	183ff81e 	bne	r3,zero,736c <__alt_data_end+0xfffe736c>
    738c:	f800283a 	ret

00007390 <strlen>:
    7390:	208000cc 	andi	r2,r4,3
    7394:	10002026 	beq	r2,zero,7418 <strlen+0x88>
    7398:	20800007 	ldb	r2,0(r4)
    739c:	10002026 	beq	r2,zero,7420 <strlen+0x90>
    73a0:	2005883a 	mov	r2,r4
    73a4:	00000206 	br	73b0 <strlen+0x20>
    73a8:	10c00007 	ldb	r3,0(r2)
    73ac:	18001826 	beq	r3,zero,7410 <strlen+0x80>
    73b0:	10800044 	addi	r2,r2,1
    73b4:	10c000cc 	andi	r3,r2,3
    73b8:	183ffb1e 	bne	r3,zero,73a8 <__alt_data_end+0xfffe73a8>
    73bc:	10c00017 	ldw	r3,0(r2)
    73c0:	01ffbff4 	movhi	r7,65279
    73c4:	39ffbfc4 	addi	r7,r7,-257
    73c8:	00ca303a 	nor	r5,zero,r3
    73cc:	01a02074 	movhi	r6,32897
    73d0:	19c7883a 	add	r3,r3,r7
    73d4:	31a02004 	addi	r6,r6,-32640
    73d8:	1946703a 	and	r3,r3,r5
    73dc:	1986703a 	and	r3,r3,r6
    73e0:	1800091e 	bne	r3,zero,7408 <strlen+0x78>
    73e4:	10800104 	addi	r2,r2,4
    73e8:	10c00017 	ldw	r3,0(r2)
    73ec:	19cb883a 	add	r5,r3,r7
    73f0:	00c6303a 	nor	r3,zero,r3
    73f4:	28c6703a 	and	r3,r5,r3
    73f8:	1986703a 	and	r3,r3,r6
    73fc:	183ff926 	beq	r3,zero,73e4 <__alt_data_end+0xfffe73e4>
    7400:	00000106 	br	7408 <strlen+0x78>
    7404:	10800044 	addi	r2,r2,1
    7408:	10c00007 	ldb	r3,0(r2)
    740c:	183ffd1e 	bne	r3,zero,7404 <__alt_data_end+0xfffe7404>
    7410:	1105c83a 	sub	r2,r2,r4
    7414:	f800283a 	ret
    7418:	2005883a 	mov	r2,r4
    741c:	003fe706 	br	73bc <__alt_data_end+0xfffe73bc>
    7420:	0005883a 	mov	r2,zero
    7424:	f800283a 	ret

00007428 <___vfprintf_internal_r>:
    7428:	deffb804 	addi	sp,sp,-288
    742c:	dfc04715 	stw	ra,284(sp)
    7430:	ddc04515 	stw	r23,276(sp)
    7434:	dd404315 	stw	r21,268(sp)
    7438:	d9002d15 	stw	r4,180(sp)
    743c:	282f883a 	mov	r23,r5
    7440:	302b883a 	mov	r21,r6
    7444:	d9c02e15 	stw	r7,184(sp)
    7448:	df004615 	stw	fp,280(sp)
    744c:	dd804415 	stw	r22,272(sp)
    7450:	dd004215 	stw	r20,264(sp)
    7454:	dcc04115 	stw	r19,260(sp)
    7458:	dc804015 	stw	r18,256(sp)
    745c:	dc403f15 	stw	r17,252(sp)
    7460:	dc003e15 	stw	r16,248(sp)
    7464:	000ba880 	call	ba88 <_localeconv_r>
    7468:	10800017 	ldw	r2,0(r2)
    746c:	1009883a 	mov	r4,r2
    7470:	d8803415 	stw	r2,208(sp)
    7474:	00073900 	call	7390 <strlen>
    7478:	d8803715 	stw	r2,220(sp)
    747c:	d8802d17 	ldw	r2,180(sp)
    7480:	10000226 	beq	r2,zero,748c <___vfprintf_internal_r+0x64>
    7484:	10800e17 	ldw	r2,56(r2)
    7488:	1000fb26 	beq	r2,zero,7878 <___vfprintf_internal_r+0x450>
    748c:	b880030b 	ldhu	r2,12(r23)
    7490:	10c8000c 	andi	r3,r2,8192
    7494:	1800061e 	bne	r3,zero,74b0 <___vfprintf_internal_r+0x88>
    7498:	b9001917 	ldw	r4,100(r23)
    749c:	00f7ffc4 	movi	r3,-8193
    74a0:	10880014 	ori	r2,r2,8192
    74a4:	20c6703a 	and	r3,r4,r3
    74a8:	b880030d 	sth	r2,12(r23)
    74ac:	b8c01915 	stw	r3,100(r23)
    74b0:	10c0020c 	andi	r3,r2,8
    74b4:	1800c326 	beq	r3,zero,77c4 <___vfprintf_internal_r+0x39c>
    74b8:	b8c00417 	ldw	r3,16(r23)
    74bc:	1800c126 	beq	r3,zero,77c4 <___vfprintf_internal_r+0x39c>
    74c0:	1080068c 	andi	r2,r2,26
    74c4:	00c00284 	movi	r3,10
    74c8:	10c0c626 	beq	r2,r3,77e4 <___vfprintf_internal_r+0x3bc>
    74cc:	d8c00404 	addi	r3,sp,16
    74d0:	05000074 	movhi	r20,1
    74d4:	d9001e04 	addi	r4,sp,120
    74d8:	a50b0084 	addi	r20,r20,11266
    74dc:	d8c01e15 	stw	r3,120(sp)
    74e0:	d8002015 	stw	zero,128(sp)
    74e4:	d8001f15 	stw	zero,124(sp)
    74e8:	d8003315 	stw	zero,204(sp)
    74ec:	d8003615 	stw	zero,216(sp)
    74f0:	d8003815 	stw	zero,224(sp)
    74f4:	1811883a 	mov	r8,r3
    74f8:	d8003915 	stw	zero,228(sp)
    74fc:	d8003a15 	stw	zero,232(sp)
    7500:	d8002f15 	stw	zero,188(sp)
    7504:	d9002815 	stw	r4,160(sp)
    7508:	a8800007 	ldb	r2,0(r21)
    750c:	10028b26 	beq	r2,zero,7f3c <___vfprintf_internal_r+0xb14>
    7510:	00c00944 	movi	r3,37
    7514:	a823883a 	mov	r17,r21
    7518:	10c0021e 	bne	r2,r3,7524 <___vfprintf_internal_r+0xfc>
    751c:	00001406 	br	7570 <___vfprintf_internal_r+0x148>
    7520:	10c00326 	beq	r2,r3,7530 <___vfprintf_internal_r+0x108>
    7524:	8c400044 	addi	r17,r17,1
    7528:	88800007 	ldb	r2,0(r17)
    752c:	103ffc1e 	bne	r2,zero,7520 <__alt_data_end+0xfffe7520>
    7530:	8d61c83a 	sub	r16,r17,r21
    7534:	80000e26 	beq	r16,zero,7570 <___vfprintf_internal_r+0x148>
    7538:	d8c02017 	ldw	r3,128(sp)
    753c:	d8801f17 	ldw	r2,124(sp)
    7540:	45400015 	stw	r21,0(r8)
    7544:	1c07883a 	add	r3,r3,r16
    7548:	10800044 	addi	r2,r2,1
    754c:	d8c02015 	stw	r3,128(sp)
    7550:	44000115 	stw	r16,4(r8)
    7554:	d8801f15 	stw	r2,124(sp)
    7558:	00c001c4 	movi	r3,7
    755c:	1880a916 	blt	r3,r2,7804 <___vfprintf_internal_r+0x3dc>
    7560:	42000204 	addi	r8,r8,8
    7564:	d9402f17 	ldw	r5,188(sp)
    7568:	2c0b883a 	add	r5,r5,r16
    756c:	d9402f15 	stw	r5,188(sp)
    7570:	88800007 	ldb	r2,0(r17)
    7574:	1000aa26 	beq	r2,zero,7820 <___vfprintf_internal_r+0x3f8>
    7578:	8d400044 	addi	r21,r17,1
    757c:	8c400047 	ldb	r17,1(r17)
    7580:	0021883a 	mov	r16,zero
    7584:	00bfffc4 	movi	r2,-1
    7588:	0025883a 	mov	r18,zero
    758c:	dc002905 	stb	r16,164(sp)
    7590:	d8002785 	stb	zero,158(sp)
    7594:	d8002b05 	stb	zero,172(sp)
    7598:	d8802a15 	stw	r2,168(sp)
    759c:	d8003115 	stw	zero,196(sp)
    75a0:	04c01604 	movi	r19,88
    75a4:	05800244 	movi	r22,9
    75a8:	9021883a 	mov	r16,r18
    75ac:	4039883a 	mov	fp,r8
    75b0:	ad400044 	addi	r21,r21,1
    75b4:	88bff804 	addi	r2,r17,-32
    75b8:	98833236 	bltu	r19,r2,8284 <___vfprintf_internal_r+0xe5c>
    75bc:	100490ba 	slli	r2,r2,2
    75c0:	00c00034 	movhi	r3,0
    75c4:	18dd7504 	addi	r3,r3,30164
    75c8:	10c5883a 	add	r2,r2,r3
    75cc:	10800017 	ldw	r2,0(r2)
    75d0:	1000683a 	jmp	r2
    75d4:	0000817c 	xorhi	zero,zero,517
    75d8:	00008284 	movi	zero,522
    75dc:	00008284 	movi	zero,522
    75e0:	0000819c 	xori	zero,zero,518
    75e4:	00008284 	movi	zero,522
    75e8:	00008284 	movi	zero,522
    75ec:	00008284 	movi	zero,522
    75f0:	00008284 	movi	zero,522
    75f4:	00008284 	movi	zero,522
    75f8:	00008284 	movi	zero,522
    75fc:	00007884 	movi	zero,482
    7600:	0000808c 	andi	zero,zero,514
    7604:	00008284 	movi	zero,522
    7608:	00007748 	cmpgei	zero,zero,477
    760c:	000078a8 	cmpgeui	zero,zero,482
    7610:	00008284 	movi	zero,522
    7614:	000078f8 	rdprs	zero,zero,483
    7618:	00007904 	movi	zero,484
    761c:	00007904 	movi	zero,484
    7620:	00007904 	movi	zero,484
    7624:	00007904 	movi	zero,484
    7628:	00007904 	movi	zero,484
    762c:	00007904 	movi	zero,484
    7630:	00007904 	movi	zero,484
    7634:	00007904 	movi	zero,484
    7638:	00007904 	movi	zero,484
    763c:	00008284 	movi	zero,522
    7640:	00008284 	movi	zero,522
    7644:	00008284 	movi	zero,522
    7648:	00008284 	movi	zero,522
    764c:	00008284 	movi	zero,522
    7650:	00008284 	movi	zero,522
    7654:	00008284 	movi	zero,522
    7658:	00008284 	movi	zero,522
    765c:	00008284 	movi	zero,522
    7660:	00008284 	movi	zero,522
    7664:	00007940 	call	794 <getCellError+0x74>
    7668:	00007a08 	cmpgei	zero,zero,488
    766c:	00008284 	movi	zero,522
    7670:	00007a08 	cmpgei	zero,zero,488
    7674:	00008284 	movi	zero,522
    7678:	00008284 	movi	zero,522
    767c:	00008284 	movi	zero,522
    7680:	00008284 	movi	zero,522
    7684:	00007ab4 	movhi	zero,490
    7688:	00008284 	movi	zero,522
    768c:	00008284 	movi	zero,522
    7690:	00007ac0 	call	7ac <updateCellWeights+0x8>
    7694:	00008284 	movi	zero,522
    7698:	00008284 	movi	zero,522
    769c:	00008284 	movi	zero,522
    76a0:	00008284 	movi	zero,522
    76a4:	00008284 	movi	zero,522
    76a8:	00007f44 	movi	zero,509
    76ac:	00008284 	movi	zero,522
    76b0:	00008284 	movi	zero,522
    76b4:	00007fb0 	cmpltui	zero,zero,510
    76b8:	00008284 	movi	zero,522
    76bc:	00008284 	movi	zero,522
    76c0:	00008284 	movi	zero,522
    76c4:	00008284 	movi	zero,522
    76c8:	00008284 	movi	zero,522
    76cc:	00008284 	movi	zero,522
    76d0:	00008284 	movi	zero,522
    76d4:	00008284 	movi	zero,522
    76d8:	00008284 	movi	zero,522
    76dc:	00008284 	movi	zero,522
    76e0:	00008228 	cmpgeui	zero,zero,520
    76e4:	000081a8 	cmpgeui	zero,zero,518
    76e8:	00007a08 	cmpgei	zero,zero,488
    76ec:	00007a08 	cmpgei	zero,zero,488
    76f0:	00007a08 	cmpgei	zero,zero,488
    76f4:	000081c8 	cmpgei	zero,zero,519
    76f8:	000081a8 	cmpgeui	zero,zero,518
    76fc:	00008284 	movi	zero,522
    7700:	00008284 	movi	zero,522
    7704:	000081d4 	movui	zero,519
    7708:	00008284 	movi	zero,522
    770c:	000081e8 	cmpgeui	zero,zero,519
    7710:	0000806c 	andhi	zero,zero,513
    7714:	00007754 	movui	zero,477
    7718:	000080a4 	muli	zero,zero,514
    771c:	00008284 	movi	zero,522
    7720:	000080b0 	cmpltui	zero,zero,514
    7724:	00008284 	movi	zero,522
    7728:	00008114 	movui	zero,516
    772c:	00008284 	movi	zero,522
    7730:	00008284 	movi	zero,522
    7734:	00008134 	movhi	zero,516
    7738:	d8c03117 	ldw	r3,196(sp)
    773c:	d8802e15 	stw	r2,184(sp)
    7740:	00c7c83a 	sub	r3,zero,r3
    7744:	d8c03115 	stw	r3,196(sp)
    7748:	84000114 	ori	r16,r16,4
    774c:	ac400007 	ldb	r17,0(r21)
    7750:	003f9706 	br	75b0 <__alt_data_end+0xfffe75b0>
    7754:	00800c04 	movi	r2,48
    7758:	d8802705 	stb	r2,156(sp)
    775c:	00801e04 	movi	r2,120
    7760:	d8802745 	stb	r2,157(sp)
    7764:	d9002a17 	ldw	r4,168(sp)
    7768:	d8802e17 	ldw	r2,184(sp)
    776c:	d8002785 	stb	zero,158(sp)
    7770:	e011883a 	mov	r8,fp
    7774:	10c00104 	addi	r3,r2,4
    7778:	14c00017 	ldw	r19,0(r2)
    777c:	002d883a 	mov	r22,zero
    7780:	80800094 	ori	r2,r16,2
    7784:	2002ca16 	blt	r4,zero,82b0 <___vfprintf_internal_r+0xe88>
    7788:	00bfdfc4 	movi	r2,-129
    778c:	80a4703a 	and	r18,r16,r2
    7790:	d8c02e15 	stw	r3,184(sp)
    7794:	94800094 	ori	r18,r18,2
    7798:	9802b41e 	bne	r19,zero,826c <___vfprintf_internal_r+0xe44>
    779c:	01400074 	movhi	r5,1
    77a0:	294af904 	addi	r5,r5,11236
    77a4:	d9403915 	stw	r5,228(sp)
    77a8:	04401e04 	movi	r17,120
    77ac:	d8802a17 	ldw	r2,168(sp)
    77b0:	0039883a 	mov	fp,zero
    77b4:	1001fa26 	beq	r2,zero,7fa0 <___vfprintf_internal_r+0xb78>
    77b8:	0027883a 	mov	r19,zero
    77bc:	002d883a 	mov	r22,zero
    77c0:	00021906 	br	8028 <___vfprintf_internal_r+0xc00>
    77c4:	d9002d17 	ldw	r4,180(sp)
    77c8:	b80b883a 	mov	r5,r23
    77cc:	000983c0 	call	983c <__swsetup_r>
    77d0:	1005dc1e 	bne	r2,zero,8f44 <___vfprintf_internal_r+0x1b1c>
    77d4:	b880030b 	ldhu	r2,12(r23)
    77d8:	00c00284 	movi	r3,10
    77dc:	1080068c 	andi	r2,r2,26
    77e0:	10ff3a1e 	bne	r2,r3,74cc <__alt_data_end+0xfffe74cc>
    77e4:	b880038f 	ldh	r2,14(r23)
    77e8:	103f3816 	blt	r2,zero,74cc <__alt_data_end+0xfffe74cc>
    77ec:	d9c02e17 	ldw	r7,184(sp)
    77f0:	d9002d17 	ldw	r4,180(sp)
    77f4:	a80d883a 	mov	r6,r21
    77f8:	b80b883a 	mov	r5,r23
    77fc:	00097200 	call	9720 <__sbprintf>
    7800:	00001106 	br	7848 <___vfprintf_internal_r+0x420>
    7804:	d9002d17 	ldw	r4,180(sp)
    7808:	d9801e04 	addi	r6,sp,120
    780c:	b80b883a 	mov	r5,r23
    7810:	000d7880 	call	d788 <__sprint_r>
    7814:	1000081e 	bne	r2,zero,7838 <___vfprintf_internal_r+0x410>
    7818:	da000404 	addi	r8,sp,16
    781c:	003f5106 	br	7564 <__alt_data_end+0xfffe7564>
    7820:	d8802017 	ldw	r2,128(sp)
    7824:	10000426 	beq	r2,zero,7838 <___vfprintf_internal_r+0x410>
    7828:	d9002d17 	ldw	r4,180(sp)
    782c:	d9801e04 	addi	r6,sp,120
    7830:	b80b883a 	mov	r5,r23
    7834:	000d7880 	call	d788 <__sprint_r>
    7838:	b880030b 	ldhu	r2,12(r23)
    783c:	1080100c 	andi	r2,r2,64
    7840:	1005c01e 	bne	r2,zero,8f44 <___vfprintf_internal_r+0x1b1c>
    7844:	d8802f17 	ldw	r2,188(sp)
    7848:	dfc04717 	ldw	ra,284(sp)
    784c:	df004617 	ldw	fp,280(sp)
    7850:	ddc04517 	ldw	r23,276(sp)
    7854:	dd804417 	ldw	r22,272(sp)
    7858:	dd404317 	ldw	r21,268(sp)
    785c:	dd004217 	ldw	r20,264(sp)
    7860:	dcc04117 	ldw	r19,260(sp)
    7864:	dc804017 	ldw	r18,256(sp)
    7868:	dc403f17 	ldw	r17,252(sp)
    786c:	dc003e17 	ldw	r16,248(sp)
    7870:	dec04804 	addi	sp,sp,288
    7874:	f800283a 	ret
    7878:	d9002d17 	ldw	r4,180(sp)
    787c:	00052a00 	call	52a0 <__sinit>
    7880:	003f0206 	br	748c <__alt_data_end+0xfffe748c>
    7884:	d9002e17 	ldw	r4,184(sp)
    7888:	d9402e17 	ldw	r5,184(sp)
    788c:	21000017 	ldw	r4,0(r4)
    7890:	28800104 	addi	r2,r5,4
    7894:	d9003115 	stw	r4,196(sp)
    7898:	203fa716 	blt	r4,zero,7738 <__alt_data_end+0xfffe7738>
    789c:	d8802e15 	stw	r2,184(sp)
    78a0:	ac400007 	ldb	r17,0(r21)
    78a4:	003f4206 	br	75b0 <__alt_data_end+0xfffe75b0>
    78a8:	ac400007 	ldb	r17,0(r21)
    78ac:	01000a84 	movi	r4,42
    78b0:	a8c00044 	addi	r3,r21,1
    78b4:	89075826 	beq	r17,r4,9618 <___vfprintf_internal_r+0x21f0>
    78b8:	8cbff404 	addi	r18,r17,-48
    78bc:	b486ae36 	bltu	r22,r18,9378 <___vfprintf_internal_r+0x1f50>
    78c0:	0009883a 	mov	r4,zero
    78c4:	1823883a 	mov	r17,r3
    78c8:	01400284 	movi	r5,10
    78cc:	000197c0 	call	197c <__mulsi3>
    78d0:	88c00007 	ldb	r3,0(r17)
    78d4:	1489883a 	add	r4,r2,r18
    78d8:	8d400044 	addi	r21,r17,1
    78dc:	1cbff404 	addi	r18,r3,-48
    78e0:	a823883a 	mov	r17,r21
    78e4:	b4bff82e 	bgeu	r22,r18,78c8 <__alt_data_end+0xfffe78c8>
    78e8:	1823883a 	mov	r17,r3
    78ec:	2005f616 	blt	r4,zero,90c8 <___vfprintf_internal_r+0x1ca0>
    78f0:	d9002a15 	stw	r4,168(sp)
    78f4:	003f2f06 	br	75b4 <__alt_data_end+0xfffe75b4>
    78f8:	84002014 	ori	r16,r16,128
    78fc:	ac400007 	ldb	r17,0(r21)
    7900:	003f2b06 	br	75b0 <__alt_data_end+0xfffe75b0>
    7904:	8cbff404 	addi	r18,r17,-48
    7908:	d8003115 	stw	zero,196(sp)
    790c:	0009883a 	mov	r4,zero
    7910:	a823883a 	mov	r17,r21
    7914:	01400284 	movi	r5,10
    7918:	000197c0 	call	197c <__mulsi3>
    791c:	88c00007 	ldb	r3,0(r17)
    7920:	9089883a 	add	r4,r18,r2
    7924:	ad400044 	addi	r21,r21,1
    7928:	1cbff404 	addi	r18,r3,-48
    792c:	a823883a 	mov	r17,r21
    7930:	b4bff82e 	bgeu	r22,r18,7914 <__alt_data_end+0xfffe7914>
    7934:	1823883a 	mov	r17,r3
    7938:	d9003115 	stw	r4,196(sp)
    793c:	003f1d06 	br	75b4 <__alt_data_end+0xfffe75b4>
    7940:	8025883a 	mov	r18,r16
    7944:	dc002903 	ldbu	r16,164(sp)
    7948:	e011883a 	mov	r8,fp
    794c:	84003fcc 	andi	r16,r16,255
    7950:	8007531e 	bne	r16,zero,96a0 <___vfprintf_internal_r+0x2278>
    7954:	94800414 	ori	r18,r18,16
    7958:	9080080c 	andi	r2,r18,32
    795c:	1003a326 	beq	r2,zero,87ec <___vfprintf_internal_r+0x13c4>
    7960:	d9002e17 	ldw	r4,184(sp)
    7964:	20800117 	ldw	r2,4(r4)
    7968:	24c00017 	ldw	r19,0(r4)
    796c:	21000204 	addi	r4,r4,8
    7970:	d9002e15 	stw	r4,184(sp)
    7974:	102d883a 	mov	r22,r2
    7978:	10047316 	blt	r2,zero,8b48 <___vfprintf_internal_r+0x1720>
    797c:	d9002a17 	ldw	r4,168(sp)
    7980:	df002783 	ldbu	fp,158(sp)
    7984:	2003e416 	blt	r4,zero,8918 <___vfprintf_internal_r+0x14f0>
    7988:	00ffdfc4 	movi	r3,-129
    798c:	9d84b03a 	or	r2,r19,r22
    7990:	90e4703a 	and	r18,r18,r3
    7994:	10018026 	beq	r2,zero,7f98 <___vfprintf_internal_r+0xb70>
    7998:	b003ab26 	beq	r22,zero,8848 <___vfprintf_internal_r+0x1420>
    799c:	dc402915 	stw	r17,164(sp)
    79a0:	dc001e04 	addi	r16,sp,120
    79a4:	b023883a 	mov	r17,r22
    79a8:	402d883a 	mov	r22,r8
    79ac:	9809883a 	mov	r4,r19
    79b0:	880b883a 	mov	r5,r17
    79b4:	01800284 	movi	r6,10
    79b8:	000f883a 	mov	r7,zero
    79bc:	000f9a40 	call	f9a4 <__umoddi3>
    79c0:	10800c04 	addi	r2,r2,48
    79c4:	843fffc4 	addi	r16,r16,-1
    79c8:	9809883a 	mov	r4,r19
    79cc:	880b883a 	mov	r5,r17
    79d0:	80800005 	stb	r2,0(r16)
    79d4:	01800284 	movi	r6,10
    79d8:	000f883a 	mov	r7,zero
    79dc:	000f3a80 	call	f3a8 <__udivdi3>
    79e0:	1027883a 	mov	r19,r2
    79e4:	10c4b03a 	or	r2,r2,r3
    79e8:	1823883a 	mov	r17,r3
    79ec:	103fef1e 	bne	r2,zero,79ac <__alt_data_end+0xfffe79ac>
    79f0:	d8c02817 	ldw	r3,160(sp)
    79f4:	dc402917 	ldw	r17,164(sp)
    79f8:	b011883a 	mov	r8,r22
    79fc:	1c07c83a 	sub	r3,r3,r16
    7a00:	d8c02b15 	stw	r3,172(sp)
    7a04:	00005f06 	br	7b84 <___vfprintf_internal_r+0x75c>
    7a08:	8025883a 	mov	r18,r16
    7a0c:	dc002903 	ldbu	r16,164(sp)
    7a10:	e011883a 	mov	r8,fp
    7a14:	84003fcc 	andi	r16,r16,255
    7a18:	80071e1e 	bne	r16,zero,9694 <___vfprintf_internal_r+0x226c>
    7a1c:	9080020c 	andi	r2,r18,8
    7a20:	1004af26 	beq	r2,zero,8ce0 <___vfprintf_internal_r+0x18b8>
    7a24:	d9002e17 	ldw	r4,184(sp)
    7a28:	d9402e17 	ldw	r5,184(sp)
    7a2c:	d8802e17 	ldw	r2,184(sp)
    7a30:	21000017 	ldw	r4,0(r4)
    7a34:	29400117 	ldw	r5,4(r5)
    7a38:	10800204 	addi	r2,r2,8
    7a3c:	d9003615 	stw	r4,216(sp)
    7a40:	d9403815 	stw	r5,224(sp)
    7a44:	d8802e15 	stw	r2,184(sp)
    7a48:	d9003617 	ldw	r4,216(sp)
    7a4c:	d9403817 	ldw	r5,224(sp)
    7a50:	da003d15 	stw	r8,244(sp)
    7a54:	04000044 	movi	r16,1
    7a58:	000d53c0 	call	d53c <__fpclassifyd>
    7a5c:	da003d17 	ldw	r8,244(sp)
    7a60:	1404441e 	bne	r2,r16,8b74 <___vfprintf_internal_r+0x174c>
    7a64:	d9003617 	ldw	r4,216(sp)
    7a68:	d9403817 	ldw	r5,224(sp)
    7a6c:	000d883a 	mov	r6,zero
    7a70:	000f883a 	mov	r7,zero
    7a74:	000fff00 	call	fff0 <__ledf2>
    7a78:	da003d17 	ldw	r8,244(sp)
    7a7c:	1005e316 	blt	r2,zero,920c <___vfprintf_internal_r+0x1de4>
    7a80:	df002783 	ldbu	fp,158(sp)
    7a84:	008011c4 	movi	r2,71
    7a88:	1445580e 	bge	r2,r17,8fec <___vfprintf_internal_r+0x1bc4>
    7a8c:	04000074 	movhi	r16,1
    7a90:	840af104 	addi	r16,r16,11204
    7a94:	00c000c4 	movi	r3,3
    7a98:	00bfdfc4 	movi	r2,-129
    7a9c:	d8c02915 	stw	r3,164(sp)
    7aa0:	90a4703a 	and	r18,r18,r2
    7aa4:	d8c02b15 	stw	r3,172(sp)
    7aa8:	d8002a15 	stw	zero,168(sp)
    7aac:	d8003215 	stw	zero,200(sp)
    7ab0:	00003a06 	br	7b9c <___vfprintf_internal_r+0x774>
    7ab4:	84000214 	ori	r16,r16,8
    7ab8:	ac400007 	ldb	r17,0(r21)
    7abc:	003ebc06 	br	75b0 <__alt_data_end+0xfffe75b0>
    7ac0:	8025883a 	mov	r18,r16
    7ac4:	dc002903 	ldbu	r16,164(sp)
    7ac8:	e011883a 	mov	r8,fp
    7acc:	84003fcc 	andi	r16,r16,255
    7ad0:	8007001e 	bne	r16,zero,96d4 <___vfprintf_internal_r+0x22ac>
    7ad4:	94800414 	ori	r18,r18,16
    7ad8:	9080080c 	andi	r2,r18,32
    7adc:	1002fa26 	beq	r2,zero,86c8 <___vfprintf_internal_r+0x12a0>
    7ae0:	d9002e17 	ldw	r4,184(sp)
    7ae4:	d9402a17 	ldw	r5,168(sp)
    7ae8:	d8002785 	stb	zero,158(sp)
    7aec:	20800204 	addi	r2,r4,8
    7af0:	24c00017 	ldw	r19,0(r4)
    7af4:	25800117 	ldw	r22,4(r4)
    7af8:	2804b116 	blt	r5,zero,8dc0 <___vfprintf_internal_r+0x1998>
    7afc:	013fdfc4 	movi	r4,-129
    7b00:	9d86b03a 	or	r3,r19,r22
    7b04:	d8802e15 	stw	r2,184(sp)
    7b08:	9124703a 	and	r18,r18,r4
    7b0c:	1802fb1e 	bne	r3,zero,86fc <___vfprintf_internal_r+0x12d4>
    7b10:	d8c02a17 	ldw	r3,168(sp)
    7b14:	0039883a 	mov	fp,zero
    7b18:	1805e526 	beq	r3,zero,92b0 <___vfprintf_internal_r+0x1e88>
    7b1c:	0027883a 	mov	r19,zero
    7b20:	002d883a 	mov	r22,zero
    7b24:	dc001e04 	addi	r16,sp,120
    7b28:	9806d0fa 	srli	r3,r19,3
    7b2c:	b008977a 	slli	r4,r22,29
    7b30:	b02cd0fa 	srli	r22,r22,3
    7b34:	9cc001cc 	andi	r19,r19,7
    7b38:	98800c04 	addi	r2,r19,48
    7b3c:	843fffc4 	addi	r16,r16,-1
    7b40:	20e6b03a 	or	r19,r4,r3
    7b44:	80800005 	stb	r2,0(r16)
    7b48:	9d86b03a 	or	r3,r19,r22
    7b4c:	183ff61e 	bne	r3,zero,7b28 <__alt_data_end+0xfffe7b28>
    7b50:	90c0004c 	andi	r3,r18,1
    7b54:	18014126 	beq	r3,zero,805c <___vfprintf_internal_r+0xc34>
    7b58:	10803fcc 	andi	r2,r2,255
    7b5c:	1080201c 	xori	r2,r2,128
    7b60:	10bfe004 	addi	r2,r2,-128
    7b64:	00c00c04 	movi	r3,48
    7b68:	10c13c26 	beq	r2,r3,805c <___vfprintf_internal_r+0xc34>
    7b6c:	80ffffc5 	stb	r3,-1(r16)
    7b70:	d8c02817 	ldw	r3,160(sp)
    7b74:	80bfffc4 	addi	r2,r16,-1
    7b78:	1021883a 	mov	r16,r2
    7b7c:	1887c83a 	sub	r3,r3,r2
    7b80:	d8c02b15 	stw	r3,172(sp)
    7b84:	d8802b17 	ldw	r2,172(sp)
    7b88:	d9002a17 	ldw	r4,168(sp)
    7b8c:	1100010e 	bge	r2,r4,7b94 <___vfprintf_internal_r+0x76c>
    7b90:	2005883a 	mov	r2,r4
    7b94:	d8802915 	stw	r2,164(sp)
    7b98:	d8003215 	stw	zero,200(sp)
    7b9c:	e7003fcc 	andi	fp,fp,255
    7ba0:	e700201c 	xori	fp,fp,128
    7ba4:	e73fe004 	addi	fp,fp,-128
    7ba8:	e0000326 	beq	fp,zero,7bb8 <___vfprintf_internal_r+0x790>
    7bac:	d8c02917 	ldw	r3,164(sp)
    7bb0:	18c00044 	addi	r3,r3,1
    7bb4:	d8c02915 	stw	r3,164(sp)
    7bb8:	90c0008c 	andi	r3,r18,2
    7bbc:	d8c02c15 	stw	r3,176(sp)
    7bc0:	18000326 	beq	r3,zero,7bd0 <___vfprintf_internal_r+0x7a8>
    7bc4:	d8c02917 	ldw	r3,164(sp)
    7bc8:	18c00084 	addi	r3,r3,2
    7bcc:	d8c02915 	stw	r3,164(sp)
    7bd0:	90c0210c 	andi	r3,r18,132
    7bd4:	d8c03015 	stw	r3,192(sp)
    7bd8:	1801c51e 	bne	r3,zero,82f0 <___vfprintf_internal_r+0xec8>
    7bdc:	d9003117 	ldw	r4,196(sp)
    7be0:	d8c02917 	ldw	r3,164(sp)
    7be4:	20e7c83a 	sub	r19,r4,r3
    7be8:	04c1c10e 	bge	zero,r19,82f0 <___vfprintf_internal_r+0xec8>
    7bec:	02400404 	movi	r9,16
    7bf0:	d8c02017 	ldw	r3,128(sp)
    7bf4:	d8801f17 	ldw	r2,124(sp)
    7bf8:	4cc52f0e 	bge	r9,r19,90b8 <___vfprintf_internal_r+0x1c90>
    7bfc:	01400074 	movhi	r5,1
    7c00:	294b0484 	addi	r5,r5,11282
    7c04:	dc403b15 	stw	r17,236(sp)
    7c08:	d9403515 	stw	r5,212(sp)
    7c0c:	9823883a 	mov	r17,r19
    7c10:	482d883a 	mov	r22,r9
    7c14:	9027883a 	mov	r19,r18
    7c18:	070001c4 	movi	fp,7
    7c1c:	8025883a 	mov	r18,r16
    7c20:	dc002d17 	ldw	r16,180(sp)
    7c24:	00000306 	br	7c34 <___vfprintf_internal_r+0x80c>
    7c28:	8c7ffc04 	addi	r17,r17,-16
    7c2c:	42000204 	addi	r8,r8,8
    7c30:	b440130e 	bge	r22,r17,7c80 <___vfprintf_internal_r+0x858>
    7c34:	01000074 	movhi	r4,1
    7c38:	18c00404 	addi	r3,r3,16
    7c3c:	10800044 	addi	r2,r2,1
    7c40:	210b0484 	addi	r4,r4,11282
    7c44:	41000015 	stw	r4,0(r8)
    7c48:	45800115 	stw	r22,4(r8)
    7c4c:	d8c02015 	stw	r3,128(sp)
    7c50:	d8801f15 	stw	r2,124(sp)
    7c54:	e0bff40e 	bge	fp,r2,7c28 <__alt_data_end+0xfffe7c28>
    7c58:	d9801e04 	addi	r6,sp,120
    7c5c:	b80b883a 	mov	r5,r23
    7c60:	8009883a 	mov	r4,r16
    7c64:	000d7880 	call	d788 <__sprint_r>
    7c68:	103ef31e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    7c6c:	8c7ffc04 	addi	r17,r17,-16
    7c70:	d8c02017 	ldw	r3,128(sp)
    7c74:	d8801f17 	ldw	r2,124(sp)
    7c78:	da000404 	addi	r8,sp,16
    7c7c:	b47fed16 	blt	r22,r17,7c34 <__alt_data_end+0xfffe7c34>
    7c80:	9021883a 	mov	r16,r18
    7c84:	9825883a 	mov	r18,r19
    7c88:	8827883a 	mov	r19,r17
    7c8c:	dc403b17 	ldw	r17,236(sp)
    7c90:	d9403517 	ldw	r5,212(sp)
    7c94:	98c7883a 	add	r3,r19,r3
    7c98:	10800044 	addi	r2,r2,1
    7c9c:	41400015 	stw	r5,0(r8)
    7ca0:	44c00115 	stw	r19,4(r8)
    7ca4:	d8c02015 	stw	r3,128(sp)
    7ca8:	d8801f15 	stw	r2,124(sp)
    7cac:	010001c4 	movi	r4,7
    7cb0:	2082c516 	blt	r4,r2,87c8 <___vfprintf_internal_r+0x13a0>
    7cb4:	df002787 	ldb	fp,158(sp)
    7cb8:	42000204 	addi	r8,r8,8
    7cbc:	e0000c26 	beq	fp,zero,7cf0 <___vfprintf_internal_r+0x8c8>
    7cc0:	d8801f17 	ldw	r2,124(sp)
    7cc4:	d9002784 	addi	r4,sp,158
    7cc8:	18c00044 	addi	r3,r3,1
    7ccc:	10800044 	addi	r2,r2,1
    7cd0:	41000015 	stw	r4,0(r8)
    7cd4:	01000044 	movi	r4,1
    7cd8:	41000115 	stw	r4,4(r8)
    7cdc:	d8c02015 	stw	r3,128(sp)
    7ce0:	d8801f15 	stw	r2,124(sp)
    7ce4:	010001c4 	movi	r4,7
    7ce8:	20825e16 	blt	r4,r2,8664 <___vfprintf_internal_r+0x123c>
    7cec:	42000204 	addi	r8,r8,8
    7cf0:	d8802c17 	ldw	r2,176(sp)
    7cf4:	10000c26 	beq	r2,zero,7d28 <___vfprintf_internal_r+0x900>
    7cf8:	d8801f17 	ldw	r2,124(sp)
    7cfc:	d9002704 	addi	r4,sp,156
    7d00:	18c00084 	addi	r3,r3,2
    7d04:	10800044 	addi	r2,r2,1
    7d08:	41000015 	stw	r4,0(r8)
    7d0c:	01000084 	movi	r4,2
    7d10:	41000115 	stw	r4,4(r8)
    7d14:	d8c02015 	stw	r3,128(sp)
    7d18:	d8801f15 	stw	r2,124(sp)
    7d1c:	010001c4 	movi	r4,7
    7d20:	20825816 	blt	r4,r2,8684 <___vfprintf_internal_r+0x125c>
    7d24:	42000204 	addi	r8,r8,8
    7d28:	d9003017 	ldw	r4,192(sp)
    7d2c:	00802004 	movi	r2,128
    7d30:	2081bb26 	beq	r4,r2,8420 <___vfprintf_internal_r+0xff8>
    7d34:	d9402a17 	ldw	r5,168(sp)
    7d38:	d8802b17 	ldw	r2,172(sp)
    7d3c:	28adc83a 	sub	r22,r5,r2
    7d40:	0580310e 	bge	zero,r22,7e08 <___vfprintf_internal_r+0x9e0>
    7d44:	07000404 	movi	fp,16
    7d48:	d8801f17 	ldw	r2,124(sp)
    7d4c:	e584360e 	bge	fp,r22,8e28 <___vfprintf_internal_r+0x1a00>
    7d50:	01400074 	movhi	r5,1
    7d54:	294b0084 	addi	r5,r5,11266
    7d58:	dc402a15 	stw	r17,168(sp)
    7d5c:	d9402c15 	stw	r5,176(sp)
    7d60:	b023883a 	mov	r17,r22
    7d64:	04c001c4 	movi	r19,7
    7d68:	a82d883a 	mov	r22,r21
    7d6c:	902b883a 	mov	r21,r18
    7d70:	8025883a 	mov	r18,r16
    7d74:	dc002d17 	ldw	r16,180(sp)
    7d78:	00000306 	br	7d88 <___vfprintf_internal_r+0x960>
    7d7c:	8c7ffc04 	addi	r17,r17,-16
    7d80:	42000204 	addi	r8,r8,8
    7d84:	e440110e 	bge	fp,r17,7dcc <___vfprintf_internal_r+0x9a4>
    7d88:	18c00404 	addi	r3,r3,16
    7d8c:	10800044 	addi	r2,r2,1
    7d90:	45000015 	stw	r20,0(r8)
    7d94:	47000115 	stw	fp,4(r8)
    7d98:	d8c02015 	stw	r3,128(sp)
    7d9c:	d8801f15 	stw	r2,124(sp)
    7da0:	98bff60e 	bge	r19,r2,7d7c <__alt_data_end+0xfffe7d7c>
    7da4:	d9801e04 	addi	r6,sp,120
    7da8:	b80b883a 	mov	r5,r23
    7dac:	8009883a 	mov	r4,r16
    7db0:	000d7880 	call	d788 <__sprint_r>
    7db4:	103ea01e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    7db8:	8c7ffc04 	addi	r17,r17,-16
    7dbc:	d8c02017 	ldw	r3,128(sp)
    7dc0:	d8801f17 	ldw	r2,124(sp)
    7dc4:	da000404 	addi	r8,sp,16
    7dc8:	e47fef16 	blt	fp,r17,7d88 <__alt_data_end+0xfffe7d88>
    7dcc:	9021883a 	mov	r16,r18
    7dd0:	a825883a 	mov	r18,r21
    7dd4:	b02b883a 	mov	r21,r22
    7dd8:	882d883a 	mov	r22,r17
    7ddc:	dc402a17 	ldw	r17,168(sp)
    7de0:	d9002c17 	ldw	r4,176(sp)
    7de4:	1d87883a 	add	r3,r3,r22
    7de8:	10800044 	addi	r2,r2,1
    7dec:	41000015 	stw	r4,0(r8)
    7df0:	45800115 	stw	r22,4(r8)
    7df4:	d8c02015 	stw	r3,128(sp)
    7df8:	d8801f15 	stw	r2,124(sp)
    7dfc:	010001c4 	movi	r4,7
    7e00:	20821016 	blt	r4,r2,8644 <___vfprintf_internal_r+0x121c>
    7e04:	42000204 	addi	r8,r8,8
    7e08:	9080400c 	andi	r2,r18,256
    7e0c:	10013a1e 	bne	r2,zero,82f8 <___vfprintf_internal_r+0xed0>
    7e10:	d9402b17 	ldw	r5,172(sp)
    7e14:	d8801f17 	ldw	r2,124(sp)
    7e18:	44000015 	stw	r16,0(r8)
    7e1c:	1947883a 	add	r3,r3,r5
    7e20:	10800044 	addi	r2,r2,1
    7e24:	41400115 	stw	r5,4(r8)
    7e28:	d8c02015 	stw	r3,128(sp)
    7e2c:	d8801f15 	stw	r2,124(sp)
    7e30:	010001c4 	movi	r4,7
    7e34:	2081f516 	blt	r4,r2,860c <___vfprintf_internal_r+0x11e4>
    7e38:	42000204 	addi	r8,r8,8
    7e3c:	9480010c 	andi	r18,r18,4
    7e40:	90003226 	beq	r18,zero,7f0c <___vfprintf_internal_r+0xae4>
    7e44:	d9403117 	ldw	r5,196(sp)
    7e48:	d8802917 	ldw	r2,164(sp)
    7e4c:	28a1c83a 	sub	r16,r5,r2
    7e50:	04002e0e 	bge	zero,r16,7f0c <___vfprintf_internal_r+0xae4>
    7e54:	04400404 	movi	r17,16
    7e58:	d8801f17 	ldw	r2,124(sp)
    7e5c:	8c04c40e 	bge	r17,r16,9170 <___vfprintf_internal_r+0x1d48>
    7e60:	01400074 	movhi	r5,1
    7e64:	294b0484 	addi	r5,r5,11282
    7e68:	d9403515 	stw	r5,212(sp)
    7e6c:	048001c4 	movi	r18,7
    7e70:	dcc02d17 	ldw	r19,180(sp)
    7e74:	00000306 	br	7e84 <___vfprintf_internal_r+0xa5c>
    7e78:	843ffc04 	addi	r16,r16,-16
    7e7c:	42000204 	addi	r8,r8,8
    7e80:	8c00130e 	bge	r17,r16,7ed0 <___vfprintf_internal_r+0xaa8>
    7e84:	01000074 	movhi	r4,1
    7e88:	18c00404 	addi	r3,r3,16
    7e8c:	10800044 	addi	r2,r2,1
    7e90:	210b0484 	addi	r4,r4,11282
    7e94:	41000015 	stw	r4,0(r8)
    7e98:	44400115 	stw	r17,4(r8)
    7e9c:	d8c02015 	stw	r3,128(sp)
    7ea0:	d8801f15 	stw	r2,124(sp)
    7ea4:	90bff40e 	bge	r18,r2,7e78 <__alt_data_end+0xfffe7e78>
    7ea8:	d9801e04 	addi	r6,sp,120
    7eac:	b80b883a 	mov	r5,r23
    7eb0:	9809883a 	mov	r4,r19
    7eb4:	000d7880 	call	d788 <__sprint_r>
    7eb8:	103e5f1e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    7ebc:	843ffc04 	addi	r16,r16,-16
    7ec0:	d8c02017 	ldw	r3,128(sp)
    7ec4:	d8801f17 	ldw	r2,124(sp)
    7ec8:	da000404 	addi	r8,sp,16
    7ecc:	8c3fed16 	blt	r17,r16,7e84 <__alt_data_end+0xfffe7e84>
    7ed0:	d9403517 	ldw	r5,212(sp)
    7ed4:	1c07883a 	add	r3,r3,r16
    7ed8:	10800044 	addi	r2,r2,1
    7edc:	41400015 	stw	r5,0(r8)
    7ee0:	44000115 	stw	r16,4(r8)
    7ee4:	d8c02015 	stw	r3,128(sp)
    7ee8:	d8801f15 	stw	r2,124(sp)
    7eec:	010001c4 	movi	r4,7
    7ef0:	2080060e 	bge	r4,r2,7f0c <___vfprintf_internal_r+0xae4>
    7ef4:	d9002d17 	ldw	r4,180(sp)
    7ef8:	d9801e04 	addi	r6,sp,120
    7efc:	b80b883a 	mov	r5,r23
    7f00:	000d7880 	call	d788 <__sprint_r>
    7f04:	103e4c1e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    7f08:	d8c02017 	ldw	r3,128(sp)
    7f0c:	d8803117 	ldw	r2,196(sp)
    7f10:	d9002917 	ldw	r4,164(sp)
    7f14:	1100010e 	bge	r2,r4,7f1c <___vfprintf_internal_r+0xaf4>
    7f18:	2005883a 	mov	r2,r4
    7f1c:	d9402f17 	ldw	r5,188(sp)
    7f20:	288b883a 	add	r5,r5,r2
    7f24:	d9402f15 	stw	r5,188(sp)
    7f28:	1801c01e 	bne	r3,zero,862c <___vfprintf_internal_r+0x1204>
    7f2c:	a8800007 	ldb	r2,0(r21)
    7f30:	d8001f15 	stw	zero,124(sp)
    7f34:	da000404 	addi	r8,sp,16
    7f38:	103d751e 	bne	r2,zero,7510 <__alt_data_end+0xfffe7510>
    7f3c:	a823883a 	mov	r17,r21
    7f40:	003d8b06 	br	7570 <__alt_data_end+0xfffe7570>
    7f44:	8025883a 	mov	r18,r16
    7f48:	dc002903 	ldbu	r16,164(sp)
    7f4c:	e011883a 	mov	r8,fp
    7f50:	84003fcc 	andi	r16,r16,255
    7f54:	8005e51e 	bne	r16,zero,96ec <___vfprintf_internal_r+0x22c4>
    7f58:	94800414 	ori	r18,r18,16
    7f5c:	9080080c 	andi	r2,r18,32
    7f60:	10022b26 	beq	r2,zero,8810 <___vfprintf_internal_r+0x13e8>
    7f64:	d9002e17 	ldw	r4,184(sp)
    7f68:	d9402a17 	ldw	r5,168(sp)
    7f6c:	d8002785 	stb	zero,158(sp)
    7f70:	20c00204 	addi	r3,r4,8
    7f74:	24c00017 	ldw	r19,0(r4)
    7f78:	25800117 	ldw	r22,4(r4)
    7f7c:	28042e16 	blt	r5,zero,9038 <___vfprintf_internal_r+0x1c10>
    7f80:	013fdfc4 	movi	r4,-129
    7f84:	9d84b03a 	or	r2,r19,r22
    7f88:	d8c02e15 	stw	r3,184(sp)
    7f8c:	9124703a 	and	r18,r18,r4
    7f90:	0039883a 	mov	fp,zero
    7f94:	103e801e 	bne	r2,zero,7998 <__alt_data_end+0xfffe7998>
    7f98:	d9002a17 	ldw	r4,168(sp)
    7f9c:	2002e01e 	bne	r4,zero,8b20 <___vfprintf_internal_r+0x16f8>
    7fa0:	d8002a15 	stw	zero,168(sp)
    7fa4:	d8002b15 	stw	zero,172(sp)
    7fa8:	dc001e04 	addi	r16,sp,120
    7fac:	003ef506 	br	7b84 <__alt_data_end+0xfffe7b84>
    7fb0:	8025883a 	mov	r18,r16
    7fb4:	dc002903 	ldbu	r16,164(sp)
    7fb8:	e011883a 	mov	r8,fp
    7fbc:	84003fcc 	andi	r16,r16,255
    7fc0:	8005ba1e 	bne	r16,zero,96ac <___vfprintf_internal_r+0x2284>
    7fc4:	01000074 	movhi	r4,1
    7fc8:	210af404 	addi	r4,r4,11216
    7fcc:	d9003915 	stw	r4,228(sp)
    7fd0:	9080080c 	andi	r2,r18,32
    7fd4:	10006126 	beq	r2,zero,815c <___vfprintf_internal_r+0xd34>
    7fd8:	d9402e17 	ldw	r5,184(sp)
    7fdc:	2cc00017 	ldw	r19,0(r5)
    7fe0:	2d800117 	ldw	r22,4(r5)
    7fe4:	29400204 	addi	r5,r5,8
    7fe8:	d9402e15 	stw	r5,184(sp)
    7fec:	9080004c 	andi	r2,r18,1
    7ff0:	1001ac26 	beq	r2,zero,86a4 <___vfprintf_internal_r+0x127c>
    7ff4:	9d84b03a 	or	r2,r19,r22
    7ff8:	10038526 	beq	r2,zero,8e10 <___vfprintf_internal_r+0x19e8>
    7ffc:	d8c02a17 	ldw	r3,168(sp)
    8000:	00800c04 	movi	r2,48
    8004:	d8802705 	stb	r2,156(sp)
    8008:	dc402745 	stb	r17,157(sp)
    800c:	d8002785 	stb	zero,158(sp)
    8010:	90800094 	ori	r2,r18,2
    8014:	18047916 	blt	r3,zero,91fc <___vfprintf_internal_r+0x1dd4>
    8018:	00bfdfc4 	movi	r2,-129
    801c:	90a4703a 	and	r18,r18,r2
    8020:	94800094 	ori	r18,r18,2
    8024:	0039883a 	mov	fp,zero
    8028:	d9003917 	ldw	r4,228(sp)
    802c:	dc001e04 	addi	r16,sp,120
    8030:	988003cc 	andi	r2,r19,15
    8034:	b006973a 	slli	r3,r22,28
    8038:	2085883a 	add	r2,r4,r2
    803c:	9826d13a 	srli	r19,r19,4
    8040:	10800003 	ldbu	r2,0(r2)
    8044:	b02cd13a 	srli	r22,r22,4
    8048:	843fffc4 	addi	r16,r16,-1
    804c:	1ce6b03a 	or	r19,r3,r19
    8050:	80800005 	stb	r2,0(r16)
    8054:	9d84b03a 	or	r2,r19,r22
    8058:	103ff51e 	bne	r2,zero,8030 <__alt_data_end+0xfffe8030>
    805c:	d8c02817 	ldw	r3,160(sp)
    8060:	1c07c83a 	sub	r3,r3,r16
    8064:	d8c02b15 	stw	r3,172(sp)
    8068:	003ec606 	br	7b84 <__alt_data_end+0xfffe7b84>
    806c:	8025883a 	mov	r18,r16
    8070:	dc002903 	ldbu	r16,164(sp)
    8074:	e011883a 	mov	r8,fp
    8078:	84003fcc 	andi	r16,r16,255
    807c:	803e9626 	beq	r16,zero,7ad8 <__alt_data_end+0xfffe7ad8>
    8080:	d8c02b03 	ldbu	r3,172(sp)
    8084:	d8c02785 	stb	r3,158(sp)
    8088:	003e9306 	br	7ad8 <__alt_data_end+0xfffe7ad8>
    808c:	00c00044 	movi	r3,1
    8090:	d8c02905 	stb	r3,164(sp)
    8094:	00c00ac4 	movi	r3,43
    8098:	d8c02b05 	stb	r3,172(sp)
    809c:	ac400007 	ldb	r17,0(r21)
    80a0:	003d4306 	br	75b0 <__alt_data_end+0xfffe75b0>
    80a4:	84000814 	ori	r16,r16,32
    80a8:	ac400007 	ldb	r17,0(r21)
    80ac:	003d4006 	br	75b0 <__alt_data_end+0xfffe75b0>
    80b0:	d8802e17 	ldw	r2,184(sp)
    80b4:	8025883a 	mov	r18,r16
    80b8:	d8002785 	stb	zero,158(sp)
    80bc:	14000017 	ldw	r16,0(r2)
    80c0:	e011883a 	mov	r8,fp
    80c4:	14c00104 	addi	r19,r2,4
    80c8:	80042d26 	beq	r16,zero,9180 <___vfprintf_internal_r+0x1d58>
    80cc:	d8c02a17 	ldw	r3,168(sp)
    80d0:	1803e416 	blt	r3,zero,9064 <___vfprintf_internal_r+0x1c3c>
    80d4:	180d883a 	mov	r6,r3
    80d8:	000b883a 	mov	r5,zero
    80dc:	8009883a 	mov	r4,r16
    80e0:	df003d15 	stw	fp,244(sp)
    80e4:	000bb180 	call	bb18 <memchr>
    80e8:	da003d17 	ldw	r8,244(sp)
    80ec:	10046826 	beq	r2,zero,9290 <___vfprintf_internal_r+0x1e68>
    80f0:	1405c83a 	sub	r2,r2,r16
    80f4:	d8802b15 	stw	r2,172(sp)
    80f8:	1003e016 	blt	r2,zero,907c <___vfprintf_internal_r+0x1c54>
    80fc:	df002783 	ldbu	fp,158(sp)
    8100:	d8802915 	stw	r2,164(sp)
    8104:	dcc02e15 	stw	r19,184(sp)
    8108:	d8002a15 	stw	zero,168(sp)
    810c:	d8003215 	stw	zero,200(sp)
    8110:	003ea206 	br	7b9c <__alt_data_end+0xfffe7b9c>
    8114:	8025883a 	mov	r18,r16
    8118:	dc002903 	ldbu	r16,164(sp)
    811c:	e011883a 	mov	r8,fp
    8120:	84003fcc 	andi	r16,r16,255
    8124:	803f8d26 	beq	r16,zero,7f5c <__alt_data_end+0xfffe7f5c>
    8128:	d8c02b03 	ldbu	r3,172(sp)
    812c:	d8c02785 	stb	r3,158(sp)
    8130:	003f8a06 	br	7f5c <__alt_data_end+0xfffe7f5c>
    8134:	8025883a 	mov	r18,r16
    8138:	dc002903 	ldbu	r16,164(sp)
    813c:	e011883a 	mov	r8,fp
    8140:	84003fcc 	andi	r16,r16,255
    8144:	8005661e 	bne	r16,zero,96e0 <___vfprintf_internal_r+0x22b8>
    8148:	01000074 	movhi	r4,1
    814c:	210af904 	addi	r4,r4,11236
    8150:	d9003915 	stw	r4,228(sp)
    8154:	9080080c 	andi	r2,r18,32
    8158:	103f9f1e 	bne	r2,zero,7fd8 <__alt_data_end+0xfffe7fd8>
    815c:	9080040c 	andi	r2,r18,16
    8160:	1002eb26 	beq	r2,zero,8d10 <___vfprintf_internal_r+0x18e8>
    8164:	d8802e17 	ldw	r2,184(sp)
    8168:	002d883a 	mov	r22,zero
    816c:	14c00017 	ldw	r19,0(r2)
    8170:	10800104 	addi	r2,r2,4
    8174:	d8802e15 	stw	r2,184(sp)
    8178:	003f9c06 	br	7fec <__alt_data_end+0xfffe7fec>
    817c:	d8802b07 	ldb	r2,172(sp)
    8180:	1002e11e 	bne	r2,zero,8d08 <___vfprintf_internal_r+0x18e0>
    8184:	00c00044 	movi	r3,1
    8188:	d8c02905 	stb	r3,164(sp)
    818c:	00c00804 	movi	r3,32
    8190:	d8c02b05 	stb	r3,172(sp)
    8194:	ac400007 	ldb	r17,0(r21)
    8198:	003d0506 	br	75b0 <__alt_data_end+0xfffe75b0>
    819c:	84000054 	ori	r16,r16,1
    81a0:	ac400007 	ldb	r17,0(r21)
    81a4:	003d0206 	br	75b0 <__alt_data_end+0xfffe75b0>
    81a8:	8025883a 	mov	r18,r16
    81ac:	dc002903 	ldbu	r16,164(sp)
    81b0:	e011883a 	mov	r8,fp
    81b4:	84003fcc 	andi	r16,r16,255
    81b8:	803de726 	beq	r16,zero,7958 <__alt_data_end+0xfffe7958>
    81bc:	d8c02b03 	ldbu	r3,172(sp)
    81c0:	d8c02785 	stb	r3,158(sp)
    81c4:	003de406 	br	7958 <__alt_data_end+0xfffe7958>
    81c8:	84001014 	ori	r16,r16,64
    81cc:	ac400007 	ldb	r17,0(r21)
    81d0:	003cf706 	br	75b0 <__alt_data_end+0xfffe75b0>
    81d4:	ac400007 	ldb	r17,0(r21)
    81d8:	00801b04 	movi	r2,108
    81dc:	88838f26 	beq	r17,r2,901c <___vfprintf_internal_r+0x1bf4>
    81e0:	84000414 	ori	r16,r16,16
    81e4:	003cf206 	br	75b0 <__alt_data_end+0xfffe75b0>
    81e8:	8025883a 	mov	r18,r16
    81ec:	dc002903 	ldbu	r16,164(sp)
    81f0:	e011883a 	mov	r8,fp
    81f4:	84003fcc 	andi	r16,r16,255
    81f8:	80053f1e 	bne	r16,zero,96f8 <___vfprintf_internal_r+0x22d0>
    81fc:	9080080c 	andi	r2,r18,32
    8200:	1002d226 	beq	r2,zero,8d4c <___vfprintf_internal_r+0x1924>
    8204:	d9002e17 	ldw	r4,184(sp)
    8208:	d9402f17 	ldw	r5,188(sp)
    820c:	20800017 	ldw	r2,0(r4)
    8210:	2807d7fa 	srai	r3,r5,31
    8214:	21000104 	addi	r4,r4,4
    8218:	d9002e15 	stw	r4,184(sp)
    821c:	11400015 	stw	r5,0(r2)
    8220:	10c00115 	stw	r3,4(r2)
    8224:	003cb806 	br	7508 <__alt_data_end+0xfffe7508>
    8228:	d8c02e17 	ldw	r3,184(sp)
    822c:	d9002e17 	ldw	r4,184(sp)
    8230:	8025883a 	mov	r18,r16
    8234:	18800017 	ldw	r2,0(r3)
    8238:	21000104 	addi	r4,r4,4
    823c:	00c00044 	movi	r3,1
    8240:	e011883a 	mov	r8,fp
    8244:	d8c02915 	stw	r3,164(sp)
    8248:	d8002785 	stb	zero,158(sp)
    824c:	d8801405 	stb	r2,80(sp)
    8250:	d9002e15 	stw	r4,184(sp)
    8254:	d8c02b15 	stw	r3,172(sp)
    8258:	d8002a15 	stw	zero,168(sp)
    825c:	d8003215 	stw	zero,200(sp)
    8260:	dc001404 	addi	r16,sp,80
    8264:	0039883a 	mov	fp,zero
    8268:	003e5306 	br	7bb8 <__alt_data_end+0xfffe7bb8>
    826c:	01000074 	movhi	r4,1
    8270:	210af904 	addi	r4,r4,11236
    8274:	0039883a 	mov	fp,zero
    8278:	d9003915 	stw	r4,228(sp)
    827c:	04401e04 	movi	r17,120
    8280:	003f6906 	br	8028 <__alt_data_end+0xfffe8028>
    8284:	8025883a 	mov	r18,r16
    8288:	dc002903 	ldbu	r16,164(sp)
    828c:	e011883a 	mov	r8,fp
    8290:	84003fcc 	andi	r16,r16,255
    8294:	8005081e 	bne	r16,zero,96b8 <___vfprintf_internal_r+0x2290>
    8298:	883d6126 	beq	r17,zero,7820 <__alt_data_end+0xfffe7820>
    829c:	00c00044 	movi	r3,1
    82a0:	d8c02915 	stw	r3,164(sp)
    82a4:	dc401405 	stb	r17,80(sp)
    82a8:	d8002785 	stb	zero,158(sp)
    82ac:	003fe906 	br	8254 <__alt_data_end+0xfffe8254>
    82b0:	01400074 	movhi	r5,1
    82b4:	294af904 	addi	r5,r5,11236
    82b8:	d9403915 	stw	r5,228(sp)
    82bc:	d8c02e15 	stw	r3,184(sp)
    82c0:	1025883a 	mov	r18,r2
    82c4:	04401e04 	movi	r17,120
    82c8:	9d84b03a 	or	r2,r19,r22
    82cc:	1000fc1e 	bne	r2,zero,86c0 <___vfprintf_internal_r+0x1298>
    82d0:	0039883a 	mov	fp,zero
    82d4:	00800084 	movi	r2,2
    82d8:	10803fcc 	andi	r2,r2,255
    82dc:	00c00044 	movi	r3,1
    82e0:	10c20f26 	beq	r2,r3,8b20 <___vfprintf_internal_r+0x16f8>
    82e4:	00c00084 	movi	r3,2
    82e8:	10fd3326 	beq	r2,r3,77b8 <__alt_data_end+0xfffe77b8>
    82ec:	003e0b06 	br	7b1c <__alt_data_end+0xfffe7b1c>
    82f0:	d8c02017 	ldw	r3,128(sp)
    82f4:	003e7106 	br	7cbc <__alt_data_end+0xfffe7cbc>
    82f8:	00801944 	movi	r2,101
    82fc:	14407e0e 	bge	r2,r17,84f8 <___vfprintf_internal_r+0x10d0>
    8300:	d9003617 	ldw	r4,216(sp)
    8304:	d9403817 	ldw	r5,224(sp)
    8308:	000d883a 	mov	r6,zero
    830c:	000f883a 	mov	r7,zero
    8310:	d8c03c15 	stw	r3,240(sp)
    8314:	da003d15 	stw	r8,244(sp)
    8318:	000ff680 	call	ff68 <__eqdf2>
    831c:	d8c03c17 	ldw	r3,240(sp)
    8320:	da003d17 	ldw	r8,244(sp)
    8324:	1000f71e 	bne	r2,zero,8704 <___vfprintf_internal_r+0x12dc>
    8328:	d8801f17 	ldw	r2,124(sp)
    832c:	01000074 	movhi	r4,1
    8330:	210b0004 	addi	r4,r4,11264
    8334:	18c00044 	addi	r3,r3,1
    8338:	10800044 	addi	r2,r2,1
    833c:	41000015 	stw	r4,0(r8)
    8340:	01000044 	movi	r4,1
    8344:	41000115 	stw	r4,4(r8)
    8348:	d8c02015 	stw	r3,128(sp)
    834c:	d8801f15 	stw	r2,124(sp)
    8350:	010001c4 	movi	r4,7
    8354:	2082b816 	blt	r4,r2,8e38 <___vfprintf_internal_r+0x1a10>
    8358:	42000204 	addi	r8,r8,8
    835c:	d8802617 	ldw	r2,152(sp)
    8360:	d9403317 	ldw	r5,204(sp)
    8364:	11400216 	blt	r2,r5,8370 <___vfprintf_internal_r+0xf48>
    8368:	9080004c 	andi	r2,r18,1
    836c:	103eb326 	beq	r2,zero,7e3c <__alt_data_end+0xfffe7e3c>
    8370:	d8803717 	ldw	r2,220(sp)
    8374:	d9003417 	ldw	r4,208(sp)
    8378:	d9403717 	ldw	r5,220(sp)
    837c:	1887883a 	add	r3,r3,r2
    8380:	d8801f17 	ldw	r2,124(sp)
    8384:	41000015 	stw	r4,0(r8)
    8388:	41400115 	stw	r5,4(r8)
    838c:	10800044 	addi	r2,r2,1
    8390:	d8c02015 	stw	r3,128(sp)
    8394:	d8801f15 	stw	r2,124(sp)
    8398:	010001c4 	movi	r4,7
    839c:	20832916 	blt	r4,r2,9044 <___vfprintf_internal_r+0x1c1c>
    83a0:	42000204 	addi	r8,r8,8
    83a4:	d8803317 	ldw	r2,204(sp)
    83a8:	143fffc4 	addi	r16,r2,-1
    83ac:	043ea30e 	bge	zero,r16,7e3c <__alt_data_end+0xfffe7e3c>
    83b0:	04400404 	movi	r17,16
    83b4:	d8801f17 	ldw	r2,124(sp)
    83b8:	8c00880e 	bge	r17,r16,85dc <___vfprintf_internal_r+0x11b4>
    83bc:	01400074 	movhi	r5,1
    83c0:	294b0084 	addi	r5,r5,11266
    83c4:	d9402c15 	stw	r5,176(sp)
    83c8:	058001c4 	movi	r22,7
    83cc:	dcc02d17 	ldw	r19,180(sp)
    83d0:	00000306 	br	83e0 <___vfprintf_internal_r+0xfb8>
    83d4:	42000204 	addi	r8,r8,8
    83d8:	843ffc04 	addi	r16,r16,-16
    83dc:	8c00820e 	bge	r17,r16,85e8 <___vfprintf_internal_r+0x11c0>
    83e0:	18c00404 	addi	r3,r3,16
    83e4:	10800044 	addi	r2,r2,1
    83e8:	45000015 	stw	r20,0(r8)
    83ec:	44400115 	stw	r17,4(r8)
    83f0:	d8c02015 	stw	r3,128(sp)
    83f4:	d8801f15 	stw	r2,124(sp)
    83f8:	b0bff60e 	bge	r22,r2,83d4 <__alt_data_end+0xfffe83d4>
    83fc:	d9801e04 	addi	r6,sp,120
    8400:	b80b883a 	mov	r5,r23
    8404:	9809883a 	mov	r4,r19
    8408:	000d7880 	call	d788 <__sprint_r>
    840c:	103d0a1e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    8410:	d8c02017 	ldw	r3,128(sp)
    8414:	d8801f17 	ldw	r2,124(sp)
    8418:	da000404 	addi	r8,sp,16
    841c:	003fee06 	br	83d8 <__alt_data_end+0xfffe83d8>
    8420:	d9403117 	ldw	r5,196(sp)
    8424:	d8802917 	ldw	r2,164(sp)
    8428:	28adc83a 	sub	r22,r5,r2
    842c:	05be410e 	bge	zero,r22,7d34 <__alt_data_end+0xfffe7d34>
    8430:	07000404 	movi	fp,16
    8434:	d8801f17 	ldw	r2,124(sp)
    8438:	e5838f0e 	bge	fp,r22,9278 <___vfprintf_internal_r+0x1e50>
    843c:	01400074 	movhi	r5,1
    8440:	294b0084 	addi	r5,r5,11266
    8444:	dc403015 	stw	r17,192(sp)
    8448:	d9402c15 	stw	r5,176(sp)
    844c:	b023883a 	mov	r17,r22
    8450:	04c001c4 	movi	r19,7
    8454:	a82d883a 	mov	r22,r21
    8458:	902b883a 	mov	r21,r18
    845c:	8025883a 	mov	r18,r16
    8460:	dc002d17 	ldw	r16,180(sp)
    8464:	00000306 	br	8474 <___vfprintf_internal_r+0x104c>
    8468:	8c7ffc04 	addi	r17,r17,-16
    846c:	42000204 	addi	r8,r8,8
    8470:	e440110e 	bge	fp,r17,84b8 <___vfprintf_internal_r+0x1090>
    8474:	18c00404 	addi	r3,r3,16
    8478:	10800044 	addi	r2,r2,1
    847c:	45000015 	stw	r20,0(r8)
    8480:	47000115 	stw	fp,4(r8)
    8484:	d8c02015 	stw	r3,128(sp)
    8488:	d8801f15 	stw	r2,124(sp)
    848c:	98bff60e 	bge	r19,r2,8468 <__alt_data_end+0xfffe8468>
    8490:	d9801e04 	addi	r6,sp,120
    8494:	b80b883a 	mov	r5,r23
    8498:	8009883a 	mov	r4,r16
    849c:	000d7880 	call	d788 <__sprint_r>
    84a0:	103ce51e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    84a4:	8c7ffc04 	addi	r17,r17,-16
    84a8:	d8c02017 	ldw	r3,128(sp)
    84ac:	d8801f17 	ldw	r2,124(sp)
    84b0:	da000404 	addi	r8,sp,16
    84b4:	e47fef16 	blt	fp,r17,8474 <__alt_data_end+0xfffe8474>
    84b8:	9021883a 	mov	r16,r18
    84bc:	a825883a 	mov	r18,r21
    84c0:	b02b883a 	mov	r21,r22
    84c4:	882d883a 	mov	r22,r17
    84c8:	dc403017 	ldw	r17,192(sp)
    84cc:	d9002c17 	ldw	r4,176(sp)
    84d0:	1d87883a 	add	r3,r3,r22
    84d4:	10800044 	addi	r2,r2,1
    84d8:	41000015 	stw	r4,0(r8)
    84dc:	45800115 	stw	r22,4(r8)
    84e0:	d8c02015 	stw	r3,128(sp)
    84e4:	d8801f15 	stw	r2,124(sp)
    84e8:	010001c4 	movi	r4,7
    84ec:	20818e16 	blt	r4,r2,8b28 <___vfprintf_internal_r+0x1700>
    84f0:	42000204 	addi	r8,r8,8
    84f4:	003e0f06 	br	7d34 <__alt_data_end+0xfffe7d34>
    84f8:	d9403317 	ldw	r5,204(sp)
    84fc:	00800044 	movi	r2,1
    8500:	18c00044 	addi	r3,r3,1
    8504:	1141530e 	bge	r2,r5,8a54 <___vfprintf_internal_r+0x162c>
    8508:	dc401f17 	ldw	r17,124(sp)
    850c:	00800044 	movi	r2,1
    8510:	40800115 	stw	r2,4(r8)
    8514:	8c400044 	addi	r17,r17,1
    8518:	44000015 	stw	r16,0(r8)
    851c:	d8c02015 	stw	r3,128(sp)
    8520:	dc401f15 	stw	r17,124(sp)
    8524:	008001c4 	movi	r2,7
    8528:	14416b16 	blt	r2,r17,8ad8 <___vfprintf_internal_r+0x16b0>
    852c:	42000204 	addi	r8,r8,8
    8530:	d8803717 	ldw	r2,220(sp)
    8534:	d9003417 	ldw	r4,208(sp)
    8538:	8c400044 	addi	r17,r17,1
    853c:	10c7883a 	add	r3,r2,r3
    8540:	40800115 	stw	r2,4(r8)
    8544:	41000015 	stw	r4,0(r8)
    8548:	d8c02015 	stw	r3,128(sp)
    854c:	dc401f15 	stw	r17,124(sp)
    8550:	008001c4 	movi	r2,7
    8554:	14416916 	blt	r2,r17,8afc <___vfprintf_internal_r+0x16d4>
    8558:	45800204 	addi	r22,r8,8
    855c:	d9003617 	ldw	r4,216(sp)
    8560:	d9403817 	ldw	r5,224(sp)
    8564:	000d883a 	mov	r6,zero
    8568:	000f883a 	mov	r7,zero
    856c:	d8c03c15 	stw	r3,240(sp)
    8570:	000ff680 	call	ff68 <__eqdf2>
    8574:	d8c03c17 	ldw	r3,240(sp)
    8578:	1000bc26 	beq	r2,zero,886c <___vfprintf_internal_r+0x1444>
    857c:	d9403317 	ldw	r5,204(sp)
    8580:	84000044 	addi	r16,r16,1
    8584:	8c400044 	addi	r17,r17,1
    8588:	28bfffc4 	addi	r2,r5,-1
    858c:	1887883a 	add	r3,r3,r2
    8590:	b0800115 	stw	r2,4(r22)
    8594:	b4000015 	stw	r16,0(r22)
    8598:	d8c02015 	stw	r3,128(sp)
    859c:	dc401f15 	stw	r17,124(sp)
    85a0:	008001c4 	movi	r2,7
    85a4:	14414316 	blt	r2,r17,8ab4 <___vfprintf_internal_r+0x168c>
    85a8:	b5800204 	addi	r22,r22,8
    85ac:	d9003a17 	ldw	r4,232(sp)
    85b0:	df0022c4 	addi	fp,sp,139
    85b4:	8c400044 	addi	r17,r17,1
    85b8:	20c7883a 	add	r3,r4,r3
    85bc:	b7000015 	stw	fp,0(r22)
    85c0:	b1000115 	stw	r4,4(r22)
    85c4:	d8c02015 	stw	r3,128(sp)
    85c8:	dc401f15 	stw	r17,124(sp)
    85cc:	008001c4 	movi	r2,7
    85d0:	14400e16 	blt	r2,r17,860c <___vfprintf_internal_r+0x11e4>
    85d4:	b2000204 	addi	r8,r22,8
    85d8:	003e1806 	br	7e3c <__alt_data_end+0xfffe7e3c>
    85dc:	01000074 	movhi	r4,1
    85e0:	210b0084 	addi	r4,r4,11266
    85e4:	d9002c15 	stw	r4,176(sp)
    85e8:	d9002c17 	ldw	r4,176(sp)
    85ec:	1c07883a 	add	r3,r3,r16
    85f0:	44000115 	stw	r16,4(r8)
    85f4:	41000015 	stw	r4,0(r8)
    85f8:	10800044 	addi	r2,r2,1
    85fc:	d8c02015 	stw	r3,128(sp)
    8600:	d8801f15 	stw	r2,124(sp)
    8604:	010001c4 	movi	r4,7
    8608:	20be0b0e 	bge	r4,r2,7e38 <__alt_data_end+0xfffe7e38>
    860c:	d9002d17 	ldw	r4,180(sp)
    8610:	d9801e04 	addi	r6,sp,120
    8614:	b80b883a 	mov	r5,r23
    8618:	000d7880 	call	d788 <__sprint_r>
    861c:	103c861e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    8620:	d8c02017 	ldw	r3,128(sp)
    8624:	da000404 	addi	r8,sp,16
    8628:	003e0406 	br	7e3c <__alt_data_end+0xfffe7e3c>
    862c:	d9002d17 	ldw	r4,180(sp)
    8630:	d9801e04 	addi	r6,sp,120
    8634:	b80b883a 	mov	r5,r23
    8638:	000d7880 	call	d788 <__sprint_r>
    863c:	103e3b26 	beq	r2,zero,7f2c <__alt_data_end+0xfffe7f2c>
    8640:	003c7d06 	br	7838 <__alt_data_end+0xfffe7838>
    8644:	d9002d17 	ldw	r4,180(sp)
    8648:	d9801e04 	addi	r6,sp,120
    864c:	b80b883a 	mov	r5,r23
    8650:	000d7880 	call	d788 <__sprint_r>
    8654:	103c781e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    8658:	d8c02017 	ldw	r3,128(sp)
    865c:	da000404 	addi	r8,sp,16
    8660:	003de906 	br	7e08 <__alt_data_end+0xfffe7e08>
    8664:	d9002d17 	ldw	r4,180(sp)
    8668:	d9801e04 	addi	r6,sp,120
    866c:	b80b883a 	mov	r5,r23
    8670:	000d7880 	call	d788 <__sprint_r>
    8674:	103c701e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    8678:	d8c02017 	ldw	r3,128(sp)
    867c:	da000404 	addi	r8,sp,16
    8680:	003d9b06 	br	7cf0 <__alt_data_end+0xfffe7cf0>
    8684:	d9002d17 	ldw	r4,180(sp)
    8688:	d9801e04 	addi	r6,sp,120
    868c:	b80b883a 	mov	r5,r23
    8690:	000d7880 	call	d788 <__sprint_r>
    8694:	103c681e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    8698:	d8c02017 	ldw	r3,128(sp)
    869c:	da000404 	addi	r8,sp,16
    86a0:	003da106 	br	7d28 <__alt_data_end+0xfffe7d28>
    86a4:	d9402a17 	ldw	r5,168(sp)
    86a8:	d8002785 	stb	zero,158(sp)
    86ac:	283f0616 	blt	r5,zero,82c8 <__alt_data_end+0xfffe82c8>
    86b0:	00ffdfc4 	movi	r3,-129
    86b4:	9d84b03a 	or	r2,r19,r22
    86b8:	90e4703a 	and	r18,r18,r3
    86bc:	103c3b26 	beq	r2,zero,77ac <__alt_data_end+0xfffe77ac>
    86c0:	0039883a 	mov	fp,zero
    86c4:	003e5806 	br	8028 <__alt_data_end+0xfffe8028>
    86c8:	9080040c 	andi	r2,r18,16
    86cc:	1001b326 	beq	r2,zero,8d9c <___vfprintf_internal_r+0x1974>
    86d0:	d8c02e17 	ldw	r3,184(sp)
    86d4:	d9002a17 	ldw	r4,168(sp)
    86d8:	d8002785 	stb	zero,158(sp)
    86dc:	18800104 	addi	r2,r3,4
    86e0:	1cc00017 	ldw	r19,0(r3)
    86e4:	002d883a 	mov	r22,zero
    86e8:	2001b516 	blt	r4,zero,8dc0 <___vfprintf_internal_r+0x1998>
    86ec:	00ffdfc4 	movi	r3,-129
    86f0:	d8802e15 	stw	r2,184(sp)
    86f4:	90e4703a 	and	r18,r18,r3
    86f8:	983d0526 	beq	r19,zero,7b10 <__alt_data_end+0xfffe7b10>
    86fc:	0039883a 	mov	fp,zero
    8700:	003d0806 	br	7b24 <__alt_data_end+0xfffe7b24>
    8704:	dc402617 	ldw	r17,152(sp)
    8708:	0441d30e 	bge	zero,r17,8e58 <___vfprintf_internal_r+0x1a30>
    870c:	dc403217 	ldw	r17,200(sp)
    8710:	d8803317 	ldw	r2,204(sp)
    8714:	1440010e 	bge	r2,r17,871c <___vfprintf_internal_r+0x12f4>
    8718:	1023883a 	mov	r17,r2
    871c:	04400a0e 	bge	zero,r17,8748 <___vfprintf_internal_r+0x1320>
    8720:	d8801f17 	ldw	r2,124(sp)
    8724:	1c47883a 	add	r3,r3,r17
    8728:	44000015 	stw	r16,0(r8)
    872c:	10800044 	addi	r2,r2,1
    8730:	44400115 	stw	r17,4(r8)
    8734:	d8c02015 	stw	r3,128(sp)
    8738:	d8801f15 	stw	r2,124(sp)
    873c:	010001c4 	movi	r4,7
    8740:	20826516 	blt	r4,r2,90d8 <___vfprintf_internal_r+0x1cb0>
    8744:	42000204 	addi	r8,r8,8
    8748:	88026116 	blt	r17,zero,90d0 <___vfprintf_internal_r+0x1ca8>
    874c:	d9003217 	ldw	r4,200(sp)
    8750:	2463c83a 	sub	r17,r4,r17
    8754:	04407b0e 	bge	zero,r17,8944 <___vfprintf_internal_r+0x151c>
    8758:	05800404 	movi	r22,16
    875c:	d8801f17 	ldw	r2,124(sp)
    8760:	b4419d0e 	bge	r22,r17,8dd8 <___vfprintf_internal_r+0x19b0>
    8764:	01000074 	movhi	r4,1
    8768:	210b0084 	addi	r4,r4,11266
    876c:	d9002c15 	stw	r4,176(sp)
    8770:	070001c4 	movi	fp,7
    8774:	dcc02d17 	ldw	r19,180(sp)
    8778:	00000306 	br	8788 <___vfprintf_internal_r+0x1360>
    877c:	42000204 	addi	r8,r8,8
    8780:	8c7ffc04 	addi	r17,r17,-16
    8784:	b441970e 	bge	r22,r17,8de4 <___vfprintf_internal_r+0x19bc>
    8788:	18c00404 	addi	r3,r3,16
    878c:	10800044 	addi	r2,r2,1
    8790:	45000015 	stw	r20,0(r8)
    8794:	45800115 	stw	r22,4(r8)
    8798:	d8c02015 	stw	r3,128(sp)
    879c:	d8801f15 	stw	r2,124(sp)
    87a0:	e0bff60e 	bge	fp,r2,877c <__alt_data_end+0xfffe877c>
    87a4:	d9801e04 	addi	r6,sp,120
    87a8:	b80b883a 	mov	r5,r23
    87ac:	9809883a 	mov	r4,r19
    87b0:	000d7880 	call	d788 <__sprint_r>
    87b4:	103c201e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    87b8:	d8c02017 	ldw	r3,128(sp)
    87bc:	d8801f17 	ldw	r2,124(sp)
    87c0:	da000404 	addi	r8,sp,16
    87c4:	003fee06 	br	8780 <__alt_data_end+0xfffe8780>
    87c8:	d9002d17 	ldw	r4,180(sp)
    87cc:	d9801e04 	addi	r6,sp,120
    87d0:	b80b883a 	mov	r5,r23
    87d4:	000d7880 	call	d788 <__sprint_r>
    87d8:	103c171e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    87dc:	d8c02017 	ldw	r3,128(sp)
    87e0:	df002787 	ldb	fp,158(sp)
    87e4:	da000404 	addi	r8,sp,16
    87e8:	003d3406 	br	7cbc <__alt_data_end+0xfffe7cbc>
    87ec:	9080040c 	andi	r2,r18,16
    87f0:	10016126 	beq	r2,zero,8d78 <___vfprintf_internal_r+0x1950>
    87f4:	d9402e17 	ldw	r5,184(sp)
    87f8:	2cc00017 	ldw	r19,0(r5)
    87fc:	29400104 	addi	r5,r5,4
    8800:	d9402e15 	stw	r5,184(sp)
    8804:	982dd7fa 	srai	r22,r19,31
    8808:	b005883a 	mov	r2,r22
    880c:	003c5a06 	br	7978 <__alt_data_end+0xfffe7978>
    8810:	9080040c 	andi	r2,r18,16
    8814:	10003526 	beq	r2,zero,88ec <___vfprintf_internal_r+0x14c4>
    8818:	d8c02e17 	ldw	r3,184(sp)
    881c:	d9002a17 	ldw	r4,168(sp)
    8820:	d8002785 	stb	zero,158(sp)
    8824:	18800104 	addi	r2,r3,4
    8828:	1cc00017 	ldw	r19,0(r3)
    882c:	002d883a 	mov	r22,zero
    8830:	20003716 	blt	r4,zero,8910 <___vfprintf_internal_r+0x14e8>
    8834:	00ffdfc4 	movi	r3,-129
    8838:	d8802e15 	stw	r2,184(sp)
    883c:	90e4703a 	and	r18,r18,r3
    8840:	0039883a 	mov	fp,zero
    8844:	983dd426 	beq	r19,zero,7f98 <__alt_data_end+0xfffe7f98>
    8848:	00800244 	movi	r2,9
    884c:	14fc5336 	bltu	r2,r19,799c <__alt_data_end+0xfffe799c>
    8850:	d8c02817 	ldw	r3,160(sp)
    8854:	dc001dc4 	addi	r16,sp,119
    8858:	9cc00c04 	addi	r19,r19,48
    885c:	1c07c83a 	sub	r3,r3,r16
    8860:	dcc01dc5 	stb	r19,119(sp)
    8864:	d8c02b15 	stw	r3,172(sp)
    8868:	003cc606 	br	7b84 <__alt_data_end+0xfffe7b84>
    886c:	d8803317 	ldw	r2,204(sp)
    8870:	143fffc4 	addi	r16,r2,-1
    8874:	043f4d0e 	bge	zero,r16,85ac <__alt_data_end+0xfffe85ac>
    8878:	07000404 	movi	fp,16
    887c:	e400810e 	bge	fp,r16,8a84 <___vfprintf_internal_r+0x165c>
    8880:	01400074 	movhi	r5,1
    8884:	294b0084 	addi	r5,r5,11266
    8888:	d9402c15 	stw	r5,176(sp)
    888c:	01c001c4 	movi	r7,7
    8890:	dcc02d17 	ldw	r19,180(sp)
    8894:	00000306 	br	88a4 <___vfprintf_internal_r+0x147c>
    8898:	b5800204 	addi	r22,r22,8
    889c:	843ffc04 	addi	r16,r16,-16
    88a0:	e4007b0e 	bge	fp,r16,8a90 <___vfprintf_internal_r+0x1668>
    88a4:	18c00404 	addi	r3,r3,16
    88a8:	8c400044 	addi	r17,r17,1
    88ac:	b5000015 	stw	r20,0(r22)
    88b0:	b7000115 	stw	fp,4(r22)
    88b4:	d8c02015 	stw	r3,128(sp)
    88b8:	dc401f15 	stw	r17,124(sp)
    88bc:	3c7ff60e 	bge	r7,r17,8898 <__alt_data_end+0xfffe8898>
    88c0:	d9801e04 	addi	r6,sp,120
    88c4:	b80b883a 	mov	r5,r23
    88c8:	9809883a 	mov	r4,r19
    88cc:	d9c03c15 	stw	r7,240(sp)
    88d0:	000d7880 	call	d788 <__sprint_r>
    88d4:	d9c03c17 	ldw	r7,240(sp)
    88d8:	103bd71e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    88dc:	d8c02017 	ldw	r3,128(sp)
    88e0:	dc401f17 	ldw	r17,124(sp)
    88e4:	dd800404 	addi	r22,sp,16
    88e8:	003fec06 	br	889c <__alt_data_end+0xfffe889c>
    88ec:	9080100c 	andi	r2,r18,64
    88f0:	d8002785 	stb	zero,158(sp)
    88f4:	10010e26 	beq	r2,zero,8d30 <___vfprintf_internal_r+0x1908>
    88f8:	d9402e17 	ldw	r5,184(sp)
    88fc:	d8c02a17 	ldw	r3,168(sp)
    8900:	002d883a 	mov	r22,zero
    8904:	28800104 	addi	r2,r5,4
    8908:	2cc0000b 	ldhu	r19,0(r5)
    890c:	183fc90e 	bge	r3,zero,8834 <__alt_data_end+0xfffe8834>
    8910:	d8802e15 	stw	r2,184(sp)
    8914:	0039883a 	mov	fp,zero
    8918:	9d84b03a 	or	r2,r19,r22
    891c:	103c1e1e 	bne	r2,zero,7998 <__alt_data_end+0xfffe7998>
    8920:	00800044 	movi	r2,1
    8924:	003e6c06 	br	82d8 <__alt_data_end+0xfffe82d8>
    8928:	d9002d17 	ldw	r4,180(sp)
    892c:	d9801e04 	addi	r6,sp,120
    8930:	b80b883a 	mov	r5,r23
    8934:	000d7880 	call	d788 <__sprint_r>
    8938:	103bbf1e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    893c:	d8c02017 	ldw	r3,128(sp)
    8940:	da000404 	addi	r8,sp,16
    8944:	d9003217 	ldw	r4,200(sp)
    8948:	d8802617 	ldw	r2,152(sp)
    894c:	d9403317 	ldw	r5,204(sp)
    8950:	8123883a 	add	r17,r16,r4
    8954:	11400216 	blt	r2,r5,8960 <___vfprintf_internal_r+0x1538>
    8958:	9100004c 	andi	r4,r18,1
    895c:	20000d26 	beq	r4,zero,8994 <___vfprintf_internal_r+0x156c>
    8960:	d9003717 	ldw	r4,220(sp)
    8964:	d9403417 	ldw	r5,208(sp)
    8968:	1907883a 	add	r3,r3,r4
    896c:	d9001f17 	ldw	r4,124(sp)
    8970:	41400015 	stw	r5,0(r8)
    8974:	d9403717 	ldw	r5,220(sp)
    8978:	21000044 	addi	r4,r4,1
    897c:	d8c02015 	stw	r3,128(sp)
    8980:	41400115 	stw	r5,4(r8)
    8984:	d9001f15 	stw	r4,124(sp)
    8988:	014001c4 	movi	r5,7
    898c:	2901e816 	blt	r5,r4,9130 <___vfprintf_internal_r+0x1d08>
    8990:	42000204 	addi	r8,r8,8
    8994:	d9003317 	ldw	r4,204(sp)
    8998:	8121883a 	add	r16,r16,r4
    899c:	2085c83a 	sub	r2,r4,r2
    89a0:	8461c83a 	sub	r16,r16,r17
    89a4:	1400010e 	bge	r2,r16,89ac <___vfprintf_internal_r+0x1584>
    89a8:	1021883a 	mov	r16,r2
    89ac:	04000a0e 	bge	zero,r16,89d8 <___vfprintf_internal_r+0x15b0>
    89b0:	d9001f17 	ldw	r4,124(sp)
    89b4:	1c07883a 	add	r3,r3,r16
    89b8:	44400015 	stw	r17,0(r8)
    89bc:	21000044 	addi	r4,r4,1
    89c0:	44000115 	stw	r16,4(r8)
    89c4:	d8c02015 	stw	r3,128(sp)
    89c8:	d9001f15 	stw	r4,124(sp)
    89cc:	014001c4 	movi	r5,7
    89d0:	2901fb16 	blt	r5,r4,91c0 <___vfprintf_internal_r+0x1d98>
    89d4:	42000204 	addi	r8,r8,8
    89d8:	8001f716 	blt	r16,zero,91b8 <___vfprintf_internal_r+0x1d90>
    89dc:	1421c83a 	sub	r16,r2,r16
    89e0:	043d160e 	bge	zero,r16,7e3c <__alt_data_end+0xfffe7e3c>
    89e4:	04400404 	movi	r17,16
    89e8:	d8801f17 	ldw	r2,124(sp)
    89ec:	8c3efb0e 	bge	r17,r16,85dc <__alt_data_end+0xfffe85dc>
    89f0:	01400074 	movhi	r5,1
    89f4:	294b0084 	addi	r5,r5,11266
    89f8:	d9402c15 	stw	r5,176(sp)
    89fc:	058001c4 	movi	r22,7
    8a00:	dcc02d17 	ldw	r19,180(sp)
    8a04:	00000306 	br	8a14 <___vfprintf_internal_r+0x15ec>
    8a08:	42000204 	addi	r8,r8,8
    8a0c:	843ffc04 	addi	r16,r16,-16
    8a10:	8c3ef50e 	bge	r17,r16,85e8 <__alt_data_end+0xfffe85e8>
    8a14:	18c00404 	addi	r3,r3,16
    8a18:	10800044 	addi	r2,r2,1
    8a1c:	45000015 	stw	r20,0(r8)
    8a20:	44400115 	stw	r17,4(r8)
    8a24:	d8c02015 	stw	r3,128(sp)
    8a28:	d8801f15 	stw	r2,124(sp)
    8a2c:	b0bff60e 	bge	r22,r2,8a08 <__alt_data_end+0xfffe8a08>
    8a30:	d9801e04 	addi	r6,sp,120
    8a34:	b80b883a 	mov	r5,r23
    8a38:	9809883a 	mov	r4,r19
    8a3c:	000d7880 	call	d788 <__sprint_r>
    8a40:	103b7d1e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    8a44:	d8c02017 	ldw	r3,128(sp)
    8a48:	d8801f17 	ldw	r2,124(sp)
    8a4c:	da000404 	addi	r8,sp,16
    8a50:	003fee06 	br	8a0c <__alt_data_end+0xfffe8a0c>
    8a54:	9088703a 	and	r4,r18,r2
    8a58:	203eab1e 	bne	r4,zero,8508 <__alt_data_end+0xfffe8508>
    8a5c:	dc401f17 	ldw	r17,124(sp)
    8a60:	40800115 	stw	r2,4(r8)
    8a64:	44000015 	stw	r16,0(r8)
    8a68:	8c400044 	addi	r17,r17,1
    8a6c:	d8c02015 	stw	r3,128(sp)
    8a70:	dc401f15 	stw	r17,124(sp)
    8a74:	008001c4 	movi	r2,7
    8a78:	14400e16 	blt	r2,r17,8ab4 <___vfprintf_internal_r+0x168c>
    8a7c:	45800204 	addi	r22,r8,8
    8a80:	003eca06 	br	85ac <__alt_data_end+0xfffe85ac>
    8a84:	01000074 	movhi	r4,1
    8a88:	210b0084 	addi	r4,r4,11266
    8a8c:	d9002c15 	stw	r4,176(sp)
    8a90:	d8802c17 	ldw	r2,176(sp)
    8a94:	1c07883a 	add	r3,r3,r16
    8a98:	8c400044 	addi	r17,r17,1
    8a9c:	b0800015 	stw	r2,0(r22)
    8aa0:	b4000115 	stw	r16,4(r22)
    8aa4:	d8c02015 	stw	r3,128(sp)
    8aa8:	dc401f15 	stw	r17,124(sp)
    8aac:	008001c4 	movi	r2,7
    8ab0:	147ebd0e 	bge	r2,r17,85a8 <__alt_data_end+0xfffe85a8>
    8ab4:	d9002d17 	ldw	r4,180(sp)
    8ab8:	d9801e04 	addi	r6,sp,120
    8abc:	b80b883a 	mov	r5,r23
    8ac0:	000d7880 	call	d788 <__sprint_r>
    8ac4:	103b5c1e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    8ac8:	d8c02017 	ldw	r3,128(sp)
    8acc:	dc401f17 	ldw	r17,124(sp)
    8ad0:	dd800404 	addi	r22,sp,16
    8ad4:	003eb506 	br	85ac <__alt_data_end+0xfffe85ac>
    8ad8:	d9002d17 	ldw	r4,180(sp)
    8adc:	d9801e04 	addi	r6,sp,120
    8ae0:	b80b883a 	mov	r5,r23
    8ae4:	000d7880 	call	d788 <__sprint_r>
    8ae8:	103b531e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    8aec:	d8c02017 	ldw	r3,128(sp)
    8af0:	dc401f17 	ldw	r17,124(sp)
    8af4:	da000404 	addi	r8,sp,16
    8af8:	003e8d06 	br	8530 <__alt_data_end+0xfffe8530>
    8afc:	d9002d17 	ldw	r4,180(sp)
    8b00:	d9801e04 	addi	r6,sp,120
    8b04:	b80b883a 	mov	r5,r23
    8b08:	000d7880 	call	d788 <__sprint_r>
    8b0c:	103b4a1e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    8b10:	d8c02017 	ldw	r3,128(sp)
    8b14:	dc401f17 	ldw	r17,124(sp)
    8b18:	dd800404 	addi	r22,sp,16
    8b1c:	003e8f06 	br	855c <__alt_data_end+0xfffe855c>
    8b20:	0027883a 	mov	r19,zero
    8b24:	003f4a06 	br	8850 <__alt_data_end+0xfffe8850>
    8b28:	d9002d17 	ldw	r4,180(sp)
    8b2c:	d9801e04 	addi	r6,sp,120
    8b30:	b80b883a 	mov	r5,r23
    8b34:	000d7880 	call	d788 <__sprint_r>
    8b38:	103b3f1e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    8b3c:	d8c02017 	ldw	r3,128(sp)
    8b40:	da000404 	addi	r8,sp,16
    8b44:	003c7b06 	br	7d34 <__alt_data_end+0xfffe7d34>
    8b48:	d9402a17 	ldw	r5,168(sp)
    8b4c:	04e7c83a 	sub	r19,zero,r19
    8b50:	07000b44 	movi	fp,45
    8b54:	9804c03a 	cmpne	r2,r19,zero
    8b58:	05adc83a 	sub	r22,zero,r22
    8b5c:	df002785 	stb	fp,158(sp)
    8b60:	b0adc83a 	sub	r22,r22,r2
    8b64:	28017b16 	blt	r5,zero,9154 <___vfprintf_internal_r+0x1d2c>
    8b68:	00bfdfc4 	movi	r2,-129
    8b6c:	90a4703a 	and	r18,r18,r2
    8b70:	003b8906 	br	7998 <__alt_data_end+0xfffe7998>
    8b74:	d9003617 	ldw	r4,216(sp)
    8b78:	d9403817 	ldw	r5,224(sp)
    8b7c:	da003d15 	stw	r8,244(sp)
    8b80:	000d53c0 	call	d53c <__fpclassifyd>
    8b84:	da003d17 	ldw	r8,244(sp)
    8b88:	1000f026 	beq	r2,zero,8f4c <___vfprintf_internal_r+0x1b24>
    8b8c:	d9002a17 	ldw	r4,168(sp)
    8b90:	05bff7c4 	movi	r22,-33
    8b94:	00bfffc4 	movi	r2,-1
    8b98:	8dac703a 	and	r22,r17,r22
    8b9c:	20820026 	beq	r4,r2,93a0 <___vfprintf_internal_r+0x1f78>
    8ba0:	008011c4 	movi	r2,71
    8ba4:	b081f726 	beq	r22,r2,9384 <___vfprintf_internal_r+0x1f5c>
    8ba8:	d9003817 	ldw	r4,224(sp)
    8bac:	90c04014 	ori	r3,r18,256
    8bb0:	d8c02c15 	stw	r3,176(sp)
    8bb4:	20021516 	blt	r4,zero,940c <___vfprintf_internal_r+0x1fe4>
    8bb8:	dcc03817 	ldw	r19,224(sp)
    8bbc:	d8002905 	stb	zero,164(sp)
    8bc0:	00801984 	movi	r2,102
    8bc4:	8881f926 	beq	r17,r2,93ac <___vfprintf_internal_r+0x1f84>
    8bc8:	00801184 	movi	r2,70
    8bcc:	88821c26 	beq	r17,r2,9440 <___vfprintf_internal_r+0x2018>
    8bd0:	00801144 	movi	r2,69
    8bd4:	b081ef26 	beq	r22,r2,9394 <___vfprintf_internal_r+0x1f6c>
    8bd8:	d8c02a17 	ldw	r3,168(sp)
    8bdc:	d8802104 	addi	r2,sp,132
    8be0:	d8800315 	stw	r2,12(sp)
    8be4:	d9403617 	ldw	r5,216(sp)
    8be8:	d8802504 	addi	r2,sp,148
    8bec:	d9002d17 	ldw	r4,180(sp)
    8bf0:	d8800215 	stw	r2,8(sp)
    8bf4:	d8802604 	addi	r2,sp,152
    8bf8:	d8c00015 	stw	r3,0(sp)
    8bfc:	d8800115 	stw	r2,4(sp)
    8c00:	01c00084 	movi	r7,2
    8c04:	980d883a 	mov	r6,r19
    8c08:	d8c03c15 	stw	r3,240(sp)
    8c0c:	da003d15 	stw	r8,244(sp)
    8c10:	0009d8c0 	call	9d8c <_dtoa_r>
    8c14:	1021883a 	mov	r16,r2
    8c18:	008019c4 	movi	r2,103
    8c1c:	d8c03c17 	ldw	r3,240(sp)
    8c20:	da003d17 	ldw	r8,244(sp)
    8c24:	88817126 	beq	r17,r2,91ec <___vfprintf_internal_r+0x1dc4>
    8c28:	008011c4 	movi	r2,71
    8c2c:	88829126 	beq	r17,r2,9674 <___vfprintf_internal_r+0x224c>
    8c30:	80f9883a 	add	fp,r16,r3
    8c34:	d9003617 	ldw	r4,216(sp)
    8c38:	000d883a 	mov	r6,zero
    8c3c:	000f883a 	mov	r7,zero
    8c40:	980b883a 	mov	r5,r19
    8c44:	da003d15 	stw	r8,244(sp)
    8c48:	000ff680 	call	ff68 <__eqdf2>
    8c4c:	da003d17 	ldw	r8,244(sp)
    8c50:	10018d26 	beq	r2,zero,9288 <___vfprintf_internal_r+0x1e60>
    8c54:	d8802117 	ldw	r2,132(sp)
    8c58:	1700062e 	bgeu	r2,fp,8c74 <___vfprintf_internal_r+0x184c>
    8c5c:	01000c04 	movi	r4,48
    8c60:	10c00044 	addi	r3,r2,1
    8c64:	d8c02115 	stw	r3,132(sp)
    8c68:	11000005 	stb	r4,0(r2)
    8c6c:	d8802117 	ldw	r2,132(sp)
    8c70:	173ffb36 	bltu	r2,fp,8c60 <__alt_data_end+0xfffe8c60>
    8c74:	1405c83a 	sub	r2,r2,r16
    8c78:	d8803315 	stw	r2,204(sp)
    8c7c:	008011c4 	movi	r2,71
    8c80:	b0817626 	beq	r22,r2,925c <___vfprintf_internal_r+0x1e34>
    8c84:	00801944 	movi	r2,101
    8c88:	1442800e 	bge	r2,r17,968c <___vfprintf_internal_r+0x2264>
    8c8c:	d8c02617 	ldw	r3,152(sp)
    8c90:	00801984 	movi	r2,102
    8c94:	d8c03215 	stw	r3,200(sp)
    8c98:	8881fe26 	beq	r17,r2,9494 <___vfprintf_internal_r+0x206c>
    8c9c:	d8c03217 	ldw	r3,200(sp)
    8ca0:	d9003317 	ldw	r4,204(sp)
    8ca4:	1901dd16 	blt	r3,r4,941c <___vfprintf_internal_r+0x1ff4>
    8ca8:	9480004c 	andi	r18,r18,1
    8cac:	90022b1e 	bne	r18,zero,955c <___vfprintf_internal_r+0x2134>
    8cb0:	1805883a 	mov	r2,r3
    8cb4:	18028316 	blt	r3,zero,96c4 <___vfprintf_internal_r+0x229c>
    8cb8:	d8c03217 	ldw	r3,200(sp)
    8cbc:	044019c4 	movi	r17,103
    8cc0:	d8c02b15 	stw	r3,172(sp)
    8cc4:	df002907 	ldb	fp,164(sp)
    8cc8:	e001531e 	bne	fp,zero,9218 <___vfprintf_internal_r+0x1df0>
    8ccc:	df002783 	ldbu	fp,158(sp)
    8cd0:	d8802915 	stw	r2,164(sp)
    8cd4:	dc802c17 	ldw	r18,176(sp)
    8cd8:	d8002a15 	stw	zero,168(sp)
    8cdc:	003baf06 	br	7b9c <__alt_data_end+0xfffe7b9c>
    8ce0:	d8c02e17 	ldw	r3,184(sp)
    8ce4:	d9002e17 	ldw	r4,184(sp)
    8ce8:	d9402e17 	ldw	r5,184(sp)
    8cec:	18c00017 	ldw	r3,0(r3)
    8cf0:	21000117 	ldw	r4,4(r4)
    8cf4:	29400204 	addi	r5,r5,8
    8cf8:	d8c03615 	stw	r3,216(sp)
    8cfc:	d9003815 	stw	r4,224(sp)
    8d00:	d9402e15 	stw	r5,184(sp)
    8d04:	003b5006 	br	7a48 <__alt_data_end+0xfffe7a48>
    8d08:	ac400007 	ldb	r17,0(r21)
    8d0c:	003a2806 	br	75b0 <__alt_data_end+0xfffe75b0>
    8d10:	9080100c 	andi	r2,r18,64
    8d14:	1000a826 	beq	r2,zero,8fb8 <___vfprintf_internal_r+0x1b90>
    8d18:	d8c02e17 	ldw	r3,184(sp)
    8d1c:	002d883a 	mov	r22,zero
    8d20:	1cc0000b 	ldhu	r19,0(r3)
    8d24:	18c00104 	addi	r3,r3,4
    8d28:	d8c02e15 	stw	r3,184(sp)
    8d2c:	003caf06 	br	7fec <__alt_data_end+0xfffe7fec>
    8d30:	d9002e17 	ldw	r4,184(sp)
    8d34:	d9402a17 	ldw	r5,168(sp)
    8d38:	002d883a 	mov	r22,zero
    8d3c:	20800104 	addi	r2,r4,4
    8d40:	24c00017 	ldw	r19,0(r4)
    8d44:	283ebb0e 	bge	r5,zero,8834 <__alt_data_end+0xfffe8834>
    8d48:	003ef106 	br	8910 <__alt_data_end+0xfffe8910>
    8d4c:	9080040c 	andi	r2,r18,16
    8d50:	1000921e 	bne	r2,zero,8f9c <___vfprintf_internal_r+0x1b74>
    8d54:	9480100c 	andi	r18,r18,64
    8d58:	90013926 	beq	r18,zero,9240 <___vfprintf_internal_r+0x1e18>
    8d5c:	d9402e17 	ldw	r5,184(sp)
    8d60:	d8c02f17 	ldw	r3,188(sp)
    8d64:	28800017 	ldw	r2,0(r5)
    8d68:	29400104 	addi	r5,r5,4
    8d6c:	d9402e15 	stw	r5,184(sp)
    8d70:	10c0000d 	sth	r3,0(r2)
    8d74:	0039e406 	br	7508 <__alt_data_end+0xfffe7508>
    8d78:	9080100c 	andi	r2,r18,64
    8d7c:	10008026 	beq	r2,zero,8f80 <___vfprintf_internal_r+0x1b58>
    8d80:	d8802e17 	ldw	r2,184(sp)
    8d84:	14c0000f 	ldh	r19,0(r2)
    8d88:	10800104 	addi	r2,r2,4
    8d8c:	d8802e15 	stw	r2,184(sp)
    8d90:	982dd7fa 	srai	r22,r19,31
    8d94:	b005883a 	mov	r2,r22
    8d98:	003af706 	br	7978 <__alt_data_end+0xfffe7978>
    8d9c:	9080100c 	andi	r2,r18,64
    8da0:	d8002785 	stb	zero,158(sp)
    8da4:	10008a1e 	bne	r2,zero,8fd0 <___vfprintf_internal_r+0x1ba8>
    8da8:	d9002e17 	ldw	r4,184(sp)
    8dac:	d9402a17 	ldw	r5,168(sp)
    8db0:	002d883a 	mov	r22,zero
    8db4:	20800104 	addi	r2,r4,4
    8db8:	24c00017 	ldw	r19,0(r4)
    8dbc:	283e4b0e 	bge	r5,zero,86ec <__alt_data_end+0xfffe86ec>
    8dc0:	9d86b03a 	or	r3,r19,r22
    8dc4:	d8802e15 	stw	r2,184(sp)
    8dc8:	183e4c1e 	bne	r3,zero,86fc <__alt_data_end+0xfffe86fc>
    8dcc:	0039883a 	mov	fp,zero
    8dd0:	0005883a 	mov	r2,zero
    8dd4:	003d4006 	br	82d8 <__alt_data_end+0xfffe82d8>
    8dd8:	01400074 	movhi	r5,1
    8ddc:	294b0084 	addi	r5,r5,11266
    8de0:	d9402c15 	stw	r5,176(sp)
    8de4:	d9402c17 	ldw	r5,176(sp)
    8de8:	1c47883a 	add	r3,r3,r17
    8dec:	10800044 	addi	r2,r2,1
    8df0:	41400015 	stw	r5,0(r8)
    8df4:	44400115 	stw	r17,4(r8)
    8df8:	d8c02015 	stw	r3,128(sp)
    8dfc:	d8801f15 	stw	r2,124(sp)
    8e00:	010001c4 	movi	r4,7
    8e04:	20bec816 	blt	r4,r2,8928 <__alt_data_end+0xfffe8928>
    8e08:	42000204 	addi	r8,r8,8
    8e0c:	003ecd06 	br	8944 <__alt_data_end+0xfffe8944>
    8e10:	d9002a17 	ldw	r4,168(sp)
    8e14:	d8002785 	stb	zero,158(sp)
    8e18:	203d2d16 	blt	r4,zero,82d0 <__alt_data_end+0xfffe82d0>
    8e1c:	00bfdfc4 	movi	r2,-129
    8e20:	90a4703a 	and	r18,r18,r2
    8e24:	003a6106 	br	77ac <__alt_data_end+0xfffe77ac>
    8e28:	01000074 	movhi	r4,1
    8e2c:	210b0084 	addi	r4,r4,11266
    8e30:	d9002c15 	stw	r4,176(sp)
    8e34:	003bea06 	br	7de0 <__alt_data_end+0xfffe7de0>
    8e38:	d9002d17 	ldw	r4,180(sp)
    8e3c:	d9801e04 	addi	r6,sp,120
    8e40:	b80b883a 	mov	r5,r23
    8e44:	000d7880 	call	d788 <__sprint_r>
    8e48:	103a7b1e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    8e4c:	d8c02017 	ldw	r3,128(sp)
    8e50:	da000404 	addi	r8,sp,16
    8e54:	003d4106 	br	835c <__alt_data_end+0xfffe835c>
    8e58:	d8801f17 	ldw	r2,124(sp)
    8e5c:	01400074 	movhi	r5,1
    8e60:	01000044 	movi	r4,1
    8e64:	18c00044 	addi	r3,r3,1
    8e68:	10800044 	addi	r2,r2,1
    8e6c:	294b0004 	addi	r5,r5,11264
    8e70:	41000115 	stw	r4,4(r8)
    8e74:	41400015 	stw	r5,0(r8)
    8e78:	d8c02015 	stw	r3,128(sp)
    8e7c:	d8801f15 	stw	r2,124(sp)
    8e80:	010001c4 	movi	r4,7
    8e84:	20805c16 	blt	r4,r2,8ff8 <___vfprintf_internal_r+0x1bd0>
    8e88:	42000204 	addi	r8,r8,8
    8e8c:	8800041e 	bne	r17,zero,8ea0 <___vfprintf_internal_r+0x1a78>
    8e90:	d8803317 	ldw	r2,204(sp)
    8e94:	1000021e 	bne	r2,zero,8ea0 <___vfprintf_internal_r+0x1a78>
    8e98:	9080004c 	andi	r2,r18,1
    8e9c:	103be726 	beq	r2,zero,7e3c <__alt_data_end+0xfffe7e3c>
    8ea0:	d9003717 	ldw	r4,220(sp)
    8ea4:	d8801f17 	ldw	r2,124(sp)
    8ea8:	d9403417 	ldw	r5,208(sp)
    8eac:	20c7883a 	add	r3,r4,r3
    8eb0:	10800044 	addi	r2,r2,1
    8eb4:	41000115 	stw	r4,4(r8)
    8eb8:	41400015 	stw	r5,0(r8)
    8ebc:	d8c02015 	stw	r3,128(sp)
    8ec0:	d8801f15 	stw	r2,124(sp)
    8ec4:	010001c4 	movi	r4,7
    8ec8:	20812116 	blt	r4,r2,9350 <___vfprintf_internal_r+0x1f28>
    8ecc:	42000204 	addi	r8,r8,8
    8ed0:	0463c83a 	sub	r17,zero,r17
    8ed4:	0440730e 	bge	zero,r17,90a4 <___vfprintf_internal_r+0x1c7c>
    8ed8:	05800404 	movi	r22,16
    8edc:	b440860e 	bge	r22,r17,90f8 <___vfprintf_internal_r+0x1cd0>
    8ee0:	01400074 	movhi	r5,1
    8ee4:	294b0084 	addi	r5,r5,11266
    8ee8:	d9402c15 	stw	r5,176(sp)
    8eec:	070001c4 	movi	fp,7
    8ef0:	dcc02d17 	ldw	r19,180(sp)
    8ef4:	00000306 	br	8f04 <___vfprintf_internal_r+0x1adc>
    8ef8:	42000204 	addi	r8,r8,8
    8efc:	8c7ffc04 	addi	r17,r17,-16
    8f00:	b440800e 	bge	r22,r17,9104 <___vfprintf_internal_r+0x1cdc>
    8f04:	18c00404 	addi	r3,r3,16
    8f08:	10800044 	addi	r2,r2,1
    8f0c:	45000015 	stw	r20,0(r8)
    8f10:	45800115 	stw	r22,4(r8)
    8f14:	d8c02015 	stw	r3,128(sp)
    8f18:	d8801f15 	stw	r2,124(sp)
    8f1c:	e0bff60e 	bge	fp,r2,8ef8 <__alt_data_end+0xfffe8ef8>
    8f20:	d9801e04 	addi	r6,sp,120
    8f24:	b80b883a 	mov	r5,r23
    8f28:	9809883a 	mov	r4,r19
    8f2c:	000d7880 	call	d788 <__sprint_r>
    8f30:	103a411e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    8f34:	d8c02017 	ldw	r3,128(sp)
    8f38:	d8801f17 	ldw	r2,124(sp)
    8f3c:	da000404 	addi	r8,sp,16
    8f40:	003fee06 	br	8efc <__alt_data_end+0xfffe8efc>
    8f44:	00bfffc4 	movi	r2,-1
    8f48:	003a3f06 	br	7848 <__alt_data_end+0xfffe7848>
    8f4c:	008011c4 	movi	r2,71
    8f50:	1440b816 	blt	r2,r17,9234 <___vfprintf_internal_r+0x1e0c>
    8f54:	04000074 	movhi	r16,1
    8f58:	840af204 	addi	r16,r16,11208
    8f5c:	00c000c4 	movi	r3,3
    8f60:	00bfdfc4 	movi	r2,-129
    8f64:	d8c02915 	stw	r3,164(sp)
    8f68:	90a4703a 	and	r18,r18,r2
    8f6c:	df002783 	ldbu	fp,158(sp)
    8f70:	d8c02b15 	stw	r3,172(sp)
    8f74:	d8002a15 	stw	zero,168(sp)
    8f78:	d8003215 	stw	zero,200(sp)
    8f7c:	003b0706 	br	7b9c <__alt_data_end+0xfffe7b9c>
    8f80:	d8c02e17 	ldw	r3,184(sp)
    8f84:	1cc00017 	ldw	r19,0(r3)
    8f88:	18c00104 	addi	r3,r3,4
    8f8c:	d8c02e15 	stw	r3,184(sp)
    8f90:	982dd7fa 	srai	r22,r19,31
    8f94:	b005883a 	mov	r2,r22
    8f98:	003a7706 	br	7978 <__alt_data_end+0xfffe7978>
    8f9c:	d8c02e17 	ldw	r3,184(sp)
    8fa0:	d9002f17 	ldw	r4,188(sp)
    8fa4:	18800017 	ldw	r2,0(r3)
    8fa8:	18c00104 	addi	r3,r3,4
    8fac:	d8c02e15 	stw	r3,184(sp)
    8fb0:	11000015 	stw	r4,0(r2)
    8fb4:	00395406 	br	7508 <__alt_data_end+0xfffe7508>
    8fb8:	d9002e17 	ldw	r4,184(sp)
    8fbc:	002d883a 	mov	r22,zero
    8fc0:	24c00017 	ldw	r19,0(r4)
    8fc4:	21000104 	addi	r4,r4,4
    8fc8:	d9002e15 	stw	r4,184(sp)
    8fcc:	003c0706 	br	7fec <__alt_data_end+0xfffe7fec>
    8fd0:	d9402e17 	ldw	r5,184(sp)
    8fd4:	d8c02a17 	ldw	r3,168(sp)
    8fd8:	002d883a 	mov	r22,zero
    8fdc:	28800104 	addi	r2,r5,4
    8fe0:	2cc0000b 	ldhu	r19,0(r5)
    8fe4:	183dc10e 	bge	r3,zero,86ec <__alt_data_end+0xfffe86ec>
    8fe8:	003f7506 	br	8dc0 <__alt_data_end+0xfffe8dc0>
    8fec:	04000074 	movhi	r16,1
    8ff0:	840af004 	addi	r16,r16,11200
    8ff4:	003aa706 	br	7a94 <__alt_data_end+0xfffe7a94>
    8ff8:	d9002d17 	ldw	r4,180(sp)
    8ffc:	d9801e04 	addi	r6,sp,120
    9000:	b80b883a 	mov	r5,r23
    9004:	000d7880 	call	d788 <__sprint_r>
    9008:	103a0b1e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    900c:	dc402617 	ldw	r17,152(sp)
    9010:	d8c02017 	ldw	r3,128(sp)
    9014:	da000404 	addi	r8,sp,16
    9018:	003f9c06 	br	8e8c <__alt_data_end+0xfffe8e8c>
    901c:	ac400043 	ldbu	r17,1(r21)
    9020:	84000814 	ori	r16,r16,32
    9024:	ad400044 	addi	r21,r21,1
    9028:	8c403fcc 	andi	r17,r17,255
    902c:	8c40201c 	xori	r17,r17,128
    9030:	8c7fe004 	addi	r17,r17,-128
    9034:	00395e06 	br	75b0 <__alt_data_end+0xfffe75b0>
    9038:	d8c02e15 	stw	r3,184(sp)
    903c:	0039883a 	mov	fp,zero
    9040:	003e3506 	br	8918 <__alt_data_end+0xfffe8918>
    9044:	d9002d17 	ldw	r4,180(sp)
    9048:	d9801e04 	addi	r6,sp,120
    904c:	b80b883a 	mov	r5,r23
    9050:	000d7880 	call	d788 <__sprint_r>
    9054:	1039f81e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    9058:	d8c02017 	ldw	r3,128(sp)
    905c:	da000404 	addi	r8,sp,16
    9060:	003cd006 	br	83a4 <__alt_data_end+0xfffe83a4>
    9064:	8009883a 	mov	r4,r16
    9068:	df003d15 	stw	fp,244(sp)
    906c:	00073900 	call	7390 <strlen>
    9070:	d8802b15 	stw	r2,172(sp)
    9074:	da003d17 	ldw	r8,244(sp)
    9078:	103c200e 	bge	r2,zero,80fc <__alt_data_end+0xfffe80fc>
    907c:	0005883a 	mov	r2,zero
    9080:	003c1e06 	br	80fc <__alt_data_end+0xfffe80fc>
    9084:	d9002d17 	ldw	r4,180(sp)
    9088:	d9801e04 	addi	r6,sp,120
    908c:	b80b883a 	mov	r5,r23
    9090:	000d7880 	call	d788 <__sprint_r>
    9094:	1039e81e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    9098:	d8c02017 	ldw	r3,128(sp)
    909c:	d8801f17 	ldw	r2,124(sp)
    90a0:	da000404 	addi	r8,sp,16
    90a4:	d9403317 	ldw	r5,204(sp)
    90a8:	10800044 	addi	r2,r2,1
    90ac:	44000015 	stw	r16,0(r8)
    90b0:	28c7883a 	add	r3,r5,r3
    90b4:	003b5b06 	br	7e24 <__alt_data_end+0xfffe7e24>
    90b8:	01000074 	movhi	r4,1
    90bc:	210b0484 	addi	r4,r4,11282
    90c0:	d9003515 	stw	r4,212(sp)
    90c4:	003af206 	br	7c90 <__alt_data_end+0xfffe7c90>
    90c8:	013fffc4 	movi	r4,-1
    90cc:	003a0806 	br	78f0 <__alt_data_end+0xfffe78f0>
    90d0:	0023883a 	mov	r17,zero
    90d4:	003d9d06 	br	874c <__alt_data_end+0xfffe874c>
    90d8:	d9002d17 	ldw	r4,180(sp)
    90dc:	d9801e04 	addi	r6,sp,120
    90e0:	b80b883a 	mov	r5,r23
    90e4:	000d7880 	call	d788 <__sprint_r>
    90e8:	1039d31e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    90ec:	d8c02017 	ldw	r3,128(sp)
    90f0:	da000404 	addi	r8,sp,16
    90f4:	003d9406 	br	8748 <__alt_data_end+0xfffe8748>
    90f8:	01000074 	movhi	r4,1
    90fc:	210b0084 	addi	r4,r4,11266
    9100:	d9002c15 	stw	r4,176(sp)
    9104:	d9002c17 	ldw	r4,176(sp)
    9108:	1c47883a 	add	r3,r3,r17
    910c:	10800044 	addi	r2,r2,1
    9110:	41000015 	stw	r4,0(r8)
    9114:	44400115 	stw	r17,4(r8)
    9118:	d8c02015 	stw	r3,128(sp)
    911c:	d8801f15 	stw	r2,124(sp)
    9120:	010001c4 	movi	r4,7
    9124:	20bfd716 	blt	r4,r2,9084 <__alt_data_end+0xfffe9084>
    9128:	42000204 	addi	r8,r8,8
    912c:	003fdd06 	br	90a4 <__alt_data_end+0xfffe90a4>
    9130:	d9002d17 	ldw	r4,180(sp)
    9134:	d9801e04 	addi	r6,sp,120
    9138:	b80b883a 	mov	r5,r23
    913c:	000d7880 	call	d788 <__sprint_r>
    9140:	1039bd1e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    9144:	d8802617 	ldw	r2,152(sp)
    9148:	d8c02017 	ldw	r3,128(sp)
    914c:	da000404 	addi	r8,sp,16
    9150:	003e1006 	br	8994 <__alt_data_end+0xfffe8994>
    9154:	00800044 	movi	r2,1
    9158:	10803fcc 	andi	r2,r2,255
    915c:	00c00044 	movi	r3,1
    9160:	10fa0d26 	beq	r2,r3,7998 <__alt_data_end+0xfffe7998>
    9164:	00c00084 	movi	r3,2
    9168:	10fbaf26 	beq	r2,r3,8028 <__alt_data_end+0xfffe8028>
    916c:	003a6d06 	br	7b24 <__alt_data_end+0xfffe7b24>
    9170:	01000074 	movhi	r4,1
    9174:	210b0484 	addi	r4,r4,11282
    9178:	d9003515 	stw	r4,212(sp)
    917c:	003b5406 	br	7ed0 <__alt_data_end+0xfffe7ed0>
    9180:	d8802a17 	ldw	r2,168(sp)
    9184:	00c00184 	movi	r3,6
    9188:	1880012e 	bgeu	r3,r2,9190 <___vfprintf_internal_r+0x1d68>
    918c:	1805883a 	mov	r2,r3
    9190:	d8802b15 	stw	r2,172(sp)
    9194:	1000ef16 	blt	r2,zero,9554 <___vfprintf_internal_r+0x212c>
    9198:	04000074 	movhi	r16,1
    919c:	d8802915 	stw	r2,164(sp)
    91a0:	dcc02e15 	stw	r19,184(sp)
    91a4:	d8002a15 	stw	zero,168(sp)
    91a8:	d8003215 	stw	zero,200(sp)
    91ac:	840afe04 	addi	r16,r16,11256
    91b0:	0039883a 	mov	fp,zero
    91b4:	003a8006 	br	7bb8 <__alt_data_end+0xfffe7bb8>
    91b8:	0021883a 	mov	r16,zero
    91bc:	003e0706 	br	89dc <__alt_data_end+0xfffe89dc>
    91c0:	d9002d17 	ldw	r4,180(sp)
    91c4:	d9801e04 	addi	r6,sp,120
    91c8:	b80b883a 	mov	r5,r23
    91cc:	000d7880 	call	d788 <__sprint_r>
    91d0:	1039991e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    91d4:	d8802617 	ldw	r2,152(sp)
    91d8:	d9403317 	ldw	r5,204(sp)
    91dc:	d8c02017 	ldw	r3,128(sp)
    91e0:	da000404 	addi	r8,sp,16
    91e4:	2885c83a 	sub	r2,r5,r2
    91e8:	003dfb06 	br	89d8 <__alt_data_end+0xfffe89d8>
    91ec:	9080004c 	andi	r2,r18,1
    91f0:	103e8f1e 	bne	r2,zero,8c30 <__alt_data_end+0xfffe8c30>
    91f4:	d8802117 	ldw	r2,132(sp)
    91f8:	003e9e06 	br	8c74 <__alt_data_end+0xfffe8c74>
    91fc:	1025883a 	mov	r18,r2
    9200:	0039883a 	mov	fp,zero
    9204:	00800084 	movi	r2,2
    9208:	003fd306 	br	9158 <__alt_data_end+0xfffe9158>
    920c:	07000b44 	movi	fp,45
    9210:	df002785 	stb	fp,158(sp)
    9214:	003a1b06 	br	7a84 <__alt_data_end+0xfffe7a84>
    9218:	00c00b44 	movi	r3,45
    921c:	d8c02785 	stb	r3,158(sp)
    9220:	d8802915 	stw	r2,164(sp)
    9224:	dc802c17 	ldw	r18,176(sp)
    9228:	d8002a15 	stw	zero,168(sp)
    922c:	07000b44 	movi	fp,45
    9230:	003a5e06 	br	7bac <__alt_data_end+0xfffe7bac>
    9234:	04000074 	movhi	r16,1
    9238:	840af304 	addi	r16,r16,11212
    923c:	003f4706 	br	8f5c <__alt_data_end+0xfffe8f5c>
    9240:	d9002e17 	ldw	r4,184(sp)
    9244:	d9402f17 	ldw	r5,188(sp)
    9248:	20800017 	ldw	r2,0(r4)
    924c:	21000104 	addi	r4,r4,4
    9250:	d9002e15 	stw	r4,184(sp)
    9254:	11400015 	stw	r5,0(r2)
    9258:	0038ab06 	br	7508 <__alt_data_end+0xfffe7508>
    925c:	dd802617 	ldw	r22,152(sp)
    9260:	00bfff44 	movi	r2,-3
    9264:	b0801c16 	blt	r22,r2,92d8 <___vfprintf_internal_r+0x1eb0>
    9268:	d9402a17 	ldw	r5,168(sp)
    926c:	2d801a16 	blt	r5,r22,92d8 <___vfprintf_internal_r+0x1eb0>
    9270:	dd803215 	stw	r22,200(sp)
    9274:	003e8906 	br	8c9c <__alt_data_end+0xfffe8c9c>
    9278:	01000074 	movhi	r4,1
    927c:	210b0084 	addi	r4,r4,11266
    9280:	d9002c15 	stw	r4,176(sp)
    9284:	003c9106 	br	84cc <__alt_data_end+0xfffe84cc>
    9288:	e005883a 	mov	r2,fp
    928c:	003e7906 	br	8c74 <__alt_data_end+0xfffe8c74>
    9290:	d9002a17 	ldw	r4,168(sp)
    9294:	df002783 	ldbu	fp,158(sp)
    9298:	dcc02e15 	stw	r19,184(sp)
    929c:	d9002915 	stw	r4,164(sp)
    92a0:	d9002b15 	stw	r4,172(sp)
    92a4:	d8002a15 	stw	zero,168(sp)
    92a8:	d8003215 	stw	zero,200(sp)
    92ac:	003a3b06 	br	7b9c <__alt_data_end+0xfffe7b9c>
    92b0:	9080004c 	andi	r2,r18,1
    92b4:	0039883a 	mov	fp,zero
    92b8:	10000426 	beq	r2,zero,92cc <___vfprintf_internal_r+0x1ea4>
    92bc:	00800c04 	movi	r2,48
    92c0:	dc001dc4 	addi	r16,sp,119
    92c4:	d8801dc5 	stb	r2,119(sp)
    92c8:	003b6406 	br	805c <__alt_data_end+0xfffe805c>
    92cc:	d8002b15 	stw	zero,172(sp)
    92d0:	dc001e04 	addi	r16,sp,120
    92d4:	003a2b06 	br	7b84 <__alt_data_end+0xfffe7b84>
    92d8:	8c7fff84 	addi	r17,r17,-2
    92dc:	b5bfffc4 	addi	r22,r22,-1
    92e0:	dd802615 	stw	r22,152(sp)
    92e4:	dc4022c5 	stb	r17,139(sp)
    92e8:	b000bf16 	blt	r22,zero,95e8 <___vfprintf_internal_r+0x21c0>
    92ec:	00800ac4 	movi	r2,43
    92f0:	d8802305 	stb	r2,140(sp)
    92f4:	00800244 	movi	r2,9
    92f8:	15807016 	blt	r2,r22,94bc <___vfprintf_internal_r+0x2094>
    92fc:	00800c04 	movi	r2,48
    9300:	b5800c04 	addi	r22,r22,48
    9304:	d8802345 	stb	r2,141(sp)
    9308:	dd802385 	stb	r22,142(sp)
    930c:	d88023c4 	addi	r2,sp,143
    9310:	df0022c4 	addi	fp,sp,139
    9314:	d8c03317 	ldw	r3,204(sp)
    9318:	1739c83a 	sub	fp,r2,fp
    931c:	d9003317 	ldw	r4,204(sp)
    9320:	e0c7883a 	add	r3,fp,r3
    9324:	df003a15 	stw	fp,232(sp)
    9328:	d8c02b15 	stw	r3,172(sp)
    932c:	00800044 	movi	r2,1
    9330:	1100b30e 	bge	r2,r4,9600 <___vfprintf_internal_r+0x21d8>
    9334:	d8c02b17 	ldw	r3,172(sp)
    9338:	18c00044 	addi	r3,r3,1
    933c:	d8c02b15 	stw	r3,172(sp)
    9340:	1805883a 	mov	r2,r3
    9344:	1800ac16 	blt	r3,zero,95f8 <___vfprintf_internal_r+0x21d0>
    9348:	d8003215 	stw	zero,200(sp)
    934c:	003e5d06 	br	8cc4 <__alt_data_end+0xfffe8cc4>
    9350:	d9002d17 	ldw	r4,180(sp)
    9354:	d9801e04 	addi	r6,sp,120
    9358:	b80b883a 	mov	r5,r23
    935c:	000d7880 	call	d788 <__sprint_r>
    9360:	1039351e 	bne	r2,zero,7838 <__alt_data_end+0xfffe7838>
    9364:	dc402617 	ldw	r17,152(sp)
    9368:	d8c02017 	ldw	r3,128(sp)
    936c:	d8801f17 	ldw	r2,124(sp)
    9370:	da000404 	addi	r8,sp,16
    9374:	003ed606 	br	8ed0 <__alt_data_end+0xfffe8ed0>
    9378:	182b883a 	mov	r21,r3
    937c:	d8002a15 	stw	zero,168(sp)
    9380:	00388c06 	br	75b4 <__alt_data_end+0xfffe75b4>
    9384:	d8802a17 	ldw	r2,168(sp)
    9388:	103e071e 	bne	r2,zero,8ba8 <__alt_data_end+0xfffe8ba8>
    938c:	dc002a15 	stw	r16,168(sp)
    9390:	003e0506 	br	8ba8 <__alt_data_end+0xfffe8ba8>
    9394:	d9002a17 	ldw	r4,168(sp)
    9398:	20c00044 	addi	r3,r4,1
    939c:	003e0f06 	br	8bdc <__alt_data_end+0xfffe8bdc>
    93a0:	01400184 	movi	r5,6
    93a4:	d9402a15 	stw	r5,168(sp)
    93a8:	003dff06 	br	8ba8 <__alt_data_end+0xfffe8ba8>
    93ac:	d8802104 	addi	r2,sp,132
    93b0:	d8800315 	stw	r2,12(sp)
    93b4:	d8802504 	addi	r2,sp,148
    93b8:	d8800215 	stw	r2,8(sp)
    93bc:	d8802604 	addi	r2,sp,152
    93c0:	d8800115 	stw	r2,4(sp)
    93c4:	d8802a17 	ldw	r2,168(sp)
    93c8:	d9403617 	ldw	r5,216(sp)
    93cc:	d9002d17 	ldw	r4,180(sp)
    93d0:	d8800015 	stw	r2,0(sp)
    93d4:	01c000c4 	movi	r7,3
    93d8:	980d883a 	mov	r6,r19
    93dc:	da003d15 	stw	r8,244(sp)
    93e0:	0009d8c0 	call	9d8c <_dtoa_r>
    93e4:	d8c02a17 	ldw	r3,168(sp)
    93e8:	da003d17 	ldw	r8,244(sp)
    93ec:	1021883a 	mov	r16,r2
    93f0:	10f9883a 	add	fp,r2,r3
    93f4:	81000007 	ldb	r4,0(r16)
    93f8:	00800c04 	movi	r2,48
    93fc:	20805e26 	beq	r4,r2,9578 <___vfprintf_internal_r+0x2150>
    9400:	d8c02617 	ldw	r3,152(sp)
    9404:	e0f9883a 	add	fp,fp,r3
    9408:	003e0a06 	br	8c34 <__alt_data_end+0xfffe8c34>
    940c:	00c00b44 	movi	r3,45
    9410:	24e0003c 	xorhi	r19,r4,32768
    9414:	d8c02905 	stb	r3,164(sp)
    9418:	003de906 	br	8bc0 <__alt_data_end+0xfffe8bc0>
    941c:	d8c03217 	ldw	r3,200(sp)
    9420:	00c07a0e 	bge	zero,r3,960c <___vfprintf_internal_r+0x21e4>
    9424:	00800044 	movi	r2,1
    9428:	d9003317 	ldw	r4,204(sp)
    942c:	1105883a 	add	r2,r2,r4
    9430:	d8802b15 	stw	r2,172(sp)
    9434:	10004e16 	blt	r2,zero,9570 <___vfprintf_internal_r+0x2148>
    9438:	044019c4 	movi	r17,103
    943c:	003e2106 	br	8cc4 <__alt_data_end+0xfffe8cc4>
    9440:	d9002a17 	ldw	r4,168(sp)
    9444:	d8802104 	addi	r2,sp,132
    9448:	d8800315 	stw	r2,12(sp)
    944c:	d9000015 	stw	r4,0(sp)
    9450:	d8802504 	addi	r2,sp,148
    9454:	d9403617 	ldw	r5,216(sp)
    9458:	d9002d17 	ldw	r4,180(sp)
    945c:	d8800215 	stw	r2,8(sp)
    9460:	d8802604 	addi	r2,sp,152
    9464:	d8800115 	stw	r2,4(sp)
    9468:	01c000c4 	movi	r7,3
    946c:	980d883a 	mov	r6,r19
    9470:	da003d15 	stw	r8,244(sp)
    9474:	0009d8c0 	call	9d8c <_dtoa_r>
    9478:	d8c02a17 	ldw	r3,168(sp)
    947c:	da003d17 	ldw	r8,244(sp)
    9480:	1021883a 	mov	r16,r2
    9484:	00801184 	movi	r2,70
    9488:	80f9883a 	add	fp,r16,r3
    948c:	88bfd926 	beq	r17,r2,93f4 <__alt_data_end+0xfffe93f4>
    9490:	003de806 	br	8c34 <__alt_data_end+0xfffe8c34>
    9494:	d9002a17 	ldw	r4,168(sp)
    9498:	00c04d0e 	bge	zero,r3,95d0 <___vfprintf_internal_r+0x21a8>
    949c:	2000441e 	bne	r4,zero,95b0 <___vfprintf_internal_r+0x2188>
    94a0:	9480004c 	andi	r18,r18,1
    94a4:	9000421e 	bne	r18,zero,95b0 <___vfprintf_internal_r+0x2188>
    94a8:	1805883a 	mov	r2,r3
    94ac:	18006f16 	blt	r3,zero,966c <___vfprintf_internal_r+0x2244>
    94b0:	d8c03217 	ldw	r3,200(sp)
    94b4:	d8c02b15 	stw	r3,172(sp)
    94b8:	003e0206 	br	8cc4 <__alt_data_end+0xfffe8cc4>
    94bc:	df0022c4 	addi	fp,sp,139
    94c0:	dc002a15 	stw	r16,168(sp)
    94c4:	4027883a 	mov	r19,r8
    94c8:	e021883a 	mov	r16,fp
    94cc:	b009883a 	mov	r4,r22
    94d0:	01400284 	movi	r5,10
    94d4:	0004a2c0 	call	4a2c <__modsi3>
    94d8:	10800c04 	addi	r2,r2,48
    94dc:	843fffc4 	addi	r16,r16,-1
    94e0:	b009883a 	mov	r4,r22
    94e4:	01400284 	movi	r5,10
    94e8:	80800005 	stb	r2,0(r16)
    94ec:	00049a80 	call	49a8 <__divsi3>
    94f0:	102d883a 	mov	r22,r2
    94f4:	00800244 	movi	r2,9
    94f8:	15bff416 	blt	r2,r22,94cc <__alt_data_end+0xfffe94cc>
    94fc:	9811883a 	mov	r8,r19
    9500:	b0800c04 	addi	r2,r22,48
    9504:	8027883a 	mov	r19,r16
    9508:	997fffc4 	addi	r5,r19,-1
    950c:	98bfffc5 	stb	r2,-1(r19)
    9510:	dc002a17 	ldw	r16,168(sp)
    9514:	2f006d2e 	bgeu	r5,fp,96cc <___vfprintf_internal_r+0x22a4>
    9518:	d9c02384 	addi	r7,sp,142
    951c:	3ccfc83a 	sub	r7,r7,r19
    9520:	d9002344 	addi	r4,sp,141
    9524:	e1cf883a 	add	r7,fp,r7
    9528:	00000106 	br	9530 <___vfprintf_internal_r+0x2108>
    952c:	28800003 	ldbu	r2,0(r5)
    9530:	20800005 	stb	r2,0(r4)
    9534:	21000044 	addi	r4,r4,1
    9538:	29400044 	addi	r5,r5,1
    953c:	393ffb1e 	bne	r7,r4,952c <__alt_data_end+0xfffe952c>
    9540:	d8802304 	addi	r2,sp,140
    9544:	14c5c83a 	sub	r2,r2,r19
    9548:	d8c02344 	addi	r3,sp,141
    954c:	1885883a 	add	r2,r3,r2
    9550:	003f7006 	br	9314 <__alt_data_end+0xfffe9314>
    9554:	0005883a 	mov	r2,zero
    9558:	003f0f06 	br	9198 <__alt_data_end+0xfffe9198>
    955c:	d8c03217 	ldw	r3,200(sp)
    9560:	18c00044 	addi	r3,r3,1
    9564:	d8c02b15 	stw	r3,172(sp)
    9568:	1805883a 	mov	r2,r3
    956c:	183fb20e 	bge	r3,zero,9438 <__alt_data_end+0xfffe9438>
    9570:	0005883a 	mov	r2,zero
    9574:	003fb006 	br	9438 <__alt_data_end+0xfffe9438>
    9578:	d9003617 	ldw	r4,216(sp)
    957c:	000d883a 	mov	r6,zero
    9580:	000f883a 	mov	r7,zero
    9584:	980b883a 	mov	r5,r19
    9588:	d8c03c15 	stw	r3,240(sp)
    958c:	da003d15 	stw	r8,244(sp)
    9590:	000ff680 	call	ff68 <__eqdf2>
    9594:	d8c03c17 	ldw	r3,240(sp)
    9598:	da003d17 	ldw	r8,244(sp)
    959c:	103f9826 	beq	r2,zero,9400 <__alt_data_end+0xfffe9400>
    95a0:	00800044 	movi	r2,1
    95a4:	10c7c83a 	sub	r3,r2,r3
    95a8:	d8c02615 	stw	r3,152(sp)
    95ac:	003f9506 	br	9404 <__alt_data_end+0xfffe9404>
    95b0:	d9002a17 	ldw	r4,168(sp)
    95b4:	d8c03217 	ldw	r3,200(sp)
    95b8:	20800044 	addi	r2,r4,1
    95bc:	1885883a 	add	r2,r3,r2
    95c0:	d8802b15 	stw	r2,172(sp)
    95c4:	103dbf0e 	bge	r2,zero,8cc4 <__alt_data_end+0xfffe8cc4>
    95c8:	0005883a 	mov	r2,zero
    95cc:	003dbd06 	br	8cc4 <__alt_data_end+0xfffe8cc4>
    95d0:	2000201e 	bne	r4,zero,9654 <___vfprintf_internal_r+0x222c>
    95d4:	9480004c 	andi	r18,r18,1
    95d8:	90001e1e 	bne	r18,zero,9654 <___vfprintf_internal_r+0x222c>
    95dc:	00800044 	movi	r2,1
    95e0:	d8802b15 	stw	r2,172(sp)
    95e4:	003db706 	br	8cc4 <__alt_data_end+0xfffe8cc4>
    95e8:	00800b44 	movi	r2,45
    95ec:	05adc83a 	sub	r22,zero,r22
    95f0:	d8802305 	stb	r2,140(sp)
    95f4:	003f3f06 	br	92f4 <__alt_data_end+0xfffe92f4>
    95f8:	0005883a 	mov	r2,zero
    95fc:	003f5206 	br	9348 <__alt_data_end+0xfffe9348>
    9600:	90a4703a 	and	r18,r18,r2
    9604:	903f4e26 	beq	r18,zero,9340 <__alt_data_end+0xfffe9340>
    9608:	003f4a06 	br	9334 <__alt_data_end+0xfffe9334>
    960c:	00800084 	movi	r2,2
    9610:	10c5c83a 	sub	r2,r2,r3
    9614:	003f8406 	br	9428 <__alt_data_end+0xfffe9428>
    9618:	d9402e17 	ldw	r5,184(sp)
    961c:	d9002e17 	ldw	r4,184(sp)
    9620:	ac400043 	ldbu	r17,1(r21)
    9624:	29400017 	ldw	r5,0(r5)
    9628:	20800104 	addi	r2,r4,4
    962c:	d8802e15 	stw	r2,184(sp)
    9630:	d9402a15 	stw	r5,168(sp)
    9634:	182b883a 	mov	r21,r3
    9638:	283e7b0e 	bge	r5,zero,9028 <__alt_data_end+0xfffe9028>
    963c:	8c403fcc 	andi	r17,r17,255
    9640:	017fffc4 	movi	r5,-1
    9644:	8c40201c 	xori	r17,r17,128
    9648:	d9402a15 	stw	r5,168(sp)
    964c:	8c7fe004 	addi	r17,r17,-128
    9650:	0037d706 	br	75b0 <__alt_data_end+0xfffe75b0>
    9654:	d8c02a17 	ldw	r3,168(sp)
    9658:	18c00084 	addi	r3,r3,2
    965c:	d8c02b15 	stw	r3,172(sp)
    9660:	1805883a 	mov	r2,r3
    9664:	183d970e 	bge	r3,zero,8cc4 <__alt_data_end+0xfffe8cc4>
    9668:	003fd706 	br	95c8 <__alt_data_end+0xfffe95c8>
    966c:	0005883a 	mov	r2,zero
    9670:	003f8f06 	br	94b0 <__alt_data_end+0xfffe94b0>
    9674:	9080004c 	andi	r2,r18,1
    9678:	103f821e 	bne	r2,zero,9484 <__alt_data_end+0xfffe9484>
    967c:	d8802117 	ldw	r2,132(sp)
    9680:	1405c83a 	sub	r2,r2,r16
    9684:	d8803315 	stw	r2,204(sp)
    9688:	b47ef426 	beq	r22,r17,925c <__alt_data_end+0xfffe925c>
    968c:	dd802617 	ldw	r22,152(sp)
    9690:	003f1206 	br	92dc <__alt_data_end+0xfffe92dc>
    9694:	d8c02b03 	ldbu	r3,172(sp)
    9698:	d8c02785 	stb	r3,158(sp)
    969c:	0038df06 	br	7a1c <__alt_data_end+0xfffe7a1c>
    96a0:	d8c02b03 	ldbu	r3,172(sp)
    96a4:	d8c02785 	stb	r3,158(sp)
    96a8:	0038aa06 	br	7954 <__alt_data_end+0xfffe7954>
    96ac:	d8c02b03 	ldbu	r3,172(sp)
    96b0:	d8c02785 	stb	r3,158(sp)
    96b4:	003a4306 	br	7fc4 <__alt_data_end+0xfffe7fc4>
    96b8:	d8c02b03 	ldbu	r3,172(sp)
    96bc:	d8c02785 	stb	r3,158(sp)
    96c0:	003af506 	br	8298 <__alt_data_end+0xfffe8298>
    96c4:	0005883a 	mov	r2,zero
    96c8:	003d7b06 	br	8cb8 <__alt_data_end+0xfffe8cb8>
    96cc:	d8802344 	addi	r2,sp,141
    96d0:	003f1006 	br	9314 <__alt_data_end+0xfffe9314>
    96d4:	d8c02b03 	ldbu	r3,172(sp)
    96d8:	d8c02785 	stb	r3,158(sp)
    96dc:	0038fd06 	br	7ad4 <__alt_data_end+0xfffe7ad4>
    96e0:	d8c02b03 	ldbu	r3,172(sp)
    96e4:	d8c02785 	stb	r3,158(sp)
    96e8:	003a9706 	br	8148 <__alt_data_end+0xfffe8148>
    96ec:	d8c02b03 	ldbu	r3,172(sp)
    96f0:	d8c02785 	stb	r3,158(sp)
    96f4:	003a1806 	br	7f58 <__alt_data_end+0xfffe7f58>
    96f8:	d8c02b03 	ldbu	r3,172(sp)
    96fc:	d8c02785 	stb	r3,158(sp)
    9700:	003abe06 	br	81fc <__alt_data_end+0xfffe81fc>

00009704 <__vfprintf_internal>:
    9704:	00800074 	movhi	r2,1
    9708:	10921d04 	addi	r2,r2,18548
    970c:	300f883a 	mov	r7,r6
    9710:	280d883a 	mov	r6,r5
    9714:	200b883a 	mov	r5,r4
    9718:	11000017 	ldw	r4,0(r2)
    971c:	00074281 	jmpi	7428 <___vfprintf_internal_r>

00009720 <__sbprintf>:
    9720:	2880030b 	ldhu	r2,12(r5)
    9724:	2ac01917 	ldw	r11,100(r5)
    9728:	2a80038b 	ldhu	r10,14(r5)
    972c:	2a400717 	ldw	r9,28(r5)
    9730:	2a000917 	ldw	r8,36(r5)
    9734:	defee204 	addi	sp,sp,-1144
    9738:	00c10004 	movi	r3,1024
    973c:	dc011a15 	stw	r16,1128(sp)
    9740:	10bfff4c 	andi	r2,r2,65533
    9744:	2821883a 	mov	r16,r5
    9748:	d8cb883a 	add	r5,sp,r3
    974c:	dc811c15 	stw	r18,1136(sp)
    9750:	dc411b15 	stw	r17,1132(sp)
    9754:	dfc11d15 	stw	ra,1140(sp)
    9758:	2025883a 	mov	r18,r4
    975c:	d881030d 	sth	r2,1036(sp)
    9760:	dac11915 	stw	r11,1124(sp)
    9764:	da81038d 	sth	r10,1038(sp)
    9768:	da410715 	stw	r9,1052(sp)
    976c:	da010915 	stw	r8,1060(sp)
    9770:	dec10015 	stw	sp,1024(sp)
    9774:	dec10415 	stw	sp,1040(sp)
    9778:	d8c10215 	stw	r3,1032(sp)
    977c:	d8c10515 	stw	r3,1044(sp)
    9780:	d8010615 	stw	zero,1048(sp)
    9784:	00074280 	call	7428 <___vfprintf_internal_r>
    9788:	1023883a 	mov	r17,r2
    978c:	10000416 	blt	r2,zero,97a0 <__sbprintf+0x80>
    9790:	d9410004 	addi	r5,sp,1024
    9794:	9009883a 	mov	r4,r18
    9798:	0004eb40 	call	4eb4 <_fflush_r>
    979c:	10000d1e 	bne	r2,zero,97d4 <__sbprintf+0xb4>
    97a0:	d881030b 	ldhu	r2,1036(sp)
    97a4:	1080100c 	andi	r2,r2,64
    97a8:	10000326 	beq	r2,zero,97b8 <__sbprintf+0x98>
    97ac:	8080030b 	ldhu	r2,12(r16)
    97b0:	10801014 	ori	r2,r2,64
    97b4:	8080030d 	sth	r2,12(r16)
    97b8:	8805883a 	mov	r2,r17
    97bc:	dfc11d17 	ldw	ra,1140(sp)
    97c0:	dc811c17 	ldw	r18,1136(sp)
    97c4:	dc411b17 	ldw	r17,1132(sp)
    97c8:	dc011a17 	ldw	r16,1128(sp)
    97cc:	dec11e04 	addi	sp,sp,1144
    97d0:	f800283a 	ret
    97d4:	047fffc4 	movi	r17,-1
    97d8:	003ff106 	br	97a0 <__alt_data_end+0xfffe97a0>

000097dc <_write_r>:
    97dc:	defffd04 	addi	sp,sp,-12
    97e0:	2805883a 	mov	r2,r5
    97e4:	dc000015 	stw	r16,0(sp)
    97e8:	04000074 	movhi	r16,1
    97ec:	dc400115 	stw	r17,4(sp)
    97f0:	300b883a 	mov	r5,r6
    97f4:	8418ea04 	addi	r16,r16,25512
    97f8:	2023883a 	mov	r17,r4
    97fc:	380d883a 	mov	r6,r7
    9800:	1009883a 	mov	r4,r2
    9804:	dfc00215 	stw	ra,8(sp)
    9808:	80000015 	stw	zero,0(r16)
    980c:	0010d580 	call	10d58 <write>
    9810:	00ffffc4 	movi	r3,-1
    9814:	10c00526 	beq	r2,r3,982c <_write_r+0x50>
    9818:	dfc00217 	ldw	ra,8(sp)
    981c:	dc400117 	ldw	r17,4(sp)
    9820:	dc000017 	ldw	r16,0(sp)
    9824:	dec00304 	addi	sp,sp,12
    9828:	f800283a 	ret
    982c:	80c00017 	ldw	r3,0(r16)
    9830:	183ff926 	beq	r3,zero,9818 <__alt_data_end+0xfffe9818>
    9834:	88c00015 	stw	r3,0(r17)
    9838:	003ff706 	br	9818 <__alt_data_end+0xfffe9818>

0000983c <__swsetup_r>:
    983c:	00800074 	movhi	r2,1
    9840:	defffd04 	addi	sp,sp,-12
    9844:	10921d04 	addi	r2,r2,18548
    9848:	dc400115 	stw	r17,4(sp)
    984c:	2023883a 	mov	r17,r4
    9850:	11000017 	ldw	r4,0(r2)
    9854:	dc000015 	stw	r16,0(sp)
    9858:	dfc00215 	stw	ra,8(sp)
    985c:	2821883a 	mov	r16,r5
    9860:	20000226 	beq	r4,zero,986c <__swsetup_r+0x30>
    9864:	20800e17 	ldw	r2,56(r4)
    9868:	10003126 	beq	r2,zero,9930 <__swsetup_r+0xf4>
    986c:	8080030b 	ldhu	r2,12(r16)
    9870:	10c0020c 	andi	r3,r2,8
    9874:	1009883a 	mov	r4,r2
    9878:	18000f26 	beq	r3,zero,98b8 <__swsetup_r+0x7c>
    987c:	80c00417 	ldw	r3,16(r16)
    9880:	18001526 	beq	r3,zero,98d8 <__swsetup_r+0x9c>
    9884:	1100004c 	andi	r4,r2,1
    9888:	20001c1e 	bne	r4,zero,98fc <__swsetup_r+0xc0>
    988c:	1080008c 	andi	r2,r2,2
    9890:	1000291e 	bne	r2,zero,9938 <__swsetup_r+0xfc>
    9894:	80800517 	ldw	r2,20(r16)
    9898:	80800215 	stw	r2,8(r16)
    989c:	18001c26 	beq	r3,zero,9910 <__swsetup_r+0xd4>
    98a0:	0005883a 	mov	r2,zero
    98a4:	dfc00217 	ldw	ra,8(sp)
    98a8:	dc400117 	ldw	r17,4(sp)
    98ac:	dc000017 	ldw	r16,0(sp)
    98b0:	dec00304 	addi	sp,sp,12
    98b4:	f800283a 	ret
    98b8:	2080040c 	andi	r2,r4,16
    98bc:	10002e26 	beq	r2,zero,9978 <__swsetup_r+0x13c>
    98c0:	2080010c 	andi	r2,r4,4
    98c4:	10001e1e 	bne	r2,zero,9940 <__swsetup_r+0x104>
    98c8:	80c00417 	ldw	r3,16(r16)
    98cc:	20800214 	ori	r2,r4,8
    98d0:	8080030d 	sth	r2,12(r16)
    98d4:	183feb1e 	bne	r3,zero,9884 <__alt_data_end+0xfffe9884>
    98d8:	1100a00c 	andi	r4,r2,640
    98dc:	01408004 	movi	r5,512
    98e0:	217fe826 	beq	r4,r5,9884 <__alt_data_end+0xfffe9884>
    98e4:	800b883a 	mov	r5,r16
    98e8:	8809883a 	mov	r4,r17
    98ec:	00061040 	call	6104 <__smakebuf_r>
    98f0:	8080030b 	ldhu	r2,12(r16)
    98f4:	80c00417 	ldw	r3,16(r16)
    98f8:	003fe206 	br	9884 <__alt_data_end+0xfffe9884>
    98fc:	80800517 	ldw	r2,20(r16)
    9900:	80000215 	stw	zero,8(r16)
    9904:	0085c83a 	sub	r2,zero,r2
    9908:	80800615 	stw	r2,24(r16)
    990c:	183fe41e 	bne	r3,zero,98a0 <__alt_data_end+0xfffe98a0>
    9910:	80c0030b 	ldhu	r3,12(r16)
    9914:	0005883a 	mov	r2,zero
    9918:	1900200c 	andi	r4,r3,128
    991c:	203fe126 	beq	r4,zero,98a4 <__alt_data_end+0xfffe98a4>
    9920:	18c01014 	ori	r3,r3,64
    9924:	80c0030d 	sth	r3,12(r16)
    9928:	00bfffc4 	movi	r2,-1
    992c:	003fdd06 	br	98a4 <__alt_data_end+0xfffe98a4>
    9930:	00052a00 	call	52a0 <__sinit>
    9934:	003fcd06 	br	986c <__alt_data_end+0xfffe986c>
    9938:	0005883a 	mov	r2,zero
    993c:	003fd606 	br	9898 <__alt_data_end+0xfffe9898>
    9940:	81400c17 	ldw	r5,48(r16)
    9944:	28000626 	beq	r5,zero,9960 <__swsetup_r+0x124>
    9948:	80801004 	addi	r2,r16,64
    994c:	28800326 	beq	r5,r2,995c <__swsetup_r+0x120>
    9950:	8809883a 	mov	r4,r17
    9954:	00057900 	call	5790 <_free_r>
    9958:	8100030b 	ldhu	r4,12(r16)
    995c:	80000c15 	stw	zero,48(r16)
    9960:	80c00417 	ldw	r3,16(r16)
    9964:	00bff6c4 	movi	r2,-37
    9968:	1108703a 	and	r4,r2,r4
    996c:	80000115 	stw	zero,4(r16)
    9970:	80c00015 	stw	r3,0(r16)
    9974:	003fd506 	br	98cc <__alt_data_end+0xfffe98cc>
    9978:	00800244 	movi	r2,9
    997c:	88800015 	stw	r2,0(r17)
    9980:	20801014 	ori	r2,r4,64
    9984:	8080030d 	sth	r2,12(r16)
    9988:	00bfffc4 	movi	r2,-1
    998c:	003fc506 	br	98a4 <__alt_data_end+0xfffe98a4>

00009990 <_close_r>:
    9990:	defffd04 	addi	sp,sp,-12
    9994:	dc000015 	stw	r16,0(sp)
    9998:	04000074 	movhi	r16,1
    999c:	dc400115 	stw	r17,4(sp)
    99a0:	8418ea04 	addi	r16,r16,25512
    99a4:	2023883a 	mov	r17,r4
    99a8:	2809883a 	mov	r4,r5
    99ac:	dfc00215 	stw	ra,8(sp)
    99b0:	80000015 	stw	zero,0(r16)
    99b4:	00102480 	call	10248 <close>
    99b8:	00ffffc4 	movi	r3,-1
    99bc:	10c00526 	beq	r2,r3,99d4 <_close_r+0x44>
    99c0:	dfc00217 	ldw	ra,8(sp)
    99c4:	dc400117 	ldw	r17,4(sp)
    99c8:	dc000017 	ldw	r16,0(sp)
    99cc:	dec00304 	addi	sp,sp,12
    99d0:	f800283a 	ret
    99d4:	80c00017 	ldw	r3,0(r16)
    99d8:	183ff926 	beq	r3,zero,99c0 <__alt_data_end+0xfffe99c0>
    99dc:	88c00015 	stw	r3,0(r17)
    99e0:	003ff706 	br	99c0 <__alt_data_end+0xfffe99c0>

000099e4 <__call_exitprocs>:
    99e4:	defff504 	addi	sp,sp,-44
    99e8:	df000915 	stw	fp,36(sp)
    99ec:	dd400615 	stw	r21,24(sp)
    99f0:	dc800315 	stw	r18,12(sp)
    99f4:	dfc00a15 	stw	ra,40(sp)
    99f8:	ddc00815 	stw	r23,32(sp)
    99fc:	dd800715 	stw	r22,28(sp)
    9a00:	dd000515 	stw	r20,20(sp)
    9a04:	dcc00415 	stw	r19,16(sp)
    9a08:	dc400215 	stw	r17,8(sp)
    9a0c:	dc000115 	stw	r16,4(sp)
    9a10:	d9000015 	stw	r4,0(sp)
    9a14:	2839883a 	mov	fp,r5
    9a18:	04800044 	movi	r18,1
    9a1c:	057fffc4 	movi	r21,-1
    9a20:	00800074 	movhi	r2,1
    9a24:	10921c04 	addi	r2,r2,18544
    9a28:	12000017 	ldw	r8,0(r2)
    9a2c:	45005217 	ldw	r20,328(r8)
    9a30:	44c05204 	addi	r19,r8,328
    9a34:	a0001c26 	beq	r20,zero,9aa8 <__call_exitprocs+0xc4>
    9a38:	a0800117 	ldw	r2,4(r20)
    9a3c:	15ffffc4 	addi	r23,r2,-1
    9a40:	b8000d16 	blt	r23,zero,9a78 <__call_exitprocs+0x94>
    9a44:	14000044 	addi	r16,r2,1
    9a48:	8421883a 	add	r16,r16,r16
    9a4c:	8421883a 	add	r16,r16,r16
    9a50:	84402004 	addi	r17,r16,128
    9a54:	a463883a 	add	r17,r20,r17
    9a58:	a421883a 	add	r16,r20,r16
    9a5c:	e0001e26 	beq	fp,zero,9ad8 <__call_exitprocs+0xf4>
    9a60:	80804017 	ldw	r2,256(r16)
    9a64:	e0801c26 	beq	fp,r2,9ad8 <__call_exitprocs+0xf4>
    9a68:	bdffffc4 	addi	r23,r23,-1
    9a6c:	843fff04 	addi	r16,r16,-4
    9a70:	8c7fff04 	addi	r17,r17,-4
    9a74:	bd7ff91e 	bne	r23,r21,9a5c <__alt_data_end+0xfffe9a5c>
    9a78:	00800034 	movhi	r2,0
    9a7c:	10800004 	addi	r2,r2,0
    9a80:	10000926 	beq	r2,zero,9aa8 <__call_exitprocs+0xc4>
    9a84:	a0800117 	ldw	r2,4(r20)
    9a88:	1000301e 	bne	r2,zero,9b4c <__call_exitprocs+0x168>
    9a8c:	a0800017 	ldw	r2,0(r20)
    9a90:	10003226 	beq	r2,zero,9b5c <__call_exitprocs+0x178>
    9a94:	a009883a 	mov	r4,r20
    9a98:	98800015 	stw	r2,0(r19)
    9a9c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    9aa0:	9d000017 	ldw	r20,0(r19)
    9aa4:	a03fe41e 	bne	r20,zero,9a38 <__alt_data_end+0xfffe9a38>
    9aa8:	dfc00a17 	ldw	ra,40(sp)
    9aac:	df000917 	ldw	fp,36(sp)
    9ab0:	ddc00817 	ldw	r23,32(sp)
    9ab4:	dd800717 	ldw	r22,28(sp)
    9ab8:	dd400617 	ldw	r21,24(sp)
    9abc:	dd000517 	ldw	r20,20(sp)
    9ac0:	dcc00417 	ldw	r19,16(sp)
    9ac4:	dc800317 	ldw	r18,12(sp)
    9ac8:	dc400217 	ldw	r17,8(sp)
    9acc:	dc000117 	ldw	r16,4(sp)
    9ad0:	dec00b04 	addi	sp,sp,44
    9ad4:	f800283a 	ret
    9ad8:	a0800117 	ldw	r2,4(r20)
    9adc:	80c00017 	ldw	r3,0(r16)
    9ae0:	10bfffc4 	addi	r2,r2,-1
    9ae4:	15c01426 	beq	r2,r23,9b38 <__call_exitprocs+0x154>
    9ae8:	80000015 	stw	zero,0(r16)
    9aec:	183fde26 	beq	r3,zero,9a68 <__alt_data_end+0xfffe9a68>
    9af0:	95c8983a 	sll	r4,r18,r23
    9af4:	a0806217 	ldw	r2,392(r20)
    9af8:	a5800117 	ldw	r22,4(r20)
    9afc:	2084703a 	and	r2,r4,r2
    9b00:	10000b26 	beq	r2,zero,9b30 <__call_exitprocs+0x14c>
    9b04:	a0806317 	ldw	r2,396(r20)
    9b08:	2088703a 	and	r4,r4,r2
    9b0c:	20000c1e 	bne	r4,zero,9b40 <__call_exitprocs+0x15c>
    9b10:	89400017 	ldw	r5,0(r17)
    9b14:	d9000017 	ldw	r4,0(sp)
    9b18:	183ee83a 	callr	r3
    9b1c:	a0800117 	ldw	r2,4(r20)
    9b20:	15bfbf1e 	bne	r2,r22,9a20 <__alt_data_end+0xfffe9a20>
    9b24:	98800017 	ldw	r2,0(r19)
    9b28:	153fcf26 	beq	r2,r20,9a68 <__alt_data_end+0xfffe9a68>
    9b2c:	003fbc06 	br	9a20 <__alt_data_end+0xfffe9a20>
    9b30:	183ee83a 	callr	r3
    9b34:	003ff906 	br	9b1c <__alt_data_end+0xfffe9b1c>
    9b38:	a5c00115 	stw	r23,4(r20)
    9b3c:	003feb06 	br	9aec <__alt_data_end+0xfffe9aec>
    9b40:	89000017 	ldw	r4,0(r17)
    9b44:	183ee83a 	callr	r3
    9b48:	003ff406 	br	9b1c <__alt_data_end+0xfffe9b1c>
    9b4c:	a0800017 	ldw	r2,0(r20)
    9b50:	a027883a 	mov	r19,r20
    9b54:	1029883a 	mov	r20,r2
    9b58:	003fb606 	br	9a34 <__alt_data_end+0xfffe9a34>
    9b5c:	0005883a 	mov	r2,zero
    9b60:	003ffb06 	br	9b50 <__alt_data_end+0xfffe9b50>

00009b64 <quorem>:
    9b64:	defff204 	addi	sp,sp,-56
    9b68:	ddc00b15 	stw	r23,44(sp)
    9b6c:	20800417 	ldw	r2,16(r4)
    9b70:	2dc00417 	ldw	r23,16(r5)
    9b74:	dfc00d15 	stw	ra,52(sp)
    9b78:	df000c15 	stw	fp,48(sp)
    9b7c:	dd800a15 	stw	r22,40(sp)
    9b80:	dd400915 	stw	r21,36(sp)
    9b84:	dd000815 	stw	r20,32(sp)
    9b88:	dcc00715 	stw	r19,28(sp)
    9b8c:	dc800615 	stw	r18,24(sp)
    9b90:	dc400515 	stw	r17,20(sp)
    9b94:	dc000415 	stw	r16,16(sp)
    9b98:	15c07a16 	blt	r2,r23,9d84 <quorem+0x220>
    9b9c:	bdffffc4 	addi	r23,r23,-1
    9ba0:	bde9883a 	add	r20,r23,r23
    9ba4:	28c00504 	addi	r3,r5,20
    9ba8:	a529883a 	add	r20,r20,r20
    9bac:	1d39883a 	add	fp,r3,r20
    9bb0:	24c00504 	addi	r19,r4,20
    9bb4:	d9400215 	stw	r5,8(sp)
    9bb8:	9d29883a 	add	r20,r19,r20
    9bbc:	e1400017 	ldw	r5,0(fp)
    9bc0:	d9000015 	stw	r4,0(sp)
    9bc4:	a1000017 	ldw	r4,0(r20)
    9bc8:	29400044 	addi	r5,r5,1
    9bcc:	d8c00115 	stw	r3,4(sp)
    9bd0:	dd000315 	stw	r20,12(sp)
    9bd4:	0004aa00 	call	4aa0 <__udivsi3>
    9bd8:	1025883a 	mov	r18,r2
    9bdc:	10003026 	beq	r2,zero,9ca0 <quorem+0x13c>
    9be0:	dc400117 	ldw	r17,4(sp)
    9be4:	9829883a 	mov	r20,r19
    9be8:	002d883a 	mov	r22,zero
    9bec:	0021883a 	mov	r16,zero
    9bf0:	8d400017 	ldw	r21,0(r17)
    9bf4:	900b883a 	mov	r5,r18
    9bf8:	8c400104 	addi	r17,r17,4
    9bfc:	a93fffcc 	andi	r4,r21,65535
    9c00:	000197c0 	call	197c <__mulsi3>
    9c04:	a808d43a 	srli	r4,r21,16
    9c08:	900b883a 	mov	r5,r18
    9c0c:	15ad883a 	add	r22,r2,r22
    9c10:	000197c0 	call	197c <__mulsi3>
    9c14:	a1000017 	ldw	r4,0(r20)
    9c18:	b00cd43a 	srli	r6,r22,16
    9c1c:	b0ffffcc 	andi	r3,r22,65535
    9c20:	217fffcc 	andi	r5,r4,65535
    9c24:	2c21883a 	add	r16,r5,r16
    9c28:	80c7c83a 	sub	r3,r16,r3
    9c2c:	2008d43a 	srli	r4,r4,16
    9c30:	1185883a 	add	r2,r2,r6
    9c34:	1821d43a 	srai	r16,r3,16
    9c38:	117fffcc 	andi	r5,r2,65535
    9c3c:	2149c83a 	sub	r4,r4,r5
    9c40:	2421883a 	add	r16,r4,r16
    9c44:	8008943a 	slli	r4,r16,16
    9c48:	18ffffcc 	andi	r3,r3,65535
    9c4c:	102cd43a 	srli	r22,r2,16
    9c50:	20c8b03a 	or	r4,r4,r3
    9c54:	a1000015 	stw	r4,0(r20)
    9c58:	8021d43a 	srai	r16,r16,16
    9c5c:	a5000104 	addi	r20,r20,4
    9c60:	e47fe32e 	bgeu	fp,r17,9bf0 <__alt_data_end+0xfffe9bf0>
    9c64:	d8c00317 	ldw	r3,12(sp)
    9c68:	18800017 	ldw	r2,0(r3)
    9c6c:	10000c1e 	bne	r2,zero,9ca0 <quorem+0x13c>
    9c70:	18bfff04 	addi	r2,r3,-4
    9c74:	9880082e 	bgeu	r19,r2,9c98 <quorem+0x134>
    9c78:	18ffff17 	ldw	r3,-4(r3)
    9c7c:	18000326 	beq	r3,zero,9c8c <quorem+0x128>
    9c80:	00000506 	br	9c98 <quorem+0x134>
    9c84:	10c00017 	ldw	r3,0(r2)
    9c88:	1800031e 	bne	r3,zero,9c98 <quorem+0x134>
    9c8c:	10bfff04 	addi	r2,r2,-4
    9c90:	bdffffc4 	addi	r23,r23,-1
    9c94:	98bffb36 	bltu	r19,r2,9c84 <__alt_data_end+0xfffe9c84>
    9c98:	d8c00017 	ldw	r3,0(sp)
    9c9c:	1dc00415 	stw	r23,16(r3)
    9ca0:	d9400217 	ldw	r5,8(sp)
    9ca4:	d9000017 	ldw	r4,0(sp)
    9ca8:	000c6dc0 	call	c6dc <__mcmp>
    9cac:	10002816 	blt	r2,zero,9d50 <quorem+0x1ec>
    9cb0:	dc400117 	ldw	r17,4(sp)
    9cb4:	94800044 	addi	r18,r18,1
    9cb8:	980d883a 	mov	r6,r19
    9cbc:	0007883a 	mov	r3,zero
    9cc0:	31000017 	ldw	r4,0(r6)
    9cc4:	89400017 	ldw	r5,0(r17)
    9cc8:	31800104 	addi	r6,r6,4
    9ccc:	20bfffcc 	andi	r2,r4,65535
    9cd0:	10c7883a 	add	r3,r2,r3
    9cd4:	28bfffcc 	andi	r2,r5,65535
    9cd8:	1885c83a 	sub	r2,r3,r2
    9cdc:	280ad43a 	srli	r5,r5,16
    9ce0:	2008d43a 	srli	r4,r4,16
    9ce4:	1007d43a 	srai	r3,r2,16
    9ce8:	10bfffcc 	andi	r2,r2,65535
    9cec:	2149c83a 	sub	r4,r4,r5
    9cf0:	20c9883a 	add	r4,r4,r3
    9cf4:	200a943a 	slli	r5,r4,16
    9cf8:	8c400104 	addi	r17,r17,4
    9cfc:	2007d43a 	srai	r3,r4,16
    9d00:	2884b03a 	or	r2,r5,r2
    9d04:	30bfff15 	stw	r2,-4(r6)
    9d08:	e47fed2e 	bgeu	fp,r17,9cc0 <__alt_data_end+0xfffe9cc0>
    9d0c:	bdc5883a 	add	r2,r23,r23
    9d10:	1085883a 	add	r2,r2,r2
    9d14:	9887883a 	add	r3,r19,r2
    9d18:	18800017 	ldw	r2,0(r3)
    9d1c:	10000c1e 	bne	r2,zero,9d50 <quorem+0x1ec>
    9d20:	18bfff04 	addi	r2,r3,-4
    9d24:	9880082e 	bgeu	r19,r2,9d48 <quorem+0x1e4>
    9d28:	18ffff17 	ldw	r3,-4(r3)
    9d2c:	18000326 	beq	r3,zero,9d3c <quorem+0x1d8>
    9d30:	00000506 	br	9d48 <quorem+0x1e4>
    9d34:	10c00017 	ldw	r3,0(r2)
    9d38:	1800031e 	bne	r3,zero,9d48 <quorem+0x1e4>
    9d3c:	10bfff04 	addi	r2,r2,-4
    9d40:	bdffffc4 	addi	r23,r23,-1
    9d44:	98bffb36 	bltu	r19,r2,9d34 <__alt_data_end+0xfffe9d34>
    9d48:	d8c00017 	ldw	r3,0(sp)
    9d4c:	1dc00415 	stw	r23,16(r3)
    9d50:	9005883a 	mov	r2,r18
    9d54:	dfc00d17 	ldw	ra,52(sp)
    9d58:	df000c17 	ldw	fp,48(sp)
    9d5c:	ddc00b17 	ldw	r23,44(sp)
    9d60:	dd800a17 	ldw	r22,40(sp)
    9d64:	dd400917 	ldw	r21,36(sp)
    9d68:	dd000817 	ldw	r20,32(sp)
    9d6c:	dcc00717 	ldw	r19,28(sp)
    9d70:	dc800617 	ldw	r18,24(sp)
    9d74:	dc400517 	ldw	r17,20(sp)
    9d78:	dc000417 	ldw	r16,16(sp)
    9d7c:	dec00e04 	addi	sp,sp,56
    9d80:	f800283a 	ret
    9d84:	0005883a 	mov	r2,zero
    9d88:	003ff206 	br	9d54 <__alt_data_end+0xfffe9d54>

00009d8c <_dtoa_r>:
    9d8c:	20801017 	ldw	r2,64(r4)
    9d90:	deffde04 	addi	sp,sp,-136
    9d94:	df002015 	stw	fp,128(sp)
    9d98:	dcc01b15 	stw	r19,108(sp)
    9d9c:	dc801a15 	stw	r18,104(sp)
    9da0:	dc401915 	stw	r17,100(sp)
    9da4:	dc001815 	stw	r16,96(sp)
    9da8:	dfc02115 	stw	ra,132(sp)
    9dac:	ddc01f15 	stw	r23,124(sp)
    9db0:	dd801e15 	stw	r22,120(sp)
    9db4:	dd401d15 	stw	r21,116(sp)
    9db8:	dd001c15 	stw	r20,112(sp)
    9dbc:	d9c00315 	stw	r7,12(sp)
    9dc0:	2039883a 	mov	fp,r4
    9dc4:	3023883a 	mov	r17,r6
    9dc8:	2825883a 	mov	r18,r5
    9dcc:	dc002417 	ldw	r16,144(sp)
    9dd0:	3027883a 	mov	r19,r6
    9dd4:	10000826 	beq	r2,zero,9df8 <_dtoa_r+0x6c>
    9dd8:	21801117 	ldw	r6,68(r4)
    9ddc:	00c00044 	movi	r3,1
    9de0:	100b883a 	mov	r5,r2
    9de4:	1986983a 	sll	r3,r3,r6
    9de8:	11800115 	stw	r6,4(r2)
    9dec:	10c00215 	stw	r3,8(r2)
    9df0:	000be000 	call	be00 <_Bfree>
    9df4:	e0001015 	stw	zero,64(fp)
    9df8:	88002e16 	blt	r17,zero,9eb4 <_dtoa_r+0x128>
    9dfc:	80000015 	stw	zero,0(r16)
    9e00:	889ffc2c 	andhi	r2,r17,32752
    9e04:	00dffc34 	movhi	r3,32752
    9e08:	10c01c26 	beq	r2,r3,9e7c <_dtoa_r+0xf0>
    9e0c:	000d883a 	mov	r6,zero
    9e10:	000f883a 	mov	r7,zero
    9e14:	9009883a 	mov	r4,r18
    9e18:	980b883a 	mov	r5,r19
    9e1c:	000ff680 	call	ff68 <__eqdf2>
    9e20:	10002b1e 	bne	r2,zero,9ed0 <_dtoa_r+0x144>
    9e24:	d9c02317 	ldw	r7,140(sp)
    9e28:	00800044 	movi	r2,1
    9e2c:	38800015 	stw	r2,0(r7)
    9e30:	d8802517 	ldw	r2,148(sp)
    9e34:	10019e26 	beq	r2,zero,a4b0 <_dtoa_r+0x724>
    9e38:	d8c02517 	ldw	r3,148(sp)
    9e3c:	00800074 	movhi	r2,1
    9e40:	108b0044 	addi	r2,r2,11265
    9e44:	18800015 	stw	r2,0(r3)
    9e48:	10bfffc4 	addi	r2,r2,-1
    9e4c:	dfc02117 	ldw	ra,132(sp)
    9e50:	df002017 	ldw	fp,128(sp)
    9e54:	ddc01f17 	ldw	r23,124(sp)
    9e58:	dd801e17 	ldw	r22,120(sp)
    9e5c:	dd401d17 	ldw	r21,116(sp)
    9e60:	dd001c17 	ldw	r20,112(sp)
    9e64:	dcc01b17 	ldw	r19,108(sp)
    9e68:	dc801a17 	ldw	r18,104(sp)
    9e6c:	dc401917 	ldw	r17,100(sp)
    9e70:	dc001817 	ldw	r16,96(sp)
    9e74:	dec02204 	addi	sp,sp,136
    9e78:	f800283a 	ret
    9e7c:	d8c02317 	ldw	r3,140(sp)
    9e80:	0089c3c4 	movi	r2,9999
    9e84:	18800015 	stw	r2,0(r3)
    9e88:	90017726 	beq	r18,zero,a468 <_dtoa_r+0x6dc>
    9e8c:	00800074 	movhi	r2,1
    9e90:	108b0c04 	addi	r2,r2,11312
    9e94:	d9002517 	ldw	r4,148(sp)
    9e98:	203fec26 	beq	r4,zero,9e4c <__alt_data_end+0xfffe9e4c>
    9e9c:	10c000c7 	ldb	r3,3(r2)
    9ea0:	1801781e 	bne	r3,zero,a484 <_dtoa_r+0x6f8>
    9ea4:	10c000c4 	addi	r3,r2,3
    9ea8:	d9802517 	ldw	r6,148(sp)
    9eac:	30c00015 	stw	r3,0(r6)
    9eb0:	003fe606 	br	9e4c <__alt_data_end+0xfffe9e4c>
    9eb4:	04e00034 	movhi	r19,32768
    9eb8:	9cffffc4 	addi	r19,r19,-1
    9ebc:	00800044 	movi	r2,1
    9ec0:	8ce6703a 	and	r19,r17,r19
    9ec4:	80800015 	stw	r2,0(r16)
    9ec8:	9823883a 	mov	r17,r19
    9ecc:	003fcc06 	br	9e00 <__alt_data_end+0xfffe9e00>
    9ed0:	d8800204 	addi	r2,sp,8
    9ed4:	d8800015 	stw	r2,0(sp)
    9ed8:	d9c00104 	addi	r7,sp,4
    9edc:	900b883a 	mov	r5,r18
    9ee0:	980d883a 	mov	r6,r19
    9ee4:	e009883a 	mov	r4,fp
    9ee8:	8820d53a 	srli	r16,r17,20
    9eec:	000caa80 	call	caa8 <__d2b>
    9ef0:	d8800915 	stw	r2,36(sp)
    9ef4:	8001651e 	bne	r16,zero,a48c <_dtoa_r+0x700>
    9ef8:	dd800217 	ldw	r22,8(sp)
    9efc:	dc000117 	ldw	r16,4(sp)
    9f00:	00800804 	movi	r2,32
    9f04:	b421883a 	add	r16,r22,r16
    9f08:	80c10c84 	addi	r3,r16,1074
    9f0c:	10c2d10e 	bge	r2,r3,aa54 <_dtoa_r+0xcc8>
    9f10:	00801004 	movi	r2,64
    9f14:	81010484 	addi	r4,r16,1042
    9f18:	10c7c83a 	sub	r3,r2,r3
    9f1c:	9108d83a 	srl	r4,r18,r4
    9f20:	88e2983a 	sll	r17,r17,r3
    9f24:	2448b03a 	or	r4,r4,r17
    9f28:	00101640 	call	10164 <__floatunsidf>
    9f2c:	017f8434 	movhi	r5,65040
    9f30:	01800044 	movi	r6,1
    9f34:	1009883a 	mov	r4,r2
    9f38:	194b883a 	add	r5,r3,r5
    9f3c:	843fffc4 	addi	r16,r16,-1
    9f40:	d9801115 	stw	r6,68(sp)
    9f44:	000d883a 	mov	r6,zero
    9f48:	01cffe34 	movhi	r7,16376
    9f4c:	0003f6c0 	call	3f6c <__subdf3>
    9f50:	0198dbf4 	movhi	r6,25455
    9f54:	01cff4f4 	movhi	r7,16339
    9f58:	3190d844 	addi	r6,r6,17249
    9f5c:	39e1e9c4 	addi	r7,r7,-30809
    9f60:	1009883a 	mov	r4,r2
    9f64:	180b883a 	mov	r5,r3
    9f68:	00037000 	call	3700 <__muldf3>
    9f6c:	01a2d874 	movhi	r6,35681
    9f70:	01cff1f4 	movhi	r7,16327
    9f74:	31b22cc4 	addi	r6,r6,-14157
    9f78:	39e28a04 	addi	r7,r7,-30168
    9f7c:	180b883a 	mov	r5,r3
    9f80:	1009883a 	mov	r4,r2
    9f84:	00023a80 	call	23a8 <__adddf3>
    9f88:	8009883a 	mov	r4,r16
    9f8c:	1029883a 	mov	r20,r2
    9f90:	1823883a 	mov	r17,r3
    9f94:	00048680 	call	4868 <__floatsidf>
    9f98:	019427f4 	movhi	r6,20639
    9f9c:	01cff4f4 	movhi	r7,16339
    9fa0:	319e7ec4 	addi	r6,r6,31227
    9fa4:	39d104c4 	addi	r7,r7,17427
    9fa8:	1009883a 	mov	r4,r2
    9fac:	180b883a 	mov	r5,r3
    9fb0:	00037000 	call	3700 <__muldf3>
    9fb4:	100d883a 	mov	r6,r2
    9fb8:	180f883a 	mov	r7,r3
    9fbc:	a009883a 	mov	r4,r20
    9fc0:	880b883a 	mov	r5,r17
    9fc4:	00023a80 	call	23a8 <__adddf3>
    9fc8:	1009883a 	mov	r4,r2
    9fcc:	180b883a 	mov	r5,r3
    9fd0:	1029883a 	mov	r20,r2
    9fd4:	1823883a 	mov	r17,r3
    9fd8:	00100e40 	call	100e4 <__fixdfsi>
    9fdc:	000d883a 	mov	r6,zero
    9fe0:	000f883a 	mov	r7,zero
    9fe4:	a009883a 	mov	r4,r20
    9fe8:	880b883a 	mov	r5,r17
    9fec:	d8800515 	stw	r2,20(sp)
    9ff0:	000fff00 	call	fff0 <__ledf2>
    9ff4:	10028716 	blt	r2,zero,aa14 <_dtoa_r+0xc88>
    9ff8:	d8c00517 	ldw	r3,20(sp)
    9ffc:	00800584 	movi	r2,22
    a000:	10c27536 	bltu	r2,r3,a9d8 <_dtoa_r+0xc4c>
    a004:	180490fa 	slli	r2,r3,3
    a008:	00c00074 	movhi	r3,1
    a00c:	18cb2704 	addi	r3,r3,11420
    a010:	1885883a 	add	r2,r3,r2
    a014:	11000017 	ldw	r4,0(r2)
    a018:	11400117 	ldw	r5,4(r2)
    a01c:	900d883a 	mov	r6,r18
    a020:	980f883a 	mov	r7,r19
    a024:	00036240 	call	3624 <__gedf2>
    a028:	00828d0e 	bge	zero,r2,aa60 <_dtoa_r+0xcd4>
    a02c:	d9000517 	ldw	r4,20(sp)
    a030:	d8000e15 	stw	zero,56(sp)
    a034:	213fffc4 	addi	r4,r4,-1
    a038:	d9000515 	stw	r4,20(sp)
    a03c:	b42dc83a 	sub	r22,r22,r16
    a040:	b5bfffc4 	addi	r22,r22,-1
    a044:	b0026f16 	blt	r22,zero,aa04 <_dtoa_r+0xc78>
    a048:	d8000815 	stw	zero,32(sp)
    a04c:	d9c00517 	ldw	r7,20(sp)
    a050:	38026416 	blt	r7,zero,a9e4 <_dtoa_r+0xc58>
    a054:	b1ed883a 	add	r22,r22,r7
    a058:	d9c00d15 	stw	r7,52(sp)
    a05c:	d8000a15 	stw	zero,40(sp)
    a060:	d9800317 	ldw	r6,12(sp)
    a064:	00800244 	movi	r2,9
    a068:	11811436 	bltu	r2,r6,a4bc <_dtoa_r+0x730>
    a06c:	00800144 	movi	r2,5
    a070:	1184e10e 	bge	r2,r6,b3f8 <_dtoa_r+0x166c>
    a074:	31bfff04 	addi	r6,r6,-4
    a078:	d9800315 	stw	r6,12(sp)
    a07c:	0023883a 	mov	r17,zero
    a080:	d9800317 	ldw	r6,12(sp)
    a084:	008000c4 	movi	r2,3
    a088:	30836726 	beq	r6,r2,ae28 <_dtoa_r+0x109c>
    a08c:	1183410e 	bge	r2,r6,ad94 <_dtoa_r+0x1008>
    a090:	d9c00317 	ldw	r7,12(sp)
    a094:	00800104 	movi	r2,4
    a098:	38827c26 	beq	r7,r2,aa8c <_dtoa_r+0xd00>
    a09c:	00800144 	movi	r2,5
    a0a0:	3884c41e 	bne	r7,r2,b3b4 <_dtoa_r+0x1628>
    a0a4:	00800044 	movi	r2,1
    a0a8:	d8800b15 	stw	r2,44(sp)
    a0ac:	d8c00517 	ldw	r3,20(sp)
    a0b0:	d9002217 	ldw	r4,136(sp)
    a0b4:	1907883a 	add	r3,r3,r4
    a0b8:	19800044 	addi	r6,r3,1
    a0bc:	d8c00c15 	stw	r3,48(sp)
    a0c0:	d9800615 	stw	r6,24(sp)
    a0c4:	0183a40e 	bge	zero,r6,af58 <_dtoa_r+0x11cc>
    a0c8:	d9800617 	ldw	r6,24(sp)
    a0cc:	3021883a 	mov	r16,r6
    a0d0:	e0001115 	stw	zero,68(fp)
    a0d4:	008005c4 	movi	r2,23
    a0d8:	1184c92e 	bgeu	r2,r6,b400 <_dtoa_r+0x1674>
    a0dc:	00c00044 	movi	r3,1
    a0e0:	00800104 	movi	r2,4
    a0e4:	1085883a 	add	r2,r2,r2
    a0e8:	11000504 	addi	r4,r2,20
    a0ec:	180b883a 	mov	r5,r3
    a0f0:	18c00044 	addi	r3,r3,1
    a0f4:	313ffb2e 	bgeu	r6,r4,a0e4 <__alt_data_end+0xfffea0e4>
    a0f8:	e1401115 	stw	r5,68(fp)
    a0fc:	e009883a 	mov	r4,fp
    a100:	000bd580 	call	bd58 <_Balloc>
    a104:	d8800715 	stw	r2,28(sp)
    a108:	e0801015 	stw	r2,64(fp)
    a10c:	00800384 	movi	r2,14
    a110:	1400f736 	bltu	r2,r16,a4f0 <_dtoa_r+0x764>
    a114:	8800f626 	beq	r17,zero,a4f0 <_dtoa_r+0x764>
    a118:	d9c00517 	ldw	r7,20(sp)
    a11c:	01c39a0e 	bge	zero,r7,af88 <_dtoa_r+0x11fc>
    a120:	388003cc 	andi	r2,r7,15
    a124:	100490fa 	slli	r2,r2,3
    a128:	382bd13a 	srai	r21,r7,4
    a12c:	00c00074 	movhi	r3,1
    a130:	18cb2704 	addi	r3,r3,11420
    a134:	1885883a 	add	r2,r3,r2
    a138:	a8c0040c 	andi	r3,r21,16
    a13c:	12400017 	ldw	r9,0(r2)
    a140:	12000117 	ldw	r8,4(r2)
    a144:	18037926 	beq	r3,zero,af2c <_dtoa_r+0x11a0>
    a148:	00800074 	movhi	r2,1
    a14c:	108b1d04 	addi	r2,r2,11380
    a150:	11800817 	ldw	r6,32(r2)
    a154:	11c00917 	ldw	r7,36(r2)
    a158:	9009883a 	mov	r4,r18
    a15c:	980b883a 	mov	r5,r19
    a160:	da001715 	stw	r8,92(sp)
    a164:	da401615 	stw	r9,88(sp)
    a168:	0002c540 	call	2c54 <__divdf3>
    a16c:	da001717 	ldw	r8,92(sp)
    a170:	da401617 	ldw	r9,88(sp)
    a174:	ad4003cc 	andi	r21,r21,15
    a178:	040000c4 	movi	r16,3
    a17c:	1023883a 	mov	r17,r2
    a180:	1829883a 	mov	r20,r3
    a184:	a8001126 	beq	r21,zero,a1cc <_dtoa_r+0x440>
    a188:	05c00074 	movhi	r23,1
    a18c:	bdcb1d04 	addi	r23,r23,11380
    a190:	4805883a 	mov	r2,r9
    a194:	4007883a 	mov	r3,r8
    a198:	a980004c 	andi	r6,r21,1
    a19c:	1009883a 	mov	r4,r2
    a1a0:	a82bd07a 	srai	r21,r21,1
    a1a4:	180b883a 	mov	r5,r3
    a1a8:	30000426 	beq	r6,zero,a1bc <_dtoa_r+0x430>
    a1ac:	b9800017 	ldw	r6,0(r23)
    a1b0:	b9c00117 	ldw	r7,4(r23)
    a1b4:	84000044 	addi	r16,r16,1
    a1b8:	00037000 	call	3700 <__muldf3>
    a1bc:	bdc00204 	addi	r23,r23,8
    a1c0:	a83ff51e 	bne	r21,zero,a198 <__alt_data_end+0xfffea198>
    a1c4:	1013883a 	mov	r9,r2
    a1c8:	1811883a 	mov	r8,r3
    a1cc:	480d883a 	mov	r6,r9
    a1d0:	400f883a 	mov	r7,r8
    a1d4:	8809883a 	mov	r4,r17
    a1d8:	a00b883a 	mov	r5,r20
    a1dc:	0002c540 	call	2c54 <__divdf3>
    a1e0:	d8800f15 	stw	r2,60(sp)
    a1e4:	d8c01015 	stw	r3,64(sp)
    a1e8:	d8c00e17 	ldw	r3,56(sp)
    a1ec:	18000626 	beq	r3,zero,a208 <_dtoa_r+0x47c>
    a1f0:	d9000f17 	ldw	r4,60(sp)
    a1f4:	d9401017 	ldw	r5,64(sp)
    a1f8:	000d883a 	mov	r6,zero
    a1fc:	01cffc34 	movhi	r7,16368
    a200:	000fff00 	call	fff0 <__ledf2>
    a204:	10040b16 	blt	r2,zero,b234 <_dtoa_r+0x14a8>
    a208:	8009883a 	mov	r4,r16
    a20c:	00048680 	call	4868 <__floatsidf>
    a210:	d9800f17 	ldw	r6,60(sp)
    a214:	d9c01017 	ldw	r7,64(sp)
    a218:	1009883a 	mov	r4,r2
    a21c:	180b883a 	mov	r5,r3
    a220:	00037000 	call	3700 <__muldf3>
    a224:	000d883a 	mov	r6,zero
    a228:	01d00734 	movhi	r7,16412
    a22c:	1009883a 	mov	r4,r2
    a230:	180b883a 	mov	r5,r3
    a234:	00023a80 	call	23a8 <__adddf3>
    a238:	1021883a 	mov	r16,r2
    a23c:	d8800617 	ldw	r2,24(sp)
    a240:	047f3034 	movhi	r17,64704
    a244:	1c63883a 	add	r17,r3,r17
    a248:	10031826 	beq	r2,zero,aeac <_dtoa_r+0x1120>
    a24c:	d8c00517 	ldw	r3,20(sp)
    a250:	db000617 	ldw	r12,24(sp)
    a254:	d8c01315 	stw	r3,76(sp)
    a258:	d9000b17 	ldw	r4,44(sp)
    a25c:	20038f26 	beq	r4,zero,b09c <_dtoa_r+0x1310>
    a260:	60bfffc4 	addi	r2,r12,-1
    a264:	100490fa 	slli	r2,r2,3
    a268:	00c00074 	movhi	r3,1
    a26c:	18cb2704 	addi	r3,r3,11420
    a270:	1885883a 	add	r2,r3,r2
    a274:	11800017 	ldw	r6,0(r2)
    a278:	11c00117 	ldw	r7,4(r2)
    a27c:	d8800717 	ldw	r2,28(sp)
    a280:	0009883a 	mov	r4,zero
    a284:	014ff834 	movhi	r5,16352
    a288:	db001615 	stw	r12,88(sp)
    a28c:	15c00044 	addi	r23,r2,1
    a290:	0002c540 	call	2c54 <__divdf3>
    a294:	800d883a 	mov	r6,r16
    a298:	880f883a 	mov	r7,r17
    a29c:	1009883a 	mov	r4,r2
    a2a0:	180b883a 	mov	r5,r3
    a2a4:	0003f6c0 	call	3f6c <__subdf3>
    a2a8:	d9401017 	ldw	r5,64(sp)
    a2ac:	d9000f17 	ldw	r4,60(sp)
    a2b0:	102b883a 	mov	r21,r2
    a2b4:	d8c01215 	stw	r3,72(sp)
    a2b8:	00100e40 	call	100e4 <__fixdfsi>
    a2bc:	1009883a 	mov	r4,r2
    a2c0:	1029883a 	mov	r20,r2
    a2c4:	00048680 	call	4868 <__floatsidf>
    a2c8:	d9000f17 	ldw	r4,60(sp)
    a2cc:	d9401017 	ldw	r5,64(sp)
    a2d0:	100d883a 	mov	r6,r2
    a2d4:	180f883a 	mov	r7,r3
    a2d8:	0003f6c0 	call	3f6c <__subdf3>
    a2dc:	1823883a 	mov	r17,r3
    a2e0:	d8c00717 	ldw	r3,28(sp)
    a2e4:	d9401217 	ldw	r5,72(sp)
    a2e8:	a2000c04 	addi	r8,r20,48
    a2ec:	1021883a 	mov	r16,r2
    a2f0:	1a000005 	stb	r8,0(r3)
    a2f4:	800d883a 	mov	r6,r16
    a2f8:	880f883a 	mov	r7,r17
    a2fc:	a809883a 	mov	r4,r21
    a300:	4029883a 	mov	r20,r8
    a304:	00036240 	call	3624 <__gedf2>
    a308:	00841d16 	blt	zero,r2,b380 <_dtoa_r+0x15f4>
    a30c:	800d883a 	mov	r6,r16
    a310:	880f883a 	mov	r7,r17
    a314:	0009883a 	mov	r4,zero
    a318:	014ffc34 	movhi	r5,16368
    a31c:	0003f6c0 	call	3f6c <__subdf3>
    a320:	d9401217 	ldw	r5,72(sp)
    a324:	100d883a 	mov	r6,r2
    a328:	180f883a 	mov	r7,r3
    a32c:	a809883a 	mov	r4,r21
    a330:	00036240 	call	3624 <__gedf2>
    a334:	db001617 	ldw	r12,88(sp)
    a338:	00840e16 	blt	zero,r2,b374 <_dtoa_r+0x15e8>
    a33c:	00800044 	movi	r2,1
    a340:	13006b0e 	bge	r2,r12,a4f0 <_dtoa_r+0x764>
    a344:	d9000717 	ldw	r4,28(sp)
    a348:	dd800f15 	stw	r22,60(sp)
    a34c:	dcc01015 	stw	r19,64(sp)
    a350:	2319883a 	add	r12,r4,r12
    a354:	dcc01217 	ldw	r19,72(sp)
    a358:	602d883a 	mov	r22,r12
    a35c:	dc801215 	stw	r18,72(sp)
    a360:	b825883a 	mov	r18,r23
    a364:	00000906 	br	a38c <_dtoa_r+0x600>
    a368:	0003f6c0 	call	3f6c <__subdf3>
    a36c:	a80d883a 	mov	r6,r21
    a370:	980f883a 	mov	r7,r19
    a374:	1009883a 	mov	r4,r2
    a378:	180b883a 	mov	r5,r3
    a37c:	000fff00 	call	fff0 <__ledf2>
    a380:	1003e816 	blt	r2,zero,b324 <_dtoa_r+0x1598>
    a384:	b825883a 	mov	r18,r23
    a388:	bd83e926 	beq	r23,r22,b330 <_dtoa_r+0x15a4>
    a38c:	a809883a 	mov	r4,r21
    a390:	980b883a 	mov	r5,r19
    a394:	000d883a 	mov	r6,zero
    a398:	01d00934 	movhi	r7,16420
    a39c:	00037000 	call	3700 <__muldf3>
    a3a0:	000d883a 	mov	r6,zero
    a3a4:	01d00934 	movhi	r7,16420
    a3a8:	8009883a 	mov	r4,r16
    a3ac:	880b883a 	mov	r5,r17
    a3b0:	102b883a 	mov	r21,r2
    a3b4:	1827883a 	mov	r19,r3
    a3b8:	00037000 	call	3700 <__muldf3>
    a3bc:	180b883a 	mov	r5,r3
    a3c0:	1009883a 	mov	r4,r2
    a3c4:	1821883a 	mov	r16,r3
    a3c8:	1023883a 	mov	r17,r2
    a3cc:	00100e40 	call	100e4 <__fixdfsi>
    a3d0:	1009883a 	mov	r4,r2
    a3d4:	1029883a 	mov	r20,r2
    a3d8:	00048680 	call	4868 <__floatsidf>
    a3dc:	8809883a 	mov	r4,r17
    a3e0:	800b883a 	mov	r5,r16
    a3e4:	100d883a 	mov	r6,r2
    a3e8:	180f883a 	mov	r7,r3
    a3ec:	0003f6c0 	call	3f6c <__subdf3>
    a3f0:	a5000c04 	addi	r20,r20,48
    a3f4:	a80d883a 	mov	r6,r21
    a3f8:	980f883a 	mov	r7,r19
    a3fc:	1009883a 	mov	r4,r2
    a400:	180b883a 	mov	r5,r3
    a404:	95000005 	stb	r20,0(r18)
    a408:	1021883a 	mov	r16,r2
    a40c:	1823883a 	mov	r17,r3
    a410:	000fff00 	call	fff0 <__ledf2>
    a414:	bdc00044 	addi	r23,r23,1
    a418:	800d883a 	mov	r6,r16
    a41c:	880f883a 	mov	r7,r17
    a420:	0009883a 	mov	r4,zero
    a424:	014ffc34 	movhi	r5,16368
    a428:	103fcf0e 	bge	r2,zero,a368 <__alt_data_end+0xfffea368>
    a42c:	d8c01317 	ldw	r3,76(sp)
    a430:	d8c00515 	stw	r3,20(sp)
    a434:	d9400917 	ldw	r5,36(sp)
    a438:	e009883a 	mov	r4,fp
    a43c:	000be000 	call	be00 <_Bfree>
    a440:	d9000517 	ldw	r4,20(sp)
    a444:	d9802317 	ldw	r6,140(sp)
    a448:	d9c02517 	ldw	r7,148(sp)
    a44c:	b8000005 	stb	zero,0(r23)
    a450:	20800044 	addi	r2,r4,1
    a454:	30800015 	stw	r2,0(r6)
    a458:	3802aa26 	beq	r7,zero,af04 <_dtoa_r+0x1178>
    a45c:	3dc00015 	stw	r23,0(r7)
    a460:	d8800717 	ldw	r2,28(sp)
    a464:	003e7906 	br	9e4c <__alt_data_end+0xfffe9e4c>
    a468:	00800434 	movhi	r2,16
    a46c:	10bfffc4 	addi	r2,r2,-1
    a470:	88a2703a 	and	r17,r17,r2
    a474:	883e851e 	bne	r17,zero,9e8c <__alt_data_end+0xfffe9e8c>
    a478:	00800074 	movhi	r2,1
    a47c:	108b0904 	addi	r2,r2,11300
    a480:	003e8406 	br	9e94 <__alt_data_end+0xfffe9e94>
    a484:	10c00204 	addi	r3,r2,8
    a488:	003e8706 	br	9ea8 <__alt_data_end+0xfffe9ea8>
    a48c:	01400434 	movhi	r5,16
    a490:	297fffc4 	addi	r5,r5,-1
    a494:	994a703a 	and	r5,r19,r5
    a498:	9009883a 	mov	r4,r18
    a49c:	843f0044 	addi	r16,r16,-1023
    a4a0:	294ffc34 	orhi	r5,r5,16368
    a4a4:	dd800217 	ldw	r22,8(sp)
    a4a8:	d8001115 	stw	zero,68(sp)
    a4ac:	003ea506 	br	9f44 <__alt_data_end+0xfffe9f44>
    a4b0:	00800074 	movhi	r2,1
    a4b4:	108b0004 	addi	r2,r2,11264
    a4b8:	003e6406 	br	9e4c <__alt_data_end+0xfffe9e4c>
    a4bc:	e0001115 	stw	zero,68(fp)
    a4c0:	000b883a 	mov	r5,zero
    a4c4:	e009883a 	mov	r4,fp
    a4c8:	000bd580 	call	bd58 <_Balloc>
    a4cc:	01bfffc4 	movi	r6,-1
    a4d0:	01c00044 	movi	r7,1
    a4d4:	d8800715 	stw	r2,28(sp)
    a4d8:	d9800c15 	stw	r6,48(sp)
    a4dc:	e0801015 	stw	r2,64(fp)
    a4e0:	d8000315 	stw	zero,12(sp)
    a4e4:	d9c00b15 	stw	r7,44(sp)
    a4e8:	d9800615 	stw	r6,24(sp)
    a4ec:	d8002215 	stw	zero,136(sp)
    a4f0:	d8800117 	ldw	r2,4(sp)
    a4f4:	10008916 	blt	r2,zero,a71c <_dtoa_r+0x990>
    a4f8:	d9000517 	ldw	r4,20(sp)
    a4fc:	00c00384 	movi	r3,14
    a500:	19008616 	blt	r3,r4,a71c <_dtoa_r+0x990>
    a504:	200490fa 	slli	r2,r4,3
    a508:	00c00074 	movhi	r3,1
    a50c:	d9802217 	ldw	r6,136(sp)
    a510:	18cb2704 	addi	r3,r3,11420
    a514:	1885883a 	add	r2,r3,r2
    a518:	14000017 	ldw	r16,0(r2)
    a51c:	14400117 	ldw	r17,4(r2)
    a520:	30016316 	blt	r6,zero,aab0 <_dtoa_r+0xd24>
    a524:	800d883a 	mov	r6,r16
    a528:	880f883a 	mov	r7,r17
    a52c:	9009883a 	mov	r4,r18
    a530:	980b883a 	mov	r5,r19
    a534:	0002c540 	call	2c54 <__divdf3>
    a538:	180b883a 	mov	r5,r3
    a53c:	1009883a 	mov	r4,r2
    a540:	00100e40 	call	100e4 <__fixdfsi>
    a544:	1009883a 	mov	r4,r2
    a548:	102b883a 	mov	r21,r2
    a54c:	00048680 	call	4868 <__floatsidf>
    a550:	800d883a 	mov	r6,r16
    a554:	880f883a 	mov	r7,r17
    a558:	1009883a 	mov	r4,r2
    a55c:	180b883a 	mov	r5,r3
    a560:	00037000 	call	3700 <__muldf3>
    a564:	100d883a 	mov	r6,r2
    a568:	180f883a 	mov	r7,r3
    a56c:	9009883a 	mov	r4,r18
    a570:	980b883a 	mov	r5,r19
    a574:	0003f6c0 	call	3f6c <__subdf3>
    a578:	d9c00717 	ldw	r7,28(sp)
    a57c:	1009883a 	mov	r4,r2
    a580:	a8800c04 	addi	r2,r21,48
    a584:	38800005 	stb	r2,0(r7)
    a588:	3dc00044 	addi	r23,r7,1
    a58c:	d9c00617 	ldw	r7,24(sp)
    a590:	01800044 	movi	r6,1
    a594:	180b883a 	mov	r5,r3
    a598:	2005883a 	mov	r2,r4
    a59c:	39803826 	beq	r7,r6,a680 <_dtoa_r+0x8f4>
    a5a0:	000d883a 	mov	r6,zero
    a5a4:	01d00934 	movhi	r7,16420
    a5a8:	00037000 	call	3700 <__muldf3>
    a5ac:	000d883a 	mov	r6,zero
    a5b0:	000f883a 	mov	r7,zero
    a5b4:	1009883a 	mov	r4,r2
    a5b8:	180b883a 	mov	r5,r3
    a5bc:	1025883a 	mov	r18,r2
    a5c0:	1827883a 	mov	r19,r3
    a5c4:	000ff680 	call	ff68 <__eqdf2>
    a5c8:	103f9a26 	beq	r2,zero,a434 <__alt_data_end+0xfffea434>
    a5cc:	d9c00617 	ldw	r7,24(sp)
    a5d0:	d8c00717 	ldw	r3,28(sp)
    a5d4:	b829883a 	mov	r20,r23
    a5d8:	38bfffc4 	addi	r2,r7,-1
    a5dc:	18ad883a 	add	r22,r3,r2
    a5e0:	00000a06 	br	a60c <_dtoa_r+0x880>
    a5e4:	00037000 	call	3700 <__muldf3>
    a5e8:	000d883a 	mov	r6,zero
    a5ec:	000f883a 	mov	r7,zero
    a5f0:	1009883a 	mov	r4,r2
    a5f4:	180b883a 	mov	r5,r3
    a5f8:	1025883a 	mov	r18,r2
    a5fc:	1827883a 	mov	r19,r3
    a600:	b829883a 	mov	r20,r23
    a604:	000ff680 	call	ff68 <__eqdf2>
    a608:	103f8a26 	beq	r2,zero,a434 <__alt_data_end+0xfffea434>
    a60c:	800d883a 	mov	r6,r16
    a610:	880f883a 	mov	r7,r17
    a614:	9009883a 	mov	r4,r18
    a618:	980b883a 	mov	r5,r19
    a61c:	0002c540 	call	2c54 <__divdf3>
    a620:	180b883a 	mov	r5,r3
    a624:	1009883a 	mov	r4,r2
    a628:	00100e40 	call	100e4 <__fixdfsi>
    a62c:	1009883a 	mov	r4,r2
    a630:	102b883a 	mov	r21,r2
    a634:	00048680 	call	4868 <__floatsidf>
    a638:	800d883a 	mov	r6,r16
    a63c:	880f883a 	mov	r7,r17
    a640:	1009883a 	mov	r4,r2
    a644:	180b883a 	mov	r5,r3
    a648:	00037000 	call	3700 <__muldf3>
    a64c:	100d883a 	mov	r6,r2
    a650:	180f883a 	mov	r7,r3
    a654:	9009883a 	mov	r4,r18
    a658:	980b883a 	mov	r5,r19
    a65c:	0003f6c0 	call	3f6c <__subdf3>
    a660:	aa000c04 	addi	r8,r21,48
    a664:	a2000005 	stb	r8,0(r20)
    a668:	000d883a 	mov	r6,zero
    a66c:	01d00934 	movhi	r7,16420
    a670:	1009883a 	mov	r4,r2
    a674:	180b883a 	mov	r5,r3
    a678:	a5c00044 	addi	r23,r20,1
    a67c:	b53fd91e 	bne	r22,r20,a5e4 <__alt_data_end+0xfffea5e4>
    a680:	100d883a 	mov	r6,r2
    a684:	180f883a 	mov	r7,r3
    a688:	1009883a 	mov	r4,r2
    a68c:	180b883a 	mov	r5,r3
    a690:	00023a80 	call	23a8 <__adddf3>
    a694:	100d883a 	mov	r6,r2
    a698:	180f883a 	mov	r7,r3
    a69c:	8009883a 	mov	r4,r16
    a6a0:	880b883a 	mov	r5,r17
    a6a4:	1027883a 	mov	r19,r2
    a6a8:	1825883a 	mov	r18,r3
    a6ac:	000fff00 	call	fff0 <__ledf2>
    a6b0:	10000816 	blt	r2,zero,a6d4 <_dtoa_r+0x948>
    a6b4:	980d883a 	mov	r6,r19
    a6b8:	900f883a 	mov	r7,r18
    a6bc:	8009883a 	mov	r4,r16
    a6c0:	880b883a 	mov	r5,r17
    a6c4:	000ff680 	call	ff68 <__eqdf2>
    a6c8:	103f5a1e 	bne	r2,zero,a434 <__alt_data_end+0xfffea434>
    a6cc:	ad40004c 	andi	r21,r21,1
    a6d0:	a83f5826 	beq	r21,zero,a434 <__alt_data_end+0xfffea434>
    a6d4:	bd3fffc3 	ldbu	r20,-1(r23)
    a6d8:	b8bfffc4 	addi	r2,r23,-1
    a6dc:	1007883a 	mov	r3,r2
    a6e0:	01400e44 	movi	r5,57
    a6e4:	d9800717 	ldw	r6,28(sp)
    a6e8:	00000506 	br	a700 <_dtoa_r+0x974>
    a6ec:	18ffffc4 	addi	r3,r3,-1
    a6f0:	11824726 	beq	r2,r6,b010 <_dtoa_r+0x1284>
    a6f4:	1d000003 	ldbu	r20,0(r3)
    a6f8:	102f883a 	mov	r23,r2
    a6fc:	10bfffc4 	addi	r2,r2,-1
    a700:	a1003fcc 	andi	r4,r20,255
    a704:	2100201c 	xori	r4,r4,128
    a708:	213fe004 	addi	r4,r4,-128
    a70c:	217ff726 	beq	r4,r5,a6ec <__alt_data_end+0xfffea6ec>
    a710:	a2000044 	addi	r8,r20,1
    a714:	12000005 	stb	r8,0(r2)
    a718:	003f4606 	br	a434 <__alt_data_end+0xfffea434>
    a71c:	d9000b17 	ldw	r4,44(sp)
    a720:	2000c826 	beq	r4,zero,aa44 <_dtoa_r+0xcb8>
    a724:	d9800317 	ldw	r6,12(sp)
    a728:	00c00044 	movi	r3,1
    a72c:	1980f90e 	bge	r3,r6,ab14 <_dtoa_r+0xd88>
    a730:	d8800617 	ldw	r2,24(sp)
    a734:	d8c00a17 	ldw	r3,40(sp)
    a738:	157fffc4 	addi	r21,r2,-1
    a73c:	1d41f316 	blt	r3,r21,af0c <_dtoa_r+0x1180>
    a740:	1d6bc83a 	sub	r21,r3,r21
    a744:	d9c00617 	ldw	r7,24(sp)
    a748:	3802aa16 	blt	r7,zero,b1f4 <_dtoa_r+0x1468>
    a74c:	dd000817 	ldw	r20,32(sp)
    a750:	d8800617 	ldw	r2,24(sp)
    a754:	d8c00817 	ldw	r3,32(sp)
    a758:	01400044 	movi	r5,1
    a75c:	e009883a 	mov	r4,fp
    a760:	1887883a 	add	r3,r3,r2
    a764:	d8c00815 	stw	r3,32(sp)
    a768:	b0ad883a 	add	r22,r22,r2
    a76c:	000c18c0 	call	c18c <__i2b>
    a770:	1023883a 	mov	r17,r2
    a774:	a0000826 	beq	r20,zero,a798 <_dtoa_r+0xa0c>
    a778:	0580070e 	bge	zero,r22,a798 <_dtoa_r+0xa0c>
    a77c:	a005883a 	mov	r2,r20
    a780:	b500b916 	blt	r22,r20,aa68 <_dtoa_r+0xcdc>
    a784:	d9000817 	ldw	r4,32(sp)
    a788:	a0a9c83a 	sub	r20,r20,r2
    a78c:	b0adc83a 	sub	r22,r22,r2
    a790:	2089c83a 	sub	r4,r4,r2
    a794:	d9000815 	stw	r4,32(sp)
    a798:	d9800a17 	ldw	r6,40(sp)
    a79c:	0181810e 	bge	zero,r6,ada4 <_dtoa_r+0x1018>
    a7a0:	d9c00b17 	ldw	r7,44(sp)
    a7a4:	3800b326 	beq	r7,zero,aa74 <_dtoa_r+0xce8>
    a7a8:	a800b226 	beq	r21,zero,aa74 <_dtoa_r+0xce8>
    a7ac:	880b883a 	mov	r5,r17
    a7b0:	a80d883a 	mov	r6,r21
    a7b4:	e009883a 	mov	r4,fp
    a7b8:	000c4540 	call	c454 <__pow5mult>
    a7bc:	d9800917 	ldw	r6,36(sp)
    a7c0:	100b883a 	mov	r5,r2
    a7c4:	e009883a 	mov	r4,fp
    a7c8:	1023883a 	mov	r17,r2
    a7cc:	000c1c80 	call	c1c8 <__multiply>
    a7d0:	1021883a 	mov	r16,r2
    a7d4:	d8800a17 	ldw	r2,40(sp)
    a7d8:	d9400917 	ldw	r5,36(sp)
    a7dc:	e009883a 	mov	r4,fp
    a7e0:	1545c83a 	sub	r2,r2,r21
    a7e4:	d8800a15 	stw	r2,40(sp)
    a7e8:	000be000 	call	be00 <_Bfree>
    a7ec:	d8c00a17 	ldw	r3,40(sp)
    a7f0:	18009f1e 	bne	r3,zero,aa70 <_dtoa_r+0xce4>
    a7f4:	05c00044 	movi	r23,1
    a7f8:	e009883a 	mov	r4,fp
    a7fc:	b80b883a 	mov	r5,r23
    a800:	000c18c0 	call	c18c <__i2b>
    a804:	d9000d17 	ldw	r4,52(sp)
    a808:	102b883a 	mov	r21,r2
    a80c:	2000ce26 	beq	r4,zero,ab48 <_dtoa_r+0xdbc>
    a810:	200d883a 	mov	r6,r4
    a814:	100b883a 	mov	r5,r2
    a818:	e009883a 	mov	r4,fp
    a81c:	000c4540 	call	c454 <__pow5mult>
    a820:	d9800317 	ldw	r6,12(sp)
    a824:	102b883a 	mov	r21,r2
    a828:	b981810e 	bge	r23,r6,ae30 <_dtoa_r+0x10a4>
    a82c:	0027883a 	mov	r19,zero
    a830:	a8800417 	ldw	r2,16(r21)
    a834:	05c00804 	movi	r23,32
    a838:	10800104 	addi	r2,r2,4
    a83c:	1085883a 	add	r2,r2,r2
    a840:	1085883a 	add	r2,r2,r2
    a844:	a885883a 	add	r2,r21,r2
    a848:	11000017 	ldw	r4,0(r2)
    a84c:	000c0740 	call	c074 <__hi0bits>
    a850:	b885c83a 	sub	r2,r23,r2
    a854:	1585883a 	add	r2,r2,r22
    a858:	108007cc 	andi	r2,r2,31
    a85c:	1000b326 	beq	r2,zero,ab2c <_dtoa_r+0xda0>
    a860:	00c00804 	movi	r3,32
    a864:	1887c83a 	sub	r3,r3,r2
    a868:	01000104 	movi	r4,4
    a86c:	20c2cd0e 	bge	r4,r3,b3a4 <_dtoa_r+0x1618>
    a870:	00c00704 	movi	r3,28
    a874:	1885c83a 	sub	r2,r3,r2
    a878:	d8c00817 	ldw	r3,32(sp)
    a87c:	a0a9883a 	add	r20,r20,r2
    a880:	b0ad883a 	add	r22,r22,r2
    a884:	1887883a 	add	r3,r3,r2
    a888:	d8c00815 	stw	r3,32(sp)
    a88c:	d9800817 	ldw	r6,32(sp)
    a890:	0180040e 	bge	zero,r6,a8a4 <_dtoa_r+0xb18>
    a894:	800b883a 	mov	r5,r16
    a898:	e009883a 	mov	r4,fp
    a89c:	000c5940 	call	c594 <__lshift>
    a8a0:	1021883a 	mov	r16,r2
    a8a4:	0580050e 	bge	zero,r22,a8bc <_dtoa_r+0xb30>
    a8a8:	a80b883a 	mov	r5,r21
    a8ac:	b00d883a 	mov	r6,r22
    a8b0:	e009883a 	mov	r4,fp
    a8b4:	000c5940 	call	c594 <__lshift>
    a8b8:	102b883a 	mov	r21,r2
    a8bc:	d9c00e17 	ldw	r7,56(sp)
    a8c0:	3801211e 	bne	r7,zero,ad48 <_dtoa_r+0xfbc>
    a8c4:	d9800617 	ldw	r6,24(sp)
    a8c8:	0181380e 	bge	zero,r6,adac <_dtoa_r+0x1020>
    a8cc:	d8c00b17 	ldw	r3,44(sp)
    a8d0:	1800ab1e 	bne	r3,zero,ab80 <_dtoa_r+0xdf4>
    a8d4:	dc800717 	ldw	r18,28(sp)
    a8d8:	dcc00617 	ldw	r19,24(sp)
    a8dc:	9029883a 	mov	r20,r18
    a8e0:	00000206 	br	a8ec <_dtoa_r+0xb60>
    a8e4:	000be280 	call	be28 <__multadd>
    a8e8:	1021883a 	mov	r16,r2
    a8ec:	a80b883a 	mov	r5,r21
    a8f0:	8009883a 	mov	r4,r16
    a8f4:	0009b640 	call	9b64 <quorem>
    a8f8:	10800c04 	addi	r2,r2,48
    a8fc:	90800005 	stb	r2,0(r18)
    a900:	94800044 	addi	r18,r18,1
    a904:	9507c83a 	sub	r3,r18,r20
    a908:	000f883a 	mov	r7,zero
    a90c:	01800284 	movi	r6,10
    a910:	800b883a 	mov	r5,r16
    a914:	e009883a 	mov	r4,fp
    a918:	1cfff216 	blt	r3,r19,a8e4 <__alt_data_end+0xfffea8e4>
    a91c:	1011883a 	mov	r8,r2
    a920:	d8800617 	ldw	r2,24(sp)
    a924:	0082370e 	bge	zero,r2,b204 <_dtoa_r+0x1478>
    a928:	d9000717 	ldw	r4,28(sp)
    a92c:	0025883a 	mov	r18,zero
    a930:	20af883a 	add	r23,r4,r2
    a934:	01800044 	movi	r6,1
    a938:	800b883a 	mov	r5,r16
    a93c:	e009883a 	mov	r4,fp
    a940:	da001715 	stw	r8,92(sp)
    a944:	000c5940 	call	c594 <__lshift>
    a948:	a80b883a 	mov	r5,r21
    a94c:	1009883a 	mov	r4,r2
    a950:	d8800915 	stw	r2,36(sp)
    a954:	000c6dc0 	call	c6dc <__mcmp>
    a958:	da001717 	ldw	r8,92(sp)
    a95c:	0081800e 	bge	zero,r2,af60 <_dtoa_r+0x11d4>
    a960:	b93fffc3 	ldbu	r4,-1(r23)
    a964:	b8bfffc4 	addi	r2,r23,-1
    a968:	1007883a 	mov	r3,r2
    a96c:	01800e44 	movi	r6,57
    a970:	d9c00717 	ldw	r7,28(sp)
    a974:	00000506 	br	a98c <_dtoa_r+0xc00>
    a978:	18ffffc4 	addi	r3,r3,-1
    a97c:	11c12326 	beq	r2,r7,ae0c <_dtoa_r+0x1080>
    a980:	19000003 	ldbu	r4,0(r3)
    a984:	102f883a 	mov	r23,r2
    a988:	10bfffc4 	addi	r2,r2,-1
    a98c:	21403fcc 	andi	r5,r4,255
    a990:	2940201c 	xori	r5,r5,128
    a994:	297fe004 	addi	r5,r5,-128
    a998:	29bff726 	beq	r5,r6,a978 <__alt_data_end+0xfffea978>
    a99c:	21000044 	addi	r4,r4,1
    a9a0:	11000005 	stb	r4,0(r2)
    a9a4:	a80b883a 	mov	r5,r21
    a9a8:	e009883a 	mov	r4,fp
    a9ac:	000be000 	call	be00 <_Bfree>
    a9b0:	883ea026 	beq	r17,zero,a434 <__alt_data_end+0xfffea434>
    a9b4:	90000426 	beq	r18,zero,a9c8 <_dtoa_r+0xc3c>
    a9b8:	94400326 	beq	r18,r17,a9c8 <_dtoa_r+0xc3c>
    a9bc:	900b883a 	mov	r5,r18
    a9c0:	e009883a 	mov	r4,fp
    a9c4:	000be000 	call	be00 <_Bfree>
    a9c8:	880b883a 	mov	r5,r17
    a9cc:	e009883a 	mov	r4,fp
    a9d0:	000be000 	call	be00 <_Bfree>
    a9d4:	003e9706 	br	a434 <__alt_data_end+0xfffea434>
    a9d8:	01800044 	movi	r6,1
    a9dc:	d9800e15 	stw	r6,56(sp)
    a9e0:	003d9606 	br	a03c <__alt_data_end+0xfffea03c>
    a9e4:	d8800817 	ldw	r2,32(sp)
    a9e8:	d8c00517 	ldw	r3,20(sp)
    a9ec:	d8000d15 	stw	zero,52(sp)
    a9f0:	10c5c83a 	sub	r2,r2,r3
    a9f4:	00c9c83a 	sub	r4,zero,r3
    a9f8:	d8800815 	stw	r2,32(sp)
    a9fc:	d9000a15 	stw	r4,40(sp)
    aa00:	003d9706 	br	a060 <__alt_data_end+0xfffea060>
    aa04:	05adc83a 	sub	r22,zero,r22
    aa08:	dd800815 	stw	r22,32(sp)
    aa0c:	002d883a 	mov	r22,zero
    aa10:	003d8e06 	br	a04c <__alt_data_end+0xfffea04c>
    aa14:	d9000517 	ldw	r4,20(sp)
    aa18:	00048680 	call	4868 <__floatsidf>
    aa1c:	100d883a 	mov	r6,r2
    aa20:	180f883a 	mov	r7,r3
    aa24:	a009883a 	mov	r4,r20
    aa28:	880b883a 	mov	r5,r17
    aa2c:	000ff680 	call	ff68 <__eqdf2>
    aa30:	103d7126 	beq	r2,zero,9ff8 <__alt_data_end+0xfffe9ff8>
    aa34:	d9c00517 	ldw	r7,20(sp)
    aa38:	39ffffc4 	addi	r7,r7,-1
    aa3c:	d9c00515 	stw	r7,20(sp)
    aa40:	003d6d06 	br	9ff8 <__alt_data_end+0xfffe9ff8>
    aa44:	dd400a17 	ldw	r21,40(sp)
    aa48:	dd000817 	ldw	r20,32(sp)
    aa4c:	0023883a 	mov	r17,zero
    aa50:	003f4806 	br	a774 <__alt_data_end+0xfffea774>
    aa54:	10e3c83a 	sub	r17,r2,r3
    aa58:	9448983a 	sll	r4,r18,r17
    aa5c:	003d3206 	br	9f28 <__alt_data_end+0xfffe9f28>
    aa60:	d8000e15 	stw	zero,56(sp)
    aa64:	003d7506 	br	a03c <__alt_data_end+0xfffea03c>
    aa68:	b005883a 	mov	r2,r22
    aa6c:	003f4506 	br	a784 <__alt_data_end+0xfffea784>
    aa70:	dc000915 	stw	r16,36(sp)
    aa74:	d9800a17 	ldw	r6,40(sp)
    aa78:	d9400917 	ldw	r5,36(sp)
    aa7c:	e009883a 	mov	r4,fp
    aa80:	000c4540 	call	c454 <__pow5mult>
    aa84:	1021883a 	mov	r16,r2
    aa88:	003f5a06 	br	a7f4 <__alt_data_end+0xfffea7f4>
    aa8c:	01c00044 	movi	r7,1
    aa90:	d9c00b15 	stw	r7,44(sp)
    aa94:	d8802217 	ldw	r2,136(sp)
    aa98:	0081280e 	bge	zero,r2,af3c <_dtoa_r+0x11b0>
    aa9c:	100d883a 	mov	r6,r2
    aaa0:	1021883a 	mov	r16,r2
    aaa4:	d8800c15 	stw	r2,48(sp)
    aaa8:	d8800615 	stw	r2,24(sp)
    aaac:	003d8806 	br	a0d0 <__alt_data_end+0xfffea0d0>
    aab0:	d8800617 	ldw	r2,24(sp)
    aab4:	00be9b16 	blt	zero,r2,a524 <__alt_data_end+0xfffea524>
    aab8:	10010f1e 	bne	r2,zero,aef8 <_dtoa_r+0x116c>
    aabc:	880b883a 	mov	r5,r17
    aac0:	000d883a 	mov	r6,zero
    aac4:	01d00534 	movhi	r7,16404
    aac8:	8009883a 	mov	r4,r16
    aacc:	00037000 	call	3700 <__muldf3>
    aad0:	900d883a 	mov	r6,r18
    aad4:	980f883a 	mov	r7,r19
    aad8:	1009883a 	mov	r4,r2
    aadc:	180b883a 	mov	r5,r3
    aae0:	00036240 	call	3624 <__gedf2>
    aae4:	002b883a 	mov	r21,zero
    aae8:	0023883a 	mov	r17,zero
    aaec:	1000bf16 	blt	r2,zero,adec <_dtoa_r+0x1060>
    aaf0:	d9802217 	ldw	r6,136(sp)
    aaf4:	ddc00717 	ldw	r23,28(sp)
    aaf8:	018c303a 	nor	r6,zero,r6
    aafc:	d9800515 	stw	r6,20(sp)
    ab00:	a80b883a 	mov	r5,r21
    ab04:	e009883a 	mov	r4,fp
    ab08:	000be000 	call	be00 <_Bfree>
    ab0c:	883e4926 	beq	r17,zero,a434 <__alt_data_end+0xfffea434>
    ab10:	003fad06 	br	a9c8 <__alt_data_end+0xfffea9c8>
    ab14:	d9c01117 	ldw	r7,68(sp)
    ab18:	3801bc26 	beq	r7,zero,b20c <_dtoa_r+0x1480>
    ab1c:	10810cc4 	addi	r2,r2,1075
    ab20:	dd400a17 	ldw	r21,40(sp)
    ab24:	dd000817 	ldw	r20,32(sp)
    ab28:	003f0a06 	br	a754 <__alt_data_end+0xfffea754>
    ab2c:	00800704 	movi	r2,28
    ab30:	d9000817 	ldw	r4,32(sp)
    ab34:	a0a9883a 	add	r20,r20,r2
    ab38:	b0ad883a 	add	r22,r22,r2
    ab3c:	2089883a 	add	r4,r4,r2
    ab40:	d9000815 	stw	r4,32(sp)
    ab44:	003f5106 	br	a88c <__alt_data_end+0xfffea88c>
    ab48:	d8c00317 	ldw	r3,12(sp)
    ab4c:	b8c1fc0e 	bge	r23,r3,b340 <_dtoa_r+0x15b4>
    ab50:	0027883a 	mov	r19,zero
    ab54:	b805883a 	mov	r2,r23
    ab58:	003f3e06 	br	a854 <__alt_data_end+0xfffea854>
    ab5c:	880b883a 	mov	r5,r17
    ab60:	e009883a 	mov	r4,fp
    ab64:	000f883a 	mov	r7,zero
    ab68:	01800284 	movi	r6,10
    ab6c:	000be280 	call	be28 <__multadd>
    ab70:	d9000c17 	ldw	r4,48(sp)
    ab74:	1023883a 	mov	r17,r2
    ab78:	0102040e 	bge	zero,r4,b38c <_dtoa_r+0x1600>
    ab7c:	d9000615 	stw	r4,24(sp)
    ab80:	0500050e 	bge	zero,r20,ab98 <_dtoa_r+0xe0c>
    ab84:	880b883a 	mov	r5,r17
    ab88:	a00d883a 	mov	r6,r20
    ab8c:	e009883a 	mov	r4,fp
    ab90:	000c5940 	call	c594 <__lshift>
    ab94:	1023883a 	mov	r17,r2
    ab98:	9801241e 	bne	r19,zero,b02c <_dtoa_r+0x12a0>
    ab9c:	8829883a 	mov	r20,r17
    aba0:	d9000617 	ldw	r4,24(sp)
    aba4:	dcc00717 	ldw	r19,28(sp)
    aba8:	9480004c 	andi	r18,r18,1
    abac:	20bfffc4 	addi	r2,r4,-1
    abb0:	9885883a 	add	r2,r19,r2
    abb4:	d8800415 	stw	r2,16(sp)
    abb8:	dc800615 	stw	r18,24(sp)
    abbc:	a80b883a 	mov	r5,r21
    abc0:	8009883a 	mov	r4,r16
    abc4:	0009b640 	call	9b64 <quorem>
    abc8:	880b883a 	mov	r5,r17
    abcc:	8009883a 	mov	r4,r16
    abd0:	102f883a 	mov	r23,r2
    abd4:	000c6dc0 	call	c6dc <__mcmp>
    abd8:	a80b883a 	mov	r5,r21
    abdc:	a00d883a 	mov	r6,r20
    abe0:	e009883a 	mov	r4,fp
    abe4:	102d883a 	mov	r22,r2
    abe8:	000c73c0 	call	c73c <__mdiff>
    abec:	1007883a 	mov	r3,r2
    abf0:	10800317 	ldw	r2,12(r2)
    abf4:	bc800c04 	addi	r18,r23,48
    abf8:	180b883a 	mov	r5,r3
    abfc:	10004e1e 	bne	r2,zero,ad38 <_dtoa_r+0xfac>
    ac00:	8009883a 	mov	r4,r16
    ac04:	d8c01615 	stw	r3,88(sp)
    ac08:	000c6dc0 	call	c6dc <__mcmp>
    ac0c:	d8c01617 	ldw	r3,88(sp)
    ac10:	e009883a 	mov	r4,fp
    ac14:	d8801615 	stw	r2,88(sp)
    ac18:	180b883a 	mov	r5,r3
    ac1c:	000be000 	call	be00 <_Bfree>
    ac20:	d8801617 	ldw	r2,88(sp)
    ac24:	1000041e 	bne	r2,zero,ac38 <_dtoa_r+0xeac>
    ac28:	d9800317 	ldw	r6,12(sp)
    ac2c:	3000021e 	bne	r6,zero,ac38 <_dtoa_r+0xeac>
    ac30:	d8c00617 	ldw	r3,24(sp)
    ac34:	18003726 	beq	r3,zero,ad14 <_dtoa_r+0xf88>
    ac38:	b0002016 	blt	r22,zero,acbc <_dtoa_r+0xf30>
    ac3c:	b000041e 	bne	r22,zero,ac50 <_dtoa_r+0xec4>
    ac40:	d9000317 	ldw	r4,12(sp)
    ac44:	2000021e 	bne	r4,zero,ac50 <_dtoa_r+0xec4>
    ac48:	d8c00617 	ldw	r3,24(sp)
    ac4c:	18001b26 	beq	r3,zero,acbc <_dtoa_r+0xf30>
    ac50:	00810716 	blt	zero,r2,b070 <_dtoa_r+0x12e4>
    ac54:	d8c00417 	ldw	r3,16(sp)
    ac58:	9d800044 	addi	r22,r19,1
    ac5c:	9c800005 	stb	r18,0(r19)
    ac60:	b02f883a 	mov	r23,r22
    ac64:	98c10626 	beq	r19,r3,b080 <_dtoa_r+0x12f4>
    ac68:	800b883a 	mov	r5,r16
    ac6c:	000f883a 	mov	r7,zero
    ac70:	01800284 	movi	r6,10
    ac74:	e009883a 	mov	r4,fp
    ac78:	000be280 	call	be28 <__multadd>
    ac7c:	1021883a 	mov	r16,r2
    ac80:	000f883a 	mov	r7,zero
    ac84:	01800284 	movi	r6,10
    ac88:	880b883a 	mov	r5,r17
    ac8c:	e009883a 	mov	r4,fp
    ac90:	8d002526 	beq	r17,r20,ad28 <_dtoa_r+0xf9c>
    ac94:	000be280 	call	be28 <__multadd>
    ac98:	a00b883a 	mov	r5,r20
    ac9c:	000f883a 	mov	r7,zero
    aca0:	01800284 	movi	r6,10
    aca4:	e009883a 	mov	r4,fp
    aca8:	1023883a 	mov	r17,r2
    acac:	000be280 	call	be28 <__multadd>
    acb0:	1029883a 	mov	r20,r2
    acb4:	b027883a 	mov	r19,r22
    acb8:	003fc006 	br	abbc <__alt_data_end+0xfffeabbc>
    acbc:	9011883a 	mov	r8,r18
    acc0:	00800e0e 	bge	zero,r2,acfc <_dtoa_r+0xf70>
    acc4:	800b883a 	mov	r5,r16
    acc8:	01800044 	movi	r6,1
    accc:	e009883a 	mov	r4,fp
    acd0:	da001715 	stw	r8,92(sp)
    acd4:	000c5940 	call	c594 <__lshift>
    acd8:	a80b883a 	mov	r5,r21
    acdc:	1009883a 	mov	r4,r2
    ace0:	1021883a 	mov	r16,r2
    ace4:	000c6dc0 	call	c6dc <__mcmp>
    ace8:	da001717 	ldw	r8,92(sp)
    acec:	0081960e 	bge	zero,r2,b348 <_dtoa_r+0x15bc>
    acf0:	00800e44 	movi	r2,57
    acf4:	40817026 	beq	r8,r2,b2b8 <_dtoa_r+0x152c>
    acf8:	ba000c44 	addi	r8,r23,49
    acfc:	8825883a 	mov	r18,r17
    ad00:	9dc00044 	addi	r23,r19,1
    ad04:	9a000005 	stb	r8,0(r19)
    ad08:	a023883a 	mov	r17,r20
    ad0c:	dc000915 	stw	r16,36(sp)
    ad10:	003f2406 	br	a9a4 <__alt_data_end+0xfffea9a4>
    ad14:	00800e44 	movi	r2,57
    ad18:	9011883a 	mov	r8,r18
    ad1c:	90816626 	beq	r18,r2,b2b8 <_dtoa_r+0x152c>
    ad20:	05bff516 	blt	zero,r22,acf8 <__alt_data_end+0xfffeacf8>
    ad24:	003ff506 	br	acfc <__alt_data_end+0xfffeacfc>
    ad28:	000be280 	call	be28 <__multadd>
    ad2c:	1023883a 	mov	r17,r2
    ad30:	1029883a 	mov	r20,r2
    ad34:	003fdf06 	br	acb4 <__alt_data_end+0xfffeacb4>
    ad38:	e009883a 	mov	r4,fp
    ad3c:	000be000 	call	be00 <_Bfree>
    ad40:	00800044 	movi	r2,1
    ad44:	003fbc06 	br	ac38 <__alt_data_end+0xfffeac38>
    ad48:	a80b883a 	mov	r5,r21
    ad4c:	8009883a 	mov	r4,r16
    ad50:	000c6dc0 	call	c6dc <__mcmp>
    ad54:	103edb0e 	bge	r2,zero,a8c4 <__alt_data_end+0xfffea8c4>
    ad58:	800b883a 	mov	r5,r16
    ad5c:	000f883a 	mov	r7,zero
    ad60:	01800284 	movi	r6,10
    ad64:	e009883a 	mov	r4,fp
    ad68:	000be280 	call	be28 <__multadd>
    ad6c:	1021883a 	mov	r16,r2
    ad70:	d8800517 	ldw	r2,20(sp)
    ad74:	d8c00b17 	ldw	r3,44(sp)
    ad78:	10bfffc4 	addi	r2,r2,-1
    ad7c:	d8800515 	stw	r2,20(sp)
    ad80:	183f761e 	bne	r3,zero,ab5c <__alt_data_end+0xfffeab5c>
    ad84:	d9000c17 	ldw	r4,48(sp)
    ad88:	0101730e 	bge	zero,r4,b358 <_dtoa_r+0x15cc>
    ad8c:	d9000615 	stw	r4,24(sp)
    ad90:	003ed006 	br	a8d4 <__alt_data_end+0xfffea8d4>
    ad94:	00800084 	movi	r2,2
    ad98:	3081861e 	bne	r6,r2,b3b4 <_dtoa_r+0x1628>
    ad9c:	d8000b15 	stw	zero,44(sp)
    ada0:	003f3c06 	br	aa94 <__alt_data_end+0xfffeaa94>
    ada4:	dc000917 	ldw	r16,36(sp)
    ada8:	003e9206 	br	a7f4 <__alt_data_end+0xfffea7f4>
    adac:	d9c00317 	ldw	r7,12(sp)
    adb0:	00800084 	movi	r2,2
    adb4:	11fec50e 	bge	r2,r7,a8cc <__alt_data_end+0xfffea8cc>
    adb8:	d9000617 	ldw	r4,24(sp)
    adbc:	20013c1e 	bne	r4,zero,b2b0 <_dtoa_r+0x1524>
    adc0:	a80b883a 	mov	r5,r21
    adc4:	000f883a 	mov	r7,zero
    adc8:	01800144 	movi	r6,5
    adcc:	e009883a 	mov	r4,fp
    add0:	000be280 	call	be28 <__multadd>
    add4:	100b883a 	mov	r5,r2
    add8:	8009883a 	mov	r4,r16
    addc:	102b883a 	mov	r21,r2
    ade0:	000c6dc0 	call	c6dc <__mcmp>
    ade4:	dc000915 	stw	r16,36(sp)
    ade8:	00bf410e 	bge	zero,r2,aaf0 <__alt_data_end+0xfffeaaf0>
    adec:	d9c00717 	ldw	r7,28(sp)
    adf0:	00800c44 	movi	r2,49
    adf4:	38800005 	stb	r2,0(r7)
    adf8:	d8800517 	ldw	r2,20(sp)
    adfc:	3dc00044 	addi	r23,r7,1
    ae00:	10800044 	addi	r2,r2,1
    ae04:	d8800515 	stw	r2,20(sp)
    ae08:	003f3d06 	br	ab00 <__alt_data_end+0xfffeab00>
    ae0c:	d9800517 	ldw	r6,20(sp)
    ae10:	d9c00717 	ldw	r7,28(sp)
    ae14:	00800c44 	movi	r2,49
    ae18:	31800044 	addi	r6,r6,1
    ae1c:	d9800515 	stw	r6,20(sp)
    ae20:	38800005 	stb	r2,0(r7)
    ae24:	003edf06 	br	a9a4 <__alt_data_end+0xfffea9a4>
    ae28:	d8000b15 	stw	zero,44(sp)
    ae2c:	003c9f06 	br	a0ac <__alt_data_end+0xfffea0ac>
    ae30:	903e7e1e 	bne	r18,zero,a82c <__alt_data_end+0xfffea82c>
    ae34:	00800434 	movhi	r2,16
    ae38:	10bfffc4 	addi	r2,r2,-1
    ae3c:	9884703a 	and	r2,r19,r2
    ae40:	1000ea1e 	bne	r2,zero,b1ec <_dtoa_r+0x1460>
    ae44:	9cdffc2c 	andhi	r19,r19,32752
    ae48:	9800e826 	beq	r19,zero,b1ec <_dtoa_r+0x1460>
    ae4c:	d9c00817 	ldw	r7,32(sp)
    ae50:	b5800044 	addi	r22,r22,1
    ae54:	04c00044 	movi	r19,1
    ae58:	39c00044 	addi	r7,r7,1
    ae5c:	d9c00815 	stw	r7,32(sp)
    ae60:	d8800d17 	ldw	r2,52(sp)
    ae64:	103e721e 	bne	r2,zero,a830 <__alt_data_end+0xfffea830>
    ae68:	00800044 	movi	r2,1
    ae6c:	003e7906 	br	a854 <__alt_data_end+0xfffea854>
    ae70:	8009883a 	mov	r4,r16
    ae74:	00048680 	call	4868 <__floatsidf>
    ae78:	d9800f17 	ldw	r6,60(sp)
    ae7c:	d9c01017 	ldw	r7,64(sp)
    ae80:	1009883a 	mov	r4,r2
    ae84:	180b883a 	mov	r5,r3
    ae88:	00037000 	call	3700 <__muldf3>
    ae8c:	000d883a 	mov	r6,zero
    ae90:	01d00734 	movhi	r7,16412
    ae94:	1009883a 	mov	r4,r2
    ae98:	180b883a 	mov	r5,r3
    ae9c:	00023a80 	call	23a8 <__adddf3>
    aea0:	047f3034 	movhi	r17,64704
    aea4:	1021883a 	mov	r16,r2
    aea8:	1c63883a 	add	r17,r3,r17
    aeac:	d9000f17 	ldw	r4,60(sp)
    aeb0:	d9401017 	ldw	r5,64(sp)
    aeb4:	000d883a 	mov	r6,zero
    aeb8:	01d00534 	movhi	r7,16404
    aebc:	0003f6c0 	call	3f6c <__subdf3>
    aec0:	800d883a 	mov	r6,r16
    aec4:	880f883a 	mov	r7,r17
    aec8:	1009883a 	mov	r4,r2
    aecc:	180b883a 	mov	r5,r3
    aed0:	102b883a 	mov	r21,r2
    aed4:	1829883a 	mov	r20,r3
    aed8:	00036240 	call	3624 <__gedf2>
    aedc:	00806c16 	blt	zero,r2,b090 <_dtoa_r+0x1304>
    aee0:	89e0003c 	xorhi	r7,r17,32768
    aee4:	800d883a 	mov	r6,r16
    aee8:	a809883a 	mov	r4,r21
    aeec:	a00b883a 	mov	r5,r20
    aef0:	000fff00 	call	fff0 <__ledf2>
    aef4:	103d7e0e 	bge	r2,zero,a4f0 <__alt_data_end+0xfffea4f0>
    aef8:	002b883a 	mov	r21,zero
    aefc:	0023883a 	mov	r17,zero
    af00:	003efb06 	br	aaf0 <__alt_data_end+0xfffeaaf0>
    af04:	d8800717 	ldw	r2,28(sp)
    af08:	003bd006 	br	9e4c <__alt_data_end+0xfffe9e4c>
    af0c:	d9000a17 	ldw	r4,40(sp)
    af10:	d9800d17 	ldw	r6,52(sp)
    af14:	dd400a15 	stw	r21,40(sp)
    af18:	a905c83a 	sub	r2,r21,r4
    af1c:	308d883a 	add	r6,r6,r2
    af20:	d9800d15 	stw	r6,52(sp)
    af24:	002b883a 	mov	r21,zero
    af28:	003e0606 	br	a744 <__alt_data_end+0xfffea744>
    af2c:	9023883a 	mov	r17,r18
    af30:	9829883a 	mov	r20,r19
    af34:	04000084 	movi	r16,2
    af38:	003c9206 	br	a184 <__alt_data_end+0xfffea184>
    af3c:	04000044 	movi	r16,1
    af40:	dc000c15 	stw	r16,48(sp)
    af44:	dc000615 	stw	r16,24(sp)
    af48:	dc002215 	stw	r16,136(sp)
    af4c:	e0001115 	stw	zero,68(fp)
    af50:	000b883a 	mov	r5,zero
    af54:	003c6906 	br	a0fc <__alt_data_end+0xfffea0fc>
    af58:	3021883a 	mov	r16,r6
    af5c:	003ffb06 	br	af4c <__alt_data_end+0xfffeaf4c>
    af60:	1000021e 	bne	r2,zero,af6c <_dtoa_r+0x11e0>
    af64:	4200004c 	andi	r8,r8,1
    af68:	403e7d1e 	bne	r8,zero,a960 <__alt_data_end+0xfffea960>
    af6c:	01000c04 	movi	r4,48
    af70:	00000106 	br	af78 <_dtoa_r+0x11ec>
    af74:	102f883a 	mov	r23,r2
    af78:	b8bfffc4 	addi	r2,r23,-1
    af7c:	10c00007 	ldb	r3,0(r2)
    af80:	193ffc26 	beq	r3,r4,af74 <__alt_data_end+0xfffeaf74>
    af84:	003e8706 	br	a9a4 <__alt_data_end+0xfffea9a4>
    af88:	d8800517 	ldw	r2,20(sp)
    af8c:	00a3c83a 	sub	r17,zero,r2
    af90:	8800a426 	beq	r17,zero,b224 <_dtoa_r+0x1498>
    af94:	888003cc 	andi	r2,r17,15
    af98:	100490fa 	slli	r2,r2,3
    af9c:	00c00074 	movhi	r3,1
    afa0:	18cb2704 	addi	r3,r3,11420
    afa4:	1885883a 	add	r2,r3,r2
    afa8:	11800017 	ldw	r6,0(r2)
    afac:	11c00117 	ldw	r7,4(r2)
    afb0:	9009883a 	mov	r4,r18
    afb4:	980b883a 	mov	r5,r19
    afb8:	8823d13a 	srai	r17,r17,4
    afbc:	00037000 	call	3700 <__muldf3>
    afc0:	d8800f15 	stw	r2,60(sp)
    afc4:	d8c01015 	stw	r3,64(sp)
    afc8:	8800e826 	beq	r17,zero,b36c <_dtoa_r+0x15e0>
    afcc:	05000074 	movhi	r20,1
    afd0:	a50b1d04 	addi	r20,r20,11380
    afd4:	04000084 	movi	r16,2
    afd8:	8980004c 	andi	r6,r17,1
    afdc:	1009883a 	mov	r4,r2
    afe0:	8823d07a 	srai	r17,r17,1
    afe4:	180b883a 	mov	r5,r3
    afe8:	30000426 	beq	r6,zero,affc <_dtoa_r+0x1270>
    afec:	a1800017 	ldw	r6,0(r20)
    aff0:	a1c00117 	ldw	r7,4(r20)
    aff4:	84000044 	addi	r16,r16,1
    aff8:	00037000 	call	3700 <__muldf3>
    affc:	a5000204 	addi	r20,r20,8
    b000:	883ff51e 	bne	r17,zero,afd8 <__alt_data_end+0xfffeafd8>
    b004:	d8800f15 	stw	r2,60(sp)
    b008:	d8c01015 	stw	r3,64(sp)
    b00c:	003c7606 	br	a1e8 <__alt_data_end+0xfffea1e8>
    b010:	00c00c04 	movi	r3,48
    b014:	10c00005 	stb	r3,0(r2)
    b018:	d8c00517 	ldw	r3,20(sp)
    b01c:	bd3fffc3 	ldbu	r20,-1(r23)
    b020:	18c00044 	addi	r3,r3,1
    b024:	d8c00515 	stw	r3,20(sp)
    b028:	003db906 	br	a710 <__alt_data_end+0xfffea710>
    b02c:	89400117 	ldw	r5,4(r17)
    b030:	e009883a 	mov	r4,fp
    b034:	000bd580 	call	bd58 <_Balloc>
    b038:	89800417 	ldw	r6,16(r17)
    b03c:	89400304 	addi	r5,r17,12
    b040:	11000304 	addi	r4,r2,12
    b044:	31800084 	addi	r6,r6,2
    b048:	318d883a 	add	r6,r6,r6
    b04c:	318d883a 	add	r6,r6,r6
    b050:	1027883a 	mov	r19,r2
    b054:	0006acc0 	call	6acc <memcpy>
    b058:	01800044 	movi	r6,1
    b05c:	980b883a 	mov	r5,r19
    b060:	e009883a 	mov	r4,fp
    b064:	000c5940 	call	c594 <__lshift>
    b068:	1029883a 	mov	r20,r2
    b06c:	003ecc06 	br	aba0 <__alt_data_end+0xfffeaba0>
    b070:	00800e44 	movi	r2,57
    b074:	90809026 	beq	r18,r2,b2b8 <_dtoa_r+0x152c>
    b078:	92000044 	addi	r8,r18,1
    b07c:	003f1f06 	br	acfc <__alt_data_end+0xfffeacfc>
    b080:	9011883a 	mov	r8,r18
    b084:	8825883a 	mov	r18,r17
    b088:	a023883a 	mov	r17,r20
    b08c:	003e2906 	br	a934 <__alt_data_end+0xfffea934>
    b090:	002b883a 	mov	r21,zero
    b094:	0023883a 	mov	r17,zero
    b098:	003f5406 	br	adec <__alt_data_end+0xfffeadec>
    b09c:	61bfffc4 	addi	r6,r12,-1
    b0a0:	300490fa 	slli	r2,r6,3
    b0a4:	00c00074 	movhi	r3,1
    b0a8:	18cb2704 	addi	r3,r3,11420
    b0ac:	1885883a 	add	r2,r3,r2
    b0b0:	11000017 	ldw	r4,0(r2)
    b0b4:	11400117 	ldw	r5,4(r2)
    b0b8:	d8800717 	ldw	r2,28(sp)
    b0bc:	880f883a 	mov	r7,r17
    b0c0:	d9801215 	stw	r6,72(sp)
    b0c4:	800d883a 	mov	r6,r16
    b0c8:	db001615 	stw	r12,88(sp)
    b0cc:	15c00044 	addi	r23,r2,1
    b0d0:	00037000 	call	3700 <__muldf3>
    b0d4:	d9401017 	ldw	r5,64(sp)
    b0d8:	d9000f17 	ldw	r4,60(sp)
    b0dc:	d8c01515 	stw	r3,84(sp)
    b0e0:	d8801415 	stw	r2,80(sp)
    b0e4:	00100e40 	call	100e4 <__fixdfsi>
    b0e8:	1009883a 	mov	r4,r2
    b0ec:	1021883a 	mov	r16,r2
    b0f0:	00048680 	call	4868 <__floatsidf>
    b0f4:	d9000f17 	ldw	r4,60(sp)
    b0f8:	d9401017 	ldw	r5,64(sp)
    b0fc:	100d883a 	mov	r6,r2
    b100:	180f883a 	mov	r7,r3
    b104:	0003f6c0 	call	3f6c <__subdf3>
    b108:	1829883a 	mov	r20,r3
    b10c:	d8c00717 	ldw	r3,28(sp)
    b110:	84000c04 	addi	r16,r16,48
    b114:	1023883a 	mov	r17,r2
    b118:	1c000005 	stb	r16,0(r3)
    b11c:	db001617 	ldw	r12,88(sp)
    b120:	00800044 	movi	r2,1
    b124:	60802226 	beq	r12,r2,b1b0 <_dtoa_r+0x1424>
    b128:	d9c00717 	ldw	r7,28(sp)
    b12c:	8805883a 	mov	r2,r17
    b130:	b82b883a 	mov	r21,r23
    b134:	3b19883a 	add	r12,r7,r12
    b138:	6023883a 	mov	r17,r12
    b13c:	a007883a 	mov	r3,r20
    b140:	dc800f15 	stw	r18,60(sp)
    b144:	000d883a 	mov	r6,zero
    b148:	01d00934 	movhi	r7,16420
    b14c:	1009883a 	mov	r4,r2
    b150:	180b883a 	mov	r5,r3
    b154:	00037000 	call	3700 <__muldf3>
    b158:	180b883a 	mov	r5,r3
    b15c:	1009883a 	mov	r4,r2
    b160:	1829883a 	mov	r20,r3
    b164:	1025883a 	mov	r18,r2
    b168:	00100e40 	call	100e4 <__fixdfsi>
    b16c:	1009883a 	mov	r4,r2
    b170:	1021883a 	mov	r16,r2
    b174:	00048680 	call	4868 <__floatsidf>
    b178:	100d883a 	mov	r6,r2
    b17c:	180f883a 	mov	r7,r3
    b180:	9009883a 	mov	r4,r18
    b184:	a00b883a 	mov	r5,r20
    b188:	84000c04 	addi	r16,r16,48
    b18c:	0003f6c0 	call	3f6c <__subdf3>
    b190:	ad400044 	addi	r21,r21,1
    b194:	ac3fffc5 	stb	r16,-1(r21)
    b198:	ac7fea1e 	bne	r21,r17,b144 <__alt_data_end+0xfffeb144>
    b19c:	1023883a 	mov	r17,r2
    b1a0:	d8801217 	ldw	r2,72(sp)
    b1a4:	dc800f17 	ldw	r18,60(sp)
    b1a8:	1829883a 	mov	r20,r3
    b1ac:	b8af883a 	add	r23,r23,r2
    b1b0:	d9001417 	ldw	r4,80(sp)
    b1b4:	d9401517 	ldw	r5,84(sp)
    b1b8:	000d883a 	mov	r6,zero
    b1bc:	01cff834 	movhi	r7,16352
    b1c0:	00023a80 	call	23a8 <__adddf3>
    b1c4:	880d883a 	mov	r6,r17
    b1c8:	a00f883a 	mov	r7,r20
    b1cc:	1009883a 	mov	r4,r2
    b1d0:	180b883a 	mov	r5,r3
    b1d4:	000fff00 	call	fff0 <__ledf2>
    b1d8:	10003e0e 	bge	r2,zero,b2d4 <_dtoa_r+0x1548>
    b1dc:	d9001317 	ldw	r4,76(sp)
    b1e0:	bd3fffc3 	ldbu	r20,-1(r23)
    b1e4:	d9000515 	stw	r4,20(sp)
    b1e8:	003d3b06 	br	a6d8 <__alt_data_end+0xfffea6d8>
    b1ec:	0027883a 	mov	r19,zero
    b1f0:	003f1b06 	br	ae60 <__alt_data_end+0xfffeae60>
    b1f4:	d8800817 	ldw	r2,32(sp)
    b1f8:	11e9c83a 	sub	r20,r2,r7
    b1fc:	0005883a 	mov	r2,zero
    b200:	003d5406 	br	a754 <__alt_data_end+0xfffea754>
    b204:	00800044 	movi	r2,1
    b208:	003dc706 	br	a928 <__alt_data_end+0xfffea928>
    b20c:	d8c00217 	ldw	r3,8(sp)
    b210:	00800d84 	movi	r2,54
    b214:	dd400a17 	ldw	r21,40(sp)
    b218:	10c5c83a 	sub	r2,r2,r3
    b21c:	dd000817 	ldw	r20,32(sp)
    b220:	003d4c06 	br	a754 <__alt_data_end+0xfffea754>
    b224:	dc800f15 	stw	r18,60(sp)
    b228:	dcc01015 	stw	r19,64(sp)
    b22c:	04000084 	movi	r16,2
    b230:	003bed06 	br	a1e8 <__alt_data_end+0xfffea1e8>
    b234:	d9000617 	ldw	r4,24(sp)
    b238:	203f0d26 	beq	r4,zero,ae70 <__alt_data_end+0xfffeae70>
    b23c:	d9800c17 	ldw	r6,48(sp)
    b240:	01bcab0e 	bge	zero,r6,a4f0 <__alt_data_end+0xfffea4f0>
    b244:	d9401017 	ldw	r5,64(sp)
    b248:	d9000f17 	ldw	r4,60(sp)
    b24c:	000d883a 	mov	r6,zero
    b250:	01d00934 	movhi	r7,16420
    b254:	00037000 	call	3700 <__muldf3>
    b258:	81000044 	addi	r4,r16,1
    b25c:	d8800f15 	stw	r2,60(sp)
    b260:	d8c01015 	stw	r3,64(sp)
    b264:	00048680 	call	4868 <__floatsidf>
    b268:	d9800f17 	ldw	r6,60(sp)
    b26c:	d9c01017 	ldw	r7,64(sp)
    b270:	1009883a 	mov	r4,r2
    b274:	180b883a 	mov	r5,r3
    b278:	00037000 	call	3700 <__muldf3>
    b27c:	01d00734 	movhi	r7,16412
    b280:	000d883a 	mov	r6,zero
    b284:	1009883a 	mov	r4,r2
    b288:	180b883a 	mov	r5,r3
    b28c:	00023a80 	call	23a8 <__adddf3>
    b290:	d9c00517 	ldw	r7,20(sp)
    b294:	047f3034 	movhi	r17,64704
    b298:	1021883a 	mov	r16,r2
    b29c:	39ffffc4 	addi	r7,r7,-1
    b2a0:	d9c01315 	stw	r7,76(sp)
    b2a4:	1c63883a 	add	r17,r3,r17
    b2a8:	db000c17 	ldw	r12,48(sp)
    b2ac:	003bea06 	br	a258 <__alt_data_end+0xfffea258>
    b2b0:	dc000915 	stw	r16,36(sp)
    b2b4:	003e0e06 	br	aaf0 <__alt_data_end+0xfffeaaf0>
    b2b8:	01000e44 	movi	r4,57
    b2bc:	8825883a 	mov	r18,r17
    b2c0:	9dc00044 	addi	r23,r19,1
    b2c4:	99000005 	stb	r4,0(r19)
    b2c8:	a023883a 	mov	r17,r20
    b2cc:	dc000915 	stw	r16,36(sp)
    b2d0:	003da406 	br	a964 <__alt_data_end+0xfffea964>
    b2d4:	d9801417 	ldw	r6,80(sp)
    b2d8:	d9c01517 	ldw	r7,84(sp)
    b2dc:	0009883a 	mov	r4,zero
    b2e0:	014ff834 	movhi	r5,16352
    b2e4:	0003f6c0 	call	3f6c <__subdf3>
    b2e8:	880d883a 	mov	r6,r17
    b2ec:	a00f883a 	mov	r7,r20
    b2f0:	1009883a 	mov	r4,r2
    b2f4:	180b883a 	mov	r5,r3
    b2f8:	00036240 	call	3624 <__gedf2>
    b2fc:	00bc7c0e 	bge	zero,r2,a4f0 <__alt_data_end+0xfffea4f0>
    b300:	01000c04 	movi	r4,48
    b304:	00000106 	br	b30c <_dtoa_r+0x1580>
    b308:	102f883a 	mov	r23,r2
    b30c:	b8bfffc4 	addi	r2,r23,-1
    b310:	10c00007 	ldb	r3,0(r2)
    b314:	193ffc26 	beq	r3,r4,b308 <__alt_data_end+0xfffeb308>
    b318:	d9801317 	ldw	r6,76(sp)
    b31c:	d9800515 	stw	r6,20(sp)
    b320:	003c4406 	br	a434 <__alt_data_end+0xfffea434>
    b324:	d9801317 	ldw	r6,76(sp)
    b328:	d9800515 	stw	r6,20(sp)
    b32c:	003cea06 	br	a6d8 <__alt_data_end+0xfffea6d8>
    b330:	dd800f17 	ldw	r22,60(sp)
    b334:	dcc01017 	ldw	r19,64(sp)
    b338:	dc801217 	ldw	r18,72(sp)
    b33c:	003c6c06 	br	a4f0 <__alt_data_end+0xfffea4f0>
    b340:	903e031e 	bne	r18,zero,ab50 <__alt_data_end+0xfffeab50>
    b344:	003ebb06 	br	ae34 <__alt_data_end+0xfffeae34>
    b348:	103e6c1e 	bne	r2,zero,acfc <__alt_data_end+0xfffeacfc>
    b34c:	4080004c 	andi	r2,r8,1
    b350:	103e6a26 	beq	r2,zero,acfc <__alt_data_end+0xfffeacfc>
    b354:	003e6606 	br	acf0 <__alt_data_end+0xfffeacf0>
    b358:	d8c00317 	ldw	r3,12(sp)
    b35c:	00800084 	movi	r2,2
    b360:	10c02916 	blt	r2,r3,b408 <_dtoa_r+0x167c>
    b364:	d9000c17 	ldw	r4,48(sp)
    b368:	003e8806 	br	ad8c <__alt_data_end+0xfffead8c>
    b36c:	04000084 	movi	r16,2
    b370:	003b9d06 	br	a1e8 <__alt_data_end+0xfffea1e8>
    b374:	d9001317 	ldw	r4,76(sp)
    b378:	d9000515 	stw	r4,20(sp)
    b37c:	003cd606 	br	a6d8 <__alt_data_end+0xfffea6d8>
    b380:	d8801317 	ldw	r2,76(sp)
    b384:	d8800515 	stw	r2,20(sp)
    b388:	003c2a06 	br	a434 <__alt_data_end+0xfffea434>
    b38c:	d9800317 	ldw	r6,12(sp)
    b390:	00800084 	movi	r2,2
    b394:	11801516 	blt	r2,r6,b3ec <_dtoa_r+0x1660>
    b398:	d9c00c17 	ldw	r7,48(sp)
    b39c:	d9c00615 	stw	r7,24(sp)
    b3a0:	003df706 	br	ab80 <__alt_data_end+0xfffeab80>
    b3a4:	193d3926 	beq	r3,r4,a88c <__alt_data_end+0xfffea88c>
    b3a8:	00c00f04 	movi	r3,60
    b3ac:	1885c83a 	sub	r2,r3,r2
    b3b0:	003ddf06 	br	ab30 <__alt_data_end+0xfffeab30>
    b3b4:	e009883a 	mov	r4,fp
    b3b8:	e0001115 	stw	zero,68(fp)
    b3bc:	000b883a 	mov	r5,zero
    b3c0:	000bd580 	call	bd58 <_Balloc>
    b3c4:	d8800715 	stw	r2,28(sp)
    b3c8:	d8c00717 	ldw	r3,28(sp)
    b3cc:	00bfffc4 	movi	r2,-1
    b3d0:	01000044 	movi	r4,1
    b3d4:	d8800c15 	stw	r2,48(sp)
    b3d8:	e0c01015 	stw	r3,64(fp)
    b3dc:	d9000b15 	stw	r4,44(sp)
    b3e0:	d8800615 	stw	r2,24(sp)
    b3e4:	d8002215 	stw	zero,136(sp)
    b3e8:	003c4106 	br	a4f0 <__alt_data_end+0xfffea4f0>
    b3ec:	d8c00c17 	ldw	r3,48(sp)
    b3f0:	d8c00615 	stw	r3,24(sp)
    b3f4:	003e7006 	br	adb8 <__alt_data_end+0xfffeadb8>
    b3f8:	04400044 	movi	r17,1
    b3fc:	003b2006 	br	a080 <__alt_data_end+0xfffea080>
    b400:	000b883a 	mov	r5,zero
    b404:	003b3d06 	br	a0fc <__alt_data_end+0xfffea0fc>
    b408:	d8800c17 	ldw	r2,48(sp)
    b40c:	d8800615 	stw	r2,24(sp)
    b410:	003e6906 	br	adb8 <__alt_data_end+0xfffeadb8>

0000b414 <__sflags>:
    b414:	28800007 	ldb	r2,0(r5)
    b418:	00c01c84 	movi	r3,114
    b41c:	10c02426 	beq	r2,r3,b4b0 <__sflags+0x9c>
    b420:	00c01dc4 	movi	r3,119
    b424:	10c01e26 	beq	r2,r3,b4a0 <__sflags+0x8c>
    b428:	00c01844 	movi	r3,97
    b42c:	10c00426 	beq	r2,r3,b440 <__sflags+0x2c>
    b430:	00800584 	movi	r2,22
    b434:	20800015 	stw	r2,0(r4)
    b438:	0005883a 	mov	r2,zero
    b43c:	f800283a 	ret
    b440:	02c08204 	movi	r11,520
    b444:	01000044 	movi	r4,1
    b448:	00804204 	movi	r2,264
    b44c:	01c00ac4 	movi	r7,43
    b450:	02bff8c4 	movi	r10,-29
    b454:	027fff04 	movi	r9,-4
    b458:	02001e04 	movi	r8,120
    b45c:	29400044 	addi	r5,r5,1
    b460:	28c00007 	ldb	r3,0(r5)
    b464:	18000626 	beq	r3,zero,b480 <__sflags+0x6c>
    b468:	19c00826 	beq	r3,r7,b48c <__sflags+0x78>
    b46c:	1a3ffb1e 	bne	r3,r8,b45c <__alt_data_end+0xfffeb45c>
    b470:	29400044 	addi	r5,r5,1
    b474:	28c00007 	ldb	r3,0(r5)
    b478:	21020014 	ori	r4,r4,2048
    b47c:	183ffa1e 	bne	r3,zero,b468 <__alt_data_end+0xfffeb468>
    b480:	22c8b03a 	or	r4,r4,r11
    b484:	31000015 	stw	r4,0(r6)
    b488:	f800283a 	ret
    b48c:	1284703a 	and	r2,r2,r10
    b490:	2248703a 	and	r4,r4,r9
    b494:	10800414 	ori	r2,r2,16
    b498:	21000094 	ori	r4,r4,2
    b49c:	003fef06 	br	b45c <__alt_data_end+0xfffeb45c>
    b4a0:	02c18004 	movi	r11,1536
    b4a4:	01000044 	movi	r4,1
    b4a8:	00800204 	movi	r2,8
    b4ac:	003fe706 	br	b44c <__alt_data_end+0xfffeb44c>
    b4b0:	0017883a 	mov	r11,zero
    b4b4:	0009883a 	mov	r4,zero
    b4b8:	00800104 	movi	r2,4
    b4bc:	003fe306 	br	b44c <__alt_data_end+0xfffeb44c>

0000b4c0 <__sfvwrite_r>:
    b4c0:	30800217 	ldw	r2,8(r6)
    b4c4:	10006726 	beq	r2,zero,b664 <__sfvwrite_r+0x1a4>
    b4c8:	28c0030b 	ldhu	r3,12(r5)
    b4cc:	defff404 	addi	sp,sp,-48
    b4d0:	dd400715 	stw	r21,28(sp)
    b4d4:	dd000615 	stw	r20,24(sp)
    b4d8:	dc000215 	stw	r16,8(sp)
    b4dc:	dfc00b15 	stw	ra,44(sp)
    b4e0:	df000a15 	stw	fp,40(sp)
    b4e4:	ddc00915 	stw	r23,36(sp)
    b4e8:	dd800815 	stw	r22,32(sp)
    b4ec:	dcc00515 	stw	r19,20(sp)
    b4f0:	dc800415 	stw	r18,16(sp)
    b4f4:	dc400315 	stw	r17,12(sp)
    b4f8:	1880020c 	andi	r2,r3,8
    b4fc:	2821883a 	mov	r16,r5
    b500:	202b883a 	mov	r21,r4
    b504:	3029883a 	mov	r20,r6
    b508:	10002726 	beq	r2,zero,b5a8 <__sfvwrite_r+0xe8>
    b50c:	28800417 	ldw	r2,16(r5)
    b510:	10002526 	beq	r2,zero,b5a8 <__sfvwrite_r+0xe8>
    b514:	1880008c 	andi	r2,r3,2
    b518:	a4400017 	ldw	r17,0(r20)
    b51c:	10002a26 	beq	r2,zero,b5c8 <__sfvwrite_r+0x108>
    b520:	05a00034 	movhi	r22,32768
    b524:	0027883a 	mov	r19,zero
    b528:	0025883a 	mov	r18,zero
    b52c:	b5bf0004 	addi	r22,r22,-1024
    b530:	980d883a 	mov	r6,r19
    b534:	a809883a 	mov	r4,r21
    b538:	90004626 	beq	r18,zero,b654 <__sfvwrite_r+0x194>
    b53c:	900f883a 	mov	r7,r18
    b540:	b480022e 	bgeu	r22,r18,b54c <__sfvwrite_r+0x8c>
    b544:	01e00034 	movhi	r7,32768
    b548:	39ff0004 	addi	r7,r7,-1024
    b54c:	80800917 	ldw	r2,36(r16)
    b550:	81400717 	ldw	r5,28(r16)
    b554:	103ee83a 	callr	r2
    b558:	00805a0e 	bge	zero,r2,b6c4 <__sfvwrite_r+0x204>
    b55c:	a0c00217 	ldw	r3,8(r20)
    b560:	98a7883a 	add	r19,r19,r2
    b564:	90a5c83a 	sub	r18,r18,r2
    b568:	1885c83a 	sub	r2,r3,r2
    b56c:	a0800215 	stw	r2,8(r20)
    b570:	103fef1e 	bne	r2,zero,b530 <__alt_data_end+0xfffeb530>
    b574:	0005883a 	mov	r2,zero
    b578:	dfc00b17 	ldw	ra,44(sp)
    b57c:	df000a17 	ldw	fp,40(sp)
    b580:	ddc00917 	ldw	r23,36(sp)
    b584:	dd800817 	ldw	r22,32(sp)
    b588:	dd400717 	ldw	r21,28(sp)
    b58c:	dd000617 	ldw	r20,24(sp)
    b590:	dcc00517 	ldw	r19,20(sp)
    b594:	dc800417 	ldw	r18,16(sp)
    b598:	dc400317 	ldw	r17,12(sp)
    b59c:	dc000217 	ldw	r16,8(sp)
    b5a0:	dec00c04 	addi	sp,sp,48
    b5a4:	f800283a 	ret
    b5a8:	800b883a 	mov	r5,r16
    b5ac:	a809883a 	mov	r4,r21
    b5b0:	000983c0 	call	983c <__swsetup_r>
    b5b4:	1000ee1e 	bne	r2,zero,b970 <__sfvwrite_r+0x4b0>
    b5b8:	80c0030b 	ldhu	r3,12(r16)
    b5bc:	a4400017 	ldw	r17,0(r20)
    b5c0:	1880008c 	andi	r2,r3,2
    b5c4:	103fd61e 	bne	r2,zero,b520 <__alt_data_end+0xfffeb520>
    b5c8:	1880004c 	andi	r2,r3,1
    b5cc:	1000421e 	bne	r2,zero,b6d8 <__sfvwrite_r+0x218>
    b5d0:	0039883a 	mov	fp,zero
    b5d4:	0025883a 	mov	r18,zero
    b5d8:	90001a26 	beq	r18,zero,b644 <__sfvwrite_r+0x184>
    b5dc:	1880800c 	andi	r2,r3,512
    b5e0:	84c00217 	ldw	r19,8(r16)
    b5e4:	10002126 	beq	r2,zero,b66c <__sfvwrite_r+0x1ac>
    b5e8:	982f883a 	mov	r23,r19
    b5ec:	94c09636 	bltu	r18,r19,b848 <__sfvwrite_r+0x388>
    b5f0:	1881200c 	andi	r2,r3,1152
    b5f4:	1000a11e 	bne	r2,zero,b87c <__sfvwrite_r+0x3bc>
    b5f8:	81000017 	ldw	r4,0(r16)
    b5fc:	b80d883a 	mov	r6,r23
    b600:	e00b883a 	mov	r5,fp
    b604:	000bbfc0 	call	bbfc <memmove>
    b608:	80c00217 	ldw	r3,8(r16)
    b60c:	81000017 	ldw	r4,0(r16)
    b610:	9005883a 	mov	r2,r18
    b614:	1ce7c83a 	sub	r19,r3,r19
    b618:	25cf883a 	add	r7,r4,r23
    b61c:	84c00215 	stw	r19,8(r16)
    b620:	81c00015 	stw	r7,0(r16)
    b624:	a0c00217 	ldw	r3,8(r20)
    b628:	e0b9883a 	add	fp,fp,r2
    b62c:	90a5c83a 	sub	r18,r18,r2
    b630:	18a7c83a 	sub	r19,r3,r2
    b634:	a4c00215 	stw	r19,8(r20)
    b638:	983fce26 	beq	r19,zero,b574 <__alt_data_end+0xfffeb574>
    b63c:	80c0030b 	ldhu	r3,12(r16)
    b640:	903fe61e 	bne	r18,zero,b5dc <__alt_data_end+0xfffeb5dc>
    b644:	8f000017 	ldw	fp,0(r17)
    b648:	8c800117 	ldw	r18,4(r17)
    b64c:	8c400204 	addi	r17,r17,8
    b650:	003fe106 	br	b5d8 <__alt_data_end+0xfffeb5d8>
    b654:	8cc00017 	ldw	r19,0(r17)
    b658:	8c800117 	ldw	r18,4(r17)
    b65c:	8c400204 	addi	r17,r17,8
    b660:	003fb306 	br	b530 <__alt_data_end+0xfffeb530>
    b664:	0005883a 	mov	r2,zero
    b668:	f800283a 	ret
    b66c:	81000017 	ldw	r4,0(r16)
    b670:	80800417 	ldw	r2,16(r16)
    b674:	11005a36 	bltu	r2,r4,b7e0 <__sfvwrite_r+0x320>
    b678:	85c00517 	ldw	r23,20(r16)
    b67c:	95c05836 	bltu	r18,r23,b7e0 <__sfvwrite_r+0x320>
    b680:	00a00034 	movhi	r2,32768
    b684:	10bfffc4 	addi	r2,r2,-1
    b688:	9009883a 	mov	r4,r18
    b68c:	1480012e 	bgeu	r2,r18,b694 <__sfvwrite_r+0x1d4>
    b690:	1009883a 	mov	r4,r2
    b694:	b80b883a 	mov	r5,r23
    b698:	00049a80 	call	49a8 <__divsi3>
    b69c:	b80b883a 	mov	r5,r23
    b6a0:	1009883a 	mov	r4,r2
    b6a4:	000197c0 	call	197c <__mulsi3>
    b6a8:	81400717 	ldw	r5,28(r16)
    b6ac:	80c00917 	ldw	r3,36(r16)
    b6b0:	100f883a 	mov	r7,r2
    b6b4:	e00d883a 	mov	r6,fp
    b6b8:	a809883a 	mov	r4,r21
    b6bc:	183ee83a 	callr	r3
    b6c0:	00bfd816 	blt	zero,r2,b624 <__alt_data_end+0xfffeb624>
    b6c4:	8080030b 	ldhu	r2,12(r16)
    b6c8:	10801014 	ori	r2,r2,64
    b6cc:	8080030d 	sth	r2,12(r16)
    b6d0:	00bfffc4 	movi	r2,-1
    b6d4:	003fa806 	br	b578 <__alt_data_end+0xfffeb578>
    b6d8:	0027883a 	mov	r19,zero
    b6dc:	0011883a 	mov	r8,zero
    b6e0:	0039883a 	mov	fp,zero
    b6e4:	0025883a 	mov	r18,zero
    b6e8:	90001f26 	beq	r18,zero,b768 <__sfvwrite_r+0x2a8>
    b6ec:	40005a26 	beq	r8,zero,b858 <__sfvwrite_r+0x398>
    b6f0:	982d883a 	mov	r22,r19
    b6f4:	94c0012e 	bgeu	r18,r19,b6fc <__sfvwrite_r+0x23c>
    b6f8:	902d883a 	mov	r22,r18
    b6fc:	81000017 	ldw	r4,0(r16)
    b700:	80800417 	ldw	r2,16(r16)
    b704:	b02f883a 	mov	r23,r22
    b708:	81c00517 	ldw	r7,20(r16)
    b70c:	1100032e 	bgeu	r2,r4,b71c <__sfvwrite_r+0x25c>
    b710:	80c00217 	ldw	r3,8(r16)
    b714:	38c7883a 	add	r3,r7,r3
    b718:	1d801816 	blt	r3,r22,b77c <__sfvwrite_r+0x2bc>
    b71c:	b1c03e16 	blt	r22,r7,b818 <__sfvwrite_r+0x358>
    b720:	80800917 	ldw	r2,36(r16)
    b724:	81400717 	ldw	r5,28(r16)
    b728:	e00d883a 	mov	r6,fp
    b72c:	da000115 	stw	r8,4(sp)
    b730:	a809883a 	mov	r4,r21
    b734:	103ee83a 	callr	r2
    b738:	102f883a 	mov	r23,r2
    b73c:	da000117 	ldw	r8,4(sp)
    b740:	00bfe00e 	bge	zero,r2,b6c4 <__alt_data_end+0xfffeb6c4>
    b744:	9de7c83a 	sub	r19,r19,r23
    b748:	98001f26 	beq	r19,zero,b7c8 <__sfvwrite_r+0x308>
    b74c:	a0800217 	ldw	r2,8(r20)
    b750:	e5f9883a 	add	fp,fp,r23
    b754:	95e5c83a 	sub	r18,r18,r23
    b758:	15efc83a 	sub	r23,r2,r23
    b75c:	a5c00215 	stw	r23,8(r20)
    b760:	b83f8426 	beq	r23,zero,b574 <__alt_data_end+0xfffeb574>
    b764:	903fe11e 	bne	r18,zero,b6ec <__alt_data_end+0xfffeb6ec>
    b768:	8f000017 	ldw	fp,0(r17)
    b76c:	8c800117 	ldw	r18,4(r17)
    b770:	0011883a 	mov	r8,zero
    b774:	8c400204 	addi	r17,r17,8
    b778:	003fdb06 	br	b6e8 <__alt_data_end+0xfffeb6e8>
    b77c:	180d883a 	mov	r6,r3
    b780:	e00b883a 	mov	r5,fp
    b784:	da000115 	stw	r8,4(sp)
    b788:	d8c00015 	stw	r3,0(sp)
    b78c:	000bbfc0 	call	bbfc <memmove>
    b790:	d8c00017 	ldw	r3,0(sp)
    b794:	80800017 	ldw	r2,0(r16)
    b798:	800b883a 	mov	r5,r16
    b79c:	a809883a 	mov	r4,r21
    b7a0:	10c5883a 	add	r2,r2,r3
    b7a4:	80800015 	stw	r2,0(r16)
    b7a8:	d8c00015 	stw	r3,0(sp)
    b7ac:	0004eb40 	call	4eb4 <_fflush_r>
    b7b0:	d8c00017 	ldw	r3,0(sp)
    b7b4:	da000117 	ldw	r8,4(sp)
    b7b8:	103fc21e 	bne	r2,zero,b6c4 <__alt_data_end+0xfffeb6c4>
    b7bc:	182f883a 	mov	r23,r3
    b7c0:	9de7c83a 	sub	r19,r19,r23
    b7c4:	983fe11e 	bne	r19,zero,b74c <__alt_data_end+0xfffeb74c>
    b7c8:	800b883a 	mov	r5,r16
    b7cc:	a809883a 	mov	r4,r21
    b7d0:	0004eb40 	call	4eb4 <_fflush_r>
    b7d4:	103fbb1e 	bne	r2,zero,b6c4 <__alt_data_end+0xfffeb6c4>
    b7d8:	0011883a 	mov	r8,zero
    b7dc:	003fdb06 	br	b74c <__alt_data_end+0xfffeb74c>
    b7e0:	94c0012e 	bgeu	r18,r19,b7e8 <__sfvwrite_r+0x328>
    b7e4:	9027883a 	mov	r19,r18
    b7e8:	980d883a 	mov	r6,r19
    b7ec:	e00b883a 	mov	r5,fp
    b7f0:	000bbfc0 	call	bbfc <memmove>
    b7f4:	80800217 	ldw	r2,8(r16)
    b7f8:	80c00017 	ldw	r3,0(r16)
    b7fc:	14c5c83a 	sub	r2,r2,r19
    b800:	1cc7883a 	add	r3,r3,r19
    b804:	80800215 	stw	r2,8(r16)
    b808:	80c00015 	stw	r3,0(r16)
    b80c:	10004326 	beq	r2,zero,b91c <__sfvwrite_r+0x45c>
    b810:	9805883a 	mov	r2,r19
    b814:	003f8306 	br	b624 <__alt_data_end+0xfffeb624>
    b818:	b00d883a 	mov	r6,r22
    b81c:	e00b883a 	mov	r5,fp
    b820:	da000115 	stw	r8,4(sp)
    b824:	000bbfc0 	call	bbfc <memmove>
    b828:	80800217 	ldw	r2,8(r16)
    b82c:	80c00017 	ldw	r3,0(r16)
    b830:	da000117 	ldw	r8,4(sp)
    b834:	1585c83a 	sub	r2,r2,r22
    b838:	1dad883a 	add	r22,r3,r22
    b83c:	80800215 	stw	r2,8(r16)
    b840:	85800015 	stw	r22,0(r16)
    b844:	003fbf06 	br	b744 <__alt_data_end+0xfffeb744>
    b848:	81000017 	ldw	r4,0(r16)
    b84c:	9027883a 	mov	r19,r18
    b850:	902f883a 	mov	r23,r18
    b854:	003f6906 	br	b5fc <__alt_data_end+0xfffeb5fc>
    b858:	900d883a 	mov	r6,r18
    b85c:	01400284 	movi	r5,10
    b860:	e009883a 	mov	r4,fp
    b864:	000bb180 	call	bb18 <memchr>
    b868:	10003e26 	beq	r2,zero,b964 <__sfvwrite_r+0x4a4>
    b86c:	10800044 	addi	r2,r2,1
    b870:	1727c83a 	sub	r19,r2,fp
    b874:	02000044 	movi	r8,1
    b878:	003f9d06 	br	b6f0 <__alt_data_end+0xfffeb6f0>
    b87c:	80800517 	ldw	r2,20(r16)
    b880:	81400417 	ldw	r5,16(r16)
    b884:	81c00017 	ldw	r7,0(r16)
    b888:	10a7883a 	add	r19,r2,r2
    b88c:	9885883a 	add	r2,r19,r2
    b890:	1026d7fa 	srli	r19,r2,31
    b894:	396dc83a 	sub	r22,r7,r5
    b898:	b1000044 	addi	r4,r22,1
    b89c:	9885883a 	add	r2,r19,r2
    b8a0:	1027d07a 	srai	r19,r2,1
    b8a4:	2485883a 	add	r2,r4,r18
    b8a8:	980d883a 	mov	r6,r19
    b8ac:	9880022e 	bgeu	r19,r2,b8b8 <__sfvwrite_r+0x3f8>
    b8b0:	1027883a 	mov	r19,r2
    b8b4:	100d883a 	mov	r6,r2
    b8b8:	18c1000c 	andi	r3,r3,1024
    b8bc:	18001c26 	beq	r3,zero,b930 <__sfvwrite_r+0x470>
    b8c0:	300b883a 	mov	r5,r6
    b8c4:	a809883a 	mov	r4,r21
    b8c8:	00062c00 	call	62c0 <_malloc_r>
    b8cc:	102f883a 	mov	r23,r2
    b8d0:	10002926 	beq	r2,zero,b978 <__sfvwrite_r+0x4b8>
    b8d4:	81400417 	ldw	r5,16(r16)
    b8d8:	b00d883a 	mov	r6,r22
    b8dc:	1009883a 	mov	r4,r2
    b8e0:	0006acc0 	call	6acc <memcpy>
    b8e4:	8080030b 	ldhu	r2,12(r16)
    b8e8:	00fedfc4 	movi	r3,-1153
    b8ec:	10c4703a 	and	r2,r2,r3
    b8f0:	10802014 	ori	r2,r2,128
    b8f4:	8080030d 	sth	r2,12(r16)
    b8f8:	bd89883a 	add	r4,r23,r22
    b8fc:	9d8fc83a 	sub	r7,r19,r22
    b900:	85c00415 	stw	r23,16(r16)
    b904:	84c00515 	stw	r19,20(r16)
    b908:	81000015 	stw	r4,0(r16)
    b90c:	9027883a 	mov	r19,r18
    b910:	81c00215 	stw	r7,8(r16)
    b914:	902f883a 	mov	r23,r18
    b918:	003f3806 	br	b5fc <__alt_data_end+0xfffeb5fc>
    b91c:	800b883a 	mov	r5,r16
    b920:	a809883a 	mov	r4,r21
    b924:	0004eb40 	call	4eb4 <_fflush_r>
    b928:	103fb926 	beq	r2,zero,b810 <__alt_data_end+0xfffeb810>
    b92c:	003f6506 	br	b6c4 <__alt_data_end+0xfffeb6c4>
    b930:	a809883a 	mov	r4,r21
    b934:	000cfd80 	call	cfd8 <_realloc_r>
    b938:	102f883a 	mov	r23,r2
    b93c:	103fee1e 	bne	r2,zero,b8f8 <__alt_data_end+0xfffeb8f8>
    b940:	81400417 	ldw	r5,16(r16)
    b944:	a809883a 	mov	r4,r21
    b948:	00057900 	call	5790 <_free_r>
    b94c:	8080030b 	ldhu	r2,12(r16)
    b950:	00ffdfc4 	movi	r3,-129
    b954:	1884703a 	and	r2,r3,r2
    b958:	00c00304 	movi	r3,12
    b95c:	a8c00015 	stw	r3,0(r21)
    b960:	003f5906 	br	b6c8 <__alt_data_end+0xfffeb6c8>
    b964:	94c00044 	addi	r19,r18,1
    b968:	02000044 	movi	r8,1
    b96c:	003f6006 	br	b6f0 <__alt_data_end+0xfffeb6f0>
    b970:	00bfffc4 	movi	r2,-1
    b974:	003f0006 	br	b578 <__alt_data_end+0xfffeb578>
    b978:	00800304 	movi	r2,12
    b97c:	a8800015 	stw	r2,0(r21)
    b980:	8080030b 	ldhu	r2,12(r16)
    b984:	003f5006 	br	b6c8 <__alt_data_end+0xfffeb6c8>

0000b988 <_isatty_r>:
    b988:	defffd04 	addi	sp,sp,-12
    b98c:	dc000015 	stw	r16,0(sp)
    b990:	04000074 	movhi	r16,1
    b994:	dc400115 	stw	r17,4(sp)
    b998:	8418ea04 	addi	r16,r16,25512
    b99c:	2023883a 	mov	r17,r4
    b9a0:	2809883a 	mov	r4,r5
    b9a4:	dfc00215 	stw	ra,8(sp)
    b9a8:	80000015 	stw	zero,0(r16)
    b9ac:	00104b00 	call	104b0 <isatty>
    b9b0:	00ffffc4 	movi	r3,-1
    b9b4:	10c00526 	beq	r2,r3,b9cc <_isatty_r+0x44>
    b9b8:	dfc00217 	ldw	ra,8(sp)
    b9bc:	dc400117 	ldw	r17,4(sp)
    b9c0:	dc000017 	ldw	r16,0(sp)
    b9c4:	dec00304 	addi	sp,sp,12
    b9c8:	f800283a 	ret
    b9cc:	80c00017 	ldw	r3,0(r16)
    b9d0:	183ff926 	beq	r3,zero,b9b8 <__alt_data_end+0xfffeb9b8>
    b9d4:	88c00015 	stw	r3,0(r17)
    b9d8:	003ff706 	br	b9b8 <__alt_data_end+0xfffeb9b8>

0000b9dc <_setlocale_r>:
    b9dc:	30001b26 	beq	r6,zero,ba4c <_setlocale_r+0x70>
    b9e0:	01400074 	movhi	r5,1
    b9e4:	defffe04 	addi	sp,sp,-8
    b9e8:	294b0d04 	addi	r5,r5,11316
    b9ec:	3009883a 	mov	r4,r6
    b9f0:	dc000015 	stw	r16,0(sp)
    b9f4:	dfc00115 	stw	ra,4(sp)
    b9f8:	3021883a 	mov	r16,r6
    b9fc:	000d5b00 	call	d5b0 <strcmp>
    ba00:	1000061e 	bne	r2,zero,ba1c <_setlocale_r+0x40>
    ba04:	00800074 	movhi	r2,1
    ba08:	108aee04 	addi	r2,r2,11192
    ba0c:	dfc00117 	ldw	ra,4(sp)
    ba10:	dc000017 	ldw	r16,0(sp)
    ba14:	dec00204 	addi	sp,sp,8
    ba18:	f800283a 	ret
    ba1c:	01400074 	movhi	r5,1
    ba20:	294aee04 	addi	r5,r5,11192
    ba24:	8009883a 	mov	r4,r16
    ba28:	000d5b00 	call	d5b0 <strcmp>
    ba2c:	103ff526 	beq	r2,zero,ba04 <__alt_data_end+0xfffeba04>
    ba30:	01400074 	movhi	r5,1
    ba34:	294af804 	addi	r5,r5,11232
    ba38:	8009883a 	mov	r4,r16
    ba3c:	000d5b00 	call	d5b0 <strcmp>
    ba40:	103ff026 	beq	r2,zero,ba04 <__alt_data_end+0xfffeba04>
    ba44:	0005883a 	mov	r2,zero
    ba48:	003ff006 	br	ba0c <__alt_data_end+0xfffeba0c>
    ba4c:	00800074 	movhi	r2,1
    ba50:	108aee04 	addi	r2,r2,11192
    ba54:	f800283a 	ret

0000ba58 <__locale_charset>:
    ba58:	00800074 	movhi	r2,1
    ba5c:	108d8104 	addi	r2,r2,13828
    ba60:	f800283a 	ret

0000ba64 <__locale_mb_cur_max>:
    ba64:	00800074 	movhi	r2,1
    ba68:	10922004 	addi	r2,r2,18560
    ba6c:	10800017 	ldw	r2,0(r2)
    ba70:	f800283a 	ret

0000ba74 <__locale_msgcharset>:
    ba74:	00800074 	movhi	r2,1
    ba78:	108d7904 	addi	r2,r2,13796
    ba7c:	f800283a 	ret

0000ba80 <__locale_cjk_lang>:
    ba80:	0005883a 	mov	r2,zero
    ba84:	f800283a 	ret

0000ba88 <_localeconv_r>:
    ba88:	00800074 	movhi	r2,1
    ba8c:	108d8904 	addi	r2,r2,13860
    ba90:	f800283a 	ret

0000ba94 <setlocale>:
    ba94:	00800074 	movhi	r2,1
    ba98:	10921d04 	addi	r2,r2,18548
    ba9c:	280d883a 	mov	r6,r5
    baa0:	200b883a 	mov	r5,r4
    baa4:	11000017 	ldw	r4,0(r2)
    baa8:	000b9dc1 	jmpi	b9dc <_setlocale_r>

0000baac <localeconv>:
    baac:	00800074 	movhi	r2,1
    bab0:	108d8904 	addi	r2,r2,13860
    bab4:	f800283a 	ret

0000bab8 <_lseek_r>:
    bab8:	defffd04 	addi	sp,sp,-12
    babc:	2805883a 	mov	r2,r5
    bac0:	dc000015 	stw	r16,0(sp)
    bac4:	04000074 	movhi	r16,1
    bac8:	dc400115 	stw	r17,4(sp)
    bacc:	300b883a 	mov	r5,r6
    bad0:	8418ea04 	addi	r16,r16,25512
    bad4:	2023883a 	mov	r17,r4
    bad8:	380d883a 	mov	r6,r7
    badc:	1009883a 	mov	r4,r2
    bae0:	dfc00215 	stw	ra,8(sp)
    bae4:	80000015 	stw	zero,0(r16)
    bae8:	00106840 	call	10684 <lseek>
    baec:	00ffffc4 	movi	r3,-1
    baf0:	10c00526 	beq	r2,r3,bb08 <_lseek_r+0x50>
    baf4:	dfc00217 	ldw	ra,8(sp)
    baf8:	dc400117 	ldw	r17,4(sp)
    bafc:	dc000017 	ldw	r16,0(sp)
    bb00:	dec00304 	addi	sp,sp,12
    bb04:	f800283a 	ret
    bb08:	80c00017 	ldw	r3,0(r16)
    bb0c:	183ff926 	beq	r3,zero,baf4 <__alt_data_end+0xfffebaf4>
    bb10:	88c00015 	stw	r3,0(r17)
    bb14:	003ff706 	br	baf4 <__alt_data_end+0xfffebaf4>

0000bb18 <memchr>:
    bb18:	208000cc 	andi	r2,r4,3
    bb1c:	280f883a 	mov	r7,r5
    bb20:	10003426 	beq	r2,zero,bbf4 <memchr+0xdc>
    bb24:	30bfffc4 	addi	r2,r6,-1
    bb28:	30001a26 	beq	r6,zero,bb94 <memchr+0x7c>
    bb2c:	20c00003 	ldbu	r3,0(r4)
    bb30:	29803fcc 	andi	r6,r5,255
    bb34:	30c0051e 	bne	r6,r3,bb4c <memchr+0x34>
    bb38:	00001806 	br	bb9c <memchr+0x84>
    bb3c:	10001526 	beq	r2,zero,bb94 <memchr+0x7c>
    bb40:	20c00003 	ldbu	r3,0(r4)
    bb44:	10bfffc4 	addi	r2,r2,-1
    bb48:	30c01426 	beq	r6,r3,bb9c <memchr+0x84>
    bb4c:	21000044 	addi	r4,r4,1
    bb50:	20c000cc 	andi	r3,r4,3
    bb54:	183ff91e 	bne	r3,zero,bb3c <__alt_data_end+0xfffebb3c>
    bb58:	020000c4 	movi	r8,3
    bb5c:	40801136 	bltu	r8,r2,bba4 <memchr+0x8c>
    bb60:	10000c26 	beq	r2,zero,bb94 <memchr+0x7c>
    bb64:	20c00003 	ldbu	r3,0(r4)
    bb68:	29403fcc 	andi	r5,r5,255
    bb6c:	28c00b26 	beq	r5,r3,bb9c <memchr+0x84>
    bb70:	20c00044 	addi	r3,r4,1
    bb74:	39803fcc 	andi	r6,r7,255
    bb78:	2089883a 	add	r4,r4,r2
    bb7c:	00000306 	br	bb8c <memchr+0x74>
    bb80:	18c00044 	addi	r3,r3,1
    bb84:	197fffc3 	ldbu	r5,-1(r3)
    bb88:	31400526 	beq	r6,r5,bba0 <memchr+0x88>
    bb8c:	1805883a 	mov	r2,r3
    bb90:	20fffb1e 	bne	r4,r3,bb80 <__alt_data_end+0xfffebb80>
    bb94:	0005883a 	mov	r2,zero
    bb98:	f800283a 	ret
    bb9c:	2005883a 	mov	r2,r4
    bba0:	f800283a 	ret
    bba4:	28c03fcc 	andi	r3,r5,255
    bba8:	1812923a 	slli	r9,r3,8
    bbac:	02ffbff4 	movhi	r11,65279
    bbb0:	02a02074 	movhi	r10,32897
    bbb4:	48d2b03a 	or	r9,r9,r3
    bbb8:	4806943a 	slli	r3,r9,16
    bbbc:	5affbfc4 	addi	r11,r11,-257
    bbc0:	52a02004 	addi	r10,r10,-32640
    bbc4:	48d2b03a 	or	r9,r9,r3
    bbc8:	20c00017 	ldw	r3,0(r4)
    bbcc:	48c6f03a 	xor	r3,r9,r3
    bbd0:	1acd883a 	add	r6,r3,r11
    bbd4:	00c6303a 	nor	r3,zero,r3
    bbd8:	30c6703a 	and	r3,r6,r3
    bbdc:	1a86703a 	and	r3,r3,r10
    bbe0:	183fe01e 	bne	r3,zero,bb64 <__alt_data_end+0xfffebb64>
    bbe4:	10bfff04 	addi	r2,r2,-4
    bbe8:	21000104 	addi	r4,r4,4
    bbec:	40bff636 	bltu	r8,r2,bbc8 <__alt_data_end+0xfffebbc8>
    bbf0:	003fdb06 	br	bb60 <__alt_data_end+0xfffebb60>
    bbf4:	3005883a 	mov	r2,r6
    bbf8:	003fd706 	br	bb58 <__alt_data_end+0xfffebb58>

0000bbfc <memmove>:
    bbfc:	2005883a 	mov	r2,r4
    bc00:	29000b2e 	bgeu	r5,r4,bc30 <memmove+0x34>
    bc04:	298f883a 	add	r7,r5,r6
    bc08:	21c0092e 	bgeu	r4,r7,bc30 <memmove+0x34>
    bc0c:	2187883a 	add	r3,r4,r6
    bc10:	198bc83a 	sub	r5,r3,r6
    bc14:	30004826 	beq	r6,zero,bd38 <memmove+0x13c>
    bc18:	39ffffc4 	addi	r7,r7,-1
    bc1c:	39000003 	ldbu	r4,0(r7)
    bc20:	18ffffc4 	addi	r3,r3,-1
    bc24:	19000005 	stb	r4,0(r3)
    bc28:	28fffb1e 	bne	r5,r3,bc18 <__alt_data_end+0xfffebc18>
    bc2c:	f800283a 	ret
    bc30:	00c003c4 	movi	r3,15
    bc34:	1980412e 	bgeu	r3,r6,bd3c <memmove+0x140>
    bc38:	2886b03a 	or	r3,r5,r2
    bc3c:	18c000cc 	andi	r3,r3,3
    bc40:	1800401e 	bne	r3,zero,bd44 <memmove+0x148>
    bc44:	33fffc04 	addi	r15,r6,-16
    bc48:	781ed13a 	srli	r15,r15,4
    bc4c:	28c00104 	addi	r3,r5,4
    bc50:	13400104 	addi	r13,r2,4
    bc54:	781c913a 	slli	r14,r15,4
    bc58:	2b000204 	addi	r12,r5,8
    bc5c:	12c00204 	addi	r11,r2,8
    bc60:	73800504 	addi	r14,r14,20
    bc64:	2a800304 	addi	r10,r5,12
    bc68:	12400304 	addi	r9,r2,12
    bc6c:	2b9d883a 	add	r14,r5,r14
    bc70:	2811883a 	mov	r8,r5
    bc74:	100f883a 	mov	r7,r2
    bc78:	41000017 	ldw	r4,0(r8)
    bc7c:	39c00404 	addi	r7,r7,16
    bc80:	18c00404 	addi	r3,r3,16
    bc84:	393ffc15 	stw	r4,-16(r7)
    bc88:	193ffc17 	ldw	r4,-16(r3)
    bc8c:	6b400404 	addi	r13,r13,16
    bc90:	5ac00404 	addi	r11,r11,16
    bc94:	693ffc15 	stw	r4,-16(r13)
    bc98:	61000017 	ldw	r4,0(r12)
    bc9c:	4a400404 	addi	r9,r9,16
    bca0:	42000404 	addi	r8,r8,16
    bca4:	593ffc15 	stw	r4,-16(r11)
    bca8:	51000017 	ldw	r4,0(r10)
    bcac:	63000404 	addi	r12,r12,16
    bcb0:	52800404 	addi	r10,r10,16
    bcb4:	493ffc15 	stw	r4,-16(r9)
    bcb8:	1bbfef1e 	bne	r3,r14,bc78 <__alt_data_end+0xfffebc78>
    bcbc:	79000044 	addi	r4,r15,1
    bcc0:	2008913a 	slli	r4,r4,4
    bcc4:	328003cc 	andi	r10,r6,15
    bcc8:	02c000c4 	movi	r11,3
    bccc:	1107883a 	add	r3,r2,r4
    bcd0:	290b883a 	add	r5,r5,r4
    bcd4:	5a801e2e 	bgeu	r11,r10,bd50 <memmove+0x154>
    bcd8:	1813883a 	mov	r9,r3
    bcdc:	2811883a 	mov	r8,r5
    bce0:	500f883a 	mov	r7,r10
    bce4:	41000017 	ldw	r4,0(r8)
    bce8:	4a400104 	addi	r9,r9,4
    bcec:	39ffff04 	addi	r7,r7,-4
    bcf0:	493fff15 	stw	r4,-4(r9)
    bcf4:	42000104 	addi	r8,r8,4
    bcf8:	59fffa36 	bltu	r11,r7,bce4 <__alt_data_end+0xfffebce4>
    bcfc:	513fff04 	addi	r4,r10,-4
    bd00:	2008d0ba 	srli	r4,r4,2
    bd04:	318000cc 	andi	r6,r6,3
    bd08:	21000044 	addi	r4,r4,1
    bd0c:	2109883a 	add	r4,r4,r4
    bd10:	2109883a 	add	r4,r4,r4
    bd14:	1907883a 	add	r3,r3,r4
    bd18:	290b883a 	add	r5,r5,r4
    bd1c:	30000b26 	beq	r6,zero,bd4c <memmove+0x150>
    bd20:	198d883a 	add	r6,r3,r6
    bd24:	29c00003 	ldbu	r7,0(r5)
    bd28:	18c00044 	addi	r3,r3,1
    bd2c:	29400044 	addi	r5,r5,1
    bd30:	19ffffc5 	stb	r7,-1(r3)
    bd34:	19bffb1e 	bne	r3,r6,bd24 <__alt_data_end+0xfffebd24>
    bd38:	f800283a 	ret
    bd3c:	1007883a 	mov	r3,r2
    bd40:	003ff606 	br	bd1c <__alt_data_end+0xfffebd1c>
    bd44:	1007883a 	mov	r3,r2
    bd48:	003ff506 	br	bd20 <__alt_data_end+0xfffebd20>
    bd4c:	f800283a 	ret
    bd50:	500d883a 	mov	r6,r10
    bd54:	003ff106 	br	bd1c <__alt_data_end+0xfffebd1c>

0000bd58 <_Balloc>:
    bd58:	20801317 	ldw	r2,76(r4)
    bd5c:	defffc04 	addi	sp,sp,-16
    bd60:	dc400115 	stw	r17,4(sp)
    bd64:	dc000015 	stw	r16,0(sp)
    bd68:	dfc00315 	stw	ra,12(sp)
    bd6c:	dc800215 	stw	r18,8(sp)
    bd70:	2023883a 	mov	r17,r4
    bd74:	2821883a 	mov	r16,r5
    bd78:	10000f26 	beq	r2,zero,bdb8 <_Balloc+0x60>
    bd7c:	8407883a 	add	r3,r16,r16
    bd80:	18c7883a 	add	r3,r3,r3
    bd84:	10c7883a 	add	r3,r2,r3
    bd88:	18800017 	ldw	r2,0(r3)
    bd8c:	10001126 	beq	r2,zero,bdd4 <_Balloc+0x7c>
    bd90:	11000017 	ldw	r4,0(r2)
    bd94:	19000015 	stw	r4,0(r3)
    bd98:	10000415 	stw	zero,16(r2)
    bd9c:	10000315 	stw	zero,12(r2)
    bda0:	dfc00317 	ldw	ra,12(sp)
    bda4:	dc800217 	ldw	r18,8(sp)
    bda8:	dc400117 	ldw	r17,4(sp)
    bdac:	dc000017 	ldw	r16,0(sp)
    bdb0:	dec00404 	addi	sp,sp,16
    bdb4:	f800283a 	ret
    bdb8:	01800844 	movi	r6,33
    bdbc:	01400104 	movi	r5,4
    bdc0:	000eedc0 	call	eedc <_calloc_r>
    bdc4:	88801315 	stw	r2,76(r17)
    bdc8:	103fec1e 	bne	r2,zero,bd7c <__alt_data_end+0xfffebd7c>
    bdcc:	0005883a 	mov	r2,zero
    bdd0:	003ff306 	br	bda0 <__alt_data_end+0xfffebda0>
    bdd4:	01400044 	movi	r5,1
    bdd8:	2c24983a 	sll	r18,r5,r16
    bddc:	8809883a 	mov	r4,r17
    bde0:	91800144 	addi	r6,r18,5
    bde4:	318d883a 	add	r6,r6,r6
    bde8:	318d883a 	add	r6,r6,r6
    bdec:	000eedc0 	call	eedc <_calloc_r>
    bdf0:	103ff626 	beq	r2,zero,bdcc <__alt_data_end+0xfffebdcc>
    bdf4:	14000115 	stw	r16,4(r2)
    bdf8:	14800215 	stw	r18,8(r2)
    bdfc:	003fe606 	br	bd98 <__alt_data_end+0xfffebd98>

0000be00 <_Bfree>:
    be00:	28000826 	beq	r5,zero,be24 <_Bfree+0x24>
    be04:	28c00117 	ldw	r3,4(r5)
    be08:	20801317 	ldw	r2,76(r4)
    be0c:	18c7883a 	add	r3,r3,r3
    be10:	18c7883a 	add	r3,r3,r3
    be14:	10c5883a 	add	r2,r2,r3
    be18:	10c00017 	ldw	r3,0(r2)
    be1c:	28c00015 	stw	r3,0(r5)
    be20:	11400015 	stw	r5,0(r2)
    be24:	f800283a 	ret

0000be28 <__multadd>:
    be28:	defff704 	addi	sp,sp,-36
    be2c:	dc800215 	stw	r18,8(sp)
    be30:	2c800417 	ldw	r18,16(r5)
    be34:	dd800615 	stw	r22,24(sp)
    be38:	dd400515 	stw	r21,20(sp)
    be3c:	dd000415 	stw	r20,16(sp)
    be40:	dcc00315 	stw	r19,12(sp)
    be44:	dc400115 	stw	r17,4(sp)
    be48:	dc000015 	stw	r16,0(sp)
    be4c:	dfc00815 	stw	ra,32(sp)
    be50:	ddc00715 	stw	r23,28(sp)
    be54:	2827883a 	mov	r19,r5
    be58:	2029883a 	mov	r20,r4
    be5c:	3023883a 	mov	r17,r6
    be60:	3821883a 	mov	r16,r7
    be64:	2d400504 	addi	r21,r5,20
    be68:	002d883a 	mov	r22,zero
    be6c:	adc00017 	ldw	r23,0(r21)
    be70:	880b883a 	mov	r5,r17
    be74:	ad400104 	addi	r21,r21,4
    be78:	b93fffcc 	andi	r4,r23,65535
    be7c:	000197c0 	call	197c <__mulsi3>
    be80:	b808d43a 	srli	r4,r23,16
    be84:	880b883a 	mov	r5,r17
    be88:	1421883a 	add	r16,r2,r16
    be8c:	000197c0 	call	197c <__mulsi3>
    be90:	800ed43a 	srli	r7,r16,16
    be94:	80ffffcc 	andi	r3,r16,65535
    be98:	b5800044 	addi	r22,r22,1
    be9c:	11c5883a 	add	r2,r2,r7
    bea0:	100e943a 	slli	r7,r2,16
    bea4:	1020d43a 	srli	r16,r2,16
    bea8:	38c7883a 	add	r3,r7,r3
    beac:	a8ffff15 	stw	r3,-4(r21)
    beb0:	b4bfee16 	blt	r22,r18,be6c <__alt_data_end+0xfffebe6c>
    beb4:	80000926 	beq	r16,zero,bedc <__multadd+0xb4>
    beb8:	98800217 	ldw	r2,8(r19)
    bebc:	9080130e 	bge	r18,r2,bf0c <__multadd+0xe4>
    bec0:	90800144 	addi	r2,r18,5
    bec4:	1085883a 	add	r2,r2,r2
    bec8:	1085883a 	add	r2,r2,r2
    becc:	9885883a 	add	r2,r19,r2
    bed0:	14000015 	stw	r16,0(r2)
    bed4:	94800044 	addi	r18,r18,1
    bed8:	9c800415 	stw	r18,16(r19)
    bedc:	9805883a 	mov	r2,r19
    bee0:	dfc00817 	ldw	ra,32(sp)
    bee4:	ddc00717 	ldw	r23,28(sp)
    bee8:	dd800617 	ldw	r22,24(sp)
    beec:	dd400517 	ldw	r21,20(sp)
    bef0:	dd000417 	ldw	r20,16(sp)
    bef4:	dcc00317 	ldw	r19,12(sp)
    bef8:	dc800217 	ldw	r18,8(sp)
    befc:	dc400117 	ldw	r17,4(sp)
    bf00:	dc000017 	ldw	r16,0(sp)
    bf04:	dec00904 	addi	sp,sp,36
    bf08:	f800283a 	ret
    bf0c:	99400117 	ldw	r5,4(r19)
    bf10:	a009883a 	mov	r4,r20
    bf14:	29400044 	addi	r5,r5,1
    bf18:	000bd580 	call	bd58 <_Balloc>
    bf1c:	99800417 	ldw	r6,16(r19)
    bf20:	99400304 	addi	r5,r19,12
    bf24:	11000304 	addi	r4,r2,12
    bf28:	31800084 	addi	r6,r6,2
    bf2c:	318d883a 	add	r6,r6,r6
    bf30:	318d883a 	add	r6,r6,r6
    bf34:	1023883a 	mov	r17,r2
    bf38:	0006acc0 	call	6acc <memcpy>
    bf3c:	98000a26 	beq	r19,zero,bf68 <__multadd+0x140>
    bf40:	98c00117 	ldw	r3,4(r19)
    bf44:	a0801317 	ldw	r2,76(r20)
    bf48:	18c7883a 	add	r3,r3,r3
    bf4c:	18c7883a 	add	r3,r3,r3
    bf50:	10c5883a 	add	r2,r2,r3
    bf54:	10c00017 	ldw	r3,0(r2)
    bf58:	98c00015 	stw	r3,0(r19)
    bf5c:	14c00015 	stw	r19,0(r2)
    bf60:	8827883a 	mov	r19,r17
    bf64:	003fd606 	br	bec0 <__alt_data_end+0xfffebec0>
    bf68:	8827883a 	mov	r19,r17
    bf6c:	003fd406 	br	bec0 <__alt_data_end+0xfffebec0>

0000bf70 <__s2b>:
    bf70:	defff904 	addi	sp,sp,-28
    bf74:	dc400115 	stw	r17,4(sp)
    bf78:	dc000015 	stw	r16,0(sp)
    bf7c:	2023883a 	mov	r17,r4
    bf80:	2821883a 	mov	r16,r5
    bf84:	39000204 	addi	r4,r7,8
    bf88:	01400244 	movi	r5,9
    bf8c:	dcc00315 	stw	r19,12(sp)
    bf90:	dc800215 	stw	r18,8(sp)
    bf94:	dfc00615 	stw	ra,24(sp)
    bf98:	dd400515 	stw	r21,20(sp)
    bf9c:	dd000415 	stw	r20,16(sp)
    bfa0:	3825883a 	mov	r18,r7
    bfa4:	3027883a 	mov	r19,r6
    bfa8:	00049a80 	call	49a8 <__divsi3>
    bfac:	00c00044 	movi	r3,1
    bfb0:	000b883a 	mov	r5,zero
    bfb4:	1880030e 	bge	r3,r2,bfc4 <__s2b+0x54>
    bfb8:	18c7883a 	add	r3,r3,r3
    bfbc:	29400044 	addi	r5,r5,1
    bfc0:	18bffd16 	blt	r3,r2,bfb8 <__alt_data_end+0xfffebfb8>
    bfc4:	8809883a 	mov	r4,r17
    bfc8:	000bd580 	call	bd58 <_Balloc>
    bfcc:	d8c00717 	ldw	r3,28(sp)
    bfd0:	10c00515 	stw	r3,20(r2)
    bfd4:	00c00044 	movi	r3,1
    bfd8:	10c00415 	stw	r3,16(r2)
    bfdc:	00c00244 	movi	r3,9
    bfe0:	1cc0210e 	bge	r3,r19,c068 <__s2b+0xf8>
    bfe4:	80eb883a 	add	r21,r16,r3
    bfe8:	a829883a 	mov	r20,r21
    bfec:	84e1883a 	add	r16,r16,r19
    bff0:	a1c00007 	ldb	r7,0(r20)
    bff4:	01800284 	movi	r6,10
    bff8:	a5000044 	addi	r20,r20,1
    bffc:	100b883a 	mov	r5,r2
    c000:	39fff404 	addi	r7,r7,-48
    c004:	8809883a 	mov	r4,r17
    c008:	000be280 	call	be28 <__multadd>
    c00c:	a43ff81e 	bne	r20,r16,bff0 <__alt_data_end+0xfffebff0>
    c010:	ace1883a 	add	r16,r21,r19
    c014:	843ffe04 	addi	r16,r16,-8
    c018:	9c800a0e 	bge	r19,r18,c044 <__s2b+0xd4>
    c01c:	94e5c83a 	sub	r18,r18,r19
    c020:	84a5883a 	add	r18,r16,r18
    c024:	81c00007 	ldb	r7,0(r16)
    c028:	01800284 	movi	r6,10
    c02c:	84000044 	addi	r16,r16,1
    c030:	100b883a 	mov	r5,r2
    c034:	39fff404 	addi	r7,r7,-48
    c038:	8809883a 	mov	r4,r17
    c03c:	000be280 	call	be28 <__multadd>
    c040:	84bff81e 	bne	r16,r18,c024 <__alt_data_end+0xfffec024>
    c044:	dfc00617 	ldw	ra,24(sp)
    c048:	dd400517 	ldw	r21,20(sp)
    c04c:	dd000417 	ldw	r20,16(sp)
    c050:	dcc00317 	ldw	r19,12(sp)
    c054:	dc800217 	ldw	r18,8(sp)
    c058:	dc400117 	ldw	r17,4(sp)
    c05c:	dc000017 	ldw	r16,0(sp)
    c060:	dec00704 	addi	sp,sp,28
    c064:	f800283a 	ret
    c068:	84000284 	addi	r16,r16,10
    c06c:	1827883a 	mov	r19,r3
    c070:	003fe906 	br	c018 <__alt_data_end+0xfffec018>

0000c074 <__hi0bits>:
    c074:	20bfffec 	andhi	r2,r4,65535
    c078:	1000141e 	bne	r2,zero,c0cc <__hi0bits+0x58>
    c07c:	2008943a 	slli	r4,r4,16
    c080:	00800404 	movi	r2,16
    c084:	20ffc02c 	andhi	r3,r4,65280
    c088:	1800021e 	bne	r3,zero,c094 <__hi0bits+0x20>
    c08c:	2008923a 	slli	r4,r4,8
    c090:	10800204 	addi	r2,r2,8
    c094:	20fc002c 	andhi	r3,r4,61440
    c098:	1800021e 	bne	r3,zero,c0a4 <__hi0bits+0x30>
    c09c:	2008913a 	slli	r4,r4,4
    c0a0:	10800104 	addi	r2,r2,4
    c0a4:	20f0002c 	andhi	r3,r4,49152
    c0a8:	1800031e 	bne	r3,zero,c0b8 <__hi0bits+0x44>
    c0ac:	2109883a 	add	r4,r4,r4
    c0b0:	10800084 	addi	r2,r2,2
    c0b4:	2109883a 	add	r4,r4,r4
    c0b8:	20000316 	blt	r4,zero,c0c8 <__hi0bits+0x54>
    c0bc:	2110002c 	andhi	r4,r4,16384
    c0c0:	2000041e 	bne	r4,zero,c0d4 <__hi0bits+0x60>
    c0c4:	00800804 	movi	r2,32
    c0c8:	f800283a 	ret
    c0cc:	0005883a 	mov	r2,zero
    c0d0:	003fec06 	br	c084 <__alt_data_end+0xfffec084>
    c0d4:	10800044 	addi	r2,r2,1
    c0d8:	f800283a 	ret

0000c0dc <__lo0bits>:
    c0dc:	20c00017 	ldw	r3,0(r4)
    c0e0:	188001cc 	andi	r2,r3,7
    c0e4:	10000826 	beq	r2,zero,c108 <__lo0bits+0x2c>
    c0e8:	1880004c 	andi	r2,r3,1
    c0ec:	1000211e 	bne	r2,zero,c174 <__lo0bits+0x98>
    c0f0:	1880008c 	andi	r2,r3,2
    c0f4:	1000211e 	bne	r2,zero,c17c <__lo0bits+0xa0>
    c0f8:	1806d0ba 	srli	r3,r3,2
    c0fc:	00800084 	movi	r2,2
    c100:	20c00015 	stw	r3,0(r4)
    c104:	f800283a 	ret
    c108:	18bfffcc 	andi	r2,r3,65535
    c10c:	10001326 	beq	r2,zero,c15c <__lo0bits+0x80>
    c110:	0005883a 	mov	r2,zero
    c114:	19403fcc 	andi	r5,r3,255
    c118:	2800021e 	bne	r5,zero,c124 <__lo0bits+0x48>
    c11c:	1806d23a 	srli	r3,r3,8
    c120:	10800204 	addi	r2,r2,8
    c124:	194003cc 	andi	r5,r3,15
    c128:	2800021e 	bne	r5,zero,c134 <__lo0bits+0x58>
    c12c:	1806d13a 	srli	r3,r3,4
    c130:	10800104 	addi	r2,r2,4
    c134:	194000cc 	andi	r5,r3,3
    c138:	2800021e 	bne	r5,zero,c144 <__lo0bits+0x68>
    c13c:	1806d0ba 	srli	r3,r3,2
    c140:	10800084 	addi	r2,r2,2
    c144:	1940004c 	andi	r5,r3,1
    c148:	2800081e 	bne	r5,zero,c16c <__lo0bits+0x90>
    c14c:	1806d07a 	srli	r3,r3,1
    c150:	1800051e 	bne	r3,zero,c168 <__lo0bits+0x8c>
    c154:	00800804 	movi	r2,32
    c158:	f800283a 	ret
    c15c:	1806d43a 	srli	r3,r3,16
    c160:	00800404 	movi	r2,16
    c164:	003feb06 	br	c114 <__alt_data_end+0xfffec114>
    c168:	10800044 	addi	r2,r2,1
    c16c:	20c00015 	stw	r3,0(r4)
    c170:	f800283a 	ret
    c174:	0005883a 	mov	r2,zero
    c178:	f800283a 	ret
    c17c:	1806d07a 	srli	r3,r3,1
    c180:	00800044 	movi	r2,1
    c184:	20c00015 	stw	r3,0(r4)
    c188:	f800283a 	ret

0000c18c <__i2b>:
    c18c:	defffd04 	addi	sp,sp,-12
    c190:	dc000015 	stw	r16,0(sp)
    c194:	04000044 	movi	r16,1
    c198:	dc400115 	stw	r17,4(sp)
    c19c:	2823883a 	mov	r17,r5
    c1a0:	800b883a 	mov	r5,r16
    c1a4:	dfc00215 	stw	ra,8(sp)
    c1a8:	000bd580 	call	bd58 <_Balloc>
    c1ac:	14400515 	stw	r17,20(r2)
    c1b0:	14000415 	stw	r16,16(r2)
    c1b4:	dfc00217 	ldw	ra,8(sp)
    c1b8:	dc400117 	ldw	r17,4(sp)
    c1bc:	dc000017 	ldw	r16,0(sp)
    c1c0:	dec00304 	addi	sp,sp,12
    c1c4:	f800283a 	ret

0000c1c8 <__multiply>:
    c1c8:	deffef04 	addi	sp,sp,-68
    c1cc:	dc400815 	stw	r17,32(sp)
    c1d0:	dc000715 	stw	r16,28(sp)
    c1d4:	34400417 	ldw	r17,16(r6)
    c1d8:	2c000417 	ldw	r16,16(r5)
    c1dc:	dd800d15 	stw	r22,52(sp)
    c1e0:	dc800915 	stw	r18,36(sp)
    c1e4:	dfc01015 	stw	ra,64(sp)
    c1e8:	df000f15 	stw	fp,60(sp)
    c1ec:	ddc00e15 	stw	r23,56(sp)
    c1f0:	dd400c15 	stw	r21,48(sp)
    c1f4:	dd000b15 	stw	r20,44(sp)
    c1f8:	dcc00a15 	stw	r19,40(sp)
    c1fc:	2825883a 	mov	r18,r5
    c200:	302d883a 	mov	r22,r6
    c204:	8440050e 	bge	r16,r17,c21c <__multiply+0x54>
    c208:	8007883a 	mov	r3,r16
    c20c:	3025883a 	mov	r18,r6
    c210:	8821883a 	mov	r16,r17
    c214:	282d883a 	mov	r22,r5
    c218:	1823883a 	mov	r17,r3
    c21c:	90800217 	ldw	r2,8(r18)
    c220:	8447883a 	add	r3,r16,r17
    c224:	d8c00215 	stw	r3,8(sp)
    c228:	91400117 	ldw	r5,4(r18)
    c22c:	10c0010e 	bge	r2,r3,c234 <__multiply+0x6c>
    c230:	29400044 	addi	r5,r5,1
    c234:	000bd580 	call	bd58 <_Balloc>
    c238:	d8c00217 	ldw	r3,8(sp)
    c23c:	d8800615 	stw	r2,24(sp)
    c240:	18eb883a 	add	r21,r3,r3
    c244:	ad6b883a 	add	r21,r21,r21
    c248:	10c00504 	addi	r3,r2,20
    c24c:	1d6b883a 	add	r21,r3,r21
    c250:	d8c00115 	stw	r3,4(sp)
    c254:	dd400315 	stw	r21,12(sp)
    c258:	1805883a 	mov	r2,r3
    c25c:	1d40042e 	bgeu	r3,r21,c270 <__multiply+0xa8>
    c260:	d8c00317 	ldw	r3,12(sp)
    c264:	10000015 	stw	zero,0(r2)
    c268:	10800104 	addi	r2,r2,4
    c26c:	10fffc36 	bltu	r2,r3,c260 <__alt_data_end+0xfffec260>
    c270:	8c63883a 	add	r17,r17,r17
    c274:	b5800504 	addi	r22,r22,20
    c278:	8c63883a 	add	r17,r17,r17
    c27c:	94800504 	addi	r18,r18,20
    c280:	8421883a 	add	r16,r16,r16
    c284:	b463883a 	add	r17,r22,r17
    c288:	8421883a 	add	r16,r16,r16
    c28c:	dd800015 	stw	r22,0(sp)
    c290:	dc800415 	stw	r18,16(sp)
    c294:	dc400515 	stw	r17,20(sp)
    c298:	9429883a 	add	r20,r18,r16
    c29c:	b4404f2e 	bgeu	r22,r17,c3dc <__multiply+0x214>
    c2a0:	d8c00017 	ldw	r3,0(sp)
    c2a4:	1c800017 	ldw	r18,0(r3)
    c2a8:	947fffcc 	andi	r17,r18,65535
    c2ac:	88001e26 	beq	r17,zero,c328 <__multiply+0x160>
    c2b0:	dd800117 	ldw	r22,4(sp)
    c2b4:	dd400417 	ldw	r21,16(sp)
    c2b8:	0027883a 	mov	r19,zero
    c2bc:	ac800017 	ldw	r18,0(r21)
    c2c0:	b4000017 	ldw	r16,0(r22)
    c2c4:	880b883a 	mov	r5,r17
    c2c8:	913fffcc 	andi	r4,r18,65535
    c2cc:	000197c0 	call	197c <__mulsi3>
    c2d0:	9008d43a 	srli	r4,r18,16
    c2d4:	84bfffcc 	andi	r18,r16,65535
    c2d8:	1485883a 	add	r2,r2,r18
    c2dc:	14e5883a 	add	r18,r2,r19
    c2e0:	8020d43a 	srli	r16,r16,16
    c2e4:	9026d43a 	srli	r19,r18,16
    c2e8:	880b883a 	mov	r5,r17
    c2ec:	000197c0 	call	197c <__mulsi3>
    c2f0:	1405883a 	add	r2,r2,r16
    c2f4:	14e1883a 	add	r16,r2,r19
    c2f8:	90ffffcc 	andi	r3,r18,65535
    c2fc:	8024943a 	slli	r18,r16,16
    c300:	ad400104 	addi	r21,r21,4
    c304:	b005883a 	mov	r2,r22
    c308:	90c6b03a 	or	r3,r18,r3
    c30c:	b0c00015 	stw	r3,0(r22)
    c310:	8026d43a 	srli	r19,r16,16
    c314:	b5800104 	addi	r22,r22,4
    c318:	ad3fe836 	bltu	r21,r20,c2bc <__alt_data_end+0xfffec2bc>
    c31c:	d8c00017 	ldw	r3,0(sp)
    c320:	14c00115 	stw	r19,4(r2)
    c324:	1c800017 	ldw	r18,0(r3)
    c328:	9024d43a 	srli	r18,r18,16
    c32c:	90002226 	beq	r18,zero,c3b8 <__multiply+0x1f0>
    c330:	d8c00117 	ldw	r3,4(sp)
    c334:	dd800417 	ldw	r22,16(sp)
    c338:	002f883a 	mov	r23,zero
    c33c:	1f000017 	ldw	fp,0(r3)
    c340:	1823883a 	mov	r17,r3
    c344:	182b883a 	mov	r21,r3
    c348:	e021883a 	mov	r16,fp
    c34c:	00000106 	br	c354 <__multiply+0x18c>
    c350:	982b883a 	mov	r21,r19
    c354:	b100000b 	ldhu	r4,0(r22)
    c358:	8020d43a 	srli	r16,r16,16
    c35c:	900b883a 	mov	r5,r18
    c360:	000197c0 	call	197c <__mulsi3>
    c364:	1405883a 	add	r2,r2,r16
    c368:	15ef883a 	add	r23,r2,r23
    c36c:	b804943a 	slli	r2,r23,16
    c370:	e0ffffcc 	andi	r3,fp,65535
    c374:	8c400104 	addi	r17,r17,4
    c378:	10c6b03a 	or	r3,r2,r3
    c37c:	88ffff15 	stw	r3,-4(r17)
    c380:	b5800104 	addi	r22,r22,4
    c384:	b13fff17 	ldw	r4,-4(r22)
    c388:	acc00104 	addi	r19,r21,4
    c38c:	900b883a 	mov	r5,r18
    c390:	2008d43a 	srli	r4,r4,16
    c394:	9c000017 	ldw	r16,0(r19)
    c398:	000197c0 	call	197c <__mulsi3>
    c39c:	b806d43a 	srli	r3,r23,16
    c3a0:	813fffcc 	andi	r4,r16,65535
    c3a4:	1105883a 	add	r2,r2,r4
    c3a8:	10f9883a 	add	fp,r2,r3
    c3ac:	e02ed43a 	srli	r23,fp,16
    c3b0:	b53fe736 	bltu	r22,r20,c350 <__alt_data_end+0xfffec350>
    c3b4:	af000115 	stw	fp,4(r21)
    c3b8:	d8c00017 	ldw	r3,0(sp)
    c3bc:	d9000517 	ldw	r4,20(sp)
    c3c0:	18c00104 	addi	r3,r3,4
    c3c4:	d8c00015 	stw	r3,0(sp)
    c3c8:	d8c00117 	ldw	r3,4(sp)
    c3cc:	18c00104 	addi	r3,r3,4
    c3d0:	d8c00115 	stw	r3,4(sp)
    c3d4:	d8c00017 	ldw	r3,0(sp)
    c3d8:	193fb136 	bltu	r3,r4,c2a0 <__alt_data_end+0xfffec2a0>
    c3dc:	d8c00217 	ldw	r3,8(sp)
    c3e0:	00c00c0e 	bge	zero,r3,c414 <__multiply+0x24c>
    c3e4:	d8c00317 	ldw	r3,12(sp)
    c3e8:	18bfff17 	ldw	r2,-4(r3)
    c3ec:	1d7fff04 	addi	r21,r3,-4
    c3f0:	10000326 	beq	r2,zero,c400 <__multiply+0x238>
    c3f4:	00000706 	br	c414 <__multiply+0x24c>
    c3f8:	a8800017 	ldw	r2,0(r21)
    c3fc:	1000051e 	bne	r2,zero,c414 <__multiply+0x24c>
    c400:	d8c00217 	ldw	r3,8(sp)
    c404:	ad7fff04 	addi	r21,r21,-4
    c408:	18ffffc4 	addi	r3,r3,-1
    c40c:	d8c00215 	stw	r3,8(sp)
    c410:	183ff91e 	bne	r3,zero,c3f8 <__alt_data_end+0xfffec3f8>
    c414:	d8c00617 	ldw	r3,24(sp)
    c418:	d9000217 	ldw	r4,8(sp)
    c41c:	1805883a 	mov	r2,r3
    c420:	19000415 	stw	r4,16(r3)
    c424:	dfc01017 	ldw	ra,64(sp)
    c428:	df000f17 	ldw	fp,60(sp)
    c42c:	ddc00e17 	ldw	r23,56(sp)
    c430:	dd800d17 	ldw	r22,52(sp)
    c434:	dd400c17 	ldw	r21,48(sp)
    c438:	dd000b17 	ldw	r20,44(sp)
    c43c:	dcc00a17 	ldw	r19,40(sp)
    c440:	dc800917 	ldw	r18,36(sp)
    c444:	dc400817 	ldw	r17,32(sp)
    c448:	dc000717 	ldw	r16,28(sp)
    c44c:	dec01104 	addi	sp,sp,68
    c450:	f800283a 	ret

0000c454 <__pow5mult>:
    c454:	defffa04 	addi	sp,sp,-24
    c458:	dcc00315 	stw	r19,12(sp)
    c45c:	dc000015 	stw	r16,0(sp)
    c460:	dfc00515 	stw	ra,20(sp)
    c464:	dd000415 	stw	r20,16(sp)
    c468:	dc800215 	stw	r18,8(sp)
    c46c:	dc400115 	stw	r17,4(sp)
    c470:	308000cc 	andi	r2,r6,3
    c474:	3021883a 	mov	r16,r6
    c478:	2027883a 	mov	r19,r4
    c47c:	10002f1e 	bne	r2,zero,c53c <__pow5mult+0xe8>
    c480:	2825883a 	mov	r18,r5
    c484:	8021d0ba 	srai	r16,r16,2
    c488:	80001a26 	beq	r16,zero,c4f4 <__pow5mult+0xa0>
    c48c:	9c401217 	ldw	r17,72(r19)
    c490:	8800061e 	bne	r17,zero,c4ac <__pow5mult+0x58>
    c494:	00003406 	br	c568 <__pow5mult+0x114>
    c498:	8021d07a 	srai	r16,r16,1
    c49c:	80001526 	beq	r16,zero,c4f4 <__pow5mult+0xa0>
    c4a0:	88800017 	ldw	r2,0(r17)
    c4a4:	10001c26 	beq	r2,zero,c518 <__pow5mult+0xc4>
    c4a8:	1023883a 	mov	r17,r2
    c4ac:	8080004c 	andi	r2,r16,1
    c4b0:	103ff926 	beq	r2,zero,c498 <__alt_data_end+0xfffec498>
    c4b4:	880d883a 	mov	r6,r17
    c4b8:	900b883a 	mov	r5,r18
    c4bc:	9809883a 	mov	r4,r19
    c4c0:	000c1c80 	call	c1c8 <__multiply>
    c4c4:	90001b26 	beq	r18,zero,c534 <__pow5mult+0xe0>
    c4c8:	91000117 	ldw	r4,4(r18)
    c4cc:	98c01317 	ldw	r3,76(r19)
    c4d0:	8021d07a 	srai	r16,r16,1
    c4d4:	2109883a 	add	r4,r4,r4
    c4d8:	2109883a 	add	r4,r4,r4
    c4dc:	1907883a 	add	r3,r3,r4
    c4e0:	19000017 	ldw	r4,0(r3)
    c4e4:	91000015 	stw	r4,0(r18)
    c4e8:	1c800015 	stw	r18,0(r3)
    c4ec:	1025883a 	mov	r18,r2
    c4f0:	803feb1e 	bne	r16,zero,c4a0 <__alt_data_end+0xfffec4a0>
    c4f4:	9005883a 	mov	r2,r18
    c4f8:	dfc00517 	ldw	ra,20(sp)
    c4fc:	dd000417 	ldw	r20,16(sp)
    c500:	dcc00317 	ldw	r19,12(sp)
    c504:	dc800217 	ldw	r18,8(sp)
    c508:	dc400117 	ldw	r17,4(sp)
    c50c:	dc000017 	ldw	r16,0(sp)
    c510:	dec00604 	addi	sp,sp,24
    c514:	f800283a 	ret
    c518:	880d883a 	mov	r6,r17
    c51c:	880b883a 	mov	r5,r17
    c520:	9809883a 	mov	r4,r19
    c524:	000c1c80 	call	c1c8 <__multiply>
    c528:	88800015 	stw	r2,0(r17)
    c52c:	10000015 	stw	zero,0(r2)
    c530:	003fdd06 	br	c4a8 <__alt_data_end+0xfffec4a8>
    c534:	1025883a 	mov	r18,r2
    c538:	003fd706 	br	c498 <__alt_data_end+0xfffec498>
    c53c:	10bfffc4 	addi	r2,r2,-1
    c540:	1085883a 	add	r2,r2,r2
    c544:	00c00074 	movhi	r3,1
    c548:	18cb1004 	addi	r3,r3,11328
    c54c:	1085883a 	add	r2,r2,r2
    c550:	1885883a 	add	r2,r3,r2
    c554:	11800017 	ldw	r6,0(r2)
    c558:	000f883a 	mov	r7,zero
    c55c:	000be280 	call	be28 <__multadd>
    c560:	1025883a 	mov	r18,r2
    c564:	003fc706 	br	c484 <__alt_data_end+0xfffec484>
    c568:	05000044 	movi	r20,1
    c56c:	a00b883a 	mov	r5,r20
    c570:	9809883a 	mov	r4,r19
    c574:	000bd580 	call	bd58 <_Balloc>
    c578:	1023883a 	mov	r17,r2
    c57c:	00809c44 	movi	r2,625
    c580:	88800515 	stw	r2,20(r17)
    c584:	8d000415 	stw	r20,16(r17)
    c588:	9c401215 	stw	r17,72(r19)
    c58c:	88000015 	stw	zero,0(r17)
    c590:	003fc606 	br	c4ac <__alt_data_end+0xfffec4ac>

0000c594 <__lshift>:
    c594:	defff904 	addi	sp,sp,-28
    c598:	dd400515 	stw	r21,20(sp)
    c59c:	dcc00315 	stw	r19,12(sp)
    c5a0:	302bd17a 	srai	r21,r6,5
    c5a4:	2cc00417 	ldw	r19,16(r5)
    c5a8:	28800217 	ldw	r2,8(r5)
    c5ac:	dd000415 	stw	r20,16(sp)
    c5b0:	ace7883a 	add	r19,r21,r19
    c5b4:	dc800215 	stw	r18,8(sp)
    c5b8:	dc400115 	stw	r17,4(sp)
    c5bc:	dc000015 	stw	r16,0(sp)
    c5c0:	dfc00615 	stw	ra,24(sp)
    c5c4:	9c000044 	addi	r16,r19,1
    c5c8:	2823883a 	mov	r17,r5
    c5cc:	3029883a 	mov	r20,r6
    c5d0:	2025883a 	mov	r18,r4
    c5d4:	29400117 	ldw	r5,4(r5)
    c5d8:	1400030e 	bge	r2,r16,c5e8 <__lshift+0x54>
    c5dc:	1085883a 	add	r2,r2,r2
    c5e0:	29400044 	addi	r5,r5,1
    c5e4:	143ffd16 	blt	r2,r16,c5dc <__alt_data_end+0xfffec5dc>
    c5e8:	9009883a 	mov	r4,r18
    c5ec:	000bd580 	call	bd58 <_Balloc>
    c5f0:	10c00504 	addi	r3,r2,20
    c5f4:	0540070e 	bge	zero,r21,c614 <__lshift+0x80>
    c5f8:	ad6b883a 	add	r21,r21,r21
    c5fc:	ad6b883a 	add	r21,r21,r21
    c600:	1809883a 	mov	r4,r3
    c604:	1d47883a 	add	r3,r3,r21
    c608:	20000015 	stw	zero,0(r4)
    c60c:	21000104 	addi	r4,r4,4
    c610:	193ffd1e 	bne	r3,r4,c608 <__alt_data_end+0xfffec608>
    c614:	8a000417 	ldw	r8,16(r17)
    c618:	89000504 	addi	r4,r17,20
    c61c:	a18007cc 	andi	r6,r20,31
    c620:	4211883a 	add	r8,r8,r8
    c624:	4211883a 	add	r8,r8,r8
    c628:	2211883a 	add	r8,r4,r8
    c62c:	30002326 	beq	r6,zero,c6bc <__lshift+0x128>
    c630:	02400804 	movi	r9,32
    c634:	4993c83a 	sub	r9,r9,r6
    c638:	000b883a 	mov	r5,zero
    c63c:	21c00017 	ldw	r7,0(r4)
    c640:	1815883a 	mov	r10,r3
    c644:	18c00104 	addi	r3,r3,4
    c648:	398e983a 	sll	r7,r7,r6
    c64c:	21000104 	addi	r4,r4,4
    c650:	394ab03a 	or	r5,r7,r5
    c654:	197fff15 	stw	r5,-4(r3)
    c658:	217fff17 	ldw	r5,-4(r4)
    c65c:	2a4ad83a 	srl	r5,r5,r9
    c660:	223ff636 	bltu	r4,r8,c63c <__alt_data_end+0xfffec63c>
    c664:	51400115 	stw	r5,4(r10)
    c668:	28001a1e 	bne	r5,zero,c6d4 <__lshift+0x140>
    c66c:	843fffc4 	addi	r16,r16,-1
    c670:	14000415 	stw	r16,16(r2)
    c674:	88000826 	beq	r17,zero,c698 <__lshift+0x104>
    c678:	89000117 	ldw	r4,4(r17)
    c67c:	90c01317 	ldw	r3,76(r18)
    c680:	2109883a 	add	r4,r4,r4
    c684:	2109883a 	add	r4,r4,r4
    c688:	1907883a 	add	r3,r3,r4
    c68c:	19000017 	ldw	r4,0(r3)
    c690:	89000015 	stw	r4,0(r17)
    c694:	1c400015 	stw	r17,0(r3)
    c698:	dfc00617 	ldw	ra,24(sp)
    c69c:	dd400517 	ldw	r21,20(sp)
    c6a0:	dd000417 	ldw	r20,16(sp)
    c6a4:	dcc00317 	ldw	r19,12(sp)
    c6a8:	dc800217 	ldw	r18,8(sp)
    c6ac:	dc400117 	ldw	r17,4(sp)
    c6b0:	dc000017 	ldw	r16,0(sp)
    c6b4:	dec00704 	addi	sp,sp,28
    c6b8:	f800283a 	ret
    c6bc:	21400017 	ldw	r5,0(r4)
    c6c0:	18c00104 	addi	r3,r3,4
    c6c4:	21000104 	addi	r4,r4,4
    c6c8:	197fff15 	stw	r5,-4(r3)
    c6cc:	223ffb36 	bltu	r4,r8,c6bc <__alt_data_end+0xfffec6bc>
    c6d0:	003fe606 	br	c66c <__alt_data_end+0xfffec66c>
    c6d4:	9c000084 	addi	r16,r19,2
    c6d8:	003fe406 	br	c66c <__alt_data_end+0xfffec66c>

0000c6dc <__mcmp>:
    c6dc:	20800417 	ldw	r2,16(r4)
    c6e0:	28c00417 	ldw	r3,16(r5)
    c6e4:	10c5c83a 	sub	r2,r2,r3
    c6e8:	1000111e 	bne	r2,zero,c730 <__mcmp+0x54>
    c6ec:	18c7883a 	add	r3,r3,r3
    c6f0:	18c7883a 	add	r3,r3,r3
    c6f4:	21000504 	addi	r4,r4,20
    c6f8:	29400504 	addi	r5,r5,20
    c6fc:	20c5883a 	add	r2,r4,r3
    c700:	28cb883a 	add	r5,r5,r3
    c704:	00000106 	br	c70c <__mcmp+0x30>
    c708:	20800a2e 	bgeu	r4,r2,c734 <__mcmp+0x58>
    c70c:	10bfff04 	addi	r2,r2,-4
    c710:	297fff04 	addi	r5,r5,-4
    c714:	11800017 	ldw	r6,0(r2)
    c718:	28c00017 	ldw	r3,0(r5)
    c71c:	30fffa26 	beq	r6,r3,c708 <__alt_data_end+0xfffec708>
    c720:	30c00236 	bltu	r6,r3,c72c <__mcmp+0x50>
    c724:	00800044 	movi	r2,1
    c728:	f800283a 	ret
    c72c:	00bfffc4 	movi	r2,-1
    c730:	f800283a 	ret
    c734:	0005883a 	mov	r2,zero
    c738:	f800283a 	ret

0000c73c <__mdiff>:
    c73c:	28c00417 	ldw	r3,16(r5)
    c740:	30800417 	ldw	r2,16(r6)
    c744:	defffa04 	addi	sp,sp,-24
    c748:	dcc00315 	stw	r19,12(sp)
    c74c:	dc800215 	stw	r18,8(sp)
    c750:	dfc00515 	stw	ra,20(sp)
    c754:	dd000415 	stw	r20,16(sp)
    c758:	dc400115 	stw	r17,4(sp)
    c75c:	dc000015 	stw	r16,0(sp)
    c760:	1887c83a 	sub	r3,r3,r2
    c764:	2825883a 	mov	r18,r5
    c768:	3027883a 	mov	r19,r6
    c76c:	1800141e 	bne	r3,zero,c7c0 <__mdiff+0x84>
    c770:	1085883a 	add	r2,r2,r2
    c774:	1085883a 	add	r2,r2,r2
    c778:	2a000504 	addi	r8,r5,20
    c77c:	34000504 	addi	r16,r6,20
    c780:	4087883a 	add	r3,r8,r2
    c784:	8085883a 	add	r2,r16,r2
    c788:	00000106 	br	c790 <__mdiff+0x54>
    c78c:	40c0592e 	bgeu	r8,r3,c8f4 <__mdiff+0x1b8>
    c790:	18ffff04 	addi	r3,r3,-4
    c794:	10bfff04 	addi	r2,r2,-4
    c798:	19c00017 	ldw	r7,0(r3)
    c79c:	11400017 	ldw	r5,0(r2)
    c7a0:	397ffa26 	beq	r7,r5,c78c <__alt_data_end+0xfffec78c>
    c7a4:	3940592e 	bgeu	r7,r5,c90c <__mdiff+0x1d0>
    c7a8:	9005883a 	mov	r2,r18
    c7ac:	4023883a 	mov	r17,r8
    c7b0:	9825883a 	mov	r18,r19
    c7b4:	05000044 	movi	r20,1
    c7b8:	1027883a 	mov	r19,r2
    c7bc:	00000406 	br	c7d0 <__mdiff+0x94>
    c7c0:	18005616 	blt	r3,zero,c91c <__mdiff+0x1e0>
    c7c4:	34400504 	addi	r17,r6,20
    c7c8:	2c000504 	addi	r16,r5,20
    c7cc:	0029883a 	mov	r20,zero
    c7d0:	91400117 	ldw	r5,4(r18)
    c7d4:	000bd580 	call	bd58 <_Balloc>
    c7d8:	92400417 	ldw	r9,16(r18)
    c7dc:	9b000417 	ldw	r12,16(r19)
    c7e0:	12c00504 	addi	r11,r2,20
    c7e4:	4a51883a 	add	r8,r9,r9
    c7e8:	6319883a 	add	r12,r12,r12
    c7ec:	4211883a 	add	r8,r8,r8
    c7f0:	6319883a 	add	r12,r12,r12
    c7f4:	15000315 	stw	r20,12(r2)
    c7f8:	8211883a 	add	r8,r16,r8
    c7fc:	8b19883a 	add	r12,r17,r12
    c800:	0007883a 	mov	r3,zero
    c804:	81400017 	ldw	r5,0(r16)
    c808:	89c00017 	ldw	r7,0(r17)
    c80c:	59800104 	addi	r6,r11,4
    c810:	293fffcc 	andi	r4,r5,65535
    c814:	20c7883a 	add	r3,r4,r3
    c818:	393fffcc 	andi	r4,r7,65535
    c81c:	1909c83a 	sub	r4,r3,r4
    c820:	280ad43a 	srli	r5,r5,16
    c824:	380ed43a 	srli	r7,r7,16
    c828:	2007d43a 	srai	r3,r4,16
    c82c:	213fffcc 	andi	r4,r4,65535
    c830:	29cbc83a 	sub	r5,r5,r7
    c834:	28c7883a 	add	r3,r5,r3
    c838:	180a943a 	slli	r5,r3,16
    c83c:	8c400104 	addi	r17,r17,4
    c840:	84000104 	addi	r16,r16,4
    c844:	2908b03a 	or	r4,r5,r4
    c848:	59000015 	stw	r4,0(r11)
    c84c:	1807d43a 	srai	r3,r3,16
    c850:	3015883a 	mov	r10,r6
    c854:	3017883a 	mov	r11,r6
    c858:	8b3fea36 	bltu	r17,r12,c804 <__alt_data_end+0xfffec804>
    c85c:	8200162e 	bgeu	r16,r8,c8b8 <__mdiff+0x17c>
    c860:	8017883a 	mov	r11,r16
    c864:	59400017 	ldw	r5,0(r11)
    c868:	31800104 	addi	r6,r6,4
    c86c:	5ac00104 	addi	r11,r11,4
    c870:	293fffcc 	andi	r4,r5,65535
    c874:	20c7883a 	add	r3,r4,r3
    c878:	280ed43a 	srli	r7,r5,16
    c87c:	180bd43a 	srai	r5,r3,16
    c880:	193fffcc 	andi	r4,r3,65535
    c884:	3947883a 	add	r3,r7,r5
    c888:	180a943a 	slli	r5,r3,16
    c88c:	1807d43a 	srai	r3,r3,16
    c890:	2908b03a 	or	r4,r5,r4
    c894:	313fff15 	stw	r4,-4(r6)
    c898:	5a3ff236 	bltu	r11,r8,c864 <__alt_data_end+0xfffec864>
    c89c:	0406303a 	nor	r3,zero,r16
    c8a0:	1a07883a 	add	r3,r3,r8
    c8a4:	1806d0ba 	srli	r3,r3,2
    c8a8:	18c00044 	addi	r3,r3,1
    c8ac:	18c7883a 	add	r3,r3,r3
    c8b0:	18c7883a 	add	r3,r3,r3
    c8b4:	50d5883a 	add	r10,r10,r3
    c8b8:	50ffff04 	addi	r3,r10,-4
    c8bc:	2000041e 	bne	r4,zero,c8d0 <__mdiff+0x194>
    c8c0:	18ffff04 	addi	r3,r3,-4
    c8c4:	19000017 	ldw	r4,0(r3)
    c8c8:	4a7fffc4 	addi	r9,r9,-1
    c8cc:	203ffc26 	beq	r4,zero,c8c0 <__alt_data_end+0xfffec8c0>
    c8d0:	12400415 	stw	r9,16(r2)
    c8d4:	dfc00517 	ldw	ra,20(sp)
    c8d8:	dd000417 	ldw	r20,16(sp)
    c8dc:	dcc00317 	ldw	r19,12(sp)
    c8e0:	dc800217 	ldw	r18,8(sp)
    c8e4:	dc400117 	ldw	r17,4(sp)
    c8e8:	dc000017 	ldw	r16,0(sp)
    c8ec:	dec00604 	addi	sp,sp,24
    c8f0:	f800283a 	ret
    c8f4:	000b883a 	mov	r5,zero
    c8f8:	000bd580 	call	bd58 <_Balloc>
    c8fc:	00c00044 	movi	r3,1
    c900:	10c00415 	stw	r3,16(r2)
    c904:	10000515 	stw	zero,20(r2)
    c908:	003ff206 	br	c8d4 <__alt_data_end+0xfffec8d4>
    c90c:	8023883a 	mov	r17,r16
    c910:	0029883a 	mov	r20,zero
    c914:	4021883a 	mov	r16,r8
    c918:	003fad06 	br	c7d0 <__alt_data_end+0xfffec7d0>
    c91c:	9005883a 	mov	r2,r18
    c920:	94400504 	addi	r17,r18,20
    c924:	9c000504 	addi	r16,r19,20
    c928:	9825883a 	mov	r18,r19
    c92c:	05000044 	movi	r20,1
    c930:	1027883a 	mov	r19,r2
    c934:	003fa606 	br	c7d0 <__alt_data_end+0xfffec7d0>

0000c938 <__ulp>:
    c938:	295ffc2c 	andhi	r5,r5,32752
    c93c:	00bf3034 	movhi	r2,64704
    c940:	2887883a 	add	r3,r5,r2
    c944:	00c0020e 	bge	zero,r3,c950 <__ulp+0x18>
    c948:	0005883a 	mov	r2,zero
    c94c:	f800283a 	ret
    c950:	00c7c83a 	sub	r3,zero,r3
    c954:	1807d53a 	srai	r3,r3,20
    c958:	008004c4 	movi	r2,19
    c95c:	10c00b0e 	bge	r2,r3,c98c <__ulp+0x54>
    c960:	18bffb04 	addi	r2,r3,-20
    c964:	01000784 	movi	r4,30
    c968:	0007883a 	mov	r3,zero
    c96c:	20800516 	blt	r4,r2,c984 <__ulp+0x4c>
    c970:	010007c4 	movi	r4,31
    c974:	2089c83a 	sub	r4,r4,r2
    c978:	00800044 	movi	r2,1
    c97c:	1104983a 	sll	r2,r2,r4
    c980:	f800283a 	ret
    c984:	00800044 	movi	r2,1
    c988:	f800283a 	ret
    c98c:	01400234 	movhi	r5,8
    c990:	28c7d83a 	sra	r3,r5,r3
    c994:	0005883a 	mov	r2,zero
    c998:	f800283a 	ret

0000c99c <__b2d>:
    c99c:	defffa04 	addi	sp,sp,-24
    c9a0:	dc000015 	stw	r16,0(sp)
    c9a4:	24000417 	ldw	r16,16(r4)
    c9a8:	dc400115 	stw	r17,4(sp)
    c9ac:	24400504 	addi	r17,r4,20
    c9b0:	8421883a 	add	r16,r16,r16
    c9b4:	8421883a 	add	r16,r16,r16
    c9b8:	8c21883a 	add	r16,r17,r16
    c9bc:	dc800215 	stw	r18,8(sp)
    c9c0:	84bfff17 	ldw	r18,-4(r16)
    c9c4:	dd000415 	stw	r20,16(sp)
    c9c8:	dcc00315 	stw	r19,12(sp)
    c9cc:	9009883a 	mov	r4,r18
    c9d0:	2829883a 	mov	r20,r5
    c9d4:	dfc00515 	stw	ra,20(sp)
    c9d8:	000c0740 	call	c074 <__hi0bits>
    c9dc:	00c00804 	movi	r3,32
    c9e0:	1889c83a 	sub	r4,r3,r2
    c9e4:	a1000015 	stw	r4,0(r20)
    c9e8:	01000284 	movi	r4,10
    c9ec:	84ffff04 	addi	r19,r16,-4
    c9f0:	20801216 	blt	r4,r2,ca3c <__b2d+0xa0>
    c9f4:	018002c4 	movi	r6,11
    c9f8:	308dc83a 	sub	r6,r6,r2
    c9fc:	9186d83a 	srl	r3,r18,r6
    ca00:	18cffc34 	orhi	r3,r3,16368
    ca04:	8cc0212e 	bgeu	r17,r19,ca8c <__b2d+0xf0>
    ca08:	813ffe17 	ldw	r4,-8(r16)
    ca0c:	218cd83a 	srl	r6,r4,r6
    ca10:	10800544 	addi	r2,r2,21
    ca14:	9084983a 	sll	r2,r18,r2
    ca18:	1184b03a 	or	r2,r2,r6
    ca1c:	dfc00517 	ldw	ra,20(sp)
    ca20:	dd000417 	ldw	r20,16(sp)
    ca24:	dcc00317 	ldw	r19,12(sp)
    ca28:	dc800217 	ldw	r18,8(sp)
    ca2c:	dc400117 	ldw	r17,4(sp)
    ca30:	dc000017 	ldw	r16,0(sp)
    ca34:	dec00604 	addi	sp,sp,24
    ca38:	f800283a 	ret
    ca3c:	8cc00f2e 	bgeu	r17,r19,ca7c <__b2d+0xe0>
    ca40:	117ffd44 	addi	r5,r2,-11
    ca44:	80bffe17 	ldw	r2,-8(r16)
    ca48:	28000e26 	beq	r5,zero,ca84 <__b2d+0xe8>
    ca4c:	1949c83a 	sub	r4,r3,r5
    ca50:	9164983a 	sll	r18,r18,r5
    ca54:	1106d83a 	srl	r3,r2,r4
    ca58:	81bffe04 	addi	r6,r16,-8
    ca5c:	948ffc34 	orhi	r18,r18,16368
    ca60:	90c6b03a 	or	r3,r18,r3
    ca64:	89800e2e 	bgeu	r17,r6,caa0 <__b2d+0x104>
    ca68:	81bffd17 	ldw	r6,-12(r16)
    ca6c:	1144983a 	sll	r2,r2,r5
    ca70:	310ad83a 	srl	r5,r6,r4
    ca74:	2884b03a 	or	r2,r5,r2
    ca78:	003fe806 	br	ca1c <__alt_data_end+0xfffeca1c>
    ca7c:	10bffd44 	addi	r2,r2,-11
    ca80:	1000041e 	bne	r2,zero,ca94 <__b2d+0xf8>
    ca84:	90cffc34 	orhi	r3,r18,16368
    ca88:	003fe406 	br	ca1c <__alt_data_end+0xfffeca1c>
    ca8c:	000d883a 	mov	r6,zero
    ca90:	003fdf06 	br	ca10 <__alt_data_end+0xfffeca10>
    ca94:	90a4983a 	sll	r18,r18,r2
    ca98:	0005883a 	mov	r2,zero
    ca9c:	003ff906 	br	ca84 <__alt_data_end+0xfffeca84>
    caa0:	1144983a 	sll	r2,r2,r5
    caa4:	003fdd06 	br	ca1c <__alt_data_end+0xfffeca1c>

0000caa8 <__d2b>:
    caa8:	defff804 	addi	sp,sp,-32
    caac:	dc000215 	stw	r16,8(sp)
    cab0:	3021883a 	mov	r16,r6
    cab4:	dc400315 	stw	r17,12(sp)
    cab8:	8022907a 	slli	r17,r16,1
    cabc:	dd000615 	stw	r20,24(sp)
    cac0:	2829883a 	mov	r20,r5
    cac4:	01400044 	movi	r5,1
    cac8:	dcc00515 	stw	r19,20(sp)
    cacc:	dc800415 	stw	r18,16(sp)
    cad0:	dfc00715 	stw	ra,28(sp)
    cad4:	3825883a 	mov	r18,r7
    cad8:	8822d57a 	srli	r17,r17,21
    cadc:	000bd580 	call	bd58 <_Balloc>
    cae0:	1027883a 	mov	r19,r2
    cae4:	00800434 	movhi	r2,16
    cae8:	10bfffc4 	addi	r2,r2,-1
    caec:	808c703a 	and	r6,r16,r2
    caf0:	88000126 	beq	r17,zero,caf8 <__d2b+0x50>
    caf4:	31800434 	orhi	r6,r6,16
    caf8:	d9800015 	stw	r6,0(sp)
    cafc:	a0002426 	beq	r20,zero,cb90 <__d2b+0xe8>
    cb00:	d9000104 	addi	r4,sp,4
    cb04:	dd000115 	stw	r20,4(sp)
    cb08:	000c0dc0 	call	c0dc <__lo0bits>
    cb0c:	d8c00017 	ldw	r3,0(sp)
    cb10:	10002f1e 	bne	r2,zero,cbd0 <__d2b+0x128>
    cb14:	d9000117 	ldw	r4,4(sp)
    cb18:	99000515 	stw	r4,20(r19)
    cb1c:	1821003a 	cmpeq	r16,r3,zero
    cb20:	01000084 	movi	r4,2
    cb24:	2421c83a 	sub	r16,r4,r16
    cb28:	98c00615 	stw	r3,24(r19)
    cb2c:	9c000415 	stw	r16,16(r19)
    cb30:	88001f1e 	bne	r17,zero,cbb0 <__d2b+0x108>
    cb34:	10bef384 	addi	r2,r2,-1074
    cb38:	90800015 	stw	r2,0(r18)
    cb3c:	00900034 	movhi	r2,16384
    cb40:	10bfffc4 	addi	r2,r2,-1
    cb44:	8085883a 	add	r2,r16,r2
    cb48:	1085883a 	add	r2,r2,r2
    cb4c:	1085883a 	add	r2,r2,r2
    cb50:	9885883a 	add	r2,r19,r2
    cb54:	11000517 	ldw	r4,20(r2)
    cb58:	8020917a 	slli	r16,r16,5
    cb5c:	000c0740 	call	c074 <__hi0bits>
    cb60:	d8c00817 	ldw	r3,32(sp)
    cb64:	8085c83a 	sub	r2,r16,r2
    cb68:	18800015 	stw	r2,0(r3)
    cb6c:	9805883a 	mov	r2,r19
    cb70:	dfc00717 	ldw	ra,28(sp)
    cb74:	dd000617 	ldw	r20,24(sp)
    cb78:	dcc00517 	ldw	r19,20(sp)
    cb7c:	dc800417 	ldw	r18,16(sp)
    cb80:	dc400317 	ldw	r17,12(sp)
    cb84:	dc000217 	ldw	r16,8(sp)
    cb88:	dec00804 	addi	sp,sp,32
    cb8c:	f800283a 	ret
    cb90:	d809883a 	mov	r4,sp
    cb94:	000c0dc0 	call	c0dc <__lo0bits>
    cb98:	d8c00017 	ldw	r3,0(sp)
    cb9c:	04000044 	movi	r16,1
    cba0:	9c000415 	stw	r16,16(r19)
    cba4:	98c00515 	stw	r3,20(r19)
    cba8:	10800804 	addi	r2,r2,32
    cbac:	883fe126 	beq	r17,zero,cb34 <__alt_data_end+0xfffecb34>
    cbb0:	00c00d44 	movi	r3,53
    cbb4:	8c7ef344 	addi	r17,r17,-1075
    cbb8:	88a3883a 	add	r17,r17,r2
    cbbc:	1885c83a 	sub	r2,r3,r2
    cbc0:	d8c00817 	ldw	r3,32(sp)
    cbc4:	94400015 	stw	r17,0(r18)
    cbc8:	18800015 	stw	r2,0(r3)
    cbcc:	003fe706 	br	cb6c <__alt_data_end+0xfffecb6c>
    cbd0:	01000804 	movi	r4,32
    cbd4:	2089c83a 	sub	r4,r4,r2
    cbd8:	1908983a 	sll	r4,r3,r4
    cbdc:	d9400117 	ldw	r5,4(sp)
    cbe0:	1886d83a 	srl	r3,r3,r2
    cbe4:	2148b03a 	or	r4,r4,r5
    cbe8:	99000515 	stw	r4,20(r19)
    cbec:	d8c00015 	stw	r3,0(sp)
    cbf0:	003fca06 	br	cb1c <__alt_data_end+0xfffecb1c>

0000cbf4 <__ratio>:
    cbf4:	defff904 	addi	sp,sp,-28
    cbf8:	dc400315 	stw	r17,12(sp)
    cbfc:	2823883a 	mov	r17,r5
    cc00:	d9400104 	addi	r5,sp,4
    cc04:	dfc00615 	stw	ra,24(sp)
    cc08:	dcc00515 	stw	r19,20(sp)
    cc0c:	dc800415 	stw	r18,16(sp)
    cc10:	2027883a 	mov	r19,r4
    cc14:	dc000215 	stw	r16,8(sp)
    cc18:	000c99c0 	call	c99c <__b2d>
    cc1c:	d80b883a 	mov	r5,sp
    cc20:	8809883a 	mov	r4,r17
    cc24:	1025883a 	mov	r18,r2
    cc28:	1821883a 	mov	r16,r3
    cc2c:	000c99c0 	call	c99c <__b2d>
    cc30:	8a000417 	ldw	r8,16(r17)
    cc34:	99000417 	ldw	r4,16(r19)
    cc38:	d9400117 	ldw	r5,4(sp)
    cc3c:	2209c83a 	sub	r4,r4,r8
    cc40:	2010917a 	slli	r8,r4,5
    cc44:	d9000017 	ldw	r4,0(sp)
    cc48:	2909c83a 	sub	r4,r5,r4
    cc4c:	4109883a 	add	r4,r8,r4
    cc50:	01000e0e 	bge	zero,r4,cc8c <__ratio+0x98>
    cc54:	2008953a 	slli	r4,r4,20
    cc58:	2421883a 	add	r16,r4,r16
    cc5c:	100d883a 	mov	r6,r2
    cc60:	180f883a 	mov	r7,r3
    cc64:	9009883a 	mov	r4,r18
    cc68:	800b883a 	mov	r5,r16
    cc6c:	0002c540 	call	2c54 <__divdf3>
    cc70:	dfc00617 	ldw	ra,24(sp)
    cc74:	dcc00517 	ldw	r19,20(sp)
    cc78:	dc800417 	ldw	r18,16(sp)
    cc7c:	dc400317 	ldw	r17,12(sp)
    cc80:	dc000217 	ldw	r16,8(sp)
    cc84:	dec00704 	addi	sp,sp,28
    cc88:	f800283a 	ret
    cc8c:	2008953a 	slli	r4,r4,20
    cc90:	1907c83a 	sub	r3,r3,r4
    cc94:	003ff106 	br	cc5c <__alt_data_end+0xfffecc5c>

0000cc98 <_mprec_log10>:
    cc98:	defffe04 	addi	sp,sp,-8
    cc9c:	dc000015 	stw	r16,0(sp)
    cca0:	dfc00115 	stw	ra,4(sp)
    cca4:	008005c4 	movi	r2,23
    cca8:	2021883a 	mov	r16,r4
    ccac:	11000d0e 	bge	r2,r4,cce4 <_mprec_log10+0x4c>
    ccb0:	0005883a 	mov	r2,zero
    ccb4:	00cffc34 	movhi	r3,16368
    ccb8:	843fffc4 	addi	r16,r16,-1
    ccbc:	000d883a 	mov	r6,zero
    ccc0:	01d00934 	movhi	r7,16420
    ccc4:	1009883a 	mov	r4,r2
    ccc8:	180b883a 	mov	r5,r3
    cccc:	00037000 	call	3700 <__muldf3>
    ccd0:	803ff91e 	bne	r16,zero,ccb8 <__alt_data_end+0xfffeccb8>
    ccd4:	dfc00117 	ldw	ra,4(sp)
    ccd8:	dc000017 	ldw	r16,0(sp)
    ccdc:	dec00204 	addi	sp,sp,8
    cce0:	f800283a 	ret
    cce4:	202090fa 	slli	r16,r4,3
    cce8:	00800074 	movhi	r2,1
    ccec:	108b2704 	addi	r2,r2,11420
    ccf0:	1421883a 	add	r16,r2,r16
    ccf4:	80800017 	ldw	r2,0(r16)
    ccf8:	80c00117 	ldw	r3,4(r16)
    ccfc:	dfc00117 	ldw	ra,4(sp)
    cd00:	dc000017 	ldw	r16,0(sp)
    cd04:	dec00204 	addi	sp,sp,8
    cd08:	f800283a 	ret

0000cd0c <__copybits>:
    cd0c:	297fffc4 	addi	r5,r5,-1
    cd10:	280fd17a 	srai	r7,r5,5
    cd14:	30c00417 	ldw	r3,16(r6)
    cd18:	30800504 	addi	r2,r6,20
    cd1c:	39c00044 	addi	r7,r7,1
    cd20:	18c7883a 	add	r3,r3,r3
    cd24:	39cf883a 	add	r7,r7,r7
    cd28:	18c7883a 	add	r3,r3,r3
    cd2c:	39cf883a 	add	r7,r7,r7
    cd30:	10c7883a 	add	r3,r2,r3
    cd34:	21cf883a 	add	r7,r4,r7
    cd38:	10c00d2e 	bgeu	r2,r3,cd70 <__copybits+0x64>
    cd3c:	200b883a 	mov	r5,r4
    cd40:	12000017 	ldw	r8,0(r2)
    cd44:	29400104 	addi	r5,r5,4
    cd48:	10800104 	addi	r2,r2,4
    cd4c:	2a3fff15 	stw	r8,-4(r5)
    cd50:	10fffb36 	bltu	r2,r3,cd40 <__alt_data_end+0xfffecd40>
    cd54:	1985c83a 	sub	r2,r3,r6
    cd58:	10bffac4 	addi	r2,r2,-21
    cd5c:	1004d0ba 	srli	r2,r2,2
    cd60:	10800044 	addi	r2,r2,1
    cd64:	1085883a 	add	r2,r2,r2
    cd68:	1085883a 	add	r2,r2,r2
    cd6c:	2089883a 	add	r4,r4,r2
    cd70:	21c0032e 	bgeu	r4,r7,cd80 <__copybits+0x74>
    cd74:	20000015 	stw	zero,0(r4)
    cd78:	21000104 	addi	r4,r4,4
    cd7c:	21fffd36 	bltu	r4,r7,cd74 <__alt_data_end+0xfffecd74>
    cd80:	f800283a 	ret

0000cd84 <__any_on>:
    cd84:	20c00417 	ldw	r3,16(r4)
    cd88:	2805d17a 	srai	r2,r5,5
    cd8c:	21000504 	addi	r4,r4,20
    cd90:	18800d0e 	bge	r3,r2,cdc8 <__any_on+0x44>
    cd94:	18c7883a 	add	r3,r3,r3
    cd98:	18c7883a 	add	r3,r3,r3
    cd9c:	20c7883a 	add	r3,r4,r3
    cda0:	20c0192e 	bgeu	r4,r3,ce08 <__any_on+0x84>
    cda4:	18bfff17 	ldw	r2,-4(r3)
    cda8:	18ffff04 	addi	r3,r3,-4
    cdac:	1000041e 	bne	r2,zero,cdc0 <__any_on+0x3c>
    cdb0:	20c0142e 	bgeu	r4,r3,ce04 <__any_on+0x80>
    cdb4:	18ffff04 	addi	r3,r3,-4
    cdb8:	19400017 	ldw	r5,0(r3)
    cdbc:	283ffc26 	beq	r5,zero,cdb0 <__alt_data_end+0xfffecdb0>
    cdc0:	00800044 	movi	r2,1
    cdc4:	f800283a 	ret
    cdc8:	10c00a0e 	bge	r2,r3,cdf4 <__any_on+0x70>
    cdcc:	1085883a 	add	r2,r2,r2
    cdd0:	1085883a 	add	r2,r2,r2
    cdd4:	294007cc 	andi	r5,r5,31
    cdd8:	2087883a 	add	r3,r4,r2
    cddc:	283ff026 	beq	r5,zero,cda0 <__alt_data_end+0xfffecda0>
    cde0:	19800017 	ldw	r6,0(r3)
    cde4:	3144d83a 	srl	r2,r6,r5
    cde8:	114a983a 	sll	r5,r2,r5
    cdec:	317ff41e 	bne	r6,r5,cdc0 <__alt_data_end+0xfffecdc0>
    cdf0:	003feb06 	br	cda0 <__alt_data_end+0xfffecda0>
    cdf4:	1085883a 	add	r2,r2,r2
    cdf8:	1085883a 	add	r2,r2,r2
    cdfc:	2087883a 	add	r3,r4,r2
    ce00:	003fe706 	br	cda0 <__alt_data_end+0xfffecda0>
    ce04:	f800283a 	ret
    ce08:	0005883a 	mov	r2,zero
    ce0c:	f800283a 	ret

0000ce10 <_putc_r>:
    ce10:	defffc04 	addi	sp,sp,-16
    ce14:	dc000215 	stw	r16,8(sp)
    ce18:	dfc00315 	stw	ra,12(sp)
    ce1c:	2021883a 	mov	r16,r4
    ce20:	20000226 	beq	r4,zero,ce2c <_putc_r+0x1c>
    ce24:	20800e17 	ldw	r2,56(r4)
    ce28:	10001b26 	beq	r2,zero,ce98 <_putc_r+0x88>
    ce2c:	30800217 	ldw	r2,8(r6)
    ce30:	10bfffc4 	addi	r2,r2,-1
    ce34:	30800215 	stw	r2,8(r6)
    ce38:	10000a16 	blt	r2,zero,ce64 <_putc_r+0x54>
    ce3c:	30800017 	ldw	r2,0(r6)
    ce40:	11400005 	stb	r5,0(r2)
    ce44:	30800017 	ldw	r2,0(r6)
    ce48:	10c00044 	addi	r3,r2,1
    ce4c:	30c00015 	stw	r3,0(r6)
    ce50:	10800003 	ldbu	r2,0(r2)
    ce54:	dfc00317 	ldw	ra,12(sp)
    ce58:	dc000217 	ldw	r16,8(sp)
    ce5c:	dec00404 	addi	sp,sp,16
    ce60:	f800283a 	ret
    ce64:	30c00617 	ldw	r3,24(r6)
    ce68:	10c00616 	blt	r2,r3,ce84 <_putc_r+0x74>
    ce6c:	30800017 	ldw	r2,0(r6)
    ce70:	00c00284 	movi	r3,10
    ce74:	11400005 	stb	r5,0(r2)
    ce78:	30800017 	ldw	r2,0(r6)
    ce7c:	11400003 	ldbu	r5,0(r2)
    ce80:	28fff11e 	bne	r5,r3,ce48 <__alt_data_end+0xfffece48>
    ce84:	8009883a 	mov	r4,r16
    ce88:	dfc00317 	ldw	ra,12(sp)
    ce8c:	dc000217 	ldw	r16,8(sp)
    ce90:	dec00404 	addi	sp,sp,16
    ce94:	000ed841 	jmpi	ed84 <__swbuf_r>
    ce98:	d9400015 	stw	r5,0(sp)
    ce9c:	d9800115 	stw	r6,4(sp)
    cea0:	00052a00 	call	52a0 <__sinit>
    cea4:	d9800117 	ldw	r6,4(sp)
    cea8:	d9400017 	ldw	r5,0(sp)
    ceac:	003fdf06 	br	ce2c <__alt_data_end+0xfffece2c>

0000ceb0 <putc>:
    ceb0:	00800074 	movhi	r2,1
    ceb4:	defffc04 	addi	sp,sp,-16
    ceb8:	10921d04 	addi	r2,r2,18548
    cebc:	dc000115 	stw	r16,4(sp)
    cec0:	14000017 	ldw	r16,0(r2)
    cec4:	dc400215 	stw	r17,8(sp)
    cec8:	dfc00315 	stw	ra,12(sp)
    cecc:	2023883a 	mov	r17,r4
    ced0:	80000226 	beq	r16,zero,cedc <putc+0x2c>
    ced4:	80800e17 	ldw	r2,56(r16)
    ced8:	10001a26 	beq	r2,zero,cf44 <putc+0x94>
    cedc:	28800217 	ldw	r2,8(r5)
    cee0:	10bfffc4 	addi	r2,r2,-1
    cee4:	28800215 	stw	r2,8(r5)
    cee8:	10000b16 	blt	r2,zero,cf18 <putc+0x68>
    ceec:	28800017 	ldw	r2,0(r5)
    cef0:	14400005 	stb	r17,0(r2)
    cef4:	28800017 	ldw	r2,0(r5)
    cef8:	10c00044 	addi	r3,r2,1
    cefc:	28c00015 	stw	r3,0(r5)
    cf00:	10800003 	ldbu	r2,0(r2)
    cf04:	dfc00317 	ldw	ra,12(sp)
    cf08:	dc400217 	ldw	r17,8(sp)
    cf0c:	dc000117 	ldw	r16,4(sp)
    cf10:	dec00404 	addi	sp,sp,16
    cf14:	f800283a 	ret
    cf18:	28c00617 	ldw	r3,24(r5)
    cf1c:	10c00e16 	blt	r2,r3,cf58 <putc+0xa8>
    cf20:	28800017 	ldw	r2,0(r5)
    cf24:	01000284 	movi	r4,10
    cf28:	14400005 	stb	r17,0(r2)
    cf2c:	28800017 	ldw	r2,0(r5)
    cf30:	10c00003 	ldbu	r3,0(r2)
    cf34:	193ff01e 	bne	r3,r4,cef8 <__alt_data_end+0xfffecef8>
    cf38:	280d883a 	mov	r6,r5
    cf3c:	180b883a 	mov	r5,r3
    cf40:	00000706 	br	cf60 <putc+0xb0>
    cf44:	8009883a 	mov	r4,r16
    cf48:	d9400015 	stw	r5,0(sp)
    cf4c:	00052a00 	call	52a0 <__sinit>
    cf50:	d9400017 	ldw	r5,0(sp)
    cf54:	003fe106 	br	cedc <__alt_data_end+0xfffecedc>
    cf58:	280d883a 	mov	r6,r5
    cf5c:	880b883a 	mov	r5,r17
    cf60:	8009883a 	mov	r4,r16
    cf64:	dfc00317 	ldw	ra,12(sp)
    cf68:	dc400217 	ldw	r17,8(sp)
    cf6c:	dc000117 	ldw	r16,4(sp)
    cf70:	dec00404 	addi	sp,sp,16
    cf74:	000ed841 	jmpi	ed84 <__swbuf_r>

0000cf78 <_read_r>:
    cf78:	defffd04 	addi	sp,sp,-12
    cf7c:	2805883a 	mov	r2,r5
    cf80:	dc000015 	stw	r16,0(sp)
    cf84:	04000074 	movhi	r16,1
    cf88:	dc400115 	stw	r17,4(sp)
    cf8c:	300b883a 	mov	r5,r6
    cf90:	8418ea04 	addi	r16,r16,25512
    cf94:	2023883a 	mov	r17,r4
    cf98:	380d883a 	mov	r6,r7
    cf9c:	1009883a 	mov	r4,r2
    cfa0:	dfc00215 	stw	ra,8(sp)
    cfa4:	80000015 	stw	zero,0(r16)
    cfa8:	0010ae40 	call	10ae4 <read>
    cfac:	00ffffc4 	movi	r3,-1
    cfb0:	10c00526 	beq	r2,r3,cfc8 <_read_r+0x50>
    cfb4:	dfc00217 	ldw	ra,8(sp)
    cfb8:	dc400117 	ldw	r17,4(sp)
    cfbc:	dc000017 	ldw	r16,0(sp)
    cfc0:	dec00304 	addi	sp,sp,12
    cfc4:	f800283a 	ret
    cfc8:	80c00017 	ldw	r3,0(r16)
    cfcc:	183ff926 	beq	r3,zero,cfb4 <__alt_data_end+0xfffecfb4>
    cfd0:	88c00015 	stw	r3,0(r17)
    cfd4:	003ff706 	br	cfb4 <__alt_data_end+0xfffecfb4>

0000cfd8 <_realloc_r>:
    cfd8:	defff604 	addi	sp,sp,-40
    cfdc:	dc800215 	stw	r18,8(sp)
    cfe0:	dfc00915 	stw	ra,36(sp)
    cfe4:	df000815 	stw	fp,32(sp)
    cfe8:	ddc00715 	stw	r23,28(sp)
    cfec:	dd800615 	stw	r22,24(sp)
    cff0:	dd400515 	stw	r21,20(sp)
    cff4:	dd000415 	stw	r20,16(sp)
    cff8:	dcc00315 	stw	r19,12(sp)
    cffc:	dc400115 	stw	r17,4(sp)
    d000:	dc000015 	stw	r16,0(sp)
    d004:	3025883a 	mov	r18,r6
    d008:	2800b726 	beq	r5,zero,d2e8 <_realloc_r+0x310>
    d00c:	282b883a 	mov	r21,r5
    d010:	2029883a 	mov	r20,r4
    d014:	00107dc0 	call	107dc <__malloc_lock>
    d018:	a8bfff17 	ldw	r2,-4(r21)
    d01c:	043fff04 	movi	r16,-4
    d020:	90c002c4 	addi	r3,r18,11
    d024:	01000584 	movi	r4,22
    d028:	acfffe04 	addi	r19,r21,-8
    d02c:	1420703a 	and	r16,r2,r16
    d030:	20c0332e 	bgeu	r4,r3,d100 <_realloc_r+0x128>
    d034:	047ffe04 	movi	r17,-8
    d038:	1c62703a 	and	r17,r3,r17
    d03c:	8807883a 	mov	r3,r17
    d040:	88005816 	blt	r17,zero,d1a4 <_realloc_r+0x1cc>
    d044:	8c805736 	bltu	r17,r18,d1a4 <_realloc_r+0x1cc>
    d048:	80c0300e 	bge	r16,r3,d10c <_realloc_r+0x134>
    d04c:	07000074 	movhi	fp,1
    d050:	e70c7704 	addi	fp,fp,12764
    d054:	e1c00217 	ldw	r7,8(fp)
    d058:	9c09883a 	add	r4,r19,r16
    d05c:	22000117 	ldw	r8,4(r4)
    d060:	21c06326 	beq	r4,r7,d1f0 <_realloc_r+0x218>
    d064:	017fff84 	movi	r5,-2
    d068:	414a703a 	and	r5,r8,r5
    d06c:	214b883a 	add	r5,r4,r5
    d070:	29800117 	ldw	r6,4(r5)
    d074:	3180004c 	andi	r6,r6,1
    d078:	30003f26 	beq	r6,zero,d178 <_realloc_r+0x1a0>
    d07c:	1080004c 	andi	r2,r2,1
    d080:	10008326 	beq	r2,zero,d290 <_realloc_r+0x2b8>
    d084:	900b883a 	mov	r5,r18
    d088:	a009883a 	mov	r4,r20
    d08c:	00062c00 	call	62c0 <_malloc_r>
    d090:	1025883a 	mov	r18,r2
    d094:	10011e26 	beq	r2,zero,d510 <_realloc_r+0x538>
    d098:	a93fff17 	ldw	r4,-4(r21)
    d09c:	10fffe04 	addi	r3,r2,-8
    d0a0:	00bfff84 	movi	r2,-2
    d0a4:	2084703a 	and	r2,r4,r2
    d0a8:	9885883a 	add	r2,r19,r2
    d0ac:	1880ee26 	beq	r3,r2,d468 <_realloc_r+0x490>
    d0b0:	81bfff04 	addi	r6,r16,-4
    d0b4:	00800904 	movi	r2,36
    d0b8:	1180b836 	bltu	r2,r6,d39c <_realloc_r+0x3c4>
    d0bc:	00c004c4 	movi	r3,19
    d0c0:	19809636 	bltu	r3,r6,d31c <_realloc_r+0x344>
    d0c4:	9005883a 	mov	r2,r18
    d0c8:	a807883a 	mov	r3,r21
    d0cc:	19000017 	ldw	r4,0(r3)
    d0d0:	11000015 	stw	r4,0(r2)
    d0d4:	19000117 	ldw	r4,4(r3)
    d0d8:	11000115 	stw	r4,4(r2)
    d0dc:	18c00217 	ldw	r3,8(r3)
    d0e0:	10c00215 	stw	r3,8(r2)
    d0e4:	a80b883a 	mov	r5,r21
    d0e8:	a009883a 	mov	r4,r20
    d0ec:	00057900 	call	5790 <_free_r>
    d0f0:	a009883a 	mov	r4,r20
    d0f4:	00108000 	call	10800 <__malloc_unlock>
    d0f8:	9005883a 	mov	r2,r18
    d0fc:	00001206 	br	d148 <_realloc_r+0x170>
    d100:	00c00404 	movi	r3,16
    d104:	1823883a 	mov	r17,r3
    d108:	003fce06 	br	d044 <__alt_data_end+0xfffed044>
    d10c:	a825883a 	mov	r18,r21
    d110:	8445c83a 	sub	r2,r16,r17
    d114:	00c003c4 	movi	r3,15
    d118:	18802636 	bltu	r3,r2,d1b4 <_realloc_r+0x1dc>
    d11c:	99800117 	ldw	r6,4(r19)
    d120:	9c07883a 	add	r3,r19,r16
    d124:	3180004c 	andi	r6,r6,1
    d128:	3420b03a 	or	r16,r6,r16
    d12c:	9c000115 	stw	r16,4(r19)
    d130:	18800117 	ldw	r2,4(r3)
    d134:	10800054 	ori	r2,r2,1
    d138:	18800115 	stw	r2,4(r3)
    d13c:	a009883a 	mov	r4,r20
    d140:	00108000 	call	10800 <__malloc_unlock>
    d144:	9005883a 	mov	r2,r18
    d148:	dfc00917 	ldw	ra,36(sp)
    d14c:	df000817 	ldw	fp,32(sp)
    d150:	ddc00717 	ldw	r23,28(sp)
    d154:	dd800617 	ldw	r22,24(sp)
    d158:	dd400517 	ldw	r21,20(sp)
    d15c:	dd000417 	ldw	r20,16(sp)
    d160:	dcc00317 	ldw	r19,12(sp)
    d164:	dc800217 	ldw	r18,8(sp)
    d168:	dc400117 	ldw	r17,4(sp)
    d16c:	dc000017 	ldw	r16,0(sp)
    d170:	dec00a04 	addi	sp,sp,40
    d174:	f800283a 	ret
    d178:	017fff04 	movi	r5,-4
    d17c:	414a703a 	and	r5,r8,r5
    d180:	814d883a 	add	r6,r16,r5
    d184:	30c01f16 	blt	r6,r3,d204 <_realloc_r+0x22c>
    d188:	20800317 	ldw	r2,12(r4)
    d18c:	20c00217 	ldw	r3,8(r4)
    d190:	a825883a 	mov	r18,r21
    d194:	3021883a 	mov	r16,r6
    d198:	18800315 	stw	r2,12(r3)
    d19c:	10c00215 	stw	r3,8(r2)
    d1a0:	003fdb06 	br	d110 <__alt_data_end+0xfffed110>
    d1a4:	00800304 	movi	r2,12
    d1a8:	a0800015 	stw	r2,0(r20)
    d1ac:	0005883a 	mov	r2,zero
    d1b0:	003fe506 	br	d148 <__alt_data_end+0xfffed148>
    d1b4:	98c00117 	ldw	r3,4(r19)
    d1b8:	9c4b883a 	add	r5,r19,r17
    d1bc:	11000054 	ori	r4,r2,1
    d1c0:	18c0004c 	andi	r3,r3,1
    d1c4:	1c62b03a 	or	r17,r3,r17
    d1c8:	9c400115 	stw	r17,4(r19)
    d1cc:	29000115 	stw	r4,4(r5)
    d1d0:	2885883a 	add	r2,r5,r2
    d1d4:	10c00117 	ldw	r3,4(r2)
    d1d8:	29400204 	addi	r5,r5,8
    d1dc:	a009883a 	mov	r4,r20
    d1e0:	18c00054 	ori	r3,r3,1
    d1e4:	10c00115 	stw	r3,4(r2)
    d1e8:	00057900 	call	5790 <_free_r>
    d1ec:	003fd306 	br	d13c <__alt_data_end+0xfffed13c>
    d1f0:	017fff04 	movi	r5,-4
    d1f4:	414a703a 	and	r5,r8,r5
    d1f8:	89800404 	addi	r6,r17,16
    d1fc:	8151883a 	add	r8,r16,r5
    d200:	4180590e 	bge	r8,r6,d368 <_realloc_r+0x390>
    d204:	1080004c 	andi	r2,r2,1
    d208:	103f9e1e 	bne	r2,zero,d084 <__alt_data_end+0xfffed084>
    d20c:	adbffe17 	ldw	r22,-8(r21)
    d210:	00bfff04 	movi	r2,-4
    d214:	9dadc83a 	sub	r22,r19,r22
    d218:	b1800117 	ldw	r6,4(r22)
    d21c:	3084703a 	and	r2,r6,r2
    d220:	20002026 	beq	r4,zero,d2a4 <_realloc_r+0x2cc>
    d224:	80af883a 	add	r23,r16,r2
    d228:	b96f883a 	add	r23,r23,r5
    d22c:	21c05f26 	beq	r4,r7,d3ac <_realloc_r+0x3d4>
    d230:	b8c01c16 	blt	r23,r3,d2a4 <_realloc_r+0x2cc>
    d234:	20800317 	ldw	r2,12(r4)
    d238:	20c00217 	ldw	r3,8(r4)
    d23c:	81bfff04 	addi	r6,r16,-4
    d240:	01000904 	movi	r4,36
    d244:	18800315 	stw	r2,12(r3)
    d248:	10c00215 	stw	r3,8(r2)
    d24c:	b0c00217 	ldw	r3,8(r22)
    d250:	b0800317 	ldw	r2,12(r22)
    d254:	b4800204 	addi	r18,r22,8
    d258:	18800315 	stw	r2,12(r3)
    d25c:	10c00215 	stw	r3,8(r2)
    d260:	21801b36 	bltu	r4,r6,d2d0 <_realloc_r+0x2f8>
    d264:	008004c4 	movi	r2,19
    d268:	1180352e 	bgeu	r2,r6,d340 <_realloc_r+0x368>
    d26c:	a8800017 	ldw	r2,0(r21)
    d270:	b0800215 	stw	r2,8(r22)
    d274:	a8800117 	ldw	r2,4(r21)
    d278:	b0800315 	stw	r2,12(r22)
    d27c:	008006c4 	movi	r2,27
    d280:	11807f36 	bltu	r2,r6,d480 <_realloc_r+0x4a8>
    d284:	b0800404 	addi	r2,r22,16
    d288:	ad400204 	addi	r21,r21,8
    d28c:	00002d06 	br	d344 <_realloc_r+0x36c>
    d290:	adbffe17 	ldw	r22,-8(r21)
    d294:	00bfff04 	movi	r2,-4
    d298:	9dadc83a 	sub	r22,r19,r22
    d29c:	b1000117 	ldw	r4,4(r22)
    d2a0:	2084703a 	and	r2,r4,r2
    d2a4:	b03f7726 	beq	r22,zero,d084 <__alt_data_end+0xfffed084>
    d2a8:	80af883a 	add	r23,r16,r2
    d2ac:	b8ff7516 	blt	r23,r3,d084 <__alt_data_end+0xfffed084>
    d2b0:	b0800317 	ldw	r2,12(r22)
    d2b4:	b0c00217 	ldw	r3,8(r22)
    d2b8:	81bfff04 	addi	r6,r16,-4
    d2bc:	01000904 	movi	r4,36
    d2c0:	18800315 	stw	r2,12(r3)
    d2c4:	10c00215 	stw	r3,8(r2)
    d2c8:	b4800204 	addi	r18,r22,8
    d2cc:	21bfe52e 	bgeu	r4,r6,d264 <__alt_data_end+0xfffed264>
    d2d0:	a80b883a 	mov	r5,r21
    d2d4:	9009883a 	mov	r4,r18
    d2d8:	000bbfc0 	call	bbfc <memmove>
    d2dc:	b821883a 	mov	r16,r23
    d2e0:	b027883a 	mov	r19,r22
    d2e4:	003f8a06 	br	d110 <__alt_data_end+0xfffed110>
    d2e8:	300b883a 	mov	r5,r6
    d2ec:	dfc00917 	ldw	ra,36(sp)
    d2f0:	df000817 	ldw	fp,32(sp)
    d2f4:	ddc00717 	ldw	r23,28(sp)
    d2f8:	dd800617 	ldw	r22,24(sp)
    d2fc:	dd400517 	ldw	r21,20(sp)
    d300:	dd000417 	ldw	r20,16(sp)
    d304:	dcc00317 	ldw	r19,12(sp)
    d308:	dc800217 	ldw	r18,8(sp)
    d30c:	dc400117 	ldw	r17,4(sp)
    d310:	dc000017 	ldw	r16,0(sp)
    d314:	dec00a04 	addi	sp,sp,40
    d318:	00062c01 	jmpi	62c0 <_malloc_r>
    d31c:	a8c00017 	ldw	r3,0(r21)
    d320:	90c00015 	stw	r3,0(r18)
    d324:	a8c00117 	ldw	r3,4(r21)
    d328:	90c00115 	stw	r3,4(r18)
    d32c:	00c006c4 	movi	r3,27
    d330:	19804536 	bltu	r3,r6,d448 <_realloc_r+0x470>
    d334:	90800204 	addi	r2,r18,8
    d338:	a8c00204 	addi	r3,r21,8
    d33c:	003f6306 	br	d0cc <__alt_data_end+0xfffed0cc>
    d340:	9005883a 	mov	r2,r18
    d344:	a8c00017 	ldw	r3,0(r21)
    d348:	b821883a 	mov	r16,r23
    d34c:	b027883a 	mov	r19,r22
    d350:	10c00015 	stw	r3,0(r2)
    d354:	a8c00117 	ldw	r3,4(r21)
    d358:	10c00115 	stw	r3,4(r2)
    d35c:	a8c00217 	ldw	r3,8(r21)
    d360:	10c00215 	stw	r3,8(r2)
    d364:	003f6a06 	br	d110 <__alt_data_end+0xfffed110>
    d368:	9c67883a 	add	r19,r19,r17
    d36c:	4445c83a 	sub	r2,r8,r17
    d370:	e4c00215 	stw	r19,8(fp)
    d374:	10800054 	ori	r2,r2,1
    d378:	98800115 	stw	r2,4(r19)
    d37c:	a8bfff17 	ldw	r2,-4(r21)
    d380:	a009883a 	mov	r4,r20
    d384:	1080004c 	andi	r2,r2,1
    d388:	1462b03a 	or	r17,r2,r17
    d38c:	ac7fff15 	stw	r17,-4(r21)
    d390:	00108000 	call	10800 <__malloc_unlock>
    d394:	a805883a 	mov	r2,r21
    d398:	003f6b06 	br	d148 <__alt_data_end+0xfffed148>
    d39c:	a80b883a 	mov	r5,r21
    d3a0:	9009883a 	mov	r4,r18
    d3a4:	000bbfc0 	call	bbfc <memmove>
    d3a8:	003f4e06 	br	d0e4 <__alt_data_end+0xfffed0e4>
    d3ac:	89000404 	addi	r4,r17,16
    d3b0:	b93fbc16 	blt	r23,r4,d2a4 <__alt_data_end+0xfffed2a4>
    d3b4:	b0800317 	ldw	r2,12(r22)
    d3b8:	b0c00217 	ldw	r3,8(r22)
    d3bc:	81bfff04 	addi	r6,r16,-4
    d3c0:	01000904 	movi	r4,36
    d3c4:	18800315 	stw	r2,12(r3)
    d3c8:	10c00215 	stw	r3,8(r2)
    d3cc:	b4800204 	addi	r18,r22,8
    d3d0:	21804336 	bltu	r4,r6,d4e0 <_realloc_r+0x508>
    d3d4:	008004c4 	movi	r2,19
    d3d8:	11803f2e 	bgeu	r2,r6,d4d8 <_realloc_r+0x500>
    d3dc:	a8800017 	ldw	r2,0(r21)
    d3e0:	b0800215 	stw	r2,8(r22)
    d3e4:	a8800117 	ldw	r2,4(r21)
    d3e8:	b0800315 	stw	r2,12(r22)
    d3ec:	008006c4 	movi	r2,27
    d3f0:	11803f36 	bltu	r2,r6,d4f0 <_realloc_r+0x518>
    d3f4:	b0800404 	addi	r2,r22,16
    d3f8:	ad400204 	addi	r21,r21,8
    d3fc:	a8c00017 	ldw	r3,0(r21)
    d400:	10c00015 	stw	r3,0(r2)
    d404:	a8c00117 	ldw	r3,4(r21)
    d408:	10c00115 	stw	r3,4(r2)
    d40c:	a8c00217 	ldw	r3,8(r21)
    d410:	10c00215 	stw	r3,8(r2)
    d414:	b447883a 	add	r3,r22,r17
    d418:	bc45c83a 	sub	r2,r23,r17
    d41c:	e0c00215 	stw	r3,8(fp)
    d420:	10800054 	ori	r2,r2,1
    d424:	18800115 	stw	r2,4(r3)
    d428:	b0800117 	ldw	r2,4(r22)
    d42c:	a009883a 	mov	r4,r20
    d430:	1080004c 	andi	r2,r2,1
    d434:	1462b03a 	or	r17,r2,r17
    d438:	b4400115 	stw	r17,4(r22)
    d43c:	00108000 	call	10800 <__malloc_unlock>
    d440:	9005883a 	mov	r2,r18
    d444:	003f4006 	br	d148 <__alt_data_end+0xfffed148>
    d448:	a8c00217 	ldw	r3,8(r21)
    d44c:	90c00215 	stw	r3,8(r18)
    d450:	a8c00317 	ldw	r3,12(r21)
    d454:	90c00315 	stw	r3,12(r18)
    d458:	30801126 	beq	r6,r2,d4a0 <_realloc_r+0x4c8>
    d45c:	90800404 	addi	r2,r18,16
    d460:	a8c00404 	addi	r3,r21,16
    d464:	003f1906 	br	d0cc <__alt_data_end+0xfffed0cc>
    d468:	90ffff17 	ldw	r3,-4(r18)
    d46c:	00bfff04 	movi	r2,-4
    d470:	a825883a 	mov	r18,r21
    d474:	1884703a 	and	r2,r3,r2
    d478:	80a1883a 	add	r16,r16,r2
    d47c:	003f2406 	br	d110 <__alt_data_end+0xfffed110>
    d480:	a8800217 	ldw	r2,8(r21)
    d484:	b0800415 	stw	r2,16(r22)
    d488:	a8800317 	ldw	r2,12(r21)
    d48c:	b0800515 	stw	r2,20(r22)
    d490:	31000a26 	beq	r6,r4,d4bc <_realloc_r+0x4e4>
    d494:	b0800604 	addi	r2,r22,24
    d498:	ad400404 	addi	r21,r21,16
    d49c:	003fa906 	br	d344 <__alt_data_end+0xfffed344>
    d4a0:	a9000417 	ldw	r4,16(r21)
    d4a4:	90800604 	addi	r2,r18,24
    d4a8:	a8c00604 	addi	r3,r21,24
    d4ac:	91000415 	stw	r4,16(r18)
    d4b0:	a9000517 	ldw	r4,20(r21)
    d4b4:	91000515 	stw	r4,20(r18)
    d4b8:	003f0406 	br	d0cc <__alt_data_end+0xfffed0cc>
    d4bc:	a8c00417 	ldw	r3,16(r21)
    d4c0:	ad400604 	addi	r21,r21,24
    d4c4:	b0800804 	addi	r2,r22,32
    d4c8:	b0c00615 	stw	r3,24(r22)
    d4cc:	a8ffff17 	ldw	r3,-4(r21)
    d4d0:	b0c00715 	stw	r3,28(r22)
    d4d4:	003f9b06 	br	d344 <__alt_data_end+0xfffed344>
    d4d8:	9005883a 	mov	r2,r18
    d4dc:	003fc706 	br	d3fc <__alt_data_end+0xfffed3fc>
    d4e0:	a80b883a 	mov	r5,r21
    d4e4:	9009883a 	mov	r4,r18
    d4e8:	000bbfc0 	call	bbfc <memmove>
    d4ec:	003fc906 	br	d414 <__alt_data_end+0xfffed414>
    d4f0:	a8800217 	ldw	r2,8(r21)
    d4f4:	b0800415 	stw	r2,16(r22)
    d4f8:	a8800317 	ldw	r2,12(r21)
    d4fc:	b0800515 	stw	r2,20(r22)
    d500:	31000726 	beq	r6,r4,d520 <_realloc_r+0x548>
    d504:	b0800604 	addi	r2,r22,24
    d508:	ad400404 	addi	r21,r21,16
    d50c:	003fbb06 	br	d3fc <__alt_data_end+0xfffed3fc>
    d510:	a009883a 	mov	r4,r20
    d514:	00108000 	call	10800 <__malloc_unlock>
    d518:	0005883a 	mov	r2,zero
    d51c:	003f0a06 	br	d148 <__alt_data_end+0xfffed148>
    d520:	a8c00417 	ldw	r3,16(r21)
    d524:	ad400604 	addi	r21,r21,24
    d528:	b0800804 	addi	r2,r22,32
    d52c:	b0c00615 	stw	r3,24(r22)
    d530:	a8ffff17 	ldw	r3,-4(r21)
    d534:	b0c00715 	stw	r3,28(r22)
    d538:	003fb006 	br	d3fc <__alt_data_end+0xfffed3fc>

0000d53c <__fpclassifyd>:
    d53c:	00a00034 	movhi	r2,32768
    d540:	10bfffc4 	addi	r2,r2,-1
    d544:	2884703a 	and	r2,r5,r2
    d548:	10000726 	beq	r2,zero,d568 <__fpclassifyd+0x2c>
    d54c:	00fffc34 	movhi	r3,65520
    d550:	019ff834 	movhi	r6,32736
    d554:	28c7883a 	add	r3,r5,r3
    d558:	31bfffc4 	addi	r6,r6,-1
    d55c:	30c00536 	bltu	r6,r3,d574 <__fpclassifyd+0x38>
    d560:	00800104 	movi	r2,4
    d564:	f800283a 	ret
    d568:	2000021e 	bne	r4,zero,d574 <__fpclassifyd+0x38>
    d56c:	00800084 	movi	r2,2
    d570:	f800283a 	ret
    d574:	00dffc34 	movhi	r3,32752
    d578:	019ff834 	movhi	r6,32736
    d57c:	28cb883a 	add	r5,r5,r3
    d580:	31bfffc4 	addi	r6,r6,-1
    d584:	317ff62e 	bgeu	r6,r5,d560 <__alt_data_end+0xfffed560>
    d588:	01400434 	movhi	r5,16
    d58c:	297fffc4 	addi	r5,r5,-1
    d590:	28800236 	bltu	r5,r2,d59c <__fpclassifyd+0x60>
    d594:	008000c4 	movi	r2,3
    d598:	f800283a 	ret
    d59c:	10c00226 	beq	r2,r3,d5a8 <__fpclassifyd+0x6c>
    d5a0:	0005883a 	mov	r2,zero
    d5a4:	f800283a 	ret
    d5a8:	2005003a 	cmpeq	r2,r4,zero
    d5ac:	f800283a 	ret

0000d5b0 <strcmp>:
    d5b0:	2144b03a 	or	r2,r4,r5
    d5b4:	108000cc 	andi	r2,r2,3
    d5b8:	1000171e 	bne	r2,zero,d618 <strcmp+0x68>
    d5bc:	20800017 	ldw	r2,0(r4)
    d5c0:	28c00017 	ldw	r3,0(r5)
    d5c4:	10c0141e 	bne	r2,r3,d618 <strcmp+0x68>
    d5c8:	027fbff4 	movhi	r9,65279
    d5cc:	4a7fbfc4 	addi	r9,r9,-257
    d5d0:	0086303a 	nor	r3,zero,r2
    d5d4:	02202074 	movhi	r8,32897
    d5d8:	1245883a 	add	r2,r2,r9
    d5dc:	42202004 	addi	r8,r8,-32640
    d5e0:	10c4703a 	and	r2,r2,r3
    d5e4:	1204703a 	and	r2,r2,r8
    d5e8:	10000226 	beq	r2,zero,d5f4 <strcmp+0x44>
    d5ec:	00002306 	br	d67c <strcmp+0xcc>
    d5f0:	1000221e 	bne	r2,zero,d67c <strcmp+0xcc>
    d5f4:	21000104 	addi	r4,r4,4
    d5f8:	20c00017 	ldw	r3,0(r4)
    d5fc:	29400104 	addi	r5,r5,4
    d600:	29800017 	ldw	r6,0(r5)
    d604:	1a4f883a 	add	r7,r3,r9
    d608:	00c4303a 	nor	r2,zero,r3
    d60c:	3884703a 	and	r2,r7,r2
    d610:	1204703a 	and	r2,r2,r8
    d614:	19bff626 	beq	r3,r6,d5f0 <__alt_data_end+0xfffed5f0>
    d618:	20800003 	ldbu	r2,0(r4)
    d61c:	10c03fcc 	andi	r3,r2,255
    d620:	18c0201c 	xori	r3,r3,128
    d624:	18ffe004 	addi	r3,r3,-128
    d628:	18000c26 	beq	r3,zero,d65c <strcmp+0xac>
    d62c:	29800007 	ldb	r6,0(r5)
    d630:	19800326 	beq	r3,r6,d640 <strcmp+0x90>
    d634:	00001306 	br	d684 <strcmp+0xd4>
    d638:	29800007 	ldb	r6,0(r5)
    d63c:	11800b1e 	bne	r2,r6,d66c <strcmp+0xbc>
    d640:	21000044 	addi	r4,r4,1
    d644:	20c00003 	ldbu	r3,0(r4)
    d648:	29400044 	addi	r5,r5,1
    d64c:	18803fcc 	andi	r2,r3,255
    d650:	1080201c 	xori	r2,r2,128
    d654:	10bfe004 	addi	r2,r2,-128
    d658:	103ff71e 	bne	r2,zero,d638 <__alt_data_end+0xfffed638>
    d65c:	0007883a 	mov	r3,zero
    d660:	28800003 	ldbu	r2,0(r5)
    d664:	1885c83a 	sub	r2,r3,r2
    d668:	f800283a 	ret
    d66c:	28800003 	ldbu	r2,0(r5)
    d670:	18c03fcc 	andi	r3,r3,255
    d674:	1885c83a 	sub	r2,r3,r2
    d678:	f800283a 	ret
    d67c:	0005883a 	mov	r2,zero
    d680:	f800283a 	ret
    d684:	10c03fcc 	andi	r3,r2,255
    d688:	003ff506 	br	d660 <__alt_data_end+0xfffed660>

0000d68c <__sprint_r.part.0>:
    d68c:	28801917 	ldw	r2,100(r5)
    d690:	defff604 	addi	sp,sp,-40
    d694:	dd400515 	stw	r21,20(sp)
    d698:	dfc00915 	stw	ra,36(sp)
    d69c:	df000815 	stw	fp,32(sp)
    d6a0:	ddc00715 	stw	r23,28(sp)
    d6a4:	dd800615 	stw	r22,24(sp)
    d6a8:	dd000415 	stw	r20,16(sp)
    d6ac:	dcc00315 	stw	r19,12(sp)
    d6b0:	dc800215 	stw	r18,8(sp)
    d6b4:	dc400115 	stw	r17,4(sp)
    d6b8:	dc000015 	stw	r16,0(sp)
    d6bc:	1088000c 	andi	r2,r2,8192
    d6c0:	302b883a 	mov	r21,r6
    d6c4:	10002e26 	beq	r2,zero,d780 <__sprint_r.part.0+0xf4>
    d6c8:	30800217 	ldw	r2,8(r6)
    d6cc:	35800017 	ldw	r22,0(r6)
    d6d0:	10002926 	beq	r2,zero,d778 <__sprint_r.part.0+0xec>
    d6d4:	2827883a 	mov	r19,r5
    d6d8:	2029883a 	mov	r20,r4
    d6dc:	b5c00104 	addi	r23,r22,4
    d6e0:	04bfffc4 	movi	r18,-1
    d6e4:	bc400017 	ldw	r17,0(r23)
    d6e8:	b4000017 	ldw	r16,0(r22)
    d6ec:	0039883a 	mov	fp,zero
    d6f0:	8822d0ba 	srli	r17,r17,2
    d6f4:	8800031e 	bne	r17,zero,d704 <__sprint_r.part.0+0x78>
    d6f8:	00001806 	br	d75c <__sprint_r.part.0+0xd0>
    d6fc:	84000104 	addi	r16,r16,4
    d700:	8f001526 	beq	r17,fp,d758 <__sprint_r.part.0+0xcc>
    d704:	81400017 	ldw	r5,0(r16)
    d708:	980d883a 	mov	r6,r19
    d70c:	a009883a 	mov	r4,r20
    d710:	000f11c0 	call	f11c <_fputwc_r>
    d714:	e7000044 	addi	fp,fp,1
    d718:	14bff81e 	bne	r2,r18,d6fc <__alt_data_end+0xfffed6fc>
    d71c:	9005883a 	mov	r2,r18
    d720:	a8000215 	stw	zero,8(r21)
    d724:	a8000115 	stw	zero,4(r21)
    d728:	dfc00917 	ldw	ra,36(sp)
    d72c:	df000817 	ldw	fp,32(sp)
    d730:	ddc00717 	ldw	r23,28(sp)
    d734:	dd800617 	ldw	r22,24(sp)
    d738:	dd400517 	ldw	r21,20(sp)
    d73c:	dd000417 	ldw	r20,16(sp)
    d740:	dcc00317 	ldw	r19,12(sp)
    d744:	dc800217 	ldw	r18,8(sp)
    d748:	dc400117 	ldw	r17,4(sp)
    d74c:	dc000017 	ldw	r16,0(sp)
    d750:	dec00a04 	addi	sp,sp,40
    d754:	f800283a 	ret
    d758:	a8800217 	ldw	r2,8(r21)
    d75c:	8c63883a 	add	r17,r17,r17
    d760:	8c63883a 	add	r17,r17,r17
    d764:	1445c83a 	sub	r2,r2,r17
    d768:	a8800215 	stw	r2,8(r21)
    d76c:	b5800204 	addi	r22,r22,8
    d770:	bdc00204 	addi	r23,r23,8
    d774:	103fdb1e 	bne	r2,zero,d6e4 <__alt_data_end+0xfffed6e4>
    d778:	0005883a 	mov	r2,zero
    d77c:	003fe806 	br	d720 <__alt_data_end+0xfffed720>
    d780:	000b4c00 	call	b4c0 <__sfvwrite_r>
    d784:	003fe606 	br	d720 <__alt_data_end+0xfffed720>

0000d788 <__sprint_r>:
    d788:	30c00217 	ldw	r3,8(r6)
    d78c:	18000126 	beq	r3,zero,d794 <__sprint_r+0xc>
    d790:	000d68c1 	jmpi	d68c <__sprint_r.part.0>
    d794:	30000115 	stw	zero,4(r6)
    d798:	0005883a 	mov	r2,zero
    d79c:	f800283a 	ret

0000d7a0 <___vfiprintf_internal_r>:
    d7a0:	deffca04 	addi	sp,sp,-216
    d7a4:	dd403115 	stw	r21,196(sp)
    d7a8:	dfc03515 	stw	ra,212(sp)
    d7ac:	df003415 	stw	fp,208(sp)
    d7b0:	ddc03315 	stw	r23,204(sp)
    d7b4:	dd803215 	stw	r22,200(sp)
    d7b8:	dd003015 	stw	r20,192(sp)
    d7bc:	dcc02f15 	stw	r19,188(sp)
    d7c0:	dc802e15 	stw	r18,184(sp)
    d7c4:	dc402d15 	stw	r17,180(sp)
    d7c8:	dc002c15 	stw	r16,176(sp)
    d7cc:	d9002115 	stw	r4,132(sp)
    d7d0:	d9402015 	stw	r5,128(sp)
    d7d4:	d9c02215 	stw	r7,136(sp)
    d7d8:	302b883a 	mov	r21,r6
    d7dc:	20000226 	beq	r4,zero,d7e8 <___vfiprintf_internal_r+0x48>
    d7e0:	20800e17 	ldw	r2,56(r4)
    d7e4:	1000cf26 	beq	r2,zero,db24 <___vfiprintf_internal_r+0x384>
    d7e8:	d8c02017 	ldw	r3,128(sp)
    d7ec:	1880030b 	ldhu	r2,12(r3)
    d7f0:	10c8000c 	andi	r3,r2,8192
    d7f4:	1800071e 	bne	r3,zero,d814 <___vfiprintf_internal_r+0x74>
    d7f8:	d9402017 	ldw	r5,128(sp)
    d7fc:	00f7ffc4 	movi	r3,-8193
    d800:	10880014 	ori	r2,r2,8192
    d804:	29001917 	ldw	r4,100(r5)
    d808:	2880030d 	sth	r2,12(r5)
    d80c:	20c6703a 	and	r3,r4,r3
    d810:	28c01915 	stw	r3,100(r5)
    d814:	10c0020c 	andi	r3,r2,8
    d818:	1800a526 	beq	r3,zero,dab0 <___vfiprintf_internal_r+0x310>
    d81c:	d9002017 	ldw	r4,128(sp)
    d820:	20c00417 	ldw	r3,16(r4)
    d824:	1800a226 	beq	r3,zero,dab0 <___vfiprintf_internal_r+0x310>
    d828:	1080068c 	andi	r2,r2,26
    d82c:	00c00284 	movi	r3,10
    d830:	10c0a826 	beq	r2,r3,dad4 <___vfiprintf_internal_r+0x334>
    d834:	d9001a04 	addi	r4,sp,104
    d838:	d94019c4 	addi	r5,sp,103
    d83c:	04800074 	movhi	r18,1
    d840:	2145c83a 	sub	r2,r4,r5
    d844:	948b5904 	addi	r18,r18,11620
    d848:	d9001e15 	stw	r4,120(sp)
    d84c:	d9401f15 	stw	r5,124(sp)
    d850:	dec01a15 	stw	sp,104(sp)
    d854:	d8001c15 	stw	zero,112(sp)
    d858:	d8001b15 	stw	zero,108(sp)
    d85c:	d811883a 	mov	r8,sp
    d860:	d8002615 	stw	zero,152(sp)
    d864:	d8002415 	stw	zero,144(sp)
    d868:	d8802815 	stw	r2,160(sp)
    d86c:	a82d883a 	mov	r22,r21
    d870:	b0800007 	ldb	r2,0(r22)
    d874:	10040d26 	beq	r2,zero,e8ac <___vfiprintf_internal_r+0x110c>
    d878:	00c00944 	movi	r3,37
    d87c:	b029883a 	mov	r20,r22
    d880:	10c0021e 	bne	r2,r3,d88c <___vfiprintf_internal_r+0xec>
    d884:	00001606 	br	d8e0 <___vfiprintf_internal_r+0x140>
    d888:	10c00326 	beq	r2,r3,d898 <___vfiprintf_internal_r+0xf8>
    d88c:	a5000044 	addi	r20,r20,1
    d890:	a0800007 	ldb	r2,0(r20)
    d894:	103ffc1e 	bne	r2,zero,d888 <__alt_data_end+0xfffed888>
    d898:	a5a1c83a 	sub	r16,r20,r22
    d89c:	80001026 	beq	r16,zero,d8e0 <___vfiprintf_internal_r+0x140>
    d8a0:	d8c01c17 	ldw	r3,112(sp)
    d8a4:	d8801b17 	ldw	r2,108(sp)
    d8a8:	45800015 	stw	r22,0(r8)
    d8ac:	80c7883a 	add	r3,r16,r3
    d8b0:	10800044 	addi	r2,r2,1
    d8b4:	44000115 	stw	r16,4(r8)
    d8b8:	d8c01c15 	stw	r3,112(sp)
    d8bc:	d8801b15 	stw	r2,108(sp)
    d8c0:	010001c4 	movi	r4,7
    d8c4:	2080750e 	bge	r4,r2,da9c <___vfiprintf_internal_r+0x2fc>
    d8c8:	1803951e 	bne	r3,zero,e720 <___vfiprintf_internal_r+0xf80>
    d8cc:	d8c02417 	ldw	r3,144(sp)
    d8d0:	d8001b15 	stw	zero,108(sp)
    d8d4:	d811883a 	mov	r8,sp
    d8d8:	1c07883a 	add	r3,r3,r16
    d8dc:	d8c02415 	stw	r3,144(sp)
    d8e0:	a0800007 	ldb	r2,0(r20)
    d8e4:	1002e026 	beq	r2,zero,e468 <___vfiprintf_internal_r+0xcc8>
    d8e8:	a5800044 	addi	r22,r20,1
    d8ec:	a0c00047 	ldb	r3,1(r20)
    d8f0:	d8001d85 	stb	zero,118(sp)
    d8f4:	0027883a 	mov	r19,zero
    d8f8:	d8002305 	stb	zero,140(sp)
    d8fc:	043fffc4 	movi	r16,-1
    d900:	d8002515 	stw	zero,148(sp)
    d904:	0023883a 	mov	r17,zero
    d908:	05001604 	movi	r20,88
    d90c:	05400244 	movi	r21,9
    d910:	402f883a 	mov	r23,r8
    d914:	b5800044 	addi	r22,r22,1
    d918:	18bff804 	addi	r2,r3,-32
    d91c:	a0827736 	bltu	r20,r2,e2fc <___vfiprintf_internal_r+0xb5c>
    d920:	100490ba 	slli	r2,r2,2
    d924:	01000074 	movhi	r4,1
    d928:	21364e04 	addi	r4,r4,-9928
    d92c:	1105883a 	add	r2,r2,r4
    d930:	10800017 	ldw	r2,0(r2)
    d934:	1000683a 	jmp	r2
    d938:	0000dffc 	xorhi	zero,zero,895
    d93c:	0000e2fc 	xorhi	zero,zero,907
    d940:	0000e2fc 	xorhi	zero,zero,907
    d944:	0000e018 	cmpnei	zero,zero,896
    d948:	0000e2fc 	xorhi	zero,zero,907
    d94c:	0000e2fc 	xorhi	zero,zero,907
    d950:	0000e2fc 	xorhi	zero,zero,907
    d954:	0000e2fc 	xorhi	zero,zero,907
    d958:	0000e2fc 	xorhi	zero,zero,907
    d95c:	0000e2fc 	xorhi	zero,zero,907
    d960:	0000e220 	cmpeqi	zero,zero,904
    d964:	0000e244 	movi	zero,905
    d968:	0000e2fc 	xorhi	zero,zero,907
    d96c:	0000db3c 	xorhi	zero,zero,876
    d970:	0000e258 	cmpnei	zero,zero,905
    d974:	0000e2fc 	xorhi	zero,zero,907
    d978:	0000e024 	muli	zero,zero,896
    d97c:	0000e030 	cmpltui	zero,zero,896
    d980:	0000e030 	cmpltui	zero,zero,896
    d984:	0000e030 	cmpltui	zero,zero,896
    d988:	0000e030 	cmpltui	zero,zero,896
    d98c:	0000e030 	cmpltui	zero,zero,896
    d990:	0000e030 	cmpltui	zero,zero,896
    d994:	0000e030 	cmpltui	zero,zero,896
    d998:	0000e030 	cmpltui	zero,zero,896
    d99c:	0000e030 	cmpltui	zero,zero,896
    d9a0:	0000e2fc 	xorhi	zero,zero,907
    d9a4:	0000e2fc 	xorhi	zero,zero,907
    d9a8:	0000e2fc 	xorhi	zero,zero,907
    d9ac:	0000e2fc 	xorhi	zero,zero,907
    d9b0:	0000e2fc 	xorhi	zero,zero,907
    d9b4:	0000e2fc 	xorhi	zero,zero,907
    d9b8:	0000e2fc 	xorhi	zero,zero,907
    d9bc:	0000e2fc 	xorhi	zero,zero,907
    d9c0:	0000e2fc 	xorhi	zero,zero,907
    d9c4:	0000e2fc 	xorhi	zero,zero,907
    d9c8:	0000e070 	cmpltui	zero,zero,897
    d9cc:	0000e2fc 	xorhi	zero,zero,907
    d9d0:	0000e2fc 	xorhi	zero,zero,907
    d9d4:	0000e2fc 	xorhi	zero,zero,907
    d9d8:	0000e2fc 	xorhi	zero,zero,907
    d9dc:	0000e2fc 	xorhi	zero,zero,907
    d9e0:	0000e2fc 	xorhi	zero,zero,907
    d9e4:	0000e2fc 	xorhi	zero,zero,907
    d9e8:	0000e2fc 	xorhi	zero,zero,907
    d9ec:	0000e2fc 	xorhi	zero,zero,907
    d9f0:	0000e2fc 	xorhi	zero,zero,907
    d9f4:	0000e0ac 	andhi	zero,zero,898
    d9f8:	0000e2fc 	xorhi	zero,zero,907
    d9fc:	0000e2fc 	xorhi	zero,zero,907
    da00:	0000e2fc 	xorhi	zero,zero,907
    da04:	0000e2fc 	xorhi	zero,zero,907
    da08:	0000e2fc 	xorhi	zero,zero,907
    da0c:	0000e108 	cmpgei	zero,zero,900
    da10:	0000e2fc 	xorhi	zero,zero,907
    da14:	0000e2fc 	xorhi	zero,zero,907
    da18:	0000e17c 	xorhi	zero,zero,901
    da1c:	0000e2fc 	xorhi	zero,zero,907
    da20:	0000e2fc 	xorhi	zero,zero,907
    da24:	0000e2fc 	xorhi	zero,zero,907
    da28:	0000e2fc 	xorhi	zero,zero,907
    da2c:	0000e2fc 	xorhi	zero,zero,907
    da30:	0000e2fc 	xorhi	zero,zero,907
    da34:	0000e2fc 	xorhi	zero,zero,907
    da38:	0000e2fc 	xorhi	zero,zero,907
    da3c:	0000e2fc 	xorhi	zero,zero,907
    da40:	0000e2fc 	xorhi	zero,zero,907
    da44:	0000df24 	muli	zero,zero,892
    da48:	0000df54 	movui	zero,893
    da4c:	0000e2fc 	xorhi	zero,zero,907
    da50:	0000e2fc 	xorhi	zero,zero,907
    da54:	0000e2fc 	xorhi	zero,zero,907
    da58:	0000e2a4 	muli	zero,zero,906
    da5c:	0000df54 	movui	zero,893
    da60:	0000e2fc 	xorhi	zero,zero,907
    da64:	0000e2fc 	xorhi	zero,zero,907
    da68:	0000ddfc 	xorhi	zero,zero,887
    da6c:	0000e2fc 	xorhi	zero,zero,907
    da70:	0000de10 	cmplti	zero,zero,888
    da74:	0000de48 	cmpgei	zero,zero,889
    da78:	0000db48 	cmpgei	zero,zero,877
    da7c:	0000ddf0 	cmpltui	zero,zero,887
    da80:	0000e2fc 	xorhi	zero,zero,907
    da84:	0000e1bc 	xorhi	zero,zero,902
    da88:	0000e2fc 	xorhi	zero,zero,907
    da8c:	0000e208 	cmpgei	zero,zero,904
    da90:	0000e2fc 	xorhi	zero,zero,907
    da94:	0000e2fc 	xorhi	zero,zero,907
    da98:	0000decc 	andi	zero,zero,891
    da9c:	42000204 	addi	r8,r8,8
    daa0:	d8c02417 	ldw	r3,144(sp)
    daa4:	1c07883a 	add	r3,r3,r16
    daa8:	d8c02415 	stw	r3,144(sp)
    daac:	003f8c06 	br	d8e0 <__alt_data_end+0xfffed8e0>
    dab0:	d9402017 	ldw	r5,128(sp)
    dab4:	d9002117 	ldw	r4,132(sp)
    dab8:	000983c0 	call	983c <__swsetup_r>
    dabc:	1003c11e 	bne	r2,zero,e9c4 <___vfiprintf_internal_r+0x1224>
    dac0:	d9402017 	ldw	r5,128(sp)
    dac4:	00c00284 	movi	r3,10
    dac8:	2880030b 	ldhu	r2,12(r5)
    dacc:	1080068c 	andi	r2,r2,26
    dad0:	10ff581e 	bne	r2,r3,d834 <__alt_data_end+0xfffed834>
    dad4:	d8c02017 	ldw	r3,128(sp)
    dad8:	1880038f 	ldh	r2,14(r3)
    dadc:	103f5516 	blt	r2,zero,d834 <__alt_data_end+0xfffed834>
    dae0:	d9c02217 	ldw	r7,136(sp)
    dae4:	d9002117 	ldw	r4,132(sp)
    dae8:	a80d883a 	mov	r6,r21
    daec:	180b883a 	mov	r5,r3
    daf0:	000ecc80 	call	ecc8 <__sbprintf>
    daf4:	dfc03517 	ldw	ra,212(sp)
    daf8:	df003417 	ldw	fp,208(sp)
    dafc:	ddc03317 	ldw	r23,204(sp)
    db00:	dd803217 	ldw	r22,200(sp)
    db04:	dd403117 	ldw	r21,196(sp)
    db08:	dd003017 	ldw	r20,192(sp)
    db0c:	dcc02f17 	ldw	r19,188(sp)
    db10:	dc802e17 	ldw	r18,184(sp)
    db14:	dc402d17 	ldw	r17,180(sp)
    db18:	dc002c17 	ldw	r16,176(sp)
    db1c:	dec03604 	addi	sp,sp,216
    db20:	f800283a 	ret
    db24:	00052a00 	call	52a0 <__sinit>
    db28:	003f2f06 	br	d7e8 <__alt_data_end+0xfffed7e8>
    db2c:	d8c02517 	ldw	r3,148(sp)
    db30:	d8802215 	stw	r2,136(sp)
    db34:	00c7c83a 	sub	r3,zero,r3
    db38:	d8c02515 	stw	r3,148(sp)
    db3c:	8c400114 	ori	r17,r17,4
    db40:	b0c00007 	ldb	r3,0(r22)
    db44:	003f7306 	br	d914 <__alt_data_end+0xfffed914>
    db48:	00800c04 	movi	r2,48
    db4c:	d9402217 	ldw	r5,136(sp)
    db50:	d8801d05 	stb	r2,116(sp)
    db54:	00801e04 	movi	r2,120
    db58:	d8801d45 	stb	r2,117(sp)
    db5c:	d8001d85 	stb	zero,118(sp)
    db60:	b811883a 	mov	r8,r23
    db64:	28c00104 	addi	r3,r5,4
    db68:	2cc00017 	ldw	r19,0(r5)
    db6c:	0029883a 	mov	r20,zero
    db70:	88800094 	ori	r2,r17,2
    db74:	80032516 	blt	r16,zero,e80c <___vfiprintf_internal_r+0x106c>
    db78:	00bfdfc4 	movi	r2,-129
    db7c:	88a2703a 	and	r17,r17,r2
    db80:	d8c02215 	stw	r3,136(sp)
    db84:	8c400094 	ori	r17,r17,2
    db88:	98032a1e 	bne	r19,zero,e834 <___vfiprintf_internal_r+0x1094>
    db8c:	00800074 	movhi	r2,1
    db90:	108af904 	addi	r2,r2,11236
    db94:	d8802615 	stw	r2,152(sp)
    db98:	002b883a 	mov	r21,zero
    db9c:	8001741e 	bne	r16,zero,e170 <___vfiprintf_internal_r+0x9d0>
    dba0:	0021883a 	mov	r16,zero
    dba4:	0029883a 	mov	r20,zero
    dba8:	ddc01a04 	addi	r23,sp,104
    dbac:	8027883a 	mov	r19,r16
    dbb0:	8500010e 	bge	r16,r20,dbb8 <___vfiprintf_internal_r+0x418>
    dbb4:	a027883a 	mov	r19,r20
    dbb8:	ad403fcc 	andi	r21,r21,255
    dbbc:	ad40201c 	xori	r21,r21,128
    dbc0:	ad7fe004 	addi	r21,r21,-128
    dbc4:	a8000126 	beq	r21,zero,dbcc <___vfiprintf_internal_r+0x42c>
    dbc8:	9cc00044 	addi	r19,r19,1
    dbcc:	89c0008c 	andi	r7,r17,2
    dbd0:	38000126 	beq	r7,zero,dbd8 <___vfiprintf_internal_r+0x438>
    dbd4:	9cc00084 	addi	r19,r19,2
    dbd8:	88c0210c 	andi	r3,r17,132
    dbdc:	1801dd1e 	bne	r3,zero,e354 <___vfiprintf_internal_r+0xbb4>
    dbe0:	d9402517 	ldw	r5,148(sp)
    dbe4:	2cebc83a 	sub	r21,r5,r19
    dbe8:	0541da0e 	bge	zero,r21,e354 <___vfiprintf_internal_r+0xbb4>
    dbec:	07000404 	movi	fp,16
    dbf0:	d8801c17 	ldw	r2,112(sp)
    dbf4:	e543be0e 	bge	fp,r21,eaf0 <___vfiprintf_internal_r+0x1350>
    dbf8:	01400074 	movhi	r5,1
    dbfc:	294b5d04 	addi	r5,r5,11636
    dc00:	dc002715 	stw	r16,156(sp)
    dc04:	d9801b17 	ldw	r6,108(sp)
    dc08:	a821883a 	mov	r16,r21
    dc0c:	d9402315 	stw	r5,140(sp)
    dc10:	028001c4 	movi	r10,7
    dc14:	d9c02915 	stw	r7,164(sp)
    dc18:	182b883a 	mov	r21,r3
    dc1c:	00000506 	br	dc34 <___vfiprintf_internal_r+0x494>
    dc20:	31000084 	addi	r4,r6,2
    dc24:	42000204 	addi	r8,r8,8
    dc28:	180d883a 	mov	r6,r3
    dc2c:	843ffc04 	addi	r16,r16,-16
    dc30:	e4000f0e 	bge	fp,r16,dc70 <___vfiprintf_internal_r+0x4d0>
    dc34:	01000074 	movhi	r4,1
    dc38:	10800404 	addi	r2,r2,16
    dc3c:	30c00044 	addi	r3,r6,1
    dc40:	210b5d04 	addi	r4,r4,11636
    dc44:	41000015 	stw	r4,0(r8)
    dc48:	47000115 	stw	fp,4(r8)
    dc4c:	d8801c15 	stw	r2,112(sp)
    dc50:	d8c01b15 	stw	r3,108(sp)
    dc54:	50fff20e 	bge	r10,r3,dc20 <__alt_data_end+0xfffedc20>
    dc58:	1001b21e 	bne	r2,zero,e324 <___vfiprintf_internal_r+0xb84>
    dc5c:	843ffc04 	addi	r16,r16,-16
    dc60:	000d883a 	mov	r6,zero
    dc64:	01000044 	movi	r4,1
    dc68:	d811883a 	mov	r8,sp
    dc6c:	e43ff116 	blt	fp,r16,dc34 <__alt_data_end+0xfffedc34>
    dc70:	a807883a 	mov	r3,r21
    dc74:	d9c02917 	ldw	r7,164(sp)
    dc78:	802b883a 	mov	r21,r16
    dc7c:	dc002717 	ldw	r16,156(sp)
    dc80:	d9402317 	ldw	r5,140(sp)
    dc84:	a885883a 	add	r2,r21,r2
    dc88:	45400115 	stw	r21,4(r8)
    dc8c:	41400015 	stw	r5,0(r8)
    dc90:	d8801c15 	stw	r2,112(sp)
    dc94:	d9001b15 	stw	r4,108(sp)
    dc98:	014001c4 	movi	r5,7
    dc9c:	29026216 	blt	r5,r4,e628 <___vfiprintf_internal_r+0xe88>
    dca0:	d9801d87 	ldb	r6,118(sp)
    dca4:	42000204 	addi	r8,r8,8
    dca8:	21400044 	addi	r5,r4,1
    dcac:	3001ae1e 	bne	r6,zero,e368 <___vfiprintf_internal_r+0xbc8>
    dcb0:	3801bb26 	beq	r7,zero,e3a0 <___vfiprintf_internal_r+0xc00>
    dcb4:	d9001d04 	addi	r4,sp,116
    dcb8:	10800084 	addi	r2,r2,2
    dcbc:	41000015 	stw	r4,0(r8)
    dcc0:	01000084 	movi	r4,2
    dcc4:	41000115 	stw	r4,4(r8)
    dcc8:	d8801c15 	stw	r2,112(sp)
    dccc:	d9401b15 	stw	r5,108(sp)
    dcd0:	010001c4 	movi	r4,7
    dcd4:	2142680e 	bge	r4,r5,e678 <___vfiprintf_internal_r+0xed8>
    dcd8:	1002b11e 	bne	r2,zero,e7a0 <___vfiprintf_internal_r+0x1000>
    dcdc:	01802004 	movi	r6,128
    dce0:	01400044 	movi	r5,1
    dce4:	0009883a 	mov	r4,zero
    dce8:	d811883a 	mov	r8,sp
    dcec:	1981ae1e 	bne	r3,r6,e3a8 <___vfiprintf_internal_r+0xc08>
    dcf0:	d8c02517 	ldw	r3,148(sp)
    dcf4:	1cf9c83a 	sub	fp,r3,r19
    dcf8:	0701ab0e 	bge	zero,fp,e3a8 <___vfiprintf_internal_r+0xc08>
    dcfc:	05400404 	movi	r21,16
    dd00:	af03a90e 	bge	r21,fp,eba8 <___vfiprintf_internal_r+0x1408>
    dd04:	01400074 	movhi	r5,1
    dd08:	294b5904 	addi	r5,r5,11620
    dd0c:	d9402315 	stw	r5,140(sp)
    dd10:	01c001c4 	movi	r7,7
    dd14:	00000506 	br	dd2c <___vfiprintf_internal_r+0x58c>
    dd18:	21800084 	addi	r6,r4,2
    dd1c:	42000204 	addi	r8,r8,8
    dd20:	1809883a 	mov	r4,r3
    dd24:	e73ffc04 	addi	fp,fp,-16
    dd28:	af000d0e 	bge	r21,fp,dd60 <___vfiprintf_internal_r+0x5c0>
    dd2c:	10800404 	addi	r2,r2,16
    dd30:	20c00044 	addi	r3,r4,1
    dd34:	44800015 	stw	r18,0(r8)
    dd38:	45400115 	stw	r21,4(r8)
    dd3c:	d8801c15 	stw	r2,112(sp)
    dd40:	d8c01b15 	stw	r3,108(sp)
    dd44:	38fff40e 	bge	r7,r3,dd18 <__alt_data_end+0xfffedd18>
    dd48:	10022b1e 	bne	r2,zero,e5f8 <___vfiprintf_internal_r+0xe58>
    dd4c:	e73ffc04 	addi	fp,fp,-16
    dd50:	01800044 	movi	r6,1
    dd54:	0009883a 	mov	r4,zero
    dd58:	d811883a 	mov	r8,sp
    dd5c:	af3ff316 	blt	r21,fp,dd2c <__alt_data_end+0xfffedd2c>
    dd60:	d8c02317 	ldw	r3,140(sp)
    dd64:	1705883a 	add	r2,r2,fp
    dd68:	47000115 	stw	fp,4(r8)
    dd6c:	40c00015 	stw	r3,0(r8)
    dd70:	d8801c15 	stw	r2,112(sp)
    dd74:	d9801b15 	stw	r6,108(sp)
    dd78:	00c001c4 	movi	r3,7
    dd7c:	19829416 	blt	r3,r6,e7d0 <___vfiprintf_internal_r+0x1030>
    dd80:	8521c83a 	sub	r16,r16,r20
    dd84:	42000204 	addi	r8,r8,8
    dd88:	31400044 	addi	r5,r6,1
    dd8c:	3009883a 	mov	r4,r6
    dd90:	04018716 	blt	zero,r16,e3b0 <___vfiprintf_internal_r+0xc10>
    dd94:	a085883a 	add	r2,r20,r2
    dd98:	45c00015 	stw	r23,0(r8)
    dd9c:	45000115 	stw	r20,4(r8)
    dda0:	d8801c15 	stw	r2,112(sp)
    dda4:	d9401b15 	stw	r5,108(sp)
    dda8:	00c001c4 	movi	r3,7
    ddac:	1941c20e 	bge	r3,r5,e4b8 <___vfiprintf_internal_r+0xd18>
    ddb0:	1002531e 	bne	r2,zero,e700 <___vfiprintf_internal_r+0xf60>
    ddb4:	d8001b15 	stw	zero,108(sp)
    ddb8:	8c40010c 	andi	r17,r17,4
    ddbc:	88023226 	beq	r17,zero,e688 <___vfiprintf_internal_r+0xee8>
    ddc0:	d9002517 	ldw	r4,148(sp)
    ddc4:	24e3c83a 	sub	r17,r4,r19
    ddc8:	04432916 	blt	zero,r17,ea70 <___vfiprintf_internal_r+0x12d0>
    ddcc:	d8802517 	ldw	r2,148(sp)
    ddd0:	14c0010e 	bge	r2,r19,ddd8 <___vfiprintf_internal_r+0x638>
    ddd4:	9805883a 	mov	r2,r19
    ddd8:	d8c02417 	ldw	r3,144(sp)
    dddc:	1887883a 	add	r3,r3,r2
    dde0:	d8c02415 	stw	r3,144(sp)
    dde4:	d8001b15 	stw	zero,108(sp)
    dde8:	d811883a 	mov	r8,sp
    ddec:	003ea006 	br	d870 <__alt_data_end+0xfffed870>
    ddf0:	8c400814 	ori	r17,r17,32
    ddf4:	b0c00007 	ldb	r3,0(r22)
    ddf8:	003ec606 	br	d914 <__alt_data_end+0xfffed914>
    ddfc:	b0c00007 	ldb	r3,0(r22)
    de00:	00801b04 	movi	r2,108
    de04:	18832026 	beq	r3,r2,ea88 <___vfiprintf_internal_r+0x12e8>
    de08:	8c400414 	ori	r17,r17,16
    de0c:	003ec106 	br	d914 <__alt_data_end+0xfffed914>
    de10:	9cc03fcc 	andi	r19,r19,255
    de14:	b811883a 	mov	r8,r23
    de18:	9803981e 	bne	r19,zero,ec7c <___vfiprintf_internal_r+0x14dc>
    de1c:	8880080c 	andi	r2,r17,32
    de20:	1002be26 	beq	r2,zero,e91c <___vfiprintf_internal_r+0x117c>
    de24:	d9002217 	ldw	r4,136(sp)
    de28:	d9402417 	ldw	r5,144(sp)
    de2c:	20800017 	ldw	r2,0(r4)
    de30:	2807d7fa 	srai	r3,r5,31
    de34:	21000104 	addi	r4,r4,4
    de38:	d9002215 	stw	r4,136(sp)
    de3c:	11400015 	stw	r5,0(r2)
    de40:	10c00115 	stw	r3,4(r2)
    de44:	003e8a06 	br	d870 <__alt_data_end+0xfffed870>
    de48:	9cc03fcc 	andi	r19,r19,255
    de4c:	b811883a 	mov	r8,r23
    de50:	9803871e 	bne	r19,zero,ec70 <___vfiprintf_internal_r+0x14d0>
    de54:	8880080c 	andi	r2,r17,32
    de58:	10009a26 	beq	r2,zero,e0c4 <___vfiprintf_internal_r+0x924>
    de5c:	d9002217 	ldw	r4,136(sp)
    de60:	d8001d85 	stb	zero,118(sp)
    de64:	20800204 	addi	r2,r4,8
    de68:	24c00017 	ldw	r19,0(r4)
    de6c:	25000117 	ldw	r20,4(r4)
    de70:	8002a416 	blt	r16,zero,e904 <___vfiprintf_internal_r+0x1164>
    de74:	013fdfc4 	movi	r4,-129
    de78:	9d06b03a 	or	r3,r19,r20
    de7c:	d8802215 	stw	r2,136(sp)
    de80:	8922703a 	and	r17,r17,r4
    de84:	18009b26 	beq	r3,zero,e0f4 <___vfiprintf_internal_r+0x954>
    de88:	002b883a 	mov	r21,zero
    de8c:	ddc01a04 	addi	r23,sp,104
    de90:	9806d0fa 	srli	r3,r19,3
    de94:	a008977a 	slli	r4,r20,29
    de98:	a028d0fa 	srli	r20,r20,3
    de9c:	9cc001cc 	andi	r19,r19,7
    dea0:	98800c04 	addi	r2,r19,48
    dea4:	bdffffc4 	addi	r23,r23,-1
    dea8:	20e6b03a 	or	r19,r4,r3
    deac:	b8800005 	stb	r2,0(r23)
    deb0:	9d06b03a 	or	r3,r19,r20
    deb4:	183ff61e 	bne	r3,zero,de90 <__alt_data_end+0xfffede90>
    deb8:	88c0004c 	andi	r3,r17,1
    debc:	18021f1e 	bne	r3,zero,e73c <___vfiprintf_internal_r+0xf9c>
    dec0:	d9401e17 	ldw	r5,120(sp)
    dec4:	2de9c83a 	sub	r20,r5,r23
    dec8:	003f3806 	br	dbac <__alt_data_end+0xfffedbac>
    decc:	9cc03fcc 	andi	r19,r19,255
    ded0:	b811883a 	mov	r8,r23
    ded4:	98034f1e 	bne	r19,zero,ec14 <___vfiprintf_internal_r+0x1474>
    ded8:	00800074 	movhi	r2,1
    dedc:	108af904 	addi	r2,r2,11236
    dee0:	d8802615 	stw	r2,152(sp)
    dee4:	8880080c 	andi	r2,r17,32
    dee8:	1000ac26 	beq	r2,zero,e19c <___vfiprintf_internal_r+0x9fc>
    deec:	d9002217 	ldw	r4,136(sp)
    def0:	24c00017 	ldw	r19,0(r4)
    def4:	25000117 	ldw	r20,4(r4)
    def8:	21000204 	addi	r4,r4,8
    defc:	d9002215 	stw	r4,136(sp)
    df00:	8880004c 	andi	r2,r17,1
    df04:	1001e726 	beq	r2,zero,e6a4 <___vfiprintf_internal_r+0xf04>
    df08:	9d04b03a 	or	r2,r19,r20
    df0c:	10025c1e 	bne	r2,zero,e880 <___vfiprintf_internal_r+0x10e0>
    df10:	d8001d85 	stb	zero,118(sp)
    df14:	80024416 	blt	r16,zero,e828 <___vfiprintf_internal_r+0x1088>
    df18:	00bfdfc4 	movi	r2,-129
    df1c:	88a2703a 	and	r17,r17,r2
    df20:	003f1d06 	br	db98 <__alt_data_end+0xfffedb98>
    df24:	d8c02217 	ldw	r3,136(sp)
    df28:	04c00044 	movi	r19,1
    df2c:	b811883a 	mov	r8,r23
    df30:	18800017 	ldw	r2,0(r3)
    df34:	18c00104 	addi	r3,r3,4
    df38:	d8001d85 	stb	zero,118(sp)
    df3c:	d8801005 	stb	r2,64(sp)
    df40:	d8c02215 	stw	r3,136(sp)
    df44:	9829883a 	mov	r20,r19
    df48:	ddc01004 	addi	r23,sp,64
    df4c:	0021883a 	mov	r16,zero
    df50:	003f1e06 	br	dbcc <__alt_data_end+0xfffedbcc>
    df54:	9cc03fcc 	andi	r19,r19,255
    df58:	b811883a 	mov	r8,r23
    df5c:	9803331e 	bne	r19,zero,ec2c <___vfiprintf_internal_r+0x148c>
    df60:	8880080c 	andi	r2,r17,32
    df64:	10004826 	beq	r2,zero,e088 <___vfiprintf_internal_r+0x8e8>
    df68:	d9002217 	ldw	r4,136(sp)
    df6c:	20800117 	ldw	r2,4(r4)
    df70:	24c00017 	ldw	r19,0(r4)
    df74:	21000204 	addi	r4,r4,8
    df78:	d9002215 	stw	r4,136(sp)
    df7c:	1029883a 	mov	r20,r2
    df80:	10024c16 	blt	r2,zero,e8b4 <___vfiprintf_internal_r+0x1114>
    df84:	dd401d83 	ldbu	r21,118(sp)
    df88:	80007116 	blt	r16,zero,e150 <___vfiprintf_internal_r+0x9b0>
    df8c:	00ffdfc4 	movi	r3,-129
    df90:	9d04b03a 	or	r2,r19,r20
    df94:	88e2703a 	and	r17,r17,r3
    df98:	1000d126 	beq	r2,zero,e2e0 <___vfiprintf_internal_r+0xb40>
    df9c:	a0023526 	beq	r20,zero,e874 <___vfiprintf_internal_r+0x10d4>
    dfa0:	ddc01a04 	addi	r23,sp,104
    dfa4:	4039883a 	mov	fp,r8
    dfa8:	9809883a 	mov	r4,r19
    dfac:	a00b883a 	mov	r5,r20
    dfb0:	01800284 	movi	r6,10
    dfb4:	000f883a 	mov	r7,zero
    dfb8:	000f9a40 	call	f9a4 <__umoddi3>
    dfbc:	10800c04 	addi	r2,r2,48
    dfc0:	bdffffc4 	addi	r23,r23,-1
    dfc4:	9809883a 	mov	r4,r19
    dfc8:	a00b883a 	mov	r5,r20
    dfcc:	b8800005 	stb	r2,0(r23)
    dfd0:	01800284 	movi	r6,10
    dfd4:	000f883a 	mov	r7,zero
    dfd8:	000f3a80 	call	f3a8 <__udivdi3>
    dfdc:	1027883a 	mov	r19,r2
    dfe0:	10c4b03a 	or	r2,r2,r3
    dfe4:	1829883a 	mov	r20,r3
    dfe8:	103fef1e 	bne	r2,zero,dfa8 <__alt_data_end+0xfffedfa8>
    dfec:	d9001e17 	ldw	r4,120(sp)
    dff0:	e011883a 	mov	r8,fp
    dff4:	25e9c83a 	sub	r20,r4,r23
    dff8:	003eec06 	br	dbac <__alt_data_end+0xfffedbac>
    dffc:	d8802307 	ldb	r2,140(sp)
    e000:	1002361e 	bne	r2,zero,e8dc <___vfiprintf_internal_r+0x113c>
    e004:	00c00804 	movi	r3,32
    e008:	d8c02305 	stb	r3,140(sp)
    e00c:	04c00044 	movi	r19,1
    e010:	b0c00007 	ldb	r3,0(r22)
    e014:	003e3f06 	br	d914 <__alt_data_end+0xfffed914>
    e018:	8c400054 	ori	r17,r17,1
    e01c:	b0c00007 	ldb	r3,0(r22)
    e020:	003e3c06 	br	d914 <__alt_data_end+0xfffed914>
    e024:	8c402014 	ori	r17,r17,128
    e028:	b0c00007 	ldb	r3,0(r22)
    e02c:	003e3906 	br	d914 <__alt_data_end+0xfffed914>
    e030:	dc002715 	stw	r16,156(sp)
    e034:	d8002515 	stw	zero,148(sp)
    e038:	1f3ff404 	addi	fp,r3,-48
    e03c:	0009883a 	mov	r4,zero
    e040:	b021883a 	mov	r16,r22
    e044:	01400284 	movi	r5,10
    e048:	000197c0 	call	197c <__mulsi3>
    e04c:	80c00007 	ldb	r3,0(r16)
    e050:	e089883a 	add	r4,fp,r2
    e054:	b5800044 	addi	r22,r22,1
    e058:	1f3ff404 	addi	fp,r3,-48
    e05c:	b021883a 	mov	r16,r22
    e060:	af3ff82e 	bgeu	r21,fp,e044 <__alt_data_end+0xfffee044>
    e064:	d9002515 	stw	r4,148(sp)
    e068:	dc002717 	ldw	r16,156(sp)
    e06c:	003e2a06 	br	d918 <__alt_data_end+0xfffed918>
    e070:	9cc03fcc 	andi	r19,r19,255
    e074:	b811883a 	mov	r8,r23
    e078:	9802e91e 	bne	r19,zero,ec20 <___vfiprintf_internal_r+0x1480>
    e07c:	8c400414 	ori	r17,r17,16
    e080:	8880080c 	andi	r2,r17,32
    e084:	103fb81e 	bne	r2,zero,df68 <__alt_data_end+0xfffedf68>
    e088:	8880040c 	andi	r2,r17,16
    e08c:	10022e26 	beq	r2,zero,e948 <___vfiprintf_internal_r+0x11a8>
    e090:	d9402217 	ldw	r5,136(sp)
    e094:	2cc00017 	ldw	r19,0(r5)
    e098:	29400104 	addi	r5,r5,4
    e09c:	d9402215 	stw	r5,136(sp)
    e0a0:	9829d7fa 	srai	r20,r19,31
    e0a4:	a005883a 	mov	r2,r20
    e0a8:	003fb506 	br	df80 <__alt_data_end+0xfffedf80>
    e0ac:	9cc03fcc 	andi	r19,r19,255
    e0b0:	b811883a 	mov	r8,r23
    e0b4:	9802fa1e 	bne	r19,zero,eca0 <___vfiprintf_internal_r+0x1500>
    e0b8:	8c400414 	ori	r17,r17,16
    e0bc:	8880080c 	andi	r2,r17,32
    e0c0:	103f661e 	bne	r2,zero,de5c <__alt_data_end+0xfffede5c>
    e0c4:	8880040c 	andi	r2,r17,16
    e0c8:	10020626 	beq	r2,zero,e8e4 <___vfiprintf_internal_r+0x1144>
    e0cc:	d9402217 	ldw	r5,136(sp)
    e0d0:	d8001d85 	stb	zero,118(sp)
    e0d4:	0029883a 	mov	r20,zero
    e0d8:	28800104 	addi	r2,r5,4
    e0dc:	2cc00017 	ldw	r19,0(r5)
    e0e0:	80020816 	blt	r16,zero,e904 <___vfiprintf_internal_r+0x1164>
    e0e4:	00ffdfc4 	movi	r3,-129
    e0e8:	d8802215 	stw	r2,136(sp)
    e0ec:	88e2703a 	and	r17,r17,r3
    e0f0:	983f651e 	bne	r19,zero,de88 <__alt_data_end+0xfffede88>
    e0f4:	002b883a 	mov	r21,zero
    e0f8:	8002cf26 	beq	r16,zero,ec38 <___vfiprintf_internal_r+0x1498>
    e0fc:	0027883a 	mov	r19,zero
    e100:	0029883a 	mov	r20,zero
    e104:	003f6106 	br	de8c <__alt_data_end+0xfffede8c>
    e108:	9cc03fcc 	andi	r19,r19,255
    e10c:	b811883a 	mov	r8,r23
    e110:	9802e01e 	bne	r19,zero,ec94 <___vfiprintf_internal_r+0x14f4>
    e114:	8c400414 	ori	r17,r17,16
    e118:	8880080c 	andi	r2,r17,32
    e11c:	1000641e 	bne	r2,zero,e2b0 <___vfiprintf_internal_r+0xb10>
    e120:	8880040c 	andi	r2,r17,16
    e124:	1001c81e 	bne	r2,zero,e848 <___vfiprintf_internal_r+0x10a8>
    e128:	8880100c 	andi	r2,r17,64
    e12c:	d8001d85 	stb	zero,118(sp)
    e130:	1002281e 	bne	r2,zero,e9d4 <___vfiprintf_internal_r+0x1234>
    e134:	d9002217 	ldw	r4,136(sp)
    e138:	0029883a 	mov	r20,zero
    e13c:	20800104 	addi	r2,r4,4
    e140:	24c00017 	ldw	r19,0(r4)
    e144:	8001c60e 	bge	r16,zero,e860 <___vfiprintf_internal_r+0x10c0>
    e148:	d8802215 	stw	r2,136(sp)
    e14c:	002b883a 	mov	r21,zero
    e150:	9d04b03a 	or	r2,r19,r20
    e154:	103f911e 	bne	r2,zero,df9c <__alt_data_end+0xfffedf9c>
    e158:	00800044 	movi	r2,1
    e15c:	10803fcc 	andi	r2,r2,255
    e160:	00c00044 	movi	r3,1
    e164:	10c05f26 	beq	r2,r3,e2e4 <___vfiprintf_internal_r+0xb44>
    e168:	00c00084 	movi	r3,2
    e16c:	10ffe31e 	bne	r2,r3,e0fc <__alt_data_end+0xfffee0fc>
    e170:	0027883a 	mov	r19,zero
    e174:	0029883a 	mov	r20,zero
    e178:	00015106 	br	e6c0 <___vfiprintf_internal_r+0xf20>
    e17c:	9cc03fcc 	andi	r19,r19,255
    e180:	b811883a 	mov	r8,r23
    e184:	9802c01e 	bne	r19,zero,ec88 <___vfiprintf_internal_r+0x14e8>
    e188:	01400074 	movhi	r5,1
    e18c:	294af404 	addi	r5,r5,11216
    e190:	d9402615 	stw	r5,152(sp)
    e194:	8880080c 	andi	r2,r17,32
    e198:	103f541e 	bne	r2,zero,deec <__alt_data_end+0xfffedeec>
    e19c:	8880040c 	andi	r2,r17,16
    e1a0:	1001f226 	beq	r2,zero,e96c <___vfiprintf_internal_r+0x11cc>
    e1a4:	d9402217 	ldw	r5,136(sp)
    e1a8:	0029883a 	mov	r20,zero
    e1ac:	2cc00017 	ldw	r19,0(r5)
    e1b0:	29400104 	addi	r5,r5,4
    e1b4:	d9402215 	stw	r5,136(sp)
    e1b8:	003f5106 	br	df00 <__alt_data_end+0xfffedf00>
    e1bc:	d8c02217 	ldw	r3,136(sp)
    e1c0:	b811883a 	mov	r8,r23
    e1c4:	d8001d85 	stb	zero,118(sp)
    e1c8:	1dc00017 	ldw	r23,0(r3)
    e1cc:	1f000104 	addi	fp,r3,4
    e1d0:	b8025926 	beq	r23,zero,eb38 <___vfiprintf_internal_r+0x1398>
    e1d4:	80023316 	blt	r16,zero,eaa4 <___vfiprintf_internal_r+0x1304>
    e1d8:	800d883a 	mov	r6,r16
    e1dc:	000b883a 	mov	r5,zero
    e1e0:	b809883a 	mov	r4,r23
    e1e4:	da002a15 	stw	r8,168(sp)
    e1e8:	000bb180 	call	bb18 <memchr>
    e1ec:	da002a17 	ldw	r8,168(sp)
    e1f0:	10026826 	beq	r2,zero,eb94 <___vfiprintf_internal_r+0x13f4>
    e1f4:	15e9c83a 	sub	r20,r2,r23
    e1f8:	dd401d83 	ldbu	r21,118(sp)
    e1fc:	df002215 	stw	fp,136(sp)
    e200:	0021883a 	mov	r16,zero
    e204:	003e6906 	br	dbac <__alt_data_end+0xfffedbac>
    e208:	9cc03fcc 	andi	r19,r19,255
    e20c:	b811883a 	mov	r8,r23
    e210:	983fc126 	beq	r19,zero,e118 <__alt_data_end+0xfffee118>
    e214:	d8c02303 	ldbu	r3,140(sp)
    e218:	d8c01d85 	stb	r3,118(sp)
    e21c:	003fbe06 	br	e118 <__alt_data_end+0xfffee118>
    e220:	d9002217 	ldw	r4,136(sp)
    e224:	d9402217 	ldw	r5,136(sp)
    e228:	21000017 	ldw	r4,0(r4)
    e22c:	28800104 	addi	r2,r5,4
    e230:	d9002515 	stw	r4,148(sp)
    e234:	203e3d16 	blt	r4,zero,db2c <__alt_data_end+0xfffedb2c>
    e238:	d8802215 	stw	r2,136(sp)
    e23c:	b0c00007 	ldb	r3,0(r22)
    e240:	003db406 	br	d914 <__alt_data_end+0xfffed914>
    e244:	00c00ac4 	movi	r3,43
    e248:	d8c02305 	stb	r3,140(sp)
    e24c:	04c00044 	movi	r19,1
    e250:	b0c00007 	ldb	r3,0(r22)
    e254:	003daf06 	br	d914 <__alt_data_end+0xfffed914>
    e258:	b0c00007 	ldb	r3,0(r22)
    e25c:	01000a84 	movi	r4,42
    e260:	b4000044 	addi	r16,r22,1
    e264:	19025e26 	beq	r3,r4,ebe0 <___vfiprintf_internal_r+0x1440>
    e268:	1f3ff404 	addi	fp,r3,-48
    e26c:	0009883a 	mov	r4,zero
    e270:	af025236 	bltu	r21,fp,ebbc <___vfiprintf_internal_r+0x141c>
    e274:	01400284 	movi	r5,10
    e278:	000197c0 	call	197c <__mulsi3>
    e27c:	80c00007 	ldb	r3,0(r16)
    e280:	1709883a 	add	r4,r2,fp
    e284:	85800044 	addi	r22,r16,1
    e288:	1f3ff404 	addi	fp,r3,-48
    e28c:	b021883a 	mov	r16,r22
    e290:	af3ff82e 	bgeu	r21,fp,e274 <__alt_data_end+0xfffee274>
    e294:	2021883a 	mov	r16,r4
    e298:	203d9f0e 	bge	r4,zero,d918 <__alt_data_end+0xfffed918>
    e29c:	043fffc4 	movi	r16,-1
    e2a0:	003d9d06 	br	d918 <__alt_data_end+0xfffed918>
    e2a4:	8c401014 	ori	r17,r17,64
    e2a8:	b0c00007 	ldb	r3,0(r22)
    e2ac:	003d9906 	br	d914 <__alt_data_end+0xfffed914>
    e2b0:	d9002217 	ldw	r4,136(sp)
    e2b4:	d8001d85 	stb	zero,118(sp)
    e2b8:	20c00204 	addi	r3,r4,8
    e2bc:	24c00017 	ldw	r19,0(r4)
    e2c0:	25000117 	ldw	r20,4(r4)
    e2c4:	8001e716 	blt	r16,zero,ea64 <___vfiprintf_internal_r+0x12c4>
    e2c8:	013fdfc4 	movi	r4,-129
    e2cc:	9d04b03a 	or	r2,r19,r20
    e2d0:	d8c02215 	stw	r3,136(sp)
    e2d4:	8922703a 	and	r17,r17,r4
    e2d8:	002b883a 	mov	r21,zero
    e2dc:	103f2f1e 	bne	r2,zero,df9c <__alt_data_end+0xfffedf9c>
    e2e0:	803e2f26 	beq	r16,zero,dba0 <__alt_data_end+0xfffedba0>
    e2e4:	0027883a 	mov	r19,zero
    e2e8:	9cc00c04 	addi	r19,r19,48
    e2ec:	dcc019c5 	stb	r19,103(sp)
    e2f0:	dd002817 	ldw	r20,160(sp)
    e2f4:	ddc019c4 	addi	r23,sp,103
    e2f8:	003e2c06 	br	dbac <__alt_data_end+0xfffedbac>
    e2fc:	9cc03fcc 	andi	r19,r19,255
    e300:	b811883a 	mov	r8,r23
    e304:	9802571e 	bne	r19,zero,ec64 <___vfiprintf_internal_r+0x14c4>
    e308:	18005726 	beq	r3,zero,e468 <___vfiprintf_internal_r+0xcc8>
    e30c:	04c00044 	movi	r19,1
    e310:	d8c01005 	stb	r3,64(sp)
    e314:	d8001d85 	stb	zero,118(sp)
    e318:	9829883a 	mov	r20,r19
    e31c:	ddc01004 	addi	r23,sp,64
    e320:	003f0a06 	br	df4c <__alt_data_end+0xfffedf4c>
    e324:	d9402017 	ldw	r5,128(sp)
    e328:	d9002117 	ldw	r4,132(sp)
    e32c:	d9801a04 	addi	r6,sp,104
    e330:	da802a15 	stw	r10,168(sp)
    e334:	000d68c0 	call	d68c <__sprint_r.part.0>
    e338:	da802a17 	ldw	r10,168(sp)
    e33c:	1000501e 	bne	r2,zero,e480 <___vfiprintf_internal_r+0xce0>
    e340:	d9801b17 	ldw	r6,108(sp)
    e344:	d8801c17 	ldw	r2,112(sp)
    e348:	d811883a 	mov	r8,sp
    e34c:	31000044 	addi	r4,r6,1
    e350:	003e3606 	br	dc2c <__alt_data_end+0xfffedc2c>
    e354:	d9001b17 	ldw	r4,108(sp)
    e358:	d8801c17 	ldw	r2,112(sp)
    e35c:	21400044 	addi	r5,r4,1
    e360:	d9801d87 	ldb	r6,118(sp)
    e364:	303e5226 	beq	r6,zero,dcb0 <__alt_data_end+0xfffedcb0>
    e368:	01800044 	movi	r6,1
    e36c:	d9001d84 	addi	r4,sp,118
    e370:	1185883a 	add	r2,r2,r6
    e374:	41000015 	stw	r4,0(r8)
    e378:	41800115 	stw	r6,4(r8)
    e37c:	d8801c15 	stw	r2,112(sp)
    e380:	d9401b15 	stw	r5,108(sp)
    e384:	010001c4 	movi	r4,7
    e388:	2140b00e 	bge	r4,r5,e64c <___vfiprintf_internal_r+0xeac>
    e38c:	1000f61e 	bne	r2,zero,e768 <___vfiprintf_internal_r+0xfc8>
    e390:	3800b31e 	bne	r7,zero,e660 <___vfiprintf_internal_r+0xec0>
    e394:	0009883a 	mov	r4,zero
    e398:	300b883a 	mov	r5,r6
    e39c:	d811883a 	mov	r8,sp
    e3a0:	01802004 	movi	r6,128
    e3a4:	19be5226 	beq	r3,r6,dcf0 <__alt_data_end+0xfffedcf0>
    e3a8:	8521c83a 	sub	r16,r16,r20
    e3ac:	043e790e 	bge	zero,r16,dd94 <__alt_data_end+0xfffedd94>
    e3b0:	05400404 	movi	r21,16
    e3b4:	ac01b00e 	bge	r21,r16,ea78 <___vfiprintf_internal_r+0x12d8>
    e3b8:	01400074 	movhi	r5,1
    e3bc:	294b5904 	addi	r5,r5,11620
    e3c0:	d9402315 	stw	r5,140(sp)
    e3c4:	070001c4 	movi	fp,7
    e3c8:	00000506 	br	e3e0 <___vfiprintf_internal_r+0xc40>
    e3cc:	21400084 	addi	r5,r4,2
    e3d0:	42000204 	addi	r8,r8,8
    e3d4:	1809883a 	mov	r4,r3
    e3d8:	843ffc04 	addi	r16,r16,-16
    e3dc:	ac000d0e 	bge	r21,r16,e414 <___vfiprintf_internal_r+0xc74>
    e3e0:	10800404 	addi	r2,r2,16
    e3e4:	20c00044 	addi	r3,r4,1
    e3e8:	44800015 	stw	r18,0(r8)
    e3ec:	45400115 	stw	r21,4(r8)
    e3f0:	d8801c15 	stw	r2,112(sp)
    e3f4:	d8c01b15 	stw	r3,108(sp)
    e3f8:	e0fff40e 	bge	fp,r3,e3cc <__alt_data_end+0xfffee3cc>
    e3fc:	1000101e 	bne	r2,zero,e440 <___vfiprintf_internal_r+0xca0>
    e400:	843ffc04 	addi	r16,r16,-16
    e404:	01400044 	movi	r5,1
    e408:	0009883a 	mov	r4,zero
    e40c:	d811883a 	mov	r8,sp
    e410:	ac3ff316 	blt	r21,r16,e3e0 <__alt_data_end+0xfffee3e0>
    e414:	d8c02317 	ldw	r3,140(sp)
    e418:	1405883a 	add	r2,r2,r16
    e41c:	44000115 	stw	r16,4(r8)
    e420:	40c00015 	stw	r3,0(r8)
    e424:	d8801c15 	stw	r2,112(sp)
    e428:	d9401b15 	stw	r5,108(sp)
    e42c:	00c001c4 	movi	r3,7
    e430:	19401916 	blt	r3,r5,e498 <___vfiprintf_internal_r+0xcf8>
    e434:	42000204 	addi	r8,r8,8
    e438:	29400044 	addi	r5,r5,1
    e43c:	003e5506 	br	dd94 <__alt_data_end+0xfffedd94>
    e440:	d9402017 	ldw	r5,128(sp)
    e444:	d9002117 	ldw	r4,132(sp)
    e448:	d9801a04 	addi	r6,sp,104
    e44c:	000d68c0 	call	d68c <__sprint_r.part.0>
    e450:	10000b1e 	bne	r2,zero,e480 <___vfiprintf_internal_r+0xce0>
    e454:	d9001b17 	ldw	r4,108(sp)
    e458:	d8801c17 	ldw	r2,112(sp)
    e45c:	d811883a 	mov	r8,sp
    e460:	21400044 	addi	r5,r4,1
    e464:	003fdc06 	br	e3d8 <__alt_data_end+0xfffee3d8>
    e468:	d8801c17 	ldw	r2,112(sp)
    e46c:	10000426 	beq	r2,zero,e480 <___vfiprintf_internal_r+0xce0>
    e470:	d9402017 	ldw	r5,128(sp)
    e474:	d9002117 	ldw	r4,132(sp)
    e478:	d9801a04 	addi	r6,sp,104
    e47c:	000d68c0 	call	d68c <__sprint_r.part.0>
    e480:	d9402017 	ldw	r5,128(sp)
    e484:	2880030b 	ldhu	r2,12(r5)
    e488:	1080100c 	andi	r2,r2,64
    e48c:	10014d1e 	bne	r2,zero,e9c4 <___vfiprintf_internal_r+0x1224>
    e490:	d8802417 	ldw	r2,144(sp)
    e494:	003d9706 	br	daf4 <__alt_data_end+0xfffedaf4>
    e498:	1000d21e 	bne	r2,zero,e7e4 <___vfiprintf_internal_r+0x1044>
    e49c:	00c00044 	movi	r3,1
    e4a0:	a005883a 	mov	r2,r20
    e4a4:	ddc00015 	stw	r23,0(sp)
    e4a8:	dd000115 	stw	r20,4(sp)
    e4ac:	dd001c15 	stw	r20,112(sp)
    e4b0:	d8c01b15 	stw	r3,108(sp)
    e4b4:	d811883a 	mov	r8,sp
    e4b8:	42000204 	addi	r8,r8,8
    e4bc:	8c40010c 	andi	r17,r17,4
    e4c0:	88004026 	beq	r17,zero,e5c4 <___vfiprintf_internal_r+0xe24>
    e4c4:	d9002517 	ldw	r4,148(sp)
    e4c8:	24e3c83a 	sub	r17,r4,r19
    e4cc:	04403d0e 	bge	zero,r17,e5c4 <___vfiprintf_internal_r+0xe24>
    e4d0:	04000404 	movi	r16,16
    e4d4:	8441a90e 	bge	r16,r17,eb7c <___vfiprintf_internal_r+0x13dc>
    e4d8:	00c00074 	movhi	r3,1
    e4dc:	18cb5d04 	addi	r3,r3,11636
    e4e0:	d9001b17 	ldw	r4,108(sp)
    e4e4:	d8c02315 	stw	r3,140(sp)
    e4e8:	050001c4 	movi	r20,7
    e4ec:	dd402117 	ldw	r21,132(sp)
    e4f0:	ddc02017 	ldw	r23,128(sp)
    e4f4:	00000506 	br	e50c <___vfiprintf_internal_r+0xd6c>
    e4f8:	21400084 	addi	r5,r4,2
    e4fc:	42000204 	addi	r8,r8,8
    e500:	1809883a 	mov	r4,r3
    e504:	8c7ffc04 	addi	r17,r17,-16
    e508:	84400f0e 	bge	r16,r17,e548 <___vfiprintf_internal_r+0xda8>
    e50c:	01400074 	movhi	r5,1
    e510:	10800404 	addi	r2,r2,16
    e514:	20c00044 	addi	r3,r4,1
    e518:	294b5d04 	addi	r5,r5,11636
    e51c:	41400015 	stw	r5,0(r8)
    e520:	44000115 	stw	r16,4(r8)
    e524:	d8801c15 	stw	r2,112(sp)
    e528:	d8c01b15 	stw	r3,108(sp)
    e52c:	a0fff20e 	bge	r20,r3,e4f8 <__alt_data_end+0xfffee4f8>
    e530:	1000141e 	bne	r2,zero,e584 <___vfiprintf_internal_r+0xde4>
    e534:	8c7ffc04 	addi	r17,r17,-16
    e538:	01400044 	movi	r5,1
    e53c:	0009883a 	mov	r4,zero
    e540:	d811883a 	mov	r8,sp
    e544:	847ff116 	blt	r16,r17,e50c <__alt_data_end+0xfffee50c>
    e548:	d8c02317 	ldw	r3,140(sp)
    e54c:	1445883a 	add	r2,r2,r17
    e550:	44400115 	stw	r17,4(r8)
    e554:	40c00015 	stw	r3,0(r8)
    e558:	d8801c15 	stw	r2,112(sp)
    e55c:	d9401b15 	stw	r5,108(sp)
    e560:	00c001c4 	movi	r3,7
    e564:	1940170e 	bge	r3,r5,e5c4 <___vfiprintf_internal_r+0xe24>
    e568:	1000101e 	bne	r2,zero,e5ac <___vfiprintf_internal_r+0xe0c>
    e56c:	d8802517 	ldw	r2,148(sp)
    e570:	14c11616 	blt	r2,r19,e9cc <___vfiprintf_internal_r+0x122c>
    e574:	d9002417 	ldw	r4,144(sp)
    e578:	2089883a 	add	r4,r4,r2
    e57c:	d9002415 	stw	r4,144(sp)
    e580:	003e1806 	br	dde4 <__alt_data_end+0xfffedde4>
    e584:	d9801a04 	addi	r6,sp,104
    e588:	b80b883a 	mov	r5,r23
    e58c:	a809883a 	mov	r4,r21
    e590:	000d68c0 	call	d68c <__sprint_r.part.0>
    e594:	103fba1e 	bne	r2,zero,e480 <__alt_data_end+0xfffee480>
    e598:	d9001b17 	ldw	r4,108(sp)
    e59c:	d8801c17 	ldw	r2,112(sp)
    e5a0:	d811883a 	mov	r8,sp
    e5a4:	21400044 	addi	r5,r4,1
    e5a8:	003fd606 	br	e504 <__alt_data_end+0xfffee504>
    e5ac:	d9402017 	ldw	r5,128(sp)
    e5b0:	d9002117 	ldw	r4,132(sp)
    e5b4:	d9801a04 	addi	r6,sp,104
    e5b8:	000d68c0 	call	d68c <__sprint_r.part.0>
    e5bc:	103fb01e 	bne	r2,zero,e480 <__alt_data_end+0xfffee480>
    e5c0:	d8801c17 	ldw	r2,112(sp)
    e5c4:	d8c02517 	ldw	r3,148(sp)
    e5c8:	1cc0010e 	bge	r3,r19,e5d0 <___vfiprintf_internal_r+0xe30>
    e5cc:	9807883a 	mov	r3,r19
    e5d0:	d9002417 	ldw	r4,144(sp)
    e5d4:	20c9883a 	add	r4,r4,r3
    e5d8:	d9002415 	stw	r4,144(sp)
    e5dc:	103e0126 	beq	r2,zero,dde4 <__alt_data_end+0xfffedde4>
    e5e0:	d9402017 	ldw	r5,128(sp)
    e5e4:	d9002117 	ldw	r4,132(sp)
    e5e8:	d9801a04 	addi	r6,sp,104
    e5ec:	000d68c0 	call	d68c <__sprint_r.part.0>
    e5f0:	103dfc26 	beq	r2,zero,dde4 <__alt_data_end+0xfffedde4>
    e5f4:	003fa206 	br	e480 <__alt_data_end+0xfffee480>
    e5f8:	d9402017 	ldw	r5,128(sp)
    e5fc:	d9002117 	ldw	r4,132(sp)
    e600:	d9801a04 	addi	r6,sp,104
    e604:	d9c02b15 	stw	r7,172(sp)
    e608:	000d68c0 	call	d68c <__sprint_r.part.0>
    e60c:	d9c02b17 	ldw	r7,172(sp)
    e610:	103f9b1e 	bne	r2,zero,e480 <__alt_data_end+0xfffee480>
    e614:	d9001b17 	ldw	r4,108(sp)
    e618:	d8801c17 	ldw	r2,112(sp)
    e61c:	d811883a 	mov	r8,sp
    e620:	21800044 	addi	r6,r4,1
    e624:	003dbf06 	br	dd24 <__alt_data_end+0xfffedd24>
    e628:	1000d81e 	bne	r2,zero,e98c <___vfiprintf_internal_r+0x11ec>
    e62c:	d9001d87 	ldb	r4,118(sp)
    e630:	20000a26 	beq	r4,zero,e65c <___vfiprintf_internal_r+0xebc>
    e634:	00800044 	movi	r2,1
    e638:	d9001d84 	addi	r4,sp,118
    e63c:	100b883a 	mov	r5,r2
    e640:	d9000015 	stw	r4,0(sp)
    e644:	d8800115 	stw	r2,4(sp)
    e648:	d811883a 	mov	r8,sp
    e64c:	2809883a 	mov	r4,r5
    e650:	42000204 	addi	r8,r8,8
    e654:	29400044 	addi	r5,r5,1
    e658:	003d9506 	br	dcb0 <__alt_data_end+0xfffedcb0>
    e65c:	3800fd26 	beq	r7,zero,ea54 <___vfiprintf_internal_r+0x12b4>
    e660:	00800084 	movi	r2,2
    e664:	d9001d04 	addi	r4,sp,116
    e668:	d9000015 	stw	r4,0(sp)
    e66c:	d8800115 	stw	r2,4(sp)
    e670:	01400044 	movi	r5,1
    e674:	d811883a 	mov	r8,sp
    e678:	2809883a 	mov	r4,r5
    e67c:	42000204 	addi	r8,r8,8
    e680:	29400044 	addi	r5,r5,1
    e684:	003f4606 	br	e3a0 <__alt_data_end+0xfffee3a0>
    e688:	d8802517 	ldw	r2,148(sp)
    e68c:	14c0010e 	bge	r2,r19,e694 <___vfiprintf_internal_r+0xef4>
    e690:	9805883a 	mov	r2,r19
    e694:	d9402417 	ldw	r5,144(sp)
    e698:	288b883a 	add	r5,r5,r2
    e69c:	d9402415 	stw	r5,144(sp)
    e6a0:	003dd006 	br	dde4 <__alt_data_end+0xfffedde4>
    e6a4:	d8001d85 	stb	zero,118(sp)
    e6a8:	80005d16 	blt	r16,zero,e820 <___vfiprintf_internal_r+0x1080>
    e6ac:	00ffdfc4 	movi	r3,-129
    e6b0:	9d04b03a 	or	r2,r19,r20
    e6b4:	88e2703a 	and	r17,r17,r3
    e6b8:	103d3726 	beq	r2,zero,db98 <__alt_data_end+0xfffedb98>
    e6bc:	002b883a 	mov	r21,zero
    e6c0:	d9002617 	ldw	r4,152(sp)
    e6c4:	ddc01a04 	addi	r23,sp,104
    e6c8:	988003cc 	andi	r2,r19,15
    e6cc:	a006973a 	slli	r3,r20,28
    e6d0:	2085883a 	add	r2,r4,r2
    e6d4:	9826d13a 	srli	r19,r19,4
    e6d8:	10800003 	ldbu	r2,0(r2)
    e6dc:	a028d13a 	srli	r20,r20,4
    e6e0:	bdffffc4 	addi	r23,r23,-1
    e6e4:	1ce6b03a 	or	r19,r3,r19
    e6e8:	b8800005 	stb	r2,0(r23)
    e6ec:	9d04b03a 	or	r2,r19,r20
    e6f0:	103ff51e 	bne	r2,zero,e6c8 <__alt_data_end+0xfffee6c8>
    e6f4:	d8801e17 	ldw	r2,120(sp)
    e6f8:	15e9c83a 	sub	r20,r2,r23
    e6fc:	003d2b06 	br	dbac <__alt_data_end+0xfffedbac>
    e700:	d9402017 	ldw	r5,128(sp)
    e704:	d9002117 	ldw	r4,132(sp)
    e708:	d9801a04 	addi	r6,sp,104
    e70c:	000d68c0 	call	d68c <__sprint_r.part.0>
    e710:	103f5b1e 	bne	r2,zero,e480 <__alt_data_end+0xfffee480>
    e714:	d8801c17 	ldw	r2,112(sp)
    e718:	d811883a 	mov	r8,sp
    e71c:	003f6706 	br	e4bc <__alt_data_end+0xfffee4bc>
    e720:	d9402017 	ldw	r5,128(sp)
    e724:	d9002117 	ldw	r4,132(sp)
    e728:	d9801a04 	addi	r6,sp,104
    e72c:	000d68c0 	call	d68c <__sprint_r.part.0>
    e730:	103f531e 	bne	r2,zero,e480 <__alt_data_end+0xfffee480>
    e734:	d811883a 	mov	r8,sp
    e738:	003cd906 	br	daa0 <__alt_data_end+0xfffedaa0>
    e73c:	10803fcc 	andi	r2,r2,255
    e740:	1080201c 	xori	r2,r2,128
    e744:	10bfe004 	addi	r2,r2,-128
    e748:	00c00c04 	movi	r3,48
    e74c:	10ffe926 	beq	r2,r3,e6f4 <__alt_data_end+0xfffee6f4>
    e750:	b8ffffc5 	stb	r3,-1(r23)
    e754:	d8c01e17 	ldw	r3,120(sp)
    e758:	b8bfffc4 	addi	r2,r23,-1
    e75c:	102f883a 	mov	r23,r2
    e760:	18a9c83a 	sub	r20,r3,r2
    e764:	003d1106 	br	dbac <__alt_data_end+0xfffedbac>
    e768:	d9402017 	ldw	r5,128(sp)
    e76c:	d9002117 	ldw	r4,132(sp)
    e770:	d9801a04 	addi	r6,sp,104
    e774:	d8c02a15 	stw	r3,168(sp)
    e778:	d9c02b15 	stw	r7,172(sp)
    e77c:	000d68c0 	call	d68c <__sprint_r.part.0>
    e780:	d8c02a17 	ldw	r3,168(sp)
    e784:	d9c02b17 	ldw	r7,172(sp)
    e788:	103f3d1e 	bne	r2,zero,e480 <__alt_data_end+0xfffee480>
    e78c:	d9001b17 	ldw	r4,108(sp)
    e790:	d8801c17 	ldw	r2,112(sp)
    e794:	d811883a 	mov	r8,sp
    e798:	21400044 	addi	r5,r4,1
    e79c:	003d4406 	br	dcb0 <__alt_data_end+0xfffedcb0>
    e7a0:	d9402017 	ldw	r5,128(sp)
    e7a4:	d9002117 	ldw	r4,132(sp)
    e7a8:	d9801a04 	addi	r6,sp,104
    e7ac:	d8c02a15 	stw	r3,168(sp)
    e7b0:	000d68c0 	call	d68c <__sprint_r.part.0>
    e7b4:	d8c02a17 	ldw	r3,168(sp)
    e7b8:	103f311e 	bne	r2,zero,e480 <__alt_data_end+0xfffee480>
    e7bc:	d9001b17 	ldw	r4,108(sp)
    e7c0:	d8801c17 	ldw	r2,112(sp)
    e7c4:	d811883a 	mov	r8,sp
    e7c8:	21400044 	addi	r5,r4,1
    e7cc:	003ef406 	br	e3a0 <__alt_data_end+0xfffee3a0>
    e7d0:	1000bd1e 	bne	r2,zero,eac8 <___vfiprintf_internal_r+0x1328>
    e7d4:	01400044 	movi	r5,1
    e7d8:	0009883a 	mov	r4,zero
    e7dc:	d811883a 	mov	r8,sp
    e7e0:	003ef106 	br	e3a8 <__alt_data_end+0xfffee3a8>
    e7e4:	d9402017 	ldw	r5,128(sp)
    e7e8:	d9002117 	ldw	r4,132(sp)
    e7ec:	d9801a04 	addi	r6,sp,104
    e7f0:	000d68c0 	call	d68c <__sprint_r.part.0>
    e7f4:	103f221e 	bne	r2,zero,e480 <__alt_data_end+0xfffee480>
    e7f8:	d9401b17 	ldw	r5,108(sp)
    e7fc:	d8801c17 	ldw	r2,112(sp)
    e800:	d811883a 	mov	r8,sp
    e804:	29400044 	addi	r5,r5,1
    e808:	003d6206 	br	dd94 <__alt_data_end+0xfffedd94>
    e80c:	01400074 	movhi	r5,1
    e810:	294af904 	addi	r5,r5,11236
    e814:	d9402615 	stw	r5,152(sp)
    e818:	d8c02215 	stw	r3,136(sp)
    e81c:	1023883a 	mov	r17,r2
    e820:	9d04b03a 	or	r2,r19,r20
    e824:	103fa51e 	bne	r2,zero,e6bc <__alt_data_end+0xfffee6bc>
    e828:	002b883a 	mov	r21,zero
    e82c:	00800084 	movi	r2,2
    e830:	003e4a06 	br	e15c <__alt_data_end+0xfffee15c>
    e834:	01400074 	movhi	r5,1
    e838:	294af904 	addi	r5,r5,11236
    e83c:	002b883a 	mov	r21,zero
    e840:	d9402615 	stw	r5,152(sp)
    e844:	003f9e06 	br	e6c0 <__alt_data_end+0xfffee6c0>
    e848:	d9402217 	ldw	r5,136(sp)
    e84c:	d8001d85 	stb	zero,118(sp)
    e850:	0029883a 	mov	r20,zero
    e854:	28800104 	addi	r2,r5,4
    e858:	2cc00017 	ldw	r19,0(r5)
    e85c:	803e3a16 	blt	r16,zero,e148 <__alt_data_end+0xfffee148>
    e860:	00ffdfc4 	movi	r3,-129
    e864:	d8802215 	stw	r2,136(sp)
    e868:	88e2703a 	and	r17,r17,r3
    e86c:	002b883a 	mov	r21,zero
    e870:	983e9b26 	beq	r19,zero,e2e0 <__alt_data_end+0xfffee2e0>
    e874:	00800244 	movi	r2,9
    e878:	14fdc936 	bltu	r2,r19,dfa0 <__alt_data_end+0xfffedfa0>
    e87c:	003e9a06 	br	e2e8 <__alt_data_end+0xfffee2e8>
    e880:	00800c04 	movi	r2,48
    e884:	d8c01d45 	stb	r3,117(sp)
    e888:	d8801d05 	stb	r2,116(sp)
    e88c:	d8001d85 	stb	zero,118(sp)
    e890:	88c00094 	ori	r3,r17,2
    e894:	80009c16 	blt	r16,zero,eb08 <___vfiprintf_internal_r+0x1368>
    e898:	00bfdfc4 	movi	r2,-129
    e89c:	88a2703a 	and	r17,r17,r2
    e8a0:	8c400094 	ori	r17,r17,2
    e8a4:	002b883a 	mov	r21,zero
    e8a8:	003f8506 	br	e6c0 <__alt_data_end+0xfffee6c0>
    e8ac:	b029883a 	mov	r20,r22
    e8b0:	003c0b06 	br	d8e0 <__alt_data_end+0xfffed8e0>
    e8b4:	04e7c83a 	sub	r19,zero,r19
    e8b8:	05400b44 	movi	r21,45
    e8bc:	9804c03a 	cmpne	r2,r19,zero
    e8c0:	0529c83a 	sub	r20,zero,r20
    e8c4:	dd401d85 	stb	r21,118(sp)
    e8c8:	a0a9c83a 	sub	r20,r20,r2
    e8cc:	80009716 	blt	r16,zero,eb2c <___vfiprintf_internal_r+0x138c>
    e8d0:	00bfdfc4 	movi	r2,-129
    e8d4:	88a2703a 	and	r17,r17,r2
    e8d8:	003db006 	br	df9c <__alt_data_end+0xfffedf9c>
    e8dc:	b0c00007 	ldb	r3,0(r22)
    e8e0:	003c0c06 	br	d914 <__alt_data_end+0xfffed914>
    e8e4:	8880100c 	andi	r2,r17,64
    e8e8:	d8001d85 	stb	zero,118(sp)
    e8ec:	1000461e 	bne	r2,zero,ea08 <___vfiprintf_internal_r+0x1268>
    e8f0:	d9002217 	ldw	r4,136(sp)
    e8f4:	0029883a 	mov	r20,zero
    e8f8:	20800104 	addi	r2,r4,4
    e8fc:	24c00017 	ldw	r19,0(r4)
    e900:	803df80e 	bge	r16,zero,e0e4 <__alt_data_end+0xfffee0e4>
    e904:	9d06b03a 	or	r3,r19,r20
    e908:	d8802215 	stw	r2,136(sp)
    e90c:	183d5e1e 	bne	r3,zero,de88 <__alt_data_end+0xfffede88>
    e910:	002b883a 	mov	r21,zero
    e914:	0005883a 	mov	r2,zero
    e918:	003e1006 	br	e15c <__alt_data_end+0xfffee15c>
    e91c:	8880040c 	andi	r2,r17,16
    e920:	1000321e 	bne	r2,zero,e9ec <___vfiprintf_internal_r+0x124c>
    e924:	8c40100c 	andi	r17,r17,64
    e928:	88008d26 	beq	r17,zero,eb60 <___vfiprintf_internal_r+0x13c0>
    e92c:	d9402217 	ldw	r5,136(sp)
    e930:	d8c02417 	ldw	r3,144(sp)
    e934:	28800017 	ldw	r2,0(r5)
    e938:	29400104 	addi	r5,r5,4
    e93c:	d9402215 	stw	r5,136(sp)
    e940:	10c0000d 	sth	r3,0(r2)
    e944:	003bca06 	br	d870 <__alt_data_end+0xfffed870>
    e948:	8880100c 	andi	r2,r17,64
    e94c:	10003a26 	beq	r2,zero,ea38 <___vfiprintf_internal_r+0x1298>
    e950:	d8802217 	ldw	r2,136(sp)
    e954:	14c0000f 	ldh	r19,0(r2)
    e958:	10800104 	addi	r2,r2,4
    e95c:	d8802215 	stw	r2,136(sp)
    e960:	9829d7fa 	srai	r20,r19,31
    e964:	a005883a 	mov	r2,r20
    e968:	003d8506 	br	df80 <__alt_data_end+0xfffedf80>
    e96c:	8880100c 	andi	r2,r17,64
    e970:	10002b26 	beq	r2,zero,ea20 <___vfiprintf_internal_r+0x1280>
    e974:	d8802217 	ldw	r2,136(sp)
    e978:	0029883a 	mov	r20,zero
    e97c:	14c0000b 	ldhu	r19,0(r2)
    e980:	10800104 	addi	r2,r2,4
    e984:	d8802215 	stw	r2,136(sp)
    e988:	003d5d06 	br	df00 <__alt_data_end+0xfffedf00>
    e98c:	d9402017 	ldw	r5,128(sp)
    e990:	d9002117 	ldw	r4,132(sp)
    e994:	d9801a04 	addi	r6,sp,104
    e998:	d8c02a15 	stw	r3,168(sp)
    e99c:	d9c02b15 	stw	r7,172(sp)
    e9a0:	000d68c0 	call	d68c <__sprint_r.part.0>
    e9a4:	d8c02a17 	ldw	r3,168(sp)
    e9a8:	d9c02b17 	ldw	r7,172(sp)
    e9ac:	103eb41e 	bne	r2,zero,e480 <__alt_data_end+0xfffee480>
    e9b0:	d9001b17 	ldw	r4,108(sp)
    e9b4:	d8801c17 	ldw	r2,112(sp)
    e9b8:	d811883a 	mov	r8,sp
    e9bc:	21400044 	addi	r5,r4,1
    e9c0:	003e6706 	br	e360 <__alt_data_end+0xfffee360>
    e9c4:	00bfffc4 	movi	r2,-1
    e9c8:	003c4a06 	br	daf4 <__alt_data_end+0xfffedaf4>
    e9cc:	9805883a 	mov	r2,r19
    e9d0:	003ee806 	br	e574 <__alt_data_end+0xfffee574>
    e9d4:	d8c02217 	ldw	r3,136(sp)
    e9d8:	0029883a 	mov	r20,zero
    e9dc:	18800104 	addi	r2,r3,4
    e9e0:	1cc0000b 	ldhu	r19,0(r3)
    e9e4:	803f9e0e 	bge	r16,zero,e860 <__alt_data_end+0xfffee860>
    e9e8:	003dd706 	br	e148 <__alt_data_end+0xfffee148>
    e9ec:	d8c02217 	ldw	r3,136(sp)
    e9f0:	d9002417 	ldw	r4,144(sp)
    e9f4:	18800017 	ldw	r2,0(r3)
    e9f8:	18c00104 	addi	r3,r3,4
    e9fc:	d8c02215 	stw	r3,136(sp)
    ea00:	11000015 	stw	r4,0(r2)
    ea04:	003b9a06 	br	d870 <__alt_data_end+0xfffed870>
    ea08:	d8c02217 	ldw	r3,136(sp)
    ea0c:	0029883a 	mov	r20,zero
    ea10:	18800104 	addi	r2,r3,4
    ea14:	1cc0000b 	ldhu	r19,0(r3)
    ea18:	803db20e 	bge	r16,zero,e0e4 <__alt_data_end+0xfffee0e4>
    ea1c:	003fb906 	br	e904 <__alt_data_end+0xfffee904>
    ea20:	d9002217 	ldw	r4,136(sp)
    ea24:	0029883a 	mov	r20,zero
    ea28:	24c00017 	ldw	r19,0(r4)
    ea2c:	21000104 	addi	r4,r4,4
    ea30:	d9002215 	stw	r4,136(sp)
    ea34:	003d3206 	br	df00 <__alt_data_end+0xfffedf00>
    ea38:	d8c02217 	ldw	r3,136(sp)
    ea3c:	1cc00017 	ldw	r19,0(r3)
    ea40:	18c00104 	addi	r3,r3,4
    ea44:	d8c02215 	stw	r3,136(sp)
    ea48:	9829d7fa 	srai	r20,r19,31
    ea4c:	a005883a 	mov	r2,r20
    ea50:	003d4b06 	br	df80 <__alt_data_end+0xfffedf80>
    ea54:	0009883a 	mov	r4,zero
    ea58:	01400044 	movi	r5,1
    ea5c:	d811883a 	mov	r8,sp
    ea60:	003e4f06 	br	e3a0 <__alt_data_end+0xfffee3a0>
    ea64:	d8c02215 	stw	r3,136(sp)
    ea68:	002b883a 	mov	r21,zero
    ea6c:	003db806 	br	e150 <__alt_data_end+0xfffee150>
    ea70:	d811883a 	mov	r8,sp
    ea74:	003e9606 	br	e4d0 <__alt_data_end+0xfffee4d0>
    ea78:	01000074 	movhi	r4,1
    ea7c:	210b5904 	addi	r4,r4,11620
    ea80:	d9002315 	stw	r4,140(sp)
    ea84:	003e6306 	br	e414 <__alt_data_end+0xfffee414>
    ea88:	b0c00043 	ldbu	r3,1(r22)
    ea8c:	8c400814 	ori	r17,r17,32
    ea90:	b5800044 	addi	r22,r22,1
    ea94:	18c03fcc 	andi	r3,r3,255
    ea98:	18c0201c 	xori	r3,r3,128
    ea9c:	18ffe004 	addi	r3,r3,-128
    eaa0:	003b9c06 	br	d914 <__alt_data_end+0xfffed914>
    eaa4:	b809883a 	mov	r4,r23
    eaa8:	da002a15 	stw	r8,168(sp)
    eaac:	00073900 	call	7390 <strlen>
    eab0:	1029883a 	mov	r20,r2
    eab4:	dd401d83 	ldbu	r21,118(sp)
    eab8:	df002215 	stw	fp,136(sp)
    eabc:	0021883a 	mov	r16,zero
    eac0:	da002a17 	ldw	r8,168(sp)
    eac4:	003c3906 	br	dbac <__alt_data_end+0xfffedbac>
    eac8:	d9402017 	ldw	r5,128(sp)
    eacc:	d9002117 	ldw	r4,132(sp)
    ead0:	d9801a04 	addi	r6,sp,104
    ead4:	000d68c0 	call	d68c <__sprint_r.part.0>
    ead8:	103e691e 	bne	r2,zero,e480 <__alt_data_end+0xfffee480>
    eadc:	d9001b17 	ldw	r4,108(sp)
    eae0:	d8801c17 	ldw	r2,112(sp)
    eae4:	d811883a 	mov	r8,sp
    eae8:	21400044 	addi	r5,r4,1
    eaec:	003e2e06 	br	e3a8 <__alt_data_end+0xfffee3a8>
    eaf0:	01000074 	movhi	r4,1
    eaf4:	210b5d04 	addi	r4,r4,11636
    eaf8:	d9002315 	stw	r4,140(sp)
    eafc:	d9001b17 	ldw	r4,108(sp)
    eb00:	21000044 	addi	r4,r4,1
    eb04:	003c5e06 	br	dc80 <__alt_data_end+0xfffedc80>
    eb08:	002b883a 	mov	r21,zero
    eb0c:	00800084 	movi	r2,2
    eb10:	10803fcc 	andi	r2,r2,255
    eb14:	01000044 	movi	r4,1
    eb18:	11002b26 	beq	r2,r4,ebc8 <___vfiprintf_internal_r+0x1428>
    eb1c:	01000084 	movi	r4,2
    eb20:	11002b1e 	bne	r2,r4,ebd0 <___vfiprintf_internal_r+0x1430>
    eb24:	1823883a 	mov	r17,r3
    eb28:	003ee506 	br	e6c0 <__alt_data_end+0xfffee6c0>
    eb2c:	8807883a 	mov	r3,r17
    eb30:	00800044 	movi	r2,1
    eb34:	003ff606 	br	eb10 <__alt_data_end+0xfffeeb10>
    eb38:	00800184 	movi	r2,6
    eb3c:	1400012e 	bgeu	r2,r16,eb44 <___vfiprintf_internal_r+0x13a4>
    eb40:	1021883a 	mov	r16,r2
    eb44:	8029883a 	mov	r20,r16
    eb48:	8027883a 	mov	r19,r16
    eb4c:	80002216 	blt	r16,zero,ebd8 <___vfiprintf_internal_r+0x1438>
    eb50:	05c00074 	movhi	r23,1
    eb54:	df002215 	stw	fp,136(sp)
    eb58:	bdcafe04 	addi	r23,r23,11256
    eb5c:	003cfb06 	br	df4c <__alt_data_end+0xfffedf4c>
    eb60:	d9002217 	ldw	r4,136(sp)
    eb64:	d9402417 	ldw	r5,144(sp)
    eb68:	20800017 	ldw	r2,0(r4)
    eb6c:	21000104 	addi	r4,r4,4
    eb70:	d9002215 	stw	r4,136(sp)
    eb74:	11400015 	stw	r5,0(r2)
    eb78:	003b3d06 	br	d870 <__alt_data_end+0xfffed870>
    eb7c:	01400074 	movhi	r5,1
    eb80:	294b5d04 	addi	r5,r5,11636
    eb84:	d9402315 	stw	r5,140(sp)
    eb88:	d9401b17 	ldw	r5,108(sp)
    eb8c:	29400044 	addi	r5,r5,1
    eb90:	003e6d06 	br	e548 <__alt_data_end+0xfffee548>
    eb94:	8029883a 	mov	r20,r16
    eb98:	dd401d83 	ldbu	r21,118(sp)
    eb9c:	df002215 	stw	fp,136(sp)
    eba0:	0021883a 	mov	r16,zero
    eba4:	003c0106 	br	dbac <__alt_data_end+0xfffedbac>
    eba8:	00c00074 	movhi	r3,1
    ebac:	18cb5904 	addi	r3,r3,11620
    ebb0:	d8c02315 	stw	r3,140(sp)
    ebb4:	280d883a 	mov	r6,r5
    ebb8:	003c6906 	br	dd60 <__alt_data_end+0xfffedd60>
    ebbc:	802d883a 	mov	r22,r16
    ebc0:	0021883a 	mov	r16,zero
    ebc4:	003b5406 	br	d918 <__alt_data_end+0xfffed918>
    ebc8:	1823883a 	mov	r17,r3
    ebcc:	003cf306 	br	df9c <__alt_data_end+0xfffedf9c>
    ebd0:	1823883a 	mov	r17,r3
    ebd4:	003cad06 	br	de8c <__alt_data_end+0xfffede8c>
    ebd8:	0027883a 	mov	r19,zero
    ebdc:	003fdc06 	br	eb50 <__alt_data_end+0xfffeeb50>
    ebe0:	d9402217 	ldw	r5,136(sp)
    ebe4:	8005883a 	mov	r2,r16
    ebe8:	b0c00043 	ldbu	r3,1(r22)
    ebec:	2c000017 	ldw	r16,0(r5)
    ebf0:	29000104 	addi	r4,r5,4
    ebf4:	d9002215 	stw	r4,136(sp)
    ebf8:	102d883a 	mov	r22,r2
    ebfc:	803fa50e 	bge	r16,zero,ea94 <__alt_data_end+0xfffeea94>
    ec00:	18c03fcc 	andi	r3,r3,255
    ec04:	18c0201c 	xori	r3,r3,128
    ec08:	043fffc4 	movi	r16,-1
    ec0c:	18ffe004 	addi	r3,r3,-128
    ec10:	003b4006 	br	d914 <__alt_data_end+0xfffed914>
    ec14:	d9402303 	ldbu	r5,140(sp)
    ec18:	d9401d85 	stb	r5,118(sp)
    ec1c:	003cae06 	br	ded8 <__alt_data_end+0xfffeded8>
    ec20:	d8c02303 	ldbu	r3,140(sp)
    ec24:	d8c01d85 	stb	r3,118(sp)
    ec28:	003d1406 	br	e07c <__alt_data_end+0xfffee07c>
    ec2c:	d8c02303 	ldbu	r3,140(sp)
    ec30:	d8c01d85 	stb	r3,118(sp)
    ec34:	003cca06 	br	df60 <__alt_data_end+0xfffedf60>
    ec38:	8880004c 	andi	r2,r17,1
    ec3c:	002b883a 	mov	r21,zero
    ec40:	10000526 	beq	r2,zero,ec58 <___vfiprintf_internal_r+0x14b8>
    ec44:	00800c04 	movi	r2,48
    ec48:	d88019c5 	stb	r2,103(sp)
    ec4c:	dd002817 	ldw	r20,160(sp)
    ec50:	ddc019c4 	addi	r23,sp,103
    ec54:	003bd506 	br	dbac <__alt_data_end+0xfffedbac>
    ec58:	0029883a 	mov	r20,zero
    ec5c:	ddc01a04 	addi	r23,sp,104
    ec60:	003bd206 	br	dbac <__alt_data_end+0xfffedbac>
    ec64:	d9002303 	ldbu	r4,140(sp)
    ec68:	d9001d85 	stb	r4,118(sp)
    ec6c:	003da606 	br	e308 <__alt_data_end+0xfffee308>
    ec70:	d8c02303 	ldbu	r3,140(sp)
    ec74:	d8c01d85 	stb	r3,118(sp)
    ec78:	003c7606 	br	de54 <__alt_data_end+0xfffede54>
    ec7c:	d8c02303 	ldbu	r3,140(sp)
    ec80:	d8c01d85 	stb	r3,118(sp)
    ec84:	003c6506 	br	de1c <__alt_data_end+0xfffede1c>
    ec88:	d9002303 	ldbu	r4,140(sp)
    ec8c:	d9001d85 	stb	r4,118(sp)
    ec90:	003d3d06 	br	e188 <__alt_data_end+0xfffee188>
    ec94:	d8c02303 	ldbu	r3,140(sp)
    ec98:	d8c01d85 	stb	r3,118(sp)
    ec9c:	003d1d06 	br	e114 <__alt_data_end+0xfffee114>
    eca0:	d8c02303 	ldbu	r3,140(sp)
    eca4:	d8c01d85 	stb	r3,118(sp)
    eca8:	003d0306 	br	e0b8 <__alt_data_end+0xfffee0b8>

0000ecac <__vfiprintf_internal>:
    ecac:	00800074 	movhi	r2,1
    ecb0:	10921d04 	addi	r2,r2,18548
    ecb4:	300f883a 	mov	r7,r6
    ecb8:	280d883a 	mov	r6,r5
    ecbc:	200b883a 	mov	r5,r4
    ecc0:	11000017 	ldw	r4,0(r2)
    ecc4:	000d7a01 	jmpi	d7a0 <___vfiprintf_internal_r>

0000ecc8 <__sbprintf>:
    ecc8:	2880030b 	ldhu	r2,12(r5)
    eccc:	2ac01917 	ldw	r11,100(r5)
    ecd0:	2a80038b 	ldhu	r10,14(r5)
    ecd4:	2a400717 	ldw	r9,28(r5)
    ecd8:	2a000917 	ldw	r8,36(r5)
    ecdc:	defee204 	addi	sp,sp,-1144
    ece0:	00c10004 	movi	r3,1024
    ece4:	dc011a15 	stw	r16,1128(sp)
    ece8:	10bfff4c 	andi	r2,r2,65533
    ecec:	2821883a 	mov	r16,r5
    ecf0:	d8cb883a 	add	r5,sp,r3
    ecf4:	dc811c15 	stw	r18,1136(sp)
    ecf8:	dc411b15 	stw	r17,1132(sp)
    ecfc:	dfc11d15 	stw	ra,1140(sp)
    ed00:	2025883a 	mov	r18,r4
    ed04:	d881030d 	sth	r2,1036(sp)
    ed08:	dac11915 	stw	r11,1124(sp)
    ed0c:	da81038d 	sth	r10,1038(sp)
    ed10:	da410715 	stw	r9,1052(sp)
    ed14:	da010915 	stw	r8,1060(sp)
    ed18:	dec10015 	stw	sp,1024(sp)
    ed1c:	dec10415 	stw	sp,1040(sp)
    ed20:	d8c10215 	stw	r3,1032(sp)
    ed24:	d8c10515 	stw	r3,1044(sp)
    ed28:	d8010615 	stw	zero,1048(sp)
    ed2c:	000d7a00 	call	d7a0 <___vfiprintf_internal_r>
    ed30:	1023883a 	mov	r17,r2
    ed34:	10000416 	blt	r2,zero,ed48 <__sbprintf+0x80>
    ed38:	d9410004 	addi	r5,sp,1024
    ed3c:	9009883a 	mov	r4,r18
    ed40:	0004eb40 	call	4eb4 <_fflush_r>
    ed44:	10000d1e 	bne	r2,zero,ed7c <__sbprintf+0xb4>
    ed48:	d881030b 	ldhu	r2,1036(sp)
    ed4c:	1080100c 	andi	r2,r2,64
    ed50:	10000326 	beq	r2,zero,ed60 <__sbprintf+0x98>
    ed54:	8080030b 	ldhu	r2,12(r16)
    ed58:	10801014 	ori	r2,r2,64
    ed5c:	8080030d 	sth	r2,12(r16)
    ed60:	8805883a 	mov	r2,r17
    ed64:	dfc11d17 	ldw	ra,1140(sp)
    ed68:	dc811c17 	ldw	r18,1136(sp)
    ed6c:	dc411b17 	ldw	r17,1132(sp)
    ed70:	dc011a17 	ldw	r16,1128(sp)
    ed74:	dec11e04 	addi	sp,sp,1144
    ed78:	f800283a 	ret
    ed7c:	047fffc4 	movi	r17,-1
    ed80:	003ff106 	br	ed48 <__alt_data_end+0xfffeed48>

0000ed84 <__swbuf_r>:
    ed84:	defffb04 	addi	sp,sp,-20
    ed88:	dcc00315 	stw	r19,12(sp)
    ed8c:	dc800215 	stw	r18,8(sp)
    ed90:	dc000015 	stw	r16,0(sp)
    ed94:	dfc00415 	stw	ra,16(sp)
    ed98:	dc400115 	stw	r17,4(sp)
    ed9c:	2025883a 	mov	r18,r4
    eda0:	2827883a 	mov	r19,r5
    eda4:	3021883a 	mov	r16,r6
    eda8:	20000226 	beq	r4,zero,edb4 <__swbuf_r+0x30>
    edac:	20800e17 	ldw	r2,56(r4)
    edb0:	10004226 	beq	r2,zero,eebc <__swbuf_r+0x138>
    edb4:	80800617 	ldw	r2,24(r16)
    edb8:	8100030b 	ldhu	r4,12(r16)
    edbc:	80800215 	stw	r2,8(r16)
    edc0:	2080020c 	andi	r2,r4,8
    edc4:	10003626 	beq	r2,zero,eea0 <__swbuf_r+0x11c>
    edc8:	80c00417 	ldw	r3,16(r16)
    edcc:	18003426 	beq	r3,zero,eea0 <__swbuf_r+0x11c>
    edd0:	2088000c 	andi	r2,r4,8192
    edd4:	9c403fcc 	andi	r17,r19,255
    edd8:	10001a26 	beq	r2,zero,ee44 <__swbuf_r+0xc0>
    eddc:	80800017 	ldw	r2,0(r16)
    ede0:	81000517 	ldw	r4,20(r16)
    ede4:	10c7c83a 	sub	r3,r2,r3
    ede8:	1900200e 	bge	r3,r4,ee6c <__swbuf_r+0xe8>
    edec:	18c00044 	addi	r3,r3,1
    edf0:	81000217 	ldw	r4,8(r16)
    edf4:	11400044 	addi	r5,r2,1
    edf8:	81400015 	stw	r5,0(r16)
    edfc:	213fffc4 	addi	r4,r4,-1
    ee00:	81000215 	stw	r4,8(r16)
    ee04:	14c00005 	stb	r19,0(r2)
    ee08:	80800517 	ldw	r2,20(r16)
    ee0c:	10c01e26 	beq	r2,r3,ee88 <__swbuf_r+0x104>
    ee10:	8080030b 	ldhu	r2,12(r16)
    ee14:	1080004c 	andi	r2,r2,1
    ee18:	10000226 	beq	r2,zero,ee24 <__swbuf_r+0xa0>
    ee1c:	00800284 	movi	r2,10
    ee20:	88801926 	beq	r17,r2,ee88 <__swbuf_r+0x104>
    ee24:	8805883a 	mov	r2,r17
    ee28:	dfc00417 	ldw	ra,16(sp)
    ee2c:	dcc00317 	ldw	r19,12(sp)
    ee30:	dc800217 	ldw	r18,8(sp)
    ee34:	dc400117 	ldw	r17,4(sp)
    ee38:	dc000017 	ldw	r16,0(sp)
    ee3c:	dec00504 	addi	sp,sp,20
    ee40:	f800283a 	ret
    ee44:	81401917 	ldw	r5,100(r16)
    ee48:	00b7ffc4 	movi	r2,-8193
    ee4c:	21080014 	ori	r4,r4,8192
    ee50:	2884703a 	and	r2,r5,r2
    ee54:	80801915 	stw	r2,100(r16)
    ee58:	80800017 	ldw	r2,0(r16)
    ee5c:	8100030d 	sth	r4,12(r16)
    ee60:	81000517 	ldw	r4,20(r16)
    ee64:	10c7c83a 	sub	r3,r2,r3
    ee68:	193fe016 	blt	r3,r4,edec <__alt_data_end+0xfffeedec>
    ee6c:	800b883a 	mov	r5,r16
    ee70:	9009883a 	mov	r4,r18
    ee74:	0004eb40 	call	4eb4 <_fflush_r>
    ee78:	1000071e 	bne	r2,zero,ee98 <__swbuf_r+0x114>
    ee7c:	80800017 	ldw	r2,0(r16)
    ee80:	00c00044 	movi	r3,1
    ee84:	003fda06 	br	edf0 <__alt_data_end+0xfffeedf0>
    ee88:	800b883a 	mov	r5,r16
    ee8c:	9009883a 	mov	r4,r18
    ee90:	0004eb40 	call	4eb4 <_fflush_r>
    ee94:	103fe326 	beq	r2,zero,ee24 <__alt_data_end+0xfffeee24>
    ee98:	00bfffc4 	movi	r2,-1
    ee9c:	003fe206 	br	ee28 <__alt_data_end+0xfffeee28>
    eea0:	800b883a 	mov	r5,r16
    eea4:	9009883a 	mov	r4,r18
    eea8:	000983c0 	call	983c <__swsetup_r>
    eeac:	103ffa1e 	bne	r2,zero,ee98 <__alt_data_end+0xfffeee98>
    eeb0:	8100030b 	ldhu	r4,12(r16)
    eeb4:	80c00417 	ldw	r3,16(r16)
    eeb8:	003fc506 	br	edd0 <__alt_data_end+0xfffeedd0>
    eebc:	00052a00 	call	52a0 <__sinit>
    eec0:	003fbc06 	br	edb4 <__alt_data_end+0xfffeedb4>

0000eec4 <__swbuf>:
    eec4:	00800074 	movhi	r2,1
    eec8:	10921d04 	addi	r2,r2,18548
    eecc:	280d883a 	mov	r6,r5
    eed0:	200b883a 	mov	r5,r4
    eed4:	11000017 	ldw	r4,0(r2)
    eed8:	000ed841 	jmpi	ed84 <__swbuf_r>

0000eedc <_calloc_r>:
    eedc:	defffe04 	addi	sp,sp,-8
    eee0:	2805883a 	mov	r2,r5
    eee4:	dc000015 	stw	r16,0(sp)
    eee8:	300b883a 	mov	r5,r6
    eeec:	2021883a 	mov	r16,r4
    eef0:	1009883a 	mov	r4,r2
    eef4:	dfc00115 	stw	ra,4(sp)
    eef8:	000197c0 	call	197c <__mulsi3>
    eefc:	100b883a 	mov	r5,r2
    ef00:	8009883a 	mov	r4,r16
    ef04:	00062c00 	call	62c0 <_malloc_r>
    ef08:	10002926 	beq	r2,zero,efb0 <_calloc_r+0xd4>
    ef0c:	11bfff17 	ldw	r6,-4(r2)
    ef10:	1021883a 	mov	r16,r2
    ef14:	00bfff04 	movi	r2,-4
    ef18:	308c703a 	and	r6,r6,r2
    ef1c:	00c00904 	movi	r3,36
    ef20:	308d883a 	add	r6,r6,r2
    ef24:	19801636 	bltu	r3,r6,ef80 <_calloc_r+0xa4>
    ef28:	008004c4 	movi	r2,19
    ef2c:	11800b2e 	bgeu	r2,r6,ef5c <_calloc_r+0x80>
    ef30:	80000015 	stw	zero,0(r16)
    ef34:	80000115 	stw	zero,4(r16)
    ef38:	008006c4 	movi	r2,27
    ef3c:	11801a2e 	bgeu	r2,r6,efa8 <_calloc_r+0xcc>
    ef40:	80000215 	stw	zero,8(r16)
    ef44:	80000315 	stw	zero,12(r16)
    ef48:	30c0151e 	bne	r6,r3,efa0 <_calloc_r+0xc4>
    ef4c:	80000415 	stw	zero,16(r16)
    ef50:	80800604 	addi	r2,r16,24
    ef54:	80000515 	stw	zero,20(r16)
    ef58:	00000106 	br	ef60 <_calloc_r+0x84>
    ef5c:	8005883a 	mov	r2,r16
    ef60:	10000015 	stw	zero,0(r2)
    ef64:	10000115 	stw	zero,4(r2)
    ef68:	10000215 	stw	zero,8(r2)
    ef6c:	8005883a 	mov	r2,r16
    ef70:	dfc00117 	ldw	ra,4(sp)
    ef74:	dc000017 	ldw	r16,0(sp)
    ef78:	dec00204 	addi	sp,sp,8
    ef7c:	f800283a 	ret
    ef80:	000b883a 	mov	r5,zero
    ef84:	8009883a 	mov	r4,r16
    ef88:	0006c140 	call	6c14 <memset>
    ef8c:	8005883a 	mov	r2,r16
    ef90:	dfc00117 	ldw	ra,4(sp)
    ef94:	dc000017 	ldw	r16,0(sp)
    ef98:	dec00204 	addi	sp,sp,8
    ef9c:	f800283a 	ret
    efa0:	80800404 	addi	r2,r16,16
    efa4:	003fee06 	br	ef60 <__alt_data_end+0xfffeef60>
    efa8:	80800204 	addi	r2,r16,8
    efac:	003fec06 	br	ef60 <__alt_data_end+0xfffeef60>
    efb0:	0005883a 	mov	r2,zero
    efb4:	003fee06 	br	ef70 <__alt_data_end+0xfffeef70>

0000efb8 <__fputwc>:
    efb8:	defff804 	addi	sp,sp,-32
    efbc:	dcc00415 	stw	r19,16(sp)
    efc0:	dc800315 	stw	r18,12(sp)
    efc4:	dc000115 	stw	r16,4(sp)
    efc8:	dfc00715 	stw	ra,28(sp)
    efcc:	dd400615 	stw	r21,24(sp)
    efd0:	dd000515 	stw	r20,20(sp)
    efd4:	dc400215 	stw	r17,8(sp)
    efd8:	2027883a 	mov	r19,r4
    efdc:	2825883a 	mov	r18,r5
    efe0:	3021883a 	mov	r16,r6
    efe4:	000ba640 	call	ba64 <__locale_mb_cur_max>
    efe8:	00c00044 	movi	r3,1
    efec:	10c03e26 	beq	r2,r3,f0e8 <__fputwc+0x130>
    eff0:	81c01704 	addi	r7,r16,92
    eff4:	900d883a 	mov	r6,r18
    eff8:	d80b883a 	mov	r5,sp
    effc:	9809883a 	mov	r4,r19
    f000:	000f1c00 	call	f1c0 <_wcrtomb_r>
    f004:	1029883a 	mov	r20,r2
    f008:	00bfffc4 	movi	r2,-1
    f00c:	a0802026 	beq	r20,r2,f090 <__fputwc+0xd8>
    f010:	d9400003 	ldbu	r5,0(sp)
    f014:	a0001c26 	beq	r20,zero,f088 <__fputwc+0xd0>
    f018:	0023883a 	mov	r17,zero
    f01c:	05400284 	movi	r21,10
    f020:	00000906 	br	f048 <__fputwc+0x90>
    f024:	80800017 	ldw	r2,0(r16)
    f028:	11400005 	stb	r5,0(r2)
    f02c:	80c00017 	ldw	r3,0(r16)
    f030:	18c00044 	addi	r3,r3,1
    f034:	80c00015 	stw	r3,0(r16)
    f038:	8c400044 	addi	r17,r17,1
    f03c:	dc45883a 	add	r2,sp,r17
    f040:	8d00112e 	bgeu	r17,r20,f088 <__fputwc+0xd0>
    f044:	11400003 	ldbu	r5,0(r2)
    f048:	80c00217 	ldw	r3,8(r16)
    f04c:	18ffffc4 	addi	r3,r3,-1
    f050:	80c00215 	stw	r3,8(r16)
    f054:	183ff30e 	bge	r3,zero,f024 <__alt_data_end+0xfffef024>
    f058:	80800617 	ldw	r2,24(r16)
    f05c:	18801916 	blt	r3,r2,f0c4 <__fputwc+0x10c>
    f060:	80800017 	ldw	r2,0(r16)
    f064:	11400005 	stb	r5,0(r2)
    f068:	80800017 	ldw	r2,0(r16)
    f06c:	10c00003 	ldbu	r3,0(r2)
    f070:	10800044 	addi	r2,r2,1
    f074:	1d402326 	beq	r3,r21,f104 <__fputwc+0x14c>
    f078:	80800015 	stw	r2,0(r16)
    f07c:	8c400044 	addi	r17,r17,1
    f080:	dc45883a 	add	r2,sp,r17
    f084:	8d3fef36 	bltu	r17,r20,f044 <__alt_data_end+0xfffef044>
    f088:	9005883a 	mov	r2,r18
    f08c:	00000406 	br	f0a0 <__fputwc+0xe8>
    f090:	80c0030b 	ldhu	r3,12(r16)
    f094:	a005883a 	mov	r2,r20
    f098:	18c01014 	ori	r3,r3,64
    f09c:	80c0030d 	sth	r3,12(r16)
    f0a0:	dfc00717 	ldw	ra,28(sp)
    f0a4:	dd400617 	ldw	r21,24(sp)
    f0a8:	dd000517 	ldw	r20,20(sp)
    f0ac:	dcc00417 	ldw	r19,16(sp)
    f0b0:	dc800317 	ldw	r18,12(sp)
    f0b4:	dc400217 	ldw	r17,8(sp)
    f0b8:	dc000117 	ldw	r16,4(sp)
    f0bc:	dec00804 	addi	sp,sp,32
    f0c0:	f800283a 	ret
    f0c4:	800d883a 	mov	r6,r16
    f0c8:	29403fcc 	andi	r5,r5,255
    f0cc:	9809883a 	mov	r4,r19
    f0d0:	000ed840 	call	ed84 <__swbuf_r>
    f0d4:	10bfffe0 	cmpeqi	r2,r2,-1
    f0d8:	10803fcc 	andi	r2,r2,255
    f0dc:	103fd626 	beq	r2,zero,f038 <__alt_data_end+0xfffef038>
    f0e0:	00bfffc4 	movi	r2,-1
    f0e4:	003fee06 	br	f0a0 <__alt_data_end+0xfffef0a0>
    f0e8:	90ffffc4 	addi	r3,r18,-1
    f0ec:	01003f84 	movi	r4,254
    f0f0:	20ffbf36 	bltu	r4,r3,eff0 <__alt_data_end+0xfffeeff0>
    f0f4:	900b883a 	mov	r5,r18
    f0f8:	dc800005 	stb	r18,0(sp)
    f0fc:	1029883a 	mov	r20,r2
    f100:	003fc506 	br	f018 <__alt_data_end+0xfffef018>
    f104:	800d883a 	mov	r6,r16
    f108:	a80b883a 	mov	r5,r21
    f10c:	9809883a 	mov	r4,r19
    f110:	000ed840 	call	ed84 <__swbuf_r>
    f114:	10bfffe0 	cmpeqi	r2,r2,-1
    f118:	003fef06 	br	f0d8 <__alt_data_end+0xfffef0d8>

0000f11c <_fputwc_r>:
    f11c:	3080030b 	ldhu	r2,12(r6)
    f120:	10c8000c 	andi	r3,r2,8192
    f124:	1800051e 	bne	r3,zero,f13c <_fputwc_r+0x20>
    f128:	30c01917 	ldw	r3,100(r6)
    f12c:	10880014 	ori	r2,r2,8192
    f130:	3080030d 	sth	r2,12(r6)
    f134:	18880014 	ori	r2,r3,8192
    f138:	30801915 	stw	r2,100(r6)
    f13c:	000efb81 	jmpi	efb8 <__fputwc>

0000f140 <fputwc>:
    f140:	00800074 	movhi	r2,1
    f144:	defffc04 	addi	sp,sp,-16
    f148:	10921d04 	addi	r2,r2,18548
    f14c:	dc000115 	stw	r16,4(sp)
    f150:	14000017 	ldw	r16,0(r2)
    f154:	dc400215 	stw	r17,8(sp)
    f158:	dfc00315 	stw	ra,12(sp)
    f15c:	2023883a 	mov	r17,r4
    f160:	80000226 	beq	r16,zero,f16c <fputwc+0x2c>
    f164:	80800e17 	ldw	r2,56(r16)
    f168:	10001026 	beq	r2,zero,f1ac <fputwc+0x6c>
    f16c:	2880030b 	ldhu	r2,12(r5)
    f170:	10c8000c 	andi	r3,r2,8192
    f174:	1800051e 	bne	r3,zero,f18c <fputwc+0x4c>
    f178:	28c01917 	ldw	r3,100(r5)
    f17c:	10880014 	ori	r2,r2,8192
    f180:	2880030d 	sth	r2,12(r5)
    f184:	18880014 	ori	r2,r3,8192
    f188:	28801915 	stw	r2,100(r5)
    f18c:	280d883a 	mov	r6,r5
    f190:	8009883a 	mov	r4,r16
    f194:	880b883a 	mov	r5,r17
    f198:	dfc00317 	ldw	ra,12(sp)
    f19c:	dc400217 	ldw	r17,8(sp)
    f1a0:	dc000117 	ldw	r16,4(sp)
    f1a4:	dec00404 	addi	sp,sp,16
    f1a8:	000efb81 	jmpi	efb8 <__fputwc>
    f1ac:	8009883a 	mov	r4,r16
    f1b0:	d9400015 	stw	r5,0(sp)
    f1b4:	00052a00 	call	52a0 <__sinit>
    f1b8:	d9400017 	ldw	r5,0(sp)
    f1bc:	003feb06 	br	f16c <__alt_data_end+0xfffef16c>

0000f1c0 <_wcrtomb_r>:
    f1c0:	defff604 	addi	sp,sp,-40
    f1c4:	00800074 	movhi	r2,1
    f1c8:	dc800815 	stw	r18,32(sp)
    f1cc:	dc400715 	stw	r17,28(sp)
    f1d0:	dc000615 	stw	r16,24(sp)
    f1d4:	10922104 	addi	r2,r2,18564
    f1d8:	dfc00915 	stw	ra,36(sp)
    f1dc:	2021883a 	mov	r16,r4
    f1e0:	3823883a 	mov	r17,r7
    f1e4:	14800017 	ldw	r18,0(r2)
    f1e8:	28001426 	beq	r5,zero,f23c <_wcrtomb_r+0x7c>
    f1ec:	d9400415 	stw	r5,16(sp)
    f1f0:	d9800515 	stw	r6,20(sp)
    f1f4:	000ba580 	call	ba58 <__locale_charset>
    f1f8:	d9800517 	ldw	r6,20(sp)
    f1fc:	d9400417 	ldw	r5,16(sp)
    f200:	100f883a 	mov	r7,r2
    f204:	dc400015 	stw	r17,0(sp)
    f208:	8009883a 	mov	r4,r16
    f20c:	903ee83a 	callr	r18
    f210:	00ffffc4 	movi	r3,-1
    f214:	10c0031e 	bne	r2,r3,f224 <_wcrtomb_r+0x64>
    f218:	88000015 	stw	zero,0(r17)
    f21c:	00c02284 	movi	r3,138
    f220:	80c00015 	stw	r3,0(r16)
    f224:	dfc00917 	ldw	ra,36(sp)
    f228:	dc800817 	ldw	r18,32(sp)
    f22c:	dc400717 	ldw	r17,28(sp)
    f230:	dc000617 	ldw	r16,24(sp)
    f234:	dec00a04 	addi	sp,sp,40
    f238:	f800283a 	ret
    f23c:	000ba580 	call	ba58 <__locale_charset>
    f240:	100f883a 	mov	r7,r2
    f244:	dc400015 	stw	r17,0(sp)
    f248:	000d883a 	mov	r6,zero
    f24c:	d9400104 	addi	r5,sp,4
    f250:	8009883a 	mov	r4,r16
    f254:	903ee83a 	callr	r18
    f258:	003fed06 	br	f210 <__alt_data_end+0xfffef210>

0000f25c <wcrtomb>:
    f25c:	defff604 	addi	sp,sp,-40
    f260:	00800074 	movhi	r2,1
    f264:	dc800615 	stw	r18,24(sp)
    f268:	dc400515 	stw	r17,20(sp)
    f26c:	10921d04 	addi	r2,r2,18548
    f270:	dfc00915 	stw	ra,36(sp)
    f274:	dd000815 	stw	r20,32(sp)
    f278:	dcc00715 	stw	r19,28(sp)
    f27c:	dc000415 	stw	r16,16(sp)
    f280:	3025883a 	mov	r18,r6
    f284:	14400017 	ldw	r17,0(r2)
    f288:	20001926 	beq	r4,zero,f2f0 <wcrtomb+0x94>
    f28c:	00800074 	movhi	r2,1
    f290:	10922104 	addi	r2,r2,18564
    f294:	15000017 	ldw	r20,0(r2)
    f298:	2021883a 	mov	r16,r4
    f29c:	2827883a 	mov	r19,r5
    f2a0:	000ba580 	call	ba58 <__locale_charset>
    f2a4:	100f883a 	mov	r7,r2
    f2a8:	dc800015 	stw	r18,0(sp)
    f2ac:	980d883a 	mov	r6,r19
    f2b0:	800b883a 	mov	r5,r16
    f2b4:	8809883a 	mov	r4,r17
    f2b8:	a03ee83a 	callr	r20
    f2bc:	00ffffc4 	movi	r3,-1
    f2c0:	10c0031e 	bne	r2,r3,f2d0 <wcrtomb+0x74>
    f2c4:	90000015 	stw	zero,0(r18)
    f2c8:	00c02284 	movi	r3,138
    f2cc:	88c00015 	stw	r3,0(r17)
    f2d0:	dfc00917 	ldw	ra,36(sp)
    f2d4:	dd000817 	ldw	r20,32(sp)
    f2d8:	dcc00717 	ldw	r19,28(sp)
    f2dc:	dc800617 	ldw	r18,24(sp)
    f2e0:	dc400517 	ldw	r17,20(sp)
    f2e4:	dc000417 	ldw	r16,16(sp)
    f2e8:	dec00a04 	addi	sp,sp,40
    f2ec:	f800283a 	ret
    f2f0:	00800074 	movhi	r2,1
    f2f4:	10922104 	addi	r2,r2,18564
    f2f8:	14000017 	ldw	r16,0(r2)
    f2fc:	000ba580 	call	ba58 <__locale_charset>
    f300:	100f883a 	mov	r7,r2
    f304:	dc800015 	stw	r18,0(sp)
    f308:	000d883a 	mov	r6,zero
    f30c:	d9400104 	addi	r5,sp,4
    f310:	8809883a 	mov	r4,r17
    f314:	803ee83a 	callr	r16
    f318:	003fe806 	br	f2bc <__alt_data_end+0xfffef2bc>

0000f31c <__ascii_wctomb>:
    f31c:	28000526 	beq	r5,zero,f334 <__ascii_wctomb+0x18>
    f320:	00803fc4 	movi	r2,255
    f324:	11800536 	bltu	r2,r6,f33c <__ascii_wctomb+0x20>
    f328:	29800005 	stb	r6,0(r5)
    f32c:	00800044 	movi	r2,1
    f330:	f800283a 	ret
    f334:	0005883a 	mov	r2,zero
    f338:	f800283a 	ret
    f33c:	00802284 	movi	r2,138
    f340:	20800015 	stw	r2,0(r4)
    f344:	00bfffc4 	movi	r2,-1
    f348:	f800283a 	ret

0000f34c <_wctomb_r>:
    f34c:	00800074 	movhi	r2,1
    f350:	defff904 	addi	sp,sp,-28
    f354:	10922104 	addi	r2,r2,18564
    f358:	dfc00615 	stw	ra,24(sp)
    f35c:	dc400515 	stw	r17,20(sp)
    f360:	dc000415 	stw	r16,16(sp)
    f364:	3823883a 	mov	r17,r7
    f368:	14000017 	ldw	r16,0(r2)
    f36c:	d9000115 	stw	r4,4(sp)
    f370:	d9400215 	stw	r5,8(sp)
    f374:	d9800315 	stw	r6,12(sp)
    f378:	000ba580 	call	ba58 <__locale_charset>
    f37c:	d9800317 	ldw	r6,12(sp)
    f380:	d9400217 	ldw	r5,8(sp)
    f384:	d9000117 	ldw	r4,4(sp)
    f388:	100f883a 	mov	r7,r2
    f38c:	dc400015 	stw	r17,0(sp)
    f390:	803ee83a 	callr	r16
    f394:	dfc00617 	ldw	ra,24(sp)
    f398:	dc400517 	ldw	r17,20(sp)
    f39c:	dc000417 	ldw	r16,16(sp)
    f3a0:	dec00704 	addi	sp,sp,28
    f3a4:	f800283a 	ret

0000f3a8 <__udivdi3>:
    f3a8:	defff404 	addi	sp,sp,-48
    f3ac:	dcc00515 	stw	r19,20(sp)
    f3b0:	dc000215 	stw	r16,8(sp)
    f3b4:	dfc00b15 	stw	ra,44(sp)
    f3b8:	df000a15 	stw	fp,40(sp)
    f3bc:	ddc00915 	stw	r23,36(sp)
    f3c0:	dd800815 	stw	r22,32(sp)
    f3c4:	dd400715 	stw	r21,28(sp)
    f3c8:	dd000615 	stw	r20,24(sp)
    f3cc:	dc800415 	stw	r18,16(sp)
    f3d0:	dc400315 	stw	r17,12(sp)
    f3d4:	2027883a 	mov	r19,r4
    f3d8:	2821883a 	mov	r16,r5
    f3dc:	3800461e 	bne	r7,zero,f4f8 <__udivdi3+0x150>
    f3e0:	3023883a 	mov	r17,r6
    f3e4:	2025883a 	mov	r18,r4
    f3e8:	2980572e 	bgeu	r5,r6,f548 <__udivdi3+0x1a0>
    f3ec:	00bfffd4 	movui	r2,65535
    f3f0:	282d883a 	mov	r22,r5
    f3f4:	1180b236 	bltu	r2,r6,f6c0 <__udivdi3+0x318>
    f3f8:	00803fc4 	movi	r2,255
    f3fc:	1185803a 	cmpltu	r2,r2,r6
    f400:	100490fa 	slli	r2,r2,3
    f404:	3086d83a 	srl	r3,r6,r2
    f408:	01000074 	movhi	r4,1
    f40c:	210aad84 	addi	r4,r4,10934
    f410:	20c7883a 	add	r3,r4,r3
    f414:	18c00003 	ldbu	r3,0(r3)
    f418:	1885883a 	add	r2,r3,r2
    f41c:	00c00804 	movi	r3,32
    f420:	1887c83a 	sub	r3,r3,r2
    f424:	18000526 	beq	r3,zero,f43c <__udivdi3+0x94>
    f428:	80e0983a 	sll	r16,r16,r3
    f42c:	9884d83a 	srl	r2,r19,r2
    f430:	30e2983a 	sll	r17,r6,r3
    f434:	98e4983a 	sll	r18,r19,r3
    f438:	142cb03a 	or	r22,r2,r16
    f43c:	882ad43a 	srli	r21,r17,16
    f440:	b009883a 	mov	r4,r22
    f444:	8d3fffcc 	andi	r20,r17,65535
    f448:	a80b883a 	mov	r5,r21
    f44c:	0004b040 	call	4b04 <__umodsi3>
    f450:	b009883a 	mov	r4,r22
    f454:	a80b883a 	mov	r5,r21
    f458:	1027883a 	mov	r19,r2
    f45c:	0004aa00 	call	4aa0 <__udivsi3>
    f460:	100b883a 	mov	r5,r2
    f464:	a009883a 	mov	r4,r20
    f468:	102d883a 	mov	r22,r2
    f46c:	000197c0 	call	197c <__mulsi3>
    f470:	9826943a 	slli	r19,r19,16
    f474:	9006d43a 	srli	r3,r18,16
    f478:	1cc6b03a 	or	r3,r3,r19
    f47c:	1880052e 	bgeu	r3,r2,f494 <__udivdi3+0xec>
    f480:	1c47883a 	add	r3,r3,r17
    f484:	b13fffc4 	addi	r4,r22,-1
    f488:	1c400136 	bltu	r3,r17,f490 <__udivdi3+0xe8>
    f48c:	18814236 	bltu	r3,r2,f998 <__udivdi3+0x5f0>
    f490:	202d883a 	mov	r22,r4
    f494:	18a1c83a 	sub	r16,r3,r2
    f498:	8009883a 	mov	r4,r16
    f49c:	a80b883a 	mov	r5,r21
    f4a0:	0004b040 	call	4b04 <__umodsi3>
    f4a4:	1027883a 	mov	r19,r2
    f4a8:	8009883a 	mov	r4,r16
    f4ac:	a80b883a 	mov	r5,r21
    f4b0:	9826943a 	slli	r19,r19,16
    f4b4:	0004aa00 	call	4aa0 <__udivsi3>
    f4b8:	100b883a 	mov	r5,r2
    f4bc:	a009883a 	mov	r4,r20
    f4c0:	94bfffcc 	andi	r18,r18,65535
    f4c4:	1021883a 	mov	r16,r2
    f4c8:	94e4b03a 	or	r18,r18,r19
    f4cc:	000197c0 	call	197c <__mulsi3>
    f4d0:	9080052e 	bgeu	r18,r2,f4e8 <__udivdi3+0x140>
    f4d4:	8ca5883a 	add	r18,r17,r18
    f4d8:	80ffffc4 	addi	r3,r16,-1
    f4dc:	94410c36 	bltu	r18,r17,f910 <__udivdi3+0x568>
    f4e0:	90810b2e 	bgeu	r18,r2,f910 <__udivdi3+0x568>
    f4e4:	843fff84 	addi	r16,r16,-2
    f4e8:	b004943a 	slli	r2,r22,16
    f4ec:	0007883a 	mov	r3,zero
    f4f0:	1404b03a 	or	r2,r2,r16
    f4f4:	00005e06 	br	f670 <__udivdi3+0x2c8>
    f4f8:	29c05b36 	bltu	r5,r7,f668 <__udivdi3+0x2c0>
    f4fc:	00bfffd4 	movui	r2,65535
    f500:	11c0672e 	bgeu	r2,r7,f6a0 <__udivdi3+0x2f8>
    f504:	00804034 	movhi	r2,256
    f508:	10bfffc4 	addi	r2,r2,-1
    f50c:	11c10a36 	bltu	r2,r7,f938 <__udivdi3+0x590>
    f510:	00800404 	movi	r2,16
    f514:	3886d83a 	srl	r3,r7,r2
    f518:	01000074 	movhi	r4,1
    f51c:	210aad84 	addi	r4,r4,10934
    f520:	20c7883a 	add	r3,r4,r3
    f524:	18c00003 	ldbu	r3,0(r3)
    f528:	05c00804 	movi	r23,32
    f52c:	1885883a 	add	r2,r3,r2
    f530:	b8afc83a 	sub	r23,r23,r2
    f534:	b800671e 	bne	r23,zero,f6d4 <__udivdi3+0x32c>
    f538:	3c010536 	bltu	r7,r16,f950 <__udivdi3+0x5a8>
    f53c:	9985403a 	cmpgeu	r2,r19,r6
    f540:	0007883a 	mov	r3,zero
    f544:	00004a06 	br	f670 <__udivdi3+0x2c8>
    f548:	3000041e 	bne	r6,zero,f55c <__udivdi3+0x1b4>
    f54c:	000b883a 	mov	r5,zero
    f550:	01000044 	movi	r4,1
    f554:	0004aa00 	call	4aa0 <__udivsi3>
    f558:	1023883a 	mov	r17,r2
    f55c:	00bfffd4 	movui	r2,65535
    f560:	1440532e 	bgeu	r2,r17,f6b0 <__udivdi3+0x308>
    f564:	00804034 	movhi	r2,256
    f568:	10bfffc4 	addi	r2,r2,-1
    f56c:	1440f436 	bltu	r2,r17,f940 <__udivdi3+0x598>
    f570:	00800404 	movi	r2,16
    f574:	8886d83a 	srl	r3,r17,r2
    f578:	01000074 	movhi	r4,1
    f57c:	210aad84 	addi	r4,r4,10934
    f580:	20c7883a 	add	r3,r4,r3
    f584:	18c00003 	ldbu	r3,0(r3)
    f588:	1885883a 	add	r2,r3,r2
    f58c:	00c00804 	movi	r3,32
    f590:	1887c83a 	sub	r3,r3,r2
    f594:	1800a51e 	bne	r3,zero,f82c <__udivdi3+0x484>
    f598:	882ad43a 	srli	r21,r17,16
    f59c:	8461c83a 	sub	r16,r16,r17
    f5a0:	8d3fffcc 	andi	r20,r17,65535
    f5a4:	00c00044 	movi	r3,1
    f5a8:	a80b883a 	mov	r5,r21
    f5ac:	8009883a 	mov	r4,r16
    f5b0:	d8c00115 	stw	r3,4(sp)
    f5b4:	0004b040 	call	4b04 <__umodsi3>
    f5b8:	a80b883a 	mov	r5,r21
    f5bc:	8009883a 	mov	r4,r16
    f5c0:	1027883a 	mov	r19,r2
    f5c4:	0004aa00 	call	4aa0 <__udivsi3>
    f5c8:	a00b883a 	mov	r5,r20
    f5cc:	1009883a 	mov	r4,r2
    f5d0:	102d883a 	mov	r22,r2
    f5d4:	000197c0 	call	197c <__mulsi3>
    f5d8:	9826943a 	slli	r19,r19,16
    f5dc:	900ed43a 	srli	r7,r18,16
    f5e0:	d8c00117 	ldw	r3,4(sp)
    f5e4:	3cceb03a 	or	r7,r7,r19
    f5e8:	3880052e 	bgeu	r7,r2,f600 <__udivdi3+0x258>
    f5ec:	3c4f883a 	add	r7,r7,r17
    f5f0:	b13fffc4 	addi	r4,r22,-1
    f5f4:	3c400136 	bltu	r7,r17,f5fc <__udivdi3+0x254>
    f5f8:	3880e436 	bltu	r7,r2,f98c <__udivdi3+0x5e4>
    f5fc:	202d883a 	mov	r22,r4
    f600:	38a1c83a 	sub	r16,r7,r2
    f604:	8009883a 	mov	r4,r16
    f608:	a80b883a 	mov	r5,r21
    f60c:	d8c00115 	stw	r3,4(sp)
    f610:	0004b040 	call	4b04 <__umodsi3>
    f614:	1027883a 	mov	r19,r2
    f618:	8009883a 	mov	r4,r16
    f61c:	a80b883a 	mov	r5,r21
    f620:	9826943a 	slli	r19,r19,16
    f624:	0004aa00 	call	4aa0 <__udivsi3>
    f628:	a00b883a 	mov	r5,r20
    f62c:	1009883a 	mov	r4,r2
    f630:	94bfffcc 	andi	r18,r18,65535
    f634:	1021883a 	mov	r16,r2
    f638:	94e4b03a 	or	r18,r18,r19
    f63c:	000197c0 	call	197c <__mulsi3>
    f640:	d8c00117 	ldw	r3,4(sp)
    f644:	9080052e 	bgeu	r18,r2,f65c <__udivdi3+0x2b4>
    f648:	8ca5883a 	add	r18,r17,r18
    f64c:	813fffc4 	addi	r4,r16,-1
    f650:	9440ad36 	bltu	r18,r17,f908 <__udivdi3+0x560>
    f654:	9080ac2e 	bgeu	r18,r2,f908 <__udivdi3+0x560>
    f658:	843fff84 	addi	r16,r16,-2
    f65c:	b004943a 	slli	r2,r22,16
    f660:	1404b03a 	or	r2,r2,r16
    f664:	00000206 	br	f670 <__udivdi3+0x2c8>
    f668:	0007883a 	mov	r3,zero
    f66c:	0005883a 	mov	r2,zero
    f670:	dfc00b17 	ldw	ra,44(sp)
    f674:	df000a17 	ldw	fp,40(sp)
    f678:	ddc00917 	ldw	r23,36(sp)
    f67c:	dd800817 	ldw	r22,32(sp)
    f680:	dd400717 	ldw	r21,28(sp)
    f684:	dd000617 	ldw	r20,24(sp)
    f688:	dcc00517 	ldw	r19,20(sp)
    f68c:	dc800417 	ldw	r18,16(sp)
    f690:	dc400317 	ldw	r17,12(sp)
    f694:	dc000217 	ldw	r16,8(sp)
    f698:	dec00c04 	addi	sp,sp,48
    f69c:	f800283a 	ret
    f6a0:	00803fc4 	movi	r2,255
    f6a4:	11c5803a 	cmpltu	r2,r2,r7
    f6a8:	100490fa 	slli	r2,r2,3
    f6ac:	003f9906 	br	f514 <__alt_data_end+0xfffef514>
    f6b0:	00803fc4 	movi	r2,255
    f6b4:	1445803a 	cmpltu	r2,r2,r17
    f6b8:	100490fa 	slli	r2,r2,3
    f6bc:	003fad06 	br	f574 <__alt_data_end+0xfffef574>
    f6c0:	00804034 	movhi	r2,256
    f6c4:	10bfffc4 	addi	r2,r2,-1
    f6c8:	11809f36 	bltu	r2,r6,f948 <__udivdi3+0x5a0>
    f6cc:	00800404 	movi	r2,16
    f6d0:	003f4c06 	br	f404 <__alt_data_end+0xfffef404>
    f6d4:	3dce983a 	sll	r7,r7,r23
    f6d8:	30b8d83a 	srl	fp,r6,r2
    f6dc:	80a2d83a 	srl	r17,r16,r2
    f6e0:	35cc983a 	sll	r6,r6,r23
    f6e4:	3f38b03a 	or	fp,r7,fp
    f6e8:	e024d43a 	srli	r18,fp,16
    f6ec:	9884d83a 	srl	r2,r19,r2
    f6f0:	85e0983a 	sll	r16,r16,r23
    f6f4:	8809883a 	mov	r4,r17
    f6f8:	900b883a 	mov	r5,r18
    f6fc:	d9800015 	stw	r6,0(sp)
    f700:	1420b03a 	or	r16,r2,r16
    f704:	0004b040 	call	4b04 <__umodsi3>
    f708:	900b883a 	mov	r5,r18
    f70c:	8809883a 	mov	r4,r17
    f710:	1029883a 	mov	r20,r2
    f714:	e5bfffcc 	andi	r22,fp,65535
    f718:	0004aa00 	call	4aa0 <__udivsi3>
    f71c:	100b883a 	mov	r5,r2
    f720:	b009883a 	mov	r4,r22
    f724:	102b883a 	mov	r21,r2
    f728:	000197c0 	call	197c <__mulsi3>
    f72c:	a028943a 	slli	r20,r20,16
    f730:	8006d43a 	srli	r3,r16,16
    f734:	1d06b03a 	or	r3,r3,r20
    f738:	1880042e 	bgeu	r3,r2,f74c <__udivdi3+0x3a4>
    f73c:	1f07883a 	add	r3,r3,fp
    f740:	a93fffc4 	addi	r4,r21,-1
    f744:	1f00892e 	bgeu	r3,fp,f96c <__udivdi3+0x5c4>
    f748:	202b883a 	mov	r21,r4
    f74c:	18a3c83a 	sub	r17,r3,r2
    f750:	8809883a 	mov	r4,r17
    f754:	900b883a 	mov	r5,r18
    f758:	0004b040 	call	4b04 <__umodsi3>
    f75c:	1029883a 	mov	r20,r2
    f760:	8809883a 	mov	r4,r17
    f764:	900b883a 	mov	r5,r18
    f768:	a028943a 	slli	r20,r20,16
    f76c:	0004aa00 	call	4aa0 <__udivsi3>
    f770:	100b883a 	mov	r5,r2
    f774:	b009883a 	mov	r4,r22
    f778:	843fffcc 	andi	r16,r16,65535
    f77c:	1023883a 	mov	r17,r2
    f780:	8520b03a 	or	r16,r16,r20
    f784:	000197c0 	call	197c <__mulsi3>
    f788:	8080042e 	bgeu	r16,r2,f79c <__udivdi3+0x3f4>
    f78c:	8721883a 	add	r16,r16,fp
    f790:	88ffffc4 	addi	r3,r17,-1
    f794:	8700712e 	bgeu	r16,fp,f95c <__udivdi3+0x5b4>
    f798:	1823883a 	mov	r17,r3
    f79c:	a80e943a 	slli	r7,r21,16
    f7a0:	d8c00017 	ldw	r3,0(sp)
    f7a4:	80a1c83a 	sub	r16,r16,r2
    f7a8:	3c64b03a 	or	r18,r7,r17
    f7ac:	1d3fffcc 	andi	r20,r3,65535
    f7b0:	9022d43a 	srli	r17,r18,16
    f7b4:	95bfffcc 	andi	r22,r18,65535
    f7b8:	a00b883a 	mov	r5,r20
    f7bc:	b009883a 	mov	r4,r22
    f7c0:	182ad43a 	srli	r21,r3,16
    f7c4:	000197c0 	call	197c <__mulsi3>
    f7c8:	a00b883a 	mov	r5,r20
    f7cc:	8809883a 	mov	r4,r17
    f7d0:	1039883a 	mov	fp,r2
    f7d4:	000197c0 	call	197c <__mulsi3>
    f7d8:	8809883a 	mov	r4,r17
    f7dc:	a80b883a 	mov	r5,r21
    f7e0:	1029883a 	mov	r20,r2
    f7e4:	000197c0 	call	197c <__mulsi3>
    f7e8:	a80b883a 	mov	r5,r21
    f7ec:	b009883a 	mov	r4,r22
    f7f0:	1023883a 	mov	r17,r2
    f7f4:	000197c0 	call	197c <__mulsi3>
    f7f8:	e006d43a 	srli	r3,fp,16
    f7fc:	1505883a 	add	r2,r2,r20
    f800:	1887883a 	add	r3,r3,r2
    f804:	1d00022e 	bgeu	r3,r20,f810 <__udivdi3+0x468>
    f808:	00800074 	movhi	r2,1
    f80c:	88a3883a 	add	r17,r17,r2
    f810:	1804d43a 	srli	r2,r3,16
    f814:	1463883a 	add	r17,r2,r17
    f818:	84404436 	bltu	r16,r17,f92c <__udivdi3+0x584>
    f81c:	84403e26 	beq	r16,r17,f918 <__udivdi3+0x570>
    f820:	9005883a 	mov	r2,r18
    f824:	0007883a 	mov	r3,zero
    f828:	003f9106 	br	f670 <__alt_data_end+0xfffef670>
    f82c:	88e2983a 	sll	r17,r17,r3
    f830:	80aed83a 	srl	r23,r16,r2
    f834:	80e0983a 	sll	r16,r16,r3
    f838:	882ad43a 	srli	r21,r17,16
    f83c:	9884d83a 	srl	r2,r19,r2
    f840:	b809883a 	mov	r4,r23
    f844:	a80b883a 	mov	r5,r21
    f848:	98e4983a 	sll	r18,r19,r3
    f84c:	142cb03a 	or	r22,r2,r16
    f850:	0004b040 	call	4b04 <__umodsi3>
    f854:	b809883a 	mov	r4,r23
    f858:	a80b883a 	mov	r5,r21
    f85c:	1027883a 	mov	r19,r2
    f860:	8d3fffcc 	andi	r20,r17,65535
    f864:	0004aa00 	call	4aa0 <__udivsi3>
    f868:	a009883a 	mov	r4,r20
    f86c:	100b883a 	mov	r5,r2
    f870:	102f883a 	mov	r23,r2
    f874:	000197c0 	call	197c <__mulsi3>
    f878:	9826943a 	slli	r19,r19,16
    f87c:	b008d43a 	srli	r4,r22,16
    f880:	24c8b03a 	or	r4,r4,r19
    f884:	2080062e 	bgeu	r4,r2,f8a0 <__udivdi3+0x4f8>
    f888:	2449883a 	add	r4,r4,r17
    f88c:	b8ffffc4 	addi	r3,r23,-1
    f890:	24403c36 	bltu	r4,r17,f984 <__udivdi3+0x5dc>
    f894:	20803b2e 	bgeu	r4,r2,f984 <__udivdi3+0x5dc>
    f898:	bdffff84 	addi	r23,r23,-2
    f89c:	2449883a 	add	r4,r4,r17
    f8a0:	20a1c83a 	sub	r16,r4,r2
    f8a4:	a80b883a 	mov	r5,r21
    f8a8:	8009883a 	mov	r4,r16
    f8ac:	0004b040 	call	4b04 <__umodsi3>
    f8b0:	a80b883a 	mov	r5,r21
    f8b4:	8009883a 	mov	r4,r16
    f8b8:	1027883a 	mov	r19,r2
    f8bc:	0004aa00 	call	4aa0 <__udivsi3>
    f8c0:	a009883a 	mov	r4,r20
    f8c4:	100b883a 	mov	r5,r2
    f8c8:	9826943a 	slli	r19,r19,16
    f8cc:	1039883a 	mov	fp,r2
    f8d0:	000197c0 	call	197c <__mulsi3>
    f8d4:	b13fffcc 	andi	r4,r22,65535
    f8d8:	24c8b03a 	or	r4,r4,r19
    f8dc:	2080062e 	bgeu	r4,r2,f8f8 <__udivdi3+0x550>
    f8e0:	2449883a 	add	r4,r4,r17
    f8e4:	e0ffffc4 	addi	r3,fp,-1
    f8e8:	24402436 	bltu	r4,r17,f97c <__udivdi3+0x5d4>
    f8ec:	2080232e 	bgeu	r4,r2,f97c <__udivdi3+0x5d4>
    f8f0:	e73fff84 	addi	fp,fp,-2
    f8f4:	2449883a 	add	r4,r4,r17
    f8f8:	b82e943a 	slli	r23,r23,16
    f8fc:	20a1c83a 	sub	r16,r4,r2
    f900:	bf06b03a 	or	r3,r23,fp
    f904:	003f2806 	br	f5a8 <__alt_data_end+0xfffef5a8>
    f908:	2021883a 	mov	r16,r4
    f90c:	003f5306 	br	f65c <__alt_data_end+0xfffef65c>
    f910:	1821883a 	mov	r16,r3
    f914:	003ef406 	br	f4e8 <__alt_data_end+0xfffef4e8>
    f918:	1806943a 	slli	r3,r3,16
    f91c:	9de6983a 	sll	r19,r19,r23
    f920:	e73fffcc 	andi	fp,fp,65535
    f924:	1f07883a 	add	r3,r3,fp
    f928:	98ffbd2e 	bgeu	r19,r3,f820 <__alt_data_end+0xfffef820>
    f92c:	90bfffc4 	addi	r2,r18,-1
    f930:	0007883a 	mov	r3,zero
    f934:	003f4e06 	br	f670 <__alt_data_end+0xfffef670>
    f938:	00800604 	movi	r2,24
    f93c:	003ef506 	br	f514 <__alt_data_end+0xfffef514>
    f940:	00800604 	movi	r2,24
    f944:	003f0b06 	br	f574 <__alt_data_end+0xfffef574>
    f948:	00800604 	movi	r2,24
    f94c:	003ead06 	br	f404 <__alt_data_end+0xfffef404>
    f950:	0007883a 	mov	r3,zero
    f954:	00800044 	movi	r2,1
    f958:	003f4506 	br	f670 <__alt_data_end+0xfffef670>
    f95c:	80bf8e2e 	bgeu	r16,r2,f798 <__alt_data_end+0xfffef798>
    f960:	8c7fff84 	addi	r17,r17,-2
    f964:	8721883a 	add	r16,r16,fp
    f968:	003f8c06 	br	f79c <__alt_data_end+0xfffef79c>
    f96c:	18bf762e 	bgeu	r3,r2,f748 <__alt_data_end+0xfffef748>
    f970:	ad7fff84 	addi	r21,r21,-2
    f974:	1f07883a 	add	r3,r3,fp
    f978:	003f7406 	br	f74c <__alt_data_end+0xfffef74c>
    f97c:	1839883a 	mov	fp,r3
    f980:	003fdd06 	br	f8f8 <__alt_data_end+0xfffef8f8>
    f984:	182f883a 	mov	r23,r3
    f988:	003fc506 	br	f8a0 <__alt_data_end+0xfffef8a0>
    f98c:	b5bfff84 	addi	r22,r22,-2
    f990:	3c4f883a 	add	r7,r7,r17
    f994:	003f1a06 	br	f600 <__alt_data_end+0xfffef600>
    f998:	b5bfff84 	addi	r22,r22,-2
    f99c:	1c47883a 	add	r3,r3,r17
    f9a0:	003ebc06 	br	f494 <__alt_data_end+0xfffef494>

0000f9a4 <__umoddi3>:
    f9a4:	defff304 	addi	sp,sp,-52
    f9a8:	df000b15 	stw	fp,44(sp)
    f9ac:	dc400415 	stw	r17,16(sp)
    f9b0:	dc000315 	stw	r16,12(sp)
    f9b4:	dfc00c15 	stw	ra,48(sp)
    f9b8:	ddc00a15 	stw	r23,40(sp)
    f9bc:	dd800915 	stw	r22,36(sp)
    f9c0:	dd400815 	stw	r21,32(sp)
    f9c4:	dd000715 	stw	r20,28(sp)
    f9c8:	dcc00615 	stw	r19,24(sp)
    f9cc:	dc800515 	stw	r18,20(sp)
    f9d0:	2021883a 	mov	r16,r4
    f9d4:	2823883a 	mov	r17,r5
    f9d8:	2839883a 	mov	fp,r5
    f9dc:	3800401e 	bne	r7,zero,fae0 <__umoddi3+0x13c>
    f9e0:	3027883a 	mov	r19,r6
    f9e4:	2029883a 	mov	r20,r4
    f9e8:	2980552e 	bgeu	r5,r6,fb40 <__umoddi3+0x19c>
    f9ec:	00bfffd4 	movui	r2,65535
    f9f0:	1180a236 	bltu	r2,r6,fc7c <__umoddi3+0x2d8>
    f9f4:	01003fc4 	movi	r4,255
    f9f8:	2189803a 	cmpltu	r4,r4,r6
    f9fc:	200890fa 	slli	r4,r4,3
    fa00:	3104d83a 	srl	r2,r6,r4
    fa04:	00c00074 	movhi	r3,1
    fa08:	18caad84 	addi	r3,r3,10934
    fa0c:	1885883a 	add	r2,r3,r2
    fa10:	10c00003 	ldbu	r3,0(r2)
    fa14:	00800804 	movi	r2,32
    fa18:	1909883a 	add	r4,r3,r4
    fa1c:	1125c83a 	sub	r18,r2,r4
    fa20:	90000526 	beq	r18,zero,fa38 <__umoddi3+0x94>
    fa24:	8ca2983a 	sll	r17,r17,r18
    fa28:	8108d83a 	srl	r4,r16,r4
    fa2c:	34a6983a 	sll	r19,r6,r18
    fa30:	84a8983a 	sll	r20,r16,r18
    fa34:	2478b03a 	or	fp,r4,r17
    fa38:	982cd43a 	srli	r22,r19,16
    fa3c:	e009883a 	mov	r4,fp
    fa40:	9dffffcc 	andi	r23,r19,65535
    fa44:	b00b883a 	mov	r5,r22
    fa48:	0004b040 	call	4b04 <__umodsi3>
    fa4c:	b00b883a 	mov	r5,r22
    fa50:	e009883a 	mov	r4,fp
    fa54:	102b883a 	mov	r21,r2
    fa58:	0004aa00 	call	4aa0 <__udivsi3>
    fa5c:	100b883a 	mov	r5,r2
    fa60:	b809883a 	mov	r4,r23
    fa64:	000197c0 	call	197c <__mulsi3>
    fa68:	a82a943a 	slli	r21,r21,16
    fa6c:	a006d43a 	srli	r3,r20,16
    fa70:	1d46b03a 	or	r3,r3,r21
    fa74:	1880032e 	bgeu	r3,r2,fa84 <__umoddi3+0xe0>
    fa78:	1cc7883a 	add	r3,r3,r19
    fa7c:	1cc00136 	bltu	r3,r19,fa84 <__umoddi3+0xe0>
    fa80:	18813136 	bltu	r3,r2,ff48 <__umoddi3+0x5a4>
    fa84:	18a1c83a 	sub	r16,r3,r2
    fa88:	b00b883a 	mov	r5,r22
    fa8c:	8009883a 	mov	r4,r16
    fa90:	0004b040 	call	4b04 <__umodsi3>
    fa94:	b00b883a 	mov	r5,r22
    fa98:	8009883a 	mov	r4,r16
    fa9c:	1023883a 	mov	r17,r2
    faa0:	0004aa00 	call	4aa0 <__udivsi3>
    faa4:	100b883a 	mov	r5,r2
    faa8:	b809883a 	mov	r4,r23
    faac:	8822943a 	slli	r17,r17,16
    fab0:	000197c0 	call	197c <__mulsi3>
    fab4:	a0ffffcc 	andi	r3,r20,65535
    fab8:	1c46b03a 	or	r3,r3,r17
    fabc:	1880042e 	bgeu	r3,r2,fad0 <__umoddi3+0x12c>
    fac0:	1cc7883a 	add	r3,r3,r19
    fac4:	1cc00236 	bltu	r3,r19,fad0 <__umoddi3+0x12c>
    fac8:	1880012e 	bgeu	r3,r2,fad0 <__umoddi3+0x12c>
    facc:	1cc7883a 	add	r3,r3,r19
    fad0:	1885c83a 	sub	r2,r3,r2
    fad4:	1484d83a 	srl	r2,r2,r18
    fad8:	0007883a 	mov	r3,zero
    fadc:	00005306 	br	fc2c <__umoddi3+0x288>
    fae0:	29c05036 	bltu	r5,r7,fc24 <__umoddi3+0x280>
    fae4:	00bfffd4 	movui	r2,65535
    fae8:	11c05c2e 	bgeu	r2,r7,fc5c <__umoddi3+0x2b8>
    faec:	00804034 	movhi	r2,256
    faf0:	10bfffc4 	addi	r2,r2,-1
    faf4:	11c10636 	bltu	r2,r7,ff10 <__umoddi3+0x56c>
    faf8:	01000404 	movi	r4,16
    fafc:	3904d83a 	srl	r2,r7,r4
    fb00:	00c00074 	movhi	r3,1
    fb04:	18caad84 	addi	r3,r3,10934
    fb08:	1885883a 	add	r2,r3,r2
    fb0c:	14c00003 	ldbu	r19,0(r2)
    fb10:	00c00804 	movi	r3,32
    fb14:	9927883a 	add	r19,r19,r4
    fb18:	1ce9c83a 	sub	r20,r3,r19
    fb1c:	a0005c1e 	bne	r20,zero,fc90 <__umoddi3+0x2ec>
    fb20:	3c400136 	bltu	r7,r17,fb28 <__umoddi3+0x184>
    fb24:	81810a36 	bltu	r16,r6,ff50 <__umoddi3+0x5ac>
    fb28:	8185c83a 	sub	r2,r16,r6
    fb2c:	89e3c83a 	sub	r17,r17,r7
    fb30:	8089803a 	cmpltu	r4,r16,r2
    fb34:	8939c83a 	sub	fp,r17,r4
    fb38:	e007883a 	mov	r3,fp
    fb3c:	00003b06 	br	fc2c <__umoddi3+0x288>
    fb40:	3000041e 	bne	r6,zero,fb54 <__umoddi3+0x1b0>
    fb44:	000b883a 	mov	r5,zero
    fb48:	01000044 	movi	r4,1
    fb4c:	0004aa00 	call	4aa0 <__udivsi3>
    fb50:	1027883a 	mov	r19,r2
    fb54:	00bfffd4 	movui	r2,65535
    fb58:	14c0442e 	bgeu	r2,r19,fc6c <__umoddi3+0x2c8>
    fb5c:	00804034 	movhi	r2,256
    fb60:	10bfffc4 	addi	r2,r2,-1
    fb64:	14c0ec36 	bltu	r2,r19,ff18 <__umoddi3+0x574>
    fb68:	00800404 	movi	r2,16
    fb6c:	9886d83a 	srl	r3,r19,r2
    fb70:	01000074 	movhi	r4,1
    fb74:	210aad84 	addi	r4,r4,10934
    fb78:	20c7883a 	add	r3,r4,r3
    fb7c:	18c00003 	ldbu	r3,0(r3)
    fb80:	1887883a 	add	r3,r3,r2
    fb84:	00800804 	movi	r2,32
    fb88:	10e5c83a 	sub	r18,r2,r3
    fb8c:	9000ab1e 	bne	r18,zero,fe3c <__umoddi3+0x498>
    fb90:	982cd43a 	srli	r22,r19,16
    fb94:	8ce3c83a 	sub	r17,r17,r19
    fb98:	9dffffcc 	andi	r23,r19,65535
    fb9c:	b00b883a 	mov	r5,r22
    fba0:	8809883a 	mov	r4,r17
    fba4:	0004b040 	call	4b04 <__umodsi3>
    fba8:	b00b883a 	mov	r5,r22
    fbac:	8809883a 	mov	r4,r17
    fbb0:	102b883a 	mov	r21,r2
    fbb4:	0004aa00 	call	4aa0 <__udivsi3>
    fbb8:	b80b883a 	mov	r5,r23
    fbbc:	1009883a 	mov	r4,r2
    fbc0:	000197c0 	call	197c <__mulsi3>
    fbc4:	a82a943a 	slli	r21,r21,16
    fbc8:	a006d43a 	srli	r3,r20,16
    fbcc:	1d46b03a 	or	r3,r3,r21
    fbd0:	1880042e 	bgeu	r3,r2,fbe4 <__umoddi3+0x240>
    fbd4:	1cc7883a 	add	r3,r3,r19
    fbd8:	1cc00236 	bltu	r3,r19,fbe4 <__umoddi3+0x240>
    fbdc:	1880012e 	bgeu	r3,r2,fbe4 <__umoddi3+0x240>
    fbe0:	1cc7883a 	add	r3,r3,r19
    fbe4:	18a1c83a 	sub	r16,r3,r2
    fbe8:	b00b883a 	mov	r5,r22
    fbec:	8009883a 	mov	r4,r16
    fbf0:	0004b040 	call	4b04 <__umodsi3>
    fbf4:	1023883a 	mov	r17,r2
    fbf8:	b00b883a 	mov	r5,r22
    fbfc:	8009883a 	mov	r4,r16
    fc00:	0004aa00 	call	4aa0 <__udivsi3>
    fc04:	8822943a 	slli	r17,r17,16
    fc08:	b80b883a 	mov	r5,r23
    fc0c:	1009883a 	mov	r4,r2
    fc10:	000197c0 	call	197c <__mulsi3>
    fc14:	a53fffcc 	andi	r20,r20,65535
    fc18:	a446b03a 	or	r3,r20,r17
    fc1c:	18bfac2e 	bgeu	r3,r2,fad0 <__alt_data_end+0xfffefad0>
    fc20:	003fa706 	br	fac0 <__alt_data_end+0xfffefac0>
    fc24:	2005883a 	mov	r2,r4
    fc28:	2807883a 	mov	r3,r5
    fc2c:	dfc00c17 	ldw	ra,48(sp)
    fc30:	df000b17 	ldw	fp,44(sp)
    fc34:	ddc00a17 	ldw	r23,40(sp)
    fc38:	dd800917 	ldw	r22,36(sp)
    fc3c:	dd400817 	ldw	r21,32(sp)
    fc40:	dd000717 	ldw	r20,28(sp)
    fc44:	dcc00617 	ldw	r19,24(sp)
    fc48:	dc800517 	ldw	r18,20(sp)
    fc4c:	dc400417 	ldw	r17,16(sp)
    fc50:	dc000317 	ldw	r16,12(sp)
    fc54:	dec00d04 	addi	sp,sp,52
    fc58:	f800283a 	ret
    fc5c:	04c03fc4 	movi	r19,255
    fc60:	99c9803a 	cmpltu	r4,r19,r7
    fc64:	200890fa 	slli	r4,r4,3
    fc68:	003fa406 	br	fafc <__alt_data_end+0xfffefafc>
    fc6c:	00803fc4 	movi	r2,255
    fc70:	14c5803a 	cmpltu	r2,r2,r19
    fc74:	100490fa 	slli	r2,r2,3
    fc78:	003fbc06 	br	fb6c <__alt_data_end+0xfffefb6c>
    fc7c:	00804034 	movhi	r2,256
    fc80:	10bfffc4 	addi	r2,r2,-1
    fc84:	1180a636 	bltu	r2,r6,ff20 <__umoddi3+0x57c>
    fc88:	01000404 	movi	r4,16
    fc8c:	003f5c06 	br	fa00 <__alt_data_end+0xfffefa00>
    fc90:	3d0e983a 	sll	r7,r7,r20
    fc94:	34ead83a 	srl	r21,r6,r19
    fc98:	8cc6d83a 	srl	r3,r17,r19
    fc9c:	8d10983a 	sll	r8,r17,r20
    fca0:	3d6ab03a 	or	r21,r7,r21
    fca4:	a82cd43a 	srli	r22,r21,16
    fca8:	84e2d83a 	srl	r17,r16,r19
    fcac:	1809883a 	mov	r4,r3
    fcb0:	b00b883a 	mov	r5,r22
    fcb4:	8a22b03a 	or	r17,r17,r8
    fcb8:	3524983a 	sll	r18,r6,r20
    fcbc:	dc400015 	stw	r17,0(sp)
    fcc0:	d8c00115 	stw	r3,4(sp)
    fcc4:	0004b040 	call	4b04 <__umodsi3>
    fcc8:	d8c00117 	ldw	r3,4(sp)
    fccc:	b00b883a 	mov	r5,r22
    fcd0:	1039883a 	mov	fp,r2
    fcd4:	1809883a 	mov	r4,r3
    fcd8:	0004aa00 	call	4aa0 <__udivsi3>
    fcdc:	adffffcc 	andi	r23,r21,65535
    fce0:	100b883a 	mov	r5,r2
    fce4:	b809883a 	mov	r4,r23
    fce8:	1023883a 	mov	r17,r2
    fcec:	000197c0 	call	197c <__mulsi3>
    fcf0:	d9400017 	ldw	r5,0(sp)
    fcf4:	e008943a 	slli	r4,fp,16
    fcf8:	8520983a 	sll	r16,r16,r20
    fcfc:	2806d43a 	srli	r3,r5,16
    fd00:	1906b03a 	or	r3,r3,r4
    fd04:	1880042e 	bgeu	r3,r2,fd18 <__umoddi3+0x374>
    fd08:	1d47883a 	add	r3,r3,r21
    fd0c:	893fffc4 	addi	r4,r17,-1
    fd10:	1d40892e 	bgeu	r3,r21,ff38 <__umoddi3+0x594>
    fd14:	2023883a 	mov	r17,r4
    fd18:	18b9c83a 	sub	fp,r3,r2
    fd1c:	b00b883a 	mov	r5,r22
    fd20:	e009883a 	mov	r4,fp
    fd24:	0004b040 	call	4b04 <__umodsi3>
    fd28:	b00b883a 	mov	r5,r22
    fd2c:	e009883a 	mov	r4,fp
    fd30:	d8800215 	stw	r2,8(sp)
    fd34:	0004aa00 	call	4aa0 <__udivsi3>
    fd38:	100b883a 	mov	r5,r2
    fd3c:	b809883a 	mov	r4,r23
    fd40:	102d883a 	mov	r22,r2
    fd44:	000197c0 	call	197c <__mulsi3>
    fd48:	d9800217 	ldw	r6,8(sp)
    fd4c:	d8c00017 	ldw	r3,0(sp)
    fd50:	300c943a 	slli	r6,r6,16
    fd54:	1a3fffcc 	andi	r8,r3,65535
    fd58:	4190b03a 	or	r8,r8,r6
    fd5c:	4080042e 	bgeu	r8,r2,fd70 <__umoddi3+0x3cc>
    fd60:	4551883a 	add	r8,r8,r21
    fd64:	b0ffffc4 	addi	r3,r22,-1
    fd68:	45406f2e 	bgeu	r8,r21,ff28 <__umoddi3+0x584>
    fd6c:	182d883a 	mov	r22,r3
    fd70:	880e943a 	slli	r7,r17,16
    fd74:	9006d43a 	srli	r3,r18,16
    fd78:	91bfffcc 	andi	r6,r18,65535
    fd7c:	3dacb03a 	or	r22,r7,r22
    fd80:	b02ed43a 	srli	r23,r22,16
    fd84:	b5bfffcc 	andi	r22,r22,65535
    fd88:	300b883a 	mov	r5,r6
    fd8c:	b009883a 	mov	r4,r22
    fd90:	40a3c83a 	sub	r17,r8,r2
    fd94:	d8c00115 	stw	r3,4(sp)
    fd98:	d9800215 	stw	r6,8(sp)
    fd9c:	000197c0 	call	197c <__mulsi3>
    fda0:	d9800217 	ldw	r6,8(sp)
    fda4:	b809883a 	mov	r4,r23
    fda8:	1039883a 	mov	fp,r2
    fdac:	300b883a 	mov	r5,r6
    fdb0:	000197c0 	call	197c <__mulsi3>
    fdb4:	d8c00117 	ldw	r3,4(sp)
    fdb8:	b809883a 	mov	r4,r23
    fdbc:	d8800215 	stw	r2,8(sp)
    fdc0:	180b883a 	mov	r5,r3
    fdc4:	000197c0 	call	197c <__mulsi3>
    fdc8:	d8c00117 	ldw	r3,4(sp)
    fdcc:	b009883a 	mov	r4,r22
    fdd0:	102f883a 	mov	r23,r2
    fdd4:	180b883a 	mov	r5,r3
    fdd8:	000197c0 	call	197c <__mulsi3>
    fddc:	d9800217 	ldw	r6,8(sp)
    fde0:	e006d43a 	srli	r3,fp,16
    fde4:	1185883a 	add	r2,r2,r6
    fde8:	1885883a 	add	r2,r3,r2
    fdec:	1180022e 	bgeu	r2,r6,fdf8 <__umoddi3+0x454>
    fdf0:	00c00074 	movhi	r3,1
    fdf4:	b8ef883a 	add	r23,r23,r3
    fdf8:	1006d43a 	srli	r3,r2,16
    fdfc:	1004943a 	slli	r2,r2,16
    fe00:	e73fffcc 	andi	fp,fp,65535
    fe04:	1dc7883a 	add	r3,r3,r23
    fe08:	1739883a 	add	fp,r2,fp
    fe0c:	88c03a36 	bltu	r17,r3,fef8 <__umoddi3+0x554>
    fe10:	88c05126 	beq	r17,r3,ff58 <__umoddi3+0x5b4>
    fe14:	88c9c83a 	sub	r4,r17,r3
    fe18:	e00f883a 	mov	r7,fp
    fe1c:	81cfc83a 	sub	r7,r16,r7
    fe20:	81c7803a 	cmpltu	r3,r16,r7
    fe24:	20c7c83a 	sub	r3,r4,r3
    fe28:	1cc4983a 	sll	r2,r3,r19
    fe2c:	3d0ed83a 	srl	r7,r7,r20
    fe30:	1d06d83a 	srl	r3,r3,r20
    fe34:	11c4b03a 	or	r2,r2,r7
    fe38:	003f7c06 	br	fc2c <__alt_data_end+0xfffefc2c>
    fe3c:	9ca6983a 	sll	r19,r19,r18
    fe40:	88f8d83a 	srl	fp,r17,r3
    fe44:	80c4d83a 	srl	r2,r16,r3
    fe48:	982cd43a 	srli	r22,r19,16
    fe4c:	8ca2983a 	sll	r17,r17,r18
    fe50:	e009883a 	mov	r4,fp
    fe54:	b00b883a 	mov	r5,r22
    fe58:	146ab03a 	or	r21,r2,r17
    fe5c:	0004b040 	call	4b04 <__umodsi3>
    fe60:	b00b883a 	mov	r5,r22
    fe64:	e009883a 	mov	r4,fp
    fe68:	1029883a 	mov	r20,r2
    fe6c:	9dffffcc 	andi	r23,r19,65535
    fe70:	0004aa00 	call	4aa0 <__udivsi3>
    fe74:	b809883a 	mov	r4,r23
    fe78:	100b883a 	mov	r5,r2
    fe7c:	000197c0 	call	197c <__mulsi3>
    fe80:	a008943a 	slli	r4,r20,16
    fe84:	a806d43a 	srli	r3,r21,16
    fe88:	84a8983a 	sll	r20,r16,r18
    fe8c:	1906b03a 	or	r3,r3,r4
    fe90:	1880042e 	bgeu	r3,r2,fea4 <__umoddi3+0x500>
    fe94:	1cc7883a 	add	r3,r3,r19
    fe98:	1cc00236 	bltu	r3,r19,fea4 <__umoddi3+0x500>
    fe9c:	1880012e 	bgeu	r3,r2,fea4 <__umoddi3+0x500>
    fea0:	1cc7883a 	add	r3,r3,r19
    fea4:	18a3c83a 	sub	r17,r3,r2
    fea8:	b00b883a 	mov	r5,r22
    feac:	8809883a 	mov	r4,r17
    feb0:	0004b040 	call	4b04 <__umodsi3>
    feb4:	b00b883a 	mov	r5,r22
    feb8:	8809883a 	mov	r4,r17
    febc:	1021883a 	mov	r16,r2
    fec0:	0004aa00 	call	4aa0 <__udivsi3>
    fec4:	100b883a 	mov	r5,r2
    fec8:	b809883a 	mov	r4,r23
    fecc:	8020943a 	slli	r16,r16,16
    fed0:	000197c0 	call	197c <__mulsi3>
    fed4:	a8ffffcc 	andi	r3,r21,65535
    fed8:	1c06b03a 	or	r3,r3,r16
    fedc:	1880042e 	bgeu	r3,r2,fef0 <__umoddi3+0x54c>
    fee0:	1cc7883a 	add	r3,r3,r19
    fee4:	1cc00236 	bltu	r3,r19,fef0 <__umoddi3+0x54c>
    fee8:	1880012e 	bgeu	r3,r2,fef0 <__umoddi3+0x54c>
    feec:	1cc7883a 	add	r3,r3,r19
    fef0:	18a3c83a 	sub	r17,r3,r2
    fef4:	003f2906 	br	fb9c <__alt_data_end+0xfffefb9c>
    fef8:	e48fc83a 	sub	r7,fp,r18
    fefc:	1d49c83a 	sub	r4,r3,r21
    ff00:	e1f9803a 	cmpltu	fp,fp,r7
    ff04:	2739c83a 	sub	fp,r4,fp
    ff08:	8f09c83a 	sub	r4,r17,fp
    ff0c:	003fc306 	br	fe1c <__alt_data_end+0xfffefe1c>
    ff10:	01000604 	movi	r4,24
    ff14:	003ef906 	br	fafc <__alt_data_end+0xfffefafc>
    ff18:	00800604 	movi	r2,24
    ff1c:	003f1306 	br	fb6c <__alt_data_end+0xfffefb6c>
    ff20:	01000604 	movi	r4,24
    ff24:	003eb606 	br	fa00 <__alt_data_end+0xfffefa00>
    ff28:	40bf902e 	bgeu	r8,r2,fd6c <__alt_data_end+0xfffefd6c>
    ff2c:	b5bfff84 	addi	r22,r22,-2
    ff30:	4551883a 	add	r8,r8,r21
    ff34:	003f8e06 	br	fd70 <__alt_data_end+0xfffefd70>
    ff38:	18bf762e 	bgeu	r3,r2,fd14 <__alt_data_end+0xfffefd14>
    ff3c:	8c7fff84 	addi	r17,r17,-2
    ff40:	1d47883a 	add	r3,r3,r21
    ff44:	003f7406 	br	fd18 <__alt_data_end+0xfffefd18>
    ff48:	1cc7883a 	add	r3,r3,r19
    ff4c:	003ecd06 	br	fa84 <__alt_data_end+0xfffefa84>
    ff50:	8005883a 	mov	r2,r16
    ff54:	003ef806 	br	fb38 <__alt_data_end+0xfffefb38>
    ff58:	873fe736 	bltu	r16,fp,fef8 <__alt_data_end+0xfffefef8>
    ff5c:	e00f883a 	mov	r7,fp
    ff60:	0009883a 	mov	r4,zero
    ff64:	003fad06 	br	fe1c <__alt_data_end+0xfffefe1c>

0000ff68 <__eqdf2>:
    ff68:	2804d53a 	srli	r2,r5,20
    ff6c:	3806d53a 	srli	r3,r7,20
    ff70:	02000434 	movhi	r8,16
    ff74:	423fffc4 	addi	r8,r8,-1
    ff78:	1081ffcc 	andi	r2,r2,2047
    ff7c:	0281ffc4 	movi	r10,2047
    ff80:	2a12703a 	and	r9,r5,r8
    ff84:	18c1ffcc 	andi	r3,r3,2047
    ff88:	3a10703a 	and	r8,r7,r8
    ff8c:	280ad7fa 	srli	r5,r5,31
    ff90:	380ed7fa 	srli	r7,r7,31
    ff94:	12801026 	beq	r2,r10,ffd8 <__eqdf2+0x70>
    ff98:	0281ffc4 	movi	r10,2047
    ff9c:	1a800a26 	beq	r3,r10,ffc8 <__eqdf2+0x60>
    ffa0:	10c00226 	beq	r2,r3,ffac <__eqdf2+0x44>
    ffa4:	00800044 	movi	r2,1
    ffa8:	f800283a 	ret
    ffac:	4a3ffd1e 	bne	r9,r8,ffa4 <__alt_data_end+0xfffeffa4>
    ffb0:	21bffc1e 	bne	r4,r6,ffa4 <__alt_data_end+0xfffeffa4>
    ffb4:	29c00c26 	beq	r5,r7,ffe8 <__eqdf2+0x80>
    ffb8:	103ffa1e 	bne	r2,zero,ffa4 <__alt_data_end+0xfffeffa4>
    ffbc:	2244b03a 	or	r2,r4,r9
    ffc0:	1004c03a 	cmpne	r2,r2,zero
    ffc4:	f800283a 	ret
    ffc8:	3214b03a 	or	r10,r6,r8
    ffcc:	503ff426 	beq	r10,zero,ffa0 <__alt_data_end+0xfffeffa0>
    ffd0:	00800044 	movi	r2,1
    ffd4:	f800283a 	ret
    ffd8:	2254b03a 	or	r10,r4,r9
    ffdc:	503fee26 	beq	r10,zero,ff98 <__alt_data_end+0xfffeff98>
    ffe0:	00800044 	movi	r2,1
    ffe4:	f800283a 	ret
    ffe8:	0005883a 	mov	r2,zero
    ffec:	f800283a 	ret

0000fff0 <__ledf2>:
    fff0:	2804d53a 	srli	r2,r5,20
    fff4:	3810d53a 	srli	r8,r7,20
    fff8:	00c00434 	movhi	r3,16
    fffc:	18ffffc4 	addi	r3,r3,-1
   10000:	1081ffcc 	andi	r2,r2,2047
   10004:	0241ffc4 	movi	r9,2047
   10008:	28d4703a 	and	r10,r5,r3
   1000c:	4201ffcc 	andi	r8,r8,2047
   10010:	38c6703a 	and	r3,r7,r3
   10014:	280ad7fa 	srli	r5,r5,31
   10018:	380ed7fa 	srli	r7,r7,31
   1001c:	12401f26 	beq	r2,r9,1009c <__ledf2+0xac>
   10020:	0241ffc4 	movi	r9,2047
   10024:	42401426 	beq	r8,r9,10078 <__ledf2+0x88>
   10028:	1000091e 	bne	r2,zero,10050 <__ledf2+0x60>
   1002c:	2296b03a 	or	r11,r4,r10
   10030:	5813003a 	cmpeq	r9,r11,zero
   10034:	29403fcc 	andi	r5,r5,255
   10038:	40000a1e 	bne	r8,zero,10064 <__ledf2+0x74>
   1003c:	30d8b03a 	or	r12,r6,r3
   10040:	6000081e 	bne	r12,zero,10064 <__ledf2+0x74>
   10044:	0005883a 	mov	r2,zero
   10048:	5800111e 	bne	r11,zero,10090 <__ledf2+0xa0>
   1004c:	f800283a 	ret
   10050:	29403fcc 	andi	r5,r5,255
   10054:	40000c1e 	bne	r8,zero,10088 <__ledf2+0x98>
   10058:	30d2b03a 	or	r9,r6,r3
   1005c:	48000c26 	beq	r9,zero,10090 <__ledf2+0xa0>
   10060:	0013883a 	mov	r9,zero
   10064:	39c03fcc 	andi	r7,r7,255
   10068:	48000826 	beq	r9,zero,1008c <__ledf2+0x9c>
   1006c:	38001126 	beq	r7,zero,100b4 <__ledf2+0xc4>
   10070:	00800044 	movi	r2,1
   10074:	f800283a 	ret
   10078:	30d2b03a 	or	r9,r6,r3
   1007c:	483fea26 	beq	r9,zero,10028 <__alt_data_end+0xffff0028>
   10080:	00800084 	movi	r2,2
   10084:	f800283a 	ret
   10088:	39c03fcc 	andi	r7,r7,255
   1008c:	39400726 	beq	r7,r5,100ac <__ledf2+0xbc>
   10090:	2800081e 	bne	r5,zero,100b4 <__ledf2+0xc4>
   10094:	00800044 	movi	r2,1
   10098:	f800283a 	ret
   1009c:	2292b03a 	or	r9,r4,r10
   100a0:	483fdf26 	beq	r9,zero,10020 <__alt_data_end+0xffff0020>
   100a4:	00800084 	movi	r2,2
   100a8:	f800283a 	ret
   100ac:	4080030e 	bge	r8,r2,100bc <__ledf2+0xcc>
   100b0:	383fef26 	beq	r7,zero,10070 <__alt_data_end+0xffff0070>
   100b4:	00bfffc4 	movi	r2,-1
   100b8:	f800283a 	ret
   100bc:	123feb16 	blt	r2,r8,1006c <__alt_data_end+0xffff006c>
   100c0:	1abff336 	bltu	r3,r10,10090 <__alt_data_end+0xffff0090>
   100c4:	50c00326 	beq	r10,r3,100d4 <__ledf2+0xe4>
   100c8:	50c0042e 	bgeu	r10,r3,100dc <__ledf2+0xec>
   100cc:	283fe81e 	bne	r5,zero,10070 <__alt_data_end+0xffff0070>
   100d0:	003ff806 	br	100b4 <__alt_data_end+0xffff00b4>
   100d4:	313fee36 	bltu	r6,r4,10090 <__alt_data_end+0xffff0090>
   100d8:	21bffc36 	bltu	r4,r6,100cc <__alt_data_end+0xffff00cc>
   100dc:	0005883a 	mov	r2,zero
   100e0:	f800283a 	ret

000100e4 <__fixdfsi>:
   100e4:	280cd53a 	srli	r6,r5,20
   100e8:	00c00434 	movhi	r3,16
   100ec:	18ffffc4 	addi	r3,r3,-1
   100f0:	3181ffcc 	andi	r6,r6,2047
   100f4:	01c0ff84 	movi	r7,1022
   100f8:	28c6703a 	and	r3,r5,r3
   100fc:	280ad7fa 	srli	r5,r5,31
   10100:	3980120e 	bge	r7,r6,1014c <__fixdfsi+0x68>
   10104:	00810744 	movi	r2,1053
   10108:	11800c16 	blt	r2,r6,1013c <__fixdfsi+0x58>
   1010c:	00810cc4 	movi	r2,1075
   10110:	1185c83a 	sub	r2,r2,r6
   10114:	01c007c4 	movi	r7,31
   10118:	18c00434 	orhi	r3,r3,16
   1011c:	38800d16 	blt	r7,r2,10154 <__fixdfsi+0x70>
   10120:	31befb44 	addi	r6,r6,-1043
   10124:	2084d83a 	srl	r2,r4,r2
   10128:	1986983a 	sll	r3,r3,r6
   1012c:	1884b03a 	or	r2,r3,r2
   10130:	28000726 	beq	r5,zero,10150 <__fixdfsi+0x6c>
   10134:	0085c83a 	sub	r2,zero,r2
   10138:	f800283a 	ret
   1013c:	00a00034 	movhi	r2,32768
   10140:	10bfffc4 	addi	r2,r2,-1
   10144:	2885883a 	add	r2,r5,r2
   10148:	f800283a 	ret
   1014c:	0005883a 	mov	r2,zero
   10150:	f800283a 	ret
   10154:	008104c4 	movi	r2,1043
   10158:	1185c83a 	sub	r2,r2,r6
   1015c:	1884d83a 	srl	r2,r3,r2
   10160:	003ff306 	br	10130 <__alt_data_end+0xffff0130>

00010164 <__floatunsidf>:
   10164:	defffe04 	addi	sp,sp,-8
   10168:	dc000015 	stw	r16,0(sp)
   1016c:	dfc00115 	stw	ra,4(sp)
   10170:	2021883a 	mov	r16,r4
   10174:	20002226 	beq	r4,zero,10200 <__floatunsidf+0x9c>
   10178:	00049440 	call	4944 <__clzsi2>
   1017c:	01010784 	movi	r4,1054
   10180:	2089c83a 	sub	r4,r4,r2
   10184:	01810cc4 	movi	r6,1075
   10188:	310dc83a 	sub	r6,r6,r4
   1018c:	00c007c4 	movi	r3,31
   10190:	1980120e 	bge	r3,r6,101dc <__floatunsidf+0x78>
   10194:	00c104c4 	movi	r3,1043
   10198:	1907c83a 	sub	r3,r3,r4
   1019c:	80ca983a 	sll	r5,r16,r3
   101a0:	00800434 	movhi	r2,16
   101a4:	10bfffc4 	addi	r2,r2,-1
   101a8:	2101ffcc 	andi	r4,r4,2047
   101ac:	0021883a 	mov	r16,zero
   101b0:	288a703a 	and	r5,r5,r2
   101b4:	2008953a 	slli	r4,r4,20
   101b8:	00c00434 	movhi	r3,16
   101bc:	18ffffc4 	addi	r3,r3,-1
   101c0:	28c6703a 	and	r3,r5,r3
   101c4:	8005883a 	mov	r2,r16
   101c8:	1906b03a 	or	r3,r3,r4
   101cc:	dfc00117 	ldw	ra,4(sp)
   101d0:	dc000017 	ldw	r16,0(sp)
   101d4:	dec00204 	addi	sp,sp,8
   101d8:	f800283a 	ret
   101dc:	00c002c4 	movi	r3,11
   101e0:	188bc83a 	sub	r5,r3,r2
   101e4:	814ad83a 	srl	r5,r16,r5
   101e8:	00c00434 	movhi	r3,16
   101ec:	18ffffc4 	addi	r3,r3,-1
   101f0:	81a0983a 	sll	r16,r16,r6
   101f4:	2101ffcc 	andi	r4,r4,2047
   101f8:	28ca703a 	and	r5,r5,r3
   101fc:	003fed06 	br	101b4 <__alt_data_end+0xffff01b4>
   10200:	0009883a 	mov	r4,zero
   10204:	000b883a 	mov	r5,zero
   10208:	003fea06 	br	101b4 <__alt_data_end+0xffff01b4>

0001020c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1020c:	defffe04 	addi	sp,sp,-8
   10210:	dfc00115 	stw	ra,4(sp)
   10214:	df000015 	stw	fp,0(sp)
   10218:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1021c:	d0a00e17 	ldw	r2,-32712(gp)
   10220:	10000326 	beq	r2,zero,10230 <alt_get_errno+0x24>
   10224:	d0a00e17 	ldw	r2,-32712(gp)
   10228:	103ee83a 	callr	r2
   1022c:	00000106 	br	10234 <alt_get_errno+0x28>
   10230:	d0a6d104 	addi	r2,gp,-25788
}
   10234:	e037883a 	mov	sp,fp
   10238:	dfc00117 	ldw	ra,4(sp)
   1023c:	df000017 	ldw	fp,0(sp)
   10240:	dec00204 	addi	sp,sp,8
   10244:	f800283a 	ret

00010248 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   10248:	defffb04 	addi	sp,sp,-20
   1024c:	dfc00415 	stw	ra,16(sp)
   10250:	df000315 	stw	fp,12(sp)
   10254:	df000304 	addi	fp,sp,12
   10258:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1025c:	e0bfff17 	ldw	r2,-4(fp)
   10260:	10000816 	blt	r2,zero,10284 <close+0x3c>
   10264:	01400304 	movi	r5,12
   10268:	e13fff17 	ldw	r4,-4(fp)
   1026c:	000197c0 	call	197c <__mulsi3>
   10270:	1007883a 	mov	r3,r2
   10274:	00800074 	movhi	r2,1
   10278:	108da104 	addi	r2,r2,13956
   1027c:	1885883a 	add	r2,r3,r2
   10280:	00000106 	br	10288 <close+0x40>
   10284:	0005883a 	mov	r2,zero
   10288:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1028c:	e0bffd17 	ldw	r2,-12(fp)
   10290:	10001926 	beq	r2,zero,102f8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   10294:	e0bffd17 	ldw	r2,-12(fp)
   10298:	10800017 	ldw	r2,0(r2)
   1029c:	10800417 	ldw	r2,16(r2)
   102a0:	10000626 	beq	r2,zero,102bc <close+0x74>
   102a4:	e0bffd17 	ldw	r2,-12(fp)
   102a8:	10800017 	ldw	r2,0(r2)
   102ac:	10800417 	ldw	r2,16(r2)
   102b0:	e13ffd17 	ldw	r4,-12(fp)
   102b4:	103ee83a 	callr	r2
   102b8:	00000106 	br	102c0 <close+0x78>
   102bc:	0005883a 	mov	r2,zero
   102c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   102c4:	e13fff17 	ldw	r4,-4(fp)
   102c8:	0010be80 	call	10be8 <alt_release_fd>
    if (rval < 0)
   102cc:	e0bffe17 	ldw	r2,-8(fp)
   102d0:	1000070e 	bge	r2,zero,102f0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   102d4:	001020c0 	call	1020c <alt_get_errno>
   102d8:	1007883a 	mov	r3,r2
   102dc:	e0bffe17 	ldw	r2,-8(fp)
   102e0:	0085c83a 	sub	r2,zero,r2
   102e4:	18800015 	stw	r2,0(r3)
      return -1;
   102e8:	00bfffc4 	movi	r2,-1
   102ec:	00000706 	br	1030c <close+0xc4>
    }
    return 0;
   102f0:	0005883a 	mov	r2,zero
   102f4:	00000506 	br	1030c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   102f8:	001020c0 	call	1020c <alt_get_errno>
   102fc:	1007883a 	mov	r3,r2
   10300:	00801444 	movi	r2,81
   10304:	18800015 	stw	r2,0(r3)
    return -1;
   10308:	00bfffc4 	movi	r2,-1
  }
}
   1030c:	e037883a 	mov	sp,fp
   10310:	dfc00117 	ldw	ra,4(sp)
   10314:	df000017 	ldw	fp,0(sp)
   10318:	dec00204 	addi	sp,sp,8
   1031c:	f800283a 	ret

00010320 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   10320:	defffc04 	addi	sp,sp,-16
   10324:	df000315 	stw	fp,12(sp)
   10328:	df000304 	addi	fp,sp,12
   1032c:	e13ffd15 	stw	r4,-12(fp)
   10330:	e17ffe15 	stw	r5,-8(fp)
   10334:	e1bfff15 	stw	r6,-4(fp)
  return len;
   10338:	e0bfff17 	ldw	r2,-4(fp)
}
   1033c:	e037883a 	mov	sp,fp
   10340:	df000017 	ldw	fp,0(sp)
   10344:	dec00104 	addi	sp,sp,4
   10348:	f800283a 	ret

0001034c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1034c:	defffd04 	addi	sp,sp,-12
   10350:	df000215 	stw	fp,8(sp)
   10354:	df000204 	addi	fp,sp,8
   10358:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1035c:	0001883a 	nop
   10360:	e0bfff17 	ldw	r2,-4(fp)
   10364:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10368:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1036c:	10000226 	beq	r2,zero,10378 <_exit+0x2c>
    ALT_SIM_FAIL();
   10370:	002af070 	cmpltui	zero,zero,43969
   10374:	00000106 	br	1037c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   10378:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1037c:	003fff06 	br	1037c <__alt_data_end+0xffff037c>

00010380 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10380:	defffe04 	addi	sp,sp,-8
   10384:	dfc00115 	stw	ra,4(sp)
   10388:	df000015 	stw	fp,0(sp)
   1038c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10390:	d0a00e17 	ldw	r2,-32712(gp)
   10394:	10000326 	beq	r2,zero,103a4 <alt_get_errno+0x24>
   10398:	d0a00e17 	ldw	r2,-32712(gp)
   1039c:	103ee83a 	callr	r2
   103a0:	00000106 	br	103a8 <alt_get_errno+0x28>
   103a4:	d0a6d104 	addi	r2,gp,-25788
}
   103a8:	e037883a 	mov	sp,fp
   103ac:	dfc00117 	ldw	ra,4(sp)
   103b0:	df000017 	ldw	fp,0(sp)
   103b4:	dec00204 	addi	sp,sp,8
   103b8:	f800283a 	ret

000103bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   103bc:	defffb04 	addi	sp,sp,-20
   103c0:	dfc00415 	stw	ra,16(sp)
   103c4:	df000315 	stw	fp,12(sp)
   103c8:	df000304 	addi	fp,sp,12
   103cc:	e13ffe15 	stw	r4,-8(fp)
   103d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   103d4:	e0bffe17 	ldw	r2,-8(fp)
   103d8:	10000816 	blt	r2,zero,103fc <fstat+0x40>
   103dc:	01400304 	movi	r5,12
   103e0:	e13ffe17 	ldw	r4,-8(fp)
   103e4:	000197c0 	call	197c <__mulsi3>
   103e8:	1007883a 	mov	r3,r2
   103ec:	00800074 	movhi	r2,1
   103f0:	108da104 	addi	r2,r2,13956
   103f4:	1885883a 	add	r2,r3,r2
   103f8:	00000106 	br	10400 <fstat+0x44>
   103fc:	0005883a 	mov	r2,zero
   10400:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   10404:	e0bffd17 	ldw	r2,-12(fp)
   10408:	10001026 	beq	r2,zero,1044c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1040c:	e0bffd17 	ldw	r2,-12(fp)
   10410:	10800017 	ldw	r2,0(r2)
   10414:	10800817 	ldw	r2,32(r2)
   10418:	10000726 	beq	r2,zero,10438 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1041c:	e0bffd17 	ldw	r2,-12(fp)
   10420:	10800017 	ldw	r2,0(r2)
   10424:	10800817 	ldw	r2,32(r2)
   10428:	e17fff17 	ldw	r5,-4(fp)
   1042c:	e13ffd17 	ldw	r4,-12(fp)
   10430:	103ee83a 	callr	r2
   10434:	00000a06 	br	10460 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   10438:	e0bfff17 	ldw	r2,-4(fp)
   1043c:	00c80004 	movi	r3,8192
   10440:	10c00115 	stw	r3,4(r2)
      return 0;
   10444:	0005883a 	mov	r2,zero
   10448:	00000506 	br	10460 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1044c:	00103800 	call	10380 <alt_get_errno>
   10450:	1007883a 	mov	r3,r2
   10454:	00801444 	movi	r2,81
   10458:	18800015 	stw	r2,0(r3)
    return -1;
   1045c:	00bfffc4 	movi	r2,-1
  }
}
   10460:	e037883a 	mov	sp,fp
   10464:	dfc00117 	ldw	ra,4(sp)
   10468:	df000017 	ldw	fp,0(sp)
   1046c:	dec00204 	addi	sp,sp,8
   10470:	f800283a 	ret

00010474 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10474:	defffe04 	addi	sp,sp,-8
   10478:	dfc00115 	stw	ra,4(sp)
   1047c:	df000015 	stw	fp,0(sp)
   10480:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10484:	d0a00e17 	ldw	r2,-32712(gp)
   10488:	10000326 	beq	r2,zero,10498 <alt_get_errno+0x24>
   1048c:	d0a00e17 	ldw	r2,-32712(gp)
   10490:	103ee83a 	callr	r2
   10494:	00000106 	br	1049c <alt_get_errno+0x28>
   10498:	d0a6d104 	addi	r2,gp,-25788
}
   1049c:	e037883a 	mov	sp,fp
   104a0:	dfc00117 	ldw	ra,4(sp)
   104a4:	df000017 	ldw	fp,0(sp)
   104a8:	dec00204 	addi	sp,sp,8
   104ac:	f800283a 	ret

000104b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   104b0:	deffed04 	addi	sp,sp,-76
   104b4:	dfc01215 	stw	ra,72(sp)
   104b8:	df001115 	stw	fp,68(sp)
   104bc:	df001104 	addi	fp,sp,68
   104c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   104c4:	e0bfff17 	ldw	r2,-4(fp)
   104c8:	10000816 	blt	r2,zero,104ec <isatty+0x3c>
   104cc:	01400304 	movi	r5,12
   104d0:	e13fff17 	ldw	r4,-4(fp)
   104d4:	000197c0 	call	197c <__mulsi3>
   104d8:	1007883a 	mov	r3,r2
   104dc:	00800074 	movhi	r2,1
   104e0:	108da104 	addi	r2,r2,13956
   104e4:	1885883a 	add	r2,r3,r2
   104e8:	00000106 	br	104f0 <isatty+0x40>
   104ec:	0005883a 	mov	r2,zero
   104f0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   104f4:	e0bfef17 	ldw	r2,-68(fp)
   104f8:	10000e26 	beq	r2,zero,10534 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   104fc:	e0bfef17 	ldw	r2,-68(fp)
   10500:	10800017 	ldw	r2,0(r2)
   10504:	10800817 	ldw	r2,32(r2)
   10508:	1000021e 	bne	r2,zero,10514 <isatty+0x64>
    {
      return 1;
   1050c:	00800044 	movi	r2,1
   10510:	00000d06 	br	10548 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   10514:	e0bff004 	addi	r2,fp,-64
   10518:	100b883a 	mov	r5,r2
   1051c:	e13fff17 	ldw	r4,-4(fp)
   10520:	00103bc0 	call	103bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10524:	e0bff117 	ldw	r2,-60(fp)
   10528:	10880020 	cmpeqi	r2,r2,8192
   1052c:	10803fcc 	andi	r2,r2,255
   10530:	00000506 	br	10548 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10534:	00104740 	call	10474 <alt_get_errno>
   10538:	1007883a 	mov	r3,r2
   1053c:	00801444 	movi	r2,81
   10540:	18800015 	stw	r2,0(r3)
    return 0;
   10544:	0005883a 	mov	r2,zero
  }
}
   10548:	e037883a 	mov	sp,fp
   1054c:	dfc00117 	ldw	ra,4(sp)
   10550:	df000017 	ldw	fp,0(sp)
   10554:	dec00204 	addi	sp,sp,8
   10558:	f800283a 	ret

0001055c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1055c:	defffc04 	addi	sp,sp,-16
   10560:	df000315 	stw	fp,12(sp)
   10564:	df000304 	addi	fp,sp,12
   10568:	e13ffd15 	stw	r4,-12(fp)
   1056c:	e17ffe15 	stw	r5,-8(fp)
   10570:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10574:	e0fffe17 	ldw	r3,-8(fp)
   10578:	e0bffd17 	ldw	r2,-12(fp)
   1057c:	18800c26 	beq	r3,r2,105b0 <alt_load_section+0x54>
  {
    while( to != end )
   10580:	00000806 	br	105a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10584:	e0bffe17 	ldw	r2,-8(fp)
   10588:	10c00104 	addi	r3,r2,4
   1058c:	e0fffe15 	stw	r3,-8(fp)
   10590:	e0fffd17 	ldw	r3,-12(fp)
   10594:	19000104 	addi	r4,r3,4
   10598:	e13ffd15 	stw	r4,-12(fp)
   1059c:	18c00017 	ldw	r3,0(r3)
   105a0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   105a4:	e0fffe17 	ldw	r3,-8(fp)
   105a8:	e0bfff17 	ldw	r2,-4(fp)
   105ac:	18bff51e 	bne	r3,r2,10584 <__alt_data_end+0xffff0584>
    {
      *to++ = *from++;
    }
  }
}
   105b0:	0001883a 	nop
   105b4:	e037883a 	mov	sp,fp
   105b8:	df000017 	ldw	fp,0(sp)
   105bc:	dec00104 	addi	sp,sp,4
   105c0:	f800283a 	ret

000105c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   105c4:	defffe04 	addi	sp,sp,-8
   105c8:	dfc00115 	stw	ra,4(sp)
   105cc:	df000015 	stw	fp,0(sp)
   105d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   105d4:	01800074 	movhi	r6,1
   105d8:	31922c04 	addi	r6,r6,18608
   105dc:	01400074 	movhi	r5,1
   105e0:	294b6e04 	addi	r5,r5,11704
   105e4:	01000074 	movhi	r4,1
   105e8:	21122c04 	addi	r4,r4,18608
   105ec:	001055c0 	call	1055c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   105f0:	01800034 	movhi	r6,0
   105f4:	31808c04 	addi	r6,r6,560
   105f8:	01400034 	movhi	r5,0
   105fc:	29400804 	addi	r5,r5,32
   10600:	01000034 	movhi	r4,0
   10604:	21000804 	addi	r4,r4,32
   10608:	001055c0 	call	1055c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1060c:	01800074 	movhi	r6,1
   10610:	318b6e04 	addi	r6,r6,11704
   10614:	01400074 	movhi	r5,1
   10618:	2949fe04 	addi	r5,r5,10232
   1061c:	01000074 	movhi	r4,1
   10620:	2109fe04 	addi	r4,r4,10232
   10624:	001055c0 	call	1055c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10628:	0011bb00 	call	11bb0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1062c:	0011fcc0 	call	11fcc <alt_icache_flush_all>
}
   10630:	0001883a 	nop
   10634:	e037883a 	mov	sp,fp
   10638:	dfc00117 	ldw	ra,4(sp)
   1063c:	df000017 	ldw	fp,0(sp)
   10640:	dec00204 	addi	sp,sp,8
   10644:	f800283a 	ret

00010648 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10648:	defffe04 	addi	sp,sp,-8
   1064c:	dfc00115 	stw	ra,4(sp)
   10650:	df000015 	stw	fp,0(sp)
   10654:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10658:	d0a00e17 	ldw	r2,-32712(gp)
   1065c:	10000326 	beq	r2,zero,1066c <alt_get_errno+0x24>
   10660:	d0a00e17 	ldw	r2,-32712(gp)
   10664:	103ee83a 	callr	r2
   10668:	00000106 	br	10670 <alt_get_errno+0x28>
   1066c:	d0a6d104 	addi	r2,gp,-25788
}
   10670:	e037883a 	mov	sp,fp
   10674:	dfc00117 	ldw	ra,4(sp)
   10678:	df000017 	ldw	fp,0(sp)
   1067c:	dec00204 	addi	sp,sp,8
   10680:	f800283a 	ret

00010684 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   10684:	defff904 	addi	sp,sp,-28
   10688:	dfc00615 	stw	ra,24(sp)
   1068c:	df000515 	stw	fp,20(sp)
   10690:	df000504 	addi	fp,sp,20
   10694:	e13ffd15 	stw	r4,-12(fp)
   10698:	e17ffe15 	stw	r5,-8(fp)
   1069c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   106a0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   106a4:	e0bffd17 	ldw	r2,-12(fp)
   106a8:	10000816 	blt	r2,zero,106cc <lseek+0x48>
   106ac:	01400304 	movi	r5,12
   106b0:	e13ffd17 	ldw	r4,-12(fp)
   106b4:	000197c0 	call	197c <__mulsi3>
   106b8:	1007883a 	mov	r3,r2
   106bc:	00800074 	movhi	r2,1
   106c0:	108da104 	addi	r2,r2,13956
   106c4:	1885883a 	add	r2,r3,r2
   106c8:	00000106 	br	106d0 <lseek+0x4c>
   106cc:	0005883a 	mov	r2,zero
   106d0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   106d4:	e0bffc17 	ldw	r2,-16(fp)
   106d8:	10001026 	beq	r2,zero,1071c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   106dc:	e0bffc17 	ldw	r2,-16(fp)
   106e0:	10800017 	ldw	r2,0(r2)
   106e4:	10800717 	ldw	r2,28(r2)
   106e8:	10000926 	beq	r2,zero,10710 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   106ec:	e0bffc17 	ldw	r2,-16(fp)
   106f0:	10800017 	ldw	r2,0(r2)
   106f4:	10800717 	ldw	r2,28(r2)
   106f8:	e1bfff17 	ldw	r6,-4(fp)
   106fc:	e17ffe17 	ldw	r5,-8(fp)
   10700:	e13ffc17 	ldw	r4,-16(fp)
   10704:	103ee83a 	callr	r2
   10708:	e0bffb15 	stw	r2,-20(fp)
   1070c:	00000506 	br	10724 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   10710:	00bfde84 	movi	r2,-134
   10714:	e0bffb15 	stw	r2,-20(fp)
   10718:	00000206 	br	10724 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1071c:	00bfebc4 	movi	r2,-81
   10720:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   10724:	e0bffb17 	ldw	r2,-20(fp)
   10728:	1000070e 	bge	r2,zero,10748 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1072c:	00106480 	call	10648 <alt_get_errno>
   10730:	1007883a 	mov	r3,r2
   10734:	e0bffb17 	ldw	r2,-20(fp)
   10738:	0085c83a 	sub	r2,zero,r2
   1073c:	18800015 	stw	r2,0(r3)
    rc = -1;
   10740:	00bfffc4 	movi	r2,-1
   10744:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   10748:	e0bffb17 	ldw	r2,-20(fp)
}
   1074c:	e037883a 	mov	sp,fp
   10750:	dfc00117 	ldw	ra,4(sp)
   10754:	df000017 	ldw	fp,0(sp)
   10758:	dec00204 	addi	sp,sp,8
   1075c:	f800283a 	ret

00010760 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10760:	defffd04 	addi	sp,sp,-12
   10764:	dfc00215 	stw	ra,8(sp)
   10768:	df000115 	stw	fp,4(sp)
   1076c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10770:	0009883a 	mov	r4,zero
   10774:	0010e8c0 	call	10e8c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10778:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1077c:	0010ec40 	call	10ec4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10780:	01800074 	movhi	r6,1
   10784:	318b6404 	addi	r6,r6,11664
   10788:	01400074 	movhi	r5,1
   1078c:	294b6404 	addi	r5,r5,11664
   10790:	01000074 	movhi	r4,1
   10794:	210b6404 	addi	r4,r4,11664
   10798:	00123700 	call	12370 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1079c:	0011cb00 	call	11cb0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   107a0:	01000074 	movhi	r4,1
   107a4:	21074404 	addi	r4,r4,7440
   107a8:	00126500 	call	12650 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   107ac:	d0a6d817 	ldw	r2,-25760(gp)
   107b0:	d0e6d917 	ldw	r3,-25756(gp)
   107b4:	d126da17 	ldw	r4,-25752(gp)
   107b8:	200d883a 	mov	r6,r4
   107bc:	180b883a 	mov	r5,r3
   107c0:	1009883a 	mov	r4,r2
   107c4:	0000d500 	call	d50 <main>
   107c8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   107cc:	01000044 	movi	r4,1
   107d0:	00102480 	call	10248 <close>
  exit (result);
   107d4:	e13fff17 	ldw	r4,-4(fp)
   107d8:	0004b5c0 	call	4b5c <exit>

000107dc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   107dc:	defffe04 	addi	sp,sp,-8
   107e0:	df000115 	stw	fp,4(sp)
   107e4:	df000104 	addi	fp,sp,4
   107e8:	e13fff15 	stw	r4,-4(fp)
}
   107ec:	0001883a 	nop
   107f0:	e037883a 	mov	sp,fp
   107f4:	df000017 	ldw	fp,0(sp)
   107f8:	dec00104 	addi	sp,sp,4
   107fc:	f800283a 	ret

00010800 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10800:	defffe04 	addi	sp,sp,-8
   10804:	df000115 	stw	fp,4(sp)
   10808:	df000104 	addi	fp,sp,4
   1080c:	e13fff15 	stw	r4,-4(fp)
}
   10810:	0001883a 	nop
   10814:	e037883a 	mov	sp,fp
   10818:	df000017 	ldw	fp,0(sp)
   1081c:	dec00104 	addi	sp,sp,4
   10820:	f800283a 	ret

00010824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10824:	defffe04 	addi	sp,sp,-8
   10828:	dfc00115 	stw	ra,4(sp)
   1082c:	df000015 	stw	fp,0(sp)
   10830:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10834:	d0a00e17 	ldw	r2,-32712(gp)
   10838:	10000326 	beq	r2,zero,10848 <alt_get_errno+0x24>
   1083c:	d0a00e17 	ldw	r2,-32712(gp)
   10840:	103ee83a 	callr	r2
   10844:	00000106 	br	1084c <alt_get_errno+0x28>
   10848:	d0a6d104 	addi	r2,gp,-25788
}
   1084c:	e037883a 	mov	sp,fp
   10850:	dfc00117 	ldw	ra,4(sp)
   10854:	df000017 	ldw	fp,0(sp)
   10858:	dec00204 	addi	sp,sp,8
   1085c:	f800283a 	ret

00010860 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10860:	defffb04 	addi	sp,sp,-20
   10864:	dfc00415 	stw	ra,16(sp)
   10868:	df000315 	stw	fp,12(sp)
   1086c:	dc000215 	stw	r16,8(sp)
   10870:	df000304 	addi	fp,sp,12
   10874:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10878:	e0bffe17 	ldw	r2,-8(fp)
   1087c:	10800217 	ldw	r2,8(r2)
   10880:	10d00034 	orhi	r3,r2,16384
   10884:	e0bffe17 	ldw	r2,-8(fp)
   10888:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1088c:	e03ffd15 	stw	zero,-12(fp)
   10890:	00002306 	br	10920 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10894:	04000074 	movhi	r16,1
   10898:	840da104 	addi	r16,r16,13956
   1089c:	e0bffd17 	ldw	r2,-12(fp)
   108a0:	01400304 	movi	r5,12
   108a4:	1009883a 	mov	r4,r2
   108a8:	000197c0 	call	197c <__mulsi3>
   108ac:	8085883a 	add	r2,r16,r2
   108b0:	10c00017 	ldw	r3,0(r2)
   108b4:	e0bffe17 	ldw	r2,-8(fp)
   108b8:	10800017 	ldw	r2,0(r2)
   108bc:	1880151e 	bne	r3,r2,10914 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   108c0:	04000074 	movhi	r16,1
   108c4:	840da104 	addi	r16,r16,13956
   108c8:	e0bffd17 	ldw	r2,-12(fp)
   108cc:	01400304 	movi	r5,12
   108d0:	1009883a 	mov	r4,r2
   108d4:	000197c0 	call	197c <__mulsi3>
   108d8:	8085883a 	add	r2,r16,r2
   108dc:	10800204 	addi	r2,r2,8
   108e0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   108e4:	10000b0e 	bge	r2,zero,10914 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   108e8:	01400304 	movi	r5,12
   108ec:	e13ffd17 	ldw	r4,-12(fp)
   108f0:	000197c0 	call	197c <__mulsi3>
   108f4:	1007883a 	mov	r3,r2
   108f8:	00800074 	movhi	r2,1
   108fc:	108da104 	addi	r2,r2,13956
   10900:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10904:	e0bffe17 	ldw	r2,-8(fp)
   10908:	18800226 	beq	r3,r2,10914 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1090c:	00bffcc4 	movi	r2,-13
   10910:	00000806 	br	10934 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10914:	e0bffd17 	ldw	r2,-12(fp)
   10918:	10800044 	addi	r2,r2,1
   1091c:	e0bffd15 	stw	r2,-12(fp)
   10920:	d0a00d17 	ldw	r2,-32716(gp)
   10924:	1007883a 	mov	r3,r2
   10928:	e0bffd17 	ldw	r2,-12(fp)
   1092c:	18bfd92e 	bgeu	r3,r2,10894 <__alt_data_end+0xffff0894>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10930:	0005883a 	mov	r2,zero
}
   10934:	e6ffff04 	addi	sp,fp,-4
   10938:	dfc00217 	ldw	ra,8(sp)
   1093c:	df000117 	ldw	fp,4(sp)
   10940:	dc000017 	ldw	r16,0(sp)
   10944:	dec00304 	addi	sp,sp,12
   10948:	f800283a 	ret

0001094c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1094c:	defff604 	addi	sp,sp,-40
   10950:	dfc00915 	stw	ra,36(sp)
   10954:	df000815 	stw	fp,32(sp)
   10958:	df000804 	addi	fp,sp,32
   1095c:	e13ffd15 	stw	r4,-12(fp)
   10960:	e17ffe15 	stw	r5,-8(fp)
   10964:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10968:	00bfffc4 	movi	r2,-1
   1096c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10970:	00bffb44 	movi	r2,-19
   10974:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10978:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1097c:	d1600b04 	addi	r5,gp,-32724
   10980:	e13ffd17 	ldw	r4,-12(fp)
   10984:	0011d700 	call	11d70 <alt_find_dev>
   10988:	e0bff815 	stw	r2,-32(fp)
   1098c:	e0bff817 	ldw	r2,-32(fp)
   10990:	1000051e 	bne	r2,zero,109a8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10994:	e13ffd17 	ldw	r4,-12(fp)
   10998:	0011e000 	call	11e00 <alt_find_file>
   1099c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   109a0:	00800044 	movi	r2,1
   109a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   109a8:	e0bff817 	ldw	r2,-32(fp)
   109ac:	10002b26 	beq	r2,zero,10a5c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   109b0:	e13ff817 	ldw	r4,-32(fp)
   109b4:	0011f080 	call	11f08 <alt_get_fd>
   109b8:	e0bff915 	stw	r2,-28(fp)
   109bc:	e0bff917 	ldw	r2,-28(fp)
   109c0:	1000030e 	bge	r2,zero,109d0 <open+0x84>
    {
      status = index;
   109c4:	e0bff917 	ldw	r2,-28(fp)
   109c8:	e0bffa15 	stw	r2,-24(fp)
   109cc:	00002506 	br	10a64 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   109d0:	01400304 	movi	r5,12
   109d4:	e13ff917 	ldw	r4,-28(fp)
   109d8:	000197c0 	call	197c <__mulsi3>
   109dc:	1007883a 	mov	r3,r2
   109e0:	00800074 	movhi	r2,1
   109e4:	108da104 	addi	r2,r2,13956
   109e8:	1885883a 	add	r2,r3,r2
   109ec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   109f0:	e0fffe17 	ldw	r3,-8(fp)
   109f4:	00900034 	movhi	r2,16384
   109f8:	10bfffc4 	addi	r2,r2,-1
   109fc:	1886703a 	and	r3,r3,r2
   10a00:	e0bffc17 	ldw	r2,-16(fp)
   10a04:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10a08:	e0bffb17 	ldw	r2,-20(fp)
   10a0c:	1000051e 	bne	r2,zero,10a24 <open+0xd8>
   10a10:	e13ffc17 	ldw	r4,-16(fp)
   10a14:	00108600 	call	10860 <alt_file_locked>
   10a18:	e0bffa15 	stw	r2,-24(fp)
   10a1c:	e0bffa17 	ldw	r2,-24(fp)
   10a20:	10001016 	blt	r2,zero,10a64 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10a24:	e0bff817 	ldw	r2,-32(fp)
   10a28:	10800317 	ldw	r2,12(r2)
   10a2c:	10000826 	beq	r2,zero,10a50 <open+0x104>
   10a30:	e0bff817 	ldw	r2,-32(fp)
   10a34:	10800317 	ldw	r2,12(r2)
   10a38:	e1ffff17 	ldw	r7,-4(fp)
   10a3c:	e1bffe17 	ldw	r6,-8(fp)
   10a40:	e17ffd17 	ldw	r5,-12(fp)
   10a44:	e13ffc17 	ldw	r4,-16(fp)
   10a48:	103ee83a 	callr	r2
   10a4c:	00000106 	br	10a54 <open+0x108>
   10a50:	0005883a 	mov	r2,zero
   10a54:	e0bffa15 	stw	r2,-24(fp)
   10a58:	00000206 	br	10a64 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10a5c:	00bffb44 	movi	r2,-19
   10a60:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10a64:	e0bffa17 	ldw	r2,-24(fp)
   10a68:	1000090e 	bge	r2,zero,10a90 <open+0x144>
  {
    alt_release_fd (index);  
   10a6c:	e13ff917 	ldw	r4,-28(fp)
   10a70:	0010be80 	call	10be8 <alt_release_fd>
    ALT_ERRNO = -status;
   10a74:	00108240 	call	10824 <alt_get_errno>
   10a78:	1007883a 	mov	r3,r2
   10a7c:	e0bffa17 	ldw	r2,-24(fp)
   10a80:	0085c83a 	sub	r2,zero,r2
   10a84:	18800015 	stw	r2,0(r3)
    return -1;
   10a88:	00bfffc4 	movi	r2,-1
   10a8c:	00000106 	br	10a94 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   10a90:	e0bff917 	ldw	r2,-28(fp)
}
   10a94:	e037883a 	mov	sp,fp
   10a98:	dfc00117 	ldw	ra,4(sp)
   10a9c:	df000017 	ldw	fp,0(sp)
   10aa0:	dec00204 	addi	sp,sp,8
   10aa4:	f800283a 	ret

00010aa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10aa8:	defffe04 	addi	sp,sp,-8
   10aac:	dfc00115 	stw	ra,4(sp)
   10ab0:	df000015 	stw	fp,0(sp)
   10ab4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10ab8:	d0a00e17 	ldw	r2,-32712(gp)
   10abc:	10000326 	beq	r2,zero,10acc <alt_get_errno+0x24>
   10ac0:	d0a00e17 	ldw	r2,-32712(gp)
   10ac4:	103ee83a 	callr	r2
   10ac8:	00000106 	br	10ad0 <alt_get_errno+0x28>
   10acc:	d0a6d104 	addi	r2,gp,-25788
}
   10ad0:	e037883a 	mov	sp,fp
   10ad4:	dfc00117 	ldw	ra,4(sp)
   10ad8:	df000017 	ldw	fp,0(sp)
   10adc:	dec00204 	addi	sp,sp,8
   10ae0:	f800283a 	ret

00010ae4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   10ae4:	defff904 	addi	sp,sp,-28
   10ae8:	dfc00615 	stw	ra,24(sp)
   10aec:	df000515 	stw	fp,20(sp)
   10af0:	df000504 	addi	fp,sp,20
   10af4:	e13ffd15 	stw	r4,-12(fp)
   10af8:	e17ffe15 	stw	r5,-8(fp)
   10afc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10b00:	e0bffd17 	ldw	r2,-12(fp)
   10b04:	10000816 	blt	r2,zero,10b28 <read+0x44>
   10b08:	01400304 	movi	r5,12
   10b0c:	e13ffd17 	ldw	r4,-12(fp)
   10b10:	000197c0 	call	197c <__mulsi3>
   10b14:	1007883a 	mov	r3,r2
   10b18:	00800074 	movhi	r2,1
   10b1c:	108da104 	addi	r2,r2,13956
   10b20:	1885883a 	add	r2,r3,r2
   10b24:	00000106 	br	10b2c <read+0x48>
   10b28:	0005883a 	mov	r2,zero
   10b2c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10b30:	e0bffb17 	ldw	r2,-20(fp)
   10b34:	10002226 	beq	r2,zero,10bc0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10b38:	e0bffb17 	ldw	r2,-20(fp)
   10b3c:	10800217 	ldw	r2,8(r2)
   10b40:	108000cc 	andi	r2,r2,3
   10b44:	10800060 	cmpeqi	r2,r2,1
   10b48:	1000181e 	bne	r2,zero,10bac <read+0xc8>
        (fd->dev->read))
   10b4c:	e0bffb17 	ldw	r2,-20(fp)
   10b50:	10800017 	ldw	r2,0(r2)
   10b54:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10b58:	10001426 	beq	r2,zero,10bac <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   10b5c:	e0bffb17 	ldw	r2,-20(fp)
   10b60:	10800017 	ldw	r2,0(r2)
   10b64:	10800517 	ldw	r2,20(r2)
   10b68:	e0ffff17 	ldw	r3,-4(fp)
   10b6c:	180d883a 	mov	r6,r3
   10b70:	e17ffe17 	ldw	r5,-8(fp)
   10b74:	e13ffb17 	ldw	r4,-20(fp)
   10b78:	103ee83a 	callr	r2
   10b7c:	e0bffc15 	stw	r2,-16(fp)
   10b80:	e0bffc17 	ldw	r2,-16(fp)
   10b84:	1000070e 	bge	r2,zero,10ba4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   10b88:	0010aa80 	call	10aa8 <alt_get_errno>
   10b8c:	1007883a 	mov	r3,r2
   10b90:	e0bffc17 	ldw	r2,-16(fp)
   10b94:	0085c83a 	sub	r2,zero,r2
   10b98:	18800015 	stw	r2,0(r3)
          return -1;
   10b9c:	00bfffc4 	movi	r2,-1
   10ba0:	00000c06 	br	10bd4 <read+0xf0>
        }
        return rval;
   10ba4:	e0bffc17 	ldw	r2,-16(fp)
   10ba8:	00000a06 	br	10bd4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10bac:	0010aa80 	call	10aa8 <alt_get_errno>
   10bb0:	1007883a 	mov	r3,r2
   10bb4:	00800344 	movi	r2,13
   10bb8:	18800015 	stw	r2,0(r3)
   10bbc:	00000406 	br	10bd0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   10bc0:	0010aa80 	call	10aa8 <alt_get_errno>
   10bc4:	1007883a 	mov	r3,r2
   10bc8:	00801444 	movi	r2,81
   10bcc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10bd0:	00bfffc4 	movi	r2,-1
}
   10bd4:	e037883a 	mov	sp,fp
   10bd8:	dfc00117 	ldw	ra,4(sp)
   10bdc:	df000017 	ldw	fp,0(sp)
   10be0:	dec00204 	addi	sp,sp,8
   10be4:	f800283a 	ret

00010be8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10be8:	defffc04 	addi	sp,sp,-16
   10bec:	dfc00315 	stw	ra,12(sp)
   10bf0:	df000215 	stw	fp,8(sp)
   10bf4:	dc000115 	stw	r16,4(sp)
   10bf8:	df000204 	addi	fp,sp,8
   10bfc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   10c00:	e0bffe17 	ldw	r2,-8(fp)
   10c04:	108000d0 	cmplti	r2,r2,3
   10c08:	1000111e 	bne	r2,zero,10c50 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   10c0c:	04000074 	movhi	r16,1
   10c10:	840da104 	addi	r16,r16,13956
   10c14:	e0bffe17 	ldw	r2,-8(fp)
   10c18:	01400304 	movi	r5,12
   10c1c:	1009883a 	mov	r4,r2
   10c20:	000197c0 	call	197c <__mulsi3>
   10c24:	8085883a 	add	r2,r16,r2
   10c28:	10800204 	addi	r2,r2,8
   10c2c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10c30:	04000074 	movhi	r16,1
   10c34:	840da104 	addi	r16,r16,13956
   10c38:	e0bffe17 	ldw	r2,-8(fp)
   10c3c:	01400304 	movi	r5,12
   10c40:	1009883a 	mov	r4,r2
   10c44:	000197c0 	call	197c <__mulsi3>
   10c48:	8085883a 	add	r2,r16,r2
   10c4c:	10000015 	stw	zero,0(r2)
  }
}
   10c50:	0001883a 	nop
   10c54:	e6ffff04 	addi	sp,fp,-4
   10c58:	dfc00217 	ldw	ra,8(sp)
   10c5c:	df000117 	ldw	fp,4(sp)
   10c60:	dc000017 	ldw	r16,0(sp)
   10c64:	dec00304 	addi	sp,sp,12
   10c68:	f800283a 	ret

00010c6c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10c6c:	defff904 	addi	sp,sp,-28
   10c70:	df000615 	stw	fp,24(sp)
   10c74:	df000604 	addi	fp,sp,24
   10c78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c7c:	0005303a 	rdctl	r2,status
   10c80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c84:	e0fffe17 	ldw	r3,-8(fp)
   10c88:	00bfff84 	movi	r2,-2
   10c8c:	1884703a 	and	r2,r3,r2
   10c90:	1001703a 	wrctl	status,r2
  
  return context;
   10c94:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   10c98:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10c9c:	d0a00f17 	ldw	r2,-32708(gp)
   10ca0:	10c000c4 	addi	r3,r2,3
   10ca4:	00bfff04 	movi	r2,-4
   10ca8:	1884703a 	and	r2,r3,r2
   10cac:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10cb0:	d0e00f17 	ldw	r3,-32708(gp)
   10cb4:	e0bfff17 	ldw	r2,-4(fp)
   10cb8:	1887883a 	add	r3,r3,r2
   10cbc:	008000b4 	movhi	r2,2
   10cc0:	10800004 	addi	r2,r2,0
   10cc4:	10c0062e 	bgeu	r2,r3,10ce0 <sbrk+0x74>
   10cc8:	e0bffb17 	ldw	r2,-20(fp)
   10ccc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cd0:	e0bffa17 	ldw	r2,-24(fp)
   10cd4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   10cd8:	00bfffc4 	movi	r2,-1
   10cdc:	00000b06 	br	10d0c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   10ce0:	d0a00f17 	ldw	r2,-32708(gp)
   10ce4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   10ce8:	d0e00f17 	ldw	r3,-32708(gp)
   10cec:	e0bfff17 	ldw	r2,-4(fp)
   10cf0:	1885883a 	add	r2,r3,r2
   10cf4:	d0a00f15 	stw	r2,-32708(gp)
   10cf8:	e0bffb17 	ldw	r2,-20(fp)
   10cfc:	e0bffc15 	stw	r2,-16(fp)
   10d00:	e0bffc17 	ldw	r2,-16(fp)
   10d04:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   10d08:	e0bffd17 	ldw	r2,-12(fp)
} 
   10d0c:	e037883a 	mov	sp,fp
   10d10:	df000017 	ldw	fp,0(sp)
   10d14:	dec00104 	addi	sp,sp,4
   10d18:	f800283a 	ret

00010d1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10d1c:	defffe04 	addi	sp,sp,-8
   10d20:	dfc00115 	stw	ra,4(sp)
   10d24:	df000015 	stw	fp,0(sp)
   10d28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10d2c:	d0a00e17 	ldw	r2,-32712(gp)
   10d30:	10000326 	beq	r2,zero,10d40 <alt_get_errno+0x24>
   10d34:	d0a00e17 	ldw	r2,-32712(gp)
   10d38:	103ee83a 	callr	r2
   10d3c:	00000106 	br	10d44 <alt_get_errno+0x28>
   10d40:	d0a6d104 	addi	r2,gp,-25788
}
   10d44:	e037883a 	mov	sp,fp
   10d48:	dfc00117 	ldw	ra,4(sp)
   10d4c:	df000017 	ldw	fp,0(sp)
   10d50:	dec00204 	addi	sp,sp,8
   10d54:	f800283a 	ret

00010d58 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10d58:	defff904 	addi	sp,sp,-28
   10d5c:	dfc00615 	stw	ra,24(sp)
   10d60:	df000515 	stw	fp,20(sp)
   10d64:	df000504 	addi	fp,sp,20
   10d68:	e13ffd15 	stw	r4,-12(fp)
   10d6c:	e17ffe15 	stw	r5,-8(fp)
   10d70:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10d74:	e0bffd17 	ldw	r2,-12(fp)
   10d78:	10000816 	blt	r2,zero,10d9c <write+0x44>
   10d7c:	01400304 	movi	r5,12
   10d80:	e13ffd17 	ldw	r4,-12(fp)
   10d84:	000197c0 	call	197c <__mulsi3>
   10d88:	1007883a 	mov	r3,r2
   10d8c:	00800074 	movhi	r2,1
   10d90:	108da104 	addi	r2,r2,13956
   10d94:	1885883a 	add	r2,r3,r2
   10d98:	00000106 	br	10da0 <write+0x48>
   10d9c:	0005883a 	mov	r2,zero
   10da0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10da4:	e0bffb17 	ldw	r2,-20(fp)
   10da8:	10002126 	beq	r2,zero,10e30 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10dac:	e0bffb17 	ldw	r2,-20(fp)
   10db0:	10800217 	ldw	r2,8(r2)
   10db4:	108000cc 	andi	r2,r2,3
   10db8:	10001826 	beq	r2,zero,10e1c <write+0xc4>
   10dbc:	e0bffb17 	ldw	r2,-20(fp)
   10dc0:	10800017 	ldw	r2,0(r2)
   10dc4:	10800617 	ldw	r2,24(r2)
   10dc8:	10001426 	beq	r2,zero,10e1c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10dcc:	e0bffb17 	ldw	r2,-20(fp)
   10dd0:	10800017 	ldw	r2,0(r2)
   10dd4:	10800617 	ldw	r2,24(r2)
   10dd8:	e0ffff17 	ldw	r3,-4(fp)
   10ddc:	180d883a 	mov	r6,r3
   10de0:	e17ffe17 	ldw	r5,-8(fp)
   10de4:	e13ffb17 	ldw	r4,-20(fp)
   10de8:	103ee83a 	callr	r2
   10dec:	e0bffc15 	stw	r2,-16(fp)
   10df0:	e0bffc17 	ldw	r2,-16(fp)
   10df4:	1000070e 	bge	r2,zero,10e14 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   10df8:	0010d1c0 	call	10d1c <alt_get_errno>
   10dfc:	1007883a 	mov	r3,r2
   10e00:	e0bffc17 	ldw	r2,-16(fp)
   10e04:	0085c83a 	sub	r2,zero,r2
   10e08:	18800015 	stw	r2,0(r3)
        return -1;
   10e0c:	00bfffc4 	movi	r2,-1
   10e10:	00000c06 	br	10e44 <write+0xec>
      }
      return rval;
   10e14:	e0bffc17 	ldw	r2,-16(fp)
   10e18:	00000a06 	br	10e44 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10e1c:	0010d1c0 	call	10d1c <alt_get_errno>
   10e20:	1007883a 	mov	r3,r2
   10e24:	00800344 	movi	r2,13
   10e28:	18800015 	stw	r2,0(r3)
   10e2c:	00000406 	br	10e40 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10e30:	0010d1c0 	call	10d1c <alt_get_errno>
   10e34:	1007883a 	mov	r3,r2
   10e38:	00801444 	movi	r2,81
   10e3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10e40:	00bfffc4 	movi	r2,-1
}
   10e44:	e037883a 	mov	sp,fp
   10e48:	dfc00117 	ldw	ra,4(sp)
   10e4c:	df000017 	ldw	fp,0(sp)
   10e50:	dec00204 	addi	sp,sp,8
   10e54:	f800283a 	ret

00010e58 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10e58:	defffd04 	addi	sp,sp,-12
   10e5c:	dfc00215 	stw	ra,8(sp)
   10e60:	df000115 	stw	fp,4(sp)
   10e64:	df000104 	addi	fp,sp,4
   10e68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10e6c:	d1600b04 	addi	r5,gp,-32724
   10e70:	e13fff17 	ldw	r4,-4(fp)
   10e74:	0011c0c0 	call	11c0c <alt_dev_llist_insert>
}
   10e78:	e037883a 	mov	sp,fp
   10e7c:	dfc00117 	ldw	ra,4(sp)
   10e80:	df000017 	ldw	fp,0(sp)
   10e84:	dec00204 	addi	sp,sp,8
   10e88:	f800283a 	ret

00010e8c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10e8c:	defffd04 	addi	sp,sp,-12
   10e90:	dfc00215 	stw	ra,8(sp)
   10e94:	df000115 	stw	fp,4(sp)
   10e98:	df000104 	addi	fp,sp,4
   10e9c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROC, proc);
   10ea0:	00125900 	call	12590 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10ea4:	00800044 	movi	r2,1
   10ea8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10eac:	0001883a 	nop
   10eb0:	e037883a 	mov	sp,fp
   10eb4:	dfc00117 	ldw	ra,4(sp)
   10eb8:	df000017 	ldw	fp,0(sp)
   10ebc:	dec00204 	addi	sp,sp,8
   10ec0:	f800283a 	ret

00010ec4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10ec4:	defffe04 	addi	sp,sp,-8
   10ec8:	dfc00115 	stw	ra,4(sp)
   10ecc:	df000015 	stw	fp,0(sp)
   10ed0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   10ed4:	01c0fa04 	movi	r7,1000
   10ed8:	01800044 	movi	r6,1
   10edc:	000b883a 	mov	r5,zero
   10ee0:	01000134 	movhi	r4,4
   10ee4:	21040804 	addi	r4,r4,4128
   10ee8:	0011a080 	call	11a08 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( WATCHDOG, watchdog);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   10eec:	000d883a 	mov	r6,zero
   10ef0:	000b883a 	mov	r5,zero
   10ef4:	01000074 	movhi	r4,1
   10ef8:	210e0b04 	addi	r4,r4,14380
   10efc:	001108c0 	call	1108c <altera_avalon_jtag_uart_init>
   10f00:	01000074 	movhi	r4,1
   10f04:	210e0104 	addi	r4,r4,14340
   10f08:	0010e580 	call	10e58 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   10f0c:	0001883a 	nop
}
   10f10:	0001883a 	nop
   10f14:	e037883a 	mov	sp,fp
   10f18:	dfc00117 	ldw	ra,4(sp)
   10f1c:	df000017 	ldw	fp,0(sp)
   10f20:	dec00204 	addi	sp,sp,8
   10f24:	f800283a 	ret

00010f28 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10f28:	defffa04 	addi	sp,sp,-24
   10f2c:	dfc00515 	stw	ra,20(sp)
   10f30:	df000415 	stw	fp,16(sp)
   10f34:	df000404 	addi	fp,sp,16
   10f38:	e13ffd15 	stw	r4,-12(fp)
   10f3c:	e17ffe15 	stw	r5,-8(fp)
   10f40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10f44:	e0bffd17 	ldw	r2,-12(fp)
   10f48:	10800017 	ldw	r2,0(r2)
   10f4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10f50:	e0bffc17 	ldw	r2,-16(fp)
   10f54:	10c00a04 	addi	r3,r2,40
   10f58:	e0bffd17 	ldw	r2,-12(fp)
   10f5c:	10800217 	ldw	r2,8(r2)
   10f60:	100f883a 	mov	r7,r2
   10f64:	e1bfff17 	ldw	r6,-4(fp)
   10f68:	e17ffe17 	ldw	r5,-8(fp)
   10f6c:	1809883a 	mov	r4,r3
   10f70:	00115500 	call	11550 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10f74:	e037883a 	mov	sp,fp
   10f78:	dfc00117 	ldw	ra,4(sp)
   10f7c:	df000017 	ldw	fp,0(sp)
   10f80:	dec00204 	addi	sp,sp,8
   10f84:	f800283a 	ret

00010f88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10f88:	defffa04 	addi	sp,sp,-24
   10f8c:	dfc00515 	stw	ra,20(sp)
   10f90:	df000415 	stw	fp,16(sp)
   10f94:	df000404 	addi	fp,sp,16
   10f98:	e13ffd15 	stw	r4,-12(fp)
   10f9c:	e17ffe15 	stw	r5,-8(fp)
   10fa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10fa4:	e0bffd17 	ldw	r2,-12(fp)
   10fa8:	10800017 	ldw	r2,0(r2)
   10fac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10fb0:	e0bffc17 	ldw	r2,-16(fp)
   10fb4:	10c00a04 	addi	r3,r2,40
   10fb8:	e0bffd17 	ldw	r2,-12(fp)
   10fbc:	10800217 	ldw	r2,8(r2)
   10fc0:	100f883a 	mov	r7,r2
   10fc4:	e1bfff17 	ldw	r6,-4(fp)
   10fc8:	e17ffe17 	ldw	r5,-8(fp)
   10fcc:	1809883a 	mov	r4,r3
   10fd0:	001176c0 	call	1176c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10fd4:	e037883a 	mov	sp,fp
   10fd8:	dfc00117 	ldw	ra,4(sp)
   10fdc:	df000017 	ldw	fp,0(sp)
   10fe0:	dec00204 	addi	sp,sp,8
   10fe4:	f800283a 	ret

00010fe8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10fe8:	defffc04 	addi	sp,sp,-16
   10fec:	dfc00315 	stw	ra,12(sp)
   10ff0:	df000215 	stw	fp,8(sp)
   10ff4:	df000204 	addi	fp,sp,8
   10ff8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10ffc:	e0bfff17 	ldw	r2,-4(fp)
   11000:	10800017 	ldw	r2,0(r2)
   11004:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   11008:	e0bffe17 	ldw	r2,-8(fp)
   1100c:	10c00a04 	addi	r3,r2,40
   11010:	e0bfff17 	ldw	r2,-4(fp)
   11014:	10800217 	ldw	r2,8(r2)
   11018:	100b883a 	mov	r5,r2
   1101c:	1809883a 	mov	r4,r3
   11020:	00113f80 	call	113f8 <altera_avalon_jtag_uart_close>
}
   11024:	e037883a 	mov	sp,fp
   11028:	dfc00117 	ldw	ra,4(sp)
   1102c:	df000017 	ldw	fp,0(sp)
   11030:	dec00204 	addi	sp,sp,8
   11034:	f800283a 	ret

00011038 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   11038:	defffa04 	addi	sp,sp,-24
   1103c:	dfc00515 	stw	ra,20(sp)
   11040:	df000415 	stw	fp,16(sp)
   11044:	df000404 	addi	fp,sp,16
   11048:	e13ffd15 	stw	r4,-12(fp)
   1104c:	e17ffe15 	stw	r5,-8(fp)
   11050:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   11054:	e0bffd17 	ldw	r2,-12(fp)
   11058:	10800017 	ldw	r2,0(r2)
   1105c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   11060:	e0bffc17 	ldw	r2,-16(fp)
   11064:	10800a04 	addi	r2,r2,40
   11068:	e1bfff17 	ldw	r6,-4(fp)
   1106c:	e17ffe17 	ldw	r5,-8(fp)
   11070:	1009883a 	mov	r4,r2
   11074:	00114600 	call	11460 <altera_avalon_jtag_uart_ioctl>
}
   11078:	e037883a 	mov	sp,fp
   1107c:	dfc00117 	ldw	ra,4(sp)
   11080:	df000017 	ldw	fp,0(sp)
   11084:	dec00204 	addi	sp,sp,8
   11088:	f800283a 	ret

0001108c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1108c:	defffa04 	addi	sp,sp,-24
   11090:	dfc00515 	stw	ra,20(sp)
   11094:	df000415 	stw	fp,16(sp)
   11098:	df000404 	addi	fp,sp,16
   1109c:	e13ffd15 	stw	r4,-12(fp)
   110a0:	e17ffe15 	stw	r5,-8(fp)
   110a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   110a8:	e0bffd17 	ldw	r2,-12(fp)
   110ac:	00c00044 	movi	r3,1
   110b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   110b4:	e0bffd17 	ldw	r2,-12(fp)
   110b8:	10800017 	ldw	r2,0(r2)
   110bc:	10800104 	addi	r2,r2,4
   110c0:	1007883a 	mov	r3,r2
   110c4:	e0bffd17 	ldw	r2,-12(fp)
   110c8:	10800817 	ldw	r2,32(r2)
   110cc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   110d0:	e0bffe17 	ldw	r2,-8(fp)
   110d4:	e0ffff17 	ldw	r3,-4(fp)
   110d8:	d8000015 	stw	zero,0(sp)
   110dc:	e1fffd17 	ldw	r7,-12(fp)
   110e0:	01800074 	movhi	r6,1
   110e4:	31845304 	addi	r6,r6,4428
   110e8:	180b883a 	mov	r5,r3
   110ec:	1009883a 	mov	r4,r2
   110f0:	0011fec0 	call	11fec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   110f4:	e0bffd17 	ldw	r2,-12(fp)
   110f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   110fc:	e0bffd17 	ldw	r2,-12(fp)
   11100:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11104:	d0e6dc17 	ldw	r3,-25744(gp)
   11108:	e1fffd17 	ldw	r7,-12(fp)
   1110c:	01800074 	movhi	r6,1
   11110:	3184d604 	addi	r6,r6,4952
   11114:	180b883a 	mov	r5,r3
   11118:	1009883a 	mov	r4,r2
   1111c:	0011a840 	call	11a84 <alt_alarm_start>
   11120:	1000040e 	bge	r2,zero,11134 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   11124:	e0fffd17 	ldw	r3,-12(fp)
   11128:	00a00034 	movhi	r2,32768
   1112c:	10bfffc4 	addi	r2,r2,-1
   11130:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   11134:	0001883a 	nop
   11138:	e037883a 	mov	sp,fp
   1113c:	dfc00117 	ldw	ra,4(sp)
   11140:	df000017 	ldw	fp,0(sp)
   11144:	dec00204 	addi	sp,sp,8
   11148:	f800283a 	ret

0001114c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1114c:	defff804 	addi	sp,sp,-32
   11150:	df000715 	stw	fp,28(sp)
   11154:	df000704 	addi	fp,sp,28
   11158:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1115c:	e0bfff17 	ldw	r2,-4(fp)
   11160:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   11164:	e0bffb17 	ldw	r2,-20(fp)
   11168:	10800017 	ldw	r2,0(r2)
   1116c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11170:	e0bffc17 	ldw	r2,-16(fp)
   11174:	10800104 	addi	r2,r2,4
   11178:	10800037 	ldwio	r2,0(r2)
   1117c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   11180:	e0bffd17 	ldw	r2,-12(fp)
   11184:	1080c00c 	andi	r2,r2,768
   11188:	10006d26 	beq	r2,zero,11340 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1118c:	e0bffd17 	ldw	r2,-12(fp)
   11190:	1080400c 	andi	r2,r2,256
   11194:	10003526 	beq	r2,zero,1126c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   11198:	00800074 	movhi	r2,1
   1119c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   111a0:	e0bffb17 	ldw	r2,-20(fp)
   111a4:	10800a17 	ldw	r2,40(r2)
   111a8:	10800044 	addi	r2,r2,1
   111ac:	1081ffcc 	andi	r2,r2,2047
   111b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   111b4:	e0bffb17 	ldw	r2,-20(fp)
   111b8:	10c00b17 	ldw	r3,44(r2)
   111bc:	e0bffe17 	ldw	r2,-8(fp)
   111c0:	18801526 	beq	r3,r2,11218 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   111c4:	e0bffc17 	ldw	r2,-16(fp)
   111c8:	10800037 	ldwio	r2,0(r2)
   111cc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   111d0:	e0bff917 	ldw	r2,-28(fp)
   111d4:	10a0000c 	andi	r2,r2,32768
   111d8:	10001126 	beq	r2,zero,11220 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   111dc:	e0bffb17 	ldw	r2,-20(fp)
   111e0:	10800a17 	ldw	r2,40(r2)
   111e4:	e0fff917 	ldw	r3,-28(fp)
   111e8:	1809883a 	mov	r4,r3
   111ec:	e0fffb17 	ldw	r3,-20(fp)
   111f0:	1885883a 	add	r2,r3,r2
   111f4:	10800e04 	addi	r2,r2,56
   111f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   111fc:	e0bffb17 	ldw	r2,-20(fp)
   11200:	10800a17 	ldw	r2,40(r2)
   11204:	10800044 	addi	r2,r2,1
   11208:	10c1ffcc 	andi	r3,r2,2047
   1120c:	e0bffb17 	ldw	r2,-20(fp)
   11210:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   11214:	003fe206 	br	111a0 <__alt_data_end+0xffff11a0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   11218:	0001883a 	nop
   1121c:	00000106 	br	11224 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   11220:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   11224:	e0bff917 	ldw	r2,-28(fp)
   11228:	10bfffec 	andhi	r2,r2,65535
   1122c:	10000f26 	beq	r2,zero,1126c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11230:	e0bffb17 	ldw	r2,-20(fp)
   11234:	10c00817 	ldw	r3,32(r2)
   11238:	00bfff84 	movi	r2,-2
   1123c:	1886703a 	and	r3,r3,r2
   11240:	e0bffb17 	ldw	r2,-20(fp)
   11244:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   11248:	e0bffc17 	ldw	r2,-16(fp)
   1124c:	10800104 	addi	r2,r2,4
   11250:	1007883a 	mov	r3,r2
   11254:	e0bffb17 	ldw	r2,-20(fp)
   11258:	10800817 	ldw	r2,32(r2)
   1125c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11260:	e0bffc17 	ldw	r2,-16(fp)
   11264:	10800104 	addi	r2,r2,4
   11268:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1126c:	e0bffd17 	ldw	r2,-12(fp)
   11270:	1080800c 	andi	r2,r2,512
   11274:	103fbe26 	beq	r2,zero,11170 <__alt_data_end+0xffff1170>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   11278:	e0bffd17 	ldw	r2,-12(fp)
   1127c:	1004d43a 	srli	r2,r2,16
   11280:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   11284:	00001406 	br	112d8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   11288:	e0bffc17 	ldw	r2,-16(fp)
   1128c:	e0fffb17 	ldw	r3,-20(fp)
   11290:	18c00d17 	ldw	r3,52(r3)
   11294:	e13ffb17 	ldw	r4,-20(fp)
   11298:	20c7883a 	add	r3,r4,r3
   1129c:	18c20e04 	addi	r3,r3,2104
   112a0:	18c00003 	ldbu	r3,0(r3)
   112a4:	18c03fcc 	andi	r3,r3,255
   112a8:	18c0201c 	xori	r3,r3,128
   112ac:	18ffe004 	addi	r3,r3,-128
   112b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   112b4:	e0bffb17 	ldw	r2,-20(fp)
   112b8:	10800d17 	ldw	r2,52(r2)
   112bc:	10800044 	addi	r2,r2,1
   112c0:	10c1ffcc 	andi	r3,r2,2047
   112c4:	e0bffb17 	ldw	r2,-20(fp)
   112c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   112cc:	e0bffa17 	ldw	r2,-24(fp)
   112d0:	10bfffc4 	addi	r2,r2,-1
   112d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   112d8:	e0bffa17 	ldw	r2,-24(fp)
   112dc:	10000526 	beq	r2,zero,112f4 <altera_avalon_jtag_uart_irq+0x1a8>
   112e0:	e0bffb17 	ldw	r2,-20(fp)
   112e4:	10c00d17 	ldw	r3,52(r2)
   112e8:	e0bffb17 	ldw	r2,-20(fp)
   112ec:	10800c17 	ldw	r2,48(r2)
   112f0:	18bfe51e 	bne	r3,r2,11288 <__alt_data_end+0xffff1288>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   112f4:	e0bffa17 	ldw	r2,-24(fp)
   112f8:	103f9d26 	beq	r2,zero,11170 <__alt_data_end+0xffff1170>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   112fc:	e0bffb17 	ldw	r2,-20(fp)
   11300:	10c00817 	ldw	r3,32(r2)
   11304:	00bfff44 	movi	r2,-3
   11308:	1886703a 	and	r3,r3,r2
   1130c:	e0bffb17 	ldw	r2,-20(fp)
   11310:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11314:	e0bffb17 	ldw	r2,-20(fp)
   11318:	10800017 	ldw	r2,0(r2)
   1131c:	10800104 	addi	r2,r2,4
   11320:	1007883a 	mov	r3,r2
   11324:	e0bffb17 	ldw	r2,-20(fp)
   11328:	10800817 	ldw	r2,32(r2)
   1132c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11330:	e0bffc17 	ldw	r2,-16(fp)
   11334:	10800104 	addi	r2,r2,4
   11338:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1133c:	003f8c06 	br	11170 <__alt_data_end+0xffff1170>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   11340:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   11344:	0001883a 	nop
   11348:	e037883a 	mov	sp,fp
   1134c:	df000017 	ldw	fp,0(sp)
   11350:	dec00104 	addi	sp,sp,4
   11354:	f800283a 	ret

00011358 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   11358:	defff804 	addi	sp,sp,-32
   1135c:	df000715 	stw	fp,28(sp)
   11360:	df000704 	addi	fp,sp,28
   11364:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   11368:	e0bffb17 	ldw	r2,-20(fp)
   1136c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   11370:	e0bff917 	ldw	r2,-28(fp)
   11374:	10800017 	ldw	r2,0(r2)
   11378:	10800104 	addi	r2,r2,4
   1137c:	10800037 	ldwio	r2,0(r2)
   11380:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   11384:	e0bffa17 	ldw	r2,-24(fp)
   11388:	1081000c 	andi	r2,r2,1024
   1138c:	10000b26 	beq	r2,zero,113bc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   11390:	e0bff917 	ldw	r2,-28(fp)
   11394:	10800017 	ldw	r2,0(r2)
   11398:	10800104 	addi	r2,r2,4
   1139c:	1007883a 	mov	r3,r2
   113a0:	e0bff917 	ldw	r2,-28(fp)
   113a4:	10800817 	ldw	r2,32(r2)
   113a8:	10810014 	ori	r2,r2,1024
   113ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   113b0:	e0bff917 	ldw	r2,-28(fp)
   113b4:	10000915 	stw	zero,36(r2)
   113b8:	00000a06 	br	113e4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   113bc:	e0bff917 	ldw	r2,-28(fp)
   113c0:	10c00917 	ldw	r3,36(r2)
   113c4:	00a00034 	movhi	r2,32768
   113c8:	10bfff04 	addi	r2,r2,-4
   113cc:	10c00536 	bltu	r2,r3,113e4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   113d0:	e0bff917 	ldw	r2,-28(fp)
   113d4:	10800917 	ldw	r2,36(r2)
   113d8:	10c00044 	addi	r3,r2,1
   113dc:	e0bff917 	ldw	r2,-28(fp)
   113e0:	10c00915 	stw	r3,36(r2)
   113e4:	d0a6dc17 	ldw	r2,-25744(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   113e8:	e037883a 	mov	sp,fp
   113ec:	df000017 	ldw	fp,0(sp)
   113f0:	dec00104 	addi	sp,sp,4
   113f4:	f800283a 	ret

000113f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   113f8:	defffd04 	addi	sp,sp,-12
   113fc:	df000215 	stw	fp,8(sp)
   11400:	df000204 	addi	fp,sp,8
   11404:	e13ffe15 	stw	r4,-8(fp)
   11408:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1140c:	00000506 	br	11424 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   11410:	e0bfff17 	ldw	r2,-4(fp)
   11414:	1090000c 	andi	r2,r2,16384
   11418:	10000226 	beq	r2,zero,11424 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1141c:	00bffd44 	movi	r2,-11
   11420:	00000b06 	br	11450 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11424:	e0bffe17 	ldw	r2,-8(fp)
   11428:	10c00d17 	ldw	r3,52(r2)
   1142c:	e0bffe17 	ldw	r2,-8(fp)
   11430:	10800c17 	ldw	r2,48(r2)
   11434:	18800526 	beq	r3,r2,1144c <altera_avalon_jtag_uart_close+0x54>
   11438:	e0bffe17 	ldw	r2,-8(fp)
   1143c:	10c00917 	ldw	r3,36(r2)
   11440:	e0bffe17 	ldw	r2,-8(fp)
   11444:	10800117 	ldw	r2,4(r2)
   11448:	18bff136 	bltu	r3,r2,11410 <__alt_data_end+0xffff1410>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1144c:	0005883a 	mov	r2,zero
}
   11450:	e037883a 	mov	sp,fp
   11454:	df000017 	ldw	fp,0(sp)
   11458:	dec00104 	addi	sp,sp,4
   1145c:	f800283a 	ret

00011460 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   11460:	defffa04 	addi	sp,sp,-24
   11464:	df000515 	stw	fp,20(sp)
   11468:	df000504 	addi	fp,sp,20
   1146c:	e13ffd15 	stw	r4,-12(fp)
   11470:	e17ffe15 	stw	r5,-8(fp)
   11474:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   11478:	00bff9c4 	movi	r2,-25
   1147c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   11480:	e0bffe17 	ldw	r2,-8(fp)
   11484:	10da8060 	cmpeqi	r3,r2,27137
   11488:	1800031e 	bne	r3,zero,11498 <altera_avalon_jtag_uart_ioctl+0x38>
   1148c:	109a80a0 	cmpeqi	r2,r2,27138
   11490:	1000181e 	bne	r2,zero,114f4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   11494:	00002906 	br	1153c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   11498:	e0bffd17 	ldw	r2,-12(fp)
   1149c:	10c00117 	ldw	r3,4(r2)
   114a0:	00a00034 	movhi	r2,32768
   114a4:	10bfffc4 	addi	r2,r2,-1
   114a8:	18802126 	beq	r3,r2,11530 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   114ac:	e0bfff17 	ldw	r2,-4(fp)
   114b0:	10800017 	ldw	r2,0(r2)
   114b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   114b8:	e0bffc17 	ldw	r2,-16(fp)
   114bc:	10800090 	cmplti	r2,r2,2
   114c0:	1000061e 	bne	r2,zero,114dc <altera_avalon_jtag_uart_ioctl+0x7c>
   114c4:	e0fffc17 	ldw	r3,-16(fp)
   114c8:	00a00034 	movhi	r2,32768
   114cc:	10bfffc4 	addi	r2,r2,-1
   114d0:	18800226 	beq	r3,r2,114dc <altera_avalon_jtag_uart_ioctl+0x7c>
   114d4:	e0bffc17 	ldw	r2,-16(fp)
   114d8:	00000206 	br	114e4 <altera_avalon_jtag_uart_ioctl+0x84>
   114dc:	00a00034 	movhi	r2,32768
   114e0:	10bfff84 	addi	r2,r2,-2
   114e4:	e0fffd17 	ldw	r3,-12(fp)
   114e8:	18800115 	stw	r2,4(r3)
      rc = 0;
   114ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   114f0:	00000f06 	br	11530 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   114f4:	e0bffd17 	ldw	r2,-12(fp)
   114f8:	10c00117 	ldw	r3,4(r2)
   114fc:	00a00034 	movhi	r2,32768
   11500:	10bfffc4 	addi	r2,r2,-1
   11504:	18800c26 	beq	r3,r2,11538 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   11508:	e0bffd17 	ldw	r2,-12(fp)
   1150c:	10c00917 	ldw	r3,36(r2)
   11510:	e0bffd17 	ldw	r2,-12(fp)
   11514:	10800117 	ldw	r2,4(r2)
   11518:	1885803a 	cmpltu	r2,r3,r2
   1151c:	10c03fcc 	andi	r3,r2,255
   11520:	e0bfff17 	ldw	r2,-4(fp)
   11524:	10c00015 	stw	r3,0(r2)
      rc = 0;
   11528:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1152c:	00000206 	br	11538 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   11530:	0001883a 	nop
   11534:	00000106 	br	1153c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   11538:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1153c:	e0bffb17 	ldw	r2,-20(fp)
}
   11540:	e037883a 	mov	sp,fp
   11544:	df000017 	ldw	fp,0(sp)
   11548:	dec00104 	addi	sp,sp,4
   1154c:	f800283a 	ret

00011550 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   11550:	defff304 	addi	sp,sp,-52
   11554:	dfc00c15 	stw	ra,48(sp)
   11558:	df000b15 	stw	fp,44(sp)
   1155c:	df000b04 	addi	fp,sp,44
   11560:	e13ffc15 	stw	r4,-16(fp)
   11564:	e17ffd15 	stw	r5,-12(fp)
   11568:	e1bffe15 	stw	r6,-8(fp)
   1156c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   11570:	e0bffd17 	ldw	r2,-12(fp)
   11574:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11578:	00004706 	br	11698 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1157c:	e0bffc17 	ldw	r2,-16(fp)
   11580:	10800a17 	ldw	r2,40(r2)
   11584:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   11588:	e0bffc17 	ldw	r2,-16(fp)
   1158c:	10800b17 	ldw	r2,44(r2)
   11590:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   11594:	e0fff717 	ldw	r3,-36(fp)
   11598:	e0bff817 	ldw	r2,-32(fp)
   1159c:	18800536 	bltu	r3,r2,115b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   115a0:	e0fff717 	ldw	r3,-36(fp)
   115a4:	e0bff817 	ldw	r2,-32(fp)
   115a8:	1885c83a 	sub	r2,r3,r2
   115ac:	e0bff615 	stw	r2,-40(fp)
   115b0:	00000406 	br	115c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   115b4:	00c20004 	movi	r3,2048
   115b8:	e0bff817 	ldw	r2,-32(fp)
   115bc:	1885c83a 	sub	r2,r3,r2
   115c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   115c4:	e0bff617 	ldw	r2,-40(fp)
   115c8:	10001e26 	beq	r2,zero,11644 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   115cc:	e0fffe17 	ldw	r3,-8(fp)
   115d0:	e0bff617 	ldw	r2,-40(fp)
   115d4:	1880022e 	bgeu	r3,r2,115e0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   115d8:	e0bffe17 	ldw	r2,-8(fp)
   115dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   115e0:	e0bffc17 	ldw	r2,-16(fp)
   115e4:	10c00e04 	addi	r3,r2,56
   115e8:	e0bff817 	ldw	r2,-32(fp)
   115ec:	1885883a 	add	r2,r3,r2
   115f0:	e1bff617 	ldw	r6,-40(fp)
   115f4:	100b883a 	mov	r5,r2
   115f8:	e13ff517 	ldw	r4,-44(fp)
   115fc:	0006acc0 	call	6acc <memcpy>
      ptr   += n;
   11600:	e0fff517 	ldw	r3,-44(fp)
   11604:	e0bff617 	ldw	r2,-40(fp)
   11608:	1885883a 	add	r2,r3,r2
   1160c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   11610:	e0fffe17 	ldw	r3,-8(fp)
   11614:	e0bff617 	ldw	r2,-40(fp)
   11618:	1885c83a 	sub	r2,r3,r2
   1161c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11620:	e0fff817 	ldw	r3,-32(fp)
   11624:	e0bff617 	ldw	r2,-40(fp)
   11628:	1885883a 	add	r2,r3,r2
   1162c:	10c1ffcc 	andi	r3,r2,2047
   11630:	e0bffc17 	ldw	r2,-16(fp)
   11634:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   11638:	e0bffe17 	ldw	r2,-8(fp)
   1163c:	00bfcf16 	blt	zero,r2,1157c <__alt_data_end+0xffff157c>
   11640:	00000106 	br	11648 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   11644:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   11648:	e0fff517 	ldw	r3,-44(fp)
   1164c:	e0bffd17 	ldw	r2,-12(fp)
   11650:	1880141e 	bne	r3,r2,116a4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   11654:	e0bfff17 	ldw	r2,-4(fp)
   11658:	1090000c 	andi	r2,r2,16384
   1165c:	1000131e 	bne	r2,zero,116ac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   11660:	0001883a 	nop
   11664:	e0bffc17 	ldw	r2,-16(fp)
   11668:	10c00a17 	ldw	r3,40(r2)
   1166c:	e0bff717 	ldw	r2,-36(fp)
   11670:	1880051e 	bne	r3,r2,11688 <altera_avalon_jtag_uart_read+0x138>
   11674:	e0bffc17 	ldw	r2,-16(fp)
   11678:	10c00917 	ldw	r3,36(r2)
   1167c:	e0bffc17 	ldw	r2,-16(fp)
   11680:	10800117 	ldw	r2,4(r2)
   11684:	18bff736 	bltu	r3,r2,11664 <__alt_data_end+0xffff1664>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   11688:	e0bffc17 	ldw	r2,-16(fp)
   1168c:	10c00a17 	ldw	r3,40(r2)
   11690:	e0bff717 	ldw	r2,-36(fp)
   11694:	18800726 	beq	r3,r2,116b4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11698:	e0bffe17 	ldw	r2,-8(fp)
   1169c:	00bfb716 	blt	zero,r2,1157c <__alt_data_end+0xffff157c>
   116a0:	00000506 	br	116b8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   116a4:	0001883a 	nop
   116a8:	00000306 	br	116b8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   116ac:	0001883a 	nop
   116b0:	00000106 	br	116b8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   116b4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   116b8:	e0fff517 	ldw	r3,-44(fp)
   116bc:	e0bffd17 	ldw	r2,-12(fp)
   116c0:	18801826 	beq	r3,r2,11724 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   116c4:	0005303a 	rdctl	r2,status
   116c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   116cc:	e0fffb17 	ldw	r3,-20(fp)
   116d0:	00bfff84 	movi	r2,-2
   116d4:	1884703a 	and	r2,r3,r2
   116d8:	1001703a 	wrctl	status,r2
  
  return context;
   116dc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   116e0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   116e4:	e0bffc17 	ldw	r2,-16(fp)
   116e8:	10800817 	ldw	r2,32(r2)
   116ec:	10c00054 	ori	r3,r2,1
   116f0:	e0bffc17 	ldw	r2,-16(fp)
   116f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   116f8:	e0bffc17 	ldw	r2,-16(fp)
   116fc:	10800017 	ldw	r2,0(r2)
   11700:	10800104 	addi	r2,r2,4
   11704:	1007883a 	mov	r3,r2
   11708:	e0bffc17 	ldw	r2,-16(fp)
   1170c:	10800817 	ldw	r2,32(r2)
   11710:	18800035 	stwio	r2,0(r3)
   11714:	e0bffa17 	ldw	r2,-24(fp)
   11718:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1171c:	e0bff917 	ldw	r2,-28(fp)
   11720:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11724:	e0fff517 	ldw	r3,-44(fp)
   11728:	e0bffd17 	ldw	r2,-12(fp)
   1172c:	18800426 	beq	r3,r2,11740 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   11730:	e0fff517 	ldw	r3,-44(fp)
   11734:	e0bffd17 	ldw	r2,-12(fp)
   11738:	1885c83a 	sub	r2,r3,r2
   1173c:	00000606 	br	11758 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   11740:	e0bfff17 	ldw	r2,-4(fp)
   11744:	1090000c 	andi	r2,r2,16384
   11748:	10000226 	beq	r2,zero,11754 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1174c:	00bffd44 	movi	r2,-11
   11750:	00000106 	br	11758 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   11754:	00bffec4 	movi	r2,-5
}
   11758:	e037883a 	mov	sp,fp
   1175c:	dfc00117 	ldw	ra,4(sp)
   11760:	df000017 	ldw	fp,0(sp)
   11764:	dec00204 	addi	sp,sp,8
   11768:	f800283a 	ret

0001176c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1176c:	defff304 	addi	sp,sp,-52
   11770:	dfc00c15 	stw	ra,48(sp)
   11774:	df000b15 	stw	fp,44(sp)
   11778:	df000b04 	addi	fp,sp,44
   1177c:	e13ffc15 	stw	r4,-16(fp)
   11780:	e17ffd15 	stw	r5,-12(fp)
   11784:	e1bffe15 	stw	r6,-8(fp)
   11788:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1178c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   11790:	e0bffd17 	ldw	r2,-12(fp)
   11794:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11798:	00003706 	br	11878 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1179c:	e0bffc17 	ldw	r2,-16(fp)
   117a0:	10800c17 	ldw	r2,48(r2)
   117a4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   117a8:	e0bffc17 	ldw	r2,-16(fp)
   117ac:	10800d17 	ldw	r2,52(r2)
   117b0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   117b4:	e0fff917 	ldw	r3,-28(fp)
   117b8:	e0bff517 	ldw	r2,-44(fp)
   117bc:	1880062e 	bgeu	r3,r2,117d8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   117c0:	e0fff517 	ldw	r3,-44(fp)
   117c4:	e0bff917 	ldw	r2,-28(fp)
   117c8:	1885c83a 	sub	r2,r3,r2
   117cc:	10bfffc4 	addi	r2,r2,-1
   117d0:	e0bff615 	stw	r2,-40(fp)
   117d4:	00000b06 	br	11804 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   117d8:	e0bff517 	ldw	r2,-44(fp)
   117dc:	10000526 	beq	r2,zero,117f4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   117e0:	00c20004 	movi	r3,2048
   117e4:	e0bff917 	ldw	r2,-28(fp)
   117e8:	1885c83a 	sub	r2,r3,r2
   117ec:	e0bff615 	stw	r2,-40(fp)
   117f0:	00000406 	br	11804 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   117f4:	00c1ffc4 	movi	r3,2047
   117f8:	e0bff917 	ldw	r2,-28(fp)
   117fc:	1885c83a 	sub	r2,r3,r2
   11800:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11804:	e0bff617 	ldw	r2,-40(fp)
   11808:	10001e26 	beq	r2,zero,11884 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1180c:	e0fffe17 	ldw	r3,-8(fp)
   11810:	e0bff617 	ldw	r2,-40(fp)
   11814:	1880022e 	bgeu	r3,r2,11820 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   11818:	e0bffe17 	ldw	r2,-8(fp)
   1181c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11820:	e0bffc17 	ldw	r2,-16(fp)
   11824:	10c20e04 	addi	r3,r2,2104
   11828:	e0bff917 	ldw	r2,-28(fp)
   1182c:	1885883a 	add	r2,r3,r2
   11830:	e1bff617 	ldw	r6,-40(fp)
   11834:	e17ffd17 	ldw	r5,-12(fp)
   11838:	1009883a 	mov	r4,r2
   1183c:	0006acc0 	call	6acc <memcpy>
      ptr   += n;
   11840:	e0fffd17 	ldw	r3,-12(fp)
   11844:	e0bff617 	ldw	r2,-40(fp)
   11848:	1885883a 	add	r2,r3,r2
   1184c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   11850:	e0fffe17 	ldw	r3,-8(fp)
   11854:	e0bff617 	ldw	r2,-40(fp)
   11858:	1885c83a 	sub	r2,r3,r2
   1185c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11860:	e0fff917 	ldw	r3,-28(fp)
   11864:	e0bff617 	ldw	r2,-40(fp)
   11868:	1885883a 	add	r2,r3,r2
   1186c:	10c1ffcc 	andi	r3,r2,2047
   11870:	e0bffc17 	ldw	r2,-16(fp)
   11874:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11878:	e0bffe17 	ldw	r2,-8(fp)
   1187c:	00bfc716 	blt	zero,r2,1179c <__alt_data_end+0xffff179c>
   11880:	00000106 	br	11888 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   11884:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11888:	0005303a 	rdctl	r2,status
   1188c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11890:	e0fffb17 	ldw	r3,-20(fp)
   11894:	00bfff84 	movi	r2,-2
   11898:	1884703a 	and	r2,r3,r2
   1189c:	1001703a 	wrctl	status,r2
  
  return context;
   118a0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   118a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   118a8:	e0bffc17 	ldw	r2,-16(fp)
   118ac:	10800817 	ldw	r2,32(r2)
   118b0:	10c00094 	ori	r3,r2,2
   118b4:	e0bffc17 	ldw	r2,-16(fp)
   118b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   118bc:	e0bffc17 	ldw	r2,-16(fp)
   118c0:	10800017 	ldw	r2,0(r2)
   118c4:	10800104 	addi	r2,r2,4
   118c8:	1007883a 	mov	r3,r2
   118cc:	e0bffc17 	ldw	r2,-16(fp)
   118d0:	10800817 	ldw	r2,32(r2)
   118d4:	18800035 	stwio	r2,0(r3)
   118d8:	e0bffa17 	ldw	r2,-24(fp)
   118dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   118e0:	e0bff817 	ldw	r2,-32(fp)
   118e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   118e8:	e0bffe17 	ldw	r2,-8(fp)
   118ec:	0080100e 	bge	zero,r2,11930 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   118f0:	e0bfff17 	ldw	r2,-4(fp)
   118f4:	1090000c 	andi	r2,r2,16384
   118f8:	1000101e 	bne	r2,zero,1193c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   118fc:	0001883a 	nop
   11900:	e0bffc17 	ldw	r2,-16(fp)
   11904:	10c00d17 	ldw	r3,52(r2)
   11908:	e0bff517 	ldw	r2,-44(fp)
   1190c:	1880051e 	bne	r3,r2,11924 <altera_avalon_jtag_uart_write+0x1b8>
   11910:	e0bffc17 	ldw	r2,-16(fp)
   11914:	10c00917 	ldw	r3,36(r2)
   11918:	e0bffc17 	ldw	r2,-16(fp)
   1191c:	10800117 	ldw	r2,4(r2)
   11920:	18bff736 	bltu	r3,r2,11900 <__alt_data_end+0xffff1900>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11924:	e0bffc17 	ldw	r2,-16(fp)
   11928:	10800917 	ldw	r2,36(r2)
   1192c:	1000051e 	bne	r2,zero,11944 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   11930:	e0bffe17 	ldw	r2,-8(fp)
   11934:	00bfd016 	blt	zero,r2,11878 <__alt_data_end+0xffff1878>
   11938:	00000306 	br	11948 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1193c:	0001883a 	nop
   11940:	00000106 	br	11948 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   11944:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   11948:	e0fffd17 	ldw	r3,-12(fp)
   1194c:	e0bff717 	ldw	r2,-36(fp)
   11950:	18800426 	beq	r3,r2,11964 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   11954:	e0fffd17 	ldw	r3,-12(fp)
   11958:	e0bff717 	ldw	r2,-36(fp)
   1195c:	1885c83a 	sub	r2,r3,r2
   11960:	00000606 	br	1197c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   11964:	e0bfff17 	ldw	r2,-4(fp)
   11968:	1090000c 	andi	r2,r2,16384
   1196c:	10000226 	beq	r2,zero,11978 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   11970:	00bffd44 	movi	r2,-11
   11974:	00000106 	br	1197c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   11978:	00bffec4 	movi	r2,-5
}
   1197c:	e037883a 	mov	sp,fp
   11980:	dfc00117 	ldw	ra,4(sp)
   11984:	df000017 	ldw	fp,0(sp)
   11988:	dec00204 	addi	sp,sp,8
   1198c:	f800283a 	ret

00011990 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   11990:	defffa04 	addi	sp,sp,-24
   11994:	dfc00515 	stw	ra,20(sp)
   11998:	df000415 	stw	fp,16(sp)
   1199c:	df000404 	addi	fp,sp,16
   119a0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   119a4:	0007883a 	mov	r3,zero
   119a8:	e0bfff17 	ldw	r2,-4(fp)
   119ac:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   119b0:	e0bfff17 	ldw	r2,-4(fp)
   119b4:	10800104 	addi	r2,r2,4
   119b8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119bc:	0005303a 	rdctl	r2,status
   119c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119c4:	e0fffd17 	ldw	r3,-12(fp)
   119c8:	00bfff84 	movi	r2,-2
   119cc:	1884703a 	and	r2,r3,r2
   119d0:	1001703a 	wrctl	status,r2
  
  return context;
   119d4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   119d8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   119dc:	00124880 	call	12488 <alt_tick>
   119e0:	e0bffc17 	ldw	r2,-16(fp)
   119e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119e8:	e0bffe17 	ldw	r2,-8(fp)
   119ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   119f0:	0001883a 	nop
   119f4:	e037883a 	mov	sp,fp
   119f8:	dfc00117 	ldw	ra,4(sp)
   119fc:	df000017 	ldw	fp,0(sp)
   11a00:	dec00204 	addi	sp,sp,8
   11a04:	f800283a 	ret

00011a08 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   11a08:	defff804 	addi	sp,sp,-32
   11a0c:	dfc00715 	stw	ra,28(sp)
   11a10:	df000615 	stw	fp,24(sp)
   11a14:	df000604 	addi	fp,sp,24
   11a18:	e13ffc15 	stw	r4,-16(fp)
   11a1c:	e17ffd15 	stw	r5,-12(fp)
   11a20:	e1bffe15 	stw	r6,-8(fp)
   11a24:	e1ffff15 	stw	r7,-4(fp)
   11a28:	e0bfff17 	ldw	r2,-4(fp)
   11a2c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11a30:	d0a6dc17 	ldw	r2,-25744(gp)
   11a34:	1000021e 	bne	r2,zero,11a40 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   11a38:	e0bffb17 	ldw	r2,-20(fp)
   11a3c:	d0a6dc15 	stw	r2,-25744(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11a40:	e0bffc17 	ldw	r2,-16(fp)
   11a44:	10800104 	addi	r2,r2,4
   11a48:	00c001c4 	movi	r3,7
   11a4c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   11a50:	d8000015 	stw	zero,0(sp)
   11a54:	e1fffc17 	ldw	r7,-16(fp)
   11a58:	01800074 	movhi	r6,1
   11a5c:	31866404 	addi	r6,r6,6544
   11a60:	e17ffe17 	ldw	r5,-8(fp)
   11a64:	e13ffd17 	ldw	r4,-12(fp)
   11a68:	0011fec0 	call	11fec <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   11a6c:	0001883a 	nop
   11a70:	e037883a 	mov	sp,fp
   11a74:	dfc00117 	ldw	ra,4(sp)
   11a78:	df000017 	ldw	fp,0(sp)
   11a7c:	dec00204 	addi	sp,sp,8
   11a80:	f800283a 	ret

00011a84 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11a84:	defff504 	addi	sp,sp,-44
   11a88:	df000a15 	stw	fp,40(sp)
   11a8c:	df000a04 	addi	fp,sp,40
   11a90:	e13ffc15 	stw	r4,-16(fp)
   11a94:	e17ffd15 	stw	r5,-12(fp)
   11a98:	e1bffe15 	stw	r6,-8(fp)
   11a9c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11aa0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11aa4:	d0a6dc17 	ldw	r2,-25744(gp)
  
  if (alt_ticks_per_second ())
   11aa8:	10003c26 	beq	r2,zero,11b9c <alt_alarm_start+0x118>
  {
    if (alarm)
   11aac:	e0bffc17 	ldw	r2,-16(fp)
   11ab0:	10003826 	beq	r2,zero,11b94 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   11ab4:	e0bffc17 	ldw	r2,-16(fp)
   11ab8:	e0fffe17 	ldw	r3,-8(fp)
   11abc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11ac0:	e0bffc17 	ldw	r2,-16(fp)
   11ac4:	e0ffff17 	ldw	r3,-4(fp)
   11ac8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11acc:	0005303a 	rdctl	r2,status
   11ad0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ad4:	e0fff917 	ldw	r3,-28(fp)
   11ad8:	00bfff84 	movi	r2,-2
   11adc:	1884703a 	and	r2,r3,r2
   11ae0:	1001703a 	wrctl	status,r2
  
  return context;
   11ae4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   11ae8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11aec:	d0a6dd17 	ldw	r2,-25740(gp)
      
      current_nticks = alt_nticks();
   11af0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11af4:	e0fffd17 	ldw	r3,-12(fp)
   11af8:	e0bff617 	ldw	r2,-40(fp)
   11afc:	1885883a 	add	r2,r3,r2
   11b00:	10c00044 	addi	r3,r2,1
   11b04:	e0bffc17 	ldw	r2,-16(fp)
   11b08:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11b0c:	e0bffc17 	ldw	r2,-16(fp)
   11b10:	10c00217 	ldw	r3,8(r2)
   11b14:	e0bff617 	ldw	r2,-40(fp)
   11b18:	1880042e 	bgeu	r3,r2,11b2c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   11b1c:	e0bffc17 	ldw	r2,-16(fp)
   11b20:	00c00044 	movi	r3,1
   11b24:	10c00405 	stb	r3,16(r2)
   11b28:	00000206 	br	11b34 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   11b2c:	e0bffc17 	ldw	r2,-16(fp)
   11b30:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11b34:	e0bffc17 	ldw	r2,-16(fp)
   11b38:	d0e01104 	addi	r3,gp,-32700
   11b3c:	e0fffa15 	stw	r3,-24(fp)
   11b40:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11b44:	e0bffb17 	ldw	r2,-20(fp)
   11b48:	e0fffa17 	ldw	r3,-24(fp)
   11b4c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11b50:	e0bffa17 	ldw	r2,-24(fp)
   11b54:	10c00017 	ldw	r3,0(r2)
   11b58:	e0bffb17 	ldw	r2,-20(fp)
   11b5c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11b60:	e0bffa17 	ldw	r2,-24(fp)
   11b64:	10800017 	ldw	r2,0(r2)
   11b68:	e0fffb17 	ldw	r3,-20(fp)
   11b6c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11b70:	e0bffa17 	ldw	r2,-24(fp)
   11b74:	e0fffb17 	ldw	r3,-20(fp)
   11b78:	10c00015 	stw	r3,0(r2)
   11b7c:	e0bff817 	ldw	r2,-32(fp)
   11b80:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b84:	e0bff717 	ldw	r2,-36(fp)
   11b88:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11b8c:	0005883a 	mov	r2,zero
   11b90:	00000306 	br	11ba0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   11b94:	00bffa84 	movi	r2,-22
   11b98:	00000106 	br	11ba0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   11b9c:	00bfde84 	movi	r2,-134
  }
}
   11ba0:	e037883a 	mov	sp,fp
   11ba4:	df000017 	ldw	fp,0(sp)
   11ba8:	dec00104 	addi	sp,sp,4
   11bac:	f800283a 	ret

00011bb0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11bb0:	deffff04 	addi	sp,sp,-4
   11bb4:	df000015 	stw	fp,0(sp)
   11bb8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11bbc:	0001883a 	nop
   11bc0:	e037883a 	mov	sp,fp
   11bc4:	df000017 	ldw	fp,0(sp)
   11bc8:	dec00104 	addi	sp,sp,4
   11bcc:	f800283a 	ret

00011bd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11bd0:	defffe04 	addi	sp,sp,-8
   11bd4:	dfc00115 	stw	ra,4(sp)
   11bd8:	df000015 	stw	fp,0(sp)
   11bdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11be0:	d0a00e17 	ldw	r2,-32712(gp)
   11be4:	10000326 	beq	r2,zero,11bf4 <alt_get_errno+0x24>
   11be8:	d0a00e17 	ldw	r2,-32712(gp)
   11bec:	103ee83a 	callr	r2
   11bf0:	00000106 	br	11bf8 <alt_get_errno+0x28>
   11bf4:	d0a6d104 	addi	r2,gp,-25788
}
   11bf8:	e037883a 	mov	sp,fp
   11bfc:	dfc00117 	ldw	ra,4(sp)
   11c00:	df000017 	ldw	fp,0(sp)
   11c04:	dec00204 	addi	sp,sp,8
   11c08:	f800283a 	ret

00011c0c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11c0c:	defffa04 	addi	sp,sp,-24
   11c10:	dfc00515 	stw	ra,20(sp)
   11c14:	df000415 	stw	fp,16(sp)
   11c18:	df000404 	addi	fp,sp,16
   11c1c:	e13ffe15 	stw	r4,-8(fp)
   11c20:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11c24:	e0bffe17 	ldw	r2,-8(fp)
   11c28:	10000326 	beq	r2,zero,11c38 <alt_dev_llist_insert+0x2c>
   11c2c:	e0bffe17 	ldw	r2,-8(fp)
   11c30:	10800217 	ldw	r2,8(r2)
   11c34:	1000061e 	bne	r2,zero,11c50 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11c38:	0011bd00 	call	11bd0 <alt_get_errno>
   11c3c:	1007883a 	mov	r3,r2
   11c40:	00800584 	movi	r2,22
   11c44:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11c48:	00bffa84 	movi	r2,-22
   11c4c:	00001306 	br	11c9c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11c50:	e0bffe17 	ldw	r2,-8(fp)
   11c54:	e0ffff17 	ldw	r3,-4(fp)
   11c58:	e0fffc15 	stw	r3,-16(fp)
   11c5c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11c60:	e0bffd17 	ldw	r2,-12(fp)
   11c64:	e0fffc17 	ldw	r3,-16(fp)
   11c68:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11c6c:	e0bffc17 	ldw	r2,-16(fp)
   11c70:	10c00017 	ldw	r3,0(r2)
   11c74:	e0bffd17 	ldw	r2,-12(fp)
   11c78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11c7c:	e0bffc17 	ldw	r2,-16(fp)
   11c80:	10800017 	ldw	r2,0(r2)
   11c84:	e0fffd17 	ldw	r3,-12(fp)
   11c88:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11c8c:	e0bffc17 	ldw	r2,-16(fp)
   11c90:	e0fffd17 	ldw	r3,-12(fp)
   11c94:	10c00015 	stw	r3,0(r2)

  return 0;  
   11c98:	0005883a 	mov	r2,zero
}
   11c9c:	e037883a 	mov	sp,fp
   11ca0:	dfc00117 	ldw	ra,4(sp)
   11ca4:	df000017 	ldw	fp,0(sp)
   11ca8:	dec00204 	addi	sp,sp,8
   11cac:	f800283a 	ret

00011cb0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11cb0:	defffd04 	addi	sp,sp,-12
   11cb4:	dfc00215 	stw	ra,8(sp)
   11cb8:	df000115 	stw	fp,4(sp)
   11cbc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11cc0:	00800074 	movhi	r2,1
   11cc4:	1089fd04 	addi	r2,r2,10228
   11cc8:	e0bfff15 	stw	r2,-4(fp)
   11ccc:	00000606 	br	11ce8 <_do_ctors+0x38>
        (*ctor) (); 
   11cd0:	e0bfff17 	ldw	r2,-4(fp)
   11cd4:	10800017 	ldw	r2,0(r2)
   11cd8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11cdc:	e0bfff17 	ldw	r2,-4(fp)
   11ce0:	10bfff04 	addi	r2,r2,-4
   11ce4:	e0bfff15 	stw	r2,-4(fp)
   11ce8:	e0ffff17 	ldw	r3,-4(fp)
   11cec:	00800074 	movhi	r2,1
   11cf0:	1089fe04 	addi	r2,r2,10232
   11cf4:	18bff62e 	bgeu	r3,r2,11cd0 <__alt_data_end+0xffff1cd0>
        (*ctor) (); 
}
   11cf8:	0001883a 	nop
   11cfc:	e037883a 	mov	sp,fp
   11d00:	dfc00117 	ldw	ra,4(sp)
   11d04:	df000017 	ldw	fp,0(sp)
   11d08:	dec00204 	addi	sp,sp,8
   11d0c:	f800283a 	ret

00011d10 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11d10:	defffd04 	addi	sp,sp,-12
   11d14:	dfc00215 	stw	ra,8(sp)
   11d18:	df000115 	stw	fp,4(sp)
   11d1c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11d20:	00800074 	movhi	r2,1
   11d24:	1089fd04 	addi	r2,r2,10228
   11d28:	e0bfff15 	stw	r2,-4(fp)
   11d2c:	00000606 	br	11d48 <_do_dtors+0x38>
        (*dtor) (); 
   11d30:	e0bfff17 	ldw	r2,-4(fp)
   11d34:	10800017 	ldw	r2,0(r2)
   11d38:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11d3c:	e0bfff17 	ldw	r2,-4(fp)
   11d40:	10bfff04 	addi	r2,r2,-4
   11d44:	e0bfff15 	stw	r2,-4(fp)
   11d48:	e0ffff17 	ldw	r3,-4(fp)
   11d4c:	00800074 	movhi	r2,1
   11d50:	1089fe04 	addi	r2,r2,10232
   11d54:	18bff62e 	bgeu	r3,r2,11d30 <__alt_data_end+0xffff1d30>
        (*dtor) (); 
}
   11d58:	0001883a 	nop
   11d5c:	e037883a 	mov	sp,fp
   11d60:	dfc00117 	ldw	ra,4(sp)
   11d64:	df000017 	ldw	fp,0(sp)
   11d68:	dec00204 	addi	sp,sp,8
   11d6c:	f800283a 	ret

00011d70 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11d70:	defffa04 	addi	sp,sp,-24
   11d74:	dfc00515 	stw	ra,20(sp)
   11d78:	df000415 	stw	fp,16(sp)
   11d7c:	df000404 	addi	fp,sp,16
   11d80:	e13ffe15 	stw	r4,-8(fp)
   11d84:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11d88:	e0bfff17 	ldw	r2,-4(fp)
   11d8c:	10800017 	ldw	r2,0(r2)
   11d90:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11d94:	e13ffe17 	ldw	r4,-8(fp)
   11d98:	00073900 	call	7390 <strlen>
   11d9c:	10800044 	addi	r2,r2,1
   11da0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11da4:	00000d06 	br	11ddc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11da8:	e0bffc17 	ldw	r2,-16(fp)
   11dac:	10800217 	ldw	r2,8(r2)
   11db0:	e0fffd17 	ldw	r3,-12(fp)
   11db4:	180d883a 	mov	r6,r3
   11db8:	e17ffe17 	ldw	r5,-8(fp)
   11dbc:	1009883a 	mov	r4,r2
   11dc0:	00126640 	call	12664 <memcmp>
   11dc4:	1000021e 	bne	r2,zero,11dd0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11dc8:	e0bffc17 	ldw	r2,-16(fp)
   11dcc:	00000706 	br	11dec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11dd0:	e0bffc17 	ldw	r2,-16(fp)
   11dd4:	10800017 	ldw	r2,0(r2)
   11dd8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11ddc:	e0fffc17 	ldw	r3,-16(fp)
   11de0:	e0bfff17 	ldw	r2,-4(fp)
   11de4:	18bff01e 	bne	r3,r2,11da8 <__alt_data_end+0xffff1da8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11de8:	0005883a 	mov	r2,zero
}
   11dec:	e037883a 	mov	sp,fp
   11df0:	dfc00117 	ldw	ra,4(sp)
   11df4:	df000017 	ldw	fp,0(sp)
   11df8:	dec00204 	addi	sp,sp,8
   11dfc:	f800283a 	ret

00011e00 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11e00:	defffb04 	addi	sp,sp,-20
   11e04:	dfc00415 	stw	ra,16(sp)
   11e08:	df000315 	stw	fp,12(sp)
   11e0c:	df000304 	addi	fp,sp,12
   11e10:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11e14:	d0a00917 	ldw	r2,-32732(gp)
   11e18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11e1c:	00003106 	br	11ee4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11e20:	e0bffd17 	ldw	r2,-12(fp)
   11e24:	10800217 	ldw	r2,8(r2)
   11e28:	1009883a 	mov	r4,r2
   11e2c:	00073900 	call	7390 <strlen>
   11e30:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11e34:	e0bffd17 	ldw	r2,-12(fp)
   11e38:	10c00217 	ldw	r3,8(r2)
   11e3c:	e0bffe17 	ldw	r2,-8(fp)
   11e40:	10bfffc4 	addi	r2,r2,-1
   11e44:	1885883a 	add	r2,r3,r2
   11e48:	10800003 	ldbu	r2,0(r2)
   11e4c:	10803fcc 	andi	r2,r2,255
   11e50:	1080201c 	xori	r2,r2,128
   11e54:	10bfe004 	addi	r2,r2,-128
   11e58:	10800bd8 	cmpnei	r2,r2,47
   11e5c:	1000031e 	bne	r2,zero,11e6c <alt_find_file+0x6c>
    {
      len -= 1;
   11e60:	e0bffe17 	ldw	r2,-8(fp)
   11e64:	10bfffc4 	addi	r2,r2,-1
   11e68:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11e6c:	e0bffe17 	ldw	r2,-8(fp)
   11e70:	e0ffff17 	ldw	r3,-4(fp)
   11e74:	1885883a 	add	r2,r3,r2
   11e78:	10800003 	ldbu	r2,0(r2)
   11e7c:	10803fcc 	andi	r2,r2,255
   11e80:	1080201c 	xori	r2,r2,128
   11e84:	10bfe004 	addi	r2,r2,-128
   11e88:	10800be0 	cmpeqi	r2,r2,47
   11e8c:	1000081e 	bne	r2,zero,11eb0 <alt_find_file+0xb0>
   11e90:	e0bffe17 	ldw	r2,-8(fp)
   11e94:	e0ffff17 	ldw	r3,-4(fp)
   11e98:	1885883a 	add	r2,r3,r2
   11e9c:	10800003 	ldbu	r2,0(r2)
   11ea0:	10803fcc 	andi	r2,r2,255
   11ea4:	1080201c 	xori	r2,r2,128
   11ea8:	10bfe004 	addi	r2,r2,-128
   11eac:	10000a1e 	bne	r2,zero,11ed8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11eb0:	e0bffd17 	ldw	r2,-12(fp)
   11eb4:	10800217 	ldw	r2,8(r2)
   11eb8:	e0fffe17 	ldw	r3,-8(fp)
   11ebc:	180d883a 	mov	r6,r3
   11ec0:	e17fff17 	ldw	r5,-4(fp)
   11ec4:	1009883a 	mov	r4,r2
   11ec8:	00126640 	call	12664 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11ecc:	1000021e 	bne	r2,zero,11ed8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11ed0:	e0bffd17 	ldw	r2,-12(fp)
   11ed4:	00000706 	br	11ef4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   11ed8:	e0bffd17 	ldw	r2,-12(fp)
   11edc:	10800017 	ldw	r2,0(r2)
   11ee0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11ee4:	e0fffd17 	ldw	r3,-12(fp)
   11ee8:	d0a00904 	addi	r2,gp,-32732
   11eec:	18bfcc1e 	bne	r3,r2,11e20 <__alt_data_end+0xffff1e20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11ef0:	0005883a 	mov	r2,zero
}
   11ef4:	e037883a 	mov	sp,fp
   11ef8:	dfc00117 	ldw	ra,4(sp)
   11efc:	df000017 	ldw	fp,0(sp)
   11f00:	dec00204 	addi	sp,sp,8
   11f04:	f800283a 	ret

00011f08 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11f08:	defffa04 	addi	sp,sp,-24
   11f0c:	dfc00515 	stw	ra,20(sp)
   11f10:	df000415 	stw	fp,16(sp)
   11f14:	dc000315 	stw	r16,12(sp)
   11f18:	df000404 	addi	fp,sp,16
   11f1c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   11f20:	00bffa04 	movi	r2,-24
   11f24:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11f28:	e03ffc15 	stw	zero,-16(fp)
   11f2c:	00001d06 	br	11fa4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   11f30:	04000074 	movhi	r16,1
   11f34:	840da104 	addi	r16,r16,13956
   11f38:	e0bffc17 	ldw	r2,-16(fp)
   11f3c:	01400304 	movi	r5,12
   11f40:	1009883a 	mov	r4,r2
   11f44:	000197c0 	call	197c <__mulsi3>
   11f48:	8085883a 	add	r2,r16,r2
   11f4c:	10800017 	ldw	r2,0(r2)
   11f50:	1000111e 	bne	r2,zero,11f98 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   11f54:	04000074 	movhi	r16,1
   11f58:	840da104 	addi	r16,r16,13956
   11f5c:	e0bffc17 	ldw	r2,-16(fp)
   11f60:	01400304 	movi	r5,12
   11f64:	1009883a 	mov	r4,r2
   11f68:	000197c0 	call	197c <__mulsi3>
   11f6c:	8085883a 	add	r2,r16,r2
   11f70:	e0fffe17 	ldw	r3,-8(fp)
   11f74:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11f78:	d0e00d17 	ldw	r3,-32716(gp)
   11f7c:	e0bffc17 	ldw	r2,-16(fp)
   11f80:	1880020e 	bge	r3,r2,11f8c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   11f84:	e0bffc17 	ldw	r2,-16(fp)
   11f88:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
   11f8c:	e0bffc17 	ldw	r2,-16(fp)
   11f90:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11f94:	00000606 	br	11fb0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11f98:	e0bffc17 	ldw	r2,-16(fp)
   11f9c:	10800044 	addi	r2,r2,1
   11fa0:	e0bffc15 	stw	r2,-16(fp)
   11fa4:	e0bffc17 	ldw	r2,-16(fp)
   11fa8:	10800810 	cmplti	r2,r2,32
   11fac:	103fe01e 	bne	r2,zero,11f30 <__alt_data_end+0xffff1f30>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11fb0:	e0bffd17 	ldw	r2,-12(fp)
}
   11fb4:	e6ffff04 	addi	sp,fp,-4
   11fb8:	dfc00217 	ldw	ra,8(sp)
   11fbc:	df000117 	ldw	fp,4(sp)
   11fc0:	dc000017 	ldw	r16,0(sp)
   11fc4:	dec00304 	addi	sp,sp,12
   11fc8:	f800283a 	ret

00011fcc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11fcc:	deffff04 	addi	sp,sp,-4
   11fd0:	df000015 	stw	fp,0(sp)
   11fd4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11fd8:	0001883a 	nop
   11fdc:	e037883a 	mov	sp,fp
   11fe0:	df000017 	ldw	fp,0(sp)
   11fe4:	dec00104 	addi	sp,sp,4
   11fe8:	f800283a 	ret

00011fec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11fec:	defff904 	addi	sp,sp,-28
   11ff0:	dfc00615 	stw	ra,24(sp)
   11ff4:	df000515 	stw	fp,20(sp)
   11ff8:	df000504 	addi	fp,sp,20
   11ffc:	e13ffc15 	stw	r4,-16(fp)
   12000:	e17ffd15 	stw	r5,-12(fp)
   12004:	e1bffe15 	stw	r6,-8(fp)
   12008:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1200c:	e0800217 	ldw	r2,8(fp)
   12010:	d8800015 	stw	r2,0(sp)
   12014:	e1ffff17 	ldw	r7,-4(fp)
   12018:	e1bffe17 	ldw	r6,-8(fp)
   1201c:	e17ffd17 	ldw	r5,-12(fp)
   12020:	e13ffc17 	ldw	r4,-16(fp)
   12024:	001219c0 	call	1219c <alt_iic_isr_register>
}  
   12028:	e037883a 	mov	sp,fp
   1202c:	dfc00117 	ldw	ra,4(sp)
   12030:	df000017 	ldw	fp,0(sp)
   12034:	dec00204 	addi	sp,sp,8
   12038:	f800283a 	ret

0001203c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1203c:	defff904 	addi	sp,sp,-28
   12040:	df000615 	stw	fp,24(sp)
   12044:	df000604 	addi	fp,sp,24
   12048:	e13ffe15 	stw	r4,-8(fp)
   1204c:	e17fff15 	stw	r5,-4(fp)
   12050:	e0bfff17 	ldw	r2,-4(fp)
   12054:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12058:	0005303a 	rdctl	r2,status
   1205c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12060:	e0fffb17 	ldw	r3,-20(fp)
   12064:	00bfff84 	movi	r2,-2
   12068:	1884703a 	and	r2,r3,r2
   1206c:	1001703a 	wrctl	status,r2
  
  return context;
   12070:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12074:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   12078:	00c00044 	movi	r3,1
   1207c:	e0bffa17 	ldw	r2,-24(fp)
   12080:	1884983a 	sll	r2,r3,r2
   12084:	1007883a 	mov	r3,r2
   12088:	d0a6db17 	ldw	r2,-25748(gp)
   1208c:	1884b03a 	or	r2,r3,r2
   12090:	d0a6db15 	stw	r2,-25748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12094:	d0a6db17 	ldw	r2,-25748(gp)
   12098:	100170fa 	wrctl	ienable,r2
   1209c:	e0bffc17 	ldw	r2,-16(fp)
   120a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   120a4:	e0bffd17 	ldw	r2,-12(fp)
   120a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   120ac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   120b0:	0001883a 	nop
}
   120b4:	e037883a 	mov	sp,fp
   120b8:	df000017 	ldw	fp,0(sp)
   120bc:	dec00104 	addi	sp,sp,4
   120c0:	f800283a 	ret

000120c4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   120c4:	defff904 	addi	sp,sp,-28
   120c8:	df000615 	stw	fp,24(sp)
   120cc:	df000604 	addi	fp,sp,24
   120d0:	e13ffe15 	stw	r4,-8(fp)
   120d4:	e17fff15 	stw	r5,-4(fp)
   120d8:	e0bfff17 	ldw	r2,-4(fp)
   120dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   120e0:	0005303a 	rdctl	r2,status
   120e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   120e8:	e0fffb17 	ldw	r3,-20(fp)
   120ec:	00bfff84 	movi	r2,-2
   120f0:	1884703a 	and	r2,r3,r2
   120f4:	1001703a 	wrctl	status,r2
  
  return context;
   120f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   120fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   12100:	00c00044 	movi	r3,1
   12104:	e0bffa17 	ldw	r2,-24(fp)
   12108:	1884983a 	sll	r2,r3,r2
   1210c:	0084303a 	nor	r2,zero,r2
   12110:	1007883a 	mov	r3,r2
   12114:	d0a6db17 	ldw	r2,-25748(gp)
   12118:	1884703a 	and	r2,r3,r2
   1211c:	d0a6db15 	stw	r2,-25748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12120:	d0a6db17 	ldw	r2,-25748(gp)
   12124:	100170fa 	wrctl	ienable,r2
   12128:	e0bffc17 	ldw	r2,-16(fp)
   1212c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12130:	e0bffd17 	ldw	r2,-12(fp)
   12134:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12138:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1213c:	0001883a 	nop
}
   12140:	e037883a 	mov	sp,fp
   12144:	df000017 	ldw	fp,0(sp)
   12148:	dec00104 	addi	sp,sp,4
   1214c:	f800283a 	ret

00012150 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   12150:	defffc04 	addi	sp,sp,-16
   12154:	df000315 	stw	fp,12(sp)
   12158:	df000304 	addi	fp,sp,12
   1215c:	e13ffe15 	stw	r4,-8(fp)
   12160:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   12164:	000530fa 	rdctl	r2,ienable
   12168:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1216c:	00c00044 	movi	r3,1
   12170:	e0bfff17 	ldw	r2,-4(fp)
   12174:	1884983a 	sll	r2,r3,r2
   12178:	1007883a 	mov	r3,r2
   1217c:	e0bffd17 	ldw	r2,-12(fp)
   12180:	1884703a 	and	r2,r3,r2
   12184:	1004c03a 	cmpne	r2,r2,zero
   12188:	10803fcc 	andi	r2,r2,255
}
   1218c:	e037883a 	mov	sp,fp
   12190:	df000017 	ldw	fp,0(sp)
   12194:	dec00104 	addi	sp,sp,4
   12198:	f800283a 	ret

0001219c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1219c:	defff504 	addi	sp,sp,-44
   121a0:	dfc00a15 	stw	ra,40(sp)
   121a4:	df000915 	stw	fp,36(sp)
   121a8:	df000904 	addi	fp,sp,36
   121ac:	e13ffc15 	stw	r4,-16(fp)
   121b0:	e17ffd15 	stw	r5,-12(fp)
   121b4:	e1bffe15 	stw	r6,-8(fp)
   121b8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   121bc:	00bffa84 	movi	r2,-22
   121c0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   121c4:	e0bffd17 	ldw	r2,-12(fp)
   121c8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   121cc:	e0bff817 	ldw	r2,-32(fp)
   121d0:	10800808 	cmpgei	r2,r2,32
   121d4:	1000271e 	bne	r2,zero,12274 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121d8:	0005303a 	rdctl	r2,status
   121dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121e0:	e0fffb17 	ldw	r3,-20(fp)
   121e4:	00bfff84 	movi	r2,-2
   121e8:	1884703a 	and	r2,r3,r2
   121ec:	1001703a 	wrctl	status,r2
  
  return context;
   121f0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   121f4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   121f8:	00800074 	movhi	r2,1
   121fc:	10990204 	addi	r2,r2,25608
   12200:	e0fff817 	ldw	r3,-32(fp)
   12204:	180690fa 	slli	r3,r3,3
   12208:	10c5883a 	add	r2,r2,r3
   1220c:	e0fffe17 	ldw	r3,-8(fp)
   12210:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   12214:	00800074 	movhi	r2,1
   12218:	10990204 	addi	r2,r2,25608
   1221c:	e0fff817 	ldw	r3,-32(fp)
   12220:	180690fa 	slli	r3,r3,3
   12224:	10c5883a 	add	r2,r2,r3
   12228:	10800104 	addi	r2,r2,4
   1222c:	e0ffff17 	ldw	r3,-4(fp)
   12230:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   12234:	e0bffe17 	ldw	r2,-8(fp)
   12238:	10000526 	beq	r2,zero,12250 <alt_iic_isr_register+0xb4>
   1223c:	e0bff817 	ldw	r2,-32(fp)
   12240:	100b883a 	mov	r5,r2
   12244:	e13ffc17 	ldw	r4,-16(fp)
   12248:	001203c0 	call	1203c <alt_ic_irq_enable>
   1224c:	00000406 	br	12260 <alt_iic_isr_register+0xc4>
   12250:	e0bff817 	ldw	r2,-32(fp)
   12254:	100b883a 	mov	r5,r2
   12258:	e13ffc17 	ldw	r4,-16(fp)
   1225c:	00120c40 	call	120c4 <alt_ic_irq_disable>
   12260:	e0bff715 	stw	r2,-36(fp)
   12264:	e0bffa17 	ldw	r2,-24(fp)
   12268:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1226c:	e0bff917 	ldw	r2,-28(fp)
   12270:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   12274:	e0bff717 	ldw	r2,-36(fp)
}
   12278:	e037883a 	mov	sp,fp
   1227c:	dfc00117 	ldw	ra,4(sp)
   12280:	df000017 	ldw	fp,0(sp)
   12284:	dec00204 	addi	sp,sp,8
   12288:	f800283a 	ret

0001228c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1228c:	defff804 	addi	sp,sp,-32
   12290:	dfc00715 	stw	ra,28(sp)
   12294:	df000615 	stw	fp,24(sp)
   12298:	dc000515 	stw	r16,20(sp)
   1229c:	df000604 	addi	fp,sp,24
   122a0:	e13ffb15 	stw	r4,-20(fp)
   122a4:	e17ffc15 	stw	r5,-16(fp)
   122a8:	e1bffd15 	stw	r6,-12(fp)
   122ac:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   122b0:	e1bffe17 	ldw	r6,-8(fp)
   122b4:	e17ffd17 	ldw	r5,-12(fp)
   122b8:	e13ffc17 	ldw	r4,-16(fp)
   122bc:	001094c0 	call	1094c <open>
   122c0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   122c4:	e0bffa17 	ldw	r2,-24(fp)
   122c8:	10002216 	blt	r2,zero,12354 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   122cc:	04000074 	movhi	r16,1
   122d0:	840da104 	addi	r16,r16,13956
   122d4:	e0bffa17 	ldw	r2,-24(fp)
   122d8:	01400304 	movi	r5,12
   122dc:	1009883a 	mov	r4,r2
   122e0:	000197c0 	call	197c <__mulsi3>
   122e4:	8085883a 	add	r2,r16,r2
   122e8:	10c00017 	ldw	r3,0(r2)
   122ec:	e0bffb17 	ldw	r2,-20(fp)
   122f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   122f4:	04000074 	movhi	r16,1
   122f8:	840da104 	addi	r16,r16,13956
   122fc:	e0bffa17 	ldw	r2,-24(fp)
   12300:	01400304 	movi	r5,12
   12304:	1009883a 	mov	r4,r2
   12308:	000197c0 	call	197c <__mulsi3>
   1230c:	8085883a 	add	r2,r16,r2
   12310:	10800104 	addi	r2,r2,4
   12314:	10c00017 	ldw	r3,0(r2)
   12318:	e0bffb17 	ldw	r2,-20(fp)
   1231c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   12320:	04000074 	movhi	r16,1
   12324:	840da104 	addi	r16,r16,13956
   12328:	e0bffa17 	ldw	r2,-24(fp)
   1232c:	01400304 	movi	r5,12
   12330:	1009883a 	mov	r4,r2
   12334:	000197c0 	call	197c <__mulsi3>
   12338:	8085883a 	add	r2,r16,r2
   1233c:	10800204 	addi	r2,r2,8
   12340:	10c00017 	ldw	r3,0(r2)
   12344:	e0bffb17 	ldw	r2,-20(fp)
   12348:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1234c:	e13ffa17 	ldw	r4,-24(fp)
   12350:	0010be80 	call	10be8 <alt_release_fd>
  }
} 
   12354:	0001883a 	nop
   12358:	e6ffff04 	addi	sp,fp,-4
   1235c:	dfc00217 	ldw	ra,8(sp)
   12360:	df000117 	ldw	fp,4(sp)
   12364:	dc000017 	ldw	r16,0(sp)
   12368:	dec00304 	addi	sp,sp,12
   1236c:	f800283a 	ret

00012370 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   12370:	defffb04 	addi	sp,sp,-20
   12374:	dfc00415 	stw	ra,16(sp)
   12378:	df000315 	stw	fp,12(sp)
   1237c:	df000304 	addi	fp,sp,12
   12380:	e13ffd15 	stw	r4,-12(fp)
   12384:	e17ffe15 	stw	r5,-8(fp)
   12388:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1238c:	01c07fc4 	movi	r7,511
   12390:	01800044 	movi	r6,1
   12394:	e17ffd17 	ldw	r5,-12(fp)
   12398:	01000074 	movhi	r4,1
   1239c:	210da404 	addi	r4,r4,13968
   123a0:	001228c0 	call	1228c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   123a4:	01c07fc4 	movi	r7,511
   123a8:	000d883a 	mov	r6,zero
   123ac:	e17ffe17 	ldw	r5,-8(fp)
   123b0:	01000074 	movhi	r4,1
   123b4:	210da104 	addi	r4,r4,13956
   123b8:	001228c0 	call	1228c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   123bc:	01c07fc4 	movi	r7,511
   123c0:	01800044 	movi	r6,1
   123c4:	e17fff17 	ldw	r5,-4(fp)
   123c8:	01000074 	movhi	r4,1
   123cc:	210da704 	addi	r4,r4,13980
   123d0:	001228c0 	call	1228c <alt_open_fd>
}  
   123d4:	0001883a 	nop
   123d8:	e037883a 	mov	sp,fp
   123dc:	dfc00117 	ldw	ra,4(sp)
   123e0:	df000017 	ldw	fp,0(sp)
   123e4:	dec00204 	addi	sp,sp,8
   123e8:	f800283a 	ret

000123ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   123ec:	defffa04 	addi	sp,sp,-24
   123f0:	df000515 	stw	fp,20(sp)
   123f4:	df000504 	addi	fp,sp,20
   123f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   123fc:	0005303a 	rdctl	r2,status
   12400:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12404:	e0fffc17 	ldw	r3,-16(fp)
   12408:	00bfff84 	movi	r2,-2
   1240c:	1884703a 	and	r2,r3,r2
   12410:	1001703a 	wrctl	status,r2
  
  return context;
   12414:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   12418:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1241c:	e0bfff17 	ldw	r2,-4(fp)
   12420:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12424:	e0bffd17 	ldw	r2,-12(fp)
   12428:	10800017 	ldw	r2,0(r2)
   1242c:	e0fffd17 	ldw	r3,-12(fp)
   12430:	18c00117 	ldw	r3,4(r3)
   12434:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   12438:	e0bffd17 	ldw	r2,-12(fp)
   1243c:	10800117 	ldw	r2,4(r2)
   12440:	e0fffd17 	ldw	r3,-12(fp)
   12444:	18c00017 	ldw	r3,0(r3)
   12448:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1244c:	e0bffd17 	ldw	r2,-12(fp)
   12450:	e0fffd17 	ldw	r3,-12(fp)
   12454:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   12458:	e0bffd17 	ldw	r2,-12(fp)
   1245c:	e0fffd17 	ldw	r3,-12(fp)
   12460:	10c00015 	stw	r3,0(r2)
   12464:	e0bffb17 	ldw	r2,-20(fp)
   12468:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1246c:	e0bffe17 	ldw	r2,-8(fp)
   12470:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12474:	0001883a 	nop
   12478:	e037883a 	mov	sp,fp
   1247c:	df000017 	ldw	fp,0(sp)
   12480:	dec00104 	addi	sp,sp,4
   12484:	f800283a 	ret

00012488 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12488:	defffb04 	addi	sp,sp,-20
   1248c:	dfc00415 	stw	ra,16(sp)
   12490:	df000315 	stw	fp,12(sp)
   12494:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12498:	d0a01117 	ldw	r2,-32700(gp)
   1249c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   124a0:	d0a6dd17 	ldw	r2,-25740(gp)
   124a4:	10800044 	addi	r2,r2,1
   124a8:	d0a6dd15 	stw	r2,-25740(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   124ac:	00002e06 	br	12568 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   124b0:	e0bffd17 	ldw	r2,-12(fp)
   124b4:	10800017 	ldw	r2,0(r2)
   124b8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   124bc:	e0bffd17 	ldw	r2,-12(fp)
   124c0:	10800403 	ldbu	r2,16(r2)
   124c4:	10803fcc 	andi	r2,r2,255
   124c8:	10000426 	beq	r2,zero,124dc <alt_tick+0x54>
   124cc:	d0a6dd17 	ldw	r2,-25740(gp)
   124d0:	1000021e 	bne	r2,zero,124dc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   124d4:	e0bffd17 	ldw	r2,-12(fp)
   124d8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   124dc:	e0bffd17 	ldw	r2,-12(fp)
   124e0:	10800217 	ldw	r2,8(r2)
   124e4:	d0e6dd17 	ldw	r3,-25740(gp)
   124e8:	18801d36 	bltu	r3,r2,12560 <alt_tick+0xd8>
   124ec:	e0bffd17 	ldw	r2,-12(fp)
   124f0:	10800403 	ldbu	r2,16(r2)
   124f4:	10803fcc 	andi	r2,r2,255
   124f8:	1000191e 	bne	r2,zero,12560 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   124fc:	e0bffd17 	ldw	r2,-12(fp)
   12500:	10800317 	ldw	r2,12(r2)
   12504:	e0fffd17 	ldw	r3,-12(fp)
   12508:	18c00517 	ldw	r3,20(r3)
   1250c:	1809883a 	mov	r4,r3
   12510:	103ee83a 	callr	r2
   12514:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12518:	e0bfff17 	ldw	r2,-4(fp)
   1251c:	1000031e 	bne	r2,zero,1252c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   12520:	e13ffd17 	ldw	r4,-12(fp)
   12524:	00123ec0 	call	123ec <alt_alarm_stop>
   12528:	00000d06 	br	12560 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1252c:	e0bffd17 	ldw	r2,-12(fp)
   12530:	10c00217 	ldw	r3,8(r2)
   12534:	e0bfff17 	ldw	r2,-4(fp)
   12538:	1887883a 	add	r3,r3,r2
   1253c:	e0bffd17 	ldw	r2,-12(fp)
   12540:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12544:	e0bffd17 	ldw	r2,-12(fp)
   12548:	10c00217 	ldw	r3,8(r2)
   1254c:	d0a6dd17 	ldw	r2,-25740(gp)
   12550:	1880032e 	bgeu	r3,r2,12560 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   12554:	e0bffd17 	ldw	r2,-12(fp)
   12558:	00c00044 	movi	r3,1
   1255c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   12560:	e0bffe17 	ldw	r2,-8(fp)
   12564:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12568:	e0fffd17 	ldw	r3,-12(fp)
   1256c:	d0a01104 	addi	r2,gp,-32700
   12570:	18bfcf1e 	bne	r3,r2,124b0 <__alt_data_end+0xffff24b0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   12574:	0001883a 	nop
}
   12578:	0001883a 	nop
   1257c:	e037883a 	mov	sp,fp
   12580:	dfc00117 	ldw	ra,4(sp)
   12584:	df000017 	ldw	fp,0(sp)
   12588:	dec00204 	addi	sp,sp,8
   1258c:	f800283a 	ret

00012590 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   12590:	deffff04 	addi	sp,sp,-4
   12594:	df000015 	stw	fp,0(sp)
   12598:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1259c:	000170fa 	wrctl	ienable,zero
}
   125a0:	0001883a 	nop
   125a4:	e037883a 	mov	sp,fp
   125a8:	df000017 	ldw	fp,0(sp)
   125ac:	dec00104 	addi	sp,sp,4
   125b0:	f800283a 	ret

000125b4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   125b4:	defffe04 	addi	sp,sp,-8
   125b8:	df000115 	stw	fp,4(sp)
   125bc:	df000104 	addi	fp,sp,4
   125c0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   125c4:	e0bfff17 	ldw	r2,-4(fp)
   125c8:	10bffe84 	addi	r2,r2,-6
   125cc:	10c00428 	cmpgeui	r3,r2,16
   125d0:	18001a1e 	bne	r3,zero,1263c <alt_exception_cause_generated_bad_addr+0x88>
   125d4:	100690ba 	slli	r3,r2,2
   125d8:	00800074 	movhi	r2,1
   125dc:	10897b04 	addi	r2,r2,9708
   125e0:	1885883a 	add	r2,r3,r2
   125e4:	10800017 	ldw	r2,0(r2)
   125e8:	1000683a 	jmp	r2
   125ec:	0001262c 	andhi	zero,zero,1176
   125f0:	0001262c 	andhi	zero,zero,1176
   125f4:	0001263c 	xorhi	zero,zero,1176
   125f8:	0001263c 	xorhi	zero,zero,1176
   125fc:	0001263c 	xorhi	zero,zero,1176
   12600:	0001262c 	andhi	zero,zero,1176
   12604:	00012634 	movhi	zero,1176
   12608:	0001263c 	xorhi	zero,zero,1176
   1260c:	0001262c 	andhi	zero,zero,1176
   12610:	0001262c 	andhi	zero,zero,1176
   12614:	0001263c 	xorhi	zero,zero,1176
   12618:	0001262c 	andhi	zero,zero,1176
   1261c:	00012634 	movhi	zero,1176
   12620:	0001263c 	xorhi	zero,zero,1176
   12624:	0001263c 	xorhi	zero,zero,1176
   12628:	0001262c 	andhi	zero,zero,1176
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1262c:	00800044 	movi	r2,1
   12630:	00000306 	br	12640 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12634:	0005883a 	mov	r2,zero
   12638:	00000106 	br	12640 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1263c:	0005883a 	mov	r2,zero
  }
}
   12640:	e037883a 	mov	sp,fp
   12644:	df000017 	ldw	fp,0(sp)
   12648:	dec00104 	addi	sp,sp,4
   1264c:	f800283a 	ret

00012650 <atexit>:
   12650:	200b883a 	mov	r5,r4
   12654:	000f883a 	mov	r7,zero
   12658:	000d883a 	mov	r6,zero
   1265c:	0009883a 	mov	r4,zero
   12660:	00126e01 	jmpi	126e0 <__register_exitproc>

00012664 <memcmp>:
   12664:	01c000c4 	movi	r7,3
   12668:	3980192e 	bgeu	r7,r6,126d0 <memcmp+0x6c>
   1266c:	2144b03a 	or	r2,r4,r5
   12670:	11c4703a 	and	r2,r2,r7
   12674:	10000f26 	beq	r2,zero,126b4 <memcmp+0x50>
   12678:	20800003 	ldbu	r2,0(r4)
   1267c:	28c00003 	ldbu	r3,0(r5)
   12680:	10c0151e 	bne	r2,r3,126d8 <memcmp+0x74>
   12684:	31bfff84 	addi	r6,r6,-2
   12688:	01ffffc4 	movi	r7,-1
   1268c:	00000406 	br	126a0 <memcmp+0x3c>
   12690:	20800003 	ldbu	r2,0(r4)
   12694:	28c00003 	ldbu	r3,0(r5)
   12698:	31bfffc4 	addi	r6,r6,-1
   1269c:	10c00e1e 	bne	r2,r3,126d8 <memcmp+0x74>
   126a0:	21000044 	addi	r4,r4,1
   126a4:	29400044 	addi	r5,r5,1
   126a8:	31fff91e 	bne	r6,r7,12690 <__alt_data_end+0xffff2690>
   126ac:	0005883a 	mov	r2,zero
   126b0:	f800283a 	ret
   126b4:	20c00017 	ldw	r3,0(r4)
   126b8:	28800017 	ldw	r2,0(r5)
   126bc:	18bfee1e 	bne	r3,r2,12678 <__alt_data_end+0xffff2678>
   126c0:	31bfff04 	addi	r6,r6,-4
   126c4:	21000104 	addi	r4,r4,4
   126c8:	29400104 	addi	r5,r5,4
   126cc:	39bff936 	bltu	r7,r6,126b4 <__alt_data_end+0xffff26b4>
   126d0:	303fe91e 	bne	r6,zero,12678 <__alt_data_end+0xffff2678>
   126d4:	003ff506 	br	126ac <__alt_data_end+0xffff26ac>
   126d8:	10c5c83a 	sub	r2,r2,r3
   126dc:	f800283a 	ret

000126e0 <__register_exitproc>:
   126e0:	defffa04 	addi	sp,sp,-24
   126e4:	dc000315 	stw	r16,12(sp)
   126e8:	04000074 	movhi	r16,1
   126ec:	84121c04 	addi	r16,r16,18544
   126f0:	80c00017 	ldw	r3,0(r16)
   126f4:	dc400415 	stw	r17,16(sp)
   126f8:	dfc00515 	stw	ra,20(sp)
   126fc:	18805217 	ldw	r2,328(r3)
   12700:	2023883a 	mov	r17,r4
   12704:	10003726 	beq	r2,zero,127e4 <__register_exitproc+0x104>
   12708:	10c00117 	ldw	r3,4(r2)
   1270c:	010007c4 	movi	r4,31
   12710:	20c00e16 	blt	r4,r3,1274c <__register_exitproc+0x6c>
   12714:	1a000044 	addi	r8,r3,1
   12718:	8800221e 	bne	r17,zero,127a4 <__register_exitproc+0xc4>
   1271c:	18c00084 	addi	r3,r3,2
   12720:	18c7883a 	add	r3,r3,r3
   12724:	18c7883a 	add	r3,r3,r3
   12728:	12000115 	stw	r8,4(r2)
   1272c:	10c7883a 	add	r3,r2,r3
   12730:	19400015 	stw	r5,0(r3)
   12734:	0005883a 	mov	r2,zero
   12738:	dfc00517 	ldw	ra,20(sp)
   1273c:	dc400417 	ldw	r17,16(sp)
   12740:	dc000317 	ldw	r16,12(sp)
   12744:	dec00604 	addi	sp,sp,24
   12748:	f800283a 	ret
   1274c:	00800034 	movhi	r2,0
   12750:	10800004 	addi	r2,r2,0
   12754:	10002626 	beq	r2,zero,127f0 <__register_exitproc+0x110>
   12758:	01006404 	movi	r4,400
   1275c:	d9400015 	stw	r5,0(sp)
   12760:	d9800115 	stw	r6,4(sp)
   12764:	d9c00215 	stw	r7,8(sp)
   12768:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
   1276c:	d9400017 	ldw	r5,0(sp)
   12770:	d9800117 	ldw	r6,4(sp)
   12774:	d9c00217 	ldw	r7,8(sp)
   12778:	10001d26 	beq	r2,zero,127f0 <__register_exitproc+0x110>
   1277c:	81000017 	ldw	r4,0(r16)
   12780:	10000115 	stw	zero,4(r2)
   12784:	02000044 	movi	r8,1
   12788:	22405217 	ldw	r9,328(r4)
   1278c:	0007883a 	mov	r3,zero
   12790:	12400015 	stw	r9,0(r2)
   12794:	20805215 	stw	r2,328(r4)
   12798:	10006215 	stw	zero,392(r2)
   1279c:	10006315 	stw	zero,396(r2)
   127a0:	883fde26 	beq	r17,zero,1271c <__alt_data_end+0xffff271c>
   127a4:	18c9883a 	add	r4,r3,r3
   127a8:	2109883a 	add	r4,r4,r4
   127ac:	1109883a 	add	r4,r2,r4
   127b0:	21802215 	stw	r6,136(r4)
   127b4:	01800044 	movi	r6,1
   127b8:	12406217 	ldw	r9,392(r2)
   127bc:	30cc983a 	sll	r6,r6,r3
   127c0:	4992b03a 	or	r9,r9,r6
   127c4:	12406215 	stw	r9,392(r2)
   127c8:	21c04215 	stw	r7,264(r4)
   127cc:	01000084 	movi	r4,2
   127d0:	893fd21e 	bne	r17,r4,1271c <__alt_data_end+0xffff271c>
   127d4:	11006317 	ldw	r4,396(r2)
   127d8:	218cb03a 	or	r6,r4,r6
   127dc:	11806315 	stw	r6,396(r2)
   127e0:	003fce06 	br	1271c <__alt_data_end+0xffff271c>
   127e4:	18805304 	addi	r2,r3,332
   127e8:	18805215 	stw	r2,328(r3)
   127ec:	003fc606 	br	12708 <__alt_data_end+0xffff2708>
   127f0:	00bfffc4 	movi	r2,-1
   127f4:	003fd006 	br	12738 <__alt_data_end+0xffff2738>
