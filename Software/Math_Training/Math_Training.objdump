
Math_Training.elf:     file format elf32-littlenios2
Math_Training.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000132d8 memsz 0x000132d8 flags r-x
    LOAD off    0x000142f8 vaddr 0x000132f8 paddr 0x00014df0 align 2**12
         filesz 0x00001af8 memsz 0x00001af8 flags rw-
    LOAD off    0x000168e8 vaddr 0x000168e8 paddr 0x000168e8 align 2**12
         filesz 0x00000000 memsz 0x00000170 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012ac0  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000608  00012cf0  00012cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af8  000132f8  00014df0  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000170  000168e8  000168e8  000168e8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00016a58  00016a58  00015df0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015df0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001218  00000000  00000000  00015e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002da38  00000000  00000000  00017030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b8ff  00000000  00000000  00044a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e151  00000000  00000000  00050367  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002ab0  00000000  00000000  0005e4b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000043fc  00000000  00000000  00060f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019d27  00000000  00000000  00065364  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0007f08c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c00  00000000  00000000  0007f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00084655  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00084658  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008465c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008465d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008465e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00084662  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00084666  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0008466a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00084675  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00084680  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  0008468b  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  0008469f  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00062588  00000000  00000000  000846ed  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00012cf0 l    d  .rodata	00000000 .rodata
000132f8 l    d  .rwdata	00000000 .rwdata
000168e8 l    d  .bss	00000000 .bss
00016a58 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/emilio/UNI/Magistrale/Embedded/progetto/DE10_Lite_First_Computer/Software/Math_Training_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 1lnn.c
00000000 l    df *ABS*	00000000 main.c
00014da4 l     O .rwdata	00000004 DEFAULT_TEXT_COLOR
00000000 l    df *ABS*	00000000 mnist-stats.c
00014da8 l     O .rwdata	00000004 DEFAULT_TEXT_COLOR
00000000 l    df *ABS*	00000000 mnist-utils.c
00000000 l    df *ABS*	00000000 screen.c
00014dac l     O .rwdata	00000004 DEFAULT_TEXT_COLOR
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 difftime.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005010 l     F .text	00000008 __fp_unlock
00005024 l     F .text	0000019c __sinit.part.1
000051c0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000132f8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 refill.c
00007048 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00013142 l     O .rodata	00000010 zeroes.4404
000098bc l     F .text	000000bc __sbprintf
00013152 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00009d00 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00013b44 l     O .rwdata	00000020 lc_ctype_charset
00013b24 l     O .rwdata	00000020 lc_message_charset
00013b64 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00013180 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000d884 l     F .text	000000fc __sprint_r.part.0
000132a4 l     O .rodata	00000010 zeroes.4349
0000eec0 l     F .text	000000bc __sbprintf
000132b4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00010510 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00010624 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00010684 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001096c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00010a54 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00010b40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00010d1c l     F .text	0000003c alt_get_errno
00010d58 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00010fa0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014de0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
000113b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000114f4 l     F .text	00000034 alt_dev_reg
00013d44 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000117e8 l     F .text	0000020c altera_avalon_jtag_uart_irq
000119f4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001202c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001226c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00012928 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
0001692c g     O .bss	00000004 alt_instruction_exception_handler
00006ee0 g     F .text	00000018 putchar
0000ce90 g     F .text	00000074 _mprec_log10
0000cf7c g     F .text	0000008c __any_on
0000bb80 g     F .text	00000054 _isatty_r
0001318c g     O .rodata	00000028 __mprec_tinytens
00010c58 g     F .text	0000007c alt_main
0000744c g     F .text	00000090 strcpy
00006ef8 g     F .text	000000c0 _puts_r
00016958 g     O .bss	00000100 alt_irq
0000bcb0 g     F .text	00000060 _lseek_r
00014df0 g       *ABS*	00000000 __flash_rwdata_start
0000b5b0 g     F .text	000000ac __sflags
0001026c g     F .text	00000088 .hidden __eqdf2
0000bb24 g     F .text	0000005c _gettimeofday_r
00016a58 g       *ABS*	00000000 __alt_heap_start
00006e9c g     F .text	0000003c printf
0000f3b8 g     F .text	0000009c _wcrtomb_r
00007364 g     F .text	0000005c __sseek
00005370 g     F .text	00000010 __sinit
0000ef7c g     F .text	00000140 __swbuf_r
0000bbd4 g     F .text	0000007c _setlocale_r
000051c8 g     F .text	00000078 __sfmoreglue
00010cf8 g     F .text	00000024 __malloc_unlock
00001a58 g     F .text	00000440 .hidden __divsf3
00001504 g     F .text	0000012c readImageFileHeader
0000bdf4 g     F .text	0000015c memmove
00005358 g     F .text	00000018 _cleanup
0000bf50 g     F .text	000000a8 _Balloc
000022c8 g     F .text	00000070 .hidden __fixsfsi
000036d8 g     F .text	000000dc .hidden __gtdf2
00012a88 g     F .text	00000024 altera_nios2_gen2_irq_init
00000998 g     F .text	000001e8 trainLayer
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00005ff0 g     F .text	0000005c _fstat_r
000168e8 g     O .bss	00000004 errno
000072e0 g     F .text	00000008 __seofread
00016918 g     O .bss	00000004 alt_argv
0001cda4 g       *ABS*	00000000 _gp
00013bc4 g     O .rwdata	00000180 alt_fd_list
00006ed8 g     F .text	00000008 _putchar_r
00000ecc g     F .text	000000e8 displayImageFrame
0001240c g     F .text	00000090 alt_find_dev
00006b9c g     F .text	00000148 memcpy
00005018 g     F .text	0000000c _cleanup_r
0000491c g     F .text	000000dc .hidden __floatsidf
00012a0c g     F .text	0000007c alt_io_redirect
000102f4 g     F .text	000000f4 .hidden __ltdf2
00012cf0 g       *ABS*	00000000 __DTOR_END__
00006fb8 g     F .text	00000014 puts
00012aac g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000d734 g     F .text	00000074 __fpclassifyd
0000cdec g     F .text	000000a4 __ratio
0000eea4 g     F .text	0000001c __vfiprintf_internal
00011bec g     F .text	0000021c altera_avalon_jtag_uart_read
00006e6c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004b54 g     F .text	00000064 .hidden __udivsi3
000109a8 g     F .text	000000ac isatty
000131dc g     O .rodata	000000c8 __mprec_tens
0000bc50 g     F .text	0000000c __locale_charset
000019e8 g     F .text	00000048 locateCursor
00016904 g     O .bss	00000008 alt_timezone
000168f4 g     O .bss	00000004 __malloc_top_pad
000007bc g     F .text	00000128 updateCellWeights
00014dc0 g     O .rwdata	00000004 __mb_cur_max
0000bc80 g     F .text	0000000c _localeconv_r
0000c384 g     F .text	0000003c __i2b
0000b65c g     F .text	000004c8 __sfvwrite_r
00001844 g     F .text	00000068 getLabel
00007238 g     F .text	00000054 _sbrk_r
0000d170 g     F .text	00000060 _read_r
00014dd8 g     O .rwdata	00000004 alt_max_fd
00004c64 g     F .text	000000f0 _fclose_r
00004fe0 g     F .text	00000030 fflush
000168f0 g     O .bss	00000004 __malloc_max_sbrked_mem
0000245c g     F .text	000008ac .hidden __adddf3
0000cb94 g     F .text	0000010c __b2d
0000fca8 g     F .text	000005c4 .hidden __umoddi3
00010b7c g     F .text	000000dc lseek
00014db0 g     O .rwdata	00000004 _global_impure_ptr
000018e0 g     F .text	00000108 setColor
0000d1d0 g     F .text	00000564 _realloc_r
00016a58 g       *ABS*	00000000 __bss_end
00012838 g     F .text	000000f0 alt_iic_isr_register
000112b0 g     F .text	00000108 alt_tick
0000f6ac g     F .text	000005fc .hidden __udivdi3
0000f314 g     F .text	00000024 _fputwc_r
000131b4 g     O .rodata	00000028 __mprec_bigtens
0000c168 g     F .text	00000104 __s2b
00010468 g     F .text	000000a8 .hidden __floatunsidf
0000c8d4 g     F .text	00000060 __mcmp
00005390 g     F .text	00000018 __fp_lock_all
000127ec g     F .text	0000004c alt_ic_irq_enabled
000017bc g     F .text	00000088 getImage
00011214 g     F .text	0000009c alt_alarm_stop
00016928 g     O .bss	00000004 alt_irq_active
00005b90 g     F .text	00000444 _fseeko_r
000000fc g     F .exceptions	000000d4 alt_irq_handler
00013b9c g     O .rwdata	00000028 alt_dev_null
000008e4 g     F .text	0000006c trainCell
0001224c g     F .text	00000020 alt_dcache_flush_all
0000c26c g     F .text	00000068 __hi0bits
000103e8 g     F .text	00000080 .hidden __fixdfsi
00000950 g     F .text	00000048 testCell
00014df0 g       *ABS*	00000000 __ram_rwdata_end
00014dd0 g     O .rwdata	00000008 alt_dev_list
000113f4 g     F .text	00000100 write
0000d008 g     F .text	000000a0 _putc_r
000132f8 g       *ABS*	00000000 __ram_rodata_end
000106c0 g     F .text	000000b8 fstat
000102f4 g     F .text	000000f4 .hidden __ledf2
000073c8 g     F .text	00000084 strcat
0000c64c g     F .text	00000140 __pow5mult
0000d998 g     F .text	0000150c ___vfiprintf_internal_r
00016900 g     O .bss	00000004 __nlocale_changed
00004bb8 g     F .text	00000058 .hidden __umodsi3
00016a58 g       *ABS*	00000000 end
00005fd4 g     F .text	0000001c fseeko
00005b74 g     F .text	0000001c fseek
00011728 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00012cf0 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
000120a4 g     F .text	0000007c alt_avalon_timer_sc_init
000049f8 g     F .text	00000064 .hidden __clzsi2
00011e08 g     F .text	00000224 altera_avalon_jtag_uart_write
00001490 g     F .text	00000074 flipBytes
000005fc g     F .text	0000013c calcCellOutput
00005380 g     F .text	00000004 __sfp_lock_acquire
0000bd10 g     F .text	000000e4 memchr
000075c4 g     F .text	000022dc ___vfprintf_internal_r
00005860 g     F .text	00000310 _free_r
0000bc5c g     F .text	00000010 __locale_mb_cur_max
00009b80 g     F .text	00000180 __call_exitprocs
000168fc g     O .bss	00000004 __mlocale_changed
00014db8 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00016920 g     O .bss	00000004 _alt_tick_rate
00000570 g     F .text	0000008c setCellInput
00006fe4 g     F .text	00000064 rand
0000c78c g     F .text	00000148 __lshift
00016924 g     O .bss	00000004 _alt_nticks
00010fdc g     F .text	00000104 read
00000fb4 g     F .text	00000238 displayImage
00011560 g     F .text	00000064 alt_sys_init
00002338 g     F .text	00000124 .hidden __floatsisf
000011ec g     F .text	000000c0 displayLoadingProgressTraining
00006e0c g     F .text	00000060 _open_r
00012bd8 g     F .text	00000118 __register_exitproc
000016dc g     F .text	00000070 openMNISTImageFile
0000c3c0 g     F .text	0000028c __multiply
00011a94 g     F .text	00000068 altera_avalon_jtag_uart_close
00001a30 g     F .text	00000028 .hidden __mulsi3
000132f8 g       *ABS*	00000000 __ram_rwdata_start
00012cf0 g       *ABS*	00000000 __ram_rodata_start
000004a0 g     F .text	000000d0 getLayerPrediction
00016930 g     O .bss	00000028 __malloc_current_mallinfo
0000cca0 g     F .text	0000014c __d2b
000115c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000125a4 g     F .text	000000c4 alt_get_fd
00009b2c g     F .text	00000054 _close_r
00012b5c g     F .text	0000007c memcmp
00011684 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00016a58 g       *ABS*	00000000 __alt_stack_base
000116d4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000099d8 g     F .text	00000154 __swsetup_r
00002d08 g     F .text	000009d0 .hidden __divdf3
00005240 g     F .text	00000118 __sfp
0000cf04 g     F .text	00000078 __copybits
0001371c g     O .rwdata	00000408 __malloc_av_
0000538c g     F .text	00000004 __sinit_lock_release
000037b4 g     F .text	0000086c .hidden __muldf3
0000728c g     F .text	00000054 __sread
00005708 g     F .text	00000034 fread
0001249c g     F .text	00000108 alt_find_file
000122a8 g     F .text	000000a4 alt_dev_llist_insert
00010cd4 g     F .text	00000024 __malloc_lock
00011164 g     F .text	000000b0 sbrk
00004f84 g     F .text	0000005c _fflush_r
0000f0d4 g     F .text	000000dc _calloc_r
00010778 g     F .text	000001f4 gettimeofday
000054b4 g     F .text	00000018 fopen
000168e8 g       *ABS*	00000000 __bss_start
00006ce4 g     F .text	00000128 memset
0000136c g     F .text	00000124 displayProgress
00000d68 g     F .text	00000164 main
0001691c g     O .bss	00000004 alt_envp
000168ec g     O .bss	00000004 __malloc_max_total_mem
00011624 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000f0bc g     F .text	00000018 __swbuf
00006fcc g     F .text	00000018 srand
000054cc g     F .text	0000023c _fread_r
0000174c g     F .text	00000070 openMNISTLabelFile
000073c0 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00004d54 g     F .text	00000014 fclose
00009f28 g     F .text	00001688 _dtoa_r
00006390 g     F .text	0000080c _malloc_r
0000f514 g     F .text	00000030 __ascii_wctomb
00007574 g     F .text	00000050 time
00014ddc g     O .rwdata	00000004 alt_errno
0000604c g     F .text	000000c4 _fwalk
0000d0a8 g     F .text	000000c8 putc
00004a5c g     F .text	00000084 .hidden __divsi3
0000573c g     F .text	00000124 _malloc_trim_r
00012cf0 g       *ABS*	00000000 __CTOR_END__
00001e98 g     F .text	00000430 .hidden __mulsf3
0000d7a8 g     F .text	000000dc strcmp
00012cf0 g       *ABS*	00000000 __flash_rodata_start
00012cf0 g       *ABS*	00000000 __DTOR_LIST__
0001026c g     F .text	00000088 .hidden __nedf2
00001630 g     F .text	000000ac readLabelFileHeader
00011528 g     F .text	00000038 alt_irq_init
000110e0 g     F .text	00000084 alt_release_fd
00012ff6 g     O .rodata	00000100 .hidden __clz_tab
000168f8 g     O .bss	00000004 _PathLocale
00004c10 g     F .text	0000001c difftime
00012b48 g     F .text	00000014 atexit
00009978 g     F .text	00000060 _write_r
0000bc8c g     F .text	00000018 setlocale
00014db4 g     O .rwdata	00000004 _impure_ptr
00016914 g     O .bss	00000004 alt_argc
00004d68 g     F .text	0000021c __sflush_r
000123ac g     F .text	00000060 _do_dtors
0000bc78 g     F .text	00000008 __locale_cjk_lang
00005b70 g     F .text	00000004 _fseek_r
00007064 g     F .text	000001d4 __srefill_r
00000738 g     F .text	00000084 getCellError
00000020 g       .exceptions	00000000 alt_irq_entry
0000cb30 g     F .text	00000064 __ulp
000053a8 g     F .text	00000018 __fp_unlock_all
00014dc8 g     O .rwdata	00000008 alt_fs_list
000012ac g     F .text	000000c0 displayLoadingProgressTesting
0001690c g     O .bss	00000008 alt_resettime
00000b80 g     F .text	000001e8 testLayer
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000bca4 g     F .text	0000000c localeconv
00012688 g     F .text	00000050 alt_ic_isr_register
0000026c g     F .text	000000c8 getTargetOutput
00014df0 g       *ABS*	00000000 _edata
00016a58 g       *ABS*	00000000 _end
0000f1b0 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
00011afc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00000334 g     F .text	0000016c initLayer
00012760 g     F .text	0000008c alt_ic_irq_disable
000072e8 g     F .text	0000007c __swrite
00014dbc g     O .rwdata	00000004 __malloc_trim_threshold
0000bc6c g     F .text	0000000c __locale_msgcharset
00004c2c g     F .text	00000038 exit
00006110 g     F .text	000000c4 _fwalk_reent
0000c934 g     F .text	000001fc __mdiff
00004ae0 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005384 g     F .text	00000004 __sfp_lock_release
000053c0 g     F .text	000000f4 _fopen_r
00010650 g     F .text	00000034 _exit
00012120 g     F .text	0000012c alt_alarm_start
0000f5a0 g     F .text	0000010c .hidden __muldi3
000061d4 g     F .text	000001bc __smakebuf_r
000074dc g     F .text	00000098 strlen
00010e44 g     F .text	0000015c open
000036d8 g     F .text	000000dc .hidden __gedf2
000018ac g     F .text	00000034 clearScreen
00014dc4 g     O .rwdata	00000004 __wctomb
0000d980 g     F .text	00000018 __sprint_r
00012668 g     F .text	00000020 alt_icache_flush_all
00014dec g     O .rwdata	00000004 alt_priority_mask
000126d8 g     F .text	00000088 alt_ic_irq_enable
000098a0 g     F .text	0000001c __vfprintf_internal
0000f544 g     F .text	0000005c _wctomb_r
00004020 g     F .text	000008fc .hidden __subdf3
0000c2d4 g     F .text	000000b0 __lo0bits
00014de4 g     O .rwdata	00000008 alt_alarm_list
0001234c g     F .text	00000060 _do_ctors
0000f454 g     F .text	000000c0 wcrtomb
0001054c g     F .text	000000d8 close
00010abc g     F .text	00000084 alt_load
0000f338 g     F .text	00000080 fputwc
00005388 g     F .text	00000004 __sinit_lock_acquire
0000c020 g     F .text	00000148 __multadd
0000bff8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	109a5604 	addi	r2,r2,26968
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	109a5604 	addi	r2,r2,26968
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6e217 	ldw	r2,-25720(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6e217 	ldw	r2,-25720(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6b36914 	ori	gp,gp,52644
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	109a3a14 	ori	r2,r2,26856

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18da9614 	ori	r3,r3,27224

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	0010abc0 	call	10abc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	0010c580 	call	10c58 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffe0268>

0000026c <getTargetOutput>:

/**
 * @details Returns an output vector with targetIndex set to 1, all others to 0
 */

Vector getTargetOutput(int targetIndex){
     26c:	defff204 	addi	sp,sp,-56
     270:	df000d15 	stw	fp,52(sp)
     274:	df000d04 	addi	fp,sp,52
     278:	e13ffe15 	stw	r4,-8(fp)
     27c:	e17fff15 	stw	r5,-4(fp)
    Vector v;
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     280:	e03ff315 	stw	zero,-52(fp)
     284:	00000e06 	br	2c0 <getTargetOutput+0x54>
        v.val[i] = (i==targetIndex) ? 1 : 0;
     288:	e0fff317 	ldw	r3,-52(fp)
     28c:	e0bfff17 	ldw	r2,-4(fp)
     290:	1885003a 	cmpeq	r2,r3,r2
     294:	10c03fcc 	andi	r3,r2,255
     298:	e0bff317 	ldw	r2,-52(fp)
     29c:	1085883a 	add	r2,r2,r2
     2a0:	1085883a 	add	r2,r2,r2
     2a4:	e13ff304 	addi	r4,fp,-52
     2a8:	2085883a 	add	r2,r4,r2
     2ac:	10800104 	addi	r2,r2,4
     2b0:	10c00015 	stw	r3,0(r2)
 * @details Returns an output vector with targetIndex set to 1, all others to 0
 */

Vector getTargetOutput(int targetIndex){
    Vector v;
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     2b4:	e0bff317 	ldw	r2,-52(fp)
     2b8:	10800044 	addi	r2,r2,1
     2bc:	e0bff315 	stw	r2,-52(fp)
     2c0:	e0bff317 	ldw	r2,-52(fp)
     2c4:	10800290 	cmplti	r2,r2,10
     2c8:	103fef1e 	bne	r2,zero,288 <__alt_data_end+0xfffe0288>
        v.val[i] = (i==targetIndex) ? 1 : 0;
    }
    return v;
     2cc:	e0bffe17 	ldw	r2,-8(fp)
     2d0:	e0fff417 	ldw	r3,-48(fp)
     2d4:	10c00015 	stw	r3,0(r2)
     2d8:	e0fff517 	ldw	r3,-44(fp)
     2dc:	10c00115 	stw	r3,4(r2)
     2e0:	e0fff617 	ldw	r3,-40(fp)
     2e4:	10c00215 	stw	r3,8(r2)
     2e8:	e0fff717 	ldw	r3,-36(fp)
     2ec:	10c00315 	stw	r3,12(r2)
     2f0:	e0fff817 	ldw	r3,-32(fp)
     2f4:	10c00415 	stw	r3,16(r2)
     2f8:	e0fff917 	ldw	r3,-28(fp)
     2fc:	10c00515 	stw	r3,20(r2)
     300:	e0fffa17 	ldw	r3,-24(fp)
     304:	10c00615 	stw	r3,24(r2)
     308:	e0fffb17 	ldw	r3,-20(fp)
     30c:	10c00715 	stw	r3,28(r2)
     310:	e0fffc17 	ldw	r3,-16(fp)
     314:	10c00815 	stw	r3,32(r2)
     318:	e0fffd17 	ldw	r3,-12(fp)
     31c:	10c00915 	stw	r3,36(r2)
}
     320:	e0bffe17 	ldw	r2,-8(fp)
     324:	e037883a 	mov	sp,fp
     328:	df000017 	ldw	fp,0(sp)
     32c:	dec00104 	addi	sp,sp,4
     330:	f800283a 	ret

00000334 <initLayer>:
 * @attention It actually makes no difference whether the weights are
 * initialized to a constant (e.g. 0.5) or to a random number.
 * The result (85% success rate) will not change significantly.
 */

void initLayer(Layer *l){
     334:	defff804 	addi	sp,sp,-32
     338:	dfc00715 	stw	ra,28(sp)
     33c:	df000615 	stw	fp,24(sp)
     340:	dc800515 	stw	r18,20(sp)
     344:	dc400415 	stw	r17,16(sp)
     348:	dc000315 	stw	r16,12(sp)
     34c:	df000604 	addi	fp,sp,24
     350:	e13ffc15 	stw	r4,-16(fp)
    
    for (int o=0; o<NUMBER_OF_OUTPUT_CELLS; o++){
     354:	e03ffa15 	stw	zero,-24(fp)
     358:	00004506 	br	470 <initLayer+0x13c>
        
        for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     35c:	e03ffb15 	stw	zero,-20(fp)
     360:	00002b06 	br	410 <initLayer+0xdc>
            l->cell[o].input[i]=0;
     364:	e43ffc17 	ldw	r16,-16(fp)
     368:	e0bffa17 	ldw	r2,-24(fp)
     36c:	01418884 	movi	r5,1570
     370:	1009883a 	mov	r4,r2
     374:	0001a300 	call	1a30 <__mulsi3>
     378:	1007883a 	mov	r3,r2
     37c:	e0bffb17 	ldw	r2,-20(fp)
     380:	1885883a 	add	r2,r3,r2
     384:	100490fa 	slli	r2,r2,3
     388:	8085883a 	add	r2,r16,r2
     38c:	10000015 	stw	zero,0(r2)
     390:	10000115 	stw	zero,4(r2)
            l->cell[o].weight[i]=rand()/(double)(RAND_MAX);
     394:	0006fe40 	call	6fe4 <rand>
     398:	1009883a 	mov	r4,r2
     39c:	000491c0 	call	491c <__floatsidf>
     3a0:	1011883a 	mov	r8,r2
     3a4:	1813883a 	mov	r9,r3
     3a8:	01bff034 	movhi	r6,65472
     3ac:	01d07834 	movhi	r7,16864
     3b0:	39ffffc4 	addi	r7,r7,-1
     3b4:	4009883a 	mov	r4,r8
     3b8:	480b883a 	mov	r5,r9
     3bc:	0002d080 	call	2d08 <__divdf3>
     3c0:	1009883a 	mov	r4,r2
     3c4:	180b883a 	mov	r5,r3
     3c8:	2021883a 	mov	r16,r4
     3cc:	2823883a 	mov	r17,r5
     3d0:	e4bffc17 	ldw	r18,-16(fp)
     3d4:	e0bffa17 	ldw	r2,-24(fp)
     3d8:	01418884 	movi	r5,1570
     3dc:	1009883a 	mov	r4,r2
     3e0:	0001a300 	call	1a30 <__mulsi3>
     3e4:	1007883a 	mov	r3,r2
     3e8:	e0bffb17 	ldw	r2,-20(fp)
     3ec:	1885883a 	add	r2,r3,r2
     3f0:	1080c404 	addi	r2,r2,784
     3f4:	100490fa 	slli	r2,r2,3
     3f8:	9085883a 	add	r2,r18,r2
     3fc:	14000015 	stw	r16,0(r2)
     400:	14400115 	stw	r17,4(r2)

void initLayer(Layer *l){
    
    for (int o=0; o<NUMBER_OF_OUTPUT_CELLS; o++){
        
        for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     404:	e0bffb17 	ldw	r2,-20(fp)
     408:	10800044 	addi	r2,r2,1
     40c:	e0bffb15 	stw	r2,-20(fp)
     410:	e0bffb17 	ldw	r2,-20(fp)
     414:	1080c410 	cmplti	r2,r2,784
     418:	103fd21e 	bne	r2,zero,364 <__alt_data_end+0xfffe0364>
            l->cell[o].input[i]=0;
            l->cell[o].weight[i]=rand()/(double)(RAND_MAX);
        }
        
        l->cell[o].output = 0;
     41c:	e43ffc17 	ldw	r16,-16(fp)
     420:	e0bffa17 	ldw	r2,-24(fp)
     424:	014c4404 	movi	r5,12560
     428:	1009883a 	mov	r4,r2
     42c:	0001a300 	call	1a30 <__mulsi3>
     430:	8085883a 	add	r2,r16,r2
     434:	108c4004 	addi	r2,r2,12544
     438:	10000015 	stw	zero,0(r2)
     43c:	10000115 	stw	zero,4(r2)
        l->cell[o].bias = 0;
     440:	e43ffc17 	ldw	r16,-16(fp)
     444:	e0bffa17 	ldw	r2,-24(fp)
     448:	014c4404 	movi	r5,12560
     44c:	1009883a 	mov	r4,r2
     450:	0001a300 	call	1a30 <__mulsi3>
     454:	8085883a 	add	r2,r16,r2
     458:	108c4204 	addi	r2,r2,12552
     45c:	10000015 	stw	zero,0(r2)
     460:	10000115 	stw	zero,4(r2)
 * The result (85% success rate) will not change significantly.
 */

void initLayer(Layer *l){
    
    for (int o=0; o<NUMBER_OF_OUTPUT_CELLS; o++){
     464:	e0bffa17 	ldw	r2,-24(fp)
     468:	10800044 	addi	r2,r2,1
     46c:	e0bffa15 	stw	r2,-24(fp)
     470:	e0bffa17 	ldw	r2,-24(fp)
     474:	10800290 	cmplti	r2,r2,10
     478:	103fb81e 	bne	r2,zero,35c <__alt_data_end+0xfffe035c>
        }
        
        l->cell[o].output = 0;
        l->cell[o].bias = 0;
    }
}
     47c:	0001883a 	nop
     480:	e6fffd04 	addi	sp,fp,-12
     484:	dfc00417 	ldw	ra,16(sp)
     488:	df000317 	ldw	fp,12(sp)
     48c:	dc800217 	ldw	r18,8(sp)
     490:	dc400117 	ldw	r17,4(sp)
     494:	dc000017 	ldw	r16,0(sp)
     498:	dec00504 	addi	sp,sp,20
     49c:	f800283a 	ret

000004a0 <getLayerPrediction>:
/**
 * @details The output prediction is derived by simply sorting all output values
 * and using the index (=0-9 number) of the highest value as the prediction.
 */

int getLayerPrediction(Layer *l){
     4a0:	defff804 	addi	sp,sp,-32
     4a4:	dfc00715 	stw	ra,28(sp)
     4a8:	df000615 	stw	fp,24(sp)
     4ac:	dc000515 	stw	r16,20(sp)
     4b0:	df000604 	addi	fp,sp,24
     4b4:	e13ffe15 	stw	r4,-8(fp)
    
    double maxOut = 0;
     4b8:	e03ffa15 	stw	zero,-24(fp)
     4bc:	e03ffb15 	stw	zero,-20(fp)
    int maxInd = 0;
     4c0:	e03ffc15 	stw	zero,-16(fp)
    
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     4c4:	e03ffd15 	stw	zero,-12(fp)
     4c8:	00001f06 	br	548 <getLayerPrediction+0xa8>
        
        if (l->cell[i].output > maxOut){
     4cc:	e43ffe17 	ldw	r16,-8(fp)
     4d0:	e0bffd17 	ldw	r2,-12(fp)
     4d4:	014c4404 	movi	r5,12560
     4d8:	1009883a 	mov	r4,r2
     4dc:	0001a300 	call	1a30 <__mulsi3>
     4e0:	8085883a 	add	r2,r16,r2
     4e4:	110c4004 	addi	r4,r2,12544
     4e8:	20800017 	ldw	r2,0(r4)
     4ec:	20c00117 	ldw	r3,4(r4)
     4f0:	e1bffa17 	ldw	r6,-24(fp)
     4f4:	e1fffb17 	ldw	r7,-20(fp)
     4f8:	1009883a 	mov	r4,r2
     4fc:	180b883a 	mov	r5,r3
     500:	00036d80 	call	36d8 <__gedf2>
     504:	00800d0e 	bge	zero,r2,53c <getLayerPrediction+0x9c>
            maxOut = l->cell[i].output;
     508:	e43ffe17 	ldw	r16,-8(fp)
     50c:	e0bffd17 	ldw	r2,-12(fp)
     510:	014c4404 	movi	r5,12560
     514:	1009883a 	mov	r4,r2
     518:	0001a300 	call	1a30 <__mulsi3>
     51c:	8085883a 	add	r2,r16,r2
     520:	108c4004 	addi	r2,r2,12544
     524:	10c00017 	ldw	r3,0(r2)
     528:	e0fffa15 	stw	r3,-24(fp)
     52c:	10800117 	ldw	r2,4(r2)
     530:	e0bffb15 	stw	r2,-20(fp)
            maxInd = i;
     534:	e0bffd17 	ldw	r2,-12(fp)
     538:	e0bffc15 	stw	r2,-16(fp)
int getLayerPrediction(Layer *l){
    
    double maxOut = 0;
    int maxInd = 0;
    
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     53c:	e0bffd17 	ldw	r2,-12(fp)
     540:	10800044 	addi	r2,r2,1
     544:	e0bffd15 	stw	r2,-12(fp)
     548:	e0bffd17 	ldw	r2,-12(fp)
     54c:	10800290 	cmplti	r2,r2,10
     550:	103fde1e 	bne	r2,zero,4cc <__alt_data_end+0xfffe04cc>
            maxOut = l->cell[i].output;
            maxInd = i;
        }
    }
    
    return maxInd;
     554:	e0bffc17 	ldw	r2,-16(fp)
    
}
     558:	e6ffff04 	addi	sp,fp,-4
     55c:	dfc00217 	ldw	ra,8(sp)
     560:	df000117 	ldw	fp,4(sp)
     564:	dc000017 	ldw	r16,0(sp)
     568:	dec00304 	addi	sp,sp,12
     56c:	f800283a 	ret

00000570 <setCellInput>:
 * of a given MNIST image, setting input vector cells to [0,1]
 * based on the pixels of the image.
 * Scalar pixel intensity [=grey-scale] is ignored, only 0 or 1 [=black-white].
 */

void setCellInput(Cell *c, MNIST_Image *img){
     570:	defffc04 	addi	sp,sp,-16
     574:	df000315 	stw	fp,12(sp)
     578:	df000304 	addi	fp,sp,12
     57c:	e13ffe15 	stw	r4,-8(fp)
     580:	e17fff15 	stw	r5,-4(fp)
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     584:	e03ffd15 	stw	zero,-12(fp)
     588:	00001406 	br	5dc <setCellInput+0x6c>
        c->input[i] = img->pixel[i] ? 1 : 0;
     58c:	e0ffff17 	ldw	r3,-4(fp)
     590:	e0bffd17 	ldw	r2,-12(fp)
     594:	1885883a 	add	r2,r3,r2
     598:	10800003 	ldbu	r2,0(r2)
     59c:	10803fcc 	andi	r2,r2,255
     5a0:	10000326 	beq	r2,zero,5b0 <setCellInput+0x40>
     5a4:	0005883a 	mov	r2,zero
     5a8:	00cffc34 	movhi	r3,16368
     5ac:	00000206 	br	5b8 <setCellInput+0x48>
     5b0:	0005883a 	mov	r2,zero
     5b4:	0007883a 	mov	r3,zero
     5b8:	e17ffe17 	ldw	r5,-8(fp)
     5bc:	e13ffd17 	ldw	r4,-12(fp)
     5c0:	200890fa 	slli	r4,r4,3
     5c4:	2909883a 	add	r4,r5,r4
     5c8:	20800015 	stw	r2,0(r4)
     5cc:	20c00115 	stw	r3,4(r4)
 * Scalar pixel intensity [=grey-scale] is ignored, only 0 or 1 [=black-white].
 */

void setCellInput(Cell *c, MNIST_Image *img){
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     5d0:	e0bffd17 	ldw	r2,-12(fp)
     5d4:	10800044 	addi	r2,r2,1
     5d8:	e0bffd15 	stw	r2,-12(fp)
     5dc:	e0bffd17 	ldw	r2,-12(fp)
     5e0:	1080c410 	cmplti	r2,r2,784
     5e4:	103fe91e 	bne	r2,zero,58c <__alt_data_end+0xfffe058c>
        c->input[i] = img->pixel[i] ? 1 : 0;
    }
}
     5e8:	0001883a 	nop
     5ec:	e037883a 	mov	sp,fp
     5f0:	df000017 	ldw	fp,0(sp)
     5f4:	dec00104 	addi	sp,sp,4
     5f8:	f800283a 	ret

000005fc <calcCellOutput>:
/**
 * @details Calculates a cell's output by suming all input-weight-products
 * and normalizes to [0-1].
 */

void calcCellOutput(Cell *c){
     5fc:	defffa04 	addi	sp,sp,-24
     600:	dfc00515 	stw	ra,20(sp)
     604:	df000415 	stw	fp,16(sp)
     608:	dc400315 	stw	r17,12(sp)
     60c:	dc000215 	stw	r16,8(sp)
     610:	df000404 	addi	fp,sp,16
     614:	e13ffd15 	stw	r4,-12(fp)
    
    c->output=0;
     618:	e0bffd17 	ldw	r2,-12(fp)
     61c:	100c4015 	stw	zero,12544(r2)
     620:	100c4115 	stw	zero,12548(r2)
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     624:	e03ffc15 	stw	zero,-16(fp)
     628:	00002806 	br	6cc <calcCellOutput+0xd0>
        c->output += c->input[i] * c->weight[i];
     62c:	e0bffd17 	ldw	r2,-12(fp)
     630:	140c4017 	ldw	r16,12544(r2)
     634:	144c4117 	ldw	r17,12548(r2)
     638:	e0fffd17 	ldw	r3,-12(fp)
     63c:	e0bffc17 	ldw	r2,-16(fp)
     640:	100490fa 	slli	r2,r2,3
     644:	1889883a 	add	r4,r3,r2
     648:	20800017 	ldw	r2,0(r4)
     64c:	20c00117 	ldw	r3,4(r4)
     650:	e17ffd17 	ldw	r5,-12(fp)
     654:	e13ffc17 	ldw	r4,-16(fp)
     658:	2100c404 	addi	r4,r4,784
     65c:	200890fa 	slli	r4,r4,3
     660:	290d883a 	add	r6,r5,r4
     664:	31000017 	ldw	r4,0(r6)
     668:	31400117 	ldw	r5,4(r6)
     66c:	200d883a 	mov	r6,r4
     670:	280f883a 	mov	r7,r5
     674:	1009883a 	mov	r4,r2
     678:	180b883a 	mov	r5,r3
     67c:	00037b40 	call	37b4 <__muldf3>
     680:	1009883a 	mov	r4,r2
     684:	180b883a 	mov	r5,r3
     688:	2005883a 	mov	r2,r4
     68c:	2807883a 	mov	r3,r5
     690:	100d883a 	mov	r6,r2
     694:	180f883a 	mov	r7,r3
     698:	8009883a 	mov	r4,r16
     69c:	880b883a 	mov	r5,r17
     6a0:	000245c0 	call	245c <__adddf3>
     6a4:	1009883a 	mov	r4,r2
     6a8:	180b883a 	mov	r5,r3
     6ac:	2005883a 	mov	r2,r4
     6b0:	2807883a 	mov	r3,r5
     6b4:	e13ffd17 	ldw	r4,-12(fp)
     6b8:	208c4015 	stw	r2,12544(r4)
     6bc:	20cc4115 	stw	r3,12548(r4)

void calcCellOutput(Cell *c){
    
    c->output=0;
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     6c0:	e0bffc17 	ldw	r2,-16(fp)
     6c4:	10800044 	addi	r2,r2,1
     6c8:	e0bffc15 	stw	r2,-16(fp)
     6cc:	e0bffc17 	ldw	r2,-16(fp)
     6d0:	1080c410 	cmplti	r2,r2,784
     6d4:	103fd51e 	bne	r2,zero,62c <__alt_data_end+0xfffe062c>
        c->output += c->input[i] * c->weight[i];
    }
    
    c->output /= NUMBER_OF_INPUT_CELLS;             // normalize output (0-1)
     6d8:	e13ffd17 	ldw	r4,-12(fp)
     6dc:	208c4017 	ldw	r2,12544(r4)
     6e0:	20cc4117 	ldw	r3,12548(r4)
     6e4:	000d883a 	mov	r6,zero
     6e8:	01d02274 	movhi	r7,16521
     6ec:	39e00004 	addi	r7,r7,-32768
     6f0:	1009883a 	mov	r4,r2
     6f4:	180b883a 	mov	r5,r3
     6f8:	0002d080 	call	2d08 <__divdf3>
     6fc:	1009883a 	mov	r4,r2
     700:	180b883a 	mov	r5,r3
     704:	2005883a 	mov	r2,r4
     708:	2807883a 	mov	r3,r5
     70c:	e13ffd17 	ldw	r4,-12(fp)
     710:	208c4015 	stw	r2,12544(r4)
     714:	20cc4115 	stw	r3,12548(r4)
}
     718:	0001883a 	nop
     71c:	e6fffe04 	addi	sp,fp,-8
     720:	dfc00317 	ldw	ra,12(sp)
     724:	df000217 	ldw	fp,8(sp)
     728:	dc400117 	ldw	r17,4(sp)
     72c:	dc000017 	ldw	r16,0(sp)
     730:	dec00404 	addi	sp,sp,16
     734:	f800283a 	ret

00000738 <getCellError>:

/**
 * @details Returns the difference between a target value and the cell's ouput
 */

double getCellError(Cell *c, int target){
     738:	defffa04 	addi	sp,sp,-24
     73c:	dfc00515 	stw	ra,20(sp)
     740:	df000415 	stw	fp,16(sp)
     744:	df000404 	addi	fp,sp,16
     748:	e13ffe15 	stw	r4,-8(fp)
     74c:	e17fff15 	stw	r5,-4(fp)

    double err = target - c->output;
     750:	e13fff17 	ldw	r4,-4(fp)
     754:	000491c0 	call	491c <__floatsidf>
     758:	1011883a 	mov	r8,r2
     75c:	1813883a 	mov	r9,r3
     760:	e13ffe17 	ldw	r4,-8(fp)
     764:	208c4017 	ldw	r2,12544(r4)
     768:	20cc4117 	ldw	r3,12548(r4)
     76c:	100d883a 	mov	r6,r2
     770:	180f883a 	mov	r7,r3
     774:	4009883a 	mov	r4,r8
     778:	480b883a 	mov	r5,r9
     77c:	00040200 	call	4020 <__subdf3>
     780:	1009883a 	mov	r4,r2
     784:	180b883a 	mov	r5,r3
     788:	e13ffc15 	stw	r4,-16(fp)
     78c:	e17ffd15 	stw	r5,-12(fp)

    return err;
     790:	e0bffc17 	ldw	r2,-16(fp)
     794:	e0fffd17 	ldw	r3,-12(fp)
     798:	1009883a 	mov	r4,r2
     79c:	180b883a 	mov	r5,r3
}
     7a0:	2005883a 	mov	r2,r4
     7a4:	2807883a 	mov	r3,r5
     7a8:	e037883a 	mov	sp,fp
     7ac:	dfc00117 	ldw	ra,4(sp)
     7b0:	df000017 	ldw	fp,0(sp)
     7b4:	dec00204 	addi	sp,sp,8
     7b8:	f800283a 	ret

000007bc <updateCellWeights>:

/**
 * @details Updates a cell's weights based on given error and LEARNING_RATE
 */

void updateCellWeights(Cell *c, double err){
     7bc:	defff804 	addi	sp,sp,-32
     7c0:	dfc00715 	stw	ra,28(sp)
     7c4:	df000615 	stw	fp,24(sp)
     7c8:	dc400515 	stw	r17,20(sp)
     7cc:	dc000415 	stw	r16,16(sp)
     7d0:	df000604 	addi	fp,sp,24
     7d4:	e13ffb15 	stw	r4,-20(fp)
     7d8:	e17ffc15 	stw	r5,-16(fp)
     7dc:	e1bffd15 	stw	r6,-12(fp)
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     7e0:	e03ffa15 	stw	zero,-24(fp)
     7e4:	00003406 	br	8b8 <updateCellWeights+0xfc>
        c->weight[i] += LEARNING_RATE * c->input[i] * err;
     7e8:	e0fffb17 	ldw	r3,-20(fp)
     7ec:	e0bffa17 	ldw	r2,-24(fp)
     7f0:	1080c404 	addi	r2,r2,784
     7f4:	100490fa 	slli	r2,r2,3
     7f8:	1885883a 	add	r2,r3,r2
     7fc:	14000017 	ldw	r16,0(r2)
     800:	14400117 	ldw	r17,4(r2)
     804:	e0fffb17 	ldw	r3,-20(fp)
     808:	e0bffa17 	ldw	r2,-24(fp)
     80c:	100490fa 	slli	r2,r2,3
     810:	1889883a 	add	r4,r3,r2
     814:	20800017 	ldw	r2,0(r4)
     818:	20c00117 	ldw	r3,4(r4)
     81c:	01a666b4 	movhi	r6,39322
     820:	31a66684 	addi	r6,r6,-26214
     824:	01cfeab4 	movhi	r7,16298
     828:	39e66644 	addi	r7,r7,-26215
     82c:	1009883a 	mov	r4,r2
     830:	180b883a 	mov	r5,r3
     834:	00037b40 	call	37b4 <__muldf3>
     838:	1009883a 	mov	r4,r2
     83c:	180b883a 	mov	r5,r3
     840:	2005883a 	mov	r2,r4
     844:	2807883a 	mov	r3,r5
     848:	e1bffc17 	ldw	r6,-16(fp)
     84c:	e1fffd17 	ldw	r7,-12(fp)
     850:	1009883a 	mov	r4,r2
     854:	180b883a 	mov	r5,r3
     858:	00037b40 	call	37b4 <__muldf3>
     85c:	1009883a 	mov	r4,r2
     860:	180b883a 	mov	r5,r3
     864:	2005883a 	mov	r2,r4
     868:	2807883a 	mov	r3,r5
     86c:	100d883a 	mov	r6,r2
     870:	180f883a 	mov	r7,r3
     874:	8009883a 	mov	r4,r16
     878:	880b883a 	mov	r5,r17
     87c:	000245c0 	call	245c <__adddf3>
     880:	1009883a 	mov	r4,r2
     884:	180b883a 	mov	r5,r3
     888:	2005883a 	mov	r2,r4
     88c:	2807883a 	mov	r3,r5
     890:	e17ffb17 	ldw	r5,-20(fp)
     894:	e13ffa17 	ldw	r4,-24(fp)
     898:	2100c404 	addi	r4,r4,784
     89c:	200890fa 	slli	r4,r4,3
     8a0:	2909883a 	add	r4,r5,r4
     8a4:	20800015 	stw	r2,0(r4)
     8a8:	20c00115 	stw	r3,4(r4)
 * @details Updates a cell's weights based on given error and LEARNING_RATE
 */

void updateCellWeights(Cell *c, double err){
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     8ac:	e0bffa17 	ldw	r2,-24(fp)
     8b0:	10800044 	addi	r2,r2,1
     8b4:	e0bffa15 	stw	r2,-24(fp)
     8b8:	e0bffa17 	ldw	r2,-24(fp)
     8bc:	1080c410 	cmplti	r2,r2,784
     8c0:	103fc91e 	bne	r2,zero,7e8 <__alt_data_end+0xfffe07e8>
        c->weight[i] += LEARNING_RATE * c->input[i] * err;
    }
}
     8c4:	0001883a 	nop
     8c8:	e6fffe04 	addi	sp,fp,-8
     8cc:	dfc00317 	ldw	ra,12(sp)
     8d0:	df000217 	ldw	fp,8(sp)
     8d4:	dc400117 	ldw	r17,4(sp)
     8d8:	dc000017 	ldw	r16,0(sp)
     8dc:	dec00404 	addi	sp,sp,16
     8e0:	f800283a 	ret

000008e4 <trainCell>:
/**
 * @details Performs the training algorithm:
 * feeding input, calculate output, calculate error, update weights)
 */

void trainCell(Cell *c, MNIST_Image *img, int target){
     8e4:	defff904 	addi	sp,sp,-28
     8e8:	dfc00615 	stw	ra,24(sp)
     8ec:	df000515 	stw	fp,20(sp)
     8f0:	df000504 	addi	fp,sp,20
     8f4:	e13ffd15 	stw	r4,-12(fp)
     8f8:	e17ffe15 	stw	r5,-8(fp)
     8fc:	e1bfff15 	stw	r6,-4(fp)
    
    setCellInput(c, img);
     900:	e17ffe17 	ldw	r5,-8(fp)
     904:	e13ffd17 	ldw	r4,-12(fp)
     908:	00005700 	call	570 <setCellInput>
    calcCellOutput(c);
     90c:	e13ffd17 	ldw	r4,-12(fp)
     910:	00005fc0 	call	5fc <calcCellOutput>
    
    // learning (by updating the weights)
    double err = getCellError(c, target);
     914:	e17fff17 	ldw	r5,-4(fp)
     918:	e13ffd17 	ldw	r4,-12(fp)
     91c:	00007380 	call	738 <getCellError>
     920:	e0bffb15 	stw	r2,-20(fp)
     924:	e0fffc15 	stw	r3,-16(fp)
    updateCellWeights(c, err);
     928:	e17ffb17 	ldw	r5,-20(fp)
     92c:	e1bffc17 	ldw	r6,-16(fp)
     930:	e13ffd17 	ldw	r4,-12(fp)
     934:	00007bc0 	call	7bc <updateCellWeights>
}
     938:	0001883a 	nop
     93c:	e037883a 	mov	sp,fp
     940:	dfc00117 	ldw	ra,4(sp)
     944:	df000017 	ldw	fp,0(sp)
     948:	dec00204 	addi	sp,sp,8
     94c:	f800283a 	ret

00000950 <testCell>:
/**
 * @details Performs the testing of the trained network
 * Same as training a cell, but without updating weights (learning)
 */

void testCell(Cell *c, MNIST_Image *img, int target){
     950:	defffb04 	addi	sp,sp,-20
     954:	dfc00415 	stw	ra,16(sp)
     958:	df000315 	stw	fp,12(sp)
     95c:	df000304 	addi	fp,sp,12
     960:	e13ffd15 	stw	r4,-12(fp)
     964:	e17ffe15 	stw	r5,-8(fp)
     968:	e1bfff15 	stw	r6,-4(fp)
    
    setCellInput(c, img);
     96c:	e17ffe17 	ldw	r5,-8(fp)
     970:	e13ffd17 	ldw	r4,-12(fp)
     974:	00005700 	call	570 <setCellInput>
    calcCellOutput(c);
     978:	e13ffd17 	ldw	r4,-12(fp)
     97c:	00005fc0 	call	5fc <calcCellOutput>
    
}
     980:	0001883a 	nop
     984:	e037883a 	mov	sp,fp
     988:	dfc00117 	ldw	ra,4(sp)
     98c:	df000017 	ldw	fp,0(sp)
     990:	dec00204 	addi	sp,sp,8
     994:	f800283a 	ret

00000998 <trainLayer>:
/**
 * @details Trains a layer by looping through and training its cells
 * @param l A pointer to the layer that is to be training
 */

void trainLayer(Layer *l){
     998:	deff1e04 	addi	sp,sp,-904
     99c:	dfc0e115 	stw	ra,900(sp)
     9a0:	df00e015 	stw	fp,896(sp)
     9a4:	df00e004 	addi	fp,sp,896
     9a8:	e13ff515 	stw	r4,-44(fp)
    
    // open MNIST files
    FILE *imageFile, *labelFile;
    imageFile = openMNISTImageFile(MNIST_TRAINING_SET_IMAGE_FILE_NAME);
     9ac:	01000074 	movhi	r4,1
     9b0:	210b3c04 	addi	r4,r4,11504
     9b4:	00016dc0 	call	16dc <openMNISTImageFile>
     9b8:	e0bf2315 	stw	r2,-884(fp)
    labelFile = openMNISTLabelFile(MNIST_TRAINING_SET_LABEL_FILE_NAME);
     9bc:	01000074 	movhi	r4,1
     9c0:	210b4404 	addi	r4,r4,11536
     9c4:	000174c0 	call	174c <openMNISTLabelFile>
     9c8:	e0bf2415 	stw	r2,-880(fp)
    
    
    // screen output for monitoring progress
    displayImageFrame(5,5);
     9cc:	01400144 	movi	r5,5
     9d0:	01000144 	movi	r4,5
     9d4:	0000ecc0 	call	ecc <displayImageFrame>

    int errCount = 0;
     9d8:	e03f2015 	stw	zero,-896(fp)
    
    // Loop through all images in the file
    for (int imgCount=0; imgCount<MNIST_MAX_TRAINING_IMAGES; imgCount++){
     9dc:	e03f2115 	stw	zero,-892(fp)
     9e0:	00005a06 	br	b4c <trainLayer+0x1b4>
        
        // display progress
        displayLoadingProgressTraining(imgCount,3,5);
     9e4:	01800144 	movi	r6,5
     9e8:	014000c4 	movi	r5,3
     9ec:	e13f2117 	ldw	r4,-892(fp)
     9f0:	00011ec0 	call	11ec <displayLoadingProgressTraining>
        
        // Reading next image and corresponding label
        MNIST_Image img = getImage(imageFile);
     9f4:	e0bf2704 	addi	r2,fp,-868
     9f8:	e17f2317 	ldw	r5,-884(fp)
     9fc:	1009883a 	mov	r4,r2
     a00:	00017bc0 	call	17bc <getImage>
        MNIST_Label lbl = getLabel(labelFile);
     a04:	e13f2417 	ldw	r4,-880(fp)
     a08:	00018440 	call	1844 <getLabel>
     a0c:	e0bf2505 	stb	r2,-876(fp)
        
        // set target ouput of the number displayed in the current image (=label) to 1, all others to 0
        Vector targetOutput;
        targetOutput = getTargetOutput(lbl);
     a10:	e0ff2503 	ldbu	r3,-876(fp)
     a14:	e0bff604 	addi	r2,fp,-40
     a18:	180b883a 	mov	r5,r3
     a1c:	1009883a 	mov	r4,r2
     a20:	000026c0 	call	26c <getTargetOutput>
     a24:	e0bff617 	ldw	r2,-40(fp)
     a28:	e0bfeb15 	stw	r2,-84(fp)
     a2c:	e0bff717 	ldw	r2,-36(fp)
     a30:	e0bfec15 	stw	r2,-80(fp)
     a34:	e0bff817 	ldw	r2,-32(fp)
     a38:	e0bfed15 	stw	r2,-76(fp)
     a3c:	e0bff917 	ldw	r2,-28(fp)
     a40:	e0bfee15 	stw	r2,-72(fp)
     a44:	e0bffa17 	ldw	r2,-24(fp)
     a48:	e0bfef15 	stw	r2,-68(fp)
     a4c:	e0bffb17 	ldw	r2,-20(fp)
     a50:	e0bff015 	stw	r2,-64(fp)
     a54:	e0bffc17 	ldw	r2,-16(fp)
     a58:	e0bff115 	stw	r2,-60(fp)
     a5c:	e0bffd17 	ldw	r2,-12(fp)
     a60:	e0bff215 	stw	r2,-56(fp)
     a64:	e0bffe17 	ldw	r2,-8(fp)
     a68:	e0bff315 	stw	r2,-52(fp)
     a6c:	e0bfff17 	ldw	r2,-4(fp)
     a70:	e0bff415 	stw	r2,-48(fp)
        
        displayImage(&img, 6,6);
     a74:	e0bf2704 	addi	r2,fp,-868
     a78:	01800184 	movi	r6,6
     a7c:	01400184 	movi	r5,6
     a80:	1009883a 	mov	r4,r2
     a84:	0000fb40 	call	fb4 <displayImage>
     
        // loop through all output cells for the given image
        for (int i=0; i < NUMBER_OF_OUTPUT_CELLS; i++){
     a88:	e03f2215 	stw	zero,-888(fp)
     a8c:	00001506 	br	ae4 <trainLayer+0x14c>
            trainCell(&l->cell[i], &img, targetOutput.val[i]);
     a90:	014c4404 	movi	r5,12560
     a94:	e13f2217 	ldw	r4,-888(fp)
     a98:	0001a300 	call	1a30 <__mulsi3>
     a9c:	1007883a 	mov	r3,r2
     aa0:	e0bff517 	ldw	r2,-44(fp)
     aa4:	10c7883a 	add	r3,r2,r3
     aa8:	e0bf2217 	ldw	r2,-888(fp)
     aac:	1085883a 	add	r2,r2,r2
     ab0:	1085883a 	add	r2,r2,r2
     ab4:	e13f2004 	addi	r4,fp,-896
     ab8:	2085883a 	add	r2,r4,r2
     abc:	1080cb04 	addi	r2,r2,812
     ac0:	11000017 	ldw	r4,0(r2)
     ac4:	e0bf2704 	addi	r2,fp,-868
     ac8:	200d883a 	mov	r6,r4
     acc:	100b883a 	mov	r5,r2
     ad0:	1809883a 	mov	r4,r3
     ad4:	00008e40 	call	8e4 <trainCell>
        targetOutput = getTargetOutput(lbl);
        
        displayImage(&img, 6,6);
     
        // loop through all output cells for the given image
        for (int i=0; i < NUMBER_OF_OUTPUT_CELLS; i++){
     ad8:	e0bf2217 	ldw	r2,-888(fp)
     adc:	10800044 	addi	r2,r2,1
     ae0:	e0bf2215 	stw	r2,-888(fp)
     ae4:	e0bf2217 	ldw	r2,-888(fp)
     ae8:	10800290 	cmplti	r2,r2,10
     aec:	103fe81e 	bne	r2,zero,a90 <__alt_data_end+0xfffe0a90>
            trainCell(&l->cell[i], &img, targetOutput.val[i]);
        }
        
        int predictedNum = getLayerPrediction(l);
     af0:	e13ff517 	ldw	r4,-44(fp)
     af4:	00004a00 	call	4a0 <getLayerPrediction>
     af8:	e0bf2615 	stw	r2,-872(fp)
        if (predictedNum!=lbl) errCount++;
     afc:	e0ff2503 	ldbu	r3,-876(fp)
     b00:	e0bf2617 	ldw	r2,-872(fp)
     b04:	18800326 	beq	r3,r2,b14 <trainLayer+0x17c>
     b08:	e0bf2017 	ldw	r2,-896(fp)
     b0c:	10800044 	addi	r2,r2,1
     b10:	e0bf2015 	stw	r2,-896(fp)
        
        printf("\n      Prediction: %d   Actual: %d ",predictedNum, lbl);
     b14:	e0bf2503 	ldbu	r2,-876(fp)
     b18:	100d883a 	mov	r6,r2
     b1c:	e17f2617 	ldw	r5,-872(fp)
     b20:	01000074 	movhi	r4,1
     b24:	210b4c04 	addi	r4,r4,11568
     b28:	0006e9c0 	call	6e9c <printf>

        displayProgress(imgCount, errCount, 3, 66);
     b2c:	01c01084 	movi	r7,66
     b30:	018000c4 	movi	r6,3
     b34:	e17f2017 	ldw	r5,-896(fp)
     b38:	e13f2117 	ldw	r4,-892(fp)
     b3c:	000136c0 	call	136c <displayProgress>
    displayImageFrame(5,5);

    int errCount = 0;
    
    // Loop through all images in the file
    for (int imgCount=0; imgCount<MNIST_MAX_TRAINING_IMAGES; imgCount++){
     b40:	e0bf2117 	ldw	r2,-892(fp)
     b44:	10800044 	addi	r2,r2,1
     b48:	e0bf2115 	stw	r2,-892(fp)
     b4c:	e0bf2117 	ldw	r2,-892(fp)
     b50:	00fa97d4 	movui	r3,59999
     b54:	18bfa30e 	bge	r3,r2,9e4 <__alt_data_end+0xfffe09e4>
        displayProgress(imgCount, errCount, 3, 66);
        
    }
    
    // Close files
    fclose(imageFile);
     b58:	e13f2317 	ldw	r4,-884(fp)
     b5c:	0004d540 	call	4d54 <fclose>
    fclose(labelFile);
     b60:	e13f2417 	ldw	r4,-880(fp)
     b64:	0004d540 	call	4d54 <fclose>

}
     b68:	0001883a 	nop
     b6c:	e037883a 	mov	sp,fp
     b70:	dfc00117 	ldw	ra,4(sp)
     b74:	df000017 	ldw	fp,0(sp)
     b78:	dec00204 	addi	sp,sp,8
     b7c:	f800283a 	ret

00000b80 <testLayer>:
 * @details Tests a layer by looping through and testing its cells
 * Exactly the same as TrainLayer() but WITHOUT LEARNING.
 * @param l A pointer to the layer that is to be training
 */

void testLayer(Layer *l){
     b80:	deff1e04 	addi	sp,sp,-904
     b84:	dfc0e115 	stw	ra,900(sp)
     b88:	df00e015 	stw	fp,896(sp)
     b8c:	df00e004 	addi	fp,sp,896
     b90:	e13ff515 	stw	r4,-44(fp)
    
    // open MNIST files
    FILE *imageFile, *labelFile;
    imageFile = openMNISTImageFile(MNIST_TESTING_SET_IMAGE_FILE_NAME);
     b94:	01000074 	movhi	r4,1
     b98:	210b5504 	addi	r4,r4,11604
     b9c:	00016dc0 	call	16dc <openMNISTImageFile>
     ba0:	e0bf2315 	stw	r2,-884(fp)
    labelFile = openMNISTLabelFile(MNIST_TESTING_SET_LABEL_FILE_NAME);
     ba4:	01000074 	movhi	r4,1
     ba8:	210b5c04 	addi	r4,r4,11632
     bac:	000174c0 	call	174c <openMNISTLabelFile>
     bb0:	e0bf2415 	stw	r2,-880(fp)
    
    
    // screen output for monitoring progress
    displayImageFrame(7,5);
     bb4:	01400144 	movi	r5,5
     bb8:	010001c4 	movi	r4,7
     bbc:	0000ecc0 	call	ecc <displayImageFrame>
    
    int errCount = 0;
     bc0:	e03f2015 	stw	zero,-896(fp)
    
    // Loop through all images in the file
    for (int imgCount=0; imgCount<MNIST_MAX_TESTING_IMAGES; imgCount++){
     bc4:	e03f2115 	stw	zero,-892(fp)
     bc8:	00005a06 	br	d34 <testLayer+0x1b4>
        
        // display progress
        displayLoadingProgressTesting(imgCount,5,5);
     bcc:	01800144 	movi	r6,5
     bd0:	01400144 	movi	r5,5
     bd4:	e13f2117 	ldw	r4,-892(fp)
     bd8:	00012ac0 	call	12ac <displayLoadingProgressTesting>
        
        // Reading next image and corresponding label
        MNIST_Image img = getImage(imageFile);
     bdc:	e0bf2704 	addi	r2,fp,-868
     be0:	e17f2317 	ldw	r5,-884(fp)
     be4:	1009883a 	mov	r4,r2
     be8:	00017bc0 	call	17bc <getImage>
        MNIST_Label lbl = getLabel(labelFile);
     bec:	e13f2417 	ldw	r4,-880(fp)
     bf0:	00018440 	call	1844 <getLabel>
     bf4:	e0bf2505 	stb	r2,-876(fp)
        
        // set target ouput of the number displayed in the current image (=label) to 1, all others to 0
        Vector targetOutput;
        targetOutput = getTargetOutput(lbl);
     bf8:	e0ff2503 	ldbu	r3,-876(fp)
     bfc:	e0bff604 	addi	r2,fp,-40
     c00:	180b883a 	mov	r5,r3
     c04:	1009883a 	mov	r4,r2
     c08:	000026c0 	call	26c <getTargetOutput>
     c0c:	e0bff617 	ldw	r2,-40(fp)
     c10:	e0bfeb15 	stw	r2,-84(fp)
     c14:	e0bff717 	ldw	r2,-36(fp)
     c18:	e0bfec15 	stw	r2,-80(fp)
     c1c:	e0bff817 	ldw	r2,-32(fp)
     c20:	e0bfed15 	stw	r2,-76(fp)
     c24:	e0bff917 	ldw	r2,-28(fp)
     c28:	e0bfee15 	stw	r2,-72(fp)
     c2c:	e0bffa17 	ldw	r2,-24(fp)
     c30:	e0bfef15 	stw	r2,-68(fp)
     c34:	e0bffb17 	ldw	r2,-20(fp)
     c38:	e0bff015 	stw	r2,-64(fp)
     c3c:	e0bffc17 	ldw	r2,-16(fp)
     c40:	e0bff115 	stw	r2,-60(fp)
     c44:	e0bffd17 	ldw	r2,-12(fp)
     c48:	e0bff215 	stw	r2,-56(fp)
     c4c:	e0bffe17 	ldw	r2,-8(fp)
     c50:	e0bff315 	stw	r2,-52(fp)
     c54:	e0bfff17 	ldw	r2,-4(fp)
     c58:	e0bff415 	stw	r2,-48(fp)
        
        displayImage(&img, 8,6);
     c5c:	e0bf2704 	addi	r2,fp,-868
     c60:	01800184 	movi	r6,6
     c64:	01400204 	movi	r5,8
     c68:	1009883a 	mov	r4,r2
     c6c:	0000fb40 	call	fb4 <displayImage>
        
        // loop through all output cells for the given image
        for (int i=0; i < NUMBER_OF_OUTPUT_CELLS; i++){
     c70:	e03f2215 	stw	zero,-888(fp)
     c74:	00001506 	br	ccc <testLayer+0x14c>
            testCell(&l->cell[i], &img, targetOutput.val[i]);
     c78:	014c4404 	movi	r5,12560
     c7c:	e13f2217 	ldw	r4,-888(fp)
     c80:	0001a300 	call	1a30 <__mulsi3>
     c84:	1007883a 	mov	r3,r2
     c88:	e0bff517 	ldw	r2,-44(fp)
     c8c:	10c7883a 	add	r3,r2,r3
     c90:	e0bf2217 	ldw	r2,-888(fp)
     c94:	1085883a 	add	r2,r2,r2
     c98:	1085883a 	add	r2,r2,r2
     c9c:	e13f2004 	addi	r4,fp,-896
     ca0:	2085883a 	add	r2,r4,r2
     ca4:	1080cb04 	addi	r2,r2,812
     ca8:	11000017 	ldw	r4,0(r2)
     cac:	e0bf2704 	addi	r2,fp,-868
     cb0:	200d883a 	mov	r6,r4
     cb4:	100b883a 	mov	r5,r2
     cb8:	1809883a 	mov	r4,r3
     cbc:	00009500 	call	950 <testCell>
        targetOutput = getTargetOutput(lbl);
        
        displayImage(&img, 8,6);
        
        // loop through all output cells for the given image
        for (int i=0; i < NUMBER_OF_OUTPUT_CELLS; i++){
     cc0:	e0bf2217 	ldw	r2,-888(fp)
     cc4:	10800044 	addi	r2,r2,1
     cc8:	e0bf2215 	stw	r2,-888(fp)
     ccc:	e0bf2217 	ldw	r2,-888(fp)
     cd0:	10800290 	cmplti	r2,r2,10
     cd4:	103fe81e 	bne	r2,zero,c78 <__alt_data_end+0xfffe0c78>
            testCell(&l->cell[i], &img, targetOutput.val[i]);
        }
        
        int predictedNum = getLayerPrediction(l);
     cd8:	e13ff517 	ldw	r4,-44(fp)
     cdc:	00004a00 	call	4a0 <getLayerPrediction>
     ce0:	e0bf2615 	stw	r2,-872(fp)
        if (predictedNum!=lbl) errCount++;
     ce4:	e0ff2503 	ldbu	r3,-876(fp)
     ce8:	e0bf2617 	ldw	r2,-872(fp)
     cec:	18800326 	beq	r3,r2,cfc <testLayer+0x17c>
     cf0:	e0bf2017 	ldw	r2,-896(fp)
     cf4:	10800044 	addi	r2,r2,1
     cf8:	e0bf2015 	stw	r2,-896(fp)
        
        printf("\n      Prediction: %d   Actual: %d ",predictedNum, lbl);
     cfc:	e0bf2503 	ldbu	r2,-876(fp)
     d00:	100d883a 	mov	r6,r2
     d04:	e17f2617 	ldw	r5,-872(fp)
     d08:	01000074 	movhi	r4,1
     d0c:	210b4c04 	addi	r4,r4,11568
     d10:	0006e9c0 	call	6e9c <printf>
        
        displayProgress(imgCount, errCount, 5, 66);
     d14:	01c01084 	movi	r7,66
     d18:	01800144 	movi	r6,5
     d1c:	e17f2017 	ldw	r5,-896(fp)
     d20:	e13f2117 	ldw	r4,-892(fp)
     d24:	000136c0 	call	136c <displayProgress>
    displayImageFrame(7,5);
    
    int errCount = 0;
    
    // Loop through all images in the file
    for (int imgCount=0; imgCount<MNIST_MAX_TESTING_IMAGES; imgCount++){
     d28:	e0bf2117 	ldw	r2,-892(fp)
     d2c:	10800044 	addi	r2,r2,1
     d30:	e0bf2115 	stw	r2,-892(fp)
     d34:	e0bf2117 	ldw	r2,-892(fp)
     d38:	1089c410 	cmplti	r2,r2,10000
     d3c:	103fa31e 	bne	r2,zero,bcc <__alt_data_end+0xfffe0bcc>
        displayProgress(imgCount, errCount, 5, 66);
        
    }
    
    // Close files
    fclose(imageFile);
     d40:	e13f2317 	ldw	r4,-884(fp)
     d44:	0004d540 	call	4d54 <fclose>
    fclose(labelFile);
     d48:	e13f2417 	ldw	r4,-880(fp)
     d4c:	0004d540 	call	4d54 <fclose>
    
}
     d50:	0001883a 	nop
     d54:	e037883a 	mov	sp,fp
     d58:	dfc00117 	ldw	ra,4(sp)
     d5c:	df000017 	ldw	fp,0(sp)
     d60:	dec00204 	addi	sp,sp,8
     d64:	f800283a 	ret

00000d68 <main>:

/**
 * @details Main function to run MNIST-1LNN
 */

int main(int argc, const char * argv[]) {
     d68:	defffe04 	addi	sp,sp,-8
     d6c:	dfc00115 	stw	ra,4(sp)
     d70:	df000015 	stw	fp,0(sp)
     d74:	d839883a 	mov	fp,sp
     d78:	023fffb4 	movhi	r8,65534
     d7c:	42055204 	addi	r8,r8,5448
     d80:	da37883a 	add	sp,sp,r8
     d84:	008000b4 	movhi	r2,2
     d88:	10baac04 	addi	r2,r2,-5456
     d8c:	00ffffb4 	movhi	r3,65534
     d90:	18c55204 	addi	r3,r3,5448
     d94:	1f07883a 	add	r3,r3,fp
     d98:	1885883a 	add	r2,r3,r2
     d9c:	11000015 	stw	r4,0(r2)
     da0:	008000b4 	movhi	r2,2
     da4:	10baad04 	addi	r2,r2,-5452
     da8:	013fffb4 	movhi	r4,65534
     dac:	21055204 	addi	r4,r4,5448
     db0:	2709883a 	add	r4,r4,fp
     db4:	2085883a 	add	r2,r4,r2
     db8:	11400015 	stw	r5,0(r2)
    
    // remember the time in order to calculate processing time at the end
    time_t startTime = time(NULL);
     dbc:	0009883a 	mov	r4,zero
     dc0:	00075740 	call	7574 <time>
     dc4:	00ffffb4 	movhi	r3,65534
     dc8:	18c55204 	addi	r3,r3,5448
     dcc:	1f07883a 	add	r3,r3,fp
     dd0:	18800015 	stw	r2,0(r3)
    
    // clear screen of terminal window
    clearScreen();
     dd4:	00018ac0 	call	18ac <clearScreen>
    printf("    MNIST-1LNN: a simple 1-layer neural network processing the MNIST handwriting images\n");
     dd8:	01000074 	movhi	r4,1
     ddc:	210b6304 	addi	r4,r4,11660
     de0:	0006fb80 	call	6fb8 <puts>
    
    // initialize all connection weights to random values between 0 and 1
    Layer outputLayer;
    initLayer(&outputLayer);
     de4:	013fffb4 	movhi	r4,65534
     de8:	21055604 	addi	r4,r4,5464
     dec:	e105883a 	add	r2,fp,r4
     df0:	1009883a 	mov	r4,r2
     df4:	00003340 	call	334 <initLayer>
    trainLayer(&outputLayer);
     df8:	00ffffb4 	movhi	r3,65534
     dfc:	18c55604 	addi	r3,r3,5464
     e00:	e0c5883a 	add	r2,fp,r3
     e04:	1009883a 	mov	r4,r2
     e08:	00009980 	call	998 <trainLayer>
    
    testLayer(&outputLayer);
     e0c:	013fffb4 	movhi	r4,65534
     e10:	21055604 	addi	r4,r4,5464
     e14:	e105883a 	add	r2,fp,r4
     e18:	1009883a 	mov	r4,r2
     e1c:	0000b800 	call	b80 <testLayer>

    locateCursor(38, 5);
     e20:	01400144 	movi	r5,5
     e24:	01000984 	movi	r4,38
     e28:	00019e80 	call	19e8 <locateCursor>
    
    // Calculate and print the program's total execution time
    time_t endTime = time(NULL);
     e2c:	0009883a 	mov	r4,zero
     e30:	00075740 	call	7574 <time>
     e34:	00ffffb4 	movhi	r3,65534
     e38:	18c55304 	addi	r3,r3,5452
     e3c:	1f07883a 	add	r3,r3,fp
     e40:	18800015 	stw	r2,0(r3)
    double executionTime = difftime(endTime, startTime);
     e44:	013fffb4 	movhi	r4,65534
     e48:	21055204 	addi	r4,r4,5448
     e4c:	2709883a 	add	r4,r4,fp
     e50:	21400017 	ldw	r5,0(r4)
     e54:	00bfffb4 	movhi	r2,65534
     e58:	10855304 	addi	r2,r2,5452
     e5c:	1705883a 	add	r2,r2,fp
     e60:	11000017 	ldw	r4,0(r2)
     e64:	0004c100 	call	4c10 <difftime>
     e68:	013fffb4 	movhi	r4,65534
     e6c:	21055404 	addi	r4,r4,5456
     e70:	2709883a 	add	r4,r4,fp
     e74:	20800015 	stw	r2,0(r4)
     e78:	00bfffb4 	movhi	r2,65534
     e7c:	10855504 	addi	r2,r2,5460
     e80:	1705883a 	add	r2,r2,fp
     e84:	10c00015 	stw	r3,0(r2)
    printf("\n    DONE! Total execution time: %.1f sec\n\n",executionTime);
     e88:	00ffffb4 	movhi	r3,65534
     e8c:	18c55404 	addi	r3,r3,5456
     e90:	1f07883a 	add	r3,r3,fp
     e94:	19400017 	ldw	r5,0(r3)
     e98:	013fffb4 	movhi	r4,65534
     e9c:	21055504 	addi	r4,r4,5460
     ea0:	2709883a 	add	r4,r4,fp
     ea4:	21800017 	ldw	r6,0(r4)
     ea8:	01000074 	movhi	r4,1
     eac:	210b7904 	addi	r4,r4,11748
     eb0:	0006e9c0 	call	6e9c <printf>
    
    return 0;
     eb4:	0005883a 	mov	r2,zero
}
     eb8:	e037883a 	mov	sp,fp
     ebc:	dfc00117 	ldw	ra,4(sp)
     ec0:	df000017 	ldw	fp,0(sp)
     ec4:	dec00204 	addi	sp,sp,8
     ec8:	f800283a 	ret

00000ecc <displayImageFrame>:

/**
 * @details Outputs a 28x28 text frame at a defined screen position
 */

void displayImageFrame(int row, int col){
     ecc:	defff904 	addi	sp,sp,-28
     ed0:	dfc00615 	stw	ra,24(sp)
     ed4:	df000515 	stw	fp,20(sp)
     ed8:	df000504 	addi	fp,sp,20
     edc:	e13ffe15 	stw	r4,-8(fp)
     ee0:	e17fff15 	stw	r5,-4(fp)
    
    if (col!=0 && row!=0) locateCursor(row, col);
     ee4:	e0bfff17 	ldw	r2,-4(fp)
     ee8:	10000526 	beq	r2,zero,f00 <displayImageFrame+0x34>
     eec:	e0bffe17 	ldw	r2,-8(fp)
     ef0:	10000326 	beq	r2,zero,f00 <displayImageFrame+0x34>
     ef4:	e17fff17 	ldw	r5,-4(fp)
     ef8:	e13ffe17 	ldw	r4,-8(fp)
     efc:	00019e80 	call	19e8 <locateCursor>

    printf("------------------------------\n");
     f00:	01000074 	movhi	r4,1
     f04:	210b8404 	addi	r4,r4,11792
     f08:	0006fb80 	call	6fb8 <puts>
    
    for (int i=0; i<MNIST_IMG_HEIGHT; i++){
     f0c:	e03ffb15 	stw	zero,-20(fp)
     f10:	00001106 	br	f58 <displayImageFrame+0x8c>
        for (int o=0; o<col-1; o++) printf(" ");
     f14:	e03ffc15 	stw	zero,-16(fp)
     f18:	00000506 	br	f30 <displayImageFrame+0x64>
     f1c:	01000804 	movi	r4,32
     f20:	0006ee00 	call	6ee0 <putchar>
     f24:	e0bffc17 	ldw	r2,-16(fp)
     f28:	10800044 	addi	r2,r2,1
     f2c:	e0bffc15 	stw	r2,-16(fp)
     f30:	e0bfff17 	ldw	r2,-4(fp)
     f34:	10bfffc4 	addi	r2,r2,-1
     f38:	e0fffc17 	ldw	r3,-16(fp)
     f3c:	18bff716 	blt	r3,r2,f1c <__alt_data_end+0xfffe0f1c>
        printf("|                            |\n");
     f40:	01000074 	movhi	r4,1
     f44:	210b8c04 	addi	r4,r4,11824
     f48:	0006fb80 	call	6fb8 <puts>
    
    if (col!=0 && row!=0) locateCursor(row, col);

    printf("------------------------------\n");
    
    for (int i=0; i<MNIST_IMG_HEIGHT; i++){
     f4c:	e0bffb17 	ldw	r2,-20(fp)
     f50:	10800044 	addi	r2,r2,1
     f54:	e0bffb15 	stw	r2,-20(fp)
     f58:	e0bffb17 	ldw	r2,-20(fp)
     f5c:	10800710 	cmplti	r2,r2,28
     f60:	103fec1e 	bne	r2,zero,f14 <__alt_data_end+0xfffe0f14>
        for (int o=0; o<col-1; o++) printf(" ");
        printf("|                            |\n");
    }

    for (int o=0; o<col-1; o++) printf(" ");
     f64:	e03ffd15 	stw	zero,-12(fp)
     f68:	00000506 	br	f80 <displayImageFrame+0xb4>
     f6c:	01000804 	movi	r4,32
     f70:	0006ee00 	call	6ee0 <putchar>
     f74:	e0bffd17 	ldw	r2,-12(fp)
     f78:	10800044 	addi	r2,r2,1
     f7c:	e0bffd15 	stw	r2,-12(fp)
     f80:	e0bfff17 	ldw	r2,-4(fp)
     f84:	10bfffc4 	addi	r2,r2,-1
     f88:	e0fffd17 	ldw	r3,-12(fp)
     f8c:	18bff716 	blt	r3,r2,f6c <__alt_data_end+0xfffe0f6c>
    printf("------------------------------");
     f90:	01000074 	movhi	r4,1
     f94:	210b8404 	addi	r4,r4,11792
     f98:	0006e9c0 	call	6e9c <printf>
    
}
     f9c:	0001883a 	nop
     fa0:	e037883a 	mov	sp,fp
     fa4:	dfc00117 	ldw	ra,4(sp)
     fa8:	df000017 	ldw	fp,0(sp)
     fac:	dec00204 	addi	sp,sp,8
     fb0:	f800283a 	ret

00000fb4 <displayImage>:

/**
 * @details Outputs a 28x28 MNIST image as charachters ("."s and "X"s)
 */

void displayImage(MNIST_Image *img, int row, int col){
     fb4:	deffed04 	addi	sp,sp,-76
     fb8:	dfc01215 	stw	ra,72(sp)
     fbc:	df001115 	stw	fp,68(sp)
     fc0:	ddc01015 	stw	r23,64(sp)
     fc4:	dd800f15 	stw	r22,60(sp)
     fc8:	dd400e15 	stw	r21,56(sp)
     fcc:	dd000d15 	stw	r20,52(sp)
     fd0:	dcc00c15 	stw	r19,48(sp)
     fd4:	dc800b15 	stw	r18,44(sp)
     fd8:	dc400a15 	stw	r17,40(sp)
     fdc:	dc000915 	stw	r16,36(sp)
     fe0:	df001104 	addi	fp,sp,68
     fe4:	e13ff415 	stw	r4,-48(fp)
     fe8:	e17ff515 	stw	r5,-44(fp)
     fec:	e1bff615 	stw	r6,-40(fp)
     ff0:	d805883a 	mov	r2,sp
     ff4:	e0bff715 	stw	r2,-36(fp)

    char imgStr[(MNIST_IMG_HEIGHT * MNIST_IMG_WIDTH)+((col+1)*MNIST_IMG_HEIGHT)+1];
     ff8:	e0bff617 	ldw	r2,-40(fp)
     ffc:	10800044 	addi	r2,r2,1
    1000:	01400704 	movi	r5,28
    1004:	1009883a 	mov	r4,r2
    1008:	0001a300 	call	1a30 <__mulsi3>
    100c:	1080c444 	addi	r2,r2,785
    1010:	10ffffc4 	addi	r3,r2,-1
    1014:	e0fff215 	stw	r3,-56(fp)
    1018:	1007883a 	mov	r3,r2
    101c:	182d883a 	mov	r22,r3
    1020:	002f883a 	mov	r23,zero
    1024:	b006d77a 	srli	r3,r22,29
    1028:	b82690fa 	slli	r19,r23,3
    102c:	1ce6b03a 	or	r19,r3,r19
    1030:	b02490fa 	slli	r18,r22,3
    1034:	1007883a 	mov	r3,r2
    1038:	1829883a 	mov	r20,r3
    103c:	002b883a 	mov	r21,zero
    1040:	a006d77a 	srli	r3,r20,29
    1044:	a82290fa 	slli	r17,r21,3
    1048:	1c62b03a 	or	r17,r3,r17
    104c:	a02090fa 	slli	r16,r20,3
    1050:	108000c4 	addi	r2,r2,3
    1054:	1004d0ba 	srli	r2,r2,2
    1058:	1085883a 	add	r2,r2,r2
    105c:	1085883a 	add	r2,r2,r2
    1060:	d8b7c83a 	sub	sp,sp,r2
    1064:	d805883a 	mov	r2,sp
    1068:	1005883a 	mov	r2,r2
    106c:	e0bff315 	stw	r2,-52(fp)
    strcpy(imgStr, "");
    1070:	e0bff317 	ldw	r2,-52(fp)
    1074:	10000005 	stb	zero,0(r2)
    
    for (int y=0; y<MNIST_IMG_HEIGHT; y++){
    1078:	e03fef15 	stw	zero,-68(fp)
    107c:	00003d06 	br	1174 <displayImage+0x1c0>
        
        for (int o=0; o<col-2; o++) strcat(imgStr," ");
    1080:	e03ff015 	stw	zero,-64(fp)
    1084:	00000a06 	br	10b0 <displayImage+0xfc>
    1088:	e43ff317 	ldw	r16,-52(fp)
    108c:	8009883a 	mov	r4,r16
    1090:	00074dc0 	call	74dc <strlen>
    1094:	8085883a 	add	r2,r16,r2
    1098:	00c00804 	movi	r3,32
    109c:	10c00005 	stb	r3,0(r2)
    10a0:	10000045 	stb	zero,1(r2)
    10a4:	e0bff017 	ldw	r2,-64(fp)
    10a8:	10800044 	addi	r2,r2,1
    10ac:	e0bff015 	stw	r2,-64(fp)
    10b0:	e0bff617 	ldw	r2,-40(fp)
    10b4:	10bfff84 	addi	r2,r2,-2
    10b8:	e0fff017 	ldw	r3,-64(fp)
    10bc:	18bff216 	blt	r3,r2,1088 <__alt_data_end+0xfffe1088>
        strcat(imgStr,"|");
    10c0:	e43ff317 	ldw	r16,-52(fp)
    10c4:	8009883a 	mov	r4,r16
    10c8:	00074dc0 	call	74dc <strlen>
    10cc:	8085883a 	add	r2,r16,r2
    10d0:	00c01f04 	movi	r3,124
    10d4:	10c00005 	stb	r3,0(r2)
    10d8:	10000045 	stb	zero,1(r2)
        
        for (int x=0; x<MNIST_IMG_WIDTH; x++){
    10dc:	e03ff115 	stw	zero,-60(fp)
    10e0:	00001706 	br	1140 <displayImage+0x18c>
            strcat(imgStr, img->pixel[y*MNIST_IMG_HEIGHT+x] ? "X" : "." );
    10e4:	e43ff317 	ldw	r16,-52(fp)
    10e8:	01400704 	movi	r5,28
    10ec:	e13fef17 	ldw	r4,-68(fp)
    10f0:	0001a300 	call	1a30 <__mulsi3>
    10f4:	1007883a 	mov	r3,r2
    10f8:	e0bff117 	ldw	r2,-60(fp)
    10fc:	1885883a 	add	r2,r3,r2
    1100:	e0fff417 	ldw	r3,-48(fp)
    1104:	1885883a 	add	r2,r3,r2
    1108:	10800003 	ldbu	r2,0(r2)
    110c:	10803fcc 	andi	r2,r2,255
    1110:	10000326 	beq	r2,zero,1120 <displayImage+0x16c>
    1114:	00800074 	movhi	r2,1
    1118:	108b9404 	addi	r2,r2,11856
    111c:	00000206 	br	1128 <displayImage+0x174>
    1120:	00800074 	movhi	r2,1
    1124:	108b9504 	addi	r2,r2,11860
    1128:	100b883a 	mov	r5,r2
    112c:	8009883a 	mov	r4,r16
    1130:	00073c80 	call	73c8 <strcat>
    for (int y=0; y<MNIST_IMG_HEIGHT; y++){
        
        for (int o=0; o<col-2; o++) strcat(imgStr," ");
        strcat(imgStr,"|");
        
        for (int x=0; x<MNIST_IMG_WIDTH; x++){
    1134:	e0bff117 	ldw	r2,-60(fp)
    1138:	10800044 	addi	r2,r2,1
    113c:	e0bff115 	stw	r2,-60(fp)
    1140:	e0bff117 	ldw	r2,-60(fp)
    1144:	10800710 	cmplti	r2,r2,28
    1148:	103fe61e 	bne	r2,zero,10e4 <__alt_data_end+0xfffe10e4>
            strcat(imgStr, img->pixel[y*MNIST_IMG_HEIGHT+x] ? "X" : "." );
        }
        strcat(imgStr,"\n");
    114c:	e43ff317 	ldw	r16,-52(fp)
    1150:	8009883a 	mov	r4,r16
    1154:	00074dc0 	call	74dc <strlen>
    1158:	8085883a 	add	r2,r16,r2
    115c:	00c00284 	movi	r3,10
    1160:	10c00005 	stb	r3,0(r2)
    1164:	10000045 	stb	zero,1(r2)
void displayImage(MNIST_Image *img, int row, int col){

    char imgStr[(MNIST_IMG_HEIGHT * MNIST_IMG_WIDTH)+((col+1)*MNIST_IMG_HEIGHT)+1];
    strcpy(imgStr, "");
    
    for (int y=0; y<MNIST_IMG_HEIGHT; y++){
    1168:	e0bfef17 	ldw	r2,-68(fp)
    116c:	10800044 	addi	r2,r2,1
    1170:	e0bfef15 	stw	r2,-68(fp)
    1174:	e0bfef17 	ldw	r2,-68(fp)
    1178:	10800710 	cmplti	r2,r2,28
    117c:	103fc01e 	bne	r2,zero,1080 <__alt_data_end+0xfffe1080>
            strcat(imgStr, img->pixel[y*MNIST_IMG_HEIGHT+x] ? "X" : "." );
        }
        strcat(imgStr,"\n");
    }
    
    if (col!=0 && row!=0) locateCursor(row, 0);
    1180:	e0bff617 	ldw	r2,-40(fp)
    1184:	10000526 	beq	r2,zero,119c <displayImage+0x1e8>
    1188:	e0bff517 	ldw	r2,-44(fp)
    118c:	10000326 	beq	r2,zero,119c <displayImage+0x1e8>
    1190:	000b883a 	mov	r5,zero
    1194:	e13ff517 	ldw	r4,-44(fp)
    1198:	00019e80 	call	19e8 <locateCursor>
    printf("%s",imgStr);
    119c:	e0bff317 	ldw	r2,-52(fp)
    11a0:	100b883a 	mov	r5,r2
    11a4:	01000074 	movhi	r4,1
    11a8:	210b9604 	addi	r4,r4,11864
    11ac:	0006e9c0 	call	6e9c <printf>
    11b0:	e6fff717 	ldw	sp,-36(fp)
}
    11b4:	0001883a 	nop
    11b8:	e6fff804 	addi	sp,fp,-32
    11bc:	dfc00917 	ldw	ra,36(sp)
    11c0:	df000817 	ldw	fp,32(sp)
    11c4:	ddc00717 	ldw	r23,28(sp)
    11c8:	dd800617 	ldw	r22,24(sp)
    11cc:	dd400517 	ldw	r21,20(sp)
    11d0:	dd000417 	ldw	r20,16(sp)
    11d4:	dcc00317 	ldw	r19,12(sp)
    11d8:	dc800217 	ldw	r18,8(sp)
    11dc:	dc400117 	ldw	r17,4(sp)
    11e0:	dc000017 	ldw	r16,0(sp)
    11e4:	dec00a04 	addi	sp,sp,40
    11e8:	f800283a 	ret

000011ec <displayLoadingProgressTraining>:

/**
 * @details Outputs reading progress while processing MNIST training images
 */

void displayLoadingProgressTraining(int imgCount, int y, int x){
    11ec:	defff904 	addi	sp,sp,-28
    11f0:	dfc00615 	stw	ra,24(sp)
    11f4:	df000515 	stw	fp,20(sp)
    11f8:	dc000415 	stw	r16,16(sp)
    11fc:	df000504 	addi	fp,sp,20
    1200:	e13ffc15 	stw	r4,-16(fp)
    1204:	e17ffd15 	stw	r5,-12(fp)
    1208:	e1bffe15 	stw	r6,-8(fp)
    
    float progress = (float)(imgCount+1)/(float)(MNIST_MAX_TRAINING_IMAGES)*100;
    120c:	e0bffc17 	ldw	r2,-16(fp)
    1210:	10800044 	addi	r2,r2,1
    1214:	1009883a 	mov	r4,r2
    1218:	00023380 	call	2338 <__floatsisf>
    121c:	1007883a 	mov	r3,r2
    1220:	0151dab4 	movhi	r5,18282
    1224:	29580004 	addi	r5,r5,24576
    1228:	1809883a 	mov	r4,r3
    122c:	0001a580 	call	1a58 <__divsf3>
    1230:	1007883a 	mov	r3,r2
    1234:	1805883a 	mov	r2,r3
    1238:	0150b234 	movhi	r5,17096
    123c:	1009883a 	mov	r4,r2
    1240:	0001e980 	call	1e98 <__mulsf3>
    1244:	1007883a 	mov	r3,r2
    1248:	e0fffb15 	stw	r3,-20(fp)
    
    if (x!=0 && y!=0) locateCursor(y, x);
    124c:	e0bffe17 	ldw	r2,-8(fp)
    1250:	10000526 	beq	r2,zero,1268 <displayLoadingProgressTraining+0x7c>
    1254:	e0bffd17 	ldw	r2,-12(fp)
    1258:	10000326 	beq	r2,zero,1268 <displayLoadingProgressTraining+0x7c>
    125c:	e17ffe17 	ldw	r5,-8(fp)
    1260:	e13ffd17 	ldw	r4,-12(fp)
    1264:	00019e80 	call	19e8 <locateCursor>
    
    printf("1: TRAINING: Reading image No. %5d of %5d images [%d%%]",(imgCount+1),MNIST_MAX_TRAINING_IMAGES,(int)progress);
    1268:	e0bffc17 	ldw	r2,-16(fp)
    126c:	14000044 	addi	r16,r2,1
    1270:	e13ffb17 	ldw	r4,-20(fp)
    1274:	00022c80 	call	22c8 <__fixsfsi>
    1278:	100f883a 	mov	r7,r2
    127c:	01ba9814 	movui	r6,60000
    1280:	800b883a 	mov	r5,r16
    1284:	01000074 	movhi	r4,1
    1288:	210b9704 	addi	r4,r4,11868
    128c:	0006e9c0 	call	6e9c <printf>
    
}
    1290:	0001883a 	nop
    1294:	e6ffff04 	addi	sp,fp,-4
    1298:	dfc00217 	ldw	ra,8(sp)
    129c:	df000117 	ldw	fp,4(sp)
    12a0:	dc000017 	ldw	r16,0(sp)
    12a4:	dec00304 	addi	sp,sp,12
    12a8:	f800283a 	ret

000012ac <displayLoadingProgressTesting>:

/**
 * @details Outputs reading progress while processing MNIST testing images
 */

void displayLoadingProgressTesting(int imgCount, int y, int x){
    12ac:	defff904 	addi	sp,sp,-28
    12b0:	dfc00615 	stw	ra,24(sp)
    12b4:	df000515 	stw	fp,20(sp)
    12b8:	dc000415 	stw	r16,16(sp)
    12bc:	df000504 	addi	fp,sp,20
    12c0:	e13ffc15 	stw	r4,-16(fp)
    12c4:	e17ffd15 	stw	r5,-12(fp)
    12c8:	e1bffe15 	stw	r6,-8(fp)
    
    float progress = (float)(imgCount+1)/(float)(MNIST_MAX_TESTING_IMAGES)*100;
    12cc:	e0bffc17 	ldw	r2,-16(fp)
    12d0:	10800044 	addi	r2,r2,1
    12d4:	1009883a 	mov	r4,r2
    12d8:	00023380 	call	2338 <__floatsisf>
    12dc:	1007883a 	mov	r3,r2
    12e0:	01518734 	movhi	r5,17948
    12e4:	29500004 	addi	r5,r5,16384
    12e8:	1809883a 	mov	r4,r3
    12ec:	0001a580 	call	1a58 <__divsf3>
    12f0:	1007883a 	mov	r3,r2
    12f4:	1805883a 	mov	r2,r3
    12f8:	0150b234 	movhi	r5,17096
    12fc:	1009883a 	mov	r4,r2
    1300:	0001e980 	call	1e98 <__mulsf3>
    1304:	1007883a 	mov	r3,r2
    1308:	e0fffb15 	stw	r3,-20(fp)
    
    if (x!=0 && y!=0) locateCursor(y, x);
    130c:	e0bffe17 	ldw	r2,-8(fp)
    1310:	10000526 	beq	r2,zero,1328 <displayLoadingProgressTesting+0x7c>
    1314:	e0bffd17 	ldw	r2,-12(fp)
    1318:	10000326 	beq	r2,zero,1328 <displayLoadingProgressTesting+0x7c>
    131c:	e17ffe17 	ldw	r5,-8(fp)
    1320:	e13ffd17 	ldw	r4,-12(fp)
    1324:	00019e80 	call	19e8 <locateCursor>
    
    printf("2: TESTING:  Reading image No. %5d of %5d images [%d%%]\n                                  ",(imgCount+1),MNIST_MAX_TESTING_IMAGES,(int)progress);
    1328:	e0bffc17 	ldw	r2,-16(fp)
    132c:	14000044 	addi	r16,r2,1
    1330:	e13ffb17 	ldw	r4,-20(fp)
    1334:	00022c80 	call	22c8 <__fixsfsi>
    1338:	100f883a 	mov	r7,r2
    133c:	0189c404 	movi	r6,10000
    1340:	800b883a 	mov	r5,r16
    1344:	01000074 	movhi	r4,1
    1348:	210ba504 	addi	r4,r4,11924
    134c:	0006e9c0 	call	6e9c <printf>
    
}
    1350:	0001883a 	nop
    1354:	e6ffff04 	addi	sp,fp,-4
    1358:	dfc00217 	ldw	ra,8(sp)
    135c:	df000117 	ldw	fp,4(sp)
    1360:	dc000017 	ldw	r16,0(sp)
    1364:	dec00304 	addi	sp,sp,12
    1368:	f800283a 	ret

0000136c <displayProgress>:

/**
 * @details Outputs image recognition progress and error count
 */

void displayProgress(int imgCount, int errCount, int y, int x){
    136c:	defff504 	addi	sp,sp,-44
    1370:	dfc00a15 	stw	ra,40(sp)
    1374:	df000915 	stw	fp,36(sp)
    1378:	dc400815 	stw	r17,32(sp)
    137c:	dc000715 	stw	r16,28(sp)
    1380:	df000904 	addi	fp,sp,36
    1384:	e13ffa15 	stw	r4,-24(fp)
    1388:	e17ffb15 	stw	r5,-20(fp)
    138c:	e1bffc15 	stw	r6,-16(fp)
    1390:	e1fffd15 	stw	r7,-12(fp)
    
    double successRate = 1 - ((double)errCount/(double)(imgCount+1));
    1394:	e13ffb17 	ldw	r4,-20(fp)
    1398:	000491c0 	call	491c <__floatsidf>
    139c:	1021883a 	mov	r16,r2
    13a0:	1823883a 	mov	r17,r3
    13a4:	e0bffa17 	ldw	r2,-24(fp)
    13a8:	10800044 	addi	r2,r2,1
    13ac:	1009883a 	mov	r4,r2
    13b0:	000491c0 	call	491c <__floatsidf>
    13b4:	1009883a 	mov	r4,r2
    13b8:	180b883a 	mov	r5,r3
    13bc:	200d883a 	mov	r6,r4
    13c0:	280f883a 	mov	r7,r5
    13c4:	8009883a 	mov	r4,r16
    13c8:	880b883a 	mov	r5,r17
    13cc:	0002d080 	call	2d08 <__divdf3>
    13d0:	1009883a 	mov	r4,r2
    13d4:	180b883a 	mov	r5,r3
    13d8:	2005883a 	mov	r2,r4
    13dc:	2807883a 	mov	r3,r5
    13e0:	100d883a 	mov	r6,r2
    13e4:	180f883a 	mov	r7,r3
    13e8:	0009883a 	mov	r4,zero
    13ec:	014ffc34 	movhi	r5,16368
    13f0:	00040200 	call	4020 <__subdf3>
    13f4:	1009883a 	mov	r4,r2
    13f8:	180b883a 	mov	r5,r3
    13fc:	e13ff815 	stw	r4,-32(fp)
    1400:	e17ff915 	stw	r5,-28(fp)
    
    if (x!=0 && y!=0) locateCursor(y, x);
    1404:	e0bffd17 	ldw	r2,-12(fp)
    1408:	10000526 	beq	r2,zero,1420 <displayProgress+0xb4>
    140c:	e0bffc17 	ldw	r2,-16(fp)
    1410:	10000326 	beq	r2,zero,1420 <displayProgress+0xb4>
    1414:	e17ffd17 	ldw	r5,-12(fp)
    1418:	e13ffc17 	ldw	r4,-16(fp)
    141c:	00019e80 	call	19e8 <locateCursor>
    
    printf("Result: Correct=%5d  Incorrect=%5d  Success-Rate=%5.2f%% \n",imgCount+1-errCount, errCount, successRate*100);
    1420:	e0bffa17 	ldw	r2,-24(fp)
    1424:	10c00044 	addi	r3,r2,1
    1428:	e0bffb17 	ldw	r2,-20(fp)
    142c:	18a1c83a 	sub	r16,r3,r2
    1430:	000d883a 	mov	r6,zero
    1434:	01d01674 	movhi	r7,16473
    1438:	e13ff817 	ldw	r4,-32(fp)
    143c:	e17ff917 	ldw	r5,-28(fp)
    1440:	00037b40 	call	37b4 <__muldf3>
    1444:	1009883a 	mov	r4,r2
    1448:	180b883a 	mov	r5,r3
    144c:	2005883a 	mov	r2,r4
    1450:	2807883a 	mov	r3,r5
    1454:	d8c00015 	stw	r3,0(sp)
    1458:	100f883a 	mov	r7,r2
    145c:	e1bffb17 	ldw	r6,-20(fp)
    1460:	800b883a 	mov	r5,r16
    1464:	01000074 	movhi	r4,1
    1468:	210bbc04 	addi	r4,r4,12016
    146c:	0006e9c0 	call	6e9c <printf>
    
    
}
    1470:	0001883a 	nop
    1474:	e6fffe04 	addi	sp,fp,-8
    1478:	dfc00317 	ldw	ra,12(sp)
    147c:	df000217 	ldw	fp,8(sp)
    1480:	dc400117 	ldw	r17,4(sp)
    1484:	dc000017 	ldw	r16,0(sp)
    1488:	dec00404 	addi	sp,sp,16
    148c:	f800283a 	ret

00001490 <flipBytes>:
 * @details Reverse byte order in 32bit numbers
 * MNIST files contain all numbers in reversed byte order,
 * and hence must be reversed before using
 */

uint32_t flipBytes(uint32_t n){
    1490:	defffa04 	addi	sp,sp,-24
    1494:	df000515 	stw	fp,20(sp)
    1498:	df000504 	addi	fp,sp,20
    149c:	e13fff15 	stw	r4,-4(fp)
    
    uint32_t b0,b1,b2,b3;
    
    b0 = (n & 0x000000ff) <<  24u;
    14a0:	e0bfff17 	ldw	r2,-4(fp)
    14a4:	1004963a 	slli	r2,r2,24
    14a8:	e0bffb15 	stw	r2,-20(fp)
    b1 = (n & 0x0000ff00) <<   8u;
    14ac:	e0bfff17 	ldw	r2,-4(fp)
    14b0:	10bfc00c 	andi	r2,r2,65280
    14b4:	1004923a 	slli	r2,r2,8
    14b8:	e0bffc15 	stw	r2,-16(fp)
    b2 = (n & 0x00ff0000) >>   8u;
    14bc:	e0bfff17 	ldw	r2,-4(fp)
    14c0:	10803fec 	andhi	r2,r2,255
    14c4:	1004d23a 	srli	r2,r2,8
    14c8:	e0bffd15 	stw	r2,-12(fp)
    b3 = (n & 0xff000000) >>  24u;
    14cc:	e0bfff17 	ldw	r2,-4(fp)
    14d0:	1004d63a 	srli	r2,r2,24
    14d4:	e0bffe15 	stw	r2,-8(fp)
    
    return (b0 | b1 | b2 | b3);
    14d8:	e0fffb17 	ldw	r3,-20(fp)
    14dc:	e0bffc17 	ldw	r2,-16(fp)
    14e0:	1886b03a 	or	r3,r3,r2
    14e4:	e0bffd17 	ldw	r2,-12(fp)
    14e8:	1886b03a 	or	r3,r3,r2
    14ec:	e0bffe17 	ldw	r2,-8(fp)
    14f0:	1884b03a 	or	r2,r3,r2
    
}
    14f4:	e037883a 	mov	sp,fp
    14f8:	df000017 	ldw	fp,0(sp)
    14fc:	dec00104 	addi	sp,sp,4
    1500:	f800283a 	ret

00001504 <readImageFileHeader>:
/**
 * @details Read MNIST image file header
 * @see http://yann.lecun.com/exdb/mnist/ for definition details
 */

void readImageFileHeader(FILE *imageFile, MNIST_ImageFileHeader *ifh){
    1504:	defffc04 	addi	sp,sp,-16
    1508:	dfc00315 	stw	ra,12(sp)
    150c:	df000215 	stw	fp,8(sp)
    1510:	df000204 	addi	fp,sp,8
    1514:	e13ffe15 	stw	r4,-8(fp)
    1518:	e17fff15 	stw	r5,-4(fp)
    
    ifh->magicNumber =0;
    151c:	e0bfff17 	ldw	r2,-4(fp)
    1520:	10000015 	stw	zero,0(r2)
    ifh->maxImages   =0;
    1524:	e0bfff17 	ldw	r2,-4(fp)
    1528:	10000115 	stw	zero,4(r2)
    ifh->imgWidth    =0;
    152c:	e0bfff17 	ldw	r2,-4(fp)
    1530:	10000215 	stw	zero,8(r2)
    ifh->imgHeight   =0;
    1534:	e0bfff17 	ldw	r2,-4(fp)
    1538:	10000315 	stw	zero,12(r2)
    
    fread(&ifh->magicNumber, 4, 1, imageFile);
    153c:	e0bfff17 	ldw	r2,-4(fp)
    1540:	e1fffe17 	ldw	r7,-8(fp)
    1544:	01800044 	movi	r6,1
    1548:	01400104 	movi	r5,4
    154c:	1009883a 	mov	r4,r2
    1550:	00057080 	call	5708 <fread>
    ifh->magicNumber = flipBytes(ifh->magicNumber);
    1554:	e0bfff17 	ldw	r2,-4(fp)
    1558:	10800017 	ldw	r2,0(r2)
    155c:	1009883a 	mov	r4,r2
    1560:	00014900 	call	1490 <flipBytes>
    1564:	1007883a 	mov	r3,r2
    1568:	e0bfff17 	ldw	r2,-4(fp)
    156c:	10c00015 	stw	r3,0(r2)
    
    fread(&ifh->maxImages, 4, 1, imageFile);
    1570:	e0bfff17 	ldw	r2,-4(fp)
    1574:	10800104 	addi	r2,r2,4
    1578:	e1fffe17 	ldw	r7,-8(fp)
    157c:	01800044 	movi	r6,1
    1580:	01400104 	movi	r5,4
    1584:	1009883a 	mov	r4,r2
    1588:	00057080 	call	5708 <fread>
    ifh->maxImages = flipBytes(ifh->maxImages);
    158c:	e0bfff17 	ldw	r2,-4(fp)
    1590:	10800117 	ldw	r2,4(r2)
    1594:	1009883a 	mov	r4,r2
    1598:	00014900 	call	1490 <flipBytes>
    159c:	1007883a 	mov	r3,r2
    15a0:	e0bfff17 	ldw	r2,-4(fp)
    15a4:	10c00115 	stw	r3,4(r2)
    
    fread(&ifh->imgWidth, 4, 1, imageFile);
    15a8:	e0bfff17 	ldw	r2,-4(fp)
    15ac:	10800204 	addi	r2,r2,8
    15b0:	e1fffe17 	ldw	r7,-8(fp)
    15b4:	01800044 	movi	r6,1
    15b8:	01400104 	movi	r5,4
    15bc:	1009883a 	mov	r4,r2
    15c0:	00057080 	call	5708 <fread>
    ifh->imgWidth = flipBytes(ifh->imgWidth);
    15c4:	e0bfff17 	ldw	r2,-4(fp)
    15c8:	10800217 	ldw	r2,8(r2)
    15cc:	1009883a 	mov	r4,r2
    15d0:	00014900 	call	1490 <flipBytes>
    15d4:	1007883a 	mov	r3,r2
    15d8:	e0bfff17 	ldw	r2,-4(fp)
    15dc:	10c00215 	stw	r3,8(r2)
    
    fread(&ifh->imgHeight, 4, 1, imageFile);
    15e0:	e0bfff17 	ldw	r2,-4(fp)
    15e4:	10800304 	addi	r2,r2,12
    15e8:	e1fffe17 	ldw	r7,-8(fp)
    15ec:	01800044 	movi	r6,1
    15f0:	01400104 	movi	r5,4
    15f4:	1009883a 	mov	r4,r2
    15f8:	00057080 	call	5708 <fread>
    ifh->imgHeight = flipBytes(ifh->imgHeight);
    15fc:	e0bfff17 	ldw	r2,-4(fp)
    1600:	10800317 	ldw	r2,12(r2)
    1604:	1009883a 	mov	r4,r2
    1608:	00014900 	call	1490 <flipBytes>
    160c:	1007883a 	mov	r3,r2
    1610:	e0bfff17 	ldw	r2,-4(fp)
    1614:	10c00315 	stw	r3,12(r2)
}
    1618:	0001883a 	nop
    161c:	e037883a 	mov	sp,fp
    1620:	dfc00117 	ldw	ra,4(sp)
    1624:	df000017 	ldw	fp,0(sp)
    1628:	dec00204 	addi	sp,sp,8
    162c:	f800283a 	ret

00001630 <readLabelFileHeader>:
/**
 * @details Read MNIST label file header
 * @see http://yann.lecun.com/exdb/mnist/ for definition details
 */

void readLabelFileHeader(FILE *imageFile, MNIST_LabelFileHeader *lfh){
    1630:	defffc04 	addi	sp,sp,-16
    1634:	dfc00315 	stw	ra,12(sp)
    1638:	df000215 	stw	fp,8(sp)
    163c:	df000204 	addi	fp,sp,8
    1640:	e13ffe15 	stw	r4,-8(fp)
    1644:	e17fff15 	stw	r5,-4(fp)
    
    lfh->magicNumber =0;
    1648:	e0bfff17 	ldw	r2,-4(fp)
    164c:	10000015 	stw	zero,0(r2)
    lfh->maxImages   =0;
    1650:	e0bfff17 	ldw	r2,-4(fp)
    1654:	10000115 	stw	zero,4(r2)
    
    fread(&lfh->magicNumber, 4, 1, imageFile);
    1658:	e0bfff17 	ldw	r2,-4(fp)
    165c:	e1fffe17 	ldw	r7,-8(fp)
    1660:	01800044 	movi	r6,1
    1664:	01400104 	movi	r5,4
    1668:	1009883a 	mov	r4,r2
    166c:	00057080 	call	5708 <fread>
    lfh->magicNumber = flipBytes(lfh->magicNumber);
    1670:	e0bfff17 	ldw	r2,-4(fp)
    1674:	10800017 	ldw	r2,0(r2)
    1678:	1009883a 	mov	r4,r2
    167c:	00014900 	call	1490 <flipBytes>
    1680:	1007883a 	mov	r3,r2
    1684:	e0bfff17 	ldw	r2,-4(fp)
    1688:	10c00015 	stw	r3,0(r2)
    
    fread(&lfh->maxImages, 4, 1, imageFile);
    168c:	e0bfff17 	ldw	r2,-4(fp)
    1690:	10800104 	addi	r2,r2,4
    1694:	e1fffe17 	ldw	r7,-8(fp)
    1698:	01800044 	movi	r6,1
    169c:	01400104 	movi	r5,4
    16a0:	1009883a 	mov	r4,r2
    16a4:	00057080 	call	5708 <fread>
    lfh->maxImages = flipBytes(lfh->maxImages);
    16a8:	e0bfff17 	ldw	r2,-4(fp)
    16ac:	10800117 	ldw	r2,4(r2)
    16b0:	1009883a 	mov	r4,r2
    16b4:	00014900 	call	1490 <flipBytes>
    16b8:	1007883a 	mov	r3,r2
    16bc:	e0bfff17 	ldw	r2,-4(fp)
    16c0:	10c00115 	stw	r3,4(r2)
    
}
    16c4:	0001883a 	nop
    16c8:	e037883a 	mov	sp,fp
    16cc:	dfc00117 	ldw	ra,4(sp)
    16d0:	df000017 	ldw	fp,0(sp)
    16d4:	dec00204 	addi	sp,sp,8
    16d8:	f800283a 	ret

000016dc <openMNISTImageFile>:
 * @details Open MNIST image file and read header info
 * by reading the header info, the read pointer
 * is moved to the position of the 1st IMAGE
 */

FILE *openMNISTImageFile(char *fileName){
    16dc:	defff804 	addi	sp,sp,-32
    16e0:	dfc00715 	stw	ra,28(sp)
    16e4:	df000615 	stw	fp,24(sp)
    16e8:	df000604 	addi	fp,sp,24
    16ec:	e13fff15 	stw	r4,-4(fp)

    FILE *imageFile;
    imageFile = fopen (fileName, "rb");
    16f0:	01400074 	movhi	r5,1
    16f4:	294bcb04 	addi	r5,r5,12076
    16f8:	e13fff17 	ldw	r4,-4(fp)
    16fc:	00054b40 	call	54b4 <fopen>
    1700:	e0bffa15 	stw	r2,-24(fp)
    if (imageFile == NULL) {
    1704:	e0bffa17 	ldw	r2,-24(fp)
    1708:	1000061e 	bne	r2,zero,1724 <openMNISTImageFile+0x48>
        printf("Abort! Could not fine MNIST IMAGE file: %s\n",fileName);
    170c:	e17fff17 	ldw	r5,-4(fp)
    1710:	01000074 	movhi	r4,1
    1714:	210bcc04 	addi	r4,r4,12080
    1718:	0006e9c0 	call	6e9c <printf>
        exit(0);
    171c:	0009883a 	mov	r4,zero
    1720:	0004c2c0 	call	4c2c <exit>
    }

    MNIST_ImageFileHeader imageFileHeader;
    readImageFileHeader(imageFile, &imageFileHeader);
    1724:	e0bffb04 	addi	r2,fp,-20
    1728:	100b883a 	mov	r5,r2
    172c:	e13ffa17 	ldw	r4,-24(fp)
    1730:	00015040 	call	1504 <readImageFileHeader>
    
    return imageFile;
    1734:	e0bffa17 	ldw	r2,-24(fp)
}
    1738:	e037883a 	mov	sp,fp
    173c:	dfc00117 	ldw	ra,4(sp)
    1740:	df000017 	ldw	fp,0(sp)
    1744:	dec00204 	addi	sp,sp,8
    1748:	f800283a 	ret

0000174c <openMNISTLabelFile>:
 * @details Open MNIST label file and read header info
 * by reading the header info, the read pointer
 * is moved to the position of the 1st LABEL
 */

FILE *openMNISTLabelFile(char *fileName){
    174c:	defffa04 	addi	sp,sp,-24
    1750:	dfc00515 	stw	ra,20(sp)
    1754:	df000415 	stw	fp,16(sp)
    1758:	df000404 	addi	fp,sp,16
    175c:	e13fff15 	stw	r4,-4(fp)
    
    FILE *labelFile;
    labelFile = fopen (fileName, "rb");
    1760:	01400074 	movhi	r5,1
    1764:	294bcb04 	addi	r5,r5,12076
    1768:	e13fff17 	ldw	r4,-4(fp)
    176c:	00054b40 	call	54b4 <fopen>
    1770:	e0bffc15 	stw	r2,-16(fp)
    if (labelFile == NULL) {
    1774:	e0bffc17 	ldw	r2,-16(fp)
    1778:	1000061e 	bne	r2,zero,1794 <openMNISTLabelFile+0x48>
        printf("Abort! Could not find MNIST LABEL file: %s\n",fileName);
    177c:	e17fff17 	ldw	r5,-4(fp)
    1780:	01000074 	movhi	r4,1
    1784:	210bd704 	addi	r4,r4,12124
    1788:	0006e9c0 	call	6e9c <printf>
        exit(0);
    178c:	0009883a 	mov	r4,zero
    1790:	0004c2c0 	call	4c2c <exit>
    }

    MNIST_LabelFileHeader labelFileHeader;
    readLabelFileHeader(labelFile, &labelFileHeader);
    1794:	e0bffd04 	addi	r2,fp,-12
    1798:	100b883a 	mov	r5,r2
    179c:	e13ffc17 	ldw	r4,-16(fp)
    17a0:	00016300 	call	1630 <readLabelFileHeader>
    
    return labelFile;
    17a4:	e0bffc17 	ldw	r2,-16(fp)
}
    17a8:	e037883a 	mov	sp,fp
    17ac:	dfc00117 	ldw	ra,4(sp)
    17b0:	df000017 	ldw	fp,0(sp)
    17b4:	dec00204 	addi	sp,sp,8
    17b8:	f800283a 	ret

000017bc <getImage>:

/**
 * @details Returns the next image in the given MNIST image file
 */

MNIST_Image getImage(FILE *imageFile){
    17bc:	deff3704 	addi	sp,sp,-804
    17c0:	dfc0c815 	stw	ra,800(sp)
    17c4:	df00c715 	stw	fp,796(sp)
    17c8:	df00c704 	addi	fp,sp,796
    17cc:	e13ffe15 	stw	r4,-8(fp)
    17d0:	e17fff15 	stw	r5,-4(fp)
    
    MNIST_Image img;
    size_t result;
    result = fread(&img, sizeof(img), 1, imageFile);
    17d4:	e0bf3a04 	addi	r2,fp,-792
    17d8:	e1ffff17 	ldw	r7,-4(fp)
    17dc:	01800044 	movi	r6,1
    17e0:	0140c404 	movi	r5,784
    17e4:	1009883a 	mov	r4,r2
    17e8:	00057080 	call	5708 <fread>
    17ec:	e0bf3915 	stw	r2,-796(fp)
    if (result!=1) {
    17f0:	e0bf3917 	ldw	r2,-796(fp)
    17f4:	10800060 	cmpeqi	r2,r2,1
    17f8:	1000051e 	bne	r2,zero,1810 <getImage+0x54>
        printf("\nError when reading IMAGE file! Abort!\n");
    17fc:	01000074 	movhi	r4,1
    1800:	210be204 	addi	r4,r4,12168
    1804:	0006fb80 	call	6fb8 <puts>
        exit(1);
    1808:	01000044 	movi	r4,1
    180c:	0004c2c0 	call	4c2c <exit>
    }
    
    return img;
    1810:	e0bffe17 	ldw	r2,-8(fp)
    1814:	1009883a 	mov	r4,r2
    1818:	e0bf3a04 	addi	r2,fp,-792
    181c:	00c0c404 	movi	r3,784
    1820:	180d883a 	mov	r6,r3
    1824:	100b883a 	mov	r5,r2
    1828:	0006b9c0 	call	6b9c <memcpy>
}
    182c:	e0bffe17 	ldw	r2,-8(fp)
    1830:	e037883a 	mov	sp,fp
    1834:	dfc00117 	ldw	ra,4(sp)
    1838:	df000017 	ldw	fp,0(sp)
    183c:	dec00204 	addi	sp,sp,8
    1840:	f800283a 	ret

00001844 <getLabel>:

/**
 * @details Returns the next label in the given MNIST label file
 */

MNIST_Label getLabel(FILE *labelFile){
    1844:	defffb04 	addi	sp,sp,-20
    1848:	dfc00415 	stw	ra,16(sp)
    184c:	df000315 	stw	fp,12(sp)
    1850:	df000304 	addi	fp,sp,12
    1854:	e13fff15 	stw	r4,-4(fp)
    
    MNIST_Label lbl;
    size_t result;
    result = fread(&lbl, sizeof(lbl), 1, labelFile);
    1858:	e0bffe04 	addi	r2,fp,-8
    185c:	e1ffff17 	ldw	r7,-4(fp)
    1860:	01800044 	movi	r6,1
    1864:	01400044 	movi	r5,1
    1868:	1009883a 	mov	r4,r2
    186c:	00057080 	call	5708 <fread>
    1870:	e0bffd15 	stw	r2,-12(fp)
    if (result!=1) {
    1874:	e0bffd17 	ldw	r2,-12(fp)
    1878:	10800060 	cmpeqi	r2,r2,1
    187c:	1000051e 	bne	r2,zero,1894 <getLabel+0x50>
        printf("\nError when reading LABEL file! Abort!\n");
    1880:	01000074 	movhi	r4,1
    1884:	210bec04 	addi	r4,r4,12208
    1888:	0006fb80 	call	6fb8 <puts>
        exit(1);
    188c:	01000044 	movi	r4,1
    1890:	0004c2c0 	call	4c2c <exit>
    }
    
    return lbl;
    1894:	e0bffe03 	ldbu	r2,-8(fp)
}
    1898:	e037883a 	mov	sp,fp
    189c:	dfc00117 	ldw	ra,4(sp)
    18a0:	df000017 	ldw	fp,0(sp)
    18a4:	dec00204 	addi	sp,sp,8
    18a8:	f800283a 	ret

000018ac <clearScreen>:

/**
 * @details Clear terminal screen by printing an escape sequence
 */

void clearScreen(){
    18ac:	defffe04 	addi	sp,sp,-8
    18b0:	dfc00115 	stw	ra,4(sp)
    18b4:	df000015 	stw	fp,0(sp)
    18b8:	d839883a 	mov	fp,sp
    printf("\e[1;1H\e[2J");
    18bc:	01000074 	movhi	r4,1
    18c0:	210bf604 	addi	r4,r4,12248
    18c4:	0006e9c0 	call	6e9c <printf>
}
    18c8:	0001883a 	nop
    18cc:	e037883a 	mov	sp,fp
    18d0:	dfc00117 	ldw	ra,4(sp)
    18d4:	df000017 	ldw	fp,0(sp)
    18d8:	dec00204 	addi	sp,sp,8
    18dc:	f800283a 	ret

000018e0 <setColor>:

/**
 * @details Set text color in terminal by printing an escape sequence
 */

void setColor(Color c){
    18e0:	defffb04 	addi	sp,sp,-20
    18e4:	dfc00415 	stw	ra,16(sp)
    18e8:	df000315 	stw	fp,12(sp)
    18ec:	df000304 	addi	fp,sp,12
    18f0:	e13fff15 	stw	r4,-4(fp)
    char esc[5];
    strcpy(esc, "0;00");    // default WHITE
    18f4:	008c0c34 	movhi	r2,12336
    18f8:	108ecc04 	addi	r2,r2,15152
    18fc:	e0bffd15 	stw	r2,-12(fp)
    1900:	e03ffe05 	stb	zero,-8(fp)
    switch (c) {
    1904:	e0bfff17 	ldw	r2,-4(fp)
    1908:	108001a8 	cmpgeui	r2,r2,6
    190c:	10002b1e 	bne	r2,zero,19bc <setColor+0xdc>
    1910:	e0bfff17 	ldw	r2,-4(fp)
    1914:	100690ba 	slli	r3,r2,2
    1918:	00800034 	movhi	r2,0
    191c:	10864b04 	addi	r2,r2,6444
    1920:	1885883a 	add	r2,r3,r2
    1924:	10800017 	ldw	r2,0(r2)
    1928:	1000683a 	jmp	r2
    192c:	00001944 	movi	zero,101
    1930:	00001958 	cmpnei	zero,zero,101
    1934:	0000196c 	andhi	zero,zero,101
    1938:	00001980 	call	198 <alt_irq_handler+0x9c>
    193c:	00001994 	movui	zero,102
    1940:	000019a8 	cmpgeui	zero,zero,102
        case WHITE : strcpy(esc, "0;00");
    1944:	008c0c34 	movhi	r2,12336
    1948:	108ecc04 	addi	r2,r2,15152
    194c:	e0bffd15 	stw	r2,-12(fp)
    1950:	e03ffe05 	stb	zero,-8(fp)
            break;
    1954:	00001906 	br	19bc <setColor+0xdc>
        case RED   : strcpy(esc, "1;31");
    1958:	008c4cf4 	movhi	r2,12595
    195c:	108ecc44 	addi	r2,r2,15153
    1960:	e0bffd15 	stw	r2,-12(fp)
    1964:	e03ffe05 	stb	zero,-8(fp)
            break;
    1968:	00001406 	br	19bc <setColor+0xdc>
        case GREEN : strcpy(esc, "1;32");
    196c:	008c8cf4 	movhi	r2,12851
    1970:	108ecc44 	addi	r2,r2,15153
    1974:	e0bffd15 	stw	r2,-12(fp)
    1978:	e03ffe05 	stb	zero,-8(fp)
            break;
    197c:	00000f06 	br	19bc <setColor+0xdc>
        case YELLOW: strcpy(esc, "1;33");
    1980:	008cccf4 	movhi	r2,13107
    1984:	108ecc44 	addi	r2,r2,15153
    1988:	e0bffd15 	stw	r2,-12(fp)
    198c:	e03ffe05 	stb	zero,-8(fp)
            break;
    1990:	00000a06 	br	19bc <setColor+0xdc>
        case BLUE  : strcpy(esc, "1;34");
    1994:	008d0cf4 	movhi	r2,13363
    1998:	108ecc44 	addi	r2,r2,15153
    199c:	e0bffd15 	stw	r2,-12(fp)
    19a0:	e03ffe05 	stb	zero,-8(fp)
            break;
    19a4:	00000506 	br	19bc <setColor+0xdc>
        case CYAN  : strcpy(esc, "1;36");
    19a8:	008d8cf4 	movhi	r2,13875
    19ac:	108ecc44 	addi	r2,r2,15153
    19b0:	e0bffd15 	stw	r2,-12(fp)
    19b4:	e03ffe05 	stb	zero,-8(fp)
            break;
    19b8:	0001883a 	nop
    }
    printf("%c[%sm",27,esc);
    19bc:	e1bffd04 	addi	r6,fp,-12
    19c0:	014006c4 	movi	r5,27
    19c4:	01000074 	movhi	r4,1
    19c8:	210bf904 	addi	r4,r4,12260
    19cc:	0006e9c0 	call	6e9c <printf>
}
    19d0:	0001883a 	nop
    19d4:	e037883a 	mov	sp,fp
    19d8:	dfc00117 	ldw	ra,4(sp)
    19dc:	df000017 	ldw	fp,0(sp)
    19e0:	dec00204 	addi	sp,sp,8
    19e4:	f800283a 	ret

000019e8 <locateCursor>:

/**
 * @details Set cursor position to given coordinates in the terminal window
 */

void locateCursor(const int row, const int col){
    19e8:	defffc04 	addi	sp,sp,-16
    19ec:	dfc00315 	stw	ra,12(sp)
    19f0:	df000215 	stw	fp,8(sp)
    19f4:	df000204 	addi	fp,sp,8
    19f8:	e13ffe15 	stw	r4,-8(fp)
    19fc:	e17fff15 	stw	r5,-4(fp)
    printf("%c[%d;%dH",27,row,col);
    1a00:	e1ffff17 	ldw	r7,-4(fp)
    1a04:	e1bffe17 	ldw	r6,-8(fp)
    1a08:	014006c4 	movi	r5,27
    1a0c:	01000074 	movhi	r4,1
    1a10:	210bfb04 	addi	r4,r4,12268
    1a14:	0006e9c0 	call	6e9c <printf>
}
    1a18:	0001883a 	nop
    1a1c:	e037883a 	mov	sp,fp
    1a20:	dfc00117 	ldw	ra,4(sp)
    1a24:	df000017 	ldw	fp,0(sp)
    1a28:	dec00204 	addi	sp,sp,8
    1a2c:	f800283a 	ret

00001a30 <__mulsi3>:
    1a30:	0005883a 	mov	r2,zero
    1a34:	20000726 	beq	r4,zero,1a54 <__mulsi3+0x24>
    1a38:	20c0004c 	andi	r3,r4,1
    1a3c:	2008d07a 	srli	r4,r4,1
    1a40:	18000126 	beq	r3,zero,1a48 <__mulsi3+0x18>
    1a44:	1145883a 	add	r2,r2,r5
    1a48:	294b883a 	add	r5,r5,r5
    1a4c:	203ffa1e 	bne	r4,zero,1a38 <__alt_data_end+0xfffe1a38>
    1a50:	f800283a 	ret
    1a54:	f800283a 	ret

00001a58 <__divsf3>:
    1a58:	defff504 	addi	sp,sp,-44
    1a5c:	200cd5fa 	srli	r6,r4,23
    1a60:	dcc00415 	stw	r19,16(sp)
    1a64:	2026d7fa 	srli	r19,r4,31
    1a68:	00c02034 	movhi	r3,128
    1a6c:	dd800715 	stw	r22,28(sp)
    1a70:	dd000515 	stw	r20,20(sp)
    1a74:	dc800315 	stw	r18,12(sp)
    1a78:	18ffffc4 	addi	r3,r3,-1
    1a7c:	dfc00a15 	stw	ra,40(sp)
    1a80:	df000915 	stw	fp,36(sp)
    1a84:	ddc00815 	stw	r23,32(sp)
    1a88:	dd400615 	stw	r21,24(sp)
    1a8c:	dc400215 	stw	r17,8(sp)
    1a90:	dc000115 	stw	r16,4(sp)
    1a94:	35003fcc 	andi	r20,r6,255
    1a98:	1924703a 	and	r18,r3,r4
    1a9c:	9d803fcc 	andi	r22,r19,255
    1aa0:	a0005226 	beq	r20,zero,1bec <__divsf3+0x194>
    1aa4:	00803fc4 	movi	r2,255
    1aa8:	a0802e26 	beq	r20,r2,1b64 <__divsf3+0x10c>
    1aac:	91002034 	orhi	r4,r18,128
    1ab0:	202490fa 	slli	r18,r4,3
    1ab4:	a53fe044 	addi	r20,r20,-127
    1ab8:	0021883a 	mov	r16,zero
    1abc:	002f883a 	mov	r23,zero
    1ac0:	280cd5fa 	srli	r6,r5,23
    1ac4:	282ad7fa 	srli	r21,r5,31
    1ac8:	00c02034 	movhi	r3,128
    1acc:	18ffffc4 	addi	r3,r3,-1
    1ad0:	31803fcc 	andi	r6,r6,255
    1ad4:	1962703a 	and	r17,r3,r5
    1ad8:	af003fcc 	andi	fp,r21,255
    1adc:	30004a26 	beq	r6,zero,1c08 <__divsf3+0x1b0>
    1ae0:	00803fc4 	movi	r2,255
    1ae4:	30804526 	beq	r6,r2,1bfc <__divsf3+0x1a4>
    1ae8:	89402034 	orhi	r5,r17,128
    1aec:	282290fa 	slli	r17,r5,3
    1af0:	31bfe044 	addi	r6,r6,-127
    1af4:	000b883a 	mov	r5,zero
    1af8:	2c20b03a 	or	r16,r5,r16
    1afc:	802090ba 	slli	r16,r16,2
    1b00:	00800034 	movhi	r2,0
    1b04:	1086c904 	addi	r2,r2,6948
    1b08:	80a1883a 	add	r16,r16,r2
    1b0c:	81000017 	ldw	r4,0(r16)
    1b10:	9d46f03a 	xor	r3,r19,r21
    1b14:	180f883a 	mov	r7,r3
    1b18:	18803fcc 	andi	r2,r3,255
    1b1c:	a18dc83a 	sub	r6,r20,r6
    1b20:	2000683a 	jmp	r4
    1b24:	00001d08 	cmpgei	zero,zero,116
    1b28:	00001b8c 	andi	zero,zero,110
    1b2c:	00001cfc 	xorhi	zero,zero,115
    1b30:	00001b78 	rdprs	zero,zero,109
    1b34:	00001cfc 	xorhi	zero,zero,115
    1b38:	00001cd4 	movui	zero,115
    1b3c:	00001cfc 	xorhi	zero,zero,115
    1b40:	00001b78 	rdprs	zero,zero,109
    1b44:	00001b8c 	andi	zero,zero,110
    1b48:	00001b8c 	andi	zero,zero,110
    1b4c:	00001cd4 	movui	zero,115
    1b50:	00001b78 	rdprs	zero,zero,109
    1b54:	00001de8 	cmpgeui	zero,zero,119
    1b58:	00001de8 	cmpgeui	zero,zero,119
    1b5c:	00001de8 	cmpgeui	zero,zero,119
    1b60:	00001d9c 	xori	zero,zero,118
    1b64:	9000581e 	bne	r18,zero,1cc8 <__divsf3+0x270>
    1b68:	04000204 	movi	r16,8
    1b6c:	05c00084 	movi	r23,2
    1b70:	003fd306 	br	1ac0 <__alt_data_end+0xfffe1ac0>
    1b74:	0023883a 	mov	r17,zero
    1b78:	e02d883a 	mov	r22,fp
    1b7c:	282f883a 	mov	r23,r5
    1b80:	00800084 	movi	r2,2
    1b84:	b8808f1e 	bne	r23,r2,1dc4 <__divsf3+0x36c>
    1b88:	b005883a 	mov	r2,r22
    1b8c:	11c0004c 	andi	r7,r2,1
    1b90:	013fffc4 	movi	r4,-1
    1b94:	000d883a 	mov	r6,zero
    1b98:	21003fcc 	andi	r4,r4,255
    1b9c:	200895fa 	slli	r4,r4,23
    1ba0:	38803fcc 	andi	r2,r7,255
    1ba4:	00c02034 	movhi	r3,128
    1ba8:	100497fa 	slli	r2,r2,31
    1bac:	18ffffc4 	addi	r3,r3,-1
    1bb0:	30c6703a 	and	r3,r6,r3
    1bb4:	1906b03a 	or	r3,r3,r4
    1bb8:	1884b03a 	or	r2,r3,r2
    1bbc:	dfc00a17 	ldw	ra,40(sp)
    1bc0:	df000917 	ldw	fp,36(sp)
    1bc4:	ddc00817 	ldw	r23,32(sp)
    1bc8:	dd800717 	ldw	r22,28(sp)
    1bcc:	dd400617 	ldw	r21,24(sp)
    1bd0:	dd000517 	ldw	r20,20(sp)
    1bd4:	dcc00417 	ldw	r19,16(sp)
    1bd8:	dc800317 	ldw	r18,12(sp)
    1bdc:	dc400217 	ldw	r17,8(sp)
    1be0:	dc000117 	ldw	r16,4(sp)
    1be4:	dec00b04 	addi	sp,sp,44
    1be8:	f800283a 	ret
    1bec:	90002b1e 	bne	r18,zero,1c9c <__divsf3+0x244>
    1bf0:	04000104 	movi	r16,4
    1bf4:	05c00044 	movi	r23,1
    1bf8:	003fb106 	br	1ac0 <__alt_data_end+0xfffe1ac0>
    1bfc:	8800251e 	bne	r17,zero,1c94 <__divsf3+0x23c>
    1c00:	01400084 	movi	r5,2
    1c04:	00000206 	br	1c10 <__divsf3+0x1b8>
    1c08:	88001a1e 	bne	r17,zero,1c74 <__divsf3+0x21c>
    1c0c:	01400044 	movi	r5,1
    1c10:	8160b03a 	or	r16,r16,r5
    1c14:	802090ba 	slli	r16,r16,2
    1c18:	00c00034 	movhi	r3,0
    1c1c:	18c70d04 	addi	r3,r3,7220
    1c20:	80e1883a 	add	r16,r16,r3
    1c24:	80c00017 	ldw	r3,0(r16)
    1c28:	9d44f03a 	xor	r2,r19,r21
    1c2c:	a18dc83a 	sub	r6,r20,r6
    1c30:	1800683a 	jmp	r3
    1c34:	00001b8c 	andi	zero,zero,110
    1c38:	00001b8c 	andi	zero,zero,110
    1c3c:	00001dd8 	cmpnei	zero,zero,119
    1c40:	00001b74 	movhi	zero,109
    1c44:	00001dd8 	cmpnei	zero,zero,119
    1c48:	00001cd4 	movui	zero,115
    1c4c:	00001dd8 	cmpnei	zero,zero,119
    1c50:	00001b74 	movhi	zero,109
    1c54:	00001b8c 	andi	zero,zero,110
    1c58:	00001b8c 	andi	zero,zero,110
    1c5c:	00001cd4 	movui	zero,115
    1c60:	00001b74 	movhi	zero,109
    1c64:	00001de8 	cmpgeui	zero,zero,119
    1c68:	00001de8 	cmpgeui	zero,zero,119
    1c6c:	00001de8 	cmpgeui	zero,zero,119
    1c70:	00001e00 	call	1e0 <alt_instruction_exception_entry+0x10>
    1c74:	8809883a 	mov	r4,r17
    1c78:	00049f80 	call	49f8 <__clzsi2>
    1c7c:	10fffec4 	addi	r3,r2,-5
    1c80:	10801d84 	addi	r2,r2,118
    1c84:	88e2983a 	sll	r17,r17,r3
    1c88:	008dc83a 	sub	r6,zero,r2
    1c8c:	000b883a 	mov	r5,zero
    1c90:	003f9906 	br	1af8 <__alt_data_end+0xfffe1af8>
    1c94:	014000c4 	movi	r5,3
    1c98:	003f9706 	br	1af8 <__alt_data_end+0xfffe1af8>
    1c9c:	9009883a 	mov	r4,r18
    1ca0:	d9400015 	stw	r5,0(sp)
    1ca4:	00049f80 	call	49f8 <__clzsi2>
    1ca8:	10fffec4 	addi	r3,r2,-5
    1cac:	11801d84 	addi	r6,r2,118
    1cb0:	90e4983a 	sll	r18,r18,r3
    1cb4:	01a9c83a 	sub	r20,zero,r6
    1cb8:	0021883a 	mov	r16,zero
    1cbc:	002f883a 	mov	r23,zero
    1cc0:	d9400017 	ldw	r5,0(sp)
    1cc4:	003f7e06 	br	1ac0 <__alt_data_end+0xfffe1ac0>
    1cc8:	04000304 	movi	r16,12
    1ccc:	05c000c4 	movi	r23,3
    1cd0:	003f7b06 	br	1ac0 <__alt_data_end+0xfffe1ac0>
    1cd4:	01802034 	movhi	r6,128
    1cd8:	000f883a 	mov	r7,zero
    1cdc:	31bfffc4 	addi	r6,r6,-1
    1ce0:	013fffc4 	movi	r4,-1
    1ce4:	003fac06 	br	1b98 <__alt_data_end+0xfffe1b98>
    1ce8:	01400044 	movi	r5,1
    1cec:	2909c83a 	sub	r4,r5,r4
    1cf0:	00c006c4 	movi	r3,27
    1cf4:	19004b0e 	bge	r3,r4,1e24 <__divsf3+0x3cc>
    1cf8:	114e703a 	and	r7,r2,r5
    1cfc:	0009883a 	mov	r4,zero
    1d00:	000d883a 	mov	r6,zero
    1d04:	003fa406 	br	1b98 <__alt_data_end+0xfffe1b98>
    1d08:	9006917a 	slli	r3,r18,5
    1d0c:	8822917a 	slli	r17,r17,5
    1d10:	1c40372e 	bgeu	r3,r17,1df0 <__divsf3+0x398>
    1d14:	31bfffc4 	addi	r6,r6,-1
    1d18:	010006c4 	movi	r4,27
    1d1c:	000b883a 	mov	r5,zero
    1d20:	180f883a 	mov	r7,r3
    1d24:	294b883a 	add	r5,r5,r5
    1d28:	18c7883a 	add	r3,r3,r3
    1d2c:	38000116 	blt	r7,zero,1d34 <__divsf3+0x2dc>
    1d30:	1c400236 	bltu	r3,r17,1d3c <__divsf3+0x2e4>
    1d34:	1c47c83a 	sub	r3,r3,r17
    1d38:	29400054 	ori	r5,r5,1
    1d3c:	213fffc4 	addi	r4,r4,-1
    1d40:	203ff71e 	bne	r4,zero,1d20 <__alt_data_end+0xfffe1d20>
    1d44:	1806c03a 	cmpne	r3,r3,zero
    1d48:	1962b03a 	or	r17,r3,r5
    1d4c:	31001fc4 	addi	r4,r6,127
    1d50:	013fe50e 	bge	zero,r4,1ce8 <__alt_data_end+0xfffe1ce8>
    1d54:	88c001cc 	andi	r3,r17,7
    1d58:	18000426 	beq	r3,zero,1d6c <__divsf3+0x314>
    1d5c:	88c003cc 	andi	r3,r17,15
    1d60:	01400104 	movi	r5,4
    1d64:	19400126 	beq	r3,r5,1d6c <__divsf3+0x314>
    1d68:	8963883a 	add	r17,r17,r5
    1d6c:	88c2002c 	andhi	r3,r17,2048
    1d70:	18000426 	beq	r3,zero,1d84 <__divsf3+0x32c>
    1d74:	00fe0034 	movhi	r3,63488
    1d78:	18ffffc4 	addi	r3,r3,-1
    1d7c:	31002004 	addi	r4,r6,128
    1d80:	88e2703a 	and	r17,r17,r3
    1d84:	00c03f84 	movi	r3,254
    1d88:	193f8016 	blt	r3,r4,1b8c <__alt_data_end+0xfffe1b8c>
    1d8c:	880c91ba 	slli	r6,r17,6
    1d90:	11c0004c 	andi	r7,r2,1
    1d94:	300cd27a 	srli	r6,r6,9
    1d98:	003f7f06 	br	1b98 <__alt_data_end+0xfffe1b98>
    1d9c:	9080102c 	andhi	r2,r18,64
    1da0:	10000226 	beq	r2,zero,1dac <__divsf3+0x354>
    1da4:	8880102c 	andhi	r2,r17,64
    1da8:	10001826 	beq	r2,zero,1e0c <__divsf3+0x3b4>
    1dac:	00802034 	movhi	r2,128
    1db0:	91801034 	orhi	r6,r18,64
    1db4:	10bfffc4 	addi	r2,r2,-1
    1db8:	980f883a 	mov	r7,r19
    1dbc:	308c703a 	and	r6,r6,r2
    1dc0:	003fc706 	br	1ce0 <__alt_data_end+0xfffe1ce0>
    1dc4:	008000c4 	movi	r2,3
    1dc8:	b8802d26 	beq	r23,r2,1e80 <__divsf3+0x428>
    1dcc:	00c00044 	movi	r3,1
    1dd0:	b005883a 	mov	r2,r22
    1dd4:	b8ffdd1e 	bne	r23,r3,1d4c <__alt_data_end+0xfffe1d4c>
    1dd8:	11c0004c 	andi	r7,r2,1
    1ddc:	0009883a 	mov	r4,zero
    1de0:	000d883a 	mov	r6,zero
    1de4:	003f6c06 	br	1b98 <__alt_data_end+0xfffe1b98>
    1de8:	9023883a 	mov	r17,r18
    1dec:	003f6406 	br	1b80 <__alt_data_end+0xfffe1b80>
    1df0:	1c47c83a 	sub	r3,r3,r17
    1df4:	01000684 	movi	r4,26
    1df8:	01400044 	movi	r5,1
    1dfc:	003fc806 	br	1d20 <__alt_data_end+0xfffe1d20>
    1e00:	9080102c 	andhi	r2,r18,64
    1e04:	103fe926 	beq	r2,zero,1dac <__alt_data_end+0xfffe1dac>
    1e08:	0023883a 	mov	r17,zero
    1e0c:	00802034 	movhi	r2,128
    1e10:	89801034 	orhi	r6,r17,64
    1e14:	10bfffc4 	addi	r2,r2,-1
    1e18:	a80f883a 	mov	r7,r21
    1e1c:	308c703a 	and	r6,r6,r2
    1e20:	003faf06 	br	1ce0 <__alt_data_end+0xfffe1ce0>
    1e24:	01c00804 	movi	r7,32
    1e28:	390fc83a 	sub	r7,r7,r4
    1e2c:	89ce983a 	sll	r7,r17,r7
    1e30:	890ad83a 	srl	r5,r17,r4
    1e34:	380ec03a 	cmpne	r7,r7,zero
    1e38:	29cab03a 	or	r5,r5,r7
    1e3c:	28c001cc 	andi	r3,r5,7
    1e40:	18000426 	beq	r3,zero,1e54 <__divsf3+0x3fc>
    1e44:	28c003cc 	andi	r3,r5,15
    1e48:	01000104 	movi	r4,4
    1e4c:	19000126 	beq	r3,r4,1e54 <__divsf3+0x3fc>
    1e50:	290b883a 	add	r5,r5,r4
    1e54:	28c1002c 	andhi	r3,r5,1024
    1e58:	18000426 	beq	r3,zero,1e6c <__divsf3+0x414>
    1e5c:	11c0004c 	andi	r7,r2,1
    1e60:	01000044 	movi	r4,1
    1e64:	000d883a 	mov	r6,zero
    1e68:	003f4b06 	br	1b98 <__alt_data_end+0xfffe1b98>
    1e6c:	280a91ba 	slli	r5,r5,6
    1e70:	11c0004c 	andi	r7,r2,1
    1e74:	0009883a 	mov	r4,zero
    1e78:	280cd27a 	srli	r6,r5,9
    1e7c:	003f4606 	br	1b98 <__alt_data_end+0xfffe1b98>
    1e80:	00802034 	movhi	r2,128
    1e84:	89801034 	orhi	r6,r17,64
    1e88:	10bfffc4 	addi	r2,r2,-1
    1e8c:	b00f883a 	mov	r7,r22
    1e90:	308c703a 	and	r6,r6,r2
    1e94:	003f9206 	br	1ce0 <__alt_data_end+0xfffe1ce0>

00001e98 <__mulsf3>:
    1e98:	defff504 	addi	sp,sp,-44
    1e9c:	dc000115 	stw	r16,4(sp)
    1ea0:	2020d5fa 	srli	r16,r4,23
    1ea4:	dd400615 	stw	r21,24(sp)
    1ea8:	202ad7fa 	srli	r21,r4,31
    1eac:	dc800315 	stw	r18,12(sp)
    1eb0:	04802034 	movhi	r18,128
    1eb4:	df000915 	stw	fp,36(sp)
    1eb8:	dd000515 	stw	r20,20(sp)
    1ebc:	94bfffc4 	addi	r18,r18,-1
    1ec0:	dfc00a15 	stw	ra,40(sp)
    1ec4:	ddc00815 	stw	r23,32(sp)
    1ec8:	dd800715 	stw	r22,28(sp)
    1ecc:	dcc00415 	stw	r19,16(sp)
    1ed0:	dc400215 	stw	r17,8(sp)
    1ed4:	84003fcc 	andi	r16,r16,255
    1ed8:	9124703a 	and	r18,r18,r4
    1edc:	a829883a 	mov	r20,r21
    1ee0:	af003fcc 	andi	fp,r21,255
    1ee4:	80005426 	beq	r16,zero,2038 <__mulsf3+0x1a0>
    1ee8:	00803fc4 	movi	r2,255
    1eec:	80802f26 	beq	r16,r2,1fac <__mulsf3+0x114>
    1ef0:	91002034 	orhi	r4,r18,128
    1ef4:	202490fa 	slli	r18,r4,3
    1ef8:	843fe044 	addi	r16,r16,-127
    1efc:	0023883a 	mov	r17,zero
    1f00:	002f883a 	mov	r23,zero
    1f04:	2804d5fa 	srli	r2,r5,23
    1f08:	282cd7fa 	srli	r22,r5,31
    1f0c:	01002034 	movhi	r4,128
    1f10:	213fffc4 	addi	r4,r4,-1
    1f14:	10803fcc 	andi	r2,r2,255
    1f18:	2166703a 	and	r19,r4,r5
    1f1c:	b1803fcc 	andi	r6,r22,255
    1f20:	10004c26 	beq	r2,zero,2054 <__mulsf3+0x1bc>
    1f24:	00c03fc4 	movi	r3,255
    1f28:	10c04726 	beq	r2,r3,2048 <__mulsf3+0x1b0>
    1f2c:	99002034 	orhi	r4,r19,128
    1f30:	202690fa 	slli	r19,r4,3
    1f34:	10bfe044 	addi	r2,r2,-127
    1f38:	0007883a 	mov	r3,zero
    1f3c:	80a1883a 	add	r16,r16,r2
    1f40:	010003c4 	movi	r4,15
    1f44:	1c44b03a 	or	r2,r3,r17
    1f48:	b56af03a 	xor	r21,r22,r21
    1f4c:	81c00044 	addi	r7,r16,1
    1f50:	20806b36 	bltu	r4,r2,2100 <__mulsf3+0x268>
    1f54:	100490ba 	slli	r2,r2,2
    1f58:	01000034 	movhi	r4,0
    1f5c:	2107db04 	addi	r4,r4,8044
    1f60:	1105883a 	add	r2,r2,r4
    1f64:	10800017 	ldw	r2,0(r2)
    1f68:	1000683a 	jmp	r2
    1f6c:	00002100 	call	210 <alt_instruction_exception_entry+0x40>
    1f70:	00001fc0 	call	1fc <alt_instruction_exception_entry+0x2c>
    1f74:	00001fc0 	call	1fc <alt_instruction_exception_entry+0x2c>
    1f78:	00001fbc 	xorhi	zero,zero,126
    1f7c:	000020e4 	muli	zero,zero,131
    1f80:	000020e4 	muli	zero,zero,131
    1f84:	000020d0 	cmplti	zero,zero,131
    1f88:	00001fbc 	xorhi	zero,zero,126
    1f8c:	000020e4 	muli	zero,zero,131
    1f90:	000020d0 	cmplti	zero,zero,131
    1f94:	000020e4 	muli	zero,zero,131
    1f98:	00001fbc 	xorhi	zero,zero,126
    1f9c:	000020f0 	cmpltui	zero,zero,131
    1fa0:	000020f0 	cmpltui	zero,zero,131
    1fa4:	000020f0 	cmpltui	zero,zero,131
    1fa8:	00002200 	call	220 <alt_instruction_exception_entry+0x50>
    1fac:	90003b1e 	bne	r18,zero,209c <__mulsf3+0x204>
    1fb0:	04400204 	movi	r17,8
    1fb4:	05c00084 	movi	r23,2
    1fb8:	003fd206 	br	1f04 <__alt_data_end+0xfffe1f04>
    1fbc:	302b883a 	mov	r21,r6
    1fc0:	00800084 	movi	r2,2
    1fc4:	18802626 	beq	r3,r2,2060 <__mulsf3+0x1c8>
    1fc8:	008000c4 	movi	r2,3
    1fcc:	1880b826 	beq	r3,r2,22b0 <__mulsf3+0x418>
    1fd0:	00800044 	movi	r2,1
    1fd4:	1880af1e 	bne	r3,r2,2294 <__mulsf3+0x3fc>
    1fd8:	a829883a 	mov	r20,r21
    1fdc:	0007883a 	mov	r3,zero
    1fe0:	0009883a 	mov	r4,zero
    1fe4:	18803fcc 	andi	r2,r3,255
    1fe8:	100695fa 	slli	r3,r2,23
    1fec:	a0803fcc 	andi	r2,r20,255
    1ff0:	100a97fa 	slli	r5,r2,31
    1ff4:	00802034 	movhi	r2,128
    1ff8:	10bfffc4 	addi	r2,r2,-1
    1ffc:	2084703a 	and	r2,r4,r2
    2000:	10c4b03a 	or	r2,r2,r3
    2004:	1144b03a 	or	r2,r2,r5
    2008:	dfc00a17 	ldw	ra,40(sp)
    200c:	df000917 	ldw	fp,36(sp)
    2010:	ddc00817 	ldw	r23,32(sp)
    2014:	dd800717 	ldw	r22,28(sp)
    2018:	dd400617 	ldw	r21,24(sp)
    201c:	dd000517 	ldw	r20,20(sp)
    2020:	dcc00417 	ldw	r19,16(sp)
    2024:	dc800317 	ldw	r18,12(sp)
    2028:	dc400217 	ldw	r17,8(sp)
    202c:	dc000117 	ldw	r16,4(sp)
    2030:	dec00b04 	addi	sp,sp,44
    2034:	f800283a 	ret
    2038:	90000d1e 	bne	r18,zero,2070 <__mulsf3+0x1d8>
    203c:	04400104 	movi	r17,4
    2040:	05c00044 	movi	r23,1
    2044:	003faf06 	br	1f04 <__alt_data_end+0xfffe1f04>
    2048:	9806c03a 	cmpne	r3,r19,zero
    204c:	18c00084 	addi	r3,r3,2
    2050:	003fba06 	br	1f3c <__alt_data_end+0xfffe1f3c>
    2054:	9800141e 	bne	r19,zero,20a8 <__mulsf3+0x210>
    2058:	00c00044 	movi	r3,1
    205c:	003fb706 	br	1f3c <__alt_data_end+0xfffe1f3c>
    2060:	a829883a 	mov	r20,r21
    2064:	00ffffc4 	movi	r3,-1
    2068:	0009883a 	mov	r4,zero
    206c:	003fdd06 	br	1fe4 <__alt_data_end+0xfffe1fe4>
    2070:	9009883a 	mov	r4,r18
    2074:	d9400015 	stw	r5,0(sp)
    2078:	00049f80 	call	49f8 <__clzsi2>
    207c:	10fffec4 	addi	r3,r2,-5
    2080:	10801d84 	addi	r2,r2,118
    2084:	90e4983a 	sll	r18,r18,r3
    2088:	00a1c83a 	sub	r16,zero,r2
    208c:	0023883a 	mov	r17,zero
    2090:	002f883a 	mov	r23,zero
    2094:	d9400017 	ldw	r5,0(sp)
    2098:	003f9a06 	br	1f04 <__alt_data_end+0xfffe1f04>
    209c:	04400304 	movi	r17,12
    20a0:	05c000c4 	movi	r23,3
    20a4:	003f9706 	br	1f04 <__alt_data_end+0xfffe1f04>
    20a8:	9809883a 	mov	r4,r19
    20ac:	d9800015 	stw	r6,0(sp)
    20b0:	00049f80 	call	49f8 <__clzsi2>
    20b4:	10fffec4 	addi	r3,r2,-5
    20b8:	10801d84 	addi	r2,r2,118
    20bc:	98e6983a 	sll	r19,r19,r3
    20c0:	0085c83a 	sub	r2,zero,r2
    20c4:	0007883a 	mov	r3,zero
    20c8:	d9800017 	ldw	r6,0(sp)
    20cc:	003f9b06 	br	1f3c <__alt_data_end+0xfffe1f3c>
    20d0:	01002034 	movhi	r4,128
    20d4:	0029883a 	mov	r20,zero
    20d8:	213fffc4 	addi	r4,r4,-1
    20dc:	00ffffc4 	movi	r3,-1
    20e0:	003fc006 	br	1fe4 <__alt_data_end+0xfffe1fe4>
    20e4:	9027883a 	mov	r19,r18
    20e8:	b807883a 	mov	r3,r23
    20ec:	003fb406 	br	1fc0 <__alt_data_end+0xfffe1fc0>
    20f0:	9027883a 	mov	r19,r18
    20f4:	e02b883a 	mov	r21,fp
    20f8:	b807883a 	mov	r3,r23
    20fc:	003fb006 	br	1fc0 <__alt_data_end+0xfffe1fc0>
    2100:	9028d43a 	srli	r20,r18,16
    2104:	982cd43a 	srli	r22,r19,16
    2108:	94bfffcc 	andi	r18,r18,65535
    210c:	9cffffcc 	andi	r19,r19,65535
    2110:	980b883a 	mov	r5,r19
    2114:	9009883a 	mov	r4,r18
    2118:	d9c00015 	stw	r7,0(sp)
    211c:	0001a300 	call	1a30 <__mulsi3>
    2120:	a00b883a 	mov	r5,r20
    2124:	9809883a 	mov	r4,r19
    2128:	1023883a 	mov	r17,r2
    212c:	0001a300 	call	1a30 <__mulsi3>
    2130:	a009883a 	mov	r4,r20
    2134:	b00b883a 	mov	r5,r22
    2138:	1027883a 	mov	r19,r2
    213c:	0001a300 	call	1a30 <__mulsi3>
    2140:	b00b883a 	mov	r5,r22
    2144:	9009883a 	mov	r4,r18
    2148:	1029883a 	mov	r20,r2
    214c:	0001a300 	call	1a30 <__mulsi3>
    2150:	8806d43a 	srli	r3,r17,16
    2154:	14c5883a 	add	r2,r2,r19
    2158:	d9c00017 	ldw	r7,0(sp)
    215c:	1885883a 	add	r2,r3,r2
    2160:	14c0022e 	bgeu	r2,r19,216c <__mulsf3+0x2d4>
    2164:	00c00074 	movhi	r3,1
    2168:	a0e9883a 	add	r20,r20,r3
    216c:	1026943a 	slli	r19,r2,16
    2170:	8c7fffcc 	andi	r17,r17,65535
    2174:	1004d43a 	srli	r2,r2,16
    2178:	9c63883a 	add	r17,r19,r17
    217c:	882691ba 	slli	r19,r17,6
    2180:	1505883a 	add	r2,r2,r20
    2184:	8822d6ba 	srli	r17,r17,26
    2188:	100891ba 	slli	r4,r2,6
    218c:	9826c03a 	cmpne	r19,r19,zero
    2190:	9c62b03a 	or	r17,r19,r17
    2194:	8926b03a 	or	r19,r17,r4
    2198:	9882002c 	andhi	r2,r19,2048
    219c:	10000426 	beq	r2,zero,21b0 <__mulsf3+0x318>
    21a0:	9804d07a 	srli	r2,r19,1
    21a4:	9900004c 	andi	r4,r19,1
    21a8:	3821883a 	mov	r16,r7
    21ac:	1126b03a 	or	r19,r2,r4
    21b0:	80c01fc4 	addi	r3,r16,127
    21b4:	00c0210e 	bge	zero,r3,223c <__mulsf3+0x3a4>
    21b8:	988001cc 	andi	r2,r19,7
    21bc:	10000426 	beq	r2,zero,21d0 <__mulsf3+0x338>
    21c0:	988003cc 	andi	r2,r19,15
    21c4:	01000104 	movi	r4,4
    21c8:	11000126 	beq	r2,r4,21d0 <__mulsf3+0x338>
    21cc:	9927883a 	add	r19,r19,r4
    21d0:	9882002c 	andhi	r2,r19,2048
    21d4:	10000426 	beq	r2,zero,21e8 <__mulsf3+0x350>
    21d8:	00be0034 	movhi	r2,63488
    21dc:	10bfffc4 	addi	r2,r2,-1
    21e0:	80c02004 	addi	r3,r16,128
    21e4:	98a6703a 	and	r19,r19,r2
    21e8:	00803f84 	movi	r2,254
    21ec:	10ff9c16 	blt	r2,r3,2060 <__alt_data_end+0xfffe2060>
    21f0:	980891ba 	slli	r4,r19,6
    21f4:	a829883a 	mov	r20,r21
    21f8:	2008d27a 	srli	r4,r4,9
    21fc:	003f7906 	br	1fe4 <__alt_data_end+0xfffe1fe4>
    2200:	9080102c 	andhi	r2,r18,64
    2204:	10000826 	beq	r2,zero,2228 <__mulsf3+0x390>
    2208:	9880102c 	andhi	r2,r19,64
    220c:	1000061e 	bne	r2,zero,2228 <__mulsf3+0x390>
    2210:	00802034 	movhi	r2,128
    2214:	99001034 	orhi	r4,r19,64
    2218:	10bfffc4 	addi	r2,r2,-1
    221c:	b029883a 	mov	r20,r22
    2220:	2088703a 	and	r4,r4,r2
    2224:	003fad06 	br	20dc <__alt_data_end+0xfffe20dc>
    2228:	00802034 	movhi	r2,128
    222c:	91001034 	orhi	r4,r18,64
    2230:	10bfffc4 	addi	r2,r2,-1
    2234:	2088703a 	and	r4,r4,r2
    2238:	003fa806 	br	20dc <__alt_data_end+0xfffe20dc>
    223c:	00800044 	movi	r2,1
    2240:	10c7c83a 	sub	r3,r2,r3
    2244:	008006c4 	movi	r2,27
    2248:	10ff6316 	blt	r2,r3,1fd8 <__alt_data_end+0xfffe1fd8>
    224c:	00800804 	movi	r2,32
    2250:	10c5c83a 	sub	r2,r2,r3
    2254:	9884983a 	sll	r2,r19,r2
    2258:	98c6d83a 	srl	r3,r19,r3
    225c:	1004c03a 	cmpne	r2,r2,zero
    2260:	1884b03a 	or	r2,r3,r2
    2264:	10c001cc 	andi	r3,r2,7
    2268:	18000426 	beq	r3,zero,227c <__mulsf3+0x3e4>
    226c:	10c003cc 	andi	r3,r2,15
    2270:	01000104 	movi	r4,4
    2274:	19000126 	beq	r3,r4,227c <__mulsf3+0x3e4>
    2278:	1105883a 	add	r2,r2,r4
    227c:	10c1002c 	andhi	r3,r2,1024
    2280:	18000626 	beq	r3,zero,229c <__mulsf3+0x404>
    2284:	a829883a 	mov	r20,r21
    2288:	00c00044 	movi	r3,1
    228c:	0009883a 	mov	r4,zero
    2290:	003f5406 	br	1fe4 <__alt_data_end+0xfffe1fe4>
    2294:	3821883a 	mov	r16,r7
    2298:	003fc506 	br	21b0 <__alt_data_end+0xfffe21b0>
    229c:	100491ba 	slli	r2,r2,6
    22a0:	a829883a 	mov	r20,r21
    22a4:	0007883a 	mov	r3,zero
    22a8:	1008d27a 	srli	r4,r2,9
    22ac:	003f4d06 	br	1fe4 <__alt_data_end+0xfffe1fe4>
    22b0:	00802034 	movhi	r2,128
    22b4:	99001034 	orhi	r4,r19,64
    22b8:	10bfffc4 	addi	r2,r2,-1
    22bc:	a829883a 	mov	r20,r21
    22c0:	2088703a 	and	r4,r4,r2
    22c4:	003f8506 	br	20dc <__alt_data_end+0xfffe20dc>

000022c8 <__fixsfsi>:
    22c8:	200ad5fa 	srli	r5,r4,23
    22cc:	00c02034 	movhi	r3,128
    22d0:	18ffffc4 	addi	r3,r3,-1
    22d4:	29403fcc 	andi	r5,r5,255
    22d8:	00801f84 	movi	r2,126
    22dc:	1906703a 	and	r3,r3,r4
    22e0:	2008d7fa 	srli	r4,r4,31
    22e4:	11400e0e 	bge	r2,r5,2320 <__fixsfsi+0x58>
    22e8:	00802744 	movi	r2,157
    22ec:	11400816 	blt	r2,r5,2310 <__fixsfsi+0x48>
    22f0:	00802544 	movi	r2,149
    22f4:	18c02034 	orhi	r3,r3,128
    22f8:	11400b0e 	bge	r2,r5,2328 <__fixsfsi+0x60>
    22fc:	28bfda84 	addi	r2,r5,-150
    2300:	1884983a 	sll	r2,r3,r2
    2304:	20000726 	beq	r4,zero,2324 <__fixsfsi+0x5c>
    2308:	0085c83a 	sub	r2,zero,r2
    230c:	f800283a 	ret
    2310:	00a00034 	movhi	r2,32768
    2314:	10bfffc4 	addi	r2,r2,-1
    2318:	2085883a 	add	r2,r4,r2
    231c:	f800283a 	ret
    2320:	0005883a 	mov	r2,zero
    2324:	f800283a 	ret
    2328:	00802584 	movi	r2,150
    232c:	1145c83a 	sub	r2,r2,r5
    2330:	1884d83a 	srl	r2,r3,r2
    2334:	003ff306 	br	2304 <__alt_data_end+0xfffe2304>

00002338 <__floatsisf>:
    2338:	defffd04 	addi	sp,sp,-12
    233c:	dfc00215 	stw	ra,8(sp)
    2340:	dc400115 	stw	r17,4(sp)
    2344:	dc000015 	stw	r16,0(sp)
    2348:	20003526 	beq	r4,zero,2420 <__floatsisf+0xe8>
    234c:	2021883a 	mov	r16,r4
    2350:	2022d7fa 	srli	r17,r4,31
    2354:	20003616 	blt	r4,zero,2430 <__floatsisf+0xf8>
    2358:	8009883a 	mov	r4,r16
    235c:	00049f80 	call	49f8 <__clzsi2>
    2360:	00c02784 	movi	r3,158
    2364:	1887c83a 	sub	r3,r3,r2
    2368:	01002584 	movi	r4,150
    236c:	20c01416 	blt	r4,r3,23c0 <__floatsisf+0x88>
    2370:	20c9c83a 	sub	r4,r4,r3
    2374:	8120983a 	sll	r16,r16,r4
    2378:	00802034 	movhi	r2,128
    237c:	10bfffc4 	addi	r2,r2,-1
    2380:	8809883a 	mov	r4,r17
    2384:	80a0703a 	and	r16,r16,r2
    2388:	18803fcc 	andi	r2,r3,255
    238c:	100695fa 	slli	r3,r2,23
    2390:	20803fcc 	andi	r2,r4,255
    2394:	100897fa 	slli	r4,r2,31
    2398:	00802034 	movhi	r2,128
    239c:	10bfffc4 	addi	r2,r2,-1
    23a0:	8084703a 	and	r2,r16,r2
    23a4:	10c4b03a 	or	r2,r2,r3
    23a8:	1104b03a 	or	r2,r2,r4
    23ac:	dfc00217 	ldw	ra,8(sp)
    23b0:	dc400117 	ldw	r17,4(sp)
    23b4:	dc000017 	ldw	r16,0(sp)
    23b8:	dec00304 	addi	sp,sp,12
    23bc:	f800283a 	ret
    23c0:	01002644 	movi	r4,153
    23c4:	20c01c16 	blt	r4,r3,2438 <__floatsisf+0x100>
    23c8:	20c9c83a 	sub	r4,r4,r3
    23cc:	8120983a 	sll	r16,r16,r4
    23d0:	013f0034 	movhi	r4,64512
    23d4:	213fffc4 	addi	r4,r4,-1
    23d8:	814001cc 	andi	r5,r16,7
    23dc:	8108703a 	and	r4,r16,r4
    23e0:	28000426 	beq	r5,zero,23f4 <__floatsisf+0xbc>
    23e4:	840003cc 	andi	r16,r16,15
    23e8:	01400104 	movi	r5,4
    23ec:	81400126 	beq	r16,r5,23f4 <__floatsisf+0xbc>
    23f0:	2149883a 	add	r4,r4,r5
    23f4:	2141002c 	andhi	r5,r4,1024
    23f8:	28000526 	beq	r5,zero,2410 <__floatsisf+0xd8>
    23fc:	00c027c4 	movi	r3,159
    2400:	1887c83a 	sub	r3,r3,r2
    2404:	00bf0034 	movhi	r2,64512
    2408:	10bfffc4 	addi	r2,r2,-1
    240c:	2088703a 	and	r4,r4,r2
    2410:	202091ba 	slli	r16,r4,6
    2414:	8809883a 	mov	r4,r17
    2418:	8020d27a 	srli	r16,r16,9
    241c:	003fda06 	br	2388 <__alt_data_end+0xfffe2388>
    2420:	0009883a 	mov	r4,zero
    2424:	0007883a 	mov	r3,zero
    2428:	0021883a 	mov	r16,zero
    242c:	003fd606 	br	2388 <__alt_data_end+0xfffe2388>
    2430:	0121c83a 	sub	r16,zero,r4
    2434:	003fc806 	br	2358 <__alt_data_end+0xfffe2358>
    2438:	01002e44 	movi	r4,185
    243c:	20c9c83a 	sub	r4,r4,r3
    2440:	01400144 	movi	r5,5
    2444:	8108983a 	sll	r4,r16,r4
    2448:	288bc83a 	sub	r5,r5,r2
    244c:	8160d83a 	srl	r16,r16,r5
    2450:	2008c03a 	cmpne	r4,r4,zero
    2454:	8120b03a 	or	r16,r16,r4
    2458:	003fdd06 	br	23d0 <__alt_data_end+0xfffe23d0>

0000245c <__adddf3>:
    245c:	02c00434 	movhi	r11,16
    2460:	5affffc4 	addi	r11,r11,-1
    2464:	2806d7fa 	srli	r3,r5,31
    2468:	2ad4703a 	and	r10,r5,r11
    246c:	3ad2703a 	and	r9,r7,r11
    2470:	3804d53a 	srli	r2,r7,20
    2474:	3018d77a 	srli	r12,r6,29
    2478:	280ad53a 	srli	r5,r5,20
    247c:	501490fa 	slli	r10,r10,3
    2480:	2010d77a 	srli	r8,r4,29
    2484:	481290fa 	slli	r9,r9,3
    2488:	380ed7fa 	srli	r7,r7,31
    248c:	defffb04 	addi	sp,sp,-20
    2490:	dc800215 	stw	r18,8(sp)
    2494:	dc400115 	stw	r17,4(sp)
    2498:	dc000015 	stw	r16,0(sp)
    249c:	dfc00415 	stw	ra,16(sp)
    24a0:	dcc00315 	stw	r19,12(sp)
    24a4:	1c803fcc 	andi	r18,r3,255
    24a8:	2c01ffcc 	andi	r16,r5,2047
    24ac:	5210b03a 	or	r8,r10,r8
    24b0:	202290fa 	slli	r17,r4,3
    24b4:	1081ffcc 	andi	r2,r2,2047
    24b8:	4b12b03a 	or	r9,r9,r12
    24bc:	300c90fa 	slli	r6,r6,3
    24c0:	91c07526 	beq	r18,r7,2698 <__adddf3+0x23c>
    24c4:	8087c83a 	sub	r3,r16,r2
    24c8:	00c0ab0e 	bge	zero,r3,2778 <__adddf3+0x31c>
    24cc:	10002a1e 	bne	r2,zero,2578 <__adddf3+0x11c>
    24d0:	4984b03a 	or	r2,r9,r6
    24d4:	1000961e 	bne	r2,zero,2730 <__adddf3+0x2d4>
    24d8:	888001cc 	andi	r2,r17,7
    24dc:	10000726 	beq	r2,zero,24fc <__adddf3+0xa0>
    24e0:	888003cc 	andi	r2,r17,15
    24e4:	00c00104 	movi	r3,4
    24e8:	10c00426 	beq	r2,r3,24fc <__adddf3+0xa0>
    24ec:	88c7883a 	add	r3,r17,r3
    24f0:	1c63803a 	cmpltu	r17,r3,r17
    24f4:	4451883a 	add	r8,r8,r17
    24f8:	1823883a 	mov	r17,r3
    24fc:	4080202c 	andhi	r2,r8,128
    2500:	10005926 	beq	r2,zero,2668 <__adddf3+0x20c>
    2504:	84000044 	addi	r16,r16,1
    2508:	0081ffc4 	movi	r2,2047
    250c:	8080ba26 	beq	r16,r2,27f8 <__adddf3+0x39c>
    2510:	00bfe034 	movhi	r2,65408
    2514:	10bfffc4 	addi	r2,r2,-1
    2518:	4090703a 	and	r8,r8,r2
    251c:	4004977a 	slli	r2,r8,29
    2520:	4010927a 	slli	r8,r8,9
    2524:	8822d0fa 	srli	r17,r17,3
    2528:	8401ffcc 	andi	r16,r16,2047
    252c:	4010d33a 	srli	r8,r8,12
    2530:	9007883a 	mov	r3,r18
    2534:	1444b03a 	or	r2,r2,r17
    2538:	8401ffcc 	andi	r16,r16,2047
    253c:	8020953a 	slli	r16,r16,20
    2540:	18c03fcc 	andi	r3,r3,255
    2544:	01000434 	movhi	r4,16
    2548:	213fffc4 	addi	r4,r4,-1
    254c:	180697fa 	slli	r3,r3,31
    2550:	4110703a 	and	r8,r8,r4
    2554:	4410b03a 	or	r8,r8,r16
    2558:	40c6b03a 	or	r3,r8,r3
    255c:	dfc00417 	ldw	ra,16(sp)
    2560:	dcc00317 	ldw	r19,12(sp)
    2564:	dc800217 	ldw	r18,8(sp)
    2568:	dc400117 	ldw	r17,4(sp)
    256c:	dc000017 	ldw	r16,0(sp)
    2570:	dec00504 	addi	sp,sp,20
    2574:	f800283a 	ret
    2578:	0081ffc4 	movi	r2,2047
    257c:	80bfd626 	beq	r16,r2,24d8 <__alt_data_end+0xfffe24d8>
    2580:	4a402034 	orhi	r9,r9,128
    2584:	00800e04 	movi	r2,56
    2588:	10c09f16 	blt	r2,r3,2808 <__adddf3+0x3ac>
    258c:	008007c4 	movi	r2,31
    2590:	10c0c216 	blt	r2,r3,289c <__adddf3+0x440>
    2594:	00800804 	movi	r2,32
    2598:	10c5c83a 	sub	r2,r2,r3
    259c:	488a983a 	sll	r5,r9,r2
    25a0:	30c8d83a 	srl	r4,r6,r3
    25a4:	3084983a 	sll	r2,r6,r2
    25a8:	48c6d83a 	srl	r3,r9,r3
    25ac:	290cb03a 	or	r6,r5,r4
    25b0:	1004c03a 	cmpne	r2,r2,zero
    25b4:	308cb03a 	or	r6,r6,r2
    25b8:	898dc83a 	sub	r6,r17,r6
    25bc:	89a3803a 	cmpltu	r17,r17,r6
    25c0:	40d1c83a 	sub	r8,r8,r3
    25c4:	4451c83a 	sub	r8,r8,r17
    25c8:	3023883a 	mov	r17,r6
    25cc:	4080202c 	andhi	r2,r8,128
    25d0:	10002326 	beq	r2,zero,2660 <__adddf3+0x204>
    25d4:	04c02034 	movhi	r19,128
    25d8:	9cffffc4 	addi	r19,r19,-1
    25dc:	44e6703a 	and	r19,r8,r19
    25e0:	98007626 	beq	r19,zero,27bc <__adddf3+0x360>
    25e4:	9809883a 	mov	r4,r19
    25e8:	00049f80 	call	49f8 <__clzsi2>
    25ec:	10fffe04 	addi	r3,r2,-8
    25f0:	010007c4 	movi	r4,31
    25f4:	20c07716 	blt	r4,r3,27d4 <__adddf3+0x378>
    25f8:	00800804 	movi	r2,32
    25fc:	10c5c83a 	sub	r2,r2,r3
    2600:	8884d83a 	srl	r2,r17,r2
    2604:	98d0983a 	sll	r8,r19,r3
    2608:	88e2983a 	sll	r17,r17,r3
    260c:	1204b03a 	or	r2,r2,r8
    2610:	1c007416 	blt	r3,r16,27e4 <__adddf3+0x388>
    2614:	1c21c83a 	sub	r16,r3,r16
    2618:	82000044 	addi	r8,r16,1
    261c:	00c007c4 	movi	r3,31
    2620:	1a009116 	blt	r3,r8,2868 <__adddf3+0x40c>
    2624:	00c00804 	movi	r3,32
    2628:	1a07c83a 	sub	r3,r3,r8
    262c:	8a08d83a 	srl	r4,r17,r8
    2630:	88e2983a 	sll	r17,r17,r3
    2634:	10c6983a 	sll	r3,r2,r3
    2638:	1210d83a 	srl	r8,r2,r8
    263c:	8804c03a 	cmpne	r2,r17,zero
    2640:	1906b03a 	or	r3,r3,r4
    2644:	18a2b03a 	or	r17,r3,r2
    2648:	0021883a 	mov	r16,zero
    264c:	003fa206 	br	24d8 <__alt_data_end+0xfffe24d8>
    2650:	1890b03a 	or	r8,r3,r2
    2654:	40017d26 	beq	r8,zero,2c4c <__adddf3+0x7f0>
    2658:	1011883a 	mov	r8,r2
    265c:	1823883a 	mov	r17,r3
    2660:	888001cc 	andi	r2,r17,7
    2664:	103f9e1e 	bne	r2,zero,24e0 <__alt_data_end+0xfffe24e0>
    2668:	4004977a 	slli	r2,r8,29
    266c:	8822d0fa 	srli	r17,r17,3
    2670:	4010d0fa 	srli	r8,r8,3
    2674:	9007883a 	mov	r3,r18
    2678:	1444b03a 	or	r2,r2,r17
    267c:	0101ffc4 	movi	r4,2047
    2680:	81002426 	beq	r16,r4,2714 <__adddf3+0x2b8>
    2684:	8120703a 	and	r16,r16,r4
    2688:	01000434 	movhi	r4,16
    268c:	213fffc4 	addi	r4,r4,-1
    2690:	4110703a 	and	r8,r8,r4
    2694:	003fa806 	br	2538 <__alt_data_end+0xfffe2538>
    2698:	8089c83a 	sub	r4,r16,r2
    269c:	01005e0e 	bge	zero,r4,2818 <__adddf3+0x3bc>
    26a0:	10002b26 	beq	r2,zero,2750 <__adddf3+0x2f4>
    26a4:	0081ffc4 	movi	r2,2047
    26a8:	80bf8b26 	beq	r16,r2,24d8 <__alt_data_end+0xfffe24d8>
    26ac:	4a402034 	orhi	r9,r9,128
    26b0:	00800e04 	movi	r2,56
    26b4:	1100a40e 	bge	r2,r4,2948 <__adddf3+0x4ec>
    26b8:	498cb03a 	or	r6,r9,r6
    26bc:	300ac03a 	cmpne	r5,r6,zero
    26c0:	0013883a 	mov	r9,zero
    26c4:	2c4b883a 	add	r5,r5,r17
    26c8:	2c63803a 	cmpltu	r17,r5,r17
    26cc:	4a11883a 	add	r8,r9,r8
    26d0:	8a11883a 	add	r8,r17,r8
    26d4:	2823883a 	mov	r17,r5
    26d8:	4080202c 	andhi	r2,r8,128
    26dc:	103fe026 	beq	r2,zero,2660 <__alt_data_end+0xfffe2660>
    26e0:	84000044 	addi	r16,r16,1
    26e4:	0081ffc4 	movi	r2,2047
    26e8:	8080d226 	beq	r16,r2,2a34 <__adddf3+0x5d8>
    26ec:	00bfe034 	movhi	r2,65408
    26f0:	10bfffc4 	addi	r2,r2,-1
    26f4:	4090703a 	and	r8,r8,r2
    26f8:	880ad07a 	srli	r5,r17,1
    26fc:	400897fa 	slli	r4,r8,31
    2700:	88c0004c 	andi	r3,r17,1
    2704:	28e2b03a 	or	r17,r5,r3
    2708:	4010d07a 	srli	r8,r8,1
    270c:	2462b03a 	or	r17,r4,r17
    2710:	003f7106 	br	24d8 <__alt_data_end+0xfffe24d8>
    2714:	4088b03a 	or	r4,r8,r2
    2718:	20014526 	beq	r4,zero,2c30 <__adddf3+0x7d4>
    271c:	01000434 	movhi	r4,16
    2720:	42000234 	orhi	r8,r8,8
    2724:	213fffc4 	addi	r4,r4,-1
    2728:	4110703a 	and	r8,r8,r4
    272c:	003f8206 	br	2538 <__alt_data_end+0xfffe2538>
    2730:	18ffffc4 	addi	r3,r3,-1
    2734:	1800491e 	bne	r3,zero,285c <__adddf3+0x400>
    2738:	898bc83a 	sub	r5,r17,r6
    273c:	8963803a 	cmpltu	r17,r17,r5
    2740:	4251c83a 	sub	r8,r8,r9
    2744:	4451c83a 	sub	r8,r8,r17
    2748:	2823883a 	mov	r17,r5
    274c:	003f9f06 	br	25cc <__alt_data_end+0xfffe25cc>
    2750:	4984b03a 	or	r2,r9,r6
    2754:	103f6026 	beq	r2,zero,24d8 <__alt_data_end+0xfffe24d8>
    2758:	213fffc4 	addi	r4,r4,-1
    275c:	2000931e 	bne	r4,zero,29ac <__adddf3+0x550>
    2760:	898d883a 	add	r6,r17,r6
    2764:	3463803a 	cmpltu	r17,r6,r17
    2768:	4251883a 	add	r8,r8,r9
    276c:	8a11883a 	add	r8,r17,r8
    2770:	3023883a 	mov	r17,r6
    2774:	003fd806 	br	26d8 <__alt_data_end+0xfffe26d8>
    2778:	1800541e 	bne	r3,zero,28cc <__adddf3+0x470>
    277c:	80800044 	addi	r2,r16,1
    2780:	1081ffcc 	andi	r2,r2,2047
    2784:	00c00044 	movi	r3,1
    2788:	1880a00e 	bge	r3,r2,2a0c <__adddf3+0x5b0>
    278c:	8989c83a 	sub	r4,r17,r6
    2790:	8905803a 	cmpltu	r2,r17,r4
    2794:	4267c83a 	sub	r19,r8,r9
    2798:	98a7c83a 	sub	r19,r19,r2
    279c:	9880202c 	andhi	r2,r19,128
    27a0:	10006326 	beq	r2,zero,2930 <__adddf3+0x4d4>
    27a4:	3463c83a 	sub	r17,r6,r17
    27a8:	4a07c83a 	sub	r3,r9,r8
    27ac:	344d803a 	cmpltu	r6,r6,r17
    27b0:	19a7c83a 	sub	r19,r3,r6
    27b4:	3825883a 	mov	r18,r7
    27b8:	983f8a1e 	bne	r19,zero,25e4 <__alt_data_end+0xfffe25e4>
    27bc:	8809883a 	mov	r4,r17
    27c0:	00049f80 	call	49f8 <__clzsi2>
    27c4:	10800804 	addi	r2,r2,32
    27c8:	10fffe04 	addi	r3,r2,-8
    27cc:	010007c4 	movi	r4,31
    27d0:	20ff890e 	bge	r4,r3,25f8 <__alt_data_end+0xfffe25f8>
    27d4:	10bff604 	addi	r2,r2,-40
    27d8:	8884983a 	sll	r2,r17,r2
    27dc:	0023883a 	mov	r17,zero
    27e0:	1c3f8c0e 	bge	r3,r16,2614 <__alt_data_end+0xfffe2614>
    27e4:	023fe034 	movhi	r8,65408
    27e8:	423fffc4 	addi	r8,r8,-1
    27ec:	80e1c83a 	sub	r16,r16,r3
    27f0:	1210703a 	and	r8,r2,r8
    27f4:	003f3806 	br	24d8 <__alt_data_end+0xfffe24d8>
    27f8:	9007883a 	mov	r3,r18
    27fc:	0011883a 	mov	r8,zero
    2800:	0005883a 	mov	r2,zero
    2804:	003f4c06 	br	2538 <__alt_data_end+0xfffe2538>
    2808:	498cb03a 	or	r6,r9,r6
    280c:	300cc03a 	cmpne	r6,r6,zero
    2810:	0007883a 	mov	r3,zero
    2814:	003f6806 	br	25b8 <__alt_data_end+0xfffe25b8>
    2818:	20009c1e 	bne	r4,zero,2a8c <__adddf3+0x630>
    281c:	80800044 	addi	r2,r16,1
    2820:	1141ffcc 	andi	r5,r2,2047
    2824:	01000044 	movi	r4,1
    2828:	2140670e 	bge	r4,r5,29c8 <__adddf3+0x56c>
    282c:	0101ffc4 	movi	r4,2047
    2830:	11007f26 	beq	r2,r4,2a30 <__adddf3+0x5d4>
    2834:	898d883a 	add	r6,r17,r6
    2838:	4247883a 	add	r3,r8,r9
    283c:	3451803a 	cmpltu	r8,r6,r17
    2840:	40d1883a 	add	r8,r8,r3
    2844:	402297fa 	slli	r17,r8,31
    2848:	300cd07a 	srli	r6,r6,1
    284c:	4010d07a 	srli	r8,r8,1
    2850:	1021883a 	mov	r16,r2
    2854:	89a2b03a 	or	r17,r17,r6
    2858:	003f1f06 	br	24d8 <__alt_data_end+0xfffe24d8>
    285c:	0081ffc4 	movi	r2,2047
    2860:	80bf481e 	bne	r16,r2,2584 <__alt_data_end+0xfffe2584>
    2864:	003f1c06 	br	24d8 <__alt_data_end+0xfffe24d8>
    2868:	843ff844 	addi	r16,r16,-31
    286c:	01000804 	movi	r4,32
    2870:	1406d83a 	srl	r3,r2,r16
    2874:	41005026 	beq	r8,r4,29b8 <__adddf3+0x55c>
    2878:	01001004 	movi	r4,64
    287c:	2211c83a 	sub	r8,r4,r8
    2880:	1204983a 	sll	r2,r2,r8
    2884:	88a2b03a 	or	r17,r17,r2
    2888:	8822c03a 	cmpne	r17,r17,zero
    288c:	1c62b03a 	or	r17,r3,r17
    2890:	0011883a 	mov	r8,zero
    2894:	0021883a 	mov	r16,zero
    2898:	003f7106 	br	2660 <__alt_data_end+0xfffe2660>
    289c:	193ff804 	addi	r4,r3,-32
    28a0:	00800804 	movi	r2,32
    28a4:	4908d83a 	srl	r4,r9,r4
    28a8:	18804526 	beq	r3,r2,29c0 <__adddf3+0x564>
    28ac:	00801004 	movi	r2,64
    28b0:	10c5c83a 	sub	r2,r2,r3
    28b4:	4886983a 	sll	r3,r9,r2
    28b8:	198cb03a 	or	r6,r3,r6
    28bc:	300cc03a 	cmpne	r6,r6,zero
    28c0:	218cb03a 	or	r6,r4,r6
    28c4:	0007883a 	mov	r3,zero
    28c8:	003f3b06 	br	25b8 <__alt_data_end+0xfffe25b8>
    28cc:	80002a26 	beq	r16,zero,2978 <__adddf3+0x51c>
    28d0:	0101ffc4 	movi	r4,2047
    28d4:	11006826 	beq	r2,r4,2a78 <__adddf3+0x61c>
    28d8:	00c7c83a 	sub	r3,zero,r3
    28dc:	42002034 	orhi	r8,r8,128
    28e0:	01000e04 	movi	r4,56
    28e4:	20c07c16 	blt	r4,r3,2ad8 <__adddf3+0x67c>
    28e8:	010007c4 	movi	r4,31
    28ec:	20c0da16 	blt	r4,r3,2c58 <__adddf3+0x7fc>
    28f0:	01000804 	movi	r4,32
    28f4:	20c9c83a 	sub	r4,r4,r3
    28f8:	4114983a 	sll	r10,r8,r4
    28fc:	88cad83a 	srl	r5,r17,r3
    2900:	8908983a 	sll	r4,r17,r4
    2904:	40c6d83a 	srl	r3,r8,r3
    2908:	5162b03a 	or	r17,r10,r5
    290c:	2008c03a 	cmpne	r4,r4,zero
    2910:	8922b03a 	or	r17,r17,r4
    2914:	3463c83a 	sub	r17,r6,r17
    2918:	48c7c83a 	sub	r3,r9,r3
    291c:	344d803a 	cmpltu	r6,r6,r17
    2920:	1991c83a 	sub	r8,r3,r6
    2924:	1021883a 	mov	r16,r2
    2928:	3825883a 	mov	r18,r7
    292c:	003f2706 	br	25cc <__alt_data_end+0xfffe25cc>
    2930:	24d0b03a 	or	r8,r4,r19
    2934:	40001b1e 	bne	r8,zero,29a4 <__adddf3+0x548>
    2938:	0005883a 	mov	r2,zero
    293c:	0007883a 	mov	r3,zero
    2940:	0021883a 	mov	r16,zero
    2944:	003f4d06 	br	267c <__alt_data_end+0xfffe267c>
    2948:	008007c4 	movi	r2,31
    294c:	11003c16 	blt	r2,r4,2a40 <__adddf3+0x5e4>
    2950:	00800804 	movi	r2,32
    2954:	1105c83a 	sub	r2,r2,r4
    2958:	488e983a 	sll	r7,r9,r2
    295c:	310ad83a 	srl	r5,r6,r4
    2960:	3084983a 	sll	r2,r6,r2
    2964:	4912d83a 	srl	r9,r9,r4
    2968:	394ab03a 	or	r5,r7,r5
    296c:	1004c03a 	cmpne	r2,r2,zero
    2970:	288ab03a 	or	r5,r5,r2
    2974:	003f5306 	br	26c4 <__alt_data_end+0xfffe26c4>
    2978:	4448b03a 	or	r4,r8,r17
    297c:	20003e26 	beq	r4,zero,2a78 <__adddf3+0x61c>
    2980:	00c6303a 	nor	r3,zero,r3
    2984:	18003a1e 	bne	r3,zero,2a70 <__adddf3+0x614>
    2988:	3463c83a 	sub	r17,r6,r17
    298c:	4a07c83a 	sub	r3,r9,r8
    2990:	344d803a 	cmpltu	r6,r6,r17
    2994:	1991c83a 	sub	r8,r3,r6
    2998:	1021883a 	mov	r16,r2
    299c:	3825883a 	mov	r18,r7
    29a0:	003f0a06 	br	25cc <__alt_data_end+0xfffe25cc>
    29a4:	2023883a 	mov	r17,r4
    29a8:	003f0d06 	br	25e0 <__alt_data_end+0xfffe25e0>
    29ac:	0081ffc4 	movi	r2,2047
    29b0:	80bf3f1e 	bne	r16,r2,26b0 <__alt_data_end+0xfffe26b0>
    29b4:	003ec806 	br	24d8 <__alt_data_end+0xfffe24d8>
    29b8:	0005883a 	mov	r2,zero
    29bc:	003fb106 	br	2884 <__alt_data_end+0xfffe2884>
    29c0:	0007883a 	mov	r3,zero
    29c4:	003fbc06 	br	28b8 <__alt_data_end+0xfffe28b8>
    29c8:	4444b03a 	or	r2,r8,r17
    29cc:	8000871e 	bne	r16,zero,2bec <__adddf3+0x790>
    29d0:	1000ba26 	beq	r2,zero,2cbc <__adddf3+0x860>
    29d4:	4984b03a 	or	r2,r9,r6
    29d8:	103ebf26 	beq	r2,zero,24d8 <__alt_data_end+0xfffe24d8>
    29dc:	8985883a 	add	r2,r17,r6
    29e0:	4247883a 	add	r3,r8,r9
    29e4:	1451803a 	cmpltu	r8,r2,r17
    29e8:	40d1883a 	add	r8,r8,r3
    29ec:	40c0202c 	andhi	r3,r8,128
    29f0:	1023883a 	mov	r17,r2
    29f4:	183f1a26 	beq	r3,zero,2660 <__alt_data_end+0xfffe2660>
    29f8:	00bfe034 	movhi	r2,65408
    29fc:	10bfffc4 	addi	r2,r2,-1
    2a00:	2021883a 	mov	r16,r4
    2a04:	4090703a 	and	r8,r8,r2
    2a08:	003eb306 	br	24d8 <__alt_data_end+0xfffe24d8>
    2a0c:	4444b03a 	or	r2,r8,r17
    2a10:	8000291e 	bne	r16,zero,2ab8 <__adddf3+0x65c>
    2a14:	10004b1e 	bne	r2,zero,2b44 <__adddf3+0x6e8>
    2a18:	4990b03a 	or	r8,r9,r6
    2a1c:	40008b26 	beq	r8,zero,2c4c <__adddf3+0x7f0>
    2a20:	4811883a 	mov	r8,r9
    2a24:	3023883a 	mov	r17,r6
    2a28:	3825883a 	mov	r18,r7
    2a2c:	003eaa06 	br	24d8 <__alt_data_end+0xfffe24d8>
    2a30:	1021883a 	mov	r16,r2
    2a34:	0011883a 	mov	r8,zero
    2a38:	0005883a 	mov	r2,zero
    2a3c:	003f0f06 	br	267c <__alt_data_end+0xfffe267c>
    2a40:	217ff804 	addi	r5,r4,-32
    2a44:	00800804 	movi	r2,32
    2a48:	494ad83a 	srl	r5,r9,r5
    2a4c:	20807d26 	beq	r4,r2,2c44 <__adddf3+0x7e8>
    2a50:	00801004 	movi	r2,64
    2a54:	1109c83a 	sub	r4,r2,r4
    2a58:	4912983a 	sll	r9,r9,r4
    2a5c:	498cb03a 	or	r6,r9,r6
    2a60:	300cc03a 	cmpne	r6,r6,zero
    2a64:	298ab03a 	or	r5,r5,r6
    2a68:	0013883a 	mov	r9,zero
    2a6c:	003f1506 	br	26c4 <__alt_data_end+0xfffe26c4>
    2a70:	0101ffc4 	movi	r4,2047
    2a74:	113f9a1e 	bne	r2,r4,28e0 <__alt_data_end+0xfffe28e0>
    2a78:	4811883a 	mov	r8,r9
    2a7c:	3023883a 	mov	r17,r6
    2a80:	1021883a 	mov	r16,r2
    2a84:	3825883a 	mov	r18,r7
    2a88:	003e9306 	br	24d8 <__alt_data_end+0xfffe24d8>
    2a8c:	8000161e 	bne	r16,zero,2ae8 <__adddf3+0x68c>
    2a90:	444ab03a 	or	r5,r8,r17
    2a94:	28005126 	beq	r5,zero,2bdc <__adddf3+0x780>
    2a98:	0108303a 	nor	r4,zero,r4
    2a9c:	20004d1e 	bne	r4,zero,2bd4 <__adddf3+0x778>
    2aa0:	89a3883a 	add	r17,r17,r6
    2aa4:	4253883a 	add	r9,r8,r9
    2aa8:	898d803a 	cmpltu	r6,r17,r6
    2aac:	3251883a 	add	r8,r6,r9
    2ab0:	1021883a 	mov	r16,r2
    2ab4:	003f0806 	br	26d8 <__alt_data_end+0xfffe26d8>
    2ab8:	1000301e 	bne	r2,zero,2b7c <__adddf3+0x720>
    2abc:	4984b03a 	or	r2,r9,r6
    2ac0:	10007126 	beq	r2,zero,2c88 <__adddf3+0x82c>
    2ac4:	4811883a 	mov	r8,r9
    2ac8:	3023883a 	mov	r17,r6
    2acc:	3825883a 	mov	r18,r7
    2ad0:	0401ffc4 	movi	r16,2047
    2ad4:	003e8006 	br	24d8 <__alt_data_end+0xfffe24d8>
    2ad8:	4462b03a 	or	r17,r8,r17
    2adc:	8822c03a 	cmpne	r17,r17,zero
    2ae0:	0007883a 	mov	r3,zero
    2ae4:	003f8b06 	br	2914 <__alt_data_end+0xfffe2914>
    2ae8:	0141ffc4 	movi	r5,2047
    2aec:	11403b26 	beq	r2,r5,2bdc <__adddf3+0x780>
    2af0:	0109c83a 	sub	r4,zero,r4
    2af4:	42002034 	orhi	r8,r8,128
    2af8:	01400e04 	movi	r5,56
    2afc:	29006716 	blt	r5,r4,2c9c <__adddf3+0x840>
    2b00:	014007c4 	movi	r5,31
    2b04:	29007016 	blt	r5,r4,2cc8 <__adddf3+0x86c>
    2b08:	01400804 	movi	r5,32
    2b0c:	290bc83a 	sub	r5,r5,r4
    2b10:	4154983a 	sll	r10,r8,r5
    2b14:	890ed83a 	srl	r7,r17,r4
    2b18:	894a983a 	sll	r5,r17,r5
    2b1c:	4108d83a 	srl	r4,r8,r4
    2b20:	51e2b03a 	or	r17,r10,r7
    2b24:	280ac03a 	cmpne	r5,r5,zero
    2b28:	8962b03a 	or	r17,r17,r5
    2b2c:	89a3883a 	add	r17,r17,r6
    2b30:	2253883a 	add	r9,r4,r9
    2b34:	898d803a 	cmpltu	r6,r17,r6
    2b38:	3251883a 	add	r8,r6,r9
    2b3c:	1021883a 	mov	r16,r2
    2b40:	003ee506 	br	26d8 <__alt_data_end+0xfffe26d8>
    2b44:	4984b03a 	or	r2,r9,r6
    2b48:	103e6326 	beq	r2,zero,24d8 <__alt_data_end+0xfffe24d8>
    2b4c:	8987c83a 	sub	r3,r17,r6
    2b50:	88c9803a 	cmpltu	r4,r17,r3
    2b54:	4245c83a 	sub	r2,r8,r9
    2b58:	1105c83a 	sub	r2,r2,r4
    2b5c:	1100202c 	andhi	r4,r2,128
    2b60:	203ebb26 	beq	r4,zero,2650 <__alt_data_end+0xfffe2650>
    2b64:	3463c83a 	sub	r17,r6,r17
    2b68:	4a07c83a 	sub	r3,r9,r8
    2b6c:	344d803a 	cmpltu	r6,r6,r17
    2b70:	1991c83a 	sub	r8,r3,r6
    2b74:	3825883a 	mov	r18,r7
    2b78:	003e5706 	br	24d8 <__alt_data_end+0xfffe24d8>
    2b7c:	4984b03a 	or	r2,r9,r6
    2b80:	10002e26 	beq	r2,zero,2c3c <__adddf3+0x7e0>
    2b84:	4004d0fa 	srli	r2,r8,3
    2b88:	8822d0fa 	srli	r17,r17,3
    2b8c:	4010977a 	slli	r8,r8,29
    2b90:	10c0022c 	andhi	r3,r2,8
    2b94:	4462b03a 	or	r17,r8,r17
    2b98:	18000826 	beq	r3,zero,2bbc <__adddf3+0x760>
    2b9c:	4808d0fa 	srli	r4,r9,3
    2ba0:	20c0022c 	andhi	r3,r4,8
    2ba4:	1800051e 	bne	r3,zero,2bbc <__adddf3+0x760>
    2ba8:	300cd0fa 	srli	r6,r6,3
    2bac:	4806977a 	slli	r3,r9,29
    2bb0:	2005883a 	mov	r2,r4
    2bb4:	3825883a 	mov	r18,r7
    2bb8:	19a2b03a 	or	r17,r3,r6
    2bbc:	8810d77a 	srli	r8,r17,29
    2bc0:	100490fa 	slli	r2,r2,3
    2bc4:	882290fa 	slli	r17,r17,3
    2bc8:	0401ffc4 	movi	r16,2047
    2bcc:	4090b03a 	or	r8,r8,r2
    2bd0:	003e4106 	br	24d8 <__alt_data_end+0xfffe24d8>
    2bd4:	0141ffc4 	movi	r5,2047
    2bd8:	117fc71e 	bne	r2,r5,2af8 <__alt_data_end+0xfffe2af8>
    2bdc:	4811883a 	mov	r8,r9
    2be0:	3023883a 	mov	r17,r6
    2be4:	1021883a 	mov	r16,r2
    2be8:	003e3b06 	br	24d8 <__alt_data_end+0xfffe24d8>
    2bec:	10002f26 	beq	r2,zero,2cac <__adddf3+0x850>
    2bf0:	4984b03a 	or	r2,r9,r6
    2bf4:	10001126 	beq	r2,zero,2c3c <__adddf3+0x7e0>
    2bf8:	4004d0fa 	srli	r2,r8,3
    2bfc:	8822d0fa 	srli	r17,r17,3
    2c00:	4010977a 	slli	r8,r8,29
    2c04:	10c0022c 	andhi	r3,r2,8
    2c08:	4462b03a 	or	r17,r8,r17
    2c0c:	183feb26 	beq	r3,zero,2bbc <__alt_data_end+0xfffe2bbc>
    2c10:	4808d0fa 	srli	r4,r9,3
    2c14:	20c0022c 	andhi	r3,r4,8
    2c18:	183fe81e 	bne	r3,zero,2bbc <__alt_data_end+0xfffe2bbc>
    2c1c:	300cd0fa 	srli	r6,r6,3
    2c20:	4806977a 	slli	r3,r9,29
    2c24:	2005883a 	mov	r2,r4
    2c28:	19a2b03a 	or	r17,r3,r6
    2c2c:	003fe306 	br	2bbc <__alt_data_end+0xfffe2bbc>
    2c30:	0011883a 	mov	r8,zero
    2c34:	0005883a 	mov	r2,zero
    2c38:	003e3f06 	br	2538 <__alt_data_end+0xfffe2538>
    2c3c:	0401ffc4 	movi	r16,2047
    2c40:	003e2506 	br	24d8 <__alt_data_end+0xfffe24d8>
    2c44:	0013883a 	mov	r9,zero
    2c48:	003f8406 	br	2a5c <__alt_data_end+0xfffe2a5c>
    2c4c:	0005883a 	mov	r2,zero
    2c50:	0007883a 	mov	r3,zero
    2c54:	003e8906 	br	267c <__alt_data_end+0xfffe267c>
    2c58:	197ff804 	addi	r5,r3,-32
    2c5c:	01000804 	movi	r4,32
    2c60:	414ad83a 	srl	r5,r8,r5
    2c64:	19002426 	beq	r3,r4,2cf8 <__adddf3+0x89c>
    2c68:	01001004 	movi	r4,64
    2c6c:	20c7c83a 	sub	r3,r4,r3
    2c70:	40c6983a 	sll	r3,r8,r3
    2c74:	1c46b03a 	or	r3,r3,r17
    2c78:	1806c03a 	cmpne	r3,r3,zero
    2c7c:	28e2b03a 	or	r17,r5,r3
    2c80:	0007883a 	mov	r3,zero
    2c84:	003f2306 	br	2914 <__alt_data_end+0xfffe2914>
    2c88:	0007883a 	mov	r3,zero
    2c8c:	5811883a 	mov	r8,r11
    2c90:	00bfffc4 	movi	r2,-1
    2c94:	0401ffc4 	movi	r16,2047
    2c98:	003e7806 	br	267c <__alt_data_end+0xfffe267c>
    2c9c:	4462b03a 	or	r17,r8,r17
    2ca0:	8822c03a 	cmpne	r17,r17,zero
    2ca4:	0009883a 	mov	r4,zero
    2ca8:	003fa006 	br	2b2c <__alt_data_end+0xfffe2b2c>
    2cac:	4811883a 	mov	r8,r9
    2cb0:	3023883a 	mov	r17,r6
    2cb4:	0401ffc4 	movi	r16,2047
    2cb8:	003e0706 	br	24d8 <__alt_data_end+0xfffe24d8>
    2cbc:	4811883a 	mov	r8,r9
    2cc0:	3023883a 	mov	r17,r6
    2cc4:	003e0406 	br	24d8 <__alt_data_end+0xfffe24d8>
    2cc8:	21fff804 	addi	r7,r4,-32
    2ccc:	01400804 	movi	r5,32
    2cd0:	41ced83a 	srl	r7,r8,r7
    2cd4:	21400a26 	beq	r4,r5,2d00 <__adddf3+0x8a4>
    2cd8:	01401004 	movi	r5,64
    2cdc:	2909c83a 	sub	r4,r5,r4
    2ce0:	4108983a 	sll	r4,r8,r4
    2ce4:	2448b03a 	or	r4,r4,r17
    2ce8:	2008c03a 	cmpne	r4,r4,zero
    2cec:	3922b03a 	or	r17,r7,r4
    2cf0:	0009883a 	mov	r4,zero
    2cf4:	003f8d06 	br	2b2c <__alt_data_end+0xfffe2b2c>
    2cf8:	0007883a 	mov	r3,zero
    2cfc:	003fdd06 	br	2c74 <__alt_data_end+0xfffe2c74>
    2d00:	0009883a 	mov	r4,zero
    2d04:	003ff706 	br	2ce4 <__alt_data_end+0xfffe2ce4>

00002d08 <__divdf3>:
    2d08:	defff004 	addi	sp,sp,-64
    2d0c:	dc800815 	stw	r18,32(sp)
    2d10:	2824d53a 	srli	r18,r5,20
    2d14:	dd800c15 	stw	r22,48(sp)
    2d18:	282cd7fa 	srli	r22,r5,31
    2d1c:	dc000615 	stw	r16,24(sp)
    2d20:	04000434 	movhi	r16,16
    2d24:	843fffc4 	addi	r16,r16,-1
    2d28:	dfc00f15 	stw	ra,60(sp)
    2d2c:	df000e15 	stw	fp,56(sp)
    2d30:	ddc00d15 	stw	r23,52(sp)
    2d34:	dd400b15 	stw	r21,44(sp)
    2d38:	dd000a15 	stw	r20,40(sp)
    2d3c:	dcc00915 	stw	r19,36(sp)
    2d40:	dc400715 	stw	r17,28(sp)
    2d44:	9481ffcc 	andi	r18,r18,2047
    2d48:	2c20703a 	and	r16,r5,r16
    2d4c:	b2003fcc 	andi	r8,r22,255
    2d50:	90006126 	beq	r18,zero,2ed8 <__divdf3+0x1d0>
    2d54:	0081ffc4 	movi	r2,2047
    2d58:	202b883a 	mov	r21,r4
    2d5c:	90803726 	beq	r18,r2,2e3c <__divdf3+0x134>
    2d60:	80800434 	orhi	r2,r16,16
    2d64:	100490fa 	slli	r2,r2,3
    2d68:	2020d77a 	srli	r16,r4,29
    2d6c:	202a90fa 	slli	r21,r4,3
    2d70:	94bf0044 	addi	r18,r18,-1023
    2d74:	80a0b03a 	or	r16,r16,r2
    2d78:	0013883a 	mov	r9,zero
    2d7c:	000b883a 	mov	r5,zero
    2d80:	3806d53a 	srli	r3,r7,20
    2d84:	382ed7fa 	srli	r23,r7,31
    2d88:	04400434 	movhi	r17,16
    2d8c:	8c7fffc4 	addi	r17,r17,-1
    2d90:	18c1ffcc 	andi	r3,r3,2047
    2d94:	3029883a 	mov	r20,r6
    2d98:	3c62703a 	and	r17,r7,r17
    2d9c:	bf003fcc 	andi	fp,r23,255
    2da0:	18006e26 	beq	r3,zero,2f5c <__divdf3+0x254>
    2da4:	0081ffc4 	movi	r2,2047
    2da8:	18806626 	beq	r3,r2,2f44 <__divdf3+0x23c>
    2dac:	88800434 	orhi	r2,r17,16
    2db0:	100490fa 	slli	r2,r2,3
    2db4:	3022d77a 	srli	r17,r6,29
    2db8:	302890fa 	slli	r20,r6,3
    2dbc:	18ff0044 	addi	r3,r3,-1023
    2dc0:	88a2b03a 	or	r17,r17,r2
    2dc4:	000f883a 	mov	r7,zero
    2dc8:	b5e6f03a 	xor	r19,r22,r23
    2dcc:	3a4cb03a 	or	r6,r7,r9
    2dd0:	008003c4 	movi	r2,15
    2dd4:	9809883a 	mov	r4,r19
    2dd8:	90c7c83a 	sub	r3,r18,r3
    2ddc:	9cc03fcc 	andi	r19,r19,255
    2de0:	11809636 	bltu	r2,r6,303c <__divdf3+0x334>
    2de4:	300c90ba 	slli	r6,r6,2
    2de8:	00800034 	movhi	r2,0
    2dec:	108b7f04 	addi	r2,r2,11772
    2df0:	308d883a 	add	r6,r6,r2
    2df4:	30800017 	ldw	r2,0(r6)
    2df8:	1000683a 	jmp	r2
    2dfc:	0000303c 	xorhi	zero,zero,192
    2e00:	00002e74 	movhi	zero,185
    2e04:	0000302c 	andhi	zero,zero,192
    2e08:	00002e68 	cmpgeui	zero,zero,185
    2e0c:	0000302c 	andhi	zero,zero,192
    2e10:	00003000 	call	300 <getTargetOutput+0x94>
    2e14:	0000302c 	andhi	zero,zero,192
    2e18:	00002e68 	cmpgeui	zero,zero,185
    2e1c:	00002e74 	movhi	zero,185
    2e20:	00002e74 	movhi	zero,185
    2e24:	00003000 	call	300 <getTargetOutput+0x94>
    2e28:	00002e68 	cmpgeui	zero,zero,185
    2e2c:	00002e58 	cmpnei	zero,zero,185
    2e30:	00002e58 	cmpnei	zero,zero,185
    2e34:	00002e58 	cmpnei	zero,zero,185
    2e38:	000033c4 	movi	zero,207
    2e3c:	2404b03a 	or	r2,r4,r16
    2e40:	10006c1e 	bne	r2,zero,2ff4 <__divdf3+0x2ec>
    2e44:	02400204 	movi	r9,8
    2e48:	0021883a 	mov	r16,zero
    2e4c:	002b883a 	mov	r21,zero
    2e50:	01400084 	movi	r5,2
    2e54:	003fca06 	br	2d80 <__alt_data_end+0xfffe2d80>
    2e58:	8023883a 	mov	r17,r16
    2e5c:	a829883a 	mov	r20,r21
    2e60:	4039883a 	mov	fp,r8
    2e64:	280f883a 	mov	r7,r5
    2e68:	00800084 	movi	r2,2
    2e6c:	3881601e 	bne	r7,r2,33f0 <__divdf3+0x6e8>
    2e70:	e027883a 	mov	r19,fp
    2e74:	9900004c 	andi	r4,r19,1
    2e78:	0081ffc4 	movi	r2,2047
    2e7c:	0021883a 	mov	r16,zero
    2e80:	002b883a 	mov	r21,zero
    2e84:	1004953a 	slli	r2,r2,20
    2e88:	20c03fcc 	andi	r3,r4,255
    2e8c:	01400434 	movhi	r5,16
    2e90:	297fffc4 	addi	r5,r5,-1
    2e94:	180697fa 	slli	r3,r3,31
    2e98:	8160703a 	and	r16,r16,r5
    2e9c:	80a0b03a 	or	r16,r16,r2
    2ea0:	80c6b03a 	or	r3,r16,r3
    2ea4:	a805883a 	mov	r2,r21
    2ea8:	dfc00f17 	ldw	ra,60(sp)
    2eac:	df000e17 	ldw	fp,56(sp)
    2eb0:	ddc00d17 	ldw	r23,52(sp)
    2eb4:	dd800c17 	ldw	r22,48(sp)
    2eb8:	dd400b17 	ldw	r21,44(sp)
    2ebc:	dd000a17 	ldw	r20,40(sp)
    2ec0:	dcc00917 	ldw	r19,36(sp)
    2ec4:	dc800817 	ldw	r18,32(sp)
    2ec8:	dc400717 	ldw	r17,28(sp)
    2ecc:	dc000617 	ldw	r16,24(sp)
    2ed0:	dec01004 	addi	sp,sp,64
    2ed4:	f800283a 	ret
    2ed8:	2404b03a 	or	r2,r4,r16
    2edc:	2023883a 	mov	r17,r4
    2ee0:	10003f26 	beq	r2,zero,2fe0 <__divdf3+0x2d8>
    2ee4:	80015e26 	beq	r16,zero,3460 <__divdf3+0x758>
    2ee8:	8009883a 	mov	r4,r16
    2eec:	d9800215 	stw	r6,8(sp)
    2ef0:	d9c00515 	stw	r7,20(sp)
    2ef4:	da000415 	stw	r8,16(sp)
    2ef8:	00049f80 	call	49f8 <__clzsi2>
    2efc:	d9800217 	ldw	r6,8(sp)
    2f00:	d9c00517 	ldw	r7,20(sp)
    2f04:	da000417 	ldw	r8,16(sp)
    2f08:	113ffd44 	addi	r4,r2,-11
    2f0c:	00c00704 	movi	r3,28
    2f10:	19014f16 	blt	r3,r4,3450 <__divdf3+0x748>
    2f14:	00c00744 	movi	r3,29
    2f18:	157ffe04 	addi	r21,r2,-8
    2f1c:	1907c83a 	sub	r3,r3,r4
    2f20:	8560983a 	sll	r16,r16,r21
    2f24:	88c6d83a 	srl	r3,r17,r3
    2f28:	8d6a983a 	sll	r21,r17,r21
    2f2c:	1c20b03a 	or	r16,r3,r16
    2f30:	1080fcc4 	addi	r2,r2,1011
    2f34:	00a5c83a 	sub	r18,zero,r2
    2f38:	0013883a 	mov	r9,zero
    2f3c:	000b883a 	mov	r5,zero
    2f40:	003f8f06 	br	2d80 <__alt_data_end+0xfffe2d80>
    2f44:	3444b03a 	or	r2,r6,r17
    2f48:	1000231e 	bne	r2,zero,2fd8 <__divdf3+0x2d0>
    2f4c:	0023883a 	mov	r17,zero
    2f50:	0029883a 	mov	r20,zero
    2f54:	01c00084 	movi	r7,2
    2f58:	003f9b06 	br	2dc8 <__alt_data_end+0xfffe2dc8>
    2f5c:	3444b03a 	or	r2,r6,r17
    2f60:	10001926 	beq	r2,zero,2fc8 <__divdf3+0x2c0>
    2f64:	88014b26 	beq	r17,zero,3494 <__divdf3+0x78c>
    2f68:	8809883a 	mov	r4,r17
    2f6c:	d9400115 	stw	r5,4(sp)
    2f70:	d9800215 	stw	r6,8(sp)
    2f74:	da000415 	stw	r8,16(sp)
    2f78:	da400315 	stw	r9,12(sp)
    2f7c:	00049f80 	call	49f8 <__clzsi2>
    2f80:	d9400117 	ldw	r5,4(sp)
    2f84:	d9800217 	ldw	r6,8(sp)
    2f88:	da000417 	ldw	r8,16(sp)
    2f8c:	da400317 	ldw	r9,12(sp)
    2f90:	113ffd44 	addi	r4,r2,-11
    2f94:	00c00704 	movi	r3,28
    2f98:	19013a16 	blt	r3,r4,3484 <__divdf3+0x77c>
    2f9c:	00c00744 	movi	r3,29
    2fa0:	153ffe04 	addi	r20,r2,-8
    2fa4:	1907c83a 	sub	r3,r3,r4
    2fa8:	8d22983a 	sll	r17,r17,r20
    2fac:	30c6d83a 	srl	r3,r6,r3
    2fb0:	3528983a 	sll	r20,r6,r20
    2fb4:	1c62b03a 	or	r17,r3,r17
    2fb8:	1080fcc4 	addi	r2,r2,1011
    2fbc:	0087c83a 	sub	r3,zero,r2
    2fc0:	000f883a 	mov	r7,zero
    2fc4:	003f8006 	br	2dc8 <__alt_data_end+0xfffe2dc8>
    2fc8:	0023883a 	mov	r17,zero
    2fcc:	0029883a 	mov	r20,zero
    2fd0:	01c00044 	movi	r7,1
    2fd4:	003f7c06 	br	2dc8 <__alt_data_end+0xfffe2dc8>
    2fd8:	01c000c4 	movi	r7,3
    2fdc:	003f7a06 	br	2dc8 <__alt_data_end+0xfffe2dc8>
    2fe0:	02400104 	movi	r9,4
    2fe4:	0021883a 	mov	r16,zero
    2fe8:	002b883a 	mov	r21,zero
    2fec:	01400044 	movi	r5,1
    2ff0:	003f6306 	br	2d80 <__alt_data_end+0xfffe2d80>
    2ff4:	02400304 	movi	r9,12
    2ff8:	014000c4 	movi	r5,3
    2ffc:	003f6006 	br	2d80 <__alt_data_end+0xfffe2d80>
    3000:	04000434 	movhi	r16,16
    3004:	0009883a 	mov	r4,zero
    3008:	843fffc4 	addi	r16,r16,-1
    300c:	057fffc4 	movi	r21,-1
    3010:	0081ffc4 	movi	r2,2047
    3014:	003f9b06 	br	2e84 <__alt_data_end+0xfffe2e84>
    3018:	00c00044 	movi	r3,1
    301c:	1887c83a 	sub	r3,r3,r2
    3020:	01000e04 	movi	r4,56
    3024:	20c1530e 	bge	r4,r3,3574 <__divdf3+0x86c>
    3028:	9900004c 	andi	r4,r19,1
    302c:	0005883a 	mov	r2,zero
    3030:	0021883a 	mov	r16,zero
    3034:	002b883a 	mov	r21,zero
    3038:	003f9206 	br	2e84 <__alt_data_end+0xfffe2e84>
    303c:	8c012e36 	bltu	r17,r16,34f8 <__divdf3+0x7f0>
    3040:	84412c26 	beq	r16,r17,34f4 <__divdf3+0x7ec>
    3044:	a82f883a 	mov	r23,r21
    3048:	18ffffc4 	addi	r3,r3,-1
    304c:	002b883a 	mov	r21,zero
    3050:	a004d63a 	srli	r2,r20,24
    3054:	8822923a 	slli	r17,r17,8
    3058:	a028923a 	slli	r20,r20,8
    305c:	8009883a 	mov	r4,r16
    3060:	88acb03a 	or	r22,r17,r2
    3064:	dd000015 	stw	r20,0(sp)
    3068:	b028d43a 	srli	r20,r22,16
    306c:	d8c00215 	stw	r3,8(sp)
    3070:	b4bfffcc 	andi	r18,r22,65535
    3074:	a00b883a 	mov	r5,r20
    3078:	0004b540 	call	4b54 <__udivsi3>
    307c:	100b883a 	mov	r5,r2
    3080:	9009883a 	mov	r4,r18
    3084:	1023883a 	mov	r17,r2
    3088:	0001a300 	call	1a30 <__mulsi3>
    308c:	8009883a 	mov	r4,r16
    3090:	a00b883a 	mov	r5,r20
    3094:	1039883a 	mov	fp,r2
    3098:	0004bb80 	call	4bb8 <__umodsi3>
    309c:	1004943a 	slli	r2,r2,16
    30a0:	b808d43a 	srli	r4,r23,16
    30a4:	d8c00217 	ldw	r3,8(sp)
    30a8:	2084b03a 	or	r2,r4,r2
    30ac:	1700062e 	bgeu	r2,fp,30c8 <__divdf3+0x3c0>
    30b0:	1585883a 	add	r2,r2,r22
    30b4:	893fffc4 	addi	r4,r17,-1
    30b8:	15811d36 	bltu	r2,r22,3530 <__divdf3+0x828>
    30bc:	17011c2e 	bgeu	r2,fp,3530 <__divdf3+0x828>
    30c0:	8c7fff84 	addi	r17,r17,-2
    30c4:	1585883a 	add	r2,r2,r22
    30c8:	1739c83a 	sub	fp,r2,fp
    30cc:	a00b883a 	mov	r5,r20
    30d0:	e009883a 	mov	r4,fp
    30d4:	d8c00215 	stw	r3,8(sp)
    30d8:	0004b540 	call	4b54 <__udivsi3>
    30dc:	100b883a 	mov	r5,r2
    30e0:	9009883a 	mov	r4,r18
    30e4:	1021883a 	mov	r16,r2
    30e8:	0001a300 	call	1a30 <__mulsi3>
    30ec:	a00b883a 	mov	r5,r20
    30f0:	e009883a 	mov	r4,fp
    30f4:	d8800415 	stw	r2,16(sp)
    30f8:	0004bb80 	call	4bb8 <__umodsi3>
    30fc:	1004943a 	slli	r2,r2,16
    3100:	da000417 	ldw	r8,16(sp)
    3104:	bdffffcc 	andi	r23,r23,65535
    3108:	b884b03a 	or	r2,r23,r2
    310c:	d8c00217 	ldw	r3,8(sp)
    3110:	1200062e 	bgeu	r2,r8,312c <__divdf3+0x424>
    3114:	1585883a 	add	r2,r2,r22
    3118:	813fffc4 	addi	r4,r16,-1
    311c:	15810236 	bltu	r2,r22,3528 <__divdf3+0x820>
    3120:	1201012e 	bgeu	r2,r8,3528 <__divdf3+0x820>
    3124:	843fff84 	addi	r16,r16,-2
    3128:	1585883a 	add	r2,r2,r22
    312c:	8822943a 	slli	r17,r17,16
    3130:	d9800017 	ldw	r6,0(sp)
    3134:	1211c83a 	sub	r8,r2,r8
    3138:	8c22b03a 	or	r17,r17,r16
    313c:	373fffcc 	andi	fp,r6,65535
    3140:	8abfffcc 	andi	r10,r17,65535
    3144:	8820d43a 	srli	r16,r17,16
    3148:	5009883a 	mov	r4,r10
    314c:	e00b883a 	mov	r5,fp
    3150:	302ed43a 	srli	r23,r6,16
    3154:	d8c00215 	stw	r3,8(sp)
    3158:	da000415 	stw	r8,16(sp)
    315c:	da800115 	stw	r10,4(sp)
    3160:	0001a300 	call	1a30 <__mulsi3>
    3164:	800b883a 	mov	r5,r16
    3168:	e009883a 	mov	r4,fp
    316c:	d8800515 	stw	r2,20(sp)
    3170:	0001a300 	call	1a30 <__mulsi3>
    3174:	8009883a 	mov	r4,r16
    3178:	b80b883a 	mov	r5,r23
    317c:	d8800315 	stw	r2,12(sp)
    3180:	0001a300 	call	1a30 <__mulsi3>
    3184:	da800117 	ldw	r10,4(sp)
    3188:	b80b883a 	mov	r5,r23
    318c:	1021883a 	mov	r16,r2
    3190:	5009883a 	mov	r4,r10
    3194:	0001a300 	call	1a30 <__mulsi3>
    3198:	d9c00517 	ldw	r7,20(sp)
    319c:	da400317 	ldw	r9,12(sp)
    31a0:	d8c00217 	ldw	r3,8(sp)
    31a4:	3808d43a 	srli	r4,r7,16
    31a8:	1245883a 	add	r2,r2,r9
    31ac:	da000417 	ldw	r8,16(sp)
    31b0:	2085883a 	add	r2,r4,r2
    31b4:	1240022e 	bgeu	r2,r9,31c0 <__divdf3+0x4b8>
    31b8:	01000074 	movhi	r4,1
    31bc:	8121883a 	add	r16,r16,r4
    31c0:	1008d43a 	srli	r4,r2,16
    31c4:	1004943a 	slli	r2,r2,16
    31c8:	39ffffcc 	andi	r7,r7,65535
    31cc:	2409883a 	add	r4,r4,r16
    31d0:	11c5883a 	add	r2,r2,r7
    31d4:	4100bb36 	bltu	r8,r4,34c4 <__divdf3+0x7bc>
    31d8:	4100d726 	beq	r8,r4,3538 <__divdf3+0x830>
    31dc:	4109c83a 	sub	r4,r8,r4
    31e0:	a8a1c83a 	sub	r16,r21,r2
    31e4:	ac2b803a 	cmpltu	r21,r21,r16
    31e8:	256bc83a 	sub	r21,r4,r21
    31ec:	b540d926 	beq	r22,r21,3554 <__divdf3+0x84c>
    31f0:	a00b883a 	mov	r5,r20
    31f4:	a809883a 	mov	r4,r21
    31f8:	d8c00215 	stw	r3,8(sp)
    31fc:	0004b540 	call	4b54 <__udivsi3>
    3200:	100b883a 	mov	r5,r2
    3204:	9009883a 	mov	r4,r18
    3208:	d8800515 	stw	r2,20(sp)
    320c:	0001a300 	call	1a30 <__mulsi3>
    3210:	a809883a 	mov	r4,r21
    3214:	a00b883a 	mov	r5,r20
    3218:	d8800415 	stw	r2,16(sp)
    321c:	0004bb80 	call	4bb8 <__umodsi3>
    3220:	1004943a 	slli	r2,r2,16
    3224:	8008d43a 	srli	r4,r16,16
    3228:	da000417 	ldw	r8,16(sp)
    322c:	d8c00217 	ldw	r3,8(sp)
    3230:	2084b03a 	or	r2,r4,r2
    3234:	d9c00517 	ldw	r7,20(sp)
    3238:	1200062e 	bgeu	r2,r8,3254 <__divdf3+0x54c>
    323c:	1585883a 	add	r2,r2,r22
    3240:	393fffc4 	addi	r4,r7,-1
    3244:	1580c536 	bltu	r2,r22,355c <__divdf3+0x854>
    3248:	1200c42e 	bgeu	r2,r8,355c <__divdf3+0x854>
    324c:	39ffff84 	addi	r7,r7,-2
    3250:	1585883a 	add	r2,r2,r22
    3254:	122bc83a 	sub	r21,r2,r8
    3258:	a00b883a 	mov	r5,r20
    325c:	a809883a 	mov	r4,r21
    3260:	d8c00215 	stw	r3,8(sp)
    3264:	d9c00515 	stw	r7,20(sp)
    3268:	0004b540 	call	4b54 <__udivsi3>
    326c:	9009883a 	mov	r4,r18
    3270:	100b883a 	mov	r5,r2
    3274:	d8800415 	stw	r2,16(sp)
    3278:	0001a300 	call	1a30 <__mulsi3>
    327c:	a809883a 	mov	r4,r21
    3280:	a00b883a 	mov	r5,r20
    3284:	1025883a 	mov	r18,r2
    3288:	0004bb80 	call	4bb8 <__umodsi3>
    328c:	1004943a 	slli	r2,r2,16
    3290:	813fffcc 	andi	r4,r16,65535
    3294:	d8c00217 	ldw	r3,8(sp)
    3298:	20a0b03a 	or	r16,r4,r2
    329c:	d9c00517 	ldw	r7,20(sp)
    32a0:	da000417 	ldw	r8,16(sp)
    32a4:	8480062e 	bgeu	r16,r18,32c0 <__divdf3+0x5b8>
    32a8:	85a1883a 	add	r16,r16,r22
    32ac:	40bfffc4 	addi	r2,r8,-1
    32b0:	8580ac36 	bltu	r16,r22,3564 <__divdf3+0x85c>
    32b4:	8480ab2e 	bgeu	r16,r18,3564 <__divdf3+0x85c>
    32b8:	423fff84 	addi	r8,r8,-2
    32bc:	85a1883a 	add	r16,r16,r22
    32c0:	3804943a 	slli	r2,r7,16
    32c4:	84a1c83a 	sub	r16,r16,r18
    32c8:	e009883a 	mov	r4,fp
    32cc:	1228b03a 	or	r20,r2,r8
    32d0:	a1ffffcc 	andi	r7,r20,65535
    32d4:	a024d43a 	srli	r18,r20,16
    32d8:	380b883a 	mov	r5,r7
    32dc:	d8c00215 	stw	r3,8(sp)
    32e0:	d9c00515 	stw	r7,20(sp)
    32e4:	0001a300 	call	1a30 <__mulsi3>
    32e8:	900b883a 	mov	r5,r18
    32ec:	e009883a 	mov	r4,fp
    32f0:	102b883a 	mov	r21,r2
    32f4:	0001a300 	call	1a30 <__mulsi3>
    32f8:	900b883a 	mov	r5,r18
    32fc:	b809883a 	mov	r4,r23
    3300:	1039883a 	mov	fp,r2
    3304:	0001a300 	call	1a30 <__mulsi3>
    3308:	d9c00517 	ldw	r7,20(sp)
    330c:	b80b883a 	mov	r5,r23
    3310:	1025883a 	mov	r18,r2
    3314:	3809883a 	mov	r4,r7
    3318:	0001a300 	call	1a30 <__mulsi3>
    331c:	a808d43a 	srli	r4,r21,16
    3320:	1705883a 	add	r2,r2,fp
    3324:	d8c00217 	ldw	r3,8(sp)
    3328:	2085883a 	add	r2,r4,r2
    332c:	1700022e 	bgeu	r2,fp,3338 <__divdf3+0x630>
    3330:	01000074 	movhi	r4,1
    3334:	9125883a 	add	r18,r18,r4
    3338:	1008d43a 	srli	r4,r2,16
    333c:	1004943a 	slli	r2,r2,16
    3340:	ad7fffcc 	andi	r21,r21,65535
    3344:	2489883a 	add	r4,r4,r18
    3348:	1545883a 	add	r2,r2,r21
    334c:	81003836 	bltu	r16,r4,3430 <__divdf3+0x728>
    3350:	81003626 	beq	r16,r4,342c <__divdf3+0x724>
    3354:	a5000054 	ori	r20,r20,1
    3358:	1880ffc4 	addi	r2,r3,1023
    335c:	00bf2e0e 	bge	zero,r2,3018 <__alt_data_end+0xfffe3018>
    3360:	a10001cc 	andi	r4,r20,7
    3364:	20000726 	beq	r4,zero,3384 <__divdf3+0x67c>
    3368:	a10003cc 	andi	r4,r20,15
    336c:	01400104 	movi	r5,4
    3370:	21400426 	beq	r4,r5,3384 <__divdf3+0x67c>
    3374:	a149883a 	add	r4,r20,r5
    3378:	2529803a 	cmpltu	r20,r4,r20
    337c:	8d23883a 	add	r17,r17,r20
    3380:	2029883a 	mov	r20,r4
    3384:	8900402c 	andhi	r4,r17,256
    3388:	20000426 	beq	r4,zero,339c <__divdf3+0x694>
    338c:	18810004 	addi	r2,r3,1024
    3390:	00ffc034 	movhi	r3,65280
    3394:	18ffffc4 	addi	r3,r3,-1
    3398:	88e2703a 	and	r17,r17,r3
    339c:	00c1ff84 	movi	r3,2046
    33a0:	18beb416 	blt	r3,r2,2e74 <__alt_data_end+0xfffe2e74>
    33a4:	a028d0fa 	srli	r20,r20,3
    33a8:	882a977a 	slli	r21,r17,29
    33ac:	8820927a 	slli	r16,r17,9
    33b0:	1081ffcc 	andi	r2,r2,2047
    33b4:	ad2ab03a 	or	r21,r21,r20
    33b8:	8020d33a 	srli	r16,r16,12
    33bc:	9900004c 	andi	r4,r19,1
    33c0:	003eb006 	br	2e84 <__alt_data_end+0xfffe2e84>
    33c4:	8080022c 	andhi	r2,r16,8
    33c8:	10001226 	beq	r2,zero,3414 <__divdf3+0x70c>
    33cc:	8880022c 	andhi	r2,r17,8
    33d0:	1000101e 	bne	r2,zero,3414 <__divdf3+0x70c>
    33d4:	00800434 	movhi	r2,16
    33d8:	8c000234 	orhi	r16,r17,8
    33dc:	10bfffc4 	addi	r2,r2,-1
    33e0:	b809883a 	mov	r4,r23
    33e4:	80a0703a 	and	r16,r16,r2
    33e8:	a02b883a 	mov	r21,r20
    33ec:	003f0806 	br	3010 <__alt_data_end+0xfffe3010>
    33f0:	008000c4 	movi	r2,3
    33f4:	3880b126 	beq	r7,r2,36bc <__divdf3+0x9b4>
    33f8:	00800044 	movi	r2,1
    33fc:	38805b1e 	bne	r7,r2,356c <__divdf3+0x864>
    3400:	e009883a 	mov	r4,fp
    3404:	0005883a 	mov	r2,zero
    3408:	0021883a 	mov	r16,zero
    340c:	002b883a 	mov	r21,zero
    3410:	003e9c06 	br	2e84 <__alt_data_end+0xfffe2e84>
    3414:	00800434 	movhi	r2,16
    3418:	84000234 	orhi	r16,r16,8
    341c:	10bfffc4 	addi	r2,r2,-1
    3420:	b009883a 	mov	r4,r22
    3424:	80a0703a 	and	r16,r16,r2
    3428:	003ef906 	br	3010 <__alt_data_end+0xfffe3010>
    342c:	103fca26 	beq	r2,zero,3358 <__alt_data_end+0xfffe3358>
    3430:	b421883a 	add	r16,r22,r16
    3434:	a17fffc4 	addi	r5,r20,-1
    3438:	8580422e 	bgeu	r16,r22,3544 <__divdf3+0x83c>
    343c:	2829883a 	mov	r20,r5
    3440:	813fc41e 	bne	r16,r4,3354 <__alt_data_end+0xfffe3354>
    3444:	d9800017 	ldw	r6,0(sp)
    3448:	30bfc21e 	bne	r6,r2,3354 <__alt_data_end+0xfffe3354>
    344c:	003fc206 	br	3358 <__alt_data_end+0xfffe3358>
    3450:	143ff604 	addi	r16,r2,-40
    3454:	8c20983a 	sll	r16,r17,r16
    3458:	002b883a 	mov	r21,zero
    345c:	003eb406 	br	2f30 <__alt_data_end+0xfffe2f30>
    3460:	d9800215 	stw	r6,8(sp)
    3464:	d9c00515 	stw	r7,20(sp)
    3468:	da000415 	stw	r8,16(sp)
    346c:	00049f80 	call	49f8 <__clzsi2>
    3470:	10800804 	addi	r2,r2,32
    3474:	da000417 	ldw	r8,16(sp)
    3478:	d9c00517 	ldw	r7,20(sp)
    347c:	d9800217 	ldw	r6,8(sp)
    3480:	003ea106 	br	2f08 <__alt_data_end+0xfffe2f08>
    3484:	147ff604 	addi	r17,r2,-40
    3488:	3462983a 	sll	r17,r6,r17
    348c:	0029883a 	mov	r20,zero
    3490:	003ec906 	br	2fb8 <__alt_data_end+0xfffe2fb8>
    3494:	3009883a 	mov	r4,r6
    3498:	d9400115 	stw	r5,4(sp)
    349c:	d9800215 	stw	r6,8(sp)
    34a0:	da000415 	stw	r8,16(sp)
    34a4:	da400315 	stw	r9,12(sp)
    34a8:	00049f80 	call	49f8 <__clzsi2>
    34ac:	10800804 	addi	r2,r2,32
    34b0:	da400317 	ldw	r9,12(sp)
    34b4:	da000417 	ldw	r8,16(sp)
    34b8:	d9800217 	ldw	r6,8(sp)
    34bc:	d9400117 	ldw	r5,4(sp)
    34c0:	003eb306 	br	2f90 <__alt_data_end+0xfffe2f90>
    34c4:	d9800017 	ldw	r6,0(sp)
    34c8:	a9ab883a 	add	r21,r21,r6
    34cc:	a98b803a 	cmpltu	r5,r21,r6
    34d0:	2d8b883a 	add	r5,r5,r22
    34d4:	2a11883a 	add	r8,r5,r8
    34d8:	897fffc4 	addi	r5,r17,-1
    34dc:	b2000c2e 	bgeu	r22,r8,3510 <__divdf3+0x808>
    34e0:	41003f36 	bltu	r8,r4,35e0 <__divdf3+0x8d8>
    34e4:	22006c26 	beq	r4,r8,3698 <__divdf3+0x990>
    34e8:	4109c83a 	sub	r4,r8,r4
    34ec:	2823883a 	mov	r17,r5
    34f0:	003f3b06 	br	31e0 <__alt_data_end+0xfffe31e0>
    34f4:	ad3ed336 	bltu	r21,r20,3044 <__alt_data_end+0xfffe3044>
    34f8:	a804d07a 	srli	r2,r21,1
    34fc:	802e97fa 	slli	r23,r16,31
    3500:	a82a97fa 	slli	r21,r21,31
    3504:	8020d07a 	srli	r16,r16,1
    3508:	b8aeb03a 	or	r23,r23,r2
    350c:	003ed006 	br	3050 <__alt_data_end+0xfffe3050>
    3510:	b23ff51e 	bne	r22,r8,34e8 <__alt_data_end+0xfffe34e8>
    3514:	d9800017 	ldw	r6,0(sp)
    3518:	a9bff12e 	bgeu	r21,r6,34e0 <__alt_data_end+0xfffe34e0>
    351c:	b109c83a 	sub	r4,r22,r4
    3520:	2823883a 	mov	r17,r5
    3524:	003f2e06 	br	31e0 <__alt_data_end+0xfffe31e0>
    3528:	2021883a 	mov	r16,r4
    352c:	003eff06 	br	312c <__alt_data_end+0xfffe312c>
    3530:	2023883a 	mov	r17,r4
    3534:	003ee406 	br	30c8 <__alt_data_end+0xfffe30c8>
    3538:	a8bfe236 	bltu	r21,r2,34c4 <__alt_data_end+0xfffe34c4>
    353c:	0009883a 	mov	r4,zero
    3540:	003f2706 	br	31e0 <__alt_data_end+0xfffe31e0>
    3544:	81002d36 	bltu	r16,r4,35fc <__divdf3+0x8f4>
    3548:	24005626 	beq	r4,r16,36a4 <__divdf3+0x99c>
    354c:	2829883a 	mov	r20,r5
    3550:	003f8006 	br	3354 <__alt_data_end+0xfffe3354>
    3554:	053fffc4 	movi	r20,-1
    3558:	003f7f06 	br	3358 <__alt_data_end+0xfffe3358>
    355c:	200f883a 	mov	r7,r4
    3560:	003f3c06 	br	3254 <__alt_data_end+0xfffe3254>
    3564:	1011883a 	mov	r8,r2
    3568:	003f5506 	br	32c0 <__alt_data_end+0xfffe32c0>
    356c:	e027883a 	mov	r19,fp
    3570:	003f7906 	br	3358 <__alt_data_end+0xfffe3358>
    3574:	010007c4 	movi	r4,31
    3578:	20c02816 	blt	r4,r3,361c <__divdf3+0x914>
    357c:	00800804 	movi	r2,32
    3580:	10c5c83a 	sub	r2,r2,r3
    3584:	888a983a 	sll	r5,r17,r2
    3588:	a0c8d83a 	srl	r4,r20,r3
    358c:	a084983a 	sll	r2,r20,r2
    3590:	88e2d83a 	srl	r17,r17,r3
    3594:	2906b03a 	or	r3,r5,r4
    3598:	1004c03a 	cmpne	r2,r2,zero
    359c:	1886b03a 	or	r3,r3,r2
    35a0:	188001cc 	andi	r2,r3,7
    35a4:	10000726 	beq	r2,zero,35c4 <__divdf3+0x8bc>
    35a8:	188003cc 	andi	r2,r3,15
    35ac:	01000104 	movi	r4,4
    35b0:	11000426 	beq	r2,r4,35c4 <__divdf3+0x8bc>
    35b4:	1805883a 	mov	r2,r3
    35b8:	10c00104 	addi	r3,r2,4
    35bc:	1885803a 	cmpltu	r2,r3,r2
    35c0:	88a3883a 	add	r17,r17,r2
    35c4:	8880202c 	andhi	r2,r17,128
    35c8:	10002926 	beq	r2,zero,3670 <__divdf3+0x968>
    35cc:	9900004c 	andi	r4,r19,1
    35d0:	00800044 	movi	r2,1
    35d4:	0021883a 	mov	r16,zero
    35d8:	002b883a 	mov	r21,zero
    35dc:	003e2906 	br	2e84 <__alt_data_end+0xfffe2e84>
    35e0:	d9800017 	ldw	r6,0(sp)
    35e4:	8c7fff84 	addi	r17,r17,-2
    35e8:	a9ab883a 	add	r21,r21,r6
    35ec:	a98b803a 	cmpltu	r5,r21,r6
    35f0:	2d8b883a 	add	r5,r5,r22
    35f4:	2a11883a 	add	r8,r5,r8
    35f8:	003ef806 	br	31dc <__alt_data_end+0xfffe31dc>
    35fc:	d9800017 	ldw	r6,0(sp)
    3600:	318f883a 	add	r7,r6,r6
    3604:	398b803a 	cmpltu	r5,r7,r6
    3608:	2d8d883a 	add	r6,r5,r22
    360c:	81a1883a 	add	r16,r16,r6
    3610:	a17fff84 	addi	r5,r20,-2
    3614:	d9c00015 	stw	r7,0(sp)
    3618:	003f8806 	br	343c <__alt_data_end+0xfffe343c>
    361c:	013ff844 	movi	r4,-31
    3620:	2085c83a 	sub	r2,r4,r2
    3624:	8888d83a 	srl	r4,r17,r2
    3628:	00800804 	movi	r2,32
    362c:	18802126 	beq	r3,r2,36b4 <__divdf3+0x9ac>
    3630:	04001004 	movi	r16,64
    3634:	80c7c83a 	sub	r3,r16,r3
    3638:	88e0983a 	sll	r16,r17,r3
    363c:	8504b03a 	or	r2,r16,r20
    3640:	1004c03a 	cmpne	r2,r2,zero
    3644:	2084b03a 	or	r2,r4,r2
    3648:	144001cc 	andi	r17,r2,7
    364c:	88000d1e 	bne	r17,zero,3684 <__divdf3+0x97c>
    3650:	0021883a 	mov	r16,zero
    3654:	102ad0fa 	srli	r21,r2,3
    3658:	9900004c 	andi	r4,r19,1
    365c:	0005883a 	mov	r2,zero
    3660:	ac6ab03a 	or	r21,r21,r17
    3664:	003e0706 	br	2e84 <__alt_data_end+0xfffe2e84>
    3668:	1007883a 	mov	r3,r2
    366c:	0023883a 	mov	r17,zero
    3670:	8820927a 	slli	r16,r17,9
    3674:	1805883a 	mov	r2,r3
    3678:	8822977a 	slli	r17,r17,29
    367c:	8020d33a 	srli	r16,r16,12
    3680:	003ff406 	br	3654 <__alt_data_end+0xfffe3654>
    3684:	10c003cc 	andi	r3,r2,15
    3688:	01000104 	movi	r4,4
    368c:	193ff626 	beq	r3,r4,3668 <__alt_data_end+0xfffe3668>
    3690:	0023883a 	mov	r17,zero
    3694:	003fc806 	br	35b8 <__alt_data_end+0xfffe35b8>
    3698:	a8bfd136 	bltu	r21,r2,35e0 <__alt_data_end+0xfffe35e0>
    369c:	2823883a 	mov	r17,r5
    36a0:	003fa606 	br	353c <__alt_data_end+0xfffe353c>
    36a4:	d9800017 	ldw	r6,0(sp)
    36a8:	30bfd436 	bltu	r6,r2,35fc <__alt_data_end+0xfffe35fc>
    36ac:	2829883a 	mov	r20,r5
    36b0:	003f6406 	br	3444 <__alt_data_end+0xfffe3444>
    36b4:	0021883a 	mov	r16,zero
    36b8:	003fe006 	br	363c <__alt_data_end+0xfffe363c>
    36bc:	00800434 	movhi	r2,16
    36c0:	8c000234 	orhi	r16,r17,8
    36c4:	10bfffc4 	addi	r2,r2,-1
    36c8:	e009883a 	mov	r4,fp
    36cc:	80a0703a 	and	r16,r16,r2
    36d0:	a02b883a 	mov	r21,r20
    36d4:	003e4e06 	br	3010 <__alt_data_end+0xfffe3010>

000036d8 <__gedf2>:
    36d8:	2804d53a 	srli	r2,r5,20
    36dc:	3806d53a 	srli	r3,r7,20
    36e0:	02000434 	movhi	r8,16
    36e4:	423fffc4 	addi	r8,r8,-1
    36e8:	1081ffcc 	andi	r2,r2,2047
    36ec:	0241ffc4 	movi	r9,2047
    36f0:	2a14703a 	and	r10,r5,r8
    36f4:	18c1ffcc 	andi	r3,r3,2047
    36f8:	3a10703a 	and	r8,r7,r8
    36fc:	280ad7fa 	srli	r5,r5,31
    3700:	380ed7fa 	srli	r7,r7,31
    3704:	12401d26 	beq	r2,r9,377c <__gedf2+0xa4>
    3708:	0241ffc4 	movi	r9,2047
    370c:	1a401226 	beq	r3,r9,3758 <__gedf2+0x80>
    3710:	1000081e 	bne	r2,zero,3734 <__gedf2+0x5c>
    3714:	2296b03a 	or	r11,r4,r10
    3718:	5813003a 	cmpeq	r9,r11,zero
    371c:	1800091e 	bne	r3,zero,3744 <__gedf2+0x6c>
    3720:	3218b03a 	or	r12,r6,r8
    3724:	6000071e 	bne	r12,zero,3744 <__gedf2+0x6c>
    3728:	0005883a 	mov	r2,zero
    372c:	5800101e 	bne	r11,zero,3770 <__gedf2+0x98>
    3730:	f800283a 	ret
    3734:	18000c1e 	bne	r3,zero,3768 <__gedf2+0x90>
    3738:	3212b03a 	or	r9,r6,r8
    373c:	48000c26 	beq	r9,zero,3770 <__gedf2+0x98>
    3740:	0013883a 	mov	r9,zero
    3744:	39c03fcc 	andi	r7,r7,255
    3748:	48000826 	beq	r9,zero,376c <__gedf2+0x94>
    374c:	38000926 	beq	r7,zero,3774 <__gedf2+0x9c>
    3750:	00800044 	movi	r2,1
    3754:	f800283a 	ret
    3758:	3212b03a 	or	r9,r6,r8
    375c:	483fec26 	beq	r9,zero,3710 <__alt_data_end+0xfffe3710>
    3760:	00bfff84 	movi	r2,-2
    3764:	f800283a 	ret
    3768:	39c03fcc 	andi	r7,r7,255
    376c:	29c00626 	beq	r5,r7,3788 <__gedf2+0xb0>
    3770:	283ff726 	beq	r5,zero,3750 <__alt_data_end+0xfffe3750>
    3774:	00bfffc4 	movi	r2,-1
    3778:	f800283a 	ret
    377c:	2292b03a 	or	r9,r4,r10
    3780:	483fe126 	beq	r9,zero,3708 <__alt_data_end+0xfffe3708>
    3784:	003ff606 	br	3760 <__alt_data_end+0xfffe3760>
    3788:	18bff916 	blt	r3,r2,3770 <__alt_data_end+0xfffe3770>
    378c:	10c00316 	blt	r2,r3,379c <__gedf2+0xc4>
    3790:	42bff736 	bltu	r8,r10,3770 <__alt_data_end+0xfffe3770>
    3794:	52000326 	beq	r10,r8,37a4 <__gedf2+0xcc>
    3798:	5200042e 	bgeu	r10,r8,37ac <__gedf2+0xd4>
    379c:	283fec1e 	bne	r5,zero,3750 <__alt_data_end+0xfffe3750>
    37a0:	003ff406 	br	3774 <__alt_data_end+0xfffe3774>
    37a4:	313ff236 	bltu	r6,r4,3770 <__alt_data_end+0xfffe3770>
    37a8:	21bffc36 	bltu	r4,r6,379c <__alt_data_end+0xfffe379c>
    37ac:	0005883a 	mov	r2,zero
    37b0:	f800283a 	ret

000037b4 <__muldf3>:
    37b4:	deffee04 	addi	sp,sp,-72
    37b8:	dd000c15 	stw	r20,48(sp)
    37bc:	2828d53a 	srli	r20,r5,20
    37c0:	ddc00f15 	stw	r23,60(sp)
    37c4:	282ed7fa 	srli	r23,r5,31
    37c8:	dc000815 	stw	r16,32(sp)
    37cc:	04000434 	movhi	r16,16
    37d0:	dcc00b15 	stw	r19,44(sp)
    37d4:	843fffc4 	addi	r16,r16,-1
    37d8:	dfc01115 	stw	ra,68(sp)
    37dc:	df001015 	stw	fp,64(sp)
    37e0:	dd800e15 	stw	r22,56(sp)
    37e4:	dd400d15 	stw	r21,52(sp)
    37e8:	dc800a15 	stw	r18,40(sp)
    37ec:	dc400915 	stw	r17,36(sp)
    37f0:	a501ffcc 	andi	r20,r20,2047
    37f4:	2c20703a 	and	r16,r5,r16
    37f8:	b827883a 	mov	r19,r23
    37fc:	ba403fcc 	andi	r9,r23,255
    3800:	a0006026 	beq	r20,zero,3984 <__muldf3+0x1d0>
    3804:	0081ffc4 	movi	r2,2047
    3808:	202d883a 	mov	r22,r4
    380c:	a0803626 	beq	r20,r2,38e8 <__muldf3+0x134>
    3810:	84000434 	orhi	r16,r16,16
    3814:	200ad77a 	srli	r5,r4,29
    3818:	800490fa 	slli	r2,r16,3
    381c:	202c90fa 	slli	r22,r4,3
    3820:	a53f0044 	addi	r20,r20,-1023
    3824:	28a0b03a 	or	r16,r5,r2
    3828:	002b883a 	mov	r21,zero
    382c:	000b883a 	mov	r5,zero
    3830:	3804d53a 	srli	r2,r7,20
    3834:	3838d7fa 	srli	fp,r7,31
    3838:	04400434 	movhi	r17,16
    383c:	8c7fffc4 	addi	r17,r17,-1
    3840:	1081ffcc 	andi	r2,r2,2047
    3844:	3025883a 	mov	r18,r6
    3848:	3c62703a 	and	r17,r7,r17
    384c:	e2803fcc 	andi	r10,fp,255
    3850:	10006d26 	beq	r2,zero,3a08 <__muldf3+0x254>
    3854:	00c1ffc4 	movi	r3,2047
    3858:	10c06526 	beq	r2,r3,39f0 <__muldf3+0x23c>
    385c:	8c400434 	orhi	r17,r17,16
    3860:	300ed77a 	srli	r7,r6,29
    3864:	880690fa 	slli	r3,r17,3
    3868:	302490fa 	slli	r18,r6,3
    386c:	10bf0044 	addi	r2,r2,-1023
    3870:	38e2b03a 	or	r17,r7,r3
    3874:	000f883a 	mov	r7,zero
    3878:	a087883a 	add	r3,r20,r2
    387c:	010003c4 	movi	r4,15
    3880:	3d44b03a 	or	r2,r7,r21
    3884:	e5ccf03a 	xor	r6,fp,r23
    3888:	1a000044 	addi	r8,r3,1
    388c:	20809b36 	bltu	r4,r2,3afc <__muldf3+0x348>
    3890:	100490ba 	slli	r2,r2,2
    3894:	01000034 	movhi	r4,0
    3898:	210e2a04 	addi	r4,r4,14504
    389c:	1105883a 	add	r2,r2,r4
    38a0:	10800017 	ldw	r2,0(r2)
    38a4:	1000683a 	jmp	r2
    38a8:	00003afc 	xorhi	zero,zero,235
    38ac:	00003908 	cmpgei	zero,zero,228
    38b0:	00003908 	cmpgei	zero,zero,228
    38b4:	00003904 	movi	zero,228
    38b8:	00003ad8 	cmpnei	zero,zero,235
    38bc:	00003ad8 	cmpnei	zero,zero,235
    38c0:	00003ac0 	call	3ac <initLayer+0x78>
    38c4:	00003904 	movi	zero,228
    38c8:	00003ad8 	cmpnei	zero,zero,235
    38cc:	00003ac0 	call	3ac <initLayer+0x78>
    38d0:	00003ad8 	cmpnei	zero,zero,235
    38d4:	00003904 	movi	zero,228
    38d8:	00003ae8 	cmpgeui	zero,zero,235
    38dc:	00003ae8 	cmpgeui	zero,zero,235
    38e0:	00003ae8 	cmpgeui	zero,zero,235
    38e4:	00003e48 	cmpgei	zero,zero,249
    38e8:	2404b03a 	or	r2,r4,r16
    38ec:	1000711e 	bne	r2,zero,3ab4 <__muldf3+0x300>
    38f0:	05400204 	movi	r21,8
    38f4:	0021883a 	mov	r16,zero
    38f8:	002d883a 	mov	r22,zero
    38fc:	01400084 	movi	r5,2
    3900:	003fcb06 	br	3830 <__alt_data_end+0xfffe3830>
    3904:	500d883a 	mov	r6,r10
    3908:	00800084 	movi	r2,2
    390c:	38805926 	beq	r7,r2,3a74 <__muldf3+0x2c0>
    3910:	008000c4 	movi	r2,3
    3914:	3881bb26 	beq	r7,r2,4004 <__muldf3+0x850>
    3918:	00800044 	movi	r2,1
    391c:	3881961e 	bne	r7,r2,3f78 <__muldf3+0x7c4>
    3920:	3027883a 	mov	r19,r6
    3924:	0005883a 	mov	r2,zero
    3928:	0021883a 	mov	r16,zero
    392c:	002d883a 	mov	r22,zero
    3930:	1004953a 	slli	r2,r2,20
    3934:	98c03fcc 	andi	r3,r19,255
    3938:	04400434 	movhi	r17,16
    393c:	8c7fffc4 	addi	r17,r17,-1
    3940:	180697fa 	slli	r3,r3,31
    3944:	8460703a 	and	r16,r16,r17
    3948:	80a0b03a 	or	r16,r16,r2
    394c:	80c6b03a 	or	r3,r16,r3
    3950:	b005883a 	mov	r2,r22
    3954:	dfc01117 	ldw	ra,68(sp)
    3958:	df001017 	ldw	fp,64(sp)
    395c:	ddc00f17 	ldw	r23,60(sp)
    3960:	dd800e17 	ldw	r22,56(sp)
    3964:	dd400d17 	ldw	r21,52(sp)
    3968:	dd000c17 	ldw	r20,48(sp)
    396c:	dcc00b17 	ldw	r19,44(sp)
    3970:	dc800a17 	ldw	r18,40(sp)
    3974:	dc400917 	ldw	r17,36(sp)
    3978:	dc000817 	ldw	r16,32(sp)
    397c:	dec01204 	addi	sp,sp,72
    3980:	f800283a 	ret
    3984:	2404b03a 	or	r2,r4,r16
    3988:	202b883a 	mov	r21,r4
    398c:	10004426 	beq	r2,zero,3aa0 <__muldf3+0x2ec>
    3990:	80015126 	beq	r16,zero,3ed8 <__muldf3+0x724>
    3994:	8009883a 	mov	r4,r16
    3998:	d9800715 	stw	r6,28(sp)
    399c:	d9c00215 	stw	r7,8(sp)
    39a0:	da400415 	stw	r9,16(sp)
    39a4:	00049f80 	call	49f8 <__clzsi2>
    39a8:	d9800717 	ldw	r6,28(sp)
    39ac:	d9c00217 	ldw	r7,8(sp)
    39b0:	da400417 	ldw	r9,16(sp)
    39b4:	113ffd44 	addi	r4,r2,-11
    39b8:	00c00704 	movi	r3,28
    39bc:	19014216 	blt	r3,r4,3ec8 <__muldf3+0x714>
    39c0:	00c00744 	movi	r3,29
    39c4:	15bffe04 	addi	r22,r2,-8
    39c8:	1907c83a 	sub	r3,r3,r4
    39cc:	85a0983a 	sll	r16,r16,r22
    39d0:	a8c6d83a 	srl	r3,r21,r3
    39d4:	adac983a 	sll	r22,r21,r22
    39d8:	1c20b03a 	or	r16,r3,r16
    39dc:	1080fcc4 	addi	r2,r2,1011
    39e0:	00a9c83a 	sub	r20,zero,r2
    39e4:	002b883a 	mov	r21,zero
    39e8:	000b883a 	mov	r5,zero
    39ec:	003f9006 	br	3830 <__alt_data_end+0xfffe3830>
    39f0:	3446b03a 	or	r3,r6,r17
    39f4:	1800281e 	bne	r3,zero,3a98 <__muldf3+0x2e4>
    39f8:	0023883a 	mov	r17,zero
    39fc:	0025883a 	mov	r18,zero
    3a00:	01c00084 	movi	r7,2
    3a04:	003f9c06 	br	3878 <__alt_data_end+0xfffe3878>
    3a08:	3446b03a 	or	r3,r6,r17
    3a0c:	18001e26 	beq	r3,zero,3a88 <__muldf3+0x2d4>
    3a10:	88012126 	beq	r17,zero,3e98 <__muldf3+0x6e4>
    3a14:	8809883a 	mov	r4,r17
    3a18:	d9400215 	stw	r5,8(sp)
    3a1c:	d9800715 	stw	r6,28(sp)
    3a20:	da400415 	stw	r9,16(sp)
    3a24:	da800315 	stw	r10,12(sp)
    3a28:	00049f80 	call	49f8 <__clzsi2>
    3a2c:	d9400217 	ldw	r5,8(sp)
    3a30:	d9800717 	ldw	r6,28(sp)
    3a34:	da400417 	ldw	r9,16(sp)
    3a38:	da800317 	ldw	r10,12(sp)
    3a3c:	113ffd44 	addi	r4,r2,-11
    3a40:	00c00704 	movi	r3,28
    3a44:	19011016 	blt	r3,r4,3e88 <__muldf3+0x6d4>
    3a48:	00c00744 	movi	r3,29
    3a4c:	14bffe04 	addi	r18,r2,-8
    3a50:	1907c83a 	sub	r3,r3,r4
    3a54:	8ca2983a 	sll	r17,r17,r18
    3a58:	30c6d83a 	srl	r3,r6,r3
    3a5c:	34a4983a 	sll	r18,r6,r18
    3a60:	1c62b03a 	or	r17,r3,r17
    3a64:	1080fcc4 	addi	r2,r2,1011
    3a68:	0085c83a 	sub	r2,zero,r2
    3a6c:	000f883a 	mov	r7,zero
    3a70:	003f8106 	br	3878 <__alt_data_end+0xfffe3878>
    3a74:	3027883a 	mov	r19,r6
    3a78:	0081ffc4 	movi	r2,2047
    3a7c:	0021883a 	mov	r16,zero
    3a80:	002d883a 	mov	r22,zero
    3a84:	003faa06 	br	3930 <__alt_data_end+0xfffe3930>
    3a88:	0023883a 	mov	r17,zero
    3a8c:	0025883a 	mov	r18,zero
    3a90:	01c00044 	movi	r7,1
    3a94:	003f7806 	br	3878 <__alt_data_end+0xfffe3878>
    3a98:	01c000c4 	movi	r7,3
    3a9c:	003f7606 	br	3878 <__alt_data_end+0xfffe3878>
    3aa0:	05400104 	movi	r21,4
    3aa4:	0021883a 	mov	r16,zero
    3aa8:	002d883a 	mov	r22,zero
    3aac:	01400044 	movi	r5,1
    3ab0:	003f5f06 	br	3830 <__alt_data_end+0xfffe3830>
    3ab4:	05400304 	movi	r21,12
    3ab8:	014000c4 	movi	r5,3
    3abc:	003f5c06 	br	3830 <__alt_data_end+0xfffe3830>
    3ac0:	04000434 	movhi	r16,16
    3ac4:	0027883a 	mov	r19,zero
    3ac8:	843fffc4 	addi	r16,r16,-1
    3acc:	05bfffc4 	movi	r22,-1
    3ad0:	0081ffc4 	movi	r2,2047
    3ad4:	003f9606 	br	3930 <__alt_data_end+0xfffe3930>
    3ad8:	8023883a 	mov	r17,r16
    3adc:	b025883a 	mov	r18,r22
    3ae0:	280f883a 	mov	r7,r5
    3ae4:	003f8806 	br	3908 <__alt_data_end+0xfffe3908>
    3ae8:	8023883a 	mov	r17,r16
    3aec:	b025883a 	mov	r18,r22
    3af0:	480d883a 	mov	r6,r9
    3af4:	280f883a 	mov	r7,r5
    3af8:	003f8306 	br	3908 <__alt_data_end+0xfffe3908>
    3afc:	b026d43a 	srli	r19,r22,16
    3b00:	902ed43a 	srli	r23,r18,16
    3b04:	b5bfffcc 	andi	r22,r22,65535
    3b08:	94bfffcc 	andi	r18,r18,65535
    3b0c:	b00b883a 	mov	r5,r22
    3b10:	9009883a 	mov	r4,r18
    3b14:	d8c00515 	stw	r3,20(sp)
    3b18:	d9800715 	stw	r6,28(sp)
    3b1c:	da000615 	stw	r8,24(sp)
    3b20:	0001a300 	call	1a30 <__mulsi3>
    3b24:	980b883a 	mov	r5,r19
    3b28:	9009883a 	mov	r4,r18
    3b2c:	1029883a 	mov	r20,r2
    3b30:	0001a300 	call	1a30 <__mulsi3>
    3b34:	b80b883a 	mov	r5,r23
    3b38:	9809883a 	mov	r4,r19
    3b3c:	102b883a 	mov	r21,r2
    3b40:	0001a300 	call	1a30 <__mulsi3>
    3b44:	b809883a 	mov	r4,r23
    3b48:	b00b883a 	mov	r5,r22
    3b4c:	1039883a 	mov	fp,r2
    3b50:	0001a300 	call	1a30 <__mulsi3>
    3b54:	a008d43a 	srli	r4,r20,16
    3b58:	1545883a 	add	r2,r2,r21
    3b5c:	d8c00517 	ldw	r3,20(sp)
    3b60:	2085883a 	add	r2,r4,r2
    3b64:	d9800717 	ldw	r6,28(sp)
    3b68:	da000617 	ldw	r8,24(sp)
    3b6c:	1540022e 	bgeu	r2,r21,3b78 <__muldf3+0x3c4>
    3b70:	01000074 	movhi	r4,1
    3b74:	e139883a 	add	fp,fp,r4
    3b78:	100e943a 	slli	r7,r2,16
    3b7c:	1004d43a 	srli	r2,r2,16
    3b80:	882ad43a 	srli	r21,r17,16
    3b84:	a53fffcc 	andi	r20,r20,65535
    3b88:	8c7fffcc 	andi	r17,r17,65535
    3b8c:	3d29883a 	add	r20,r7,r20
    3b90:	b00b883a 	mov	r5,r22
    3b94:	8809883a 	mov	r4,r17
    3b98:	d8c00515 	stw	r3,20(sp)
    3b9c:	d9800715 	stw	r6,28(sp)
    3ba0:	da000615 	stw	r8,24(sp)
    3ba4:	dd000115 	stw	r20,4(sp)
    3ba8:	d8800015 	stw	r2,0(sp)
    3bac:	0001a300 	call	1a30 <__mulsi3>
    3bb0:	980b883a 	mov	r5,r19
    3bb4:	8809883a 	mov	r4,r17
    3bb8:	d8800215 	stw	r2,8(sp)
    3bbc:	0001a300 	call	1a30 <__mulsi3>
    3bc0:	9809883a 	mov	r4,r19
    3bc4:	a80b883a 	mov	r5,r21
    3bc8:	1029883a 	mov	r20,r2
    3bcc:	0001a300 	call	1a30 <__mulsi3>
    3bd0:	b00b883a 	mov	r5,r22
    3bd4:	a809883a 	mov	r4,r21
    3bd8:	d8800415 	stw	r2,16(sp)
    3bdc:	0001a300 	call	1a30 <__mulsi3>
    3be0:	d9c00217 	ldw	r7,8(sp)
    3be4:	1505883a 	add	r2,r2,r20
    3be8:	d8c00517 	ldw	r3,20(sp)
    3bec:	3826d43a 	srli	r19,r7,16
    3bf0:	d9800717 	ldw	r6,28(sp)
    3bf4:	da000617 	ldw	r8,24(sp)
    3bf8:	9885883a 	add	r2,r19,r2
    3bfc:	da400417 	ldw	r9,16(sp)
    3c00:	1500022e 	bgeu	r2,r20,3c0c <__muldf3+0x458>
    3c04:	01000074 	movhi	r4,1
    3c08:	4913883a 	add	r9,r9,r4
    3c0c:	1028d43a 	srli	r20,r2,16
    3c10:	1004943a 	slli	r2,r2,16
    3c14:	802cd43a 	srli	r22,r16,16
    3c18:	843fffcc 	andi	r16,r16,65535
    3c1c:	3cffffcc 	andi	r19,r7,65535
    3c20:	9009883a 	mov	r4,r18
    3c24:	800b883a 	mov	r5,r16
    3c28:	a269883a 	add	r20,r20,r9
    3c2c:	d8c00515 	stw	r3,20(sp)
    3c30:	d9800715 	stw	r6,28(sp)
    3c34:	da000615 	stw	r8,24(sp)
    3c38:	14e7883a 	add	r19,r2,r19
    3c3c:	0001a300 	call	1a30 <__mulsi3>
    3c40:	9009883a 	mov	r4,r18
    3c44:	b00b883a 	mov	r5,r22
    3c48:	d8800315 	stw	r2,12(sp)
    3c4c:	0001a300 	call	1a30 <__mulsi3>
    3c50:	b809883a 	mov	r4,r23
    3c54:	b00b883a 	mov	r5,r22
    3c58:	d8800215 	stw	r2,8(sp)
    3c5c:	0001a300 	call	1a30 <__mulsi3>
    3c60:	b80b883a 	mov	r5,r23
    3c64:	8009883a 	mov	r4,r16
    3c68:	d8800415 	stw	r2,16(sp)
    3c6c:	0001a300 	call	1a30 <__mulsi3>
    3c70:	da800317 	ldw	r10,12(sp)
    3c74:	d9c00217 	ldw	r7,8(sp)
    3c78:	d9000017 	ldw	r4,0(sp)
    3c7c:	502ed43a 	srli	r23,r10,16
    3c80:	11c5883a 	add	r2,r2,r7
    3c84:	24e5883a 	add	r18,r4,r19
    3c88:	b885883a 	add	r2,r23,r2
    3c8c:	d8c00517 	ldw	r3,20(sp)
    3c90:	d9800717 	ldw	r6,28(sp)
    3c94:	da000617 	ldw	r8,24(sp)
    3c98:	da400417 	ldw	r9,16(sp)
    3c9c:	11c0022e 	bgeu	r2,r7,3ca8 <__muldf3+0x4f4>
    3ca0:	01000074 	movhi	r4,1
    3ca4:	4913883a 	add	r9,r9,r4
    3ca8:	100ed43a 	srli	r7,r2,16
    3cac:	1004943a 	slli	r2,r2,16
    3cb0:	55ffffcc 	andi	r23,r10,65535
    3cb4:	3a53883a 	add	r9,r7,r9
    3cb8:	8809883a 	mov	r4,r17
    3cbc:	800b883a 	mov	r5,r16
    3cc0:	d8c00515 	stw	r3,20(sp)
    3cc4:	d9800715 	stw	r6,28(sp)
    3cc8:	da000615 	stw	r8,24(sp)
    3ccc:	da400415 	stw	r9,16(sp)
    3cd0:	15ef883a 	add	r23,r2,r23
    3cd4:	0001a300 	call	1a30 <__mulsi3>
    3cd8:	8809883a 	mov	r4,r17
    3cdc:	b00b883a 	mov	r5,r22
    3ce0:	d8800215 	stw	r2,8(sp)
    3ce4:	0001a300 	call	1a30 <__mulsi3>
    3ce8:	b00b883a 	mov	r5,r22
    3cec:	a809883a 	mov	r4,r21
    3cf0:	d8800315 	stw	r2,12(sp)
    3cf4:	0001a300 	call	1a30 <__mulsi3>
    3cf8:	8009883a 	mov	r4,r16
    3cfc:	a80b883a 	mov	r5,r21
    3d00:	1023883a 	mov	r17,r2
    3d04:	0001a300 	call	1a30 <__mulsi3>
    3d08:	d9c00217 	ldw	r7,8(sp)
    3d0c:	da800317 	ldw	r10,12(sp)
    3d10:	d8c00517 	ldw	r3,20(sp)
    3d14:	3808d43a 	srli	r4,r7,16
    3d18:	1285883a 	add	r2,r2,r10
    3d1c:	d9800717 	ldw	r6,28(sp)
    3d20:	2085883a 	add	r2,r4,r2
    3d24:	da000617 	ldw	r8,24(sp)
    3d28:	da400417 	ldw	r9,16(sp)
    3d2c:	1280022e 	bgeu	r2,r10,3d38 <__muldf3+0x584>
    3d30:	01000074 	movhi	r4,1
    3d34:	8923883a 	add	r17,r17,r4
    3d38:	1008943a 	slli	r4,r2,16
    3d3c:	39ffffcc 	andi	r7,r7,65535
    3d40:	e4b9883a 	add	fp,fp,r18
    3d44:	21cf883a 	add	r7,r4,r7
    3d48:	e4e7803a 	cmpltu	r19,fp,r19
    3d4c:	3d0f883a 	add	r7,r7,r20
    3d50:	bf39883a 	add	fp,r23,fp
    3d54:	99c9883a 	add	r4,r19,r7
    3d58:	e5ef803a 	cmpltu	r23,fp,r23
    3d5c:	490b883a 	add	r5,r9,r4
    3d60:	1004d43a 	srli	r2,r2,16
    3d64:	b965883a 	add	r18,r23,r5
    3d68:	24c9803a 	cmpltu	r4,r4,r19
    3d6c:	3d29803a 	cmpltu	r20,r7,r20
    3d70:	a128b03a 	or	r20,r20,r4
    3d74:	95ef803a 	cmpltu	r23,r18,r23
    3d78:	2a53803a 	cmpltu	r9,r5,r9
    3d7c:	a0a9883a 	add	r20,r20,r2
    3d80:	4deeb03a 	or	r23,r9,r23
    3d84:	a5ef883a 	add	r23,r20,r23
    3d88:	bc63883a 	add	r17,r23,r17
    3d8c:	e004927a 	slli	r2,fp,9
    3d90:	d9000117 	ldw	r4,4(sp)
    3d94:	882e927a 	slli	r23,r17,9
    3d98:	9022d5fa 	srli	r17,r18,23
    3d9c:	e038d5fa 	srli	fp,fp,23
    3da0:	1104b03a 	or	r2,r2,r4
    3da4:	9024927a 	slli	r18,r18,9
    3da8:	1004c03a 	cmpne	r2,r2,zero
    3dac:	bc62b03a 	or	r17,r23,r17
    3db0:	1738b03a 	or	fp,r2,fp
    3db4:	8880402c 	andhi	r2,r17,256
    3db8:	e4a4b03a 	or	r18,fp,r18
    3dbc:	10000726 	beq	r2,zero,3ddc <__muldf3+0x628>
    3dc0:	9006d07a 	srli	r3,r18,1
    3dc4:	880497fa 	slli	r2,r17,31
    3dc8:	9480004c 	andi	r18,r18,1
    3dcc:	8822d07a 	srli	r17,r17,1
    3dd0:	1ca4b03a 	or	r18,r3,r18
    3dd4:	14a4b03a 	or	r18,r2,r18
    3dd8:	4007883a 	mov	r3,r8
    3ddc:	1880ffc4 	addi	r2,r3,1023
    3de0:	0080460e 	bge	zero,r2,3efc <__muldf3+0x748>
    3de4:	910001cc 	andi	r4,r18,7
    3de8:	20000726 	beq	r4,zero,3e08 <__muldf3+0x654>
    3dec:	910003cc 	andi	r4,r18,15
    3df0:	01400104 	movi	r5,4
    3df4:	21400426 	beq	r4,r5,3e08 <__muldf3+0x654>
    3df8:	9149883a 	add	r4,r18,r5
    3dfc:	24a5803a 	cmpltu	r18,r4,r18
    3e00:	8ca3883a 	add	r17,r17,r18
    3e04:	2025883a 	mov	r18,r4
    3e08:	8900402c 	andhi	r4,r17,256
    3e0c:	20000426 	beq	r4,zero,3e20 <__muldf3+0x66c>
    3e10:	18810004 	addi	r2,r3,1024
    3e14:	00ffc034 	movhi	r3,65280
    3e18:	18ffffc4 	addi	r3,r3,-1
    3e1c:	88e2703a 	and	r17,r17,r3
    3e20:	00c1ff84 	movi	r3,2046
    3e24:	18bf1316 	blt	r3,r2,3a74 <__alt_data_end+0xfffe3a74>
    3e28:	882c977a 	slli	r22,r17,29
    3e2c:	9024d0fa 	srli	r18,r18,3
    3e30:	8822927a 	slli	r17,r17,9
    3e34:	1081ffcc 	andi	r2,r2,2047
    3e38:	b4acb03a 	or	r22,r22,r18
    3e3c:	8820d33a 	srli	r16,r17,12
    3e40:	3027883a 	mov	r19,r6
    3e44:	003eba06 	br	3930 <__alt_data_end+0xfffe3930>
    3e48:	8080022c 	andhi	r2,r16,8
    3e4c:	10000926 	beq	r2,zero,3e74 <__muldf3+0x6c0>
    3e50:	8880022c 	andhi	r2,r17,8
    3e54:	1000071e 	bne	r2,zero,3e74 <__muldf3+0x6c0>
    3e58:	00800434 	movhi	r2,16
    3e5c:	8c000234 	orhi	r16,r17,8
    3e60:	10bfffc4 	addi	r2,r2,-1
    3e64:	e027883a 	mov	r19,fp
    3e68:	80a0703a 	and	r16,r16,r2
    3e6c:	902d883a 	mov	r22,r18
    3e70:	003f1706 	br	3ad0 <__alt_data_end+0xfffe3ad0>
    3e74:	00800434 	movhi	r2,16
    3e78:	84000234 	orhi	r16,r16,8
    3e7c:	10bfffc4 	addi	r2,r2,-1
    3e80:	80a0703a 	and	r16,r16,r2
    3e84:	003f1206 	br	3ad0 <__alt_data_end+0xfffe3ad0>
    3e88:	147ff604 	addi	r17,r2,-40
    3e8c:	3462983a 	sll	r17,r6,r17
    3e90:	0025883a 	mov	r18,zero
    3e94:	003ef306 	br	3a64 <__alt_data_end+0xfffe3a64>
    3e98:	3009883a 	mov	r4,r6
    3e9c:	d9400215 	stw	r5,8(sp)
    3ea0:	d9800715 	stw	r6,28(sp)
    3ea4:	da400415 	stw	r9,16(sp)
    3ea8:	da800315 	stw	r10,12(sp)
    3eac:	00049f80 	call	49f8 <__clzsi2>
    3eb0:	10800804 	addi	r2,r2,32
    3eb4:	da800317 	ldw	r10,12(sp)
    3eb8:	da400417 	ldw	r9,16(sp)
    3ebc:	d9800717 	ldw	r6,28(sp)
    3ec0:	d9400217 	ldw	r5,8(sp)
    3ec4:	003edd06 	br	3a3c <__alt_data_end+0xfffe3a3c>
    3ec8:	143ff604 	addi	r16,r2,-40
    3ecc:	ac20983a 	sll	r16,r21,r16
    3ed0:	002d883a 	mov	r22,zero
    3ed4:	003ec106 	br	39dc <__alt_data_end+0xfffe39dc>
    3ed8:	d9800715 	stw	r6,28(sp)
    3edc:	d9c00215 	stw	r7,8(sp)
    3ee0:	da400415 	stw	r9,16(sp)
    3ee4:	00049f80 	call	49f8 <__clzsi2>
    3ee8:	10800804 	addi	r2,r2,32
    3eec:	da400417 	ldw	r9,16(sp)
    3ef0:	d9c00217 	ldw	r7,8(sp)
    3ef4:	d9800717 	ldw	r6,28(sp)
    3ef8:	003eae06 	br	39b4 <__alt_data_end+0xfffe39b4>
    3efc:	00c00044 	movi	r3,1
    3f00:	1887c83a 	sub	r3,r3,r2
    3f04:	01000e04 	movi	r4,56
    3f08:	20fe8516 	blt	r4,r3,3920 <__alt_data_end+0xfffe3920>
    3f0c:	010007c4 	movi	r4,31
    3f10:	20c01b16 	blt	r4,r3,3f80 <__muldf3+0x7cc>
    3f14:	00800804 	movi	r2,32
    3f18:	10c5c83a 	sub	r2,r2,r3
    3f1c:	888a983a 	sll	r5,r17,r2
    3f20:	90c8d83a 	srl	r4,r18,r3
    3f24:	9084983a 	sll	r2,r18,r2
    3f28:	88e2d83a 	srl	r17,r17,r3
    3f2c:	2906b03a 	or	r3,r5,r4
    3f30:	1004c03a 	cmpne	r2,r2,zero
    3f34:	1886b03a 	or	r3,r3,r2
    3f38:	188001cc 	andi	r2,r3,7
    3f3c:	10000726 	beq	r2,zero,3f5c <__muldf3+0x7a8>
    3f40:	188003cc 	andi	r2,r3,15
    3f44:	01000104 	movi	r4,4
    3f48:	11000426 	beq	r2,r4,3f5c <__muldf3+0x7a8>
    3f4c:	1805883a 	mov	r2,r3
    3f50:	10c00104 	addi	r3,r2,4
    3f54:	1885803a 	cmpltu	r2,r3,r2
    3f58:	88a3883a 	add	r17,r17,r2
    3f5c:	8880202c 	andhi	r2,r17,128
    3f60:	10001c26 	beq	r2,zero,3fd4 <__muldf3+0x820>
    3f64:	3027883a 	mov	r19,r6
    3f68:	00800044 	movi	r2,1
    3f6c:	0021883a 	mov	r16,zero
    3f70:	002d883a 	mov	r22,zero
    3f74:	003e6e06 	br	3930 <__alt_data_end+0xfffe3930>
    3f78:	4007883a 	mov	r3,r8
    3f7c:	003f9706 	br	3ddc <__alt_data_end+0xfffe3ddc>
    3f80:	017ff844 	movi	r5,-31
    3f84:	2885c83a 	sub	r2,r5,r2
    3f88:	888ad83a 	srl	r5,r17,r2
    3f8c:	00800804 	movi	r2,32
    3f90:	18801a26 	beq	r3,r2,3ffc <__muldf3+0x848>
    3f94:	01001004 	movi	r4,64
    3f98:	20c7c83a 	sub	r3,r4,r3
    3f9c:	88e2983a 	sll	r17,r17,r3
    3fa0:	8ca4b03a 	or	r18,r17,r18
    3fa4:	9004c03a 	cmpne	r2,r18,zero
    3fa8:	2884b03a 	or	r2,r5,r2
    3fac:	144001cc 	andi	r17,r2,7
    3fb0:	88000d1e 	bne	r17,zero,3fe8 <__muldf3+0x834>
    3fb4:	0021883a 	mov	r16,zero
    3fb8:	102cd0fa 	srli	r22,r2,3
    3fbc:	3027883a 	mov	r19,r6
    3fc0:	0005883a 	mov	r2,zero
    3fc4:	b46cb03a 	or	r22,r22,r17
    3fc8:	003e5906 	br	3930 <__alt_data_end+0xfffe3930>
    3fcc:	1007883a 	mov	r3,r2
    3fd0:	0023883a 	mov	r17,zero
    3fd4:	8820927a 	slli	r16,r17,9
    3fd8:	1805883a 	mov	r2,r3
    3fdc:	8822977a 	slli	r17,r17,29
    3fe0:	8020d33a 	srli	r16,r16,12
    3fe4:	003ff406 	br	3fb8 <__alt_data_end+0xfffe3fb8>
    3fe8:	10c003cc 	andi	r3,r2,15
    3fec:	01000104 	movi	r4,4
    3ff0:	193ff626 	beq	r3,r4,3fcc <__alt_data_end+0xfffe3fcc>
    3ff4:	0023883a 	mov	r17,zero
    3ff8:	003fd506 	br	3f50 <__alt_data_end+0xfffe3f50>
    3ffc:	0023883a 	mov	r17,zero
    4000:	003fe706 	br	3fa0 <__alt_data_end+0xfffe3fa0>
    4004:	00800434 	movhi	r2,16
    4008:	8c000234 	orhi	r16,r17,8
    400c:	10bfffc4 	addi	r2,r2,-1
    4010:	3027883a 	mov	r19,r6
    4014:	80a0703a 	and	r16,r16,r2
    4018:	902d883a 	mov	r22,r18
    401c:	003eac06 	br	3ad0 <__alt_data_end+0xfffe3ad0>

00004020 <__subdf3>:
    4020:	02000434 	movhi	r8,16
    4024:	423fffc4 	addi	r8,r8,-1
    4028:	defffb04 	addi	sp,sp,-20
    402c:	2a14703a 	and	r10,r5,r8
    4030:	3812d53a 	srli	r9,r7,20
    4034:	3a10703a 	and	r8,r7,r8
    4038:	2006d77a 	srli	r3,r4,29
    403c:	3004d77a 	srli	r2,r6,29
    4040:	dc000015 	stw	r16,0(sp)
    4044:	501490fa 	slli	r10,r10,3
    4048:	2820d53a 	srli	r16,r5,20
    404c:	401090fa 	slli	r8,r8,3
    4050:	dc800215 	stw	r18,8(sp)
    4054:	dc400115 	stw	r17,4(sp)
    4058:	dfc00415 	stw	ra,16(sp)
    405c:	202290fa 	slli	r17,r4,3
    4060:	dcc00315 	stw	r19,12(sp)
    4064:	4a41ffcc 	andi	r9,r9,2047
    4068:	0101ffc4 	movi	r4,2047
    406c:	2824d7fa 	srli	r18,r5,31
    4070:	8401ffcc 	andi	r16,r16,2047
    4074:	50c6b03a 	or	r3,r10,r3
    4078:	380ed7fa 	srli	r7,r7,31
    407c:	408ab03a 	or	r5,r8,r2
    4080:	300c90fa 	slli	r6,r6,3
    4084:	49009626 	beq	r9,r4,42e0 <__subdf3+0x2c0>
    4088:	39c0005c 	xori	r7,r7,1
    408c:	8245c83a 	sub	r2,r16,r9
    4090:	3c807426 	beq	r7,r18,4264 <__subdf3+0x244>
    4094:	0080af0e 	bge	zero,r2,4354 <__subdf3+0x334>
    4098:	48002a1e 	bne	r9,zero,4144 <__subdf3+0x124>
    409c:	2988b03a 	or	r4,r5,r6
    40a0:	20009a1e 	bne	r4,zero,430c <__subdf3+0x2ec>
    40a4:	888001cc 	andi	r2,r17,7
    40a8:	10000726 	beq	r2,zero,40c8 <__subdf3+0xa8>
    40ac:	888003cc 	andi	r2,r17,15
    40b0:	01000104 	movi	r4,4
    40b4:	11000426 	beq	r2,r4,40c8 <__subdf3+0xa8>
    40b8:	890b883a 	add	r5,r17,r4
    40bc:	2c63803a 	cmpltu	r17,r5,r17
    40c0:	1c47883a 	add	r3,r3,r17
    40c4:	2823883a 	mov	r17,r5
    40c8:	1880202c 	andhi	r2,r3,128
    40cc:	10005926 	beq	r2,zero,4234 <__subdf3+0x214>
    40d0:	84000044 	addi	r16,r16,1
    40d4:	0081ffc4 	movi	r2,2047
    40d8:	8080be26 	beq	r16,r2,43d4 <__subdf3+0x3b4>
    40dc:	017fe034 	movhi	r5,65408
    40e0:	297fffc4 	addi	r5,r5,-1
    40e4:	1946703a 	and	r3,r3,r5
    40e8:	1804977a 	slli	r2,r3,29
    40ec:	1806927a 	slli	r3,r3,9
    40f0:	8822d0fa 	srli	r17,r17,3
    40f4:	8401ffcc 	andi	r16,r16,2047
    40f8:	180ad33a 	srli	r5,r3,12
    40fc:	9100004c 	andi	r4,r18,1
    4100:	1444b03a 	or	r2,r2,r17
    4104:	80c1ffcc 	andi	r3,r16,2047
    4108:	1820953a 	slli	r16,r3,20
    410c:	20c03fcc 	andi	r3,r4,255
    4110:	180897fa 	slli	r4,r3,31
    4114:	00c00434 	movhi	r3,16
    4118:	18ffffc4 	addi	r3,r3,-1
    411c:	28c6703a 	and	r3,r5,r3
    4120:	1c06b03a 	or	r3,r3,r16
    4124:	1906b03a 	or	r3,r3,r4
    4128:	dfc00417 	ldw	ra,16(sp)
    412c:	dcc00317 	ldw	r19,12(sp)
    4130:	dc800217 	ldw	r18,8(sp)
    4134:	dc400117 	ldw	r17,4(sp)
    4138:	dc000017 	ldw	r16,0(sp)
    413c:	dec00504 	addi	sp,sp,20
    4140:	f800283a 	ret
    4144:	0101ffc4 	movi	r4,2047
    4148:	813fd626 	beq	r16,r4,40a4 <__alt_data_end+0xfffe40a4>
    414c:	29402034 	orhi	r5,r5,128
    4150:	01000e04 	movi	r4,56
    4154:	2080a316 	blt	r4,r2,43e4 <__subdf3+0x3c4>
    4158:	010007c4 	movi	r4,31
    415c:	2080c616 	blt	r4,r2,4478 <__subdf3+0x458>
    4160:	01000804 	movi	r4,32
    4164:	2089c83a 	sub	r4,r4,r2
    4168:	2910983a 	sll	r8,r5,r4
    416c:	308ed83a 	srl	r7,r6,r2
    4170:	3108983a 	sll	r4,r6,r4
    4174:	2884d83a 	srl	r2,r5,r2
    4178:	41ccb03a 	or	r6,r8,r7
    417c:	2008c03a 	cmpne	r4,r4,zero
    4180:	310cb03a 	or	r6,r6,r4
    4184:	898dc83a 	sub	r6,r17,r6
    4188:	89a3803a 	cmpltu	r17,r17,r6
    418c:	1887c83a 	sub	r3,r3,r2
    4190:	1c47c83a 	sub	r3,r3,r17
    4194:	3023883a 	mov	r17,r6
    4198:	1880202c 	andhi	r2,r3,128
    419c:	10002326 	beq	r2,zero,422c <__subdf3+0x20c>
    41a0:	04c02034 	movhi	r19,128
    41a4:	9cffffc4 	addi	r19,r19,-1
    41a8:	1ce6703a 	and	r19,r3,r19
    41ac:	98007a26 	beq	r19,zero,4398 <__subdf3+0x378>
    41b0:	9809883a 	mov	r4,r19
    41b4:	00049f80 	call	49f8 <__clzsi2>
    41b8:	113ffe04 	addi	r4,r2,-8
    41bc:	00c007c4 	movi	r3,31
    41c0:	19007b16 	blt	r3,r4,43b0 <__subdf3+0x390>
    41c4:	00800804 	movi	r2,32
    41c8:	1105c83a 	sub	r2,r2,r4
    41cc:	8884d83a 	srl	r2,r17,r2
    41d0:	9906983a 	sll	r3,r19,r4
    41d4:	8922983a 	sll	r17,r17,r4
    41d8:	10c4b03a 	or	r2,r2,r3
    41dc:	24007816 	blt	r4,r16,43c0 <__subdf3+0x3a0>
    41e0:	2421c83a 	sub	r16,r4,r16
    41e4:	80c00044 	addi	r3,r16,1
    41e8:	010007c4 	movi	r4,31
    41ec:	20c09516 	blt	r4,r3,4444 <__subdf3+0x424>
    41f0:	01400804 	movi	r5,32
    41f4:	28cbc83a 	sub	r5,r5,r3
    41f8:	88c8d83a 	srl	r4,r17,r3
    41fc:	8962983a 	sll	r17,r17,r5
    4200:	114a983a 	sll	r5,r2,r5
    4204:	10c6d83a 	srl	r3,r2,r3
    4208:	8804c03a 	cmpne	r2,r17,zero
    420c:	290ab03a 	or	r5,r5,r4
    4210:	28a2b03a 	or	r17,r5,r2
    4214:	0021883a 	mov	r16,zero
    4218:	003fa206 	br	40a4 <__alt_data_end+0xfffe40a4>
    421c:	2090b03a 	or	r8,r4,r2
    4220:	40018e26 	beq	r8,zero,485c <__subdf3+0x83c>
    4224:	1007883a 	mov	r3,r2
    4228:	2023883a 	mov	r17,r4
    422c:	888001cc 	andi	r2,r17,7
    4230:	103f9e1e 	bne	r2,zero,40ac <__alt_data_end+0xfffe40ac>
    4234:	1804977a 	slli	r2,r3,29
    4238:	8822d0fa 	srli	r17,r17,3
    423c:	1810d0fa 	srli	r8,r3,3
    4240:	9100004c 	andi	r4,r18,1
    4244:	1444b03a 	or	r2,r2,r17
    4248:	00c1ffc4 	movi	r3,2047
    424c:	80c02826 	beq	r16,r3,42f0 <__subdf3+0x2d0>
    4250:	01400434 	movhi	r5,16
    4254:	297fffc4 	addi	r5,r5,-1
    4258:	80e0703a 	and	r16,r16,r3
    425c:	414a703a 	and	r5,r8,r5
    4260:	003fa806 	br	4104 <__alt_data_end+0xfffe4104>
    4264:	0080630e 	bge	zero,r2,43f4 <__subdf3+0x3d4>
    4268:	48003026 	beq	r9,zero,432c <__subdf3+0x30c>
    426c:	0101ffc4 	movi	r4,2047
    4270:	813f8c26 	beq	r16,r4,40a4 <__alt_data_end+0xfffe40a4>
    4274:	29402034 	orhi	r5,r5,128
    4278:	01000e04 	movi	r4,56
    427c:	2080a90e 	bge	r4,r2,4524 <__subdf3+0x504>
    4280:	298cb03a 	or	r6,r5,r6
    4284:	3012c03a 	cmpne	r9,r6,zero
    4288:	0005883a 	mov	r2,zero
    428c:	4c53883a 	add	r9,r9,r17
    4290:	4c63803a 	cmpltu	r17,r9,r17
    4294:	10c7883a 	add	r3,r2,r3
    4298:	88c7883a 	add	r3,r17,r3
    429c:	4823883a 	mov	r17,r9
    42a0:	1880202c 	andhi	r2,r3,128
    42a4:	1000d026 	beq	r2,zero,45e8 <__subdf3+0x5c8>
    42a8:	84000044 	addi	r16,r16,1
    42ac:	0081ffc4 	movi	r2,2047
    42b0:	8080fe26 	beq	r16,r2,46ac <__subdf3+0x68c>
    42b4:	00bfe034 	movhi	r2,65408
    42b8:	10bfffc4 	addi	r2,r2,-1
    42bc:	1886703a 	and	r3,r3,r2
    42c0:	880ad07a 	srli	r5,r17,1
    42c4:	180497fa 	slli	r2,r3,31
    42c8:	8900004c 	andi	r4,r17,1
    42cc:	2922b03a 	or	r17,r5,r4
    42d0:	1806d07a 	srli	r3,r3,1
    42d4:	1462b03a 	or	r17,r2,r17
    42d8:	3825883a 	mov	r18,r7
    42dc:	003f7106 	br	40a4 <__alt_data_end+0xfffe40a4>
    42e0:	2984b03a 	or	r2,r5,r6
    42e4:	103f6826 	beq	r2,zero,4088 <__alt_data_end+0xfffe4088>
    42e8:	39c03fcc 	andi	r7,r7,255
    42ec:	003f6706 	br	408c <__alt_data_end+0xfffe408c>
    42f0:	4086b03a 	or	r3,r8,r2
    42f4:	18015226 	beq	r3,zero,4840 <__subdf3+0x820>
    42f8:	00c00434 	movhi	r3,16
    42fc:	41400234 	orhi	r5,r8,8
    4300:	18ffffc4 	addi	r3,r3,-1
    4304:	28ca703a 	and	r5,r5,r3
    4308:	003f7e06 	br	4104 <__alt_data_end+0xfffe4104>
    430c:	10bfffc4 	addi	r2,r2,-1
    4310:	1000491e 	bne	r2,zero,4438 <__subdf3+0x418>
    4314:	898fc83a 	sub	r7,r17,r6
    4318:	89e3803a 	cmpltu	r17,r17,r7
    431c:	1947c83a 	sub	r3,r3,r5
    4320:	1c47c83a 	sub	r3,r3,r17
    4324:	3823883a 	mov	r17,r7
    4328:	003f9b06 	br	4198 <__alt_data_end+0xfffe4198>
    432c:	2988b03a 	or	r4,r5,r6
    4330:	203f5c26 	beq	r4,zero,40a4 <__alt_data_end+0xfffe40a4>
    4334:	10bfffc4 	addi	r2,r2,-1
    4338:	1000931e 	bne	r2,zero,4588 <__subdf3+0x568>
    433c:	898d883a 	add	r6,r17,r6
    4340:	3463803a 	cmpltu	r17,r6,r17
    4344:	1947883a 	add	r3,r3,r5
    4348:	88c7883a 	add	r3,r17,r3
    434c:	3023883a 	mov	r17,r6
    4350:	003fd306 	br	42a0 <__alt_data_end+0xfffe42a0>
    4354:	1000541e 	bne	r2,zero,44a8 <__subdf3+0x488>
    4358:	80800044 	addi	r2,r16,1
    435c:	1081ffcc 	andi	r2,r2,2047
    4360:	01000044 	movi	r4,1
    4364:	2080a20e 	bge	r4,r2,45f0 <__subdf3+0x5d0>
    4368:	8989c83a 	sub	r4,r17,r6
    436c:	8905803a 	cmpltu	r2,r17,r4
    4370:	1967c83a 	sub	r19,r3,r5
    4374:	98a7c83a 	sub	r19,r19,r2
    4378:	9880202c 	andhi	r2,r19,128
    437c:	10006326 	beq	r2,zero,450c <__subdf3+0x4ec>
    4380:	3463c83a 	sub	r17,r6,r17
    4384:	28c7c83a 	sub	r3,r5,r3
    4388:	344d803a 	cmpltu	r6,r6,r17
    438c:	19a7c83a 	sub	r19,r3,r6
    4390:	3825883a 	mov	r18,r7
    4394:	983f861e 	bne	r19,zero,41b0 <__alt_data_end+0xfffe41b0>
    4398:	8809883a 	mov	r4,r17
    439c:	00049f80 	call	49f8 <__clzsi2>
    43a0:	10800804 	addi	r2,r2,32
    43a4:	113ffe04 	addi	r4,r2,-8
    43a8:	00c007c4 	movi	r3,31
    43ac:	193f850e 	bge	r3,r4,41c4 <__alt_data_end+0xfffe41c4>
    43b0:	10bff604 	addi	r2,r2,-40
    43b4:	8884983a 	sll	r2,r17,r2
    43b8:	0023883a 	mov	r17,zero
    43bc:	243f880e 	bge	r4,r16,41e0 <__alt_data_end+0xfffe41e0>
    43c0:	00ffe034 	movhi	r3,65408
    43c4:	18ffffc4 	addi	r3,r3,-1
    43c8:	8121c83a 	sub	r16,r16,r4
    43cc:	10c6703a 	and	r3,r2,r3
    43d0:	003f3406 	br	40a4 <__alt_data_end+0xfffe40a4>
    43d4:	9100004c 	andi	r4,r18,1
    43d8:	000b883a 	mov	r5,zero
    43dc:	0005883a 	mov	r2,zero
    43e0:	003f4806 	br	4104 <__alt_data_end+0xfffe4104>
    43e4:	298cb03a 	or	r6,r5,r6
    43e8:	300cc03a 	cmpne	r6,r6,zero
    43ec:	0005883a 	mov	r2,zero
    43f0:	003f6406 	br	4184 <__alt_data_end+0xfffe4184>
    43f4:	10009a1e 	bne	r2,zero,4660 <__subdf3+0x640>
    43f8:	82400044 	addi	r9,r16,1
    43fc:	4881ffcc 	andi	r2,r9,2047
    4400:	02800044 	movi	r10,1
    4404:	5080670e 	bge	r10,r2,45a4 <__subdf3+0x584>
    4408:	0081ffc4 	movi	r2,2047
    440c:	4880af26 	beq	r9,r2,46cc <__subdf3+0x6ac>
    4410:	898d883a 	add	r6,r17,r6
    4414:	1945883a 	add	r2,r3,r5
    4418:	3447803a 	cmpltu	r3,r6,r17
    441c:	1887883a 	add	r3,r3,r2
    4420:	182297fa 	slli	r17,r3,31
    4424:	300cd07a 	srli	r6,r6,1
    4428:	1806d07a 	srli	r3,r3,1
    442c:	4821883a 	mov	r16,r9
    4430:	89a2b03a 	or	r17,r17,r6
    4434:	003f1b06 	br	40a4 <__alt_data_end+0xfffe40a4>
    4438:	0101ffc4 	movi	r4,2047
    443c:	813f441e 	bne	r16,r4,4150 <__alt_data_end+0xfffe4150>
    4440:	003f1806 	br	40a4 <__alt_data_end+0xfffe40a4>
    4444:	843ff844 	addi	r16,r16,-31
    4448:	01400804 	movi	r5,32
    444c:	1408d83a 	srl	r4,r2,r16
    4450:	19405026 	beq	r3,r5,4594 <__subdf3+0x574>
    4454:	01401004 	movi	r5,64
    4458:	28c7c83a 	sub	r3,r5,r3
    445c:	10c4983a 	sll	r2,r2,r3
    4460:	88a2b03a 	or	r17,r17,r2
    4464:	8822c03a 	cmpne	r17,r17,zero
    4468:	2462b03a 	or	r17,r4,r17
    446c:	0007883a 	mov	r3,zero
    4470:	0021883a 	mov	r16,zero
    4474:	003f6d06 	br	422c <__alt_data_end+0xfffe422c>
    4478:	11fff804 	addi	r7,r2,-32
    447c:	01000804 	movi	r4,32
    4480:	29ced83a 	srl	r7,r5,r7
    4484:	11004526 	beq	r2,r4,459c <__subdf3+0x57c>
    4488:	01001004 	movi	r4,64
    448c:	2089c83a 	sub	r4,r4,r2
    4490:	2904983a 	sll	r2,r5,r4
    4494:	118cb03a 	or	r6,r2,r6
    4498:	300cc03a 	cmpne	r6,r6,zero
    449c:	398cb03a 	or	r6,r7,r6
    44a0:	0005883a 	mov	r2,zero
    44a4:	003f3706 	br	4184 <__alt_data_end+0xfffe4184>
    44a8:	80002a26 	beq	r16,zero,4554 <__subdf3+0x534>
    44ac:	0101ffc4 	movi	r4,2047
    44b0:	49006626 	beq	r9,r4,464c <__subdf3+0x62c>
    44b4:	0085c83a 	sub	r2,zero,r2
    44b8:	18c02034 	orhi	r3,r3,128
    44bc:	01000e04 	movi	r4,56
    44c0:	20807e16 	blt	r4,r2,46bc <__subdf3+0x69c>
    44c4:	010007c4 	movi	r4,31
    44c8:	2080e716 	blt	r4,r2,4868 <__subdf3+0x848>
    44cc:	01000804 	movi	r4,32
    44d0:	2089c83a 	sub	r4,r4,r2
    44d4:	1914983a 	sll	r10,r3,r4
    44d8:	8890d83a 	srl	r8,r17,r2
    44dc:	8908983a 	sll	r4,r17,r4
    44e0:	1884d83a 	srl	r2,r3,r2
    44e4:	5222b03a 	or	r17,r10,r8
    44e8:	2006c03a 	cmpne	r3,r4,zero
    44ec:	88e2b03a 	or	r17,r17,r3
    44f0:	3463c83a 	sub	r17,r6,r17
    44f4:	2885c83a 	sub	r2,r5,r2
    44f8:	344d803a 	cmpltu	r6,r6,r17
    44fc:	1187c83a 	sub	r3,r2,r6
    4500:	4821883a 	mov	r16,r9
    4504:	3825883a 	mov	r18,r7
    4508:	003f2306 	br	4198 <__alt_data_end+0xfffe4198>
    450c:	24d0b03a 	or	r8,r4,r19
    4510:	40001b1e 	bne	r8,zero,4580 <__subdf3+0x560>
    4514:	0005883a 	mov	r2,zero
    4518:	0009883a 	mov	r4,zero
    451c:	0021883a 	mov	r16,zero
    4520:	003f4906 	br	4248 <__alt_data_end+0xfffe4248>
    4524:	010007c4 	movi	r4,31
    4528:	20803a16 	blt	r4,r2,4614 <__subdf3+0x5f4>
    452c:	01000804 	movi	r4,32
    4530:	2089c83a 	sub	r4,r4,r2
    4534:	2912983a 	sll	r9,r5,r4
    4538:	3090d83a 	srl	r8,r6,r2
    453c:	3108983a 	sll	r4,r6,r4
    4540:	2884d83a 	srl	r2,r5,r2
    4544:	4a12b03a 	or	r9,r9,r8
    4548:	2008c03a 	cmpne	r4,r4,zero
    454c:	4912b03a 	or	r9,r9,r4
    4550:	003f4e06 	br	428c <__alt_data_end+0xfffe428c>
    4554:	1c48b03a 	or	r4,r3,r17
    4558:	20003c26 	beq	r4,zero,464c <__subdf3+0x62c>
    455c:	0084303a 	nor	r2,zero,r2
    4560:	1000381e 	bne	r2,zero,4644 <__subdf3+0x624>
    4564:	3463c83a 	sub	r17,r6,r17
    4568:	28c5c83a 	sub	r2,r5,r3
    456c:	344d803a 	cmpltu	r6,r6,r17
    4570:	1187c83a 	sub	r3,r2,r6
    4574:	4821883a 	mov	r16,r9
    4578:	3825883a 	mov	r18,r7
    457c:	003f0606 	br	4198 <__alt_data_end+0xfffe4198>
    4580:	2023883a 	mov	r17,r4
    4584:	003f0906 	br	41ac <__alt_data_end+0xfffe41ac>
    4588:	0101ffc4 	movi	r4,2047
    458c:	813f3a1e 	bne	r16,r4,4278 <__alt_data_end+0xfffe4278>
    4590:	003ec406 	br	40a4 <__alt_data_end+0xfffe40a4>
    4594:	0005883a 	mov	r2,zero
    4598:	003fb106 	br	4460 <__alt_data_end+0xfffe4460>
    459c:	0005883a 	mov	r2,zero
    45a0:	003fbc06 	br	4494 <__alt_data_end+0xfffe4494>
    45a4:	1c44b03a 	or	r2,r3,r17
    45a8:	80008e1e 	bne	r16,zero,47e4 <__subdf3+0x7c4>
    45ac:	1000c826 	beq	r2,zero,48d0 <__subdf3+0x8b0>
    45b0:	2984b03a 	or	r2,r5,r6
    45b4:	103ebb26 	beq	r2,zero,40a4 <__alt_data_end+0xfffe40a4>
    45b8:	8989883a 	add	r4,r17,r6
    45bc:	1945883a 	add	r2,r3,r5
    45c0:	2447803a 	cmpltu	r3,r4,r17
    45c4:	1887883a 	add	r3,r3,r2
    45c8:	1880202c 	andhi	r2,r3,128
    45cc:	2023883a 	mov	r17,r4
    45d0:	103f1626 	beq	r2,zero,422c <__alt_data_end+0xfffe422c>
    45d4:	00bfe034 	movhi	r2,65408
    45d8:	10bfffc4 	addi	r2,r2,-1
    45dc:	5021883a 	mov	r16,r10
    45e0:	1886703a 	and	r3,r3,r2
    45e4:	003eaf06 	br	40a4 <__alt_data_end+0xfffe40a4>
    45e8:	3825883a 	mov	r18,r7
    45ec:	003f0f06 	br	422c <__alt_data_end+0xfffe422c>
    45f0:	1c44b03a 	or	r2,r3,r17
    45f4:	8000251e 	bne	r16,zero,468c <__subdf3+0x66c>
    45f8:	1000661e 	bne	r2,zero,4794 <__subdf3+0x774>
    45fc:	2990b03a 	or	r8,r5,r6
    4600:	40009626 	beq	r8,zero,485c <__subdf3+0x83c>
    4604:	2807883a 	mov	r3,r5
    4608:	3023883a 	mov	r17,r6
    460c:	3825883a 	mov	r18,r7
    4610:	003ea406 	br	40a4 <__alt_data_end+0xfffe40a4>
    4614:	127ff804 	addi	r9,r2,-32
    4618:	01000804 	movi	r4,32
    461c:	2a52d83a 	srl	r9,r5,r9
    4620:	11008c26 	beq	r2,r4,4854 <__subdf3+0x834>
    4624:	01001004 	movi	r4,64
    4628:	2085c83a 	sub	r2,r4,r2
    462c:	2884983a 	sll	r2,r5,r2
    4630:	118cb03a 	or	r6,r2,r6
    4634:	300cc03a 	cmpne	r6,r6,zero
    4638:	4992b03a 	or	r9,r9,r6
    463c:	0005883a 	mov	r2,zero
    4640:	003f1206 	br	428c <__alt_data_end+0xfffe428c>
    4644:	0101ffc4 	movi	r4,2047
    4648:	493f9c1e 	bne	r9,r4,44bc <__alt_data_end+0xfffe44bc>
    464c:	2807883a 	mov	r3,r5
    4650:	3023883a 	mov	r17,r6
    4654:	4821883a 	mov	r16,r9
    4658:	3825883a 	mov	r18,r7
    465c:	003e9106 	br	40a4 <__alt_data_end+0xfffe40a4>
    4660:	80001f1e 	bne	r16,zero,46e0 <__subdf3+0x6c0>
    4664:	1c48b03a 	or	r4,r3,r17
    4668:	20005a26 	beq	r4,zero,47d4 <__subdf3+0x7b4>
    466c:	0084303a 	nor	r2,zero,r2
    4670:	1000561e 	bne	r2,zero,47cc <__subdf3+0x7ac>
    4674:	89a3883a 	add	r17,r17,r6
    4678:	1945883a 	add	r2,r3,r5
    467c:	898d803a 	cmpltu	r6,r17,r6
    4680:	3087883a 	add	r3,r6,r2
    4684:	4821883a 	mov	r16,r9
    4688:	003f0506 	br	42a0 <__alt_data_end+0xfffe42a0>
    468c:	10002b1e 	bne	r2,zero,473c <__subdf3+0x71c>
    4690:	2984b03a 	or	r2,r5,r6
    4694:	10008026 	beq	r2,zero,4898 <__subdf3+0x878>
    4698:	2807883a 	mov	r3,r5
    469c:	3023883a 	mov	r17,r6
    46a0:	3825883a 	mov	r18,r7
    46a4:	0401ffc4 	movi	r16,2047
    46a8:	003e7e06 	br	40a4 <__alt_data_end+0xfffe40a4>
    46ac:	3809883a 	mov	r4,r7
    46b0:	0011883a 	mov	r8,zero
    46b4:	0005883a 	mov	r2,zero
    46b8:	003ee306 	br	4248 <__alt_data_end+0xfffe4248>
    46bc:	1c62b03a 	or	r17,r3,r17
    46c0:	8822c03a 	cmpne	r17,r17,zero
    46c4:	0005883a 	mov	r2,zero
    46c8:	003f8906 	br	44f0 <__alt_data_end+0xfffe44f0>
    46cc:	3809883a 	mov	r4,r7
    46d0:	4821883a 	mov	r16,r9
    46d4:	0011883a 	mov	r8,zero
    46d8:	0005883a 	mov	r2,zero
    46dc:	003eda06 	br	4248 <__alt_data_end+0xfffe4248>
    46e0:	0101ffc4 	movi	r4,2047
    46e4:	49003b26 	beq	r9,r4,47d4 <__subdf3+0x7b4>
    46e8:	0085c83a 	sub	r2,zero,r2
    46ec:	18c02034 	orhi	r3,r3,128
    46f0:	01000e04 	movi	r4,56
    46f4:	20806e16 	blt	r4,r2,48b0 <__subdf3+0x890>
    46f8:	010007c4 	movi	r4,31
    46fc:	20807716 	blt	r4,r2,48dc <__subdf3+0x8bc>
    4700:	01000804 	movi	r4,32
    4704:	2089c83a 	sub	r4,r4,r2
    4708:	1914983a 	sll	r10,r3,r4
    470c:	8890d83a 	srl	r8,r17,r2
    4710:	8908983a 	sll	r4,r17,r4
    4714:	1884d83a 	srl	r2,r3,r2
    4718:	5222b03a 	or	r17,r10,r8
    471c:	2006c03a 	cmpne	r3,r4,zero
    4720:	88e2b03a 	or	r17,r17,r3
    4724:	89a3883a 	add	r17,r17,r6
    4728:	1145883a 	add	r2,r2,r5
    472c:	898d803a 	cmpltu	r6,r17,r6
    4730:	3087883a 	add	r3,r6,r2
    4734:	4821883a 	mov	r16,r9
    4738:	003ed906 	br	42a0 <__alt_data_end+0xfffe42a0>
    473c:	2984b03a 	or	r2,r5,r6
    4740:	10004226 	beq	r2,zero,484c <__subdf3+0x82c>
    4744:	1808d0fa 	srli	r4,r3,3
    4748:	8822d0fa 	srli	r17,r17,3
    474c:	1806977a 	slli	r3,r3,29
    4750:	2080022c 	andhi	r2,r4,8
    4754:	1c62b03a 	or	r17,r3,r17
    4758:	10000826 	beq	r2,zero,477c <__subdf3+0x75c>
    475c:	2812d0fa 	srli	r9,r5,3
    4760:	4880022c 	andhi	r2,r9,8
    4764:	1000051e 	bne	r2,zero,477c <__subdf3+0x75c>
    4768:	300cd0fa 	srli	r6,r6,3
    476c:	2804977a 	slli	r2,r5,29
    4770:	4809883a 	mov	r4,r9
    4774:	3825883a 	mov	r18,r7
    4778:	11a2b03a 	or	r17,r2,r6
    477c:	8806d77a 	srli	r3,r17,29
    4780:	200890fa 	slli	r4,r4,3
    4784:	882290fa 	slli	r17,r17,3
    4788:	0401ffc4 	movi	r16,2047
    478c:	1906b03a 	or	r3,r3,r4
    4790:	003e4406 	br	40a4 <__alt_data_end+0xfffe40a4>
    4794:	2984b03a 	or	r2,r5,r6
    4798:	103e4226 	beq	r2,zero,40a4 <__alt_data_end+0xfffe40a4>
    479c:	8989c83a 	sub	r4,r17,r6
    47a0:	8911803a 	cmpltu	r8,r17,r4
    47a4:	1945c83a 	sub	r2,r3,r5
    47a8:	1205c83a 	sub	r2,r2,r8
    47ac:	1200202c 	andhi	r8,r2,128
    47b0:	403e9a26 	beq	r8,zero,421c <__alt_data_end+0xfffe421c>
    47b4:	3463c83a 	sub	r17,r6,r17
    47b8:	28c5c83a 	sub	r2,r5,r3
    47bc:	344d803a 	cmpltu	r6,r6,r17
    47c0:	1187c83a 	sub	r3,r2,r6
    47c4:	3825883a 	mov	r18,r7
    47c8:	003e3606 	br	40a4 <__alt_data_end+0xfffe40a4>
    47cc:	0101ffc4 	movi	r4,2047
    47d0:	493fc71e 	bne	r9,r4,46f0 <__alt_data_end+0xfffe46f0>
    47d4:	2807883a 	mov	r3,r5
    47d8:	3023883a 	mov	r17,r6
    47dc:	4821883a 	mov	r16,r9
    47e0:	003e3006 	br	40a4 <__alt_data_end+0xfffe40a4>
    47e4:	10003626 	beq	r2,zero,48c0 <__subdf3+0x8a0>
    47e8:	2984b03a 	or	r2,r5,r6
    47ec:	10001726 	beq	r2,zero,484c <__subdf3+0x82c>
    47f0:	1808d0fa 	srli	r4,r3,3
    47f4:	8822d0fa 	srli	r17,r17,3
    47f8:	1806977a 	slli	r3,r3,29
    47fc:	2080022c 	andhi	r2,r4,8
    4800:	1c62b03a 	or	r17,r3,r17
    4804:	10000726 	beq	r2,zero,4824 <__subdf3+0x804>
    4808:	2812d0fa 	srli	r9,r5,3
    480c:	4880022c 	andhi	r2,r9,8
    4810:	1000041e 	bne	r2,zero,4824 <__subdf3+0x804>
    4814:	300cd0fa 	srli	r6,r6,3
    4818:	2804977a 	slli	r2,r5,29
    481c:	4809883a 	mov	r4,r9
    4820:	11a2b03a 	or	r17,r2,r6
    4824:	8806d77a 	srli	r3,r17,29
    4828:	200890fa 	slli	r4,r4,3
    482c:	882290fa 	slli	r17,r17,3
    4830:	3825883a 	mov	r18,r7
    4834:	1906b03a 	or	r3,r3,r4
    4838:	0401ffc4 	movi	r16,2047
    483c:	003e1906 	br	40a4 <__alt_data_end+0xfffe40a4>
    4840:	000b883a 	mov	r5,zero
    4844:	0005883a 	mov	r2,zero
    4848:	003e2e06 	br	4104 <__alt_data_end+0xfffe4104>
    484c:	0401ffc4 	movi	r16,2047
    4850:	003e1406 	br	40a4 <__alt_data_end+0xfffe40a4>
    4854:	0005883a 	mov	r2,zero
    4858:	003f7506 	br	4630 <__alt_data_end+0xfffe4630>
    485c:	0005883a 	mov	r2,zero
    4860:	0009883a 	mov	r4,zero
    4864:	003e7806 	br	4248 <__alt_data_end+0xfffe4248>
    4868:	123ff804 	addi	r8,r2,-32
    486c:	01000804 	movi	r4,32
    4870:	1a10d83a 	srl	r8,r3,r8
    4874:	11002526 	beq	r2,r4,490c <__subdf3+0x8ec>
    4878:	01001004 	movi	r4,64
    487c:	2085c83a 	sub	r2,r4,r2
    4880:	1884983a 	sll	r2,r3,r2
    4884:	1444b03a 	or	r2,r2,r17
    4888:	1004c03a 	cmpne	r2,r2,zero
    488c:	40a2b03a 	or	r17,r8,r2
    4890:	0005883a 	mov	r2,zero
    4894:	003f1606 	br	44f0 <__alt_data_end+0xfffe44f0>
    4898:	02000434 	movhi	r8,16
    489c:	0009883a 	mov	r4,zero
    48a0:	423fffc4 	addi	r8,r8,-1
    48a4:	00bfffc4 	movi	r2,-1
    48a8:	0401ffc4 	movi	r16,2047
    48ac:	003e6606 	br	4248 <__alt_data_end+0xfffe4248>
    48b0:	1c62b03a 	or	r17,r3,r17
    48b4:	8822c03a 	cmpne	r17,r17,zero
    48b8:	0005883a 	mov	r2,zero
    48bc:	003f9906 	br	4724 <__alt_data_end+0xfffe4724>
    48c0:	2807883a 	mov	r3,r5
    48c4:	3023883a 	mov	r17,r6
    48c8:	0401ffc4 	movi	r16,2047
    48cc:	003df506 	br	40a4 <__alt_data_end+0xfffe40a4>
    48d0:	2807883a 	mov	r3,r5
    48d4:	3023883a 	mov	r17,r6
    48d8:	003df206 	br	40a4 <__alt_data_end+0xfffe40a4>
    48dc:	123ff804 	addi	r8,r2,-32
    48e0:	01000804 	movi	r4,32
    48e4:	1a10d83a 	srl	r8,r3,r8
    48e8:	11000a26 	beq	r2,r4,4914 <__subdf3+0x8f4>
    48ec:	01001004 	movi	r4,64
    48f0:	2085c83a 	sub	r2,r4,r2
    48f4:	1884983a 	sll	r2,r3,r2
    48f8:	1444b03a 	or	r2,r2,r17
    48fc:	1004c03a 	cmpne	r2,r2,zero
    4900:	40a2b03a 	or	r17,r8,r2
    4904:	0005883a 	mov	r2,zero
    4908:	003f8606 	br	4724 <__alt_data_end+0xfffe4724>
    490c:	0005883a 	mov	r2,zero
    4910:	003fdc06 	br	4884 <__alt_data_end+0xfffe4884>
    4914:	0005883a 	mov	r2,zero
    4918:	003ff706 	br	48f8 <__alt_data_end+0xfffe48f8>

0000491c <__floatsidf>:
    491c:	defffd04 	addi	sp,sp,-12
    4920:	dfc00215 	stw	ra,8(sp)
    4924:	dc400115 	stw	r17,4(sp)
    4928:	dc000015 	stw	r16,0(sp)
    492c:	20002b26 	beq	r4,zero,49dc <__floatsidf+0xc0>
    4930:	2023883a 	mov	r17,r4
    4934:	2020d7fa 	srli	r16,r4,31
    4938:	20002d16 	blt	r4,zero,49f0 <__floatsidf+0xd4>
    493c:	8809883a 	mov	r4,r17
    4940:	00049f80 	call	49f8 <__clzsi2>
    4944:	01410784 	movi	r5,1054
    4948:	288bc83a 	sub	r5,r5,r2
    494c:	01010cc4 	movi	r4,1075
    4950:	2149c83a 	sub	r4,r4,r5
    4954:	00c007c4 	movi	r3,31
    4958:	1900160e 	bge	r3,r4,49b4 <__floatsidf+0x98>
    495c:	00c104c4 	movi	r3,1043
    4960:	1947c83a 	sub	r3,r3,r5
    4964:	88c6983a 	sll	r3,r17,r3
    4968:	00800434 	movhi	r2,16
    496c:	10bfffc4 	addi	r2,r2,-1
    4970:	1886703a 	and	r3,r3,r2
    4974:	2941ffcc 	andi	r5,r5,2047
    4978:	800d883a 	mov	r6,r16
    497c:	0005883a 	mov	r2,zero
    4980:	280a953a 	slli	r5,r5,20
    4984:	31803fcc 	andi	r6,r6,255
    4988:	01000434 	movhi	r4,16
    498c:	300c97fa 	slli	r6,r6,31
    4990:	213fffc4 	addi	r4,r4,-1
    4994:	1906703a 	and	r3,r3,r4
    4998:	1946b03a 	or	r3,r3,r5
    499c:	1986b03a 	or	r3,r3,r6
    49a0:	dfc00217 	ldw	ra,8(sp)
    49a4:	dc400117 	ldw	r17,4(sp)
    49a8:	dc000017 	ldw	r16,0(sp)
    49ac:	dec00304 	addi	sp,sp,12
    49b0:	f800283a 	ret
    49b4:	00c002c4 	movi	r3,11
    49b8:	1887c83a 	sub	r3,r3,r2
    49bc:	88c6d83a 	srl	r3,r17,r3
    49c0:	8904983a 	sll	r2,r17,r4
    49c4:	01000434 	movhi	r4,16
    49c8:	213fffc4 	addi	r4,r4,-1
    49cc:	2941ffcc 	andi	r5,r5,2047
    49d0:	1906703a 	and	r3,r3,r4
    49d4:	800d883a 	mov	r6,r16
    49d8:	003fe906 	br	4980 <__alt_data_end+0xfffe4980>
    49dc:	000d883a 	mov	r6,zero
    49e0:	000b883a 	mov	r5,zero
    49e4:	0007883a 	mov	r3,zero
    49e8:	0005883a 	mov	r2,zero
    49ec:	003fe406 	br	4980 <__alt_data_end+0xfffe4980>
    49f0:	0123c83a 	sub	r17,zero,r4
    49f4:	003fd106 	br	493c <__alt_data_end+0xfffe493c>

000049f8 <__clzsi2>:
    49f8:	00bfffd4 	movui	r2,65535
    49fc:	11000536 	bltu	r2,r4,4a14 <__clzsi2+0x1c>
    4a00:	00803fc4 	movi	r2,255
    4a04:	11000f36 	bltu	r2,r4,4a44 <__clzsi2+0x4c>
    4a08:	00800804 	movi	r2,32
    4a0c:	0007883a 	mov	r3,zero
    4a10:	00000506 	br	4a28 <__clzsi2+0x30>
    4a14:	00804034 	movhi	r2,256
    4a18:	10bfffc4 	addi	r2,r2,-1
    4a1c:	11000c2e 	bgeu	r2,r4,4a50 <__clzsi2+0x58>
    4a20:	00800204 	movi	r2,8
    4a24:	00c00604 	movi	r3,24
    4a28:	20c8d83a 	srl	r4,r4,r3
    4a2c:	00c00074 	movhi	r3,1
    4a30:	18cbfd84 	addi	r3,r3,12278
    4a34:	1909883a 	add	r4,r3,r4
    4a38:	20c00003 	ldbu	r3,0(r4)
    4a3c:	10c5c83a 	sub	r2,r2,r3
    4a40:	f800283a 	ret
    4a44:	00800604 	movi	r2,24
    4a48:	00c00204 	movi	r3,8
    4a4c:	003ff606 	br	4a28 <__alt_data_end+0xfffe4a28>
    4a50:	00800404 	movi	r2,16
    4a54:	1007883a 	mov	r3,r2
    4a58:	003ff306 	br	4a28 <__alt_data_end+0xfffe4a28>

00004a5c <__divsi3>:
    4a5c:	20001b16 	blt	r4,zero,4acc <__divsi3+0x70>
    4a60:	000f883a 	mov	r7,zero
    4a64:	28001616 	blt	r5,zero,4ac0 <__divsi3+0x64>
    4a68:	200d883a 	mov	r6,r4
    4a6c:	29001a2e 	bgeu	r5,r4,4ad8 <__divsi3+0x7c>
    4a70:	00800804 	movi	r2,32
    4a74:	00c00044 	movi	r3,1
    4a78:	00000106 	br	4a80 <__divsi3+0x24>
    4a7c:	10000d26 	beq	r2,zero,4ab4 <__divsi3+0x58>
    4a80:	294b883a 	add	r5,r5,r5
    4a84:	10bfffc4 	addi	r2,r2,-1
    4a88:	18c7883a 	add	r3,r3,r3
    4a8c:	293ffb36 	bltu	r5,r4,4a7c <__alt_data_end+0xfffe4a7c>
    4a90:	0005883a 	mov	r2,zero
    4a94:	18000726 	beq	r3,zero,4ab4 <__divsi3+0x58>
    4a98:	0005883a 	mov	r2,zero
    4a9c:	31400236 	bltu	r6,r5,4aa8 <__divsi3+0x4c>
    4aa0:	314dc83a 	sub	r6,r6,r5
    4aa4:	10c4b03a 	or	r2,r2,r3
    4aa8:	1806d07a 	srli	r3,r3,1
    4aac:	280ad07a 	srli	r5,r5,1
    4ab0:	183ffa1e 	bne	r3,zero,4a9c <__alt_data_end+0xfffe4a9c>
    4ab4:	38000126 	beq	r7,zero,4abc <__divsi3+0x60>
    4ab8:	0085c83a 	sub	r2,zero,r2
    4abc:	f800283a 	ret
    4ac0:	014bc83a 	sub	r5,zero,r5
    4ac4:	39c0005c 	xori	r7,r7,1
    4ac8:	003fe706 	br	4a68 <__alt_data_end+0xfffe4a68>
    4acc:	0109c83a 	sub	r4,zero,r4
    4ad0:	01c00044 	movi	r7,1
    4ad4:	003fe306 	br	4a64 <__alt_data_end+0xfffe4a64>
    4ad8:	00c00044 	movi	r3,1
    4adc:	003fee06 	br	4a98 <__alt_data_end+0xfffe4a98>

00004ae0 <__modsi3>:
    4ae0:	20001716 	blt	r4,zero,4b40 <__modsi3+0x60>
    4ae4:	000f883a 	mov	r7,zero
    4ae8:	2005883a 	mov	r2,r4
    4aec:	28001216 	blt	r5,zero,4b38 <__modsi3+0x58>
    4af0:	2900162e 	bgeu	r5,r4,4b4c <__modsi3+0x6c>
    4af4:	01800804 	movi	r6,32
    4af8:	00c00044 	movi	r3,1
    4afc:	00000106 	br	4b04 <__modsi3+0x24>
    4b00:	30000a26 	beq	r6,zero,4b2c <__modsi3+0x4c>
    4b04:	294b883a 	add	r5,r5,r5
    4b08:	31bfffc4 	addi	r6,r6,-1
    4b0c:	18c7883a 	add	r3,r3,r3
    4b10:	293ffb36 	bltu	r5,r4,4b00 <__alt_data_end+0xfffe4b00>
    4b14:	18000526 	beq	r3,zero,4b2c <__modsi3+0x4c>
    4b18:	1806d07a 	srli	r3,r3,1
    4b1c:	11400136 	bltu	r2,r5,4b24 <__modsi3+0x44>
    4b20:	1145c83a 	sub	r2,r2,r5
    4b24:	280ad07a 	srli	r5,r5,1
    4b28:	183ffb1e 	bne	r3,zero,4b18 <__alt_data_end+0xfffe4b18>
    4b2c:	38000126 	beq	r7,zero,4b34 <__modsi3+0x54>
    4b30:	0085c83a 	sub	r2,zero,r2
    4b34:	f800283a 	ret
    4b38:	014bc83a 	sub	r5,zero,r5
    4b3c:	003fec06 	br	4af0 <__alt_data_end+0xfffe4af0>
    4b40:	0109c83a 	sub	r4,zero,r4
    4b44:	01c00044 	movi	r7,1
    4b48:	003fe706 	br	4ae8 <__alt_data_end+0xfffe4ae8>
    4b4c:	00c00044 	movi	r3,1
    4b50:	003ff106 	br	4b18 <__alt_data_end+0xfffe4b18>

00004b54 <__udivsi3>:
    4b54:	200d883a 	mov	r6,r4
    4b58:	2900152e 	bgeu	r5,r4,4bb0 <__udivsi3+0x5c>
    4b5c:	28001416 	blt	r5,zero,4bb0 <__udivsi3+0x5c>
    4b60:	00800804 	movi	r2,32
    4b64:	00c00044 	movi	r3,1
    4b68:	00000206 	br	4b74 <__udivsi3+0x20>
    4b6c:	10000e26 	beq	r2,zero,4ba8 <__udivsi3+0x54>
    4b70:	28000516 	blt	r5,zero,4b88 <__udivsi3+0x34>
    4b74:	294b883a 	add	r5,r5,r5
    4b78:	10bfffc4 	addi	r2,r2,-1
    4b7c:	18c7883a 	add	r3,r3,r3
    4b80:	293ffa36 	bltu	r5,r4,4b6c <__alt_data_end+0xfffe4b6c>
    4b84:	18000826 	beq	r3,zero,4ba8 <__udivsi3+0x54>
    4b88:	0005883a 	mov	r2,zero
    4b8c:	31400236 	bltu	r6,r5,4b98 <__udivsi3+0x44>
    4b90:	314dc83a 	sub	r6,r6,r5
    4b94:	10c4b03a 	or	r2,r2,r3
    4b98:	1806d07a 	srli	r3,r3,1
    4b9c:	280ad07a 	srli	r5,r5,1
    4ba0:	183ffa1e 	bne	r3,zero,4b8c <__alt_data_end+0xfffe4b8c>
    4ba4:	f800283a 	ret
    4ba8:	0005883a 	mov	r2,zero
    4bac:	f800283a 	ret
    4bb0:	00c00044 	movi	r3,1
    4bb4:	003ff406 	br	4b88 <__alt_data_end+0xfffe4b88>

00004bb8 <__umodsi3>:
    4bb8:	2005883a 	mov	r2,r4
    4bbc:	2900122e 	bgeu	r5,r4,4c08 <__umodsi3+0x50>
    4bc0:	28001116 	blt	r5,zero,4c08 <__umodsi3+0x50>
    4bc4:	01800804 	movi	r6,32
    4bc8:	00c00044 	movi	r3,1
    4bcc:	00000206 	br	4bd8 <__umodsi3+0x20>
    4bd0:	30000c26 	beq	r6,zero,4c04 <__umodsi3+0x4c>
    4bd4:	28000516 	blt	r5,zero,4bec <__umodsi3+0x34>
    4bd8:	294b883a 	add	r5,r5,r5
    4bdc:	31bfffc4 	addi	r6,r6,-1
    4be0:	18c7883a 	add	r3,r3,r3
    4be4:	293ffa36 	bltu	r5,r4,4bd0 <__alt_data_end+0xfffe4bd0>
    4be8:	18000626 	beq	r3,zero,4c04 <__umodsi3+0x4c>
    4bec:	1806d07a 	srli	r3,r3,1
    4bf0:	11400136 	bltu	r2,r5,4bf8 <__umodsi3+0x40>
    4bf4:	1145c83a 	sub	r2,r2,r5
    4bf8:	280ad07a 	srli	r5,r5,1
    4bfc:	183ffb1e 	bne	r3,zero,4bec <__alt_data_end+0xfffe4bec>
    4c00:	f800283a 	ret
    4c04:	f800283a 	ret
    4c08:	00c00044 	movi	r3,1
    4c0c:	003ff706 	br	4bec <__alt_data_end+0xfffe4bec>

00004c10 <difftime>:
    4c10:	deffff04 	addi	sp,sp,-4
    4c14:	2149c83a 	sub	r4,r4,r5
    4c18:	dfc00015 	stw	ra,0(sp)
    4c1c:	000491c0 	call	491c <__floatsidf>
    4c20:	dfc00017 	ldw	ra,0(sp)
    4c24:	dec00104 	addi	sp,sp,4
    4c28:	f800283a 	ret

00004c2c <exit>:
    4c2c:	defffe04 	addi	sp,sp,-8
    4c30:	000b883a 	mov	r5,zero
    4c34:	dc000015 	stw	r16,0(sp)
    4c38:	dfc00115 	stw	ra,4(sp)
    4c3c:	2021883a 	mov	r16,r4
    4c40:	0009b800 	call	9b80 <__call_exitprocs>
    4c44:	00800074 	movhi	r2,1
    4c48:	10936c04 	addi	r2,r2,19888
    4c4c:	11000017 	ldw	r4,0(r2)
    4c50:	20800f17 	ldw	r2,60(r4)
    4c54:	10000126 	beq	r2,zero,4c5c <exit+0x30>
    4c58:	103ee83a 	callr	r2
    4c5c:	8009883a 	mov	r4,r16
    4c60:	00106500 	call	10650 <_exit>

00004c64 <_fclose_r>:
    4c64:	28003926 	beq	r5,zero,4d4c <_fclose_r+0xe8>
    4c68:	defffc04 	addi	sp,sp,-16
    4c6c:	dc400115 	stw	r17,4(sp)
    4c70:	dc000015 	stw	r16,0(sp)
    4c74:	dfc00315 	stw	ra,12(sp)
    4c78:	dc800215 	stw	r18,8(sp)
    4c7c:	2023883a 	mov	r17,r4
    4c80:	2821883a 	mov	r16,r5
    4c84:	20000226 	beq	r4,zero,4c90 <_fclose_r+0x2c>
    4c88:	20800e17 	ldw	r2,56(r4)
    4c8c:	10002726 	beq	r2,zero,4d2c <_fclose_r+0xc8>
    4c90:	8080030f 	ldh	r2,12(r16)
    4c94:	1000071e 	bne	r2,zero,4cb4 <_fclose_r+0x50>
    4c98:	0005883a 	mov	r2,zero
    4c9c:	dfc00317 	ldw	ra,12(sp)
    4ca0:	dc800217 	ldw	r18,8(sp)
    4ca4:	dc400117 	ldw	r17,4(sp)
    4ca8:	dc000017 	ldw	r16,0(sp)
    4cac:	dec00404 	addi	sp,sp,16
    4cb0:	f800283a 	ret
    4cb4:	800b883a 	mov	r5,r16
    4cb8:	8809883a 	mov	r4,r17
    4cbc:	0004d680 	call	4d68 <__sflush_r>
    4cc0:	1025883a 	mov	r18,r2
    4cc4:	80800b17 	ldw	r2,44(r16)
    4cc8:	10000426 	beq	r2,zero,4cdc <_fclose_r+0x78>
    4ccc:	81400717 	ldw	r5,28(r16)
    4cd0:	8809883a 	mov	r4,r17
    4cd4:	103ee83a 	callr	r2
    4cd8:	10001616 	blt	r2,zero,4d34 <_fclose_r+0xd0>
    4cdc:	8080030b 	ldhu	r2,12(r16)
    4ce0:	1080200c 	andi	r2,r2,128
    4ce4:	1000151e 	bne	r2,zero,4d3c <_fclose_r+0xd8>
    4ce8:	81400c17 	ldw	r5,48(r16)
    4cec:	28000526 	beq	r5,zero,4d04 <_fclose_r+0xa0>
    4cf0:	80801004 	addi	r2,r16,64
    4cf4:	28800226 	beq	r5,r2,4d00 <_fclose_r+0x9c>
    4cf8:	8809883a 	mov	r4,r17
    4cfc:	00058600 	call	5860 <_free_r>
    4d00:	80000c15 	stw	zero,48(r16)
    4d04:	81401117 	ldw	r5,68(r16)
    4d08:	28000326 	beq	r5,zero,4d18 <_fclose_r+0xb4>
    4d0c:	8809883a 	mov	r4,r17
    4d10:	00058600 	call	5860 <_free_r>
    4d14:	80001115 	stw	zero,68(r16)
    4d18:	00053800 	call	5380 <__sfp_lock_acquire>
    4d1c:	8000030d 	sth	zero,12(r16)
    4d20:	00053840 	call	5384 <__sfp_lock_release>
    4d24:	9005883a 	mov	r2,r18
    4d28:	003fdc06 	br	4c9c <__alt_data_end+0xfffe4c9c>
    4d2c:	00053700 	call	5370 <__sinit>
    4d30:	003fd706 	br	4c90 <__alt_data_end+0xfffe4c90>
    4d34:	04bfffc4 	movi	r18,-1
    4d38:	003fe806 	br	4cdc <__alt_data_end+0xfffe4cdc>
    4d3c:	81400417 	ldw	r5,16(r16)
    4d40:	8809883a 	mov	r4,r17
    4d44:	00058600 	call	5860 <_free_r>
    4d48:	003fe706 	br	4ce8 <__alt_data_end+0xfffe4ce8>
    4d4c:	0005883a 	mov	r2,zero
    4d50:	f800283a 	ret

00004d54 <fclose>:
    4d54:	00800074 	movhi	r2,1
    4d58:	10936d04 	addi	r2,r2,19892
    4d5c:	200b883a 	mov	r5,r4
    4d60:	11000017 	ldw	r4,0(r2)
    4d64:	0004c641 	jmpi	4c64 <_fclose_r>

00004d68 <__sflush_r>:
    4d68:	2880030b 	ldhu	r2,12(r5)
    4d6c:	defffb04 	addi	sp,sp,-20
    4d70:	dcc00315 	stw	r19,12(sp)
    4d74:	dc400115 	stw	r17,4(sp)
    4d78:	dfc00415 	stw	ra,16(sp)
    4d7c:	dc800215 	stw	r18,8(sp)
    4d80:	dc000015 	stw	r16,0(sp)
    4d84:	10c0020c 	andi	r3,r2,8
    4d88:	2823883a 	mov	r17,r5
    4d8c:	2027883a 	mov	r19,r4
    4d90:	1800311e 	bne	r3,zero,4e58 <__sflush_r+0xf0>
    4d94:	28c00117 	ldw	r3,4(r5)
    4d98:	10820014 	ori	r2,r2,2048
    4d9c:	2880030d 	sth	r2,12(r5)
    4da0:	00c04b0e 	bge	zero,r3,4ed0 <__sflush_r+0x168>
    4da4:	8a000a17 	ldw	r8,40(r17)
    4da8:	40002326 	beq	r8,zero,4e38 <__sflush_r+0xd0>
    4dac:	9c000017 	ldw	r16,0(r19)
    4db0:	10c4000c 	andi	r3,r2,4096
    4db4:	98000015 	stw	zero,0(r19)
    4db8:	18004826 	beq	r3,zero,4edc <__sflush_r+0x174>
    4dbc:	89801417 	ldw	r6,80(r17)
    4dc0:	10c0010c 	andi	r3,r2,4
    4dc4:	18000626 	beq	r3,zero,4de0 <__sflush_r+0x78>
    4dc8:	88c00117 	ldw	r3,4(r17)
    4dcc:	88800c17 	ldw	r2,48(r17)
    4dd0:	30cdc83a 	sub	r6,r6,r3
    4dd4:	10000226 	beq	r2,zero,4de0 <__sflush_r+0x78>
    4dd8:	88800f17 	ldw	r2,60(r17)
    4ddc:	308dc83a 	sub	r6,r6,r2
    4de0:	89400717 	ldw	r5,28(r17)
    4de4:	000f883a 	mov	r7,zero
    4de8:	9809883a 	mov	r4,r19
    4dec:	403ee83a 	callr	r8
    4df0:	00ffffc4 	movi	r3,-1
    4df4:	10c04426 	beq	r2,r3,4f08 <__sflush_r+0x1a0>
    4df8:	88c0030b 	ldhu	r3,12(r17)
    4dfc:	89000417 	ldw	r4,16(r17)
    4e00:	88000115 	stw	zero,4(r17)
    4e04:	197dffcc 	andi	r5,r3,63487
    4e08:	8940030d 	sth	r5,12(r17)
    4e0c:	89000015 	stw	r4,0(r17)
    4e10:	18c4000c 	andi	r3,r3,4096
    4e14:	18002c1e 	bne	r3,zero,4ec8 <__sflush_r+0x160>
    4e18:	89400c17 	ldw	r5,48(r17)
    4e1c:	9c000015 	stw	r16,0(r19)
    4e20:	28000526 	beq	r5,zero,4e38 <__sflush_r+0xd0>
    4e24:	88801004 	addi	r2,r17,64
    4e28:	28800226 	beq	r5,r2,4e34 <__sflush_r+0xcc>
    4e2c:	9809883a 	mov	r4,r19
    4e30:	00058600 	call	5860 <_free_r>
    4e34:	88000c15 	stw	zero,48(r17)
    4e38:	0005883a 	mov	r2,zero
    4e3c:	dfc00417 	ldw	ra,16(sp)
    4e40:	dcc00317 	ldw	r19,12(sp)
    4e44:	dc800217 	ldw	r18,8(sp)
    4e48:	dc400117 	ldw	r17,4(sp)
    4e4c:	dc000017 	ldw	r16,0(sp)
    4e50:	dec00504 	addi	sp,sp,20
    4e54:	f800283a 	ret
    4e58:	2c800417 	ldw	r18,16(r5)
    4e5c:	903ff626 	beq	r18,zero,4e38 <__alt_data_end+0xfffe4e38>
    4e60:	2c000017 	ldw	r16,0(r5)
    4e64:	108000cc 	andi	r2,r2,3
    4e68:	2c800015 	stw	r18,0(r5)
    4e6c:	84a1c83a 	sub	r16,r16,r18
    4e70:	1000131e 	bne	r2,zero,4ec0 <__sflush_r+0x158>
    4e74:	28800517 	ldw	r2,20(r5)
    4e78:	88800215 	stw	r2,8(r17)
    4e7c:	04000316 	blt	zero,r16,4e8c <__sflush_r+0x124>
    4e80:	003fed06 	br	4e38 <__alt_data_end+0xfffe4e38>
    4e84:	90a5883a 	add	r18,r18,r2
    4e88:	043feb0e 	bge	zero,r16,4e38 <__alt_data_end+0xfffe4e38>
    4e8c:	88800917 	ldw	r2,36(r17)
    4e90:	89400717 	ldw	r5,28(r17)
    4e94:	800f883a 	mov	r7,r16
    4e98:	900d883a 	mov	r6,r18
    4e9c:	9809883a 	mov	r4,r19
    4ea0:	103ee83a 	callr	r2
    4ea4:	80a1c83a 	sub	r16,r16,r2
    4ea8:	00bff616 	blt	zero,r2,4e84 <__alt_data_end+0xfffe4e84>
    4eac:	88c0030b 	ldhu	r3,12(r17)
    4eb0:	00bfffc4 	movi	r2,-1
    4eb4:	18c01014 	ori	r3,r3,64
    4eb8:	88c0030d 	sth	r3,12(r17)
    4ebc:	003fdf06 	br	4e3c <__alt_data_end+0xfffe4e3c>
    4ec0:	0005883a 	mov	r2,zero
    4ec4:	003fec06 	br	4e78 <__alt_data_end+0xfffe4e78>
    4ec8:	88801415 	stw	r2,80(r17)
    4ecc:	003fd206 	br	4e18 <__alt_data_end+0xfffe4e18>
    4ed0:	28c00f17 	ldw	r3,60(r5)
    4ed4:	00ffb316 	blt	zero,r3,4da4 <__alt_data_end+0xfffe4da4>
    4ed8:	003fd706 	br	4e38 <__alt_data_end+0xfffe4e38>
    4edc:	89400717 	ldw	r5,28(r17)
    4ee0:	000d883a 	mov	r6,zero
    4ee4:	01c00044 	movi	r7,1
    4ee8:	9809883a 	mov	r4,r19
    4eec:	403ee83a 	callr	r8
    4ef0:	100d883a 	mov	r6,r2
    4ef4:	00bfffc4 	movi	r2,-1
    4ef8:	30801426 	beq	r6,r2,4f4c <__sflush_r+0x1e4>
    4efc:	8880030b 	ldhu	r2,12(r17)
    4f00:	8a000a17 	ldw	r8,40(r17)
    4f04:	003fae06 	br	4dc0 <__alt_data_end+0xfffe4dc0>
    4f08:	98c00017 	ldw	r3,0(r19)
    4f0c:	183fba26 	beq	r3,zero,4df8 <__alt_data_end+0xfffe4df8>
    4f10:	01000744 	movi	r4,29
    4f14:	19000626 	beq	r3,r4,4f30 <__sflush_r+0x1c8>
    4f18:	01000584 	movi	r4,22
    4f1c:	19000426 	beq	r3,r4,4f30 <__sflush_r+0x1c8>
    4f20:	88c0030b 	ldhu	r3,12(r17)
    4f24:	18c01014 	ori	r3,r3,64
    4f28:	88c0030d 	sth	r3,12(r17)
    4f2c:	003fc306 	br	4e3c <__alt_data_end+0xfffe4e3c>
    4f30:	8880030b 	ldhu	r2,12(r17)
    4f34:	88c00417 	ldw	r3,16(r17)
    4f38:	88000115 	stw	zero,4(r17)
    4f3c:	10bdffcc 	andi	r2,r2,63487
    4f40:	8880030d 	sth	r2,12(r17)
    4f44:	88c00015 	stw	r3,0(r17)
    4f48:	003fb306 	br	4e18 <__alt_data_end+0xfffe4e18>
    4f4c:	98800017 	ldw	r2,0(r19)
    4f50:	103fea26 	beq	r2,zero,4efc <__alt_data_end+0xfffe4efc>
    4f54:	00c00744 	movi	r3,29
    4f58:	10c00226 	beq	r2,r3,4f64 <__sflush_r+0x1fc>
    4f5c:	00c00584 	movi	r3,22
    4f60:	10c0031e 	bne	r2,r3,4f70 <__sflush_r+0x208>
    4f64:	9c000015 	stw	r16,0(r19)
    4f68:	0005883a 	mov	r2,zero
    4f6c:	003fb306 	br	4e3c <__alt_data_end+0xfffe4e3c>
    4f70:	88c0030b 	ldhu	r3,12(r17)
    4f74:	3005883a 	mov	r2,r6
    4f78:	18c01014 	ori	r3,r3,64
    4f7c:	88c0030d 	sth	r3,12(r17)
    4f80:	003fae06 	br	4e3c <__alt_data_end+0xfffe4e3c>

00004f84 <_fflush_r>:
    4f84:	defffd04 	addi	sp,sp,-12
    4f88:	dc000115 	stw	r16,4(sp)
    4f8c:	dfc00215 	stw	ra,8(sp)
    4f90:	2021883a 	mov	r16,r4
    4f94:	20000226 	beq	r4,zero,4fa0 <_fflush_r+0x1c>
    4f98:	20800e17 	ldw	r2,56(r4)
    4f9c:	10000c26 	beq	r2,zero,4fd0 <_fflush_r+0x4c>
    4fa0:	2880030f 	ldh	r2,12(r5)
    4fa4:	1000051e 	bne	r2,zero,4fbc <_fflush_r+0x38>
    4fa8:	0005883a 	mov	r2,zero
    4fac:	dfc00217 	ldw	ra,8(sp)
    4fb0:	dc000117 	ldw	r16,4(sp)
    4fb4:	dec00304 	addi	sp,sp,12
    4fb8:	f800283a 	ret
    4fbc:	8009883a 	mov	r4,r16
    4fc0:	dfc00217 	ldw	ra,8(sp)
    4fc4:	dc000117 	ldw	r16,4(sp)
    4fc8:	dec00304 	addi	sp,sp,12
    4fcc:	0004d681 	jmpi	4d68 <__sflush_r>
    4fd0:	d9400015 	stw	r5,0(sp)
    4fd4:	00053700 	call	5370 <__sinit>
    4fd8:	d9400017 	ldw	r5,0(sp)
    4fdc:	003ff006 	br	4fa0 <__alt_data_end+0xfffe4fa0>

00004fe0 <fflush>:
    4fe0:	20000526 	beq	r4,zero,4ff8 <fflush+0x18>
    4fe4:	00800074 	movhi	r2,1
    4fe8:	10936d04 	addi	r2,r2,19892
    4fec:	200b883a 	mov	r5,r4
    4ff0:	11000017 	ldw	r4,0(r2)
    4ff4:	0004f841 	jmpi	4f84 <_fflush_r>
    4ff8:	00800074 	movhi	r2,1
    4ffc:	10936c04 	addi	r2,r2,19888
    5000:	11000017 	ldw	r4,0(r2)
    5004:	01400034 	movhi	r5,0
    5008:	2953e104 	addi	r5,r5,20356
    500c:	00061101 	jmpi	6110 <_fwalk_reent>

00005010 <__fp_unlock>:
    5010:	0005883a 	mov	r2,zero
    5014:	f800283a 	ret

00005018 <_cleanup_r>:
    5018:	01400034 	movhi	r5,0
    501c:	29531904 	addi	r5,r5,19556
    5020:	00061101 	jmpi	6110 <_fwalk_reent>

00005024 <__sinit.part.1>:
    5024:	defff704 	addi	sp,sp,-36
    5028:	00c00034 	movhi	r3,0
    502c:	dfc00815 	stw	ra,32(sp)
    5030:	ddc00715 	stw	r23,28(sp)
    5034:	dd800615 	stw	r22,24(sp)
    5038:	dd400515 	stw	r21,20(sp)
    503c:	dd000415 	stw	r20,16(sp)
    5040:	dcc00315 	stw	r19,12(sp)
    5044:	dc800215 	stw	r18,8(sp)
    5048:	dc400115 	stw	r17,4(sp)
    504c:	dc000015 	stw	r16,0(sp)
    5050:	18d40604 	addi	r3,r3,20504
    5054:	24000117 	ldw	r16,4(r4)
    5058:	20c00f15 	stw	r3,60(r4)
    505c:	2080bb04 	addi	r2,r4,748
    5060:	00c000c4 	movi	r3,3
    5064:	20c0b915 	stw	r3,740(r4)
    5068:	2080ba15 	stw	r2,744(r4)
    506c:	2000b815 	stw	zero,736(r4)
    5070:	05c00204 	movi	r23,8
    5074:	00800104 	movi	r2,4
    5078:	2025883a 	mov	r18,r4
    507c:	b80d883a 	mov	r6,r23
    5080:	81001704 	addi	r4,r16,92
    5084:	000b883a 	mov	r5,zero
    5088:	80000015 	stw	zero,0(r16)
    508c:	80000115 	stw	zero,4(r16)
    5090:	80000215 	stw	zero,8(r16)
    5094:	8080030d 	sth	r2,12(r16)
    5098:	80001915 	stw	zero,100(r16)
    509c:	8000038d 	sth	zero,14(r16)
    50a0:	80000415 	stw	zero,16(r16)
    50a4:	80000515 	stw	zero,20(r16)
    50a8:	80000615 	stw	zero,24(r16)
    50ac:	0006ce40 	call	6ce4 <memset>
    50b0:	05800034 	movhi	r22,0
    50b4:	94400217 	ldw	r17,8(r18)
    50b8:	05400034 	movhi	r21,0
    50bc:	05000034 	movhi	r20,0
    50c0:	04c00034 	movhi	r19,0
    50c4:	b59ca304 	addi	r22,r22,29324
    50c8:	ad5cba04 	addi	r21,r21,29416
    50cc:	a51cd904 	addi	r20,r20,29540
    50d0:	9cdcf004 	addi	r19,r19,29632
    50d4:	85800815 	stw	r22,32(r16)
    50d8:	85400915 	stw	r21,36(r16)
    50dc:	85000a15 	stw	r20,40(r16)
    50e0:	84c00b15 	stw	r19,44(r16)
    50e4:	84000715 	stw	r16,28(r16)
    50e8:	00800284 	movi	r2,10
    50ec:	8880030d 	sth	r2,12(r17)
    50f0:	00800044 	movi	r2,1
    50f4:	b80d883a 	mov	r6,r23
    50f8:	89001704 	addi	r4,r17,92
    50fc:	000b883a 	mov	r5,zero
    5100:	88000015 	stw	zero,0(r17)
    5104:	88000115 	stw	zero,4(r17)
    5108:	88000215 	stw	zero,8(r17)
    510c:	88001915 	stw	zero,100(r17)
    5110:	8880038d 	sth	r2,14(r17)
    5114:	88000415 	stw	zero,16(r17)
    5118:	88000515 	stw	zero,20(r17)
    511c:	88000615 	stw	zero,24(r17)
    5120:	0006ce40 	call	6ce4 <memset>
    5124:	94000317 	ldw	r16,12(r18)
    5128:	00800484 	movi	r2,18
    512c:	8c400715 	stw	r17,28(r17)
    5130:	8d800815 	stw	r22,32(r17)
    5134:	8d400915 	stw	r21,36(r17)
    5138:	8d000a15 	stw	r20,40(r17)
    513c:	8cc00b15 	stw	r19,44(r17)
    5140:	8080030d 	sth	r2,12(r16)
    5144:	00800084 	movi	r2,2
    5148:	80000015 	stw	zero,0(r16)
    514c:	80000115 	stw	zero,4(r16)
    5150:	80000215 	stw	zero,8(r16)
    5154:	80001915 	stw	zero,100(r16)
    5158:	8080038d 	sth	r2,14(r16)
    515c:	80000415 	stw	zero,16(r16)
    5160:	80000515 	stw	zero,20(r16)
    5164:	80000615 	stw	zero,24(r16)
    5168:	b80d883a 	mov	r6,r23
    516c:	000b883a 	mov	r5,zero
    5170:	81001704 	addi	r4,r16,92
    5174:	0006ce40 	call	6ce4 <memset>
    5178:	00800044 	movi	r2,1
    517c:	84000715 	stw	r16,28(r16)
    5180:	85800815 	stw	r22,32(r16)
    5184:	85400915 	stw	r21,36(r16)
    5188:	85000a15 	stw	r20,40(r16)
    518c:	84c00b15 	stw	r19,44(r16)
    5190:	90800e15 	stw	r2,56(r18)
    5194:	dfc00817 	ldw	ra,32(sp)
    5198:	ddc00717 	ldw	r23,28(sp)
    519c:	dd800617 	ldw	r22,24(sp)
    51a0:	dd400517 	ldw	r21,20(sp)
    51a4:	dd000417 	ldw	r20,16(sp)
    51a8:	dcc00317 	ldw	r19,12(sp)
    51ac:	dc800217 	ldw	r18,8(sp)
    51b0:	dc400117 	ldw	r17,4(sp)
    51b4:	dc000017 	ldw	r16,0(sp)
    51b8:	dec00904 	addi	sp,sp,36
    51bc:	f800283a 	ret

000051c0 <__fp_lock>:
    51c0:	0005883a 	mov	r2,zero
    51c4:	f800283a 	ret

000051c8 <__sfmoreglue>:
    51c8:	defffc04 	addi	sp,sp,-16
    51cc:	dc800215 	stw	r18,8(sp)
    51d0:	2825883a 	mov	r18,r5
    51d4:	dc000015 	stw	r16,0(sp)
    51d8:	01401a04 	movi	r5,104
    51dc:	2021883a 	mov	r16,r4
    51e0:	913fffc4 	addi	r4,r18,-1
    51e4:	dfc00315 	stw	ra,12(sp)
    51e8:	dc400115 	stw	r17,4(sp)
    51ec:	0001a300 	call	1a30 <__mulsi3>
    51f0:	8009883a 	mov	r4,r16
    51f4:	11401d04 	addi	r5,r2,116
    51f8:	1023883a 	mov	r17,r2
    51fc:	00063900 	call	6390 <_malloc_r>
    5200:	1021883a 	mov	r16,r2
    5204:	10000726 	beq	r2,zero,5224 <__sfmoreglue+0x5c>
    5208:	11000304 	addi	r4,r2,12
    520c:	10000015 	stw	zero,0(r2)
    5210:	14800115 	stw	r18,4(r2)
    5214:	11000215 	stw	r4,8(r2)
    5218:	89801a04 	addi	r6,r17,104
    521c:	000b883a 	mov	r5,zero
    5220:	0006ce40 	call	6ce4 <memset>
    5224:	8005883a 	mov	r2,r16
    5228:	dfc00317 	ldw	ra,12(sp)
    522c:	dc800217 	ldw	r18,8(sp)
    5230:	dc400117 	ldw	r17,4(sp)
    5234:	dc000017 	ldw	r16,0(sp)
    5238:	dec00404 	addi	sp,sp,16
    523c:	f800283a 	ret

00005240 <__sfp>:
    5240:	defffb04 	addi	sp,sp,-20
    5244:	dc000015 	stw	r16,0(sp)
    5248:	04000074 	movhi	r16,1
    524c:	84136c04 	addi	r16,r16,19888
    5250:	dcc00315 	stw	r19,12(sp)
    5254:	2027883a 	mov	r19,r4
    5258:	81000017 	ldw	r4,0(r16)
    525c:	dfc00415 	stw	ra,16(sp)
    5260:	dc800215 	stw	r18,8(sp)
    5264:	20800e17 	ldw	r2,56(r4)
    5268:	dc400115 	stw	r17,4(sp)
    526c:	1000021e 	bne	r2,zero,5278 <__sfp+0x38>
    5270:	00050240 	call	5024 <__sinit.part.1>
    5274:	81000017 	ldw	r4,0(r16)
    5278:	2480b804 	addi	r18,r4,736
    527c:	047fffc4 	movi	r17,-1
    5280:	91000117 	ldw	r4,4(r18)
    5284:	94000217 	ldw	r16,8(r18)
    5288:	213fffc4 	addi	r4,r4,-1
    528c:	20000a16 	blt	r4,zero,52b8 <__sfp+0x78>
    5290:	8080030f 	ldh	r2,12(r16)
    5294:	10000c26 	beq	r2,zero,52c8 <__sfp+0x88>
    5298:	80c01d04 	addi	r3,r16,116
    529c:	00000206 	br	52a8 <__sfp+0x68>
    52a0:	18bfe60f 	ldh	r2,-104(r3)
    52a4:	10000826 	beq	r2,zero,52c8 <__sfp+0x88>
    52a8:	213fffc4 	addi	r4,r4,-1
    52ac:	1c3ffd04 	addi	r16,r3,-12
    52b0:	18c01a04 	addi	r3,r3,104
    52b4:	247ffa1e 	bne	r4,r17,52a0 <__alt_data_end+0xfffe52a0>
    52b8:	90800017 	ldw	r2,0(r18)
    52bc:	10001d26 	beq	r2,zero,5334 <__sfp+0xf4>
    52c0:	1025883a 	mov	r18,r2
    52c4:	003fee06 	br	5280 <__alt_data_end+0xfffe5280>
    52c8:	00bfffc4 	movi	r2,-1
    52cc:	8080038d 	sth	r2,14(r16)
    52d0:	00800044 	movi	r2,1
    52d4:	8080030d 	sth	r2,12(r16)
    52d8:	80001915 	stw	zero,100(r16)
    52dc:	80000015 	stw	zero,0(r16)
    52e0:	80000215 	stw	zero,8(r16)
    52e4:	80000115 	stw	zero,4(r16)
    52e8:	80000415 	stw	zero,16(r16)
    52ec:	80000515 	stw	zero,20(r16)
    52f0:	80000615 	stw	zero,24(r16)
    52f4:	01800204 	movi	r6,8
    52f8:	000b883a 	mov	r5,zero
    52fc:	81001704 	addi	r4,r16,92
    5300:	0006ce40 	call	6ce4 <memset>
    5304:	8005883a 	mov	r2,r16
    5308:	80000c15 	stw	zero,48(r16)
    530c:	80000d15 	stw	zero,52(r16)
    5310:	80001115 	stw	zero,68(r16)
    5314:	80001215 	stw	zero,72(r16)
    5318:	dfc00417 	ldw	ra,16(sp)
    531c:	dcc00317 	ldw	r19,12(sp)
    5320:	dc800217 	ldw	r18,8(sp)
    5324:	dc400117 	ldw	r17,4(sp)
    5328:	dc000017 	ldw	r16,0(sp)
    532c:	dec00504 	addi	sp,sp,20
    5330:	f800283a 	ret
    5334:	01400104 	movi	r5,4
    5338:	9809883a 	mov	r4,r19
    533c:	00051c80 	call	51c8 <__sfmoreglue>
    5340:	90800015 	stw	r2,0(r18)
    5344:	103fde1e 	bne	r2,zero,52c0 <__alt_data_end+0xfffe52c0>
    5348:	00800304 	movi	r2,12
    534c:	98800015 	stw	r2,0(r19)
    5350:	0005883a 	mov	r2,zero
    5354:	003ff006 	br	5318 <__alt_data_end+0xfffe5318>

00005358 <_cleanup>:
    5358:	00800074 	movhi	r2,1
    535c:	10936c04 	addi	r2,r2,19888
    5360:	11000017 	ldw	r4,0(r2)
    5364:	01400034 	movhi	r5,0
    5368:	29531904 	addi	r5,r5,19556
    536c:	00061101 	jmpi	6110 <_fwalk_reent>

00005370 <__sinit>:
    5370:	20800e17 	ldw	r2,56(r4)
    5374:	10000126 	beq	r2,zero,537c <__sinit+0xc>
    5378:	f800283a 	ret
    537c:	00050241 	jmpi	5024 <__sinit.part.1>

00005380 <__sfp_lock_acquire>:
    5380:	f800283a 	ret

00005384 <__sfp_lock_release>:
    5384:	f800283a 	ret

00005388 <__sinit_lock_acquire>:
    5388:	f800283a 	ret

0000538c <__sinit_lock_release>:
    538c:	f800283a 	ret

00005390 <__fp_lock_all>:
    5390:	00800074 	movhi	r2,1
    5394:	10936d04 	addi	r2,r2,19892
    5398:	11000017 	ldw	r4,0(r2)
    539c:	01400034 	movhi	r5,0
    53a0:	29547004 	addi	r5,r5,20928
    53a4:	000604c1 	jmpi	604c <_fwalk>

000053a8 <__fp_unlock_all>:
    53a8:	00800074 	movhi	r2,1
    53ac:	10936d04 	addi	r2,r2,19892
    53b0:	11000017 	ldw	r4,0(r2)
    53b4:	01400034 	movhi	r5,0
    53b8:	29540404 	addi	r5,r5,20496
    53bc:	000604c1 	jmpi	604c <_fwalk>

000053c0 <_fopen_r>:
    53c0:	defffa04 	addi	sp,sp,-24
    53c4:	3005883a 	mov	r2,r6
    53c8:	dcc00415 	stw	r19,16(sp)
    53cc:	d80d883a 	mov	r6,sp
    53d0:	2827883a 	mov	r19,r5
    53d4:	100b883a 	mov	r5,r2
    53d8:	dc800315 	stw	r18,12(sp)
    53dc:	dfc00515 	stw	ra,20(sp)
    53e0:	dc400215 	stw	r17,8(sp)
    53e4:	dc000115 	stw	r16,4(sp)
    53e8:	2025883a 	mov	r18,r4
    53ec:	000b5b00 	call	b5b0 <__sflags>
    53f0:	10002726 	beq	r2,zero,5490 <_fopen_r+0xd0>
    53f4:	9009883a 	mov	r4,r18
    53f8:	1023883a 	mov	r17,r2
    53fc:	00052400 	call	5240 <__sfp>
    5400:	1021883a 	mov	r16,r2
    5404:	10002226 	beq	r2,zero,5490 <_fopen_r+0xd0>
    5408:	d9800017 	ldw	r6,0(sp)
    540c:	01c06d84 	movi	r7,438
    5410:	980b883a 	mov	r5,r19
    5414:	9009883a 	mov	r4,r18
    5418:	0006e0c0 	call	6e0c <_open_r>
    541c:	10001916 	blt	r2,zero,5484 <_fopen_r+0xc4>
    5420:	8080038d 	sth	r2,14(r16)
    5424:	00800034 	movhi	r2,0
    5428:	109ca304 	addi	r2,r2,29324
    542c:	80800815 	stw	r2,32(r16)
    5430:	00800034 	movhi	r2,0
    5434:	109cba04 	addi	r2,r2,29416
    5438:	80800915 	stw	r2,36(r16)
    543c:	00800034 	movhi	r2,0
    5440:	109cd904 	addi	r2,r2,29540
    5444:	80800a15 	stw	r2,40(r16)
    5448:	00800034 	movhi	r2,0
    544c:	109cf004 	addi	r2,r2,29632
    5450:	8440030d 	sth	r17,12(r16)
    5454:	84000715 	stw	r16,28(r16)
    5458:	80800b15 	stw	r2,44(r16)
    545c:	8c40400c 	andi	r17,r17,256
    5460:	88000d1e 	bne	r17,zero,5498 <_fopen_r+0xd8>
    5464:	8005883a 	mov	r2,r16
    5468:	dfc00517 	ldw	ra,20(sp)
    546c:	dcc00417 	ldw	r19,16(sp)
    5470:	dc800317 	ldw	r18,12(sp)
    5474:	dc400217 	ldw	r17,8(sp)
    5478:	dc000117 	ldw	r16,4(sp)
    547c:	dec00604 	addi	sp,sp,24
    5480:	f800283a 	ret
    5484:	00053800 	call	5380 <__sfp_lock_acquire>
    5488:	8000030d 	sth	zero,12(r16)
    548c:	00053840 	call	5384 <__sfp_lock_release>
    5490:	0005883a 	mov	r2,zero
    5494:	003ff406 	br	5468 <__alt_data_end+0xfffe5468>
    5498:	01c00084 	movi	r7,2
    549c:	000d883a 	mov	r6,zero
    54a0:	800b883a 	mov	r5,r16
    54a4:	9009883a 	mov	r4,r18
    54a8:	0005b700 	call	5b70 <_fseek_r>
    54ac:	8005883a 	mov	r2,r16
    54b0:	003fed06 	br	5468 <__alt_data_end+0xfffe5468>

000054b4 <fopen>:
    54b4:	00800074 	movhi	r2,1
    54b8:	10936d04 	addi	r2,r2,19892
    54bc:	280d883a 	mov	r6,r5
    54c0:	200b883a 	mov	r5,r4
    54c4:	11000017 	ldw	r4,0(r2)
    54c8:	00053c01 	jmpi	53c0 <_fopen_r>

000054cc <_fread_r>:
    54cc:	defff404 	addi	sp,sp,-48
    54d0:	dd000615 	stw	r20,24(sp)
    54d4:	dcc00515 	stw	r19,20(sp)
    54d8:	2029883a 	mov	r20,r4
    54dc:	2827883a 	mov	r19,r5
    54e0:	3809883a 	mov	r4,r7
    54e4:	300b883a 	mov	r5,r6
    54e8:	ddc00915 	stw	r23,36(sp)
    54ec:	dd400715 	stw	r21,28(sp)
    54f0:	dc000215 	stw	r16,8(sp)
    54f4:	dfc00b15 	stw	ra,44(sp)
    54f8:	df000a15 	stw	fp,40(sp)
    54fc:	dd800815 	stw	r22,32(sp)
    5500:	dc800415 	stw	r18,16(sp)
    5504:	dc400315 	stw	r17,12(sp)
    5508:	302f883a 	mov	r23,r6
    550c:	382b883a 	mov	r21,r7
    5510:	0001a300 	call	1a30 <__mulsi3>
    5514:	dc000c17 	ldw	r16,48(sp)
    5518:	10003826 	beq	r2,zero,55fc <_fread_r+0x130>
    551c:	102d883a 	mov	r22,r2
    5520:	a0000226 	beq	r20,zero,552c <_fread_r+0x60>
    5524:	a0800e17 	ldw	r2,56(r20)
    5528:	10006e26 	beq	r2,zero,56e4 <_fread_r+0x218>
    552c:	8080030b 	ldhu	r2,12(r16)
    5530:	10c8000c 	andi	r3,r2,8192
    5534:	1800061e 	bne	r3,zero,5550 <_fread_r+0x84>
    5538:	81001917 	ldw	r4,100(r16)
    553c:	00f7ffc4 	movi	r3,-8193
    5540:	10880014 	ori	r2,r2,8192
    5544:	20c6703a 	and	r3,r4,r3
    5548:	8080030d 	sth	r2,12(r16)
    554c:	80c01915 	stw	r3,100(r16)
    5550:	84400117 	ldw	r17,4(r16)
    5554:	88005f16 	blt	r17,zero,56d4 <_fread_r+0x208>
    5558:	8809883a 	mov	r4,r17
    555c:	1080008c 	andi	r2,r2,2
    5560:	1000281e 	bne	r2,zero,5604 <_fread_r+0x138>
    5564:	b025883a 	mov	r18,r22
    5568:	00000b06 	br	5598 <_fread_r+0xcc>
    556c:	0006b9c0 	call	6b9c <memcpy>
    5570:	80800017 	ldw	r2,0(r16)
    5574:	9c67883a 	add	r19,r19,r17
    5578:	9465c83a 	sub	r18,r18,r17
    557c:	1463883a 	add	r17,r2,r17
    5580:	800b883a 	mov	r5,r16
    5584:	a009883a 	mov	r4,r20
    5588:	84400015 	stw	r17,0(r16)
    558c:	00070640 	call	7064 <__srefill_r>
    5590:	10004c1e 	bne	r2,zero,56c4 <_fread_r+0x1f8>
    5594:	84400117 	ldw	r17,4(r16)
    5598:	880d883a 	mov	r6,r17
    559c:	9809883a 	mov	r4,r19
    55a0:	81400017 	ldw	r5,0(r16)
    55a4:	8cbff136 	bltu	r17,r18,556c <__alt_data_end+0xfffe556c>
    55a8:	900d883a 	mov	r6,r18
    55ac:	0006b9c0 	call	6b9c <memcpy>
    55b0:	80c00117 	ldw	r3,4(r16)
    55b4:	81000017 	ldw	r4,0(r16)
    55b8:	a805883a 	mov	r2,r21
    55bc:	1c87c83a 	sub	r3,r3,r18
    55c0:	24a5883a 	add	r18,r4,r18
    55c4:	80c00115 	stw	r3,4(r16)
    55c8:	84800015 	stw	r18,0(r16)
    55cc:	dfc00b17 	ldw	ra,44(sp)
    55d0:	df000a17 	ldw	fp,40(sp)
    55d4:	ddc00917 	ldw	r23,36(sp)
    55d8:	dd800817 	ldw	r22,32(sp)
    55dc:	dd400717 	ldw	r21,28(sp)
    55e0:	dd000617 	ldw	r20,24(sp)
    55e4:	dcc00517 	ldw	r19,20(sp)
    55e8:	dc800417 	ldw	r18,16(sp)
    55ec:	dc400317 	ldw	r17,12(sp)
    55f0:	dc000217 	ldw	r16,8(sp)
    55f4:	dec00c04 	addi	sp,sp,48
    55f8:	f800283a 	ret
    55fc:	0005883a 	mov	r2,zero
    5600:	003ff206 	br	55cc <__alt_data_end+0xfffe55cc>
    5604:	b007883a 	mov	r3,r22
    5608:	2580012e 	bgeu	r4,r22,5610 <_fread_r+0x144>
    560c:	2007883a 	mov	r3,r4
    5610:	81400017 	ldw	r5,0(r16)
    5614:	180d883a 	mov	r6,r3
    5618:	9809883a 	mov	r4,r19
    561c:	d8c00115 	stw	r3,4(sp)
    5620:	0006b9c0 	call	6b9c <memcpy>
    5624:	d8c00117 	ldw	r3,4(sp)
    5628:	84400017 	ldw	r17,0(r16)
    562c:	80800117 	ldw	r2,4(r16)
    5630:	81400c17 	ldw	r5,48(r16)
    5634:	88e3883a 	add	r17,r17,r3
    5638:	10c5c83a 	sub	r2,r2,r3
    563c:	84400015 	stw	r17,0(r16)
    5640:	80800115 	stw	r2,4(r16)
    5644:	b0e5c83a 	sub	r18,r22,r3
    5648:	28002c26 	beq	r5,zero,56fc <_fread_r+0x230>
    564c:	90002c26 	beq	r18,zero,5700 <_fread_r+0x234>
    5650:	80801004 	addi	r2,r16,64
    5654:	28800526 	beq	r5,r2,566c <_fread_r+0x1a0>
    5658:	a009883a 	mov	r4,r20
    565c:	d8c00115 	stw	r3,4(sp)
    5660:	00058600 	call	5860 <_free_r>
    5664:	d8c00117 	ldw	r3,4(sp)
    5668:	84400017 	ldw	r17,0(r16)
    566c:	80000c15 	stw	zero,48(r16)
    5670:	80800517 	ldw	r2,20(r16)
    5674:	87000417 	ldw	fp,16(r16)
    5678:	98e7883a 	add	r19,r19,r3
    567c:	d8800015 	stw	r2,0(sp)
    5680:	00000106 	br	5688 <_fread_r+0x1bc>
    5684:	90001e26 	beq	r18,zero,5700 <_fread_r+0x234>
    5688:	84c00415 	stw	r19,16(r16)
    568c:	84800515 	stw	r18,20(r16)
    5690:	84c00015 	stw	r19,0(r16)
    5694:	a009883a 	mov	r4,r20
    5698:	800b883a 	mov	r5,r16
    569c:	00070640 	call	7064 <__srefill_r>
    56a0:	d9000017 	ldw	r4,0(sp)
    56a4:	80c00117 	ldw	r3,4(r16)
    56a8:	87000415 	stw	fp,16(r16)
    56ac:	81000515 	stw	r4,20(r16)
    56b0:	84400015 	stw	r17,0(r16)
    56b4:	80000115 	stw	zero,4(r16)
    56b8:	90e5c83a 	sub	r18,r18,r3
    56bc:	98e7883a 	add	r19,r19,r3
    56c0:	103ff026 	beq	r2,zero,5684 <__alt_data_end+0xfffe5684>
    56c4:	b80b883a 	mov	r5,r23
    56c8:	b489c83a 	sub	r4,r22,r18
    56cc:	0004b540 	call	4b54 <__udivsi3>
    56d0:	003fbe06 	br	55cc <__alt_data_end+0xfffe55cc>
    56d4:	80000115 	stw	zero,4(r16)
    56d8:	0009883a 	mov	r4,zero
    56dc:	0023883a 	mov	r17,zero
    56e0:	003f9e06 	br	555c <__alt_data_end+0xfffe555c>
    56e4:	a009883a 	mov	r4,r20
    56e8:	00053700 	call	5370 <__sinit>
    56ec:	8080030b 	ldhu	r2,12(r16)
    56f0:	10c8000c 	andi	r3,r2,8192
    56f4:	183f961e 	bne	r3,zero,5550 <__alt_data_end+0xfffe5550>
    56f8:	003f8f06 	br	5538 <__alt_data_end+0xfffe5538>
    56fc:	903fdc1e 	bne	r18,zero,5670 <__alt_data_end+0xfffe5670>
    5700:	a805883a 	mov	r2,r21
    5704:	003fb106 	br	55cc <__alt_data_end+0xfffe55cc>

00005708 <fread>:
    5708:	defffe04 	addi	sp,sp,-8
    570c:	00800074 	movhi	r2,1
    5710:	d9c00015 	stw	r7,0(sp)
    5714:	10936d04 	addi	r2,r2,19892
    5718:	300f883a 	mov	r7,r6
    571c:	280d883a 	mov	r6,r5
    5720:	200b883a 	mov	r5,r4
    5724:	11000017 	ldw	r4,0(r2)
    5728:	dfc00115 	stw	ra,4(sp)
    572c:	00054cc0 	call	54cc <_fread_r>
    5730:	dfc00117 	ldw	ra,4(sp)
    5734:	dec00204 	addi	sp,sp,8
    5738:	f800283a 	ret

0000573c <_malloc_trim_r>:
    573c:	defffb04 	addi	sp,sp,-20
    5740:	dcc00315 	stw	r19,12(sp)
    5744:	04c00074 	movhi	r19,1
    5748:	dc800215 	stw	r18,8(sp)
    574c:	dc400115 	stw	r17,4(sp)
    5750:	dc000015 	stw	r16,0(sp)
    5754:	dfc00415 	stw	ra,16(sp)
    5758:	2821883a 	mov	r16,r5
    575c:	9ccdc704 	addi	r19,r19,14108
    5760:	2025883a 	mov	r18,r4
    5764:	0010cd40 	call	10cd4 <__malloc_lock>
    5768:	98800217 	ldw	r2,8(r19)
    576c:	14400117 	ldw	r17,4(r2)
    5770:	00bfff04 	movi	r2,-4
    5774:	88a2703a 	and	r17,r17,r2
    5778:	8c21c83a 	sub	r16,r17,r16
    577c:	8403fbc4 	addi	r16,r16,4079
    5780:	8020d33a 	srli	r16,r16,12
    5784:	0083ffc4 	movi	r2,4095
    5788:	843fffc4 	addi	r16,r16,-1
    578c:	8020933a 	slli	r16,r16,12
    5790:	1400060e 	bge	r2,r16,57ac <_malloc_trim_r+0x70>
    5794:	000b883a 	mov	r5,zero
    5798:	9009883a 	mov	r4,r18
    579c:	00072380 	call	7238 <_sbrk_r>
    57a0:	98c00217 	ldw	r3,8(r19)
    57a4:	1c47883a 	add	r3,r3,r17
    57a8:	10c00a26 	beq	r2,r3,57d4 <_malloc_trim_r+0x98>
    57ac:	9009883a 	mov	r4,r18
    57b0:	0010cf80 	call	10cf8 <__malloc_unlock>
    57b4:	0005883a 	mov	r2,zero
    57b8:	dfc00417 	ldw	ra,16(sp)
    57bc:	dcc00317 	ldw	r19,12(sp)
    57c0:	dc800217 	ldw	r18,8(sp)
    57c4:	dc400117 	ldw	r17,4(sp)
    57c8:	dc000017 	ldw	r16,0(sp)
    57cc:	dec00504 	addi	sp,sp,20
    57d0:	f800283a 	ret
    57d4:	040bc83a 	sub	r5,zero,r16
    57d8:	9009883a 	mov	r4,r18
    57dc:	00072380 	call	7238 <_sbrk_r>
    57e0:	00ffffc4 	movi	r3,-1
    57e4:	10c00d26 	beq	r2,r3,581c <_malloc_trim_r+0xe0>
    57e8:	00c00074 	movhi	r3,1
    57ec:	18da4c04 	addi	r3,r3,26928
    57f0:	18800017 	ldw	r2,0(r3)
    57f4:	99000217 	ldw	r4,8(r19)
    57f8:	8c23c83a 	sub	r17,r17,r16
    57fc:	8c400054 	ori	r17,r17,1
    5800:	1421c83a 	sub	r16,r2,r16
    5804:	24400115 	stw	r17,4(r4)
    5808:	9009883a 	mov	r4,r18
    580c:	1c000015 	stw	r16,0(r3)
    5810:	0010cf80 	call	10cf8 <__malloc_unlock>
    5814:	00800044 	movi	r2,1
    5818:	003fe706 	br	57b8 <__alt_data_end+0xfffe57b8>
    581c:	000b883a 	mov	r5,zero
    5820:	9009883a 	mov	r4,r18
    5824:	00072380 	call	7238 <_sbrk_r>
    5828:	99000217 	ldw	r4,8(r19)
    582c:	014003c4 	movi	r5,15
    5830:	1107c83a 	sub	r3,r2,r4
    5834:	28ffdd0e 	bge	r5,r3,57ac <__alt_data_end+0xfffe57ac>
    5838:	01400074 	movhi	r5,1
    583c:	29536e04 	addi	r5,r5,19896
    5840:	29400017 	ldw	r5,0(r5)
    5844:	18c00054 	ori	r3,r3,1
    5848:	20c00115 	stw	r3,4(r4)
    584c:	00c00074 	movhi	r3,1
    5850:	1145c83a 	sub	r2,r2,r5
    5854:	18da4c04 	addi	r3,r3,26928
    5858:	18800015 	stw	r2,0(r3)
    585c:	003fd306 	br	57ac <__alt_data_end+0xfffe57ac>

00005860 <_free_r>:
    5860:	28004126 	beq	r5,zero,5968 <_free_r+0x108>
    5864:	defffd04 	addi	sp,sp,-12
    5868:	dc400115 	stw	r17,4(sp)
    586c:	dc000015 	stw	r16,0(sp)
    5870:	2023883a 	mov	r17,r4
    5874:	2821883a 	mov	r16,r5
    5878:	dfc00215 	stw	ra,8(sp)
    587c:	0010cd40 	call	10cd4 <__malloc_lock>
    5880:	81ffff17 	ldw	r7,-4(r16)
    5884:	00bfff84 	movi	r2,-2
    5888:	01000074 	movhi	r4,1
    588c:	81bffe04 	addi	r6,r16,-8
    5890:	3884703a 	and	r2,r7,r2
    5894:	210dc704 	addi	r4,r4,14108
    5898:	308b883a 	add	r5,r6,r2
    589c:	2a400117 	ldw	r9,4(r5)
    58a0:	22000217 	ldw	r8,8(r4)
    58a4:	00ffff04 	movi	r3,-4
    58a8:	48c6703a 	and	r3,r9,r3
    58ac:	2a005726 	beq	r5,r8,5a0c <_free_r+0x1ac>
    58b0:	28c00115 	stw	r3,4(r5)
    58b4:	39c0004c 	andi	r7,r7,1
    58b8:	3800091e 	bne	r7,zero,58e0 <_free_r+0x80>
    58bc:	823ffe17 	ldw	r8,-8(r16)
    58c0:	22400204 	addi	r9,r4,8
    58c4:	320dc83a 	sub	r6,r6,r8
    58c8:	31c00217 	ldw	r7,8(r6)
    58cc:	1205883a 	add	r2,r2,r8
    58d0:	3a406526 	beq	r7,r9,5a68 <_free_r+0x208>
    58d4:	32000317 	ldw	r8,12(r6)
    58d8:	3a000315 	stw	r8,12(r7)
    58dc:	41c00215 	stw	r7,8(r8)
    58e0:	28cf883a 	add	r7,r5,r3
    58e4:	39c00117 	ldw	r7,4(r7)
    58e8:	39c0004c 	andi	r7,r7,1
    58ec:	38003a26 	beq	r7,zero,59d8 <_free_r+0x178>
    58f0:	10c00054 	ori	r3,r2,1
    58f4:	30c00115 	stw	r3,4(r6)
    58f8:	3087883a 	add	r3,r6,r2
    58fc:	18800015 	stw	r2,0(r3)
    5900:	00c07fc4 	movi	r3,511
    5904:	18801936 	bltu	r3,r2,596c <_free_r+0x10c>
    5908:	1004d0fa 	srli	r2,r2,3
    590c:	01c00044 	movi	r7,1
    5910:	21400117 	ldw	r5,4(r4)
    5914:	10c00044 	addi	r3,r2,1
    5918:	18c7883a 	add	r3,r3,r3
    591c:	1005d0ba 	srai	r2,r2,2
    5920:	18c7883a 	add	r3,r3,r3
    5924:	18c7883a 	add	r3,r3,r3
    5928:	1907883a 	add	r3,r3,r4
    592c:	3884983a 	sll	r2,r7,r2
    5930:	19c00017 	ldw	r7,0(r3)
    5934:	1a3ffe04 	addi	r8,r3,-8
    5938:	1144b03a 	or	r2,r2,r5
    593c:	32000315 	stw	r8,12(r6)
    5940:	31c00215 	stw	r7,8(r6)
    5944:	20800115 	stw	r2,4(r4)
    5948:	19800015 	stw	r6,0(r3)
    594c:	39800315 	stw	r6,12(r7)
    5950:	8809883a 	mov	r4,r17
    5954:	dfc00217 	ldw	ra,8(sp)
    5958:	dc400117 	ldw	r17,4(sp)
    595c:	dc000017 	ldw	r16,0(sp)
    5960:	dec00304 	addi	sp,sp,12
    5964:	0010cf81 	jmpi	10cf8 <__malloc_unlock>
    5968:	f800283a 	ret
    596c:	100ad27a 	srli	r5,r2,9
    5970:	00c00104 	movi	r3,4
    5974:	19404a36 	bltu	r3,r5,5aa0 <_free_r+0x240>
    5978:	100ad1ba 	srli	r5,r2,6
    597c:	28c00e44 	addi	r3,r5,57
    5980:	18c7883a 	add	r3,r3,r3
    5984:	29400e04 	addi	r5,r5,56
    5988:	18c7883a 	add	r3,r3,r3
    598c:	18c7883a 	add	r3,r3,r3
    5990:	1909883a 	add	r4,r3,r4
    5994:	20c00017 	ldw	r3,0(r4)
    5998:	01c00074 	movhi	r7,1
    599c:	213ffe04 	addi	r4,r4,-8
    59a0:	39cdc704 	addi	r7,r7,14108
    59a4:	20c04426 	beq	r4,r3,5ab8 <_free_r+0x258>
    59a8:	01ffff04 	movi	r7,-4
    59ac:	19400117 	ldw	r5,4(r3)
    59b0:	29ca703a 	and	r5,r5,r7
    59b4:	1140022e 	bgeu	r2,r5,59c0 <_free_r+0x160>
    59b8:	18c00217 	ldw	r3,8(r3)
    59bc:	20fffb1e 	bne	r4,r3,59ac <__alt_data_end+0xfffe59ac>
    59c0:	19000317 	ldw	r4,12(r3)
    59c4:	31000315 	stw	r4,12(r6)
    59c8:	30c00215 	stw	r3,8(r6)
    59cc:	21800215 	stw	r6,8(r4)
    59d0:	19800315 	stw	r6,12(r3)
    59d4:	003fde06 	br	5950 <__alt_data_end+0xfffe5950>
    59d8:	29c00217 	ldw	r7,8(r5)
    59dc:	10c5883a 	add	r2,r2,r3
    59e0:	00c00074 	movhi	r3,1
    59e4:	18cdc904 	addi	r3,r3,14116
    59e8:	38c03b26 	beq	r7,r3,5ad8 <_free_r+0x278>
    59ec:	2a000317 	ldw	r8,12(r5)
    59f0:	11400054 	ori	r5,r2,1
    59f4:	3087883a 	add	r3,r6,r2
    59f8:	3a000315 	stw	r8,12(r7)
    59fc:	41c00215 	stw	r7,8(r8)
    5a00:	31400115 	stw	r5,4(r6)
    5a04:	18800015 	stw	r2,0(r3)
    5a08:	003fbd06 	br	5900 <__alt_data_end+0xfffe5900>
    5a0c:	39c0004c 	andi	r7,r7,1
    5a10:	10c5883a 	add	r2,r2,r3
    5a14:	3800071e 	bne	r7,zero,5a34 <_free_r+0x1d4>
    5a18:	81fffe17 	ldw	r7,-8(r16)
    5a1c:	31cdc83a 	sub	r6,r6,r7
    5a20:	30c00317 	ldw	r3,12(r6)
    5a24:	31400217 	ldw	r5,8(r6)
    5a28:	11c5883a 	add	r2,r2,r7
    5a2c:	28c00315 	stw	r3,12(r5)
    5a30:	19400215 	stw	r5,8(r3)
    5a34:	10c00054 	ori	r3,r2,1
    5a38:	30c00115 	stw	r3,4(r6)
    5a3c:	00c00074 	movhi	r3,1
    5a40:	18d36f04 	addi	r3,r3,19900
    5a44:	18c00017 	ldw	r3,0(r3)
    5a48:	21800215 	stw	r6,8(r4)
    5a4c:	10ffc036 	bltu	r2,r3,5950 <__alt_data_end+0xfffe5950>
    5a50:	00800074 	movhi	r2,1
    5a54:	109a3d04 	addi	r2,r2,26868
    5a58:	11400017 	ldw	r5,0(r2)
    5a5c:	8809883a 	mov	r4,r17
    5a60:	000573c0 	call	573c <_malloc_trim_r>
    5a64:	003fba06 	br	5950 <__alt_data_end+0xfffe5950>
    5a68:	28c9883a 	add	r4,r5,r3
    5a6c:	21000117 	ldw	r4,4(r4)
    5a70:	2100004c 	andi	r4,r4,1
    5a74:	2000391e 	bne	r4,zero,5b5c <_free_r+0x2fc>
    5a78:	29c00217 	ldw	r7,8(r5)
    5a7c:	29000317 	ldw	r4,12(r5)
    5a80:	1885883a 	add	r2,r3,r2
    5a84:	10c00054 	ori	r3,r2,1
    5a88:	39000315 	stw	r4,12(r7)
    5a8c:	21c00215 	stw	r7,8(r4)
    5a90:	30c00115 	stw	r3,4(r6)
    5a94:	308d883a 	add	r6,r6,r2
    5a98:	30800015 	stw	r2,0(r6)
    5a9c:	003fac06 	br	5950 <__alt_data_end+0xfffe5950>
    5aa0:	00c00504 	movi	r3,20
    5aa4:	19401536 	bltu	r3,r5,5afc <_free_r+0x29c>
    5aa8:	28c01704 	addi	r3,r5,92
    5aac:	18c7883a 	add	r3,r3,r3
    5ab0:	294016c4 	addi	r5,r5,91
    5ab4:	003fb406 	br	5988 <__alt_data_end+0xfffe5988>
    5ab8:	280bd0ba 	srai	r5,r5,2
    5abc:	00c00044 	movi	r3,1
    5ac0:	38800117 	ldw	r2,4(r7)
    5ac4:	194a983a 	sll	r5,r3,r5
    5ac8:	2007883a 	mov	r3,r4
    5acc:	2884b03a 	or	r2,r5,r2
    5ad0:	38800115 	stw	r2,4(r7)
    5ad4:	003fbb06 	br	59c4 <__alt_data_end+0xfffe59c4>
    5ad8:	21800515 	stw	r6,20(r4)
    5adc:	21800415 	stw	r6,16(r4)
    5ae0:	10c00054 	ori	r3,r2,1
    5ae4:	31c00315 	stw	r7,12(r6)
    5ae8:	31c00215 	stw	r7,8(r6)
    5aec:	30c00115 	stw	r3,4(r6)
    5af0:	308d883a 	add	r6,r6,r2
    5af4:	30800015 	stw	r2,0(r6)
    5af8:	003f9506 	br	5950 <__alt_data_end+0xfffe5950>
    5afc:	00c01504 	movi	r3,84
    5b00:	19400536 	bltu	r3,r5,5b18 <_free_r+0x2b8>
    5b04:	100ad33a 	srli	r5,r2,12
    5b08:	28c01bc4 	addi	r3,r5,111
    5b0c:	18c7883a 	add	r3,r3,r3
    5b10:	29401b84 	addi	r5,r5,110
    5b14:	003f9c06 	br	5988 <__alt_data_end+0xfffe5988>
    5b18:	00c05504 	movi	r3,340
    5b1c:	19400536 	bltu	r3,r5,5b34 <_free_r+0x2d4>
    5b20:	100ad3fa 	srli	r5,r2,15
    5b24:	28c01e04 	addi	r3,r5,120
    5b28:	18c7883a 	add	r3,r3,r3
    5b2c:	29401dc4 	addi	r5,r5,119
    5b30:	003f9506 	br	5988 <__alt_data_end+0xfffe5988>
    5b34:	00c15504 	movi	r3,1364
    5b38:	19400536 	bltu	r3,r5,5b50 <_free_r+0x2f0>
    5b3c:	100ad4ba 	srli	r5,r2,18
    5b40:	28c01f44 	addi	r3,r5,125
    5b44:	18c7883a 	add	r3,r3,r3
    5b48:	29401f04 	addi	r5,r5,124
    5b4c:	003f8e06 	br	5988 <__alt_data_end+0xfffe5988>
    5b50:	00c03f84 	movi	r3,254
    5b54:	01401f84 	movi	r5,126
    5b58:	003f8b06 	br	5988 <__alt_data_end+0xfffe5988>
    5b5c:	10c00054 	ori	r3,r2,1
    5b60:	30c00115 	stw	r3,4(r6)
    5b64:	308d883a 	add	r6,r6,r2
    5b68:	30800015 	stw	r2,0(r6)
    5b6c:	003f7806 	br	5950 <__alt_data_end+0xfffe5950>

00005b70 <_fseek_r>:
    5b70:	0005b901 	jmpi	5b90 <_fseeko_r>

00005b74 <fseek>:
    5b74:	00800074 	movhi	r2,1
    5b78:	10936d04 	addi	r2,r2,19892
    5b7c:	300f883a 	mov	r7,r6
    5b80:	280d883a 	mov	r6,r5
    5b84:	200b883a 	mov	r5,r4
    5b88:	11000017 	ldw	r4,0(r2)
    5b8c:	0005b901 	jmpi	5b90 <_fseeko_r>

00005b90 <_fseeko_r>:
    5b90:	deffe804 	addi	sp,sp,-96
    5b94:	dd401415 	stw	r21,80(sp)
    5b98:	dc801115 	stw	r18,68(sp)
    5b9c:	dc401015 	stw	r17,64(sp)
    5ba0:	dc000f15 	stw	r16,60(sp)
    5ba4:	dfc01715 	stw	ra,92(sp)
    5ba8:	ddc01615 	stw	r23,88(sp)
    5bac:	dd801515 	stw	r22,84(sp)
    5bb0:	dd001315 	stw	r20,76(sp)
    5bb4:	dcc01215 	stw	r19,72(sp)
    5bb8:	2023883a 	mov	r17,r4
    5bbc:	2821883a 	mov	r16,r5
    5bc0:	302b883a 	mov	r21,r6
    5bc4:	3825883a 	mov	r18,r7
    5bc8:	20000226 	beq	r4,zero,5bd4 <_fseeko_r+0x44>
    5bcc:	20800e17 	ldw	r2,56(r4)
    5bd0:	10005a26 	beq	r2,zero,5d3c <_fseeko_r+0x1ac>
    5bd4:	8080030b 	ldhu	r2,12(r16)
    5bd8:	00c04204 	movi	r3,264
    5bdc:	1080420c 	andi	r2,r2,264
    5be0:	10c05b26 	beq	r2,r3,5d50 <_fseeko_r+0x1c0>
    5be4:	85000a17 	ldw	r20,40(r16)
    5be8:	a000f626 	beq	r20,zero,5fc4 <_fseeko_r+0x434>
    5bec:	00800044 	movi	r2,1
    5bf0:	90803e26 	beq	r18,r2,5cec <_fseeko_r+0x15c>
    5bf4:	00800084 	movi	r2,2
    5bf8:	90801026 	beq	r18,r2,5c3c <_fseeko_r+0xac>
    5bfc:	90000f26 	beq	r18,zero,5c3c <_fseeko_r+0xac>
    5c00:	00800584 	movi	r2,22
    5c04:	88800015 	stw	r2,0(r17)
    5c08:	04ffffc4 	movi	r19,-1
    5c0c:	9805883a 	mov	r2,r19
    5c10:	dfc01717 	ldw	ra,92(sp)
    5c14:	ddc01617 	ldw	r23,88(sp)
    5c18:	dd801517 	ldw	r22,84(sp)
    5c1c:	dd401417 	ldw	r21,80(sp)
    5c20:	dd001317 	ldw	r20,76(sp)
    5c24:	dcc01217 	ldw	r19,72(sp)
    5c28:	dc801117 	ldw	r18,68(sp)
    5c2c:	dc401017 	ldw	r17,64(sp)
    5c30:	dc000f17 	ldw	r16,60(sp)
    5c34:	dec01804 	addi	sp,sp,96
    5c38:	f800283a 	ret
    5c3c:	80800417 	ldw	r2,16(r16)
    5c40:	002f883a 	mov	r23,zero
    5c44:	0027883a 	mov	r19,zero
    5c48:	1000cb26 	beq	r2,zero,5f78 <_fseeko_r+0x3e8>
    5c4c:	8080030b 	ldhu	r2,12(r16)
    5c50:	10c2068c 	andi	r3,r2,2074
    5c54:	1800071e 	bne	r3,zero,5c74 <_fseeko_r+0xe4>
    5c58:	10c1000c 	andi	r3,r2,1024
    5c5c:	1800451e 	bne	r3,zero,5d74 <_fseeko_r+0x1e4>
    5c60:	00c00034 	movhi	r3,0
    5c64:	18dcd904 	addi	r3,r3,29540
    5c68:	a0c0b726 	beq	r20,r3,5f48 <_fseeko_r+0x3b8>
    5c6c:	10820014 	ori	r2,r2,2048
    5c70:	8080030d 	sth	r2,12(r16)
    5c74:	800b883a 	mov	r5,r16
    5c78:	8809883a 	mov	r4,r17
    5c7c:	0004f840 	call	4f84 <_fflush_r>
    5c80:	1027883a 	mov	r19,r2
    5c84:	103fe01e 	bne	r2,zero,5c08 <__alt_data_end+0xfffe5c08>
    5c88:	81400717 	ldw	r5,28(r16)
    5c8c:	900f883a 	mov	r7,r18
    5c90:	a80d883a 	mov	r6,r21
    5c94:	8809883a 	mov	r4,r17
    5c98:	a03ee83a 	callr	r20
    5c9c:	00ffffc4 	movi	r3,-1
    5ca0:	10ffd926 	beq	r2,r3,5c08 <__alt_data_end+0xfffe5c08>
    5ca4:	81400c17 	ldw	r5,48(r16)
    5ca8:	28000526 	beq	r5,zero,5cc0 <_fseeko_r+0x130>
    5cac:	80801004 	addi	r2,r16,64
    5cb0:	28800226 	beq	r5,r2,5cbc <_fseeko_r+0x12c>
    5cb4:	8809883a 	mov	r4,r17
    5cb8:	00058600 	call	5860 <_free_r>
    5cbc:	80000c15 	stw	zero,48(r16)
    5cc0:	8080030b 	ldhu	r2,12(r16)
    5cc4:	80c00417 	ldw	r3,16(r16)
    5cc8:	80000115 	stw	zero,4(r16)
    5ccc:	10bdf7cc 	andi	r2,r2,63455
    5cd0:	80c00015 	stw	r3,0(r16)
    5cd4:	8080030d 	sth	r2,12(r16)
    5cd8:	01800204 	movi	r6,8
    5cdc:	000b883a 	mov	r5,zero
    5ce0:	81001704 	addi	r4,r16,92
    5ce4:	0006ce40 	call	6ce4 <memset>
    5ce8:	003fc806 	br	5c0c <__alt_data_end+0xfffe5c0c>
    5cec:	800b883a 	mov	r5,r16
    5cf0:	8809883a 	mov	r4,r17
    5cf4:	0004f840 	call	4f84 <_fflush_r>
    5cf8:	8080030b 	ldhu	r2,12(r16)
    5cfc:	10c4000c 	andi	r3,r2,4096
    5d00:	18008726 	beq	r3,zero,5f20 <_fseeko_r+0x390>
    5d04:	84c01417 	ldw	r19,80(r16)
    5d08:	10c0010c 	andi	r3,r2,4
    5d0c:	1800431e 	bne	r3,zero,5e1c <_fseeko_r+0x28c>
    5d10:	1080020c 	andi	r2,r2,8
    5d14:	10008026 	beq	r2,zero,5f18 <_fseeko_r+0x388>
    5d18:	80c00017 	ldw	r3,0(r16)
    5d1c:	80800417 	ldw	r2,16(r16)
    5d20:	18000226 	beq	r3,zero,5d2c <_fseeko_r+0x19c>
    5d24:	1887c83a 	sub	r3,r3,r2
    5d28:	98e7883a 	add	r19,r19,r3
    5d2c:	aceb883a 	add	r21,r21,r19
    5d30:	05c00044 	movi	r23,1
    5d34:	0025883a 	mov	r18,zero
    5d38:	003fc306 	br	5c48 <__alt_data_end+0xfffe5c48>
    5d3c:	00053700 	call	5370 <__sinit>
    5d40:	8080030b 	ldhu	r2,12(r16)
    5d44:	00c04204 	movi	r3,264
    5d48:	1080420c 	andi	r2,r2,264
    5d4c:	10ffa51e 	bne	r2,r3,5be4 <__alt_data_end+0xfffe5be4>
    5d50:	800b883a 	mov	r5,r16
    5d54:	8809883a 	mov	r4,r17
    5d58:	0004f840 	call	4f84 <_fflush_r>
    5d5c:	003fa106 	br	5be4 <__alt_data_end+0xfffe5be4>
    5d60:	8080030b 	ldhu	r2,12(r16)
    5d64:	00c10004 	movi	r3,1024
    5d68:	80c01315 	stw	r3,76(r16)
    5d6c:	10c4b03a 	or	r2,r2,r3
    5d70:	8080030d 	sth	r2,12(r16)
    5d74:	9000311e 	bne	r18,zero,5e3c <_fseeko_r+0x2ac>
    5d78:	a82d883a 	mov	r22,r21
    5d7c:	b800371e 	bne	r23,zero,5e5c <_fseeko_r+0x2cc>
    5d80:	8080030b 	ldhu	r2,12(r16)
    5d84:	1084000c 	andi	r2,r2,4096
    5d88:	10007f26 	beq	r2,zero,5f88 <_fseeko_r+0x3f8>
    5d8c:	80801417 	ldw	r2,80(r16)
    5d90:	81800117 	ldw	r6,4(r16)
    5d94:	81400c17 	ldw	r5,48(r16)
    5d98:	11a7c83a 	sub	r19,r2,r6
    5d9c:	28008226 	beq	r5,zero,5fa8 <_fseeko_r+0x418>
    5da0:	81c00f17 	ldw	r7,60(r16)
    5da4:	99e7c83a 	sub	r19,r19,r7
    5da8:	81000e17 	ldw	r4,56(r16)
    5dac:	80800417 	ldw	r2,16(r16)
    5db0:	99a7883a 	add	r19,r19,r6
    5db4:	2087c83a 	sub	r3,r4,r2
    5db8:	98e7c83a 	sub	r19,r19,r3
    5dbc:	38c7883a 	add	r3,r7,r3
    5dc0:	b4c02b16 	blt	r22,r19,5e70 <_fseeko_r+0x2e0>
    5dc4:	98c9883a 	add	r4,r19,r3
    5dc8:	b100292e 	bgeu	r22,r4,5e70 <_fseeko_r+0x2e0>
    5dcc:	b4e7c83a 	sub	r19,r22,r19
    5dd0:	14c5883a 	add	r2,r2,r19
    5dd4:	1ce7c83a 	sub	r19,r3,r19
    5dd8:	80800015 	stw	r2,0(r16)
    5ddc:	84c00115 	stw	r19,4(r16)
    5de0:	28000526 	beq	r5,zero,5df8 <_fseeko_r+0x268>
    5de4:	80801004 	addi	r2,r16,64
    5de8:	28800226 	beq	r5,r2,5df4 <_fseeko_r+0x264>
    5dec:	8809883a 	mov	r4,r17
    5df0:	00058600 	call	5860 <_free_r>
    5df4:	80000c15 	stw	zero,48(r16)
    5df8:	8080030b 	ldhu	r2,12(r16)
    5dfc:	01800204 	movi	r6,8
    5e00:	000b883a 	mov	r5,zero
    5e04:	10bff7cc 	andi	r2,r2,65503
    5e08:	8080030d 	sth	r2,12(r16)
    5e0c:	81001704 	addi	r4,r16,92
    5e10:	0006ce40 	call	6ce4 <memset>
    5e14:	0027883a 	mov	r19,zero
    5e18:	003f7c06 	br	5c0c <__alt_data_end+0xfffe5c0c>
    5e1c:	80c00117 	ldw	r3,4(r16)
    5e20:	80800c17 	ldw	r2,48(r16)
    5e24:	98e7c83a 	sub	r19,r19,r3
    5e28:	10003b26 	beq	r2,zero,5f18 <_fseeko_r+0x388>
    5e2c:	80c00f17 	ldw	r3,60(r16)
    5e30:	80800417 	ldw	r2,16(r16)
    5e34:	98e7c83a 	sub	r19,r19,r3
    5e38:	003fbc06 	br	5d2c <__alt_data_end+0xfffe5d2c>
    5e3c:	8140038f 	ldh	r5,14(r16)
    5e40:	d80d883a 	mov	r6,sp
    5e44:	8809883a 	mov	r4,r17
    5e48:	0005ff00 	call	5ff0 <_fstat_r>
    5e4c:	103f891e 	bne	r2,zero,5c74 <__alt_data_end+0xfffe5c74>
    5e50:	dd800417 	ldw	r22,16(sp)
    5e54:	adad883a 	add	r22,r21,r22
    5e58:	b83fc926 	beq	r23,zero,5d80 <__alt_data_end+0xfffe5d80>
    5e5c:	81400c17 	ldw	r5,48(r16)
    5e60:	81800117 	ldw	r6,4(r16)
    5e64:	28005026 	beq	r5,zero,5fa8 <_fseeko_r+0x418>
    5e68:	81c00f17 	ldw	r7,60(r16)
    5e6c:	003fce06 	br	5da8 <__alt_data_end+0xfffe5da8>
    5e70:	84c01317 	ldw	r19,76(r16)
    5e74:	81400717 	ldw	r5,28(r16)
    5e78:	000f883a 	mov	r7,zero
    5e7c:	04e7c83a 	sub	r19,zero,r19
    5e80:	9da6703a 	and	r19,r19,r22
    5e84:	980d883a 	mov	r6,r19
    5e88:	8809883a 	mov	r4,r17
    5e8c:	a03ee83a 	callr	r20
    5e90:	00ffffc4 	movi	r3,-1
    5e94:	10ff7726 	beq	r2,r3,5c74 <__alt_data_end+0xfffe5c74>
    5e98:	80800417 	ldw	r2,16(r16)
    5e9c:	81400c17 	ldw	r5,48(r16)
    5ea0:	80000115 	stw	zero,4(r16)
    5ea4:	80800015 	stw	r2,0(r16)
    5ea8:	28000526 	beq	r5,zero,5ec0 <_fseeko_r+0x330>
    5eac:	80801004 	addi	r2,r16,64
    5eb0:	28800226 	beq	r5,r2,5ebc <_fseeko_r+0x32c>
    5eb4:	8809883a 	mov	r4,r17
    5eb8:	00058600 	call	5860 <_free_r>
    5ebc:	80000c15 	stw	zero,48(r16)
    5ec0:	8080030b 	ldhu	r2,12(r16)
    5ec4:	b4e7c83a 	sub	r19,r22,r19
    5ec8:	10bff7cc 	andi	r2,r2,65503
    5ecc:	8080030d 	sth	r2,12(r16)
    5ed0:	98000b26 	beq	r19,zero,5f00 <_fseeko_r+0x370>
    5ed4:	800b883a 	mov	r5,r16
    5ed8:	8809883a 	mov	r4,r17
    5edc:	00070640 	call	7064 <__srefill_r>
    5ee0:	103f641e 	bne	r2,zero,5c74 <__alt_data_end+0xfffe5c74>
    5ee4:	80800117 	ldw	r2,4(r16)
    5ee8:	14ff6236 	bltu	r2,r19,5c74 <__alt_data_end+0xfffe5c74>
    5eec:	80c00017 	ldw	r3,0(r16)
    5ef0:	14c5c83a 	sub	r2,r2,r19
    5ef4:	80800115 	stw	r2,4(r16)
    5ef8:	1ce7883a 	add	r19,r3,r19
    5efc:	84c00015 	stw	r19,0(r16)
    5f00:	01800204 	movi	r6,8
    5f04:	000b883a 	mov	r5,zero
    5f08:	81001704 	addi	r4,r16,92
    5f0c:	0006ce40 	call	6ce4 <memset>
    5f10:	0027883a 	mov	r19,zero
    5f14:	003f3d06 	br	5c0c <__alt_data_end+0xfffe5c0c>
    5f18:	80800417 	ldw	r2,16(r16)
    5f1c:	003f8306 	br	5d2c <__alt_data_end+0xfffe5d2c>
    5f20:	81400717 	ldw	r5,28(r16)
    5f24:	900f883a 	mov	r7,r18
    5f28:	000d883a 	mov	r6,zero
    5f2c:	8809883a 	mov	r4,r17
    5f30:	a03ee83a 	callr	r20
    5f34:	1027883a 	mov	r19,r2
    5f38:	00bfffc4 	movi	r2,-1
    5f3c:	98bf3226 	beq	r19,r2,5c08 <__alt_data_end+0xfffe5c08>
    5f40:	8080030b 	ldhu	r2,12(r16)
    5f44:	003f7006 	br	5d08 <__alt_data_end+0xfffe5d08>
    5f48:	8140038f 	ldh	r5,14(r16)
    5f4c:	283f4716 	blt	r5,zero,5c6c <__alt_data_end+0xfffe5c6c>
    5f50:	d80d883a 	mov	r6,sp
    5f54:	8809883a 	mov	r4,r17
    5f58:	0005ff00 	call	5ff0 <_fstat_r>
    5f5c:	1000041e 	bne	r2,zero,5f70 <_fseeko_r+0x3e0>
    5f60:	d8800117 	ldw	r2,4(sp)
    5f64:	00e00014 	movui	r3,32768
    5f68:	10bc000c 	andi	r2,r2,61440
    5f6c:	10ff7c26 	beq	r2,r3,5d60 <__alt_data_end+0xfffe5d60>
    5f70:	8080030b 	ldhu	r2,12(r16)
    5f74:	003f3d06 	br	5c6c <__alt_data_end+0xfffe5c6c>
    5f78:	800b883a 	mov	r5,r16
    5f7c:	8809883a 	mov	r4,r17
    5f80:	00061d40 	call	61d4 <__smakebuf_r>
    5f84:	003f3106 	br	5c4c <__alt_data_end+0xfffe5c4c>
    5f88:	81400717 	ldw	r5,28(r16)
    5f8c:	01c00044 	movi	r7,1
    5f90:	000d883a 	mov	r6,zero
    5f94:	8809883a 	mov	r4,r17
    5f98:	a03ee83a 	callr	r20
    5f9c:	00ffffc4 	movi	r3,-1
    5fa0:	10ff7b1e 	bne	r2,r3,5d90 <__alt_data_end+0xfffe5d90>
    5fa4:	003f3306 	br	5c74 <__alt_data_end+0xfffe5c74>
    5fa8:	80c00017 	ldw	r3,0(r16)
    5fac:	80800417 	ldw	r2,16(r16)
    5fb0:	000b883a 	mov	r5,zero
    5fb4:	1887c83a 	sub	r3,r3,r2
    5fb8:	98e7c83a 	sub	r19,r19,r3
    5fbc:	30c7883a 	add	r3,r6,r3
    5fc0:	003f7f06 	br	5dc0 <__alt_data_end+0xfffe5dc0>
    5fc4:	00800744 	movi	r2,29
    5fc8:	88800015 	stw	r2,0(r17)
    5fcc:	04ffffc4 	movi	r19,-1
    5fd0:	003f0e06 	br	5c0c <__alt_data_end+0xfffe5c0c>

00005fd4 <fseeko>:
    5fd4:	00800074 	movhi	r2,1
    5fd8:	10936d04 	addi	r2,r2,19892
    5fdc:	300f883a 	mov	r7,r6
    5fe0:	280d883a 	mov	r6,r5
    5fe4:	200b883a 	mov	r5,r4
    5fe8:	11000017 	ldw	r4,0(r2)
    5fec:	0005b901 	jmpi	5b90 <_fseeko_r>

00005ff0 <_fstat_r>:
    5ff0:	defffd04 	addi	sp,sp,-12
    5ff4:	2805883a 	mov	r2,r5
    5ff8:	dc000015 	stw	r16,0(sp)
    5ffc:	04000074 	movhi	r16,1
    6000:	dc400115 	stw	r17,4(sp)
    6004:	841a3a04 	addi	r16,r16,26856
    6008:	2023883a 	mov	r17,r4
    600c:	300b883a 	mov	r5,r6
    6010:	1009883a 	mov	r4,r2
    6014:	dfc00215 	stw	ra,8(sp)
    6018:	80000015 	stw	zero,0(r16)
    601c:	00106c00 	call	106c0 <fstat>
    6020:	00ffffc4 	movi	r3,-1
    6024:	10c00526 	beq	r2,r3,603c <_fstat_r+0x4c>
    6028:	dfc00217 	ldw	ra,8(sp)
    602c:	dc400117 	ldw	r17,4(sp)
    6030:	dc000017 	ldw	r16,0(sp)
    6034:	dec00304 	addi	sp,sp,12
    6038:	f800283a 	ret
    603c:	80c00017 	ldw	r3,0(r16)
    6040:	183ff926 	beq	r3,zero,6028 <__alt_data_end+0xfffe6028>
    6044:	88c00015 	stw	r3,0(r17)
    6048:	003ff706 	br	6028 <__alt_data_end+0xfffe6028>

0000604c <_fwalk>:
    604c:	defff704 	addi	sp,sp,-36
    6050:	dd000415 	stw	r20,16(sp)
    6054:	dfc00815 	stw	ra,32(sp)
    6058:	ddc00715 	stw	r23,28(sp)
    605c:	dd800615 	stw	r22,24(sp)
    6060:	dd400515 	stw	r21,20(sp)
    6064:	dcc00315 	stw	r19,12(sp)
    6068:	dc800215 	stw	r18,8(sp)
    606c:	dc400115 	stw	r17,4(sp)
    6070:	dc000015 	stw	r16,0(sp)
    6074:	2500b804 	addi	r20,r4,736
    6078:	a0002326 	beq	r20,zero,6108 <_fwalk+0xbc>
    607c:	282b883a 	mov	r21,r5
    6080:	002f883a 	mov	r23,zero
    6084:	05800044 	movi	r22,1
    6088:	04ffffc4 	movi	r19,-1
    608c:	a4400117 	ldw	r17,4(r20)
    6090:	a4800217 	ldw	r18,8(r20)
    6094:	8c7fffc4 	addi	r17,r17,-1
    6098:	88000d16 	blt	r17,zero,60d0 <_fwalk+0x84>
    609c:	94000304 	addi	r16,r18,12
    60a0:	94800384 	addi	r18,r18,14
    60a4:	8080000b 	ldhu	r2,0(r16)
    60a8:	8c7fffc4 	addi	r17,r17,-1
    60ac:	813ffd04 	addi	r4,r16,-12
    60b0:	b080042e 	bgeu	r22,r2,60c4 <_fwalk+0x78>
    60b4:	9080000f 	ldh	r2,0(r18)
    60b8:	14c00226 	beq	r2,r19,60c4 <_fwalk+0x78>
    60bc:	a83ee83a 	callr	r21
    60c0:	b8aeb03a 	or	r23,r23,r2
    60c4:	84001a04 	addi	r16,r16,104
    60c8:	94801a04 	addi	r18,r18,104
    60cc:	8cfff51e 	bne	r17,r19,60a4 <__alt_data_end+0xfffe60a4>
    60d0:	a5000017 	ldw	r20,0(r20)
    60d4:	a03fed1e 	bne	r20,zero,608c <__alt_data_end+0xfffe608c>
    60d8:	b805883a 	mov	r2,r23
    60dc:	dfc00817 	ldw	ra,32(sp)
    60e0:	ddc00717 	ldw	r23,28(sp)
    60e4:	dd800617 	ldw	r22,24(sp)
    60e8:	dd400517 	ldw	r21,20(sp)
    60ec:	dd000417 	ldw	r20,16(sp)
    60f0:	dcc00317 	ldw	r19,12(sp)
    60f4:	dc800217 	ldw	r18,8(sp)
    60f8:	dc400117 	ldw	r17,4(sp)
    60fc:	dc000017 	ldw	r16,0(sp)
    6100:	dec00904 	addi	sp,sp,36
    6104:	f800283a 	ret
    6108:	002f883a 	mov	r23,zero
    610c:	003ff206 	br	60d8 <__alt_data_end+0xfffe60d8>

00006110 <_fwalk_reent>:
    6110:	defff704 	addi	sp,sp,-36
    6114:	dd000415 	stw	r20,16(sp)
    6118:	dfc00815 	stw	ra,32(sp)
    611c:	ddc00715 	stw	r23,28(sp)
    6120:	dd800615 	stw	r22,24(sp)
    6124:	dd400515 	stw	r21,20(sp)
    6128:	dcc00315 	stw	r19,12(sp)
    612c:	dc800215 	stw	r18,8(sp)
    6130:	dc400115 	stw	r17,4(sp)
    6134:	dc000015 	stw	r16,0(sp)
    6138:	2500b804 	addi	r20,r4,736
    613c:	a0002326 	beq	r20,zero,61cc <_fwalk_reent+0xbc>
    6140:	282b883a 	mov	r21,r5
    6144:	2027883a 	mov	r19,r4
    6148:	002f883a 	mov	r23,zero
    614c:	05800044 	movi	r22,1
    6150:	04bfffc4 	movi	r18,-1
    6154:	a4400117 	ldw	r17,4(r20)
    6158:	a4000217 	ldw	r16,8(r20)
    615c:	8c7fffc4 	addi	r17,r17,-1
    6160:	88000c16 	blt	r17,zero,6194 <_fwalk_reent+0x84>
    6164:	84000304 	addi	r16,r16,12
    6168:	8080000b 	ldhu	r2,0(r16)
    616c:	8c7fffc4 	addi	r17,r17,-1
    6170:	817ffd04 	addi	r5,r16,-12
    6174:	b080052e 	bgeu	r22,r2,618c <_fwalk_reent+0x7c>
    6178:	8080008f 	ldh	r2,2(r16)
    617c:	9809883a 	mov	r4,r19
    6180:	14800226 	beq	r2,r18,618c <_fwalk_reent+0x7c>
    6184:	a83ee83a 	callr	r21
    6188:	b8aeb03a 	or	r23,r23,r2
    618c:	84001a04 	addi	r16,r16,104
    6190:	8cbff51e 	bne	r17,r18,6168 <__alt_data_end+0xfffe6168>
    6194:	a5000017 	ldw	r20,0(r20)
    6198:	a03fee1e 	bne	r20,zero,6154 <__alt_data_end+0xfffe6154>
    619c:	b805883a 	mov	r2,r23
    61a0:	dfc00817 	ldw	ra,32(sp)
    61a4:	ddc00717 	ldw	r23,28(sp)
    61a8:	dd800617 	ldw	r22,24(sp)
    61ac:	dd400517 	ldw	r21,20(sp)
    61b0:	dd000417 	ldw	r20,16(sp)
    61b4:	dcc00317 	ldw	r19,12(sp)
    61b8:	dc800217 	ldw	r18,8(sp)
    61bc:	dc400117 	ldw	r17,4(sp)
    61c0:	dc000017 	ldw	r16,0(sp)
    61c4:	dec00904 	addi	sp,sp,36
    61c8:	f800283a 	ret
    61cc:	002f883a 	mov	r23,zero
    61d0:	003ff206 	br	619c <__alt_data_end+0xfffe619c>

000061d4 <__smakebuf_r>:
    61d4:	2880030b 	ldhu	r2,12(r5)
    61d8:	10c0008c 	andi	r3,r2,2
    61dc:	1800411e 	bne	r3,zero,62e4 <__smakebuf_r+0x110>
    61e0:	deffec04 	addi	sp,sp,-80
    61e4:	dc000f15 	stw	r16,60(sp)
    61e8:	2821883a 	mov	r16,r5
    61ec:	2940038f 	ldh	r5,14(r5)
    61f0:	dc401015 	stw	r17,64(sp)
    61f4:	dfc01315 	stw	ra,76(sp)
    61f8:	dcc01215 	stw	r19,72(sp)
    61fc:	dc801115 	stw	r18,68(sp)
    6200:	2023883a 	mov	r17,r4
    6204:	28001c16 	blt	r5,zero,6278 <__smakebuf_r+0xa4>
    6208:	d80d883a 	mov	r6,sp
    620c:	0005ff00 	call	5ff0 <_fstat_r>
    6210:	10001816 	blt	r2,zero,6274 <__smakebuf_r+0xa0>
    6214:	d8800117 	ldw	r2,4(sp)
    6218:	00e00014 	movui	r3,32768
    621c:	10bc000c 	andi	r2,r2,61440
    6220:	14c80020 	cmpeqi	r19,r2,8192
    6224:	10c03726 	beq	r2,r3,6304 <__smakebuf_r+0x130>
    6228:	80c0030b 	ldhu	r3,12(r16)
    622c:	18c20014 	ori	r3,r3,2048
    6230:	80c0030d 	sth	r3,12(r16)
    6234:	00c80004 	movi	r3,8192
    6238:	10c0521e 	bne	r2,r3,6384 <__smakebuf_r+0x1b0>
    623c:	8140038f 	ldh	r5,14(r16)
    6240:	8809883a 	mov	r4,r17
    6244:	000bb800 	call	bb80 <_isatty_r>
    6248:	10004c26 	beq	r2,zero,637c <__smakebuf_r+0x1a8>
    624c:	8080030b 	ldhu	r2,12(r16)
    6250:	80c010c4 	addi	r3,r16,67
    6254:	80c00015 	stw	r3,0(r16)
    6258:	10800054 	ori	r2,r2,1
    625c:	8080030d 	sth	r2,12(r16)
    6260:	00800044 	movi	r2,1
    6264:	80c00415 	stw	r3,16(r16)
    6268:	80800515 	stw	r2,20(r16)
    626c:	04810004 	movi	r18,1024
    6270:	00000706 	br	6290 <__smakebuf_r+0xbc>
    6274:	8080030b 	ldhu	r2,12(r16)
    6278:	10c0200c 	andi	r3,r2,128
    627c:	18001f1e 	bne	r3,zero,62fc <__smakebuf_r+0x128>
    6280:	04810004 	movi	r18,1024
    6284:	10820014 	ori	r2,r2,2048
    6288:	8080030d 	sth	r2,12(r16)
    628c:	0027883a 	mov	r19,zero
    6290:	900b883a 	mov	r5,r18
    6294:	8809883a 	mov	r4,r17
    6298:	00063900 	call	6390 <_malloc_r>
    629c:	10002c26 	beq	r2,zero,6350 <__smakebuf_r+0x17c>
    62a0:	80c0030b 	ldhu	r3,12(r16)
    62a4:	01000034 	movhi	r4,0
    62a8:	21140604 	addi	r4,r4,20504
    62ac:	89000f15 	stw	r4,60(r17)
    62b0:	18c02014 	ori	r3,r3,128
    62b4:	80c0030d 	sth	r3,12(r16)
    62b8:	80800015 	stw	r2,0(r16)
    62bc:	80800415 	stw	r2,16(r16)
    62c0:	84800515 	stw	r18,20(r16)
    62c4:	98001a1e 	bne	r19,zero,6330 <__smakebuf_r+0x15c>
    62c8:	dfc01317 	ldw	ra,76(sp)
    62cc:	dcc01217 	ldw	r19,72(sp)
    62d0:	dc801117 	ldw	r18,68(sp)
    62d4:	dc401017 	ldw	r17,64(sp)
    62d8:	dc000f17 	ldw	r16,60(sp)
    62dc:	dec01404 	addi	sp,sp,80
    62e0:	f800283a 	ret
    62e4:	288010c4 	addi	r2,r5,67
    62e8:	28800015 	stw	r2,0(r5)
    62ec:	28800415 	stw	r2,16(r5)
    62f0:	00800044 	movi	r2,1
    62f4:	28800515 	stw	r2,20(r5)
    62f8:	f800283a 	ret
    62fc:	04801004 	movi	r18,64
    6300:	003fe006 	br	6284 <__alt_data_end+0xfffe6284>
    6304:	81000a17 	ldw	r4,40(r16)
    6308:	00c00034 	movhi	r3,0
    630c:	18dcd904 	addi	r3,r3,29540
    6310:	20ffc51e 	bne	r4,r3,6228 <__alt_data_end+0xfffe6228>
    6314:	8080030b 	ldhu	r2,12(r16)
    6318:	04810004 	movi	r18,1024
    631c:	84801315 	stw	r18,76(r16)
    6320:	1484b03a 	or	r2,r2,r18
    6324:	8080030d 	sth	r2,12(r16)
    6328:	0027883a 	mov	r19,zero
    632c:	003fd806 	br	6290 <__alt_data_end+0xfffe6290>
    6330:	8140038f 	ldh	r5,14(r16)
    6334:	8809883a 	mov	r4,r17
    6338:	000bb800 	call	bb80 <_isatty_r>
    633c:	103fe226 	beq	r2,zero,62c8 <__alt_data_end+0xfffe62c8>
    6340:	8080030b 	ldhu	r2,12(r16)
    6344:	10800054 	ori	r2,r2,1
    6348:	8080030d 	sth	r2,12(r16)
    634c:	003fde06 	br	62c8 <__alt_data_end+0xfffe62c8>
    6350:	8080030b 	ldhu	r2,12(r16)
    6354:	10c0800c 	andi	r3,r2,512
    6358:	183fdb1e 	bne	r3,zero,62c8 <__alt_data_end+0xfffe62c8>
    635c:	10800094 	ori	r2,r2,2
    6360:	80c010c4 	addi	r3,r16,67
    6364:	8080030d 	sth	r2,12(r16)
    6368:	00800044 	movi	r2,1
    636c:	80c00015 	stw	r3,0(r16)
    6370:	80c00415 	stw	r3,16(r16)
    6374:	80800515 	stw	r2,20(r16)
    6378:	003fd306 	br	62c8 <__alt_data_end+0xfffe62c8>
    637c:	04810004 	movi	r18,1024
    6380:	003fc306 	br	6290 <__alt_data_end+0xfffe6290>
    6384:	0027883a 	mov	r19,zero
    6388:	04810004 	movi	r18,1024
    638c:	003fc006 	br	6290 <__alt_data_end+0xfffe6290>

00006390 <_malloc_r>:
    6390:	defff504 	addi	sp,sp,-44
    6394:	dc800315 	stw	r18,12(sp)
    6398:	dfc00a15 	stw	ra,40(sp)
    639c:	df000915 	stw	fp,36(sp)
    63a0:	ddc00815 	stw	r23,32(sp)
    63a4:	dd800715 	stw	r22,28(sp)
    63a8:	dd400615 	stw	r21,24(sp)
    63ac:	dd000515 	stw	r20,20(sp)
    63b0:	dcc00415 	stw	r19,16(sp)
    63b4:	dc400215 	stw	r17,8(sp)
    63b8:	dc000115 	stw	r16,4(sp)
    63bc:	288002c4 	addi	r2,r5,11
    63c0:	00c00584 	movi	r3,22
    63c4:	2025883a 	mov	r18,r4
    63c8:	18807f2e 	bgeu	r3,r2,65c8 <_malloc_r+0x238>
    63cc:	047ffe04 	movi	r17,-8
    63d0:	1462703a 	and	r17,r2,r17
    63d4:	8800a316 	blt	r17,zero,6664 <_malloc_r+0x2d4>
    63d8:	8940a236 	bltu	r17,r5,6664 <_malloc_r+0x2d4>
    63dc:	0010cd40 	call	10cd4 <__malloc_lock>
    63e0:	00807dc4 	movi	r2,503
    63e4:	1441e92e 	bgeu	r2,r17,6b8c <_malloc_r+0x7fc>
    63e8:	8804d27a 	srli	r2,r17,9
    63ec:	1000a126 	beq	r2,zero,6674 <_malloc_r+0x2e4>
    63f0:	00c00104 	movi	r3,4
    63f4:	18811e36 	bltu	r3,r2,6870 <_malloc_r+0x4e0>
    63f8:	8804d1ba 	srli	r2,r17,6
    63fc:	12000e44 	addi	r8,r2,57
    6400:	11c00e04 	addi	r7,r2,56
    6404:	4209883a 	add	r4,r8,r8
    6408:	04c00074 	movhi	r19,1
    640c:	2109883a 	add	r4,r4,r4
    6410:	9ccdc704 	addi	r19,r19,14108
    6414:	2109883a 	add	r4,r4,r4
    6418:	9909883a 	add	r4,r19,r4
    641c:	24000117 	ldw	r16,4(r4)
    6420:	213ffe04 	addi	r4,r4,-8
    6424:	24009726 	beq	r4,r16,6684 <_malloc_r+0x2f4>
    6428:	80800117 	ldw	r2,4(r16)
    642c:	01bfff04 	movi	r6,-4
    6430:	014003c4 	movi	r5,15
    6434:	1184703a 	and	r2,r2,r6
    6438:	1447c83a 	sub	r3,r2,r17
    643c:	28c00716 	blt	r5,r3,645c <_malloc_r+0xcc>
    6440:	1800920e 	bge	r3,zero,668c <_malloc_r+0x2fc>
    6444:	84000317 	ldw	r16,12(r16)
    6448:	24008e26 	beq	r4,r16,6684 <_malloc_r+0x2f4>
    644c:	80800117 	ldw	r2,4(r16)
    6450:	1184703a 	and	r2,r2,r6
    6454:	1447c83a 	sub	r3,r2,r17
    6458:	28fff90e 	bge	r5,r3,6440 <__alt_data_end+0xfffe6440>
    645c:	3809883a 	mov	r4,r7
    6460:	01800074 	movhi	r6,1
    6464:	9c000417 	ldw	r16,16(r19)
    6468:	318dc704 	addi	r6,r6,14108
    646c:	32000204 	addi	r8,r6,8
    6470:	82013426 	beq	r16,r8,6944 <_malloc_r+0x5b4>
    6474:	80c00117 	ldw	r3,4(r16)
    6478:	00bfff04 	movi	r2,-4
    647c:	188e703a 	and	r7,r3,r2
    6480:	3c45c83a 	sub	r2,r7,r17
    6484:	00c003c4 	movi	r3,15
    6488:	18811f16 	blt	r3,r2,6908 <_malloc_r+0x578>
    648c:	32000515 	stw	r8,20(r6)
    6490:	32000415 	stw	r8,16(r6)
    6494:	10007f0e 	bge	r2,zero,6694 <_malloc_r+0x304>
    6498:	00807fc4 	movi	r2,511
    649c:	11c0fd36 	bltu	r2,r7,6894 <_malloc_r+0x504>
    64a0:	3806d0fa 	srli	r3,r7,3
    64a4:	01c00044 	movi	r7,1
    64a8:	30800117 	ldw	r2,4(r6)
    64ac:	19400044 	addi	r5,r3,1
    64b0:	294b883a 	add	r5,r5,r5
    64b4:	1807d0ba 	srai	r3,r3,2
    64b8:	294b883a 	add	r5,r5,r5
    64bc:	294b883a 	add	r5,r5,r5
    64c0:	298b883a 	add	r5,r5,r6
    64c4:	38c6983a 	sll	r3,r7,r3
    64c8:	29c00017 	ldw	r7,0(r5)
    64cc:	2a7ffe04 	addi	r9,r5,-8
    64d0:	1886b03a 	or	r3,r3,r2
    64d4:	82400315 	stw	r9,12(r16)
    64d8:	81c00215 	stw	r7,8(r16)
    64dc:	30c00115 	stw	r3,4(r6)
    64e0:	2c000015 	stw	r16,0(r5)
    64e4:	3c000315 	stw	r16,12(r7)
    64e8:	2005d0ba 	srai	r2,r4,2
    64ec:	01400044 	movi	r5,1
    64f0:	288a983a 	sll	r5,r5,r2
    64f4:	19406f36 	bltu	r3,r5,66b4 <_malloc_r+0x324>
    64f8:	28c4703a 	and	r2,r5,r3
    64fc:	10000a1e 	bne	r2,zero,6528 <_malloc_r+0x198>
    6500:	00bfff04 	movi	r2,-4
    6504:	294b883a 	add	r5,r5,r5
    6508:	2088703a 	and	r4,r4,r2
    650c:	28c4703a 	and	r2,r5,r3
    6510:	21000104 	addi	r4,r4,4
    6514:	1000041e 	bne	r2,zero,6528 <_malloc_r+0x198>
    6518:	294b883a 	add	r5,r5,r5
    651c:	28c4703a 	and	r2,r5,r3
    6520:	21000104 	addi	r4,r4,4
    6524:	103ffc26 	beq	r2,zero,6518 <__alt_data_end+0xfffe6518>
    6528:	02bfff04 	movi	r10,-4
    652c:	024003c4 	movi	r9,15
    6530:	21800044 	addi	r6,r4,1
    6534:	318d883a 	add	r6,r6,r6
    6538:	318d883a 	add	r6,r6,r6
    653c:	318d883a 	add	r6,r6,r6
    6540:	998d883a 	add	r6,r19,r6
    6544:	333ffe04 	addi	r12,r6,-8
    6548:	2017883a 	mov	r11,r4
    654c:	31800104 	addi	r6,r6,4
    6550:	34000017 	ldw	r16,0(r6)
    6554:	31fffd04 	addi	r7,r6,-12
    6558:	81c0041e 	bne	r16,r7,656c <_malloc_r+0x1dc>
    655c:	0000fb06 	br	694c <_malloc_r+0x5bc>
    6560:	1801030e 	bge	r3,zero,6970 <_malloc_r+0x5e0>
    6564:	84000317 	ldw	r16,12(r16)
    6568:	81c0f826 	beq	r16,r7,694c <_malloc_r+0x5bc>
    656c:	80800117 	ldw	r2,4(r16)
    6570:	1284703a 	and	r2,r2,r10
    6574:	1447c83a 	sub	r3,r2,r17
    6578:	48fff90e 	bge	r9,r3,6560 <__alt_data_end+0xfffe6560>
    657c:	80800317 	ldw	r2,12(r16)
    6580:	81000217 	ldw	r4,8(r16)
    6584:	89400054 	ori	r5,r17,1
    6588:	81400115 	stw	r5,4(r16)
    658c:	20800315 	stw	r2,12(r4)
    6590:	11000215 	stw	r4,8(r2)
    6594:	8463883a 	add	r17,r16,r17
    6598:	9c400515 	stw	r17,20(r19)
    659c:	9c400415 	stw	r17,16(r19)
    65a0:	18800054 	ori	r2,r3,1
    65a4:	88800115 	stw	r2,4(r17)
    65a8:	8a000315 	stw	r8,12(r17)
    65ac:	8a000215 	stw	r8,8(r17)
    65b0:	88e3883a 	add	r17,r17,r3
    65b4:	88c00015 	stw	r3,0(r17)
    65b8:	9009883a 	mov	r4,r18
    65bc:	0010cf80 	call	10cf8 <__malloc_unlock>
    65c0:	80800204 	addi	r2,r16,8
    65c4:	00001b06 	br	6634 <_malloc_r+0x2a4>
    65c8:	04400404 	movi	r17,16
    65cc:	89402536 	bltu	r17,r5,6664 <_malloc_r+0x2d4>
    65d0:	0010cd40 	call	10cd4 <__malloc_lock>
    65d4:	00800184 	movi	r2,6
    65d8:	01000084 	movi	r4,2
    65dc:	04c00074 	movhi	r19,1
    65e0:	1085883a 	add	r2,r2,r2
    65e4:	9ccdc704 	addi	r19,r19,14108
    65e8:	1085883a 	add	r2,r2,r2
    65ec:	9885883a 	add	r2,r19,r2
    65f0:	14000117 	ldw	r16,4(r2)
    65f4:	10fffe04 	addi	r3,r2,-8
    65f8:	80c0d926 	beq	r16,r3,6960 <_malloc_r+0x5d0>
    65fc:	80c00117 	ldw	r3,4(r16)
    6600:	81000317 	ldw	r4,12(r16)
    6604:	00bfff04 	movi	r2,-4
    6608:	1884703a 	and	r2,r3,r2
    660c:	81400217 	ldw	r5,8(r16)
    6610:	8085883a 	add	r2,r16,r2
    6614:	10c00117 	ldw	r3,4(r2)
    6618:	29000315 	stw	r4,12(r5)
    661c:	21400215 	stw	r5,8(r4)
    6620:	18c00054 	ori	r3,r3,1
    6624:	10c00115 	stw	r3,4(r2)
    6628:	9009883a 	mov	r4,r18
    662c:	0010cf80 	call	10cf8 <__malloc_unlock>
    6630:	80800204 	addi	r2,r16,8
    6634:	dfc00a17 	ldw	ra,40(sp)
    6638:	df000917 	ldw	fp,36(sp)
    663c:	ddc00817 	ldw	r23,32(sp)
    6640:	dd800717 	ldw	r22,28(sp)
    6644:	dd400617 	ldw	r21,24(sp)
    6648:	dd000517 	ldw	r20,20(sp)
    664c:	dcc00417 	ldw	r19,16(sp)
    6650:	dc800317 	ldw	r18,12(sp)
    6654:	dc400217 	ldw	r17,8(sp)
    6658:	dc000117 	ldw	r16,4(sp)
    665c:	dec00b04 	addi	sp,sp,44
    6660:	f800283a 	ret
    6664:	00800304 	movi	r2,12
    6668:	90800015 	stw	r2,0(r18)
    666c:	0005883a 	mov	r2,zero
    6670:	003ff006 	br	6634 <__alt_data_end+0xfffe6634>
    6674:	01002004 	movi	r4,128
    6678:	02001004 	movi	r8,64
    667c:	01c00fc4 	movi	r7,63
    6680:	003f6106 	br	6408 <__alt_data_end+0xfffe6408>
    6684:	4009883a 	mov	r4,r8
    6688:	003f7506 	br	6460 <__alt_data_end+0xfffe6460>
    668c:	81000317 	ldw	r4,12(r16)
    6690:	003fde06 	br	660c <__alt_data_end+0xfffe660c>
    6694:	81c5883a 	add	r2,r16,r7
    6698:	11400117 	ldw	r5,4(r2)
    669c:	9009883a 	mov	r4,r18
    66a0:	29400054 	ori	r5,r5,1
    66a4:	11400115 	stw	r5,4(r2)
    66a8:	0010cf80 	call	10cf8 <__malloc_unlock>
    66ac:	80800204 	addi	r2,r16,8
    66b0:	003fe006 	br	6634 <__alt_data_end+0xfffe6634>
    66b4:	9c000217 	ldw	r16,8(r19)
    66b8:	00bfff04 	movi	r2,-4
    66bc:	85800117 	ldw	r22,4(r16)
    66c0:	b0ac703a 	and	r22,r22,r2
    66c4:	b4400336 	bltu	r22,r17,66d4 <_malloc_r+0x344>
    66c8:	b445c83a 	sub	r2,r22,r17
    66cc:	00c003c4 	movi	r3,15
    66d0:	18805d16 	blt	r3,r2,6848 <_malloc_r+0x4b8>
    66d4:	05c00074 	movhi	r23,1
    66d8:	00800074 	movhi	r2,1
    66dc:	109a3d04 	addi	r2,r2,26868
    66e0:	bdd36e04 	addi	r23,r23,19896
    66e4:	15400017 	ldw	r21,0(r2)
    66e8:	b8c00017 	ldw	r3,0(r23)
    66ec:	00bfffc4 	movi	r2,-1
    66f0:	858d883a 	add	r6,r16,r22
    66f4:	8d6b883a 	add	r21,r17,r21
    66f8:	1880ea26 	beq	r3,r2,6aa4 <_malloc_r+0x714>
    66fc:	ad4403c4 	addi	r21,r21,4111
    6700:	00bc0004 	movi	r2,-4096
    6704:	a8aa703a 	and	r21,r21,r2
    6708:	a80b883a 	mov	r5,r21
    670c:	9009883a 	mov	r4,r18
    6710:	d9800015 	stw	r6,0(sp)
    6714:	00072380 	call	7238 <_sbrk_r>
    6718:	1029883a 	mov	r20,r2
    671c:	00bfffc4 	movi	r2,-1
    6720:	d9800017 	ldw	r6,0(sp)
    6724:	a080e826 	beq	r20,r2,6ac8 <_malloc_r+0x738>
    6728:	a180a636 	bltu	r20,r6,69c4 <_malloc_r+0x634>
    672c:	07000074 	movhi	fp,1
    6730:	e71a4c04 	addi	fp,fp,26928
    6734:	e0800017 	ldw	r2,0(fp)
    6738:	a887883a 	add	r3,r21,r2
    673c:	e0c00015 	stw	r3,0(fp)
    6740:	3500e626 	beq	r6,r20,6adc <_malloc_r+0x74c>
    6744:	b9000017 	ldw	r4,0(r23)
    6748:	00bfffc4 	movi	r2,-1
    674c:	2080ee26 	beq	r4,r2,6b08 <_malloc_r+0x778>
    6750:	a185c83a 	sub	r2,r20,r6
    6754:	10c5883a 	add	r2,r2,r3
    6758:	e0800015 	stw	r2,0(fp)
    675c:	a0c001cc 	andi	r3,r20,7
    6760:	1800bc26 	beq	r3,zero,6a54 <_malloc_r+0x6c4>
    6764:	a0e9c83a 	sub	r20,r20,r3
    6768:	00840204 	movi	r2,4104
    676c:	a5000204 	addi	r20,r20,8
    6770:	10c7c83a 	sub	r3,r2,r3
    6774:	a545883a 	add	r2,r20,r21
    6778:	1083ffcc 	andi	r2,r2,4095
    677c:	18abc83a 	sub	r21,r3,r2
    6780:	a80b883a 	mov	r5,r21
    6784:	9009883a 	mov	r4,r18
    6788:	00072380 	call	7238 <_sbrk_r>
    678c:	00ffffc4 	movi	r3,-1
    6790:	10c0e126 	beq	r2,r3,6b18 <_malloc_r+0x788>
    6794:	1505c83a 	sub	r2,r2,r20
    6798:	1545883a 	add	r2,r2,r21
    679c:	10800054 	ori	r2,r2,1
    67a0:	e0c00017 	ldw	r3,0(fp)
    67a4:	9d000215 	stw	r20,8(r19)
    67a8:	a0800115 	stw	r2,4(r20)
    67ac:	a8c7883a 	add	r3,r21,r3
    67b0:	e0c00015 	stw	r3,0(fp)
    67b4:	84c00e26 	beq	r16,r19,67f0 <_malloc_r+0x460>
    67b8:	018003c4 	movi	r6,15
    67bc:	3580a72e 	bgeu	r6,r22,6a5c <_malloc_r+0x6cc>
    67c0:	81400117 	ldw	r5,4(r16)
    67c4:	013ffe04 	movi	r4,-8
    67c8:	b0bffd04 	addi	r2,r22,-12
    67cc:	1104703a 	and	r2,r2,r4
    67d0:	2900004c 	andi	r4,r5,1
    67d4:	2088b03a 	or	r4,r4,r2
    67d8:	81000115 	stw	r4,4(r16)
    67dc:	01400144 	movi	r5,5
    67e0:	8089883a 	add	r4,r16,r2
    67e4:	21400115 	stw	r5,4(r4)
    67e8:	21400215 	stw	r5,8(r4)
    67ec:	3080cd36 	bltu	r6,r2,6b24 <_malloc_r+0x794>
    67f0:	00800074 	movhi	r2,1
    67f4:	109a3c04 	addi	r2,r2,26864
    67f8:	11000017 	ldw	r4,0(r2)
    67fc:	20c0012e 	bgeu	r4,r3,6804 <_malloc_r+0x474>
    6800:	10c00015 	stw	r3,0(r2)
    6804:	00800074 	movhi	r2,1
    6808:	109a3b04 	addi	r2,r2,26860
    680c:	11000017 	ldw	r4,0(r2)
    6810:	9c000217 	ldw	r16,8(r19)
    6814:	20c0012e 	bgeu	r4,r3,681c <_malloc_r+0x48c>
    6818:	10c00015 	stw	r3,0(r2)
    681c:	80c00117 	ldw	r3,4(r16)
    6820:	00bfff04 	movi	r2,-4
    6824:	1886703a 	and	r3,r3,r2
    6828:	1c45c83a 	sub	r2,r3,r17
    682c:	1c400236 	bltu	r3,r17,6838 <_malloc_r+0x4a8>
    6830:	00c003c4 	movi	r3,15
    6834:	18800416 	blt	r3,r2,6848 <_malloc_r+0x4b8>
    6838:	9009883a 	mov	r4,r18
    683c:	0010cf80 	call	10cf8 <__malloc_unlock>
    6840:	0005883a 	mov	r2,zero
    6844:	003f7b06 	br	6634 <__alt_data_end+0xfffe6634>
    6848:	88c00054 	ori	r3,r17,1
    684c:	80c00115 	stw	r3,4(r16)
    6850:	8463883a 	add	r17,r16,r17
    6854:	10800054 	ori	r2,r2,1
    6858:	9c400215 	stw	r17,8(r19)
    685c:	88800115 	stw	r2,4(r17)
    6860:	9009883a 	mov	r4,r18
    6864:	0010cf80 	call	10cf8 <__malloc_unlock>
    6868:	80800204 	addi	r2,r16,8
    686c:	003f7106 	br	6634 <__alt_data_end+0xfffe6634>
    6870:	00c00504 	movi	r3,20
    6874:	18804a2e 	bgeu	r3,r2,69a0 <_malloc_r+0x610>
    6878:	00c01504 	movi	r3,84
    687c:	18806e36 	bltu	r3,r2,6a38 <_malloc_r+0x6a8>
    6880:	8804d33a 	srli	r2,r17,12
    6884:	12001bc4 	addi	r8,r2,111
    6888:	11c01b84 	addi	r7,r2,110
    688c:	4209883a 	add	r4,r8,r8
    6890:	003edd06 	br	6408 <__alt_data_end+0xfffe6408>
    6894:	3804d27a 	srli	r2,r7,9
    6898:	00c00104 	movi	r3,4
    689c:	1880442e 	bgeu	r3,r2,69b0 <_malloc_r+0x620>
    68a0:	00c00504 	movi	r3,20
    68a4:	18808136 	bltu	r3,r2,6aac <_malloc_r+0x71c>
    68a8:	11401704 	addi	r5,r2,92
    68ac:	10c016c4 	addi	r3,r2,91
    68b0:	294b883a 	add	r5,r5,r5
    68b4:	294b883a 	add	r5,r5,r5
    68b8:	294b883a 	add	r5,r5,r5
    68bc:	994b883a 	add	r5,r19,r5
    68c0:	28800017 	ldw	r2,0(r5)
    68c4:	01800074 	movhi	r6,1
    68c8:	297ffe04 	addi	r5,r5,-8
    68cc:	318dc704 	addi	r6,r6,14108
    68d0:	28806526 	beq	r5,r2,6a68 <_malloc_r+0x6d8>
    68d4:	01bfff04 	movi	r6,-4
    68d8:	10c00117 	ldw	r3,4(r2)
    68dc:	1986703a 	and	r3,r3,r6
    68e0:	38c0022e 	bgeu	r7,r3,68ec <_malloc_r+0x55c>
    68e4:	10800217 	ldw	r2,8(r2)
    68e8:	28bffb1e 	bne	r5,r2,68d8 <__alt_data_end+0xfffe68d8>
    68ec:	11400317 	ldw	r5,12(r2)
    68f0:	98c00117 	ldw	r3,4(r19)
    68f4:	81400315 	stw	r5,12(r16)
    68f8:	80800215 	stw	r2,8(r16)
    68fc:	2c000215 	stw	r16,8(r5)
    6900:	14000315 	stw	r16,12(r2)
    6904:	003ef806 	br	64e8 <__alt_data_end+0xfffe64e8>
    6908:	88c00054 	ori	r3,r17,1
    690c:	80c00115 	stw	r3,4(r16)
    6910:	8463883a 	add	r17,r16,r17
    6914:	34400515 	stw	r17,20(r6)
    6918:	34400415 	stw	r17,16(r6)
    691c:	10c00054 	ori	r3,r2,1
    6920:	8a000315 	stw	r8,12(r17)
    6924:	8a000215 	stw	r8,8(r17)
    6928:	88c00115 	stw	r3,4(r17)
    692c:	88a3883a 	add	r17,r17,r2
    6930:	88800015 	stw	r2,0(r17)
    6934:	9009883a 	mov	r4,r18
    6938:	0010cf80 	call	10cf8 <__malloc_unlock>
    693c:	80800204 	addi	r2,r16,8
    6940:	003f3c06 	br	6634 <__alt_data_end+0xfffe6634>
    6944:	30c00117 	ldw	r3,4(r6)
    6948:	003ee706 	br	64e8 <__alt_data_end+0xfffe64e8>
    694c:	5ac00044 	addi	r11,r11,1
    6950:	588000cc 	andi	r2,r11,3
    6954:	31800204 	addi	r6,r6,8
    6958:	103efd1e 	bne	r2,zero,6550 <__alt_data_end+0xfffe6550>
    695c:	00002406 	br	69f0 <_malloc_r+0x660>
    6960:	14000317 	ldw	r16,12(r2)
    6964:	143f251e 	bne	r2,r16,65fc <__alt_data_end+0xfffe65fc>
    6968:	21000084 	addi	r4,r4,2
    696c:	003ebc06 	br	6460 <__alt_data_end+0xfffe6460>
    6970:	8085883a 	add	r2,r16,r2
    6974:	10c00117 	ldw	r3,4(r2)
    6978:	81000317 	ldw	r4,12(r16)
    697c:	81400217 	ldw	r5,8(r16)
    6980:	18c00054 	ori	r3,r3,1
    6984:	10c00115 	stw	r3,4(r2)
    6988:	29000315 	stw	r4,12(r5)
    698c:	21400215 	stw	r5,8(r4)
    6990:	9009883a 	mov	r4,r18
    6994:	0010cf80 	call	10cf8 <__malloc_unlock>
    6998:	80800204 	addi	r2,r16,8
    699c:	003f2506 	br	6634 <__alt_data_end+0xfffe6634>
    69a0:	12001704 	addi	r8,r2,92
    69a4:	11c016c4 	addi	r7,r2,91
    69a8:	4209883a 	add	r4,r8,r8
    69ac:	003e9606 	br	6408 <__alt_data_end+0xfffe6408>
    69b0:	3804d1ba 	srli	r2,r7,6
    69b4:	11400e44 	addi	r5,r2,57
    69b8:	10c00e04 	addi	r3,r2,56
    69bc:	294b883a 	add	r5,r5,r5
    69c0:	003fbc06 	br	68b4 <__alt_data_end+0xfffe68b4>
    69c4:	84ff5926 	beq	r16,r19,672c <__alt_data_end+0xfffe672c>
    69c8:	00800074 	movhi	r2,1
    69cc:	108dc704 	addi	r2,r2,14108
    69d0:	14000217 	ldw	r16,8(r2)
    69d4:	00bfff04 	movi	r2,-4
    69d8:	80c00117 	ldw	r3,4(r16)
    69dc:	1886703a 	and	r3,r3,r2
    69e0:	003f9106 	br	6828 <__alt_data_end+0xfffe6828>
    69e4:	60800217 	ldw	r2,8(r12)
    69e8:	213fffc4 	addi	r4,r4,-1
    69ec:	1300651e 	bne	r2,r12,6b84 <_malloc_r+0x7f4>
    69f0:	208000cc 	andi	r2,r4,3
    69f4:	633ffe04 	addi	r12,r12,-8
    69f8:	103ffa1e 	bne	r2,zero,69e4 <__alt_data_end+0xfffe69e4>
    69fc:	98800117 	ldw	r2,4(r19)
    6a00:	0146303a 	nor	r3,zero,r5
    6a04:	1884703a 	and	r2,r3,r2
    6a08:	98800115 	stw	r2,4(r19)
    6a0c:	294b883a 	add	r5,r5,r5
    6a10:	117f2836 	bltu	r2,r5,66b4 <__alt_data_end+0xfffe66b4>
    6a14:	283f2726 	beq	r5,zero,66b4 <__alt_data_end+0xfffe66b4>
    6a18:	2886703a 	and	r3,r5,r2
    6a1c:	5809883a 	mov	r4,r11
    6a20:	183ec31e 	bne	r3,zero,6530 <__alt_data_end+0xfffe6530>
    6a24:	294b883a 	add	r5,r5,r5
    6a28:	2886703a 	and	r3,r5,r2
    6a2c:	21000104 	addi	r4,r4,4
    6a30:	183ffc26 	beq	r3,zero,6a24 <__alt_data_end+0xfffe6a24>
    6a34:	003ebe06 	br	6530 <__alt_data_end+0xfffe6530>
    6a38:	00c05504 	movi	r3,340
    6a3c:	18801236 	bltu	r3,r2,6a88 <_malloc_r+0x6f8>
    6a40:	8804d3fa 	srli	r2,r17,15
    6a44:	12001e04 	addi	r8,r2,120
    6a48:	11c01dc4 	addi	r7,r2,119
    6a4c:	4209883a 	add	r4,r8,r8
    6a50:	003e6d06 	br	6408 <__alt_data_end+0xfffe6408>
    6a54:	00c40004 	movi	r3,4096
    6a58:	003f4606 	br	6774 <__alt_data_end+0xfffe6774>
    6a5c:	00800044 	movi	r2,1
    6a60:	a0800115 	stw	r2,4(r20)
    6a64:	003f7406 	br	6838 <__alt_data_end+0xfffe6838>
    6a68:	1805d0ba 	srai	r2,r3,2
    6a6c:	01c00044 	movi	r7,1
    6a70:	30c00117 	ldw	r3,4(r6)
    6a74:	388e983a 	sll	r7,r7,r2
    6a78:	2805883a 	mov	r2,r5
    6a7c:	38c6b03a 	or	r3,r7,r3
    6a80:	30c00115 	stw	r3,4(r6)
    6a84:	003f9b06 	br	68f4 <__alt_data_end+0xfffe68f4>
    6a88:	00c15504 	movi	r3,1364
    6a8c:	18801a36 	bltu	r3,r2,6af8 <_malloc_r+0x768>
    6a90:	8804d4ba 	srli	r2,r17,18
    6a94:	12001f44 	addi	r8,r2,125
    6a98:	11c01f04 	addi	r7,r2,124
    6a9c:	4209883a 	add	r4,r8,r8
    6aa0:	003e5906 	br	6408 <__alt_data_end+0xfffe6408>
    6aa4:	ad400404 	addi	r21,r21,16
    6aa8:	003f1706 	br	6708 <__alt_data_end+0xfffe6708>
    6aac:	00c01504 	movi	r3,84
    6ab0:	18802336 	bltu	r3,r2,6b40 <_malloc_r+0x7b0>
    6ab4:	3804d33a 	srli	r2,r7,12
    6ab8:	11401bc4 	addi	r5,r2,111
    6abc:	10c01b84 	addi	r3,r2,110
    6ac0:	294b883a 	add	r5,r5,r5
    6ac4:	003f7b06 	br	68b4 <__alt_data_end+0xfffe68b4>
    6ac8:	9c000217 	ldw	r16,8(r19)
    6acc:	00bfff04 	movi	r2,-4
    6ad0:	80c00117 	ldw	r3,4(r16)
    6ad4:	1886703a 	and	r3,r3,r2
    6ad8:	003f5306 	br	6828 <__alt_data_end+0xfffe6828>
    6adc:	3083ffcc 	andi	r2,r6,4095
    6ae0:	103f181e 	bne	r2,zero,6744 <__alt_data_end+0xfffe6744>
    6ae4:	99000217 	ldw	r4,8(r19)
    6ae8:	b545883a 	add	r2,r22,r21
    6aec:	10800054 	ori	r2,r2,1
    6af0:	20800115 	stw	r2,4(r4)
    6af4:	003f3e06 	br	67f0 <__alt_data_end+0xfffe67f0>
    6af8:	01003f84 	movi	r4,254
    6afc:	02001fc4 	movi	r8,127
    6b00:	01c01f84 	movi	r7,126
    6b04:	003e4006 	br	6408 <__alt_data_end+0xfffe6408>
    6b08:	00800074 	movhi	r2,1
    6b0c:	10936e04 	addi	r2,r2,19896
    6b10:	15000015 	stw	r20,0(r2)
    6b14:	003f1106 	br	675c <__alt_data_end+0xfffe675c>
    6b18:	00800044 	movi	r2,1
    6b1c:	002b883a 	mov	r21,zero
    6b20:	003f1f06 	br	67a0 <__alt_data_end+0xfffe67a0>
    6b24:	81400204 	addi	r5,r16,8
    6b28:	9009883a 	mov	r4,r18
    6b2c:	00058600 	call	5860 <_free_r>
    6b30:	00800074 	movhi	r2,1
    6b34:	109a4c04 	addi	r2,r2,26928
    6b38:	10c00017 	ldw	r3,0(r2)
    6b3c:	003f2c06 	br	67f0 <__alt_data_end+0xfffe67f0>
    6b40:	00c05504 	movi	r3,340
    6b44:	18800536 	bltu	r3,r2,6b5c <_malloc_r+0x7cc>
    6b48:	3804d3fa 	srli	r2,r7,15
    6b4c:	11401e04 	addi	r5,r2,120
    6b50:	10c01dc4 	addi	r3,r2,119
    6b54:	294b883a 	add	r5,r5,r5
    6b58:	003f5606 	br	68b4 <__alt_data_end+0xfffe68b4>
    6b5c:	00c15504 	movi	r3,1364
    6b60:	18800536 	bltu	r3,r2,6b78 <_malloc_r+0x7e8>
    6b64:	3804d4ba 	srli	r2,r7,18
    6b68:	11401f44 	addi	r5,r2,125
    6b6c:	10c01f04 	addi	r3,r2,124
    6b70:	294b883a 	add	r5,r5,r5
    6b74:	003f4f06 	br	68b4 <__alt_data_end+0xfffe68b4>
    6b78:	01403f84 	movi	r5,254
    6b7c:	00c01f84 	movi	r3,126
    6b80:	003f4c06 	br	68b4 <__alt_data_end+0xfffe68b4>
    6b84:	98800117 	ldw	r2,4(r19)
    6b88:	003fa006 	br	6a0c <__alt_data_end+0xfffe6a0c>
    6b8c:	8808d0fa 	srli	r4,r17,3
    6b90:	20800044 	addi	r2,r4,1
    6b94:	1085883a 	add	r2,r2,r2
    6b98:	003e9006 	br	65dc <__alt_data_end+0xfffe65dc>

00006b9c <memcpy>:
    6b9c:	defffd04 	addi	sp,sp,-12
    6ba0:	dfc00215 	stw	ra,8(sp)
    6ba4:	dc400115 	stw	r17,4(sp)
    6ba8:	dc000015 	stw	r16,0(sp)
    6bac:	00c003c4 	movi	r3,15
    6bb0:	2005883a 	mov	r2,r4
    6bb4:	1980452e 	bgeu	r3,r6,6ccc <memcpy+0x130>
    6bb8:	2906b03a 	or	r3,r5,r4
    6bbc:	18c000cc 	andi	r3,r3,3
    6bc0:	1800441e 	bne	r3,zero,6cd4 <memcpy+0x138>
    6bc4:	347ffc04 	addi	r17,r6,-16
    6bc8:	8822d13a 	srli	r17,r17,4
    6bcc:	28c00104 	addi	r3,r5,4
    6bd0:	23400104 	addi	r13,r4,4
    6bd4:	8820913a 	slli	r16,r17,4
    6bd8:	2b000204 	addi	r12,r5,8
    6bdc:	22c00204 	addi	r11,r4,8
    6be0:	84000504 	addi	r16,r16,20
    6be4:	2a800304 	addi	r10,r5,12
    6be8:	22400304 	addi	r9,r4,12
    6bec:	2c21883a 	add	r16,r5,r16
    6bf0:	2811883a 	mov	r8,r5
    6bf4:	200f883a 	mov	r7,r4
    6bf8:	41000017 	ldw	r4,0(r8)
    6bfc:	1fc00017 	ldw	ra,0(r3)
    6c00:	63c00017 	ldw	r15,0(r12)
    6c04:	39000015 	stw	r4,0(r7)
    6c08:	53800017 	ldw	r14,0(r10)
    6c0c:	6fc00015 	stw	ra,0(r13)
    6c10:	5bc00015 	stw	r15,0(r11)
    6c14:	4b800015 	stw	r14,0(r9)
    6c18:	18c00404 	addi	r3,r3,16
    6c1c:	39c00404 	addi	r7,r7,16
    6c20:	42000404 	addi	r8,r8,16
    6c24:	6b400404 	addi	r13,r13,16
    6c28:	63000404 	addi	r12,r12,16
    6c2c:	5ac00404 	addi	r11,r11,16
    6c30:	52800404 	addi	r10,r10,16
    6c34:	4a400404 	addi	r9,r9,16
    6c38:	1c3fef1e 	bne	r3,r16,6bf8 <__alt_data_end+0xfffe6bf8>
    6c3c:	89c00044 	addi	r7,r17,1
    6c40:	380e913a 	slli	r7,r7,4
    6c44:	310003cc 	andi	r4,r6,15
    6c48:	02c000c4 	movi	r11,3
    6c4c:	11c7883a 	add	r3,r2,r7
    6c50:	29cb883a 	add	r5,r5,r7
    6c54:	5900212e 	bgeu	r11,r4,6cdc <memcpy+0x140>
    6c58:	1813883a 	mov	r9,r3
    6c5c:	2811883a 	mov	r8,r5
    6c60:	200f883a 	mov	r7,r4
    6c64:	42800017 	ldw	r10,0(r8)
    6c68:	4a400104 	addi	r9,r9,4
    6c6c:	39ffff04 	addi	r7,r7,-4
    6c70:	4abfff15 	stw	r10,-4(r9)
    6c74:	42000104 	addi	r8,r8,4
    6c78:	59fffa36 	bltu	r11,r7,6c64 <__alt_data_end+0xfffe6c64>
    6c7c:	213fff04 	addi	r4,r4,-4
    6c80:	2008d0ba 	srli	r4,r4,2
    6c84:	318000cc 	andi	r6,r6,3
    6c88:	21000044 	addi	r4,r4,1
    6c8c:	2109883a 	add	r4,r4,r4
    6c90:	2109883a 	add	r4,r4,r4
    6c94:	1907883a 	add	r3,r3,r4
    6c98:	290b883a 	add	r5,r5,r4
    6c9c:	30000626 	beq	r6,zero,6cb8 <memcpy+0x11c>
    6ca0:	198d883a 	add	r6,r3,r6
    6ca4:	29c00003 	ldbu	r7,0(r5)
    6ca8:	18c00044 	addi	r3,r3,1
    6cac:	29400044 	addi	r5,r5,1
    6cb0:	19ffffc5 	stb	r7,-1(r3)
    6cb4:	19bffb1e 	bne	r3,r6,6ca4 <__alt_data_end+0xfffe6ca4>
    6cb8:	dfc00217 	ldw	ra,8(sp)
    6cbc:	dc400117 	ldw	r17,4(sp)
    6cc0:	dc000017 	ldw	r16,0(sp)
    6cc4:	dec00304 	addi	sp,sp,12
    6cc8:	f800283a 	ret
    6ccc:	2007883a 	mov	r3,r4
    6cd0:	003ff206 	br	6c9c <__alt_data_end+0xfffe6c9c>
    6cd4:	2007883a 	mov	r3,r4
    6cd8:	003ff106 	br	6ca0 <__alt_data_end+0xfffe6ca0>
    6cdc:	200d883a 	mov	r6,r4
    6ce0:	003fee06 	br	6c9c <__alt_data_end+0xfffe6c9c>

00006ce4 <memset>:
    6ce4:	20c000cc 	andi	r3,r4,3
    6ce8:	2005883a 	mov	r2,r4
    6cec:	18004426 	beq	r3,zero,6e00 <memset+0x11c>
    6cf0:	31ffffc4 	addi	r7,r6,-1
    6cf4:	30004026 	beq	r6,zero,6df8 <memset+0x114>
    6cf8:	2813883a 	mov	r9,r5
    6cfc:	200d883a 	mov	r6,r4
    6d00:	2007883a 	mov	r3,r4
    6d04:	00000406 	br	6d18 <memset+0x34>
    6d08:	3a3fffc4 	addi	r8,r7,-1
    6d0c:	31800044 	addi	r6,r6,1
    6d10:	38003926 	beq	r7,zero,6df8 <memset+0x114>
    6d14:	400f883a 	mov	r7,r8
    6d18:	18c00044 	addi	r3,r3,1
    6d1c:	32400005 	stb	r9,0(r6)
    6d20:	1a0000cc 	andi	r8,r3,3
    6d24:	403ff81e 	bne	r8,zero,6d08 <__alt_data_end+0xfffe6d08>
    6d28:	010000c4 	movi	r4,3
    6d2c:	21c02d2e 	bgeu	r4,r7,6de4 <memset+0x100>
    6d30:	29003fcc 	andi	r4,r5,255
    6d34:	200c923a 	slli	r6,r4,8
    6d38:	3108b03a 	or	r4,r6,r4
    6d3c:	200c943a 	slli	r6,r4,16
    6d40:	218cb03a 	or	r6,r4,r6
    6d44:	010003c4 	movi	r4,15
    6d48:	21c0182e 	bgeu	r4,r7,6dac <memset+0xc8>
    6d4c:	3b3ffc04 	addi	r12,r7,-16
    6d50:	6018d13a 	srli	r12,r12,4
    6d54:	1a000104 	addi	r8,r3,4
    6d58:	1ac00204 	addi	r11,r3,8
    6d5c:	6008913a 	slli	r4,r12,4
    6d60:	1a800304 	addi	r10,r3,12
    6d64:	1813883a 	mov	r9,r3
    6d68:	21000504 	addi	r4,r4,20
    6d6c:	1909883a 	add	r4,r3,r4
    6d70:	49800015 	stw	r6,0(r9)
    6d74:	41800015 	stw	r6,0(r8)
    6d78:	59800015 	stw	r6,0(r11)
    6d7c:	51800015 	stw	r6,0(r10)
    6d80:	42000404 	addi	r8,r8,16
    6d84:	4a400404 	addi	r9,r9,16
    6d88:	5ac00404 	addi	r11,r11,16
    6d8c:	52800404 	addi	r10,r10,16
    6d90:	413ff71e 	bne	r8,r4,6d70 <__alt_data_end+0xfffe6d70>
    6d94:	63000044 	addi	r12,r12,1
    6d98:	6018913a 	slli	r12,r12,4
    6d9c:	39c003cc 	andi	r7,r7,15
    6da0:	010000c4 	movi	r4,3
    6da4:	1b07883a 	add	r3,r3,r12
    6da8:	21c00e2e 	bgeu	r4,r7,6de4 <memset+0x100>
    6dac:	1813883a 	mov	r9,r3
    6db0:	3811883a 	mov	r8,r7
    6db4:	010000c4 	movi	r4,3
    6db8:	49800015 	stw	r6,0(r9)
    6dbc:	423fff04 	addi	r8,r8,-4
    6dc0:	4a400104 	addi	r9,r9,4
    6dc4:	223ffc36 	bltu	r4,r8,6db8 <__alt_data_end+0xfffe6db8>
    6dc8:	393fff04 	addi	r4,r7,-4
    6dcc:	2008d0ba 	srli	r4,r4,2
    6dd0:	39c000cc 	andi	r7,r7,3
    6dd4:	21000044 	addi	r4,r4,1
    6dd8:	2109883a 	add	r4,r4,r4
    6ddc:	2109883a 	add	r4,r4,r4
    6de0:	1907883a 	add	r3,r3,r4
    6de4:	38000526 	beq	r7,zero,6dfc <memset+0x118>
    6de8:	19cf883a 	add	r7,r3,r7
    6dec:	19400005 	stb	r5,0(r3)
    6df0:	18c00044 	addi	r3,r3,1
    6df4:	38fffd1e 	bne	r7,r3,6dec <__alt_data_end+0xfffe6dec>
    6df8:	f800283a 	ret
    6dfc:	f800283a 	ret
    6e00:	2007883a 	mov	r3,r4
    6e04:	300f883a 	mov	r7,r6
    6e08:	003fc706 	br	6d28 <__alt_data_end+0xfffe6d28>

00006e0c <_open_r>:
    6e0c:	defffd04 	addi	sp,sp,-12
    6e10:	2805883a 	mov	r2,r5
    6e14:	dc000015 	stw	r16,0(sp)
    6e18:	04000074 	movhi	r16,1
    6e1c:	dc400115 	stw	r17,4(sp)
    6e20:	300b883a 	mov	r5,r6
    6e24:	841a3a04 	addi	r16,r16,26856
    6e28:	2023883a 	mov	r17,r4
    6e2c:	380d883a 	mov	r6,r7
    6e30:	1009883a 	mov	r4,r2
    6e34:	dfc00215 	stw	ra,8(sp)
    6e38:	80000015 	stw	zero,0(r16)
    6e3c:	0010e440 	call	10e44 <open>
    6e40:	00ffffc4 	movi	r3,-1
    6e44:	10c00526 	beq	r2,r3,6e5c <_open_r+0x50>
    6e48:	dfc00217 	ldw	ra,8(sp)
    6e4c:	dc400117 	ldw	r17,4(sp)
    6e50:	dc000017 	ldw	r16,0(sp)
    6e54:	dec00304 	addi	sp,sp,12
    6e58:	f800283a 	ret
    6e5c:	80c00017 	ldw	r3,0(r16)
    6e60:	183ff926 	beq	r3,zero,6e48 <__alt_data_end+0xfffe6e48>
    6e64:	88c00015 	stw	r3,0(r17)
    6e68:	003ff706 	br	6e48 <__alt_data_end+0xfffe6e48>

00006e6c <_printf_r>:
    6e6c:	defffd04 	addi	sp,sp,-12
    6e70:	2805883a 	mov	r2,r5
    6e74:	dfc00015 	stw	ra,0(sp)
    6e78:	d9800115 	stw	r6,4(sp)
    6e7c:	d9c00215 	stw	r7,8(sp)
    6e80:	21400217 	ldw	r5,8(r4)
    6e84:	d9c00104 	addi	r7,sp,4
    6e88:	100d883a 	mov	r6,r2
    6e8c:	00075c40 	call	75c4 <___vfprintf_internal_r>
    6e90:	dfc00017 	ldw	ra,0(sp)
    6e94:	dec00304 	addi	sp,sp,12
    6e98:	f800283a 	ret

00006e9c <printf>:
    6e9c:	defffc04 	addi	sp,sp,-16
    6ea0:	dfc00015 	stw	ra,0(sp)
    6ea4:	d9400115 	stw	r5,4(sp)
    6ea8:	d9800215 	stw	r6,8(sp)
    6eac:	d9c00315 	stw	r7,12(sp)
    6eb0:	00800074 	movhi	r2,1
    6eb4:	10936d04 	addi	r2,r2,19892
    6eb8:	10800017 	ldw	r2,0(r2)
    6ebc:	200b883a 	mov	r5,r4
    6ec0:	d9800104 	addi	r6,sp,4
    6ec4:	11000217 	ldw	r4,8(r2)
    6ec8:	00098a00 	call	98a0 <__vfprintf_internal>
    6ecc:	dfc00017 	ldw	ra,0(sp)
    6ed0:	dec00404 	addi	sp,sp,16
    6ed4:	f800283a 	ret

00006ed8 <_putchar_r>:
    6ed8:	21800217 	ldw	r6,8(r4)
    6edc:	000d0081 	jmpi	d008 <_putc_r>

00006ee0 <putchar>:
    6ee0:	00800074 	movhi	r2,1
    6ee4:	10936d04 	addi	r2,r2,19892
    6ee8:	200b883a 	mov	r5,r4
    6eec:	11000017 	ldw	r4,0(r2)
    6ef0:	21800217 	ldw	r6,8(r4)
    6ef4:	000d0081 	jmpi	d008 <_putc_r>

00006ef8 <_puts_r>:
    6ef8:	defff604 	addi	sp,sp,-40
    6efc:	dc000715 	stw	r16,28(sp)
    6f00:	2021883a 	mov	r16,r4
    6f04:	2809883a 	mov	r4,r5
    6f08:	dc400815 	stw	r17,32(sp)
    6f0c:	dfc00915 	stw	ra,36(sp)
    6f10:	2823883a 	mov	r17,r5
    6f14:	00074dc0 	call	74dc <strlen>
    6f18:	10c00044 	addi	r3,r2,1
    6f1c:	d8800115 	stw	r2,4(sp)
    6f20:	00800074 	movhi	r2,1
    6f24:	108c3f04 	addi	r2,r2,12540
    6f28:	d8800215 	stw	r2,8(sp)
    6f2c:	00800044 	movi	r2,1
    6f30:	d8800315 	stw	r2,12(sp)
    6f34:	00800084 	movi	r2,2
    6f38:	dc400015 	stw	r17,0(sp)
    6f3c:	d8c00615 	stw	r3,24(sp)
    6f40:	dec00415 	stw	sp,16(sp)
    6f44:	d8800515 	stw	r2,20(sp)
    6f48:	80000226 	beq	r16,zero,6f54 <_puts_r+0x5c>
    6f4c:	80800e17 	ldw	r2,56(r16)
    6f50:	10001426 	beq	r2,zero,6fa4 <_puts_r+0xac>
    6f54:	81400217 	ldw	r5,8(r16)
    6f58:	2880030b 	ldhu	r2,12(r5)
    6f5c:	10c8000c 	andi	r3,r2,8192
    6f60:	1800061e 	bne	r3,zero,6f7c <_puts_r+0x84>
    6f64:	29001917 	ldw	r4,100(r5)
    6f68:	00f7ffc4 	movi	r3,-8193
    6f6c:	10880014 	ori	r2,r2,8192
    6f70:	20c6703a 	and	r3,r4,r3
    6f74:	2880030d 	sth	r2,12(r5)
    6f78:	28c01915 	stw	r3,100(r5)
    6f7c:	d9800404 	addi	r6,sp,16
    6f80:	8009883a 	mov	r4,r16
    6f84:	000b65c0 	call	b65c <__sfvwrite_r>
    6f88:	1000091e 	bne	r2,zero,6fb0 <_puts_r+0xb8>
    6f8c:	00800284 	movi	r2,10
    6f90:	dfc00917 	ldw	ra,36(sp)
    6f94:	dc400817 	ldw	r17,32(sp)
    6f98:	dc000717 	ldw	r16,28(sp)
    6f9c:	dec00a04 	addi	sp,sp,40
    6fa0:	f800283a 	ret
    6fa4:	8009883a 	mov	r4,r16
    6fa8:	00053700 	call	5370 <__sinit>
    6fac:	003fe906 	br	6f54 <__alt_data_end+0xfffe6f54>
    6fb0:	00bfffc4 	movi	r2,-1
    6fb4:	003ff606 	br	6f90 <__alt_data_end+0xfffe6f90>

00006fb8 <puts>:
    6fb8:	00800074 	movhi	r2,1
    6fbc:	10936d04 	addi	r2,r2,19892
    6fc0:	200b883a 	mov	r5,r4
    6fc4:	11000017 	ldw	r4,0(r2)
    6fc8:	0006ef81 	jmpi	6ef8 <_puts_r>

00006fcc <srand>:
    6fcc:	00800074 	movhi	r2,1
    6fd0:	10936d04 	addi	r2,r2,19892
    6fd4:	10800017 	ldw	r2,0(r2)
    6fd8:	11002915 	stw	r4,164(r2)
    6fdc:	10002a15 	stw	zero,168(r2)
    6fe0:	f800283a 	ret

00006fe4 <rand>:
    6fe4:	00800074 	movhi	r2,1
    6fe8:	defffe04 	addi	sp,sp,-8
    6fec:	10936d04 	addi	r2,r2,19892
    6ff0:	dc000015 	stw	r16,0(sp)
    6ff4:	14000017 	ldw	r16,0(r2)
    6ff8:	dfc00115 	stw	ra,4(sp)
    6ffc:	01932574 	movhi	r6,19605
    7000:	81002917 	ldw	r4,164(r16)
    7004:	81402a17 	ldw	r5,168(r16)
    7008:	01d614b4 	movhi	r7,22610
    700c:	319fcb44 	addi	r6,r6,32557
    7010:	39fd0b44 	addi	r7,r7,-3027
    7014:	000f5a00 	call	f5a0 <__muldi3>
    7018:	11000044 	addi	r4,r2,1
    701c:	2085803a 	cmpltu	r2,r4,r2
    7020:	10c7883a 	add	r3,r2,r3
    7024:	00a00034 	movhi	r2,32768
    7028:	10bfffc4 	addi	r2,r2,-1
    702c:	1884703a 	and	r2,r3,r2
    7030:	81002915 	stw	r4,164(r16)
    7034:	80c02a15 	stw	r3,168(r16)
    7038:	dfc00117 	ldw	ra,4(sp)
    703c:	dc000017 	ldw	r16,0(sp)
    7040:	dec00204 	addi	sp,sp,8
    7044:	f800283a 	ret

00007048 <lflush>:
    7048:	2080030b 	ldhu	r2,12(r4)
    704c:	00c00244 	movi	r3,9
    7050:	1080024c 	andi	r2,r2,9
    7054:	10c00226 	beq	r2,r3,7060 <lflush+0x18>
    7058:	0005883a 	mov	r2,zero
    705c:	f800283a 	ret
    7060:	0004fe01 	jmpi	4fe0 <fflush>

00007064 <__srefill_r>:
    7064:	defffc04 	addi	sp,sp,-16
    7068:	dc400115 	stw	r17,4(sp)
    706c:	dc000015 	stw	r16,0(sp)
    7070:	dfc00315 	stw	ra,12(sp)
    7074:	dc800215 	stw	r18,8(sp)
    7078:	2023883a 	mov	r17,r4
    707c:	2821883a 	mov	r16,r5
    7080:	20000226 	beq	r4,zero,708c <__srefill_r+0x28>
    7084:	20800e17 	ldw	r2,56(r4)
    7088:	10003c26 	beq	r2,zero,717c <__srefill_r+0x118>
    708c:	80c0030b 	ldhu	r3,12(r16)
    7090:	1908000c 	andi	r4,r3,8192
    7094:	1805883a 	mov	r2,r3
    7098:	2000071e 	bne	r4,zero,70b8 <__srefill_r+0x54>
    709c:	81001917 	ldw	r4,100(r16)
    70a0:	18880014 	ori	r2,r3,8192
    70a4:	00f7ffc4 	movi	r3,-8193
    70a8:	20c8703a 	and	r4,r4,r3
    70ac:	8080030d 	sth	r2,12(r16)
    70b0:	1007883a 	mov	r3,r2
    70b4:	81001915 	stw	r4,100(r16)
    70b8:	80000115 	stw	zero,4(r16)
    70bc:	1100080c 	andi	r4,r2,32
    70c0:	2000571e 	bne	r4,zero,7220 <__srefill_r+0x1bc>
    70c4:	1100010c 	andi	r4,r2,4
    70c8:	20001f26 	beq	r4,zero,7148 <__srefill_r+0xe4>
    70cc:	81400c17 	ldw	r5,48(r16)
    70d0:	28000826 	beq	r5,zero,70f4 <__srefill_r+0x90>
    70d4:	80801004 	addi	r2,r16,64
    70d8:	28800226 	beq	r5,r2,70e4 <__srefill_r+0x80>
    70dc:	8809883a 	mov	r4,r17
    70e0:	00058600 	call	5860 <_free_r>
    70e4:	80800f17 	ldw	r2,60(r16)
    70e8:	80000c15 	stw	zero,48(r16)
    70ec:	80800115 	stw	r2,4(r16)
    70f0:	1000391e 	bne	r2,zero,71d8 <__srefill_r+0x174>
    70f4:	80800417 	ldw	r2,16(r16)
    70f8:	10004b26 	beq	r2,zero,7228 <__srefill_r+0x1c4>
    70fc:	8480030b 	ldhu	r18,12(r16)
    7100:	908000cc 	andi	r2,r18,3
    7104:	10001f1e 	bne	r2,zero,7184 <__srefill_r+0x120>
    7108:	81800417 	ldw	r6,16(r16)
    710c:	80800817 	ldw	r2,32(r16)
    7110:	81c00517 	ldw	r7,20(r16)
    7114:	81400717 	ldw	r5,28(r16)
    7118:	81800015 	stw	r6,0(r16)
    711c:	8809883a 	mov	r4,r17
    7120:	103ee83a 	callr	r2
    7124:	80800115 	stw	r2,4(r16)
    7128:	00800e0e 	bge	zero,r2,7164 <__srefill_r+0x100>
    712c:	0005883a 	mov	r2,zero
    7130:	dfc00317 	ldw	ra,12(sp)
    7134:	dc800217 	ldw	r18,8(sp)
    7138:	dc400117 	ldw	r17,4(sp)
    713c:	dc000017 	ldw	r16,0(sp)
    7140:	dec00404 	addi	sp,sp,16
    7144:	f800283a 	ret
    7148:	1100040c 	andi	r4,r2,16
    714c:	20003026 	beq	r4,zero,7210 <__srefill_r+0x1ac>
    7150:	1080020c 	andi	r2,r2,8
    7154:	1000241e 	bne	r2,zero,71e8 <__srefill_r+0x184>
    7158:	18c00114 	ori	r3,r3,4
    715c:	80c0030d 	sth	r3,12(r16)
    7160:	003fe406 	br	70f4 <__alt_data_end+0xfffe70f4>
    7164:	80c0030b 	ldhu	r3,12(r16)
    7168:	1000161e 	bne	r2,zero,71c4 <__srefill_r+0x160>
    716c:	18c00814 	ori	r3,r3,32
    7170:	00bfffc4 	movi	r2,-1
    7174:	80c0030d 	sth	r3,12(r16)
    7178:	003fed06 	br	7130 <__alt_data_end+0xfffe7130>
    717c:	00053700 	call	5370 <__sinit>
    7180:	003fc206 	br	708c <__alt_data_end+0xfffe708c>
    7184:	00800074 	movhi	r2,1
    7188:	10936c04 	addi	r2,r2,19888
    718c:	11000017 	ldw	r4,0(r2)
    7190:	01400034 	movhi	r5,0
    7194:	00800044 	movi	r2,1
    7198:	295c1204 	addi	r5,r5,28744
    719c:	8080030d 	sth	r2,12(r16)
    71a0:	000604c0 	call	604c <_fwalk>
    71a4:	00800244 	movi	r2,9
    71a8:	8480030d 	sth	r18,12(r16)
    71ac:	9480024c 	andi	r18,r18,9
    71b0:	90bfd51e 	bne	r18,r2,7108 <__alt_data_end+0xfffe7108>
    71b4:	800b883a 	mov	r5,r16
    71b8:	8809883a 	mov	r4,r17
    71bc:	0004d680 	call	4d68 <__sflush_r>
    71c0:	003fd106 	br	7108 <__alt_data_end+0xfffe7108>
    71c4:	18c01014 	ori	r3,r3,64
    71c8:	80000115 	stw	zero,4(r16)
    71cc:	00bfffc4 	movi	r2,-1
    71d0:	80c0030d 	sth	r3,12(r16)
    71d4:	003fd606 	br	7130 <__alt_data_end+0xfffe7130>
    71d8:	80c00e17 	ldw	r3,56(r16)
    71dc:	0005883a 	mov	r2,zero
    71e0:	80c00015 	stw	r3,0(r16)
    71e4:	003fd206 	br	7130 <__alt_data_end+0xfffe7130>
    71e8:	800b883a 	mov	r5,r16
    71ec:	8809883a 	mov	r4,r17
    71f0:	0004f840 	call	4f84 <_fflush_r>
    71f4:	10000a1e 	bne	r2,zero,7220 <__srefill_r+0x1bc>
    71f8:	8080030b 	ldhu	r2,12(r16)
    71fc:	00fffdc4 	movi	r3,-9
    7200:	80000215 	stw	zero,8(r16)
    7204:	1886703a 	and	r3,r3,r2
    7208:	80000615 	stw	zero,24(r16)
    720c:	003fd206 	br	7158 <__alt_data_end+0xfffe7158>
    7210:	00800244 	movi	r2,9
    7214:	88800015 	stw	r2,0(r17)
    7218:	18c01014 	ori	r3,r3,64
    721c:	80c0030d 	sth	r3,12(r16)
    7220:	00bfffc4 	movi	r2,-1
    7224:	003fc206 	br	7130 <__alt_data_end+0xfffe7130>
    7228:	800b883a 	mov	r5,r16
    722c:	8809883a 	mov	r4,r17
    7230:	00061d40 	call	61d4 <__smakebuf_r>
    7234:	003fb106 	br	70fc <__alt_data_end+0xfffe70fc>

00007238 <_sbrk_r>:
    7238:	defffd04 	addi	sp,sp,-12
    723c:	dc000015 	stw	r16,0(sp)
    7240:	04000074 	movhi	r16,1
    7244:	dc400115 	stw	r17,4(sp)
    7248:	841a3a04 	addi	r16,r16,26856
    724c:	2023883a 	mov	r17,r4
    7250:	2809883a 	mov	r4,r5
    7254:	dfc00215 	stw	ra,8(sp)
    7258:	80000015 	stw	zero,0(r16)
    725c:	00111640 	call	11164 <sbrk>
    7260:	00ffffc4 	movi	r3,-1
    7264:	10c00526 	beq	r2,r3,727c <_sbrk_r+0x44>
    7268:	dfc00217 	ldw	ra,8(sp)
    726c:	dc400117 	ldw	r17,4(sp)
    7270:	dc000017 	ldw	r16,0(sp)
    7274:	dec00304 	addi	sp,sp,12
    7278:	f800283a 	ret
    727c:	80c00017 	ldw	r3,0(r16)
    7280:	183ff926 	beq	r3,zero,7268 <__alt_data_end+0xfffe7268>
    7284:	88c00015 	stw	r3,0(r17)
    7288:	003ff706 	br	7268 <__alt_data_end+0xfffe7268>

0000728c <__sread>:
    728c:	defffe04 	addi	sp,sp,-8
    7290:	dc000015 	stw	r16,0(sp)
    7294:	2821883a 	mov	r16,r5
    7298:	2940038f 	ldh	r5,14(r5)
    729c:	dfc00115 	stw	ra,4(sp)
    72a0:	000d1700 	call	d170 <_read_r>
    72a4:	10000716 	blt	r2,zero,72c4 <__sread+0x38>
    72a8:	80c01417 	ldw	r3,80(r16)
    72ac:	1887883a 	add	r3,r3,r2
    72b0:	80c01415 	stw	r3,80(r16)
    72b4:	dfc00117 	ldw	ra,4(sp)
    72b8:	dc000017 	ldw	r16,0(sp)
    72bc:	dec00204 	addi	sp,sp,8
    72c0:	f800283a 	ret
    72c4:	80c0030b 	ldhu	r3,12(r16)
    72c8:	18fbffcc 	andi	r3,r3,61439
    72cc:	80c0030d 	sth	r3,12(r16)
    72d0:	dfc00117 	ldw	ra,4(sp)
    72d4:	dc000017 	ldw	r16,0(sp)
    72d8:	dec00204 	addi	sp,sp,8
    72dc:	f800283a 	ret

000072e0 <__seofread>:
    72e0:	0005883a 	mov	r2,zero
    72e4:	f800283a 	ret

000072e8 <__swrite>:
    72e8:	2880030b 	ldhu	r2,12(r5)
    72ec:	defffb04 	addi	sp,sp,-20
    72f0:	dcc00315 	stw	r19,12(sp)
    72f4:	dc800215 	stw	r18,8(sp)
    72f8:	dc400115 	stw	r17,4(sp)
    72fc:	dc000015 	stw	r16,0(sp)
    7300:	dfc00415 	stw	ra,16(sp)
    7304:	10c0400c 	andi	r3,r2,256
    7308:	2821883a 	mov	r16,r5
    730c:	2023883a 	mov	r17,r4
    7310:	3025883a 	mov	r18,r6
    7314:	3827883a 	mov	r19,r7
    7318:	18000526 	beq	r3,zero,7330 <__swrite+0x48>
    731c:	2940038f 	ldh	r5,14(r5)
    7320:	01c00084 	movi	r7,2
    7324:	000d883a 	mov	r6,zero
    7328:	000bcb00 	call	bcb0 <_lseek_r>
    732c:	8080030b 	ldhu	r2,12(r16)
    7330:	8140038f 	ldh	r5,14(r16)
    7334:	10bbffcc 	andi	r2,r2,61439
    7338:	980f883a 	mov	r7,r19
    733c:	900d883a 	mov	r6,r18
    7340:	8809883a 	mov	r4,r17
    7344:	8080030d 	sth	r2,12(r16)
    7348:	dfc00417 	ldw	ra,16(sp)
    734c:	dcc00317 	ldw	r19,12(sp)
    7350:	dc800217 	ldw	r18,8(sp)
    7354:	dc400117 	ldw	r17,4(sp)
    7358:	dc000017 	ldw	r16,0(sp)
    735c:	dec00504 	addi	sp,sp,20
    7360:	00099781 	jmpi	9978 <_write_r>

00007364 <__sseek>:
    7364:	defffe04 	addi	sp,sp,-8
    7368:	dc000015 	stw	r16,0(sp)
    736c:	2821883a 	mov	r16,r5
    7370:	2940038f 	ldh	r5,14(r5)
    7374:	dfc00115 	stw	ra,4(sp)
    7378:	000bcb00 	call	bcb0 <_lseek_r>
    737c:	00ffffc4 	movi	r3,-1
    7380:	10c00826 	beq	r2,r3,73a4 <__sseek+0x40>
    7384:	80c0030b 	ldhu	r3,12(r16)
    7388:	80801415 	stw	r2,80(r16)
    738c:	18c40014 	ori	r3,r3,4096
    7390:	80c0030d 	sth	r3,12(r16)
    7394:	dfc00117 	ldw	ra,4(sp)
    7398:	dc000017 	ldw	r16,0(sp)
    739c:	dec00204 	addi	sp,sp,8
    73a0:	f800283a 	ret
    73a4:	80c0030b 	ldhu	r3,12(r16)
    73a8:	18fbffcc 	andi	r3,r3,61439
    73ac:	80c0030d 	sth	r3,12(r16)
    73b0:	dfc00117 	ldw	ra,4(sp)
    73b4:	dc000017 	ldw	r16,0(sp)
    73b8:	dec00204 	addi	sp,sp,8
    73bc:	f800283a 	ret

000073c0 <__sclose>:
    73c0:	2940038f 	ldh	r5,14(r5)
    73c4:	0009b2c1 	jmpi	9b2c <_close_r>

000073c8 <strcat>:
    73c8:	defffe04 	addi	sp,sp,-8
    73cc:	dc000015 	stw	r16,0(sp)
    73d0:	dfc00115 	stw	ra,4(sp)
    73d4:	208000cc 	andi	r2,r4,3
    73d8:	2021883a 	mov	r16,r4
    73dc:	1000131e 	bne	r2,zero,742c <strcat+0x64>
    73e0:	20800017 	ldw	r2,0(r4)
    73e4:	01ffbff4 	movhi	r7,65279
    73e8:	39ffbfc4 	addi	r7,r7,-257
    73ec:	0086303a 	nor	r3,zero,r2
    73f0:	01a02074 	movhi	r6,32897
    73f4:	11c5883a 	add	r2,r2,r7
    73f8:	31a02004 	addi	r6,r6,-32640
    73fc:	10c4703a 	and	r2,r2,r3
    7400:	1184703a 	and	r2,r2,r6
    7404:	1000091e 	bne	r2,zero,742c <strcat+0x64>
    7408:	21000104 	addi	r4,r4,4
    740c:	20800017 	ldw	r2,0(r4)
    7410:	11c7883a 	add	r3,r2,r7
    7414:	0084303a 	nor	r2,zero,r2
    7418:	1884703a 	and	r2,r3,r2
    741c:	1184703a 	and	r2,r2,r6
    7420:	103ff926 	beq	r2,zero,7408 <__alt_data_end+0xfffe7408>
    7424:	00000106 	br	742c <strcat+0x64>
    7428:	21000044 	addi	r4,r4,1
    742c:	20800007 	ldb	r2,0(r4)
    7430:	103ffd1e 	bne	r2,zero,7428 <__alt_data_end+0xfffe7428>
    7434:	000744c0 	call	744c <strcpy>
    7438:	8005883a 	mov	r2,r16
    743c:	dfc00117 	ldw	ra,4(sp)
    7440:	dc000017 	ldw	r16,0(sp)
    7444:	dec00204 	addi	sp,sp,8
    7448:	f800283a 	ret

0000744c <strcpy>:
    744c:	2906b03a 	or	r3,r5,r4
    7450:	18c000cc 	andi	r3,r3,3
    7454:	2005883a 	mov	r2,r4
    7458:	1800161e 	bne	r3,zero,74b4 <strcpy+0x68>
    745c:	29c00017 	ldw	r7,0(r5)
    7460:	02ffbff4 	movhi	r11,65279
    7464:	5affbfc4 	addi	r11,r11,-257
    7468:	02a02074 	movhi	r10,32897
    746c:	01c6303a 	nor	r3,zero,r7
    7470:	3ac9883a 	add	r4,r7,r11
    7474:	52a02004 	addi	r10,r10,-32640
    7478:	20c6703a 	and	r3,r4,r3
    747c:	1a86703a 	and	r3,r3,r10
    7480:	18000c1e 	bne	r3,zero,74b4 <strcpy+0x68>
    7484:	1011883a 	mov	r8,r2
    7488:	41c00015 	stw	r7,0(r8)
    748c:	29400104 	addi	r5,r5,4
    7490:	29c00017 	ldw	r7,0(r5)
    7494:	41800104 	addi	r6,r8,4
    7498:	3011883a 	mov	r8,r6
    749c:	3ad3883a 	add	r9,r7,r11
    74a0:	01c6303a 	nor	r3,zero,r7
    74a4:	48c6703a 	and	r3,r9,r3
    74a8:	1a86703a 	and	r3,r3,r10
    74ac:	183ff626 	beq	r3,zero,7488 <__alt_data_end+0xfffe7488>
    74b0:	00000106 	br	74b8 <strcpy+0x6c>
    74b4:	100d883a 	mov	r6,r2
    74b8:	28c00003 	ldbu	r3,0(r5)
    74bc:	31800044 	addi	r6,r6,1
    74c0:	29400044 	addi	r5,r5,1
    74c4:	30ffffc5 	stb	r3,-1(r6)
    74c8:	18c03fcc 	andi	r3,r3,255
    74cc:	18c0201c 	xori	r3,r3,128
    74d0:	18ffe004 	addi	r3,r3,-128
    74d4:	183ff81e 	bne	r3,zero,74b8 <__alt_data_end+0xfffe74b8>
    74d8:	f800283a 	ret

000074dc <strlen>:
    74dc:	208000cc 	andi	r2,r4,3
    74e0:	10002026 	beq	r2,zero,7564 <strlen+0x88>
    74e4:	20800007 	ldb	r2,0(r4)
    74e8:	10002026 	beq	r2,zero,756c <strlen+0x90>
    74ec:	2005883a 	mov	r2,r4
    74f0:	00000206 	br	74fc <strlen+0x20>
    74f4:	10c00007 	ldb	r3,0(r2)
    74f8:	18001826 	beq	r3,zero,755c <strlen+0x80>
    74fc:	10800044 	addi	r2,r2,1
    7500:	10c000cc 	andi	r3,r2,3
    7504:	183ffb1e 	bne	r3,zero,74f4 <__alt_data_end+0xfffe74f4>
    7508:	10c00017 	ldw	r3,0(r2)
    750c:	01ffbff4 	movhi	r7,65279
    7510:	39ffbfc4 	addi	r7,r7,-257
    7514:	00ca303a 	nor	r5,zero,r3
    7518:	01a02074 	movhi	r6,32897
    751c:	19c7883a 	add	r3,r3,r7
    7520:	31a02004 	addi	r6,r6,-32640
    7524:	1946703a 	and	r3,r3,r5
    7528:	1986703a 	and	r3,r3,r6
    752c:	1800091e 	bne	r3,zero,7554 <strlen+0x78>
    7530:	10800104 	addi	r2,r2,4
    7534:	10c00017 	ldw	r3,0(r2)
    7538:	19cb883a 	add	r5,r3,r7
    753c:	00c6303a 	nor	r3,zero,r3
    7540:	28c6703a 	and	r3,r5,r3
    7544:	1986703a 	and	r3,r3,r6
    7548:	183ff926 	beq	r3,zero,7530 <__alt_data_end+0xfffe7530>
    754c:	00000106 	br	7554 <strlen+0x78>
    7550:	10800044 	addi	r2,r2,1
    7554:	10c00007 	ldb	r3,0(r2)
    7558:	183ffd1e 	bne	r3,zero,7550 <__alt_data_end+0xfffe7550>
    755c:	1105c83a 	sub	r2,r2,r4
    7560:	f800283a 	ret
    7564:	2005883a 	mov	r2,r4
    7568:	003fe706 	br	7508 <__alt_data_end+0xfffe7508>
    756c:	0005883a 	mov	r2,zero
    7570:	f800283a 	ret

00007574 <time>:
    7574:	00800074 	movhi	r2,1
    7578:	defffc04 	addi	sp,sp,-16
    757c:	10936d04 	addi	r2,r2,19892
    7580:	dc000215 	stw	r16,8(sp)
    7584:	2021883a 	mov	r16,r4
    7588:	11000017 	ldw	r4,0(r2)
    758c:	000d883a 	mov	r6,zero
    7590:	d80b883a 	mov	r5,sp
    7594:	dfc00315 	stw	ra,12(sp)
    7598:	000bb240 	call	bb24 <_gettimeofday_r>
    759c:	10000716 	blt	r2,zero,75bc <time+0x48>
    75a0:	d8800017 	ldw	r2,0(sp)
    75a4:	80000126 	beq	r16,zero,75ac <time+0x38>
    75a8:	80800015 	stw	r2,0(r16)
    75ac:	dfc00317 	ldw	ra,12(sp)
    75b0:	dc000217 	ldw	r16,8(sp)
    75b4:	dec00404 	addi	sp,sp,16
    75b8:	f800283a 	ret
    75bc:	00bfffc4 	movi	r2,-1
    75c0:	003ffa06 	br	75ac <__alt_data_end+0xfffe75ac>

000075c4 <___vfprintf_internal_r>:
    75c4:	deffb804 	addi	sp,sp,-288
    75c8:	dfc04715 	stw	ra,284(sp)
    75cc:	ddc04515 	stw	r23,276(sp)
    75d0:	dd404315 	stw	r21,268(sp)
    75d4:	d9002d15 	stw	r4,180(sp)
    75d8:	282f883a 	mov	r23,r5
    75dc:	302b883a 	mov	r21,r6
    75e0:	d9c02e15 	stw	r7,184(sp)
    75e4:	df004615 	stw	fp,280(sp)
    75e8:	dd804415 	stw	r22,272(sp)
    75ec:	dd004215 	stw	r20,264(sp)
    75f0:	dcc04115 	stw	r19,260(sp)
    75f4:	dc804015 	stw	r18,256(sp)
    75f8:	dc403f15 	stw	r17,252(sp)
    75fc:	dc003e15 	stw	r16,248(sp)
    7600:	000bc800 	call	bc80 <_localeconv_r>
    7604:	10800017 	ldw	r2,0(r2)
    7608:	1009883a 	mov	r4,r2
    760c:	d8803415 	stw	r2,208(sp)
    7610:	00074dc0 	call	74dc <strlen>
    7614:	d8803715 	stw	r2,220(sp)
    7618:	d8802d17 	ldw	r2,180(sp)
    761c:	10000226 	beq	r2,zero,7628 <___vfprintf_internal_r+0x64>
    7620:	10800e17 	ldw	r2,56(r2)
    7624:	1000fb26 	beq	r2,zero,7a14 <___vfprintf_internal_r+0x450>
    7628:	b880030b 	ldhu	r2,12(r23)
    762c:	10c8000c 	andi	r3,r2,8192
    7630:	1800061e 	bne	r3,zero,764c <___vfprintf_internal_r+0x88>
    7634:	b9001917 	ldw	r4,100(r23)
    7638:	00f7ffc4 	movi	r3,-8193
    763c:	10880014 	ori	r2,r2,8192
    7640:	20c6703a 	and	r3,r4,r3
    7644:	b880030d 	sth	r2,12(r23)
    7648:	b8c01915 	stw	r3,100(r23)
    764c:	10c0020c 	andi	r3,r2,8
    7650:	1800c326 	beq	r3,zero,7960 <___vfprintf_internal_r+0x39c>
    7654:	b8c00417 	ldw	r3,16(r23)
    7658:	1800c126 	beq	r3,zero,7960 <___vfprintf_internal_r+0x39c>
    765c:	1080068c 	andi	r2,r2,26
    7660:	00c00284 	movi	r3,10
    7664:	10c0c626 	beq	r2,r3,7980 <___vfprintf_internal_r+0x3bc>
    7668:	d8c00404 	addi	r3,sp,16
    766c:	05000074 	movhi	r20,1
    7670:	d9001e04 	addi	r4,sp,120
    7674:	a50c5084 	addi	r20,r20,12610
    7678:	d8c01e15 	stw	r3,120(sp)
    767c:	d8002015 	stw	zero,128(sp)
    7680:	d8001f15 	stw	zero,124(sp)
    7684:	d8003315 	stw	zero,204(sp)
    7688:	d8003615 	stw	zero,216(sp)
    768c:	d8003815 	stw	zero,224(sp)
    7690:	1811883a 	mov	r8,r3
    7694:	d8003915 	stw	zero,228(sp)
    7698:	d8003a15 	stw	zero,232(sp)
    769c:	d8002f15 	stw	zero,188(sp)
    76a0:	d9002815 	stw	r4,160(sp)
    76a4:	a8800007 	ldb	r2,0(r21)
    76a8:	10028b26 	beq	r2,zero,80d8 <___vfprintf_internal_r+0xb14>
    76ac:	00c00944 	movi	r3,37
    76b0:	a823883a 	mov	r17,r21
    76b4:	10c0021e 	bne	r2,r3,76c0 <___vfprintf_internal_r+0xfc>
    76b8:	00001406 	br	770c <___vfprintf_internal_r+0x148>
    76bc:	10c00326 	beq	r2,r3,76cc <___vfprintf_internal_r+0x108>
    76c0:	8c400044 	addi	r17,r17,1
    76c4:	88800007 	ldb	r2,0(r17)
    76c8:	103ffc1e 	bne	r2,zero,76bc <__alt_data_end+0xfffe76bc>
    76cc:	8d61c83a 	sub	r16,r17,r21
    76d0:	80000e26 	beq	r16,zero,770c <___vfprintf_internal_r+0x148>
    76d4:	d8c02017 	ldw	r3,128(sp)
    76d8:	d8801f17 	ldw	r2,124(sp)
    76dc:	45400015 	stw	r21,0(r8)
    76e0:	1c07883a 	add	r3,r3,r16
    76e4:	10800044 	addi	r2,r2,1
    76e8:	d8c02015 	stw	r3,128(sp)
    76ec:	44000115 	stw	r16,4(r8)
    76f0:	d8801f15 	stw	r2,124(sp)
    76f4:	00c001c4 	movi	r3,7
    76f8:	1880a916 	blt	r3,r2,79a0 <___vfprintf_internal_r+0x3dc>
    76fc:	42000204 	addi	r8,r8,8
    7700:	d9402f17 	ldw	r5,188(sp)
    7704:	2c0b883a 	add	r5,r5,r16
    7708:	d9402f15 	stw	r5,188(sp)
    770c:	88800007 	ldb	r2,0(r17)
    7710:	1000aa26 	beq	r2,zero,79bc <___vfprintf_internal_r+0x3f8>
    7714:	8d400044 	addi	r21,r17,1
    7718:	8c400047 	ldb	r17,1(r17)
    771c:	0021883a 	mov	r16,zero
    7720:	00bfffc4 	movi	r2,-1
    7724:	0025883a 	mov	r18,zero
    7728:	dc002905 	stb	r16,164(sp)
    772c:	d8002785 	stb	zero,158(sp)
    7730:	d8002b05 	stb	zero,172(sp)
    7734:	d8802a15 	stw	r2,168(sp)
    7738:	d8003115 	stw	zero,196(sp)
    773c:	04c01604 	movi	r19,88
    7740:	05800244 	movi	r22,9
    7744:	9021883a 	mov	r16,r18
    7748:	4039883a 	mov	fp,r8
    774c:	ad400044 	addi	r21,r21,1
    7750:	88bff804 	addi	r2,r17,-32
    7754:	98833236 	bltu	r19,r2,8420 <___vfprintf_internal_r+0xe5c>
    7758:	100490ba 	slli	r2,r2,2
    775c:	00c00034 	movhi	r3,0
    7760:	18dddc04 	addi	r3,r3,30576
    7764:	10c5883a 	add	r2,r2,r3
    7768:	10800017 	ldw	r2,0(r2)
    776c:	1000683a 	jmp	r2
    7770:	00008318 	cmpnei	zero,zero,524
    7774:	00008420 	cmpeqi	zero,zero,528
    7778:	00008420 	cmpeqi	zero,zero,528
    777c:	00008338 	rdprs	zero,zero,524
    7780:	00008420 	cmpeqi	zero,zero,528
    7784:	00008420 	cmpeqi	zero,zero,528
    7788:	00008420 	cmpeqi	zero,zero,528
    778c:	00008420 	cmpeqi	zero,zero,528
    7790:	00008420 	cmpeqi	zero,zero,528
    7794:	00008420 	cmpeqi	zero,zero,528
    7798:	00007a20 	cmpeqi	zero,zero,488
    779c:	00008228 	cmpgeui	zero,zero,520
    77a0:	00008420 	cmpeqi	zero,zero,528
    77a4:	000078e4 	muli	zero,zero,483
    77a8:	00007a44 	movi	zero,489
    77ac:	00008420 	cmpeqi	zero,zero,528
    77b0:	00007a94 	movui	zero,490
    77b4:	00007aa0 	cmpeqi	zero,zero,490
    77b8:	00007aa0 	cmpeqi	zero,zero,490
    77bc:	00007aa0 	cmpeqi	zero,zero,490
    77c0:	00007aa0 	cmpeqi	zero,zero,490
    77c4:	00007aa0 	cmpeqi	zero,zero,490
    77c8:	00007aa0 	cmpeqi	zero,zero,490
    77cc:	00007aa0 	cmpeqi	zero,zero,490
    77d0:	00007aa0 	cmpeqi	zero,zero,490
    77d4:	00007aa0 	cmpeqi	zero,zero,490
    77d8:	00008420 	cmpeqi	zero,zero,528
    77dc:	00008420 	cmpeqi	zero,zero,528
    77e0:	00008420 	cmpeqi	zero,zero,528
    77e4:	00008420 	cmpeqi	zero,zero,528
    77e8:	00008420 	cmpeqi	zero,zero,528
    77ec:	00008420 	cmpeqi	zero,zero,528
    77f0:	00008420 	cmpeqi	zero,zero,528
    77f4:	00008420 	cmpeqi	zero,zero,528
    77f8:	00008420 	cmpeqi	zero,zero,528
    77fc:	00008420 	cmpeqi	zero,zero,528
    7800:	00007adc 	xori	zero,zero,491
    7804:	00007ba4 	muli	zero,zero,494
    7808:	00008420 	cmpeqi	zero,zero,528
    780c:	00007ba4 	muli	zero,zero,494
    7810:	00008420 	cmpeqi	zero,zero,528
    7814:	00008420 	cmpeqi	zero,zero,528
    7818:	00008420 	cmpeqi	zero,zero,528
    781c:	00008420 	cmpeqi	zero,zero,528
    7820:	00007c50 	cmplti	zero,zero,497
    7824:	00008420 	cmpeqi	zero,zero,528
    7828:	00008420 	cmpeqi	zero,zero,528
    782c:	00007c5c 	xori	zero,zero,497
    7830:	00008420 	cmpeqi	zero,zero,528
    7834:	00008420 	cmpeqi	zero,zero,528
    7838:	00008420 	cmpeqi	zero,zero,528
    783c:	00008420 	cmpeqi	zero,zero,528
    7840:	00008420 	cmpeqi	zero,zero,528
    7844:	000080e0 	cmpeqi	zero,zero,515
    7848:	00008420 	cmpeqi	zero,zero,528
    784c:	00008420 	cmpeqi	zero,zero,528
    7850:	0000814c 	andi	zero,zero,517
    7854:	00008420 	cmpeqi	zero,zero,528
    7858:	00008420 	cmpeqi	zero,zero,528
    785c:	00008420 	cmpeqi	zero,zero,528
    7860:	00008420 	cmpeqi	zero,zero,528
    7864:	00008420 	cmpeqi	zero,zero,528
    7868:	00008420 	cmpeqi	zero,zero,528
    786c:	00008420 	cmpeqi	zero,zero,528
    7870:	00008420 	cmpeqi	zero,zero,528
    7874:	00008420 	cmpeqi	zero,zero,528
    7878:	00008420 	cmpeqi	zero,zero,528
    787c:	000083c4 	movi	zero,527
    7880:	00008344 	movi	zero,525
    7884:	00007ba4 	muli	zero,zero,494
    7888:	00007ba4 	muli	zero,zero,494
    788c:	00007ba4 	muli	zero,zero,494
    7890:	00008364 	muli	zero,zero,525
    7894:	00008344 	movi	zero,525
    7898:	00008420 	cmpeqi	zero,zero,528
    789c:	00008420 	cmpeqi	zero,zero,528
    78a0:	00008370 	cmpltui	zero,zero,525
    78a4:	00008420 	cmpeqi	zero,zero,528
    78a8:	00008384 	movi	zero,526
    78ac:	00008208 	cmpgei	zero,zero,520
    78b0:	000078f0 	cmpltui	zero,zero,483
    78b4:	00008240 	call	824 <updateCellWeights+0x68>
    78b8:	00008420 	cmpeqi	zero,zero,528
    78bc:	0000824c 	andi	zero,zero,521
    78c0:	00008420 	cmpeqi	zero,zero,528
    78c4:	000082b0 	cmpltui	zero,zero,522
    78c8:	00008420 	cmpeqi	zero,zero,528
    78cc:	00008420 	cmpeqi	zero,zero,528
    78d0:	000082d0 	cmplti	zero,zero,523
    78d4:	d8c03117 	ldw	r3,196(sp)
    78d8:	d8802e15 	stw	r2,184(sp)
    78dc:	00c7c83a 	sub	r3,zero,r3
    78e0:	d8c03115 	stw	r3,196(sp)
    78e4:	84000114 	ori	r16,r16,4
    78e8:	ac400007 	ldb	r17,0(r21)
    78ec:	003f9706 	br	774c <__alt_data_end+0xfffe774c>
    78f0:	00800c04 	movi	r2,48
    78f4:	d8802705 	stb	r2,156(sp)
    78f8:	00801e04 	movi	r2,120
    78fc:	d8802745 	stb	r2,157(sp)
    7900:	d9002a17 	ldw	r4,168(sp)
    7904:	d8802e17 	ldw	r2,184(sp)
    7908:	d8002785 	stb	zero,158(sp)
    790c:	e011883a 	mov	r8,fp
    7910:	10c00104 	addi	r3,r2,4
    7914:	14c00017 	ldw	r19,0(r2)
    7918:	002d883a 	mov	r22,zero
    791c:	80800094 	ori	r2,r16,2
    7920:	2002ca16 	blt	r4,zero,844c <___vfprintf_internal_r+0xe88>
    7924:	00bfdfc4 	movi	r2,-129
    7928:	80a4703a 	and	r18,r16,r2
    792c:	d8c02e15 	stw	r3,184(sp)
    7930:	94800094 	ori	r18,r18,2
    7934:	9802b41e 	bne	r19,zero,8408 <___vfprintf_internal_r+0xe44>
    7938:	01400074 	movhi	r5,1
    793c:	294c4904 	addi	r5,r5,12580
    7940:	d9403915 	stw	r5,228(sp)
    7944:	04401e04 	movi	r17,120
    7948:	d8802a17 	ldw	r2,168(sp)
    794c:	0039883a 	mov	fp,zero
    7950:	1001fa26 	beq	r2,zero,813c <___vfprintf_internal_r+0xb78>
    7954:	0027883a 	mov	r19,zero
    7958:	002d883a 	mov	r22,zero
    795c:	00021906 	br	81c4 <___vfprintf_internal_r+0xc00>
    7960:	d9002d17 	ldw	r4,180(sp)
    7964:	b80b883a 	mov	r5,r23
    7968:	00099d80 	call	99d8 <__swsetup_r>
    796c:	1005dc1e 	bne	r2,zero,90e0 <___vfprintf_internal_r+0x1b1c>
    7970:	b880030b 	ldhu	r2,12(r23)
    7974:	00c00284 	movi	r3,10
    7978:	1080068c 	andi	r2,r2,26
    797c:	10ff3a1e 	bne	r2,r3,7668 <__alt_data_end+0xfffe7668>
    7980:	b880038f 	ldh	r2,14(r23)
    7984:	103f3816 	blt	r2,zero,7668 <__alt_data_end+0xfffe7668>
    7988:	d9c02e17 	ldw	r7,184(sp)
    798c:	d9002d17 	ldw	r4,180(sp)
    7990:	a80d883a 	mov	r6,r21
    7994:	b80b883a 	mov	r5,r23
    7998:	00098bc0 	call	98bc <__sbprintf>
    799c:	00001106 	br	79e4 <___vfprintf_internal_r+0x420>
    79a0:	d9002d17 	ldw	r4,180(sp)
    79a4:	d9801e04 	addi	r6,sp,120
    79a8:	b80b883a 	mov	r5,r23
    79ac:	000d9800 	call	d980 <__sprint_r>
    79b0:	1000081e 	bne	r2,zero,79d4 <___vfprintf_internal_r+0x410>
    79b4:	da000404 	addi	r8,sp,16
    79b8:	003f5106 	br	7700 <__alt_data_end+0xfffe7700>
    79bc:	d8802017 	ldw	r2,128(sp)
    79c0:	10000426 	beq	r2,zero,79d4 <___vfprintf_internal_r+0x410>
    79c4:	d9002d17 	ldw	r4,180(sp)
    79c8:	d9801e04 	addi	r6,sp,120
    79cc:	b80b883a 	mov	r5,r23
    79d0:	000d9800 	call	d980 <__sprint_r>
    79d4:	b880030b 	ldhu	r2,12(r23)
    79d8:	1080100c 	andi	r2,r2,64
    79dc:	1005c01e 	bne	r2,zero,90e0 <___vfprintf_internal_r+0x1b1c>
    79e0:	d8802f17 	ldw	r2,188(sp)
    79e4:	dfc04717 	ldw	ra,284(sp)
    79e8:	df004617 	ldw	fp,280(sp)
    79ec:	ddc04517 	ldw	r23,276(sp)
    79f0:	dd804417 	ldw	r22,272(sp)
    79f4:	dd404317 	ldw	r21,268(sp)
    79f8:	dd004217 	ldw	r20,264(sp)
    79fc:	dcc04117 	ldw	r19,260(sp)
    7a00:	dc804017 	ldw	r18,256(sp)
    7a04:	dc403f17 	ldw	r17,252(sp)
    7a08:	dc003e17 	ldw	r16,248(sp)
    7a0c:	dec04804 	addi	sp,sp,288
    7a10:	f800283a 	ret
    7a14:	d9002d17 	ldw	r4,180(sp)
    7a18:	00053700 	call	5370 <__sinit>
    7a1c:	003f0206 	br	7628 <__alt_data_end+0xfffe7628>
    7a20:	d9002e17 	ldw	r4,184(sp)
    7a24:	d9402e17 	ldw	r5,184(sp)
    7a28:	21000017 	ldw	r4,0(r4)
    7a2c:	28800104 	addi	r2,r5,4
    7a30:	d9003115 	stw	r4,196(sp)
    7a34:	203fa716 	blt	r4,zero,78d4 <__alt_data_end+0xfffe78d4>
    7a38:	d8802e15 	stw	r2,184(sp)
    7a3c:	ac400007 	ldb	r17,0(r21)
    7a40:	003f4206 	br	774c <__alt_data_end+0xfffe774c>
    7a44:	ac400007 	ldb	r17,0(r21)
    7a48:	01000a84 	movi	r4,42
    7a4c:	a8c00044 	addi	r3,r21,1
    7a50:	89075826 	beq	r17,r4,97b4 <___vfprintf_internal_r+0x21f0>
    7a54:	8cbff404 	addi	r18,r17,-48
    7a58:	b486ae36 	bltu	r22,r18,9514 <___vfprintf_internal_r+0x1f50>
    7a5c:	0009883a 	mov	r4,zero
    7a60:	1823883a 	mov	r17,r3
    7a64:	01400284 	movi	r5,10
    7a68:	0001a300 	call	1a30 <__mulsi3>
    7a6c:	88c00007 	ldb	r3,0(r17)
    7a70:	1489883a 	add	r4,r2,r18
    7a74:	8d400044 	addi	r21,r17,1
    7a78:	1cbff404 	addi	r18,r3,-48
    7a7c:	a823883a 	mov	r17,r21
    7a80:	b4bff82e 	bgeu	r22,r18,7a64 <__alt_data_end+0xfffe7a64>
    7a84:	1823883a 	mov	r17,r3
    7a88:	2005f616 	blt	r4,zero,9264 <___vfprintf_internal_r+0x1ca0>
    7a8c:	d9002a15 	stw	r4,168(sp)
    7a90:	003f2f06 	br	7750 <__alt_data_end+0xfffe7750>
    7a94:	84002014 	ori	r16,r16,128
    7a98:	ac400007 	ldb	r17,0(r21)
    7a9c:	003f2b06 	br	774c <__alt_data_end+0xfffe774c>
    7aa0:	8cbff404 	addi	r18,r17,-48
    7aa4:	d8003115 	stw	zero,196(sp)
    7aa8:	0009883a 	mov	r4,zero
    7aac:	a823883a 	mov	r17,r21
    7ab0:	01400284 	movi	r5,10
    7ab4:	0001a300 	call	1a30 <__mulsi3>
    7ab8:	88c00007 	ldb	r3,0(r17)
    7abc:	9089883a 	add	r4,r18,r2
    7ac0:	ad400044 	addi	r21,r21,1
    7ac4:	1cbff404 	addi	r18,r3,-48
    7ac8:	a823883a 	mov	r17,r21
    7acc:	b4bff82e 	bgeu	r22,r18,7ab0 <__alt_data_end+0xfffe7ab0>
    7ad0:	1823883a 	mov	r17,r3
    7ad4:	d9003115 	stw	r4,196(sp)
    7ad8:	003f1d06 	br	7750 <__alt_data_end+0xfffe7750>
    7adc:	8025883a 	mov	r18,r16
    7ae0:	dc002903 	ldbu	r16,164(sp)
    7ae4:	e011883a 	mov	r8,fp
    7ae8:	84003fcc 	andi	r16,r16,255
    7aec:	8007531e 	bne	r16,zero,983c <___vfprintf_internal_r+0x2278>
    7af0:	94800414 	ori	r18,r18,16
    7af4:	9080080c 	andi	r2,r18,32
    7af8:	1003a326 	beq	r2,zero,8988 <___vfprintf_internal_r+0x13c4>
    7afc:	d9002e17 	ldw	r4,184(sp)
    7b00:	20800117 	ldw	r2,4(r4)
    7b04:	24c00017 	ldw	r19,0(r4)
    7b08:	21000204 	addi	r4,r4,8
    7b0c:	d9002e15 	stw	r4,184(sp)
    7b10:	102d883a 	mov	r22,r2
    7b14:	10047316 	blt	r2,zero,8ce4 <___vfprintf_internal_r+0x1720>
    7b18:	d9002a17 	ldw	r4,168(sp)
    7b1c:	df002783 	ldbu	fp,158(sp)
    7b20:	2003e416 	blt	r4,zero,8ab4 <___vfprintf_internal_r+0x14f0>
    7b24:	00ffdfc4 	movi	r3,-129
    7b28:	9d84b03a 	or	r2,r19,r22
    7b2c:	90e4703a 	and	r18,r18,r3
    7b30:	10018026 	beq	r2,zero,8134 <___vfprintf_internal_r+0xb70>
    7b34:	b003ab26 	beq	r22,zero,89e4 <___vfprintf_internal_r+0x1420>
    7b38:	dc402915 	stw	r17,164(sp)
    7b3c:	dc001e04 	addi	r16,sp,120
    7b40:	b023883a 	mov	r17,r22
    7b44:	402d883a 	mov	r22,r8
    7b48:	9809883a 	mov	r4,r19
    7b4c:	880b883a 	mov	r5,r17
    7b50:	01800284 	movi	r6,10
    7b54:	000f883a 	mov	r7,zero
    7b58:	000fca80 	call	fca8 <__umoddi3>
    7b5c:	10800c04 	addi	r2,r2,48
    7b60:	843fffc4 	addi	r16,r16,-1
    7b64:	9809883a 	mov	r4,r19
    7b68:	880b883a 	mov	r5,r17
    7b6c:	80800005 	stb	r2,0(r16)
    7b70:	01800284 	movi	r6,10
    7b74:	000f883a 	mov	r7,zero
    7b78:	000f6ac0 	call	f6ac <__udivdi3>
    7b7c:	1027883a 	mov	r19,r2
    7b80:	10c4b03a 	or	r2,r2,r3
    7b84:	1823883a 	mov	r17,r3
    7b88:	103fef1e 	bne	r2,zero,7b48 <__alt_data_end+0xfffe7b48>
    7b8c:	d8c02817 	ldw	r3,160(sp)
    7b90:	dc402917 	ldw	r17,164(sp)
    7b94:	b011883a 	mov	r8,r22
    7b98:	1c07c83a 	sub	r3,r3,r16
    7b9c:	d8c02b15 	stw	r3,172(sp)
    7ba0:	00005f06 	br	7d20 <___vfprintf_internal_r+0x75c>
    7ba4:	8025883a 	mov	r18,r16
    7ba8:	dc002903 	ldbu	r16,164(sp)
    7bac:	e011883a 	mov	r8,fp
    7bb0:	84003fcc 	andi	r16,r16,255
    7bb4:	80071e1e 	bne	r16,zero,9830 <___vfprintf_internal_r+0x226c>
    7bb8:	9080020c 	andi	r2,r18,8
    7bbc:	1004af26 	beq	r2,zero,8e7c <___vfprintf_internal_r+0x18b8>
    7bc0:	d9002e17 	ldw	r4,184(sp)
    7bc4:	d9402e17 	ldw	r5,184(sp)
    7bc8:	d8802e17 	ldw	r2,184(sp)
    7bcc:	21000017 	ldw	r4,0(r4)
    7bd0:	29400117 	ldw	r5,4(r5)
    7bd4:	10800204 	addi	r2,r2,8
    7bd8:	d9003615 	stw	r4,216(sp)
    7bdc:	d9403815 	stw	r5,224(sp)
    7be0:	d8802e15 	stw	r2,184(sp)
    7be4:	d9003617 	ldw	r4,216(sp)
    7be8:	d9403817 	ldw	r5,224(sp)
    7bec:	da003d15 	stw	r8,244(sp)
    7bf0:	04000044 	movi	r16,1
    7bf4:	000d7340 	call	d734 <__fpclassifyd>
    7bf8:	da003d17 	ldw	r8,244(sp)
    7bfc:	1404441e 	bne	r2,r16,8d10 <___vfprintf_internal_r+0x174c>
    7c00:	d9003617 	ldw	r4,216(sp)
    7c04:	d9403817 	ldw	r5,224(sp)
    7c08:	000d883a 	mov	r6,zero
    7c0c:	000f883a 	mov	r7,zero
    7c10:	00102f40 	call	102f4 <__ledf2>
    7c14:	da003d17 	ldw	r8,244(sp)
    7c18:	1005e316 	blt	r2,zero,93a8 <___vfprintf_internal_r+0x1de4>
    7c1c:	df002783 	ldbu	fp,158(sp)
    7c20:	008011c4 	movi	r2,71
    7c24:	1445580e 	bge	r2,r17,9188 <___vfprintf_internal_r+0x1bc4>
    7c28:	04000074 	movhi	r16,1
    7c2c:	840c4104 	addi	r16,r16,12548
    7c30:	00c000c4 	movi	r3,3
    7c34:	00bfdfc4 	movi	r2,-129
    7c38:	d8c02915 	stw	r3,164(sp)
    7c3c:	90a4703a 	and	r18,r18,r2
    7c40:	d8c02b15 	stw	r3,172(sp)
    7c44:	d8002a15 	stw	zero,168(sp)
    7c48:	d8003215 	stw	zero,200(sp)
    7c4c:	00003a06 	br	7d38 <___vfprintf_internal_r+0x774>
    7c50:	84000214 	ori	r16,r16,8
    7c54:	ac400007 	ldb	r17,0(r21)
    7c58:	003ebc06 	br	774c <__alt_data_end+0xfffe774c>
    7c5c:	8025883a 	mov	r18,r16
    7c60:	dc002903 	ldbu	r16,164(sp)
    7c64:	e011883a 	mov	r8,fp
    7c68:	84003fcc 	andi	r16,r16,255
    7c6c:	8007001e 	bne	r16,zero,9870 <___vfprintf_internal_r+0x22ac>
    7c70:	94800414 	ori	r18,r18,16
    7c74:	9080080c 	andi	r2,r18,32
    7c78:	1002fa26 	beq	r2,zero,8864 <___vfprintf_internal_r+0x12a0>
    7c7c:	d9002e17 	ldw	r4,184(sp)
    7c80:	d9402a17 	ldw	r5,168(sp)
    7c84:	d8002785 	stb	zero,158(sp)
    7c88:	20800204 	addi	r2,r4,8
    7c8c:	24c00017 	ldw	r19,0(r4)
    7c90:	25800117 	ldw	r22,4(r4)
    7c94:	2804b116 	blt	r5,zero,8f5c <___vfprintf_internal_r+0x1998>
    7c98:	013fdfc4 	movi	r4,-129
    7c9c:	9d86b03a 	or	r3,r19,r22
    7ca0:	d8802e15 	stw	r2,184(sp)
    7ca4:	9124703a 	and	r18,r18,r4
    7ca8:	1802fb1e 	bne	r3,zero,8898 <___vfprintf_internal_r+0x12d4>
    7cac:	d8c02a17 	ldw	r3,168(sp)
    7cb0:	0039883a 	mov	fp,zero
    7cb4:	1805e526 	beq	r3,zero,944c <___vfprintf_internal_r+0x1e88>
    7cb8:	0027883a 	mov	r19,zero
    7cbc:	002d883a 	mov	r22,zero
    7cc0:	dc001e04 	addi	r16,sp,120
    7cc4:	9806d0fa 	srli	r3,r19,3
    7cc8:	b008977a 	slli	r4,r22,29
    7ccc:	b02cd0fa 	srli	r22,r22,3
    7cd0:	9cc001cc 	andi	r19,r19,7
    7cd4:	98800c04 	addi	r2,r19,48
    7cd8:	843fffc4 	addi	r16,r16,-1
    7cdc:	20e6b03a 	or	r19,r4,r3
    7ce0:	80800005 	stb	r2,0(r16)
    7ce4:	9d86b03a 	or	r3,r19,r22
    7ce8:	183ff61e 	bne	r3,zero,7cc4 <__alt_data_end+0xfffe7cc4>
    7cec:	90c0004c 	andi	r3,r18,1
    7cf0:	18014126 	beq	r3,zero,81f8 <___vfprintf_internal_r+0xc34>
    7cf4:	10803fcc 	andi	r2,r2,255
    7cf8:	1080201c 	xori	r2,r2,128
    7cfc:	10bfe004 	addi	r2,r2,-128
    7d00:	00c00c04 	movi	r3,48
    7d04:	10c13c26 	beq	r2,r3,81f8 <___vfprintf_internal_r+0xc34>
    7d08:	80ffffc5 	stb	r3,-1(r16)
    7d0c:	d8c02817 	ldw	r3,160(sp)
    7d10:	80bfffc4 	addi	r2,r16,-1
    7d14:	1021883a 	mov	r16,r2
    7d18:	1887c83a 	sub	r3,r3,r2
    7d1c:	d8c02b15 	stw	r3,172(sp)
    7d20:	d8802b17 	ldw	r2,172(sp)
    7d24:	d9002a17 	ldw	r4,168(sp)
    7d28:	1100010e 	bge	r2,r4,7d30 <___vfprintf_internal_r+0x76c>
    7d2c:	2005883a 	mov	r2,r4
    7d30:	d8802915 	stw	r2,164(sp)
    7d34:	d8003215 	stw	zero,200(sp)
    7d38:	e7003fcc 	andi	fp,fp,255
    7d3c:	e700201c 	xori	fp,fp,128
    7d40:	e73fe004 	addi	fp,fp,-128
    7d44:	e0000326 	beq	fp,zero,7d54 <___vfprintf_internal_r+0x790>
    7d48:	d8c02917 	ldw	r3,164(sp)
    7d4c:	18c00044 	addi	r3,r3,1
    7d50:	d8c02915 	stw	r3,164(sp)
    7d54:	90c0008c 	andi	r3,r18,2
    7d58:	d8c02c15 	stw	r3,176(sp)
    7d5c:	18000326 	beq	r3,zero,7d6c <___vfprintf_internal_r+0x7a8>
    7d60:	d8c02917 	ldw	r3,164(sp)
    7d64:	18c00084 	addi	r3,r3,2
    7d68:	d8c02915 	stw	r3,164(sp)
    7d6c:	90c0210c 	andi	r3,r18,132
    7d70:	d8c03015 	stw	r3,192(sp)
    7d74:	1801c51e 	bne	r3,zero,848c <___vfprintf_internal_r+0xec8>
    7d78:	d9003117 	ldw	r4,196(sp)
    7d7c:	d8c02917 	ldw	r3,164(sp)
    7d80:	20e7c83a 	sub	r19,r4,r3
    7d84:	04c1c10e 	bge	zero,r19,848c <___vfprintf_internal_r+0xec8>
    7d88:	02400404 	movi	r9,16
    7d8c:	d8c02017 	ldw	r3,128(sp)
    7d90:	d8801f17 	ldw	r2,124(sp)
    7d94:	4cc52f0e 	bge	r9,r19,9254 <___vfprintf_internal_r+0x1c90>
    7d98:	01400074 	movhi	r5,1
    7d9c:	294c5484 	addi	r5,r5,12626
    7da0:	dc403b15 	stw	r17,236(sp)
    7da4:	d9403515 	stw	r5,212(sp)
    7da8:	9823883a 	mov	r17,r19
    7dac:	482d883a 	mov	r22,r9
    7db0:	9027883a 	mov	r19,r18
    7db4:	070001c4 	movi	fp,7
    7db8:	8025883a 	mov	r18,r16
    7dbc:	dc002d17 	ldw	r16,180(sp)
    7dc0:	00000306 	br	7dd0 <___vfprintf_internal_r+0x80c>
    7dc4:	8c7ffc04 	addi	r17,r17,-16
    7dc8:	42000204 	addi	r8,r8,8
    7dcc:	b440130e 	bge	r22,r17,7e1c <___vfprintf_internal_r+0x858>
    7dd0:	01000074 	movhi	r4,1
    7dd4:	18c00404 	addi	r3,r3,16
    7dd8:	10800044 	addi	r2,r2,1
    7ddc:	210c5484 	addi	r4,r4,12626
    7de0:	41000015 	stw	r4,0(r8)
    7de4:	45800115 	stw	r22,4(r8)
    7de8:	d8c02015 	stw	r3,128(sp)
    7dec:	d8801f15 	stw	r2,124(sp)
    7df0:	e0bff40e 	bge	fp,r2,7dc4 <__alt_data_end+0xfffe7dc4>
    7df4:	d9801e04 	addi	r6,sp,120
    7df8:	b80b883a 	mov	r5,r23
    7dfc:	8009883a 	mov	r4,r16
    7e00:	000d9800 	call	d980 <__sprint_r>
    7e04:	103ef31e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    7e08:	8c7ffc04 	addi	r17,r17,-16
    7e0c:	d8c02017 	ldw	r3,128(sp)
    7e10:	d8801f17 	ldw	r2,124(sp)
    7e14:	da000404 	addi	r8,sp,16
    7e18:	b47fed16 	blt	r22,r17,7dd0 <__alt_data_end+0xfffe7dd0>
    7e1c:	9021883a 	mov	r16,r18
    7e20:	9825883a 	mov	r18,r19
    7e24:	8827883a 	mov	r19,r17
    7e28:	dc403b17 	ldw	r17,236(sp)
    7e2c:	d9403517 	ldw	r5,212(sp)
    7e30:	98c7883a 	add	r3,r19,r3
    7e34:	10800044 	addi	r2,r2,1
    7e38:	41400015 	stw	r5,0(r8)
    7e3c:	44c00115 	stw	r19,4(r8)
    7e40:	d8c02015 	stw	r3,128(sp)
    7e44:	d8801f15 	stw	r2,124(sp)
    7e48:	010001c4 	movi	r4,7
    7e4c:	2082c516 	blt	r4,r2,8964 <___vfprintf_internal_r+0x13a0>
    7e50:	df002787 	ldb	fp,158(sp)
    7e54:	42000204 	addi	r8,r8,8
    7e58:	e0000c26 	beq	fp,zero,7e8c <___vfprintf_internal_r+0x8c8>
    7e5c:	d8801f17 	ldw	r2,124(sp)
    7e60:	d9002784 	addi	r4,sp,158
    7e64:	18c00044 	addi	r3,r3,1
    7e68:	10800044 	addi	r2,r2,1
    7e6c:	41000015 	stw	r4,0(r8)
    7e70:	01000044 	movi	r4,1
    7e74:	41000115 	stw	r4,4(r8)
    7e78:	d8c02015 	stw	r3,128(sp)
    7e7c:	d8801f15 	stw	r2,124(sp)
    7e80:	010001c4 	movi	r4,7
    7e84:	20825e16 	blt	r4,r2,8800 <___vfprintf_internal_r+0x123c>
    7e88:	42000204 	addi	r8,r8,8
    7e8c:	d8802c17 	ldw	r2,176(sp)
    7e90:	10000c26 	beq	r2,zero,7ec4 <___vfprintf_internal_r+0x900>
    7e94:	d8801f17 	ldw	r2,124(sp)
    7e98:	d9002704 	addi	r4,sp,156
    7e9c:	18c00084 	addi	r3,r3,2
    7ea0:	10800044 	addi	r2,r2,1
    7ea4:	41000015 	stw	r4,0(r8)
    7ea8:	01000084 	movi	r4,2
    7eac:	41000115 	stw	r4,4(r8)
    7eb0:	d8c02015 	stw	r3,128(sp)
    7eb4:	d8801f15 	stw	r2,124(sp)
    7eb8:	010001c4 	movi	r4,7
    7ebc:	20825816 	blt	r4,r2,8820 <___vfprintf_internal_r+0x125c>
    7ec0:	42000204 	addi	r8,r8,8
    7ec4:	d9003017 	ldw	r4,192(sp)
    7ec8:	00802004 	movi	r2,128
    7ecc:	2081bb26 	beq	r4,r2,85bc <___vfprintf_internal_r+0xff8>
    7ed0:	d9402a17 	ldw	r5,168(sp)
    7ed4:	d8802b17 	ldw	r2,172(sp)
    7ed8:	28adc83a 	sub	r22,r5,r2
    7edc:	0580310e 	bge	zero,r22,7fa4 <___vfprintf_internal_r+0x9e0>
    7ee0:	07000404 	movi	fp,16
    7ee4:	d8801f17 	ldw	r2,124(sp)
    7ee8:	e584360e 	bge	fp,r22,8fc4 <___vfprintf_internal_r+0x1a00>
    7eec:	01400074 	movhi	r5,1
    7ef0:	294c5084 	addi	r5,r5,12610
    7ef4:	dc402a15 	stw	r17,168(sp)
    7ef8:	d9402c15 	stw	r5,176(sp)
    7efc:	b023883a 	mov	r17,r22
    7f00:	04c001c4 	movi	r19,7
    7f04:	a82d883a 	mov	r22,r21
    7f08:	902b883a 	mov	r21,r18
    7f0c:	8025883a 	mov	r18,r16
    7f10:	dc002d17 	ldw	r16,180(sp)
    7f14:	00000306 	br	7f24 <___vfprintf_internal_r+0x960>
    7f18:	8c7ffc04 	addi	r17,r17,-16
    7f1c:	42000204 	addi	r8,r8,8
    7f20:	e440110e 	bge	fp,r17,7f68 <___vfprintf_internal_r+0x9a4>
    7f24:	18c00404 	addi	r3,r3,16
    7f28:	10800044 	addi	r2,r2,1
    7f2c:	45000015 	stw	r20,0(r8)
    7f30:	47000115 	stw	fp,4(r8)
    7f34:	d8c02015 	stw	r3,128(sp)
    7f38:	d8801f15 	stw	r2,124(sp)
    7f3c:	98bff60e 	bge	r19,r2,7f18 <__alt_data_end+0xfffe7f18>
    7f40:	d9801e04 	addi	r6,sp,120
    7f44:	b80b883a 	mov	r5,r23
    7f48:	8009883a 	mov	r4,r16
    7f4c:	000d9800 	call	d980 <__sprint_r>
    7f50:	103ea01e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    7f54:	8c7ffc04 	addi	r17,r17,-16
    7f58:	d8c02017 	ldw	r3,128(sp)
    7f5c:	d8801f17 	ldw	r2,124(sp)
    7f60:	da000404 	addi	r8,sp,16
    7f64:	e47fef16 	blt	fp,r17,7f24 <__alt_data_end+0xfffe7f24>
    7f68:	9021883a 	mov	r16,r18
    7f6c:	a825883a 	mov	r18,r21
    7f70:	b02b883a 	mov	r21,r22
    7f74:	882d883a 	mov	r22,r17
    7f78:	dc402a17 	ldw	r17,168(sp)
    7f7c:	d9002c17 	ldw	r4,176(sp)
    7f80:	1d87883a 	add	r3,r3,r22
    7f84:	10800044 	addi	r2,r2,1
    7f88:	41000015 	stw	r4,0(r8)
    7f8c:	45800115 	stw	r22,4(r8)
    7f90:	d8c02015 	stw	r3,128(sp)
    7f94:	d8801f15 	stw	r2,124(sp)
    7f98:	010001c4 	movi	r4,7
    7f9c:	20821016 	blt	r4,r2,87e0 <___vfprintf_internal_r+0x121c>
    7fa0:	42000204 	addi	r8,r8,8
    7fa4:	9080400c 	andi	r2,r18,256
    7fa8:	10013a1e 	bne	r2,zero,8494 <___vfprintf_internal_r+0xed0>
    7fac:	d9402b17 	ldw	r5,172(sp)
    7fb0:	d8801f17 	ldw	r2,124(sp)
    7fb4:	44000015 	stw	r16,0(r8)
    7fb8:	1947883a 	add	r3,r3,r5
    7fbc:	10800044 	addi	r2,r2,1
    7fc0:	41400115 	stw	r5,4(r8)
    7fc4:	d8c02015 	stw	r3,128(sp)
    7fc8:	d8801f15 	stw	r2,124(sp)
    7fcc:	010001c4 	movi	r4,7
    7fd0:	2081f516 	blt	r4,r2,87a8 <___vfprintf_internal_r+0x11e4>
    7fd4:	42000204 	addi	r8,r8,8
    7fd8:	9480010c 	andi	r18,r18,4
    7fdc:	90003226 	beq	r18,zero,80a8 <___vfprintf_internal_r+0xae4>
    7fe0:	d9403117 	ldw	r5,196(sp)
    7fe4:	d8802917 	ldw	r2,164(sp)
    7fe8:	28a1c83a 	sub	r16,r5,r2
    7fec:	04002e0e 	bge	zero,r16,80a8 <___vfprintf_internal_r+0xae4>
    7ff0:	04400404 	movi	r17,16
    7ff4:	d8801f17 	ldw	r2,124(sp)
    7ff8:	8c04c40e 	bge	r17,r16,930c <___vfprintf_internal_r+0x1d48>
    7ffc:	01400074 	movhi	r5,1
    8000:	294c5484 	addi	r5,r5,12626
    8004:	d9403515 	stw	r5,212(sp)
    8008:	048001c4 	movi	r18,7
    800c:	dcc02d17 	ldw	r19,180(sp)
    8010:	00000306 	br	8020 <___vfprintf_internal_r+0xa5c>
    8014:	843ffc04 	addi	r16,r16,-16
    8018:	42000204 	addi	r8,r8,8
    801c:	8c00130e 	bge	r17,r16,806c <___vfprintf_internal_r+0xaa8>
    8020:	01000074 	movhi	r4,1
    8024:	18c00404 	addi	r3,r3,16
    8028:	10800044 	addi	r2,r2,1
    802c:	210c5484 	addi	r4,r4,12626
    8030:	41000015 	stw	r4,0(r8)
    8034:	44400115 	stw	r17,4(r8)
    8038:	d8c02015 	stw	r3,128(sp)
    803c:	d8801f15 	stw	r2,124(sp)
    8040:	90bff40e 	bge	r18,r2,8014 <__alt_data_end+0xfffe8014>
    8044:	d9801e04 	addi	r6,sp,120
    8048:	b80b883a 	mov	r5,r23
    804c:	9809883a 	mov	r4,r19
    8050:	000d9800 	call	d980 <__sprint_r>
    8054:	103e5f1e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8058:	843ffc04 	addi	r16,r16,-16
    805c:	d8c02017 	ldw	r3,128(sp)
    8060:	d8801f17 	ldw	r2,124(sp)
    8064:	da000404 	addi	r8,sp,16
    8068:	8c3fed16 	blt	r17,r16,8020 <__alt_data_end+0xfffe8020>
    806c:	d9403517 	ldw	r5,212(sp)
    8070:	1c07883a 	add	r3,r3,r16
    8074:	10800044 	addi	r2,r2,1
    8078:	41400015 	stw	r5,0(r8)
    807c:	44000115 	stw	r16,4(r8)
    8080:	d8c02015 	stw	r3,128(sp)
    8084:	d8801f15 	stw	r2,124(sp)
    8088:	010001c4 	movi	r4,7
    808c:	2080060e 	bge	r4,r2,80a8 <___vfprintf_internal_r+0xae4>
    8090:	d9002d17 	ldw	r4,180(sp)
    8094:	d9801e04 	addi	r6,sp,120
    8098:	b80b883a 	mov	r5,r23
    809c:	000d9800 	call	d980 <__sprint_r>
    80a0:	103e4c1e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    80a4:	d8c02017 	ldw	r3,128(sp)
    80a8:	d8803117 	ldw	r2,196(sp)
    80ac:	d9002917 	ldw	r4,164(sp)
    80b0:	1100010e 	bge	r2,r4,80b8 <___vfprintf_internal_r+0xaf4>
    80b4:	2005883a 	mov	r2,r4
    80b8:	d9402f17 	ldw	r5,188(sp)
    80bc:	288b883a 	add	r5,r5,r2
    80c0:	d9402f15 	stw	r5,188(sp)
    80c4:	1801c01e 	bne	r3,zero,87c8 <___vfprintf_internal_r+0x1204>
    80c8:	a8800007 	ldb	r2,0(r21)
    80cc:	d8001f15 	stw	zero,124(sp)
    80d0:	da000404 	addi	r8,sp,16
    80d4:	103d751e 	bne	r2,zero,76ac <__alt_data_end+0xfffe76ac>
    80d8:	a823883a 	mov	r17,r21
    80dc:	003d8b06 	br	770c <__alt_data_end+0xfffe770c>
    80e0:	8025883a 	mov	r18,r16
    80e4:	dc002903 	ldbu	r16,164(sp)
    80e8:	e011883a 	mov	r8,fp
    80ec:	84003fcc 	andi	r16,r16,255
    80f0:	8005e51e 	bne	r16,zero,9888 <___vfprintf_internal_r+0x22c4>
    80f4:	94800414 	ori	r18,r18,16
    80f8:	9080080c 	andi	r2,r18,32
    80fc:	10022b26 	beq	r2,zero,89ac <___vfprintf_internal_r+0x13e8>
    8100:	d9002e17 	ldw	r4,184(sp)
    8104:	d9402a17 	ldw	r5,168(sp)
    8108:	d8002785 	stb	zero,158(sp)
    810c:	20c00204 	addi	r3,r4,8
    8110:	24c00017 	ldw	r19,0(r4)
    8114:	25800117 	ldw	r22,4(r4)
    8118:	28042e16 	blt	r5,zero,91d4 <___vfprintf_internal_r+0x1c10>
    811c:	013fdfc4 	movi	r4,-129
    8120:	9d84b03a 	or	r2,r19,r22
    8124:	d8c02e15 	stw	r3,184(sp)
    8128:	9124703a 	and	r18,r18,r4
    812c:	0039883a 	mov	fp,zero
    8130:	103e801e 	bne	r2,zero,7b34 <__alt_data_end+0xfffe7b34>
    8134:	d9002a17 	ldw	r4,168(sp)
    8138:	2002e01e 	bne	r4,zero,8cbc <___vfprintf_internal_r+0x16f8>
    813c:	d8002a15 	stw	zero,168(sp)
    8140:	d8002b15 	stw	zero,172(sp)
    8144:	dc001e04 	addi	r16,sp,120
    8148:	003ef506 	br	7d20 <__alt_data_end+0xfffe7d20>
    814c:	8025883a 	mov	r18,r16
    8150:	dc002903 	ldbu	r16,164(sp)
    8154:	e011883a 	mov	r8,fp
    8158:	84003fcc 	andi	r16,r16,255
    815c:	8005ba1e 	bne	r16,zero,9848 <___vfprintf_internal_r+0x2284>
    8160:	01000074 	movhi	r4,1
    8164:	210c4404 	addi	r4,r4,12560
    8168:	d9003915 	stw	r4,228(sp)
    816c:	9080080c 	andi	r2,r18,32
    8170:	10006126 	beq	r2,zero,82f8 <___vfprintf_internal_r+0xd34>
    8174:	d9402e17 	ldw	r5,184(sp)
    8178:	2cc00017 	ldw	r19,0(r5)
    817c:	2d800117 	ldw	r22,4(r5)
    8180:	29400204 	addi	r5,r5,8
    8184:	d9402e15 	stw	r5,184(sp)
    8188:	9080004c 	andi	r2,r18,1
    818c:	1001ac26 	beq	r2,zero,8840 <___vfprintf_internal_r+0x127c>
    8190:	9d84b03a 	or	r2,r19,r22
    8194:	10038526 	beq	r2,zero,8fac <___vfprintf_internal_r+0x19e8>
    8198:	d8c02a17 	ldw	r3,168(sp)
    819c:	00800c04 	movi	r2,48
    81a0:	d8802705 	stb	r2,156(sp)
    81a4:	dc402745 	stb	r17,157(sp)
    81a8:	d8002785 	stb	zero,158(sp)
    81ac:	90800094 	ori	r2,r18,2
    81b0:	18047916 	blt	r3,zero,9398 <___vfprintf_internal_r+0x1dd4>
    81b4:	00bfdfc4 	movi	r2,-129
    81b8:	90a4703a 	and	r18,r18,r2
    81bc:	94800094 	ori	r18,r18,2
    81c0:	0039883a 	mov	fp,zero
    81c4:	d9003917 	ldw	r4,228(sp)
    81c8:	dc001e04 	addi	r16,sp,120
    81cc:	988003cc 	andi	r2,r19,15
    81d0:	b006973a 	slli	r3,r22,28
    81d4:	2085883a 	add	r2,r4,r2
    81d8:	9826d13a 	srli	r19,r19,4
    81dc:	10800003 	ldbu	r2,0(r2)
    81e0:	b02cd13a 	srli	r22,r22,4
    81e4:	843fffc4 	addi	r16,r16,-1
    81e8:	1ce6b03a 	or	r19,r3,r19
    81ec:	80800005 	stb	r2,0(r16)
    81f0:	9d84b03a 	or	r2,r19,r22
    81f4:	103ff51e 	bne	r2,zero,81cc <__alt_data_end+0xfffe81cc>
    81f8:	d8c02817 	ldw	r3,160(sp)
    81fc:	1c07c83a 	sub	r3,r3,r16
    8200:	d8c02b15 	stw	r3,172(sp)
    8204:	003ec606 	br	7d20 <__alt_data_end+0xfffe7d20>
    8208:	8025883a 	mov	r18,r16
    820c:	dc002903 	ldbu	r16,164(sp)
    8210:	e011883a 	mov	r8,fp
    8214:	84003fcc 	andi	r16,r16,255
    8218:	803e9626 	beq	r16,zero,7c74 <__alt_data_end+0xfffe7c74>
    821c:	d8c02b03 	ldbu	r3,172(sp)
    8220:	d8c02785 	stb	r3,158(sp)
    8224:	003e9306 	br	7c74 <__alt_data_end+0xfffe7c74>
    8228:	00c00044 	movi	r3,1
    822c:	d8c02905 	stb	r3,164(sp)
    8230:	00c00ac4 	movi	r3,43
    8234:	d8c02b05 	stb	r3,172(sp)
    8238:	ac400007 	ldb	r17,0(r21)
    823c:	003d4306 	br	774c <__alt_data_end+0xfffe774c>
    8240:	84000814 	ori	r16,r16,32
    8244:	ac400007 	ldb	r17,0(r21)
    8248:	003d4006 	br	774c <__alt_data_end+0xfffe774c>
    824c:	d8802e17 	ldw	r2,184(sp)
    8250:	8025883a 	mov	r18,r16
    8254:	d8002785 	stb	zero,158(sp)
    8258:	14000017 	ldw	r16,0(r2)
    825c:	e011883a 	mov	r8,fp
    8260:	14c00104 	addi	r19,r2,4
    8264:	80042d26 	beq	r16,zero,931c <___vfprintf_internal_r+0x1d58>
    8268:	d8c02a17 	ldw	r3,168(sp)
    826c:	1803e416 	blt	r3,zero,9200 <___vfprintf_internal_r+0x1c3c>
    8270:	180d883a 	mov	r6,r3
    8274:	000b883a 	mov	r5,zero
    8278:	8009883a 	mov	r4,r16
    827c:	df003d15 	stw	fp,244(sp)
    8280:	000bd100 	call	bd10 <memchr>
    8284:	da003d17 	ldw	r8,244(sp)
    8288:	10046826 	beq	r2,zero,942c <___vfprintf_internal_r+0x1e68>
    828c:	1405c83a 	sub	r2,r2,r16
    8290:	d8802b15 	stw	r2,172(sp)
    8294:	1003e016 	blt	r2,zero,9218 <___vfprintf_internal_r+0x1c54>
    8298:	df002783 	ldbu	fp,158(sp)
    829c:	d8802915 	stw	r2,164(sp)
    82a0:	dcc02e15 	stw	r19,184(sp)
    82a4:	d8002a15 	stw	zero,168(sp)
    82a8:	d8003215 	stw	zero,200(sp)
    82ac:	003ea206 	br	7d38 <__alt_data_end+0xfffe7d38>
    82b0:	8025883a 	mov	r18,r16
    82b4:	dc002903 	ldbu	r16,164(sp)
    82b8:	e011883a 	mov	r8,fp
    82bc:	84003fcc 	andi	r16,r16,255
    82c0:	803f8d26 	beq	r16,zero,80f8 <__alt_data_end+0xfffe80f8>
    82c4:	d8c02b03 	ldbu	r3,172(sp)
    82c8:	d8c02785 	stb	r3,158(sp)
    82cc:	003f8a06 	br	80f8 <__alt_data_end+0xfffe80f8>
    82d0:	8025883a 	mov	r18,r16
    82d4:	dc002903 	ldbu	r16,164(sp)
    82d8:	e011883a 	mov	r8,fp
    82dc:	84003fcc 	andi	r16,r16,255
    82e0:	8005661e 	bne	r16,zero,987c <___vfprintf_internal_r+0x22b8>
    82e4:	01000074 	movhi	r4,1
    82e8:	210c4904 	addi	r4,r4,12580
    82ec:	d9003915 	stw	r4,228(sp)
    82f0:	9080080c 	andi	r2,r18,32
    82f4:	103f9f1e 	bne	r2,zero,8174 <__alt_data_end+0xfffe8174>
    82f8:	9080040c 	andi	r2,r18,16
    82fc:	1002eb26 	beq	r2,zero,8eac <___vfprintf_internal_r+0x18e8>
    8300:	d8802e17 	ldw	r2,184(sp)
    8304:	002d883a 	mov	r22,zero
    8308:	14c00017 	ldw	r19,0(r2)
    830c:	10800104 	addi	r2,r2,4
    8310:	d8802e15 	stw	r2,184(sp)
    8314:	003f9c06 	br	8188 <__alt_data_end+0xfffe8188>
    8318:	d8802b07 	ldb	r2,172(sp)
    831c:	1002e11e 	bne	r2,zero,8ea4 <___vfprintf_internal_r+0x18e0>
    8320:	00c00044 	movi	r3,1
    8324:	d8c02905 	stb	r3,164(sp)
    8328:	00c00804 	movi	r3,32
    832c:	d8c02b05 	stb	r3,172(sp)
    8330:	ac400007 	ldb	r17,0(r21)
    8334:	003d0506 	br	774c <__alt_data_end+0xfffe774c>
    8338:	84000054 	ori	r16,r16,1
    833c:	ac400007 	ldb	r17,0(r21)
    8340:	003d0206 	br	774c <__alt_data_end+0xfffe774c>
    8344:	8025883a 	mov	r18,r16
    8348:	dc002903 	ldbu	r16,164(sp)
    834c:	e011883a 	mov	r8,fp
    8350:	84003fcc 	andi	r16,r16,255
    8354:	803de726 	beq	r16,zero,7af4 <__alt_data_end+0xfffe7af4>
    8358:	d8c02b03 	ldbu	r3,172(sp)
    835c:	d8c02785 	stb	r3,158(sp)
    8360:	003de406 	br	7af4 <__alt_data_end+0xfffe7af4>
    8364:	84001014 	ori	r16,r16,64
    8368:	ac400007 	ldb	r17,0(r21)
    836c:	003cf706 	br	774c <__alt_data_end+0xfffe774c>
    8370:	ac400007 	ldb	r17,0(r21)
    8374:	00801b04 	movi	r2,108
    8378:	88838f26 	beq	r17,r2,91b8 <___vfprintf_internal_r+0x1bf4>
    837c:	84000414 	ori	r16,r16,16
    8380:	003cf206 	br	774c <__alt_data_end+0xfffe774c>
    8384:	8025883a 	mov	r18,r16
    8388:	dc002903 	ldbu	r16,164(sp)
    838c:	e011883a 	mov	r8,fp
    8390:	84003fcc 	andi	r16,r16,255
    8394:	80053f1e 	bne	r16,zero,9894 <___vfprintf_internal_r+0x22d0>
    8398:	9080080c 	andi	r2,r18,32
    839c:	1002d226 	beq	r2,zero,8ee8 <___vfprintf_internal_r+0x1924>
    83a0:	d9002e17 	ldw	r4,184(sp)
    83a4:	d9402f17 	ldw	r5,188(sp)
    83a8:	20800017 	ldw	r2,0(r4)
    83ac:	2807d7fa 	srai	r3,r5,31
    83b0:	21000104 	addi	r4,r4,4
    83b4:	d9002e15 	stw	r4,184(sp)
    83b8:	11400015 	stw	r5,0(r2)
    83bc:	10c00115 	stw	r3,4(r2)
    83c0:	003cb806 	br	76a4 <__alt_data_end+0xfffe76a4>
    83c4:	d8c02e17 	ldw	r3,184(sp)
    83c8:	d9002e17 	ldw	r4,184(sp)
    83cc:	8025883a 	mov	r18,r16
    83d0:	18800017 	ldw	r2,0(r3)
    83d4:	21000104 	addi	r4,r4,4
    83d8:	00c00044 	movi	r3,1
    83dc:	e011883a 	mov	r8,fp
    83e0:	d8c02915 	stw	r3,164(sp)
    83e4:	d8002785 	stb	zero,158(sp)
    83e8:	d8801405 	stb	r2,80(sp)
    83ec:	d9002e15 	stw	r4,184(sp)
    83f0:	d8c02b15 	stw	r3,172(sp)
    83f4:	d8002a15 	stw	zero,168(sp)
    83f8:	d8003215 	stw	zero,200(sp)
    83fc:	dc001404 	addi	r16,sp,80
    8400:	0039883a 	mov	fp,zero
    8404:	003e5306 	br	7d54 <__alt_data_end+0xfffe7d54>
    8408:	01000074 	movhi	r4,1
    840c:	210c4904 	addi	r4,r4,12580
    8410:	0039883a 	mov	fp,zero
    8414:	d9003915 	stw	r4,228(sp)
    8418:	04401e04 	movi	r17,120
    841c:	003f6906 	br	81c4 <__alt_data_end+0xfffe81c4>
    8420:	8025883a 	mov	r18,r16
    8424:	dc002903 	ldbu	r16,164(sp)
    8428:	e011883a 	mov	r8,fp
    842c:	84003fcc 	andi	r16,r16,255
    8430:	8005081e 	bne	r16,zero,9854 <___vfprintf_internal_r+0x2290>
    8434:	883d6126 	beq	r17,zero,79bc <__alt_data_end+0xfffe79bc>
    8438:	00c00044 	movi	r3,1
    843c:	d8c02915 	stw	r3,164(sp)
    8440:	dc401405 	stb	r17,80(sp)
    8444:	d8002785 	stb	zero,158(sp)
    8448:	003fe906 	br	83f0 <__alt_data_end+0xfffe83f0>
    844c:	01400074 	movhi	r5,1
    8450:	294c4904 	addi	r5,r5,12580
    8454:	d9403915 	stw	r5,228(sp)
    8458:	d8c02e15 	stw	r3,184(sp)
    845c:	1025883a 	mov	r18,r2
    8460:	04401e04 	movi	r17,120
    8464:	9d84b03a 	or	r2,r19,r22
    8468:	1000fc1e 	bne	r2,zero,885c <___vfprintf_internal_r+0x1298>
    846c:	0039883a 	mov	fp,zero
    8470:	00800084 	movi	r2,2
    8474:	10803fcc 	andi	r2,r2,255
    8478:	00c00044 	movi	r3,1
    847c:	10c20f26 	beq	r2,r3,8cbc <___vfprintf_internal_r+0x16f8>
    8480:	00c00084 	movi	r3,2
    8484:	10fd3326 	beq	r2,r3,7954 <__alt_data_end+0xfffe7954>
    8488:	003e0b06 	br	7cb8 <__alt_data_end+0xfffe7cb8>
    848c:	d8c02017 	ldw	r3,128(sp)
    8490:	003e7106 	br	7e58 <__alt_data_end+0xfffe7e58>
    8494:	00801944 	movi	r2,101
    8498:	14407e0e 	bge	r2,r17,8694 <___vfprintf_internal_r+0x10d0>
    849c:	d9003617 	ldw	r4,216(sp)
    84a0:	d9403817 	ldw	r5,224(sp)
    84a4:	000d883a 	mov	r6,zero
    84a8:	000f883a 	mov	r7,zero
    84ac:	d8c03c15 	stw	r3,240(sp)
    84b0:	da003d15 	stw	r8,244(sp)
    84b4:	001026c0 	call	1026c <__eqdf2>
    84b8:	d8c03c17 	ldw	r3,240(sp)
    84bc:	da003d17 	ldw	r8,244(sp)
    84c0:	1000f71e 	bne	r2,zero,88a0 <___vfprintf_internal_r+0x12dc>
    84c4:	d8801f17 	ldw	r2,124(sp)
    84c8:	01000074 	movhi	r4,1
    84cc:	210c5004 	addi	r4,r4,12608
    84d0:	18c00044 	addi	r3,r3,1
    84d4:	10800044 	addi	r2,r2,1
    84d8:	41000015 	stw	r4,0(r8)
    84dc:	01000044 	movi	r4,1
    84e0:	41000115 	stw	r4,4(r8)
    84e4:	d8c02015 	stw	r3,128(sp)
    84e8:	d8801f15 	stw	r2,124(sp)
    84ec:	010001c4 	movi	r4,7
    84f0:	2082b816 	blt	r4,r2,8fd4 <___vfprintf_internal_r+0x1a10>
    84f4:	42000204 	addi	r8,r8,8
    84f8:	d8802617 	ldw	r2,152(sp)
    84fc:	d9403317 	ldw	r5,204(sp)
    8500:	11400216 	blt	r2,r5,850c <___vfprintf_internal_r+0xf48>
    8504:	9080004c 	andi	r2,r18,1
    8508:	103eb326 	beq	r2,zero,7fd8 <__alt_data_end+0xfffe7fd8>
    850c:	d8803717 	ldw	r2,220(sp)
    8510:	d9003417 	ldw	r4,208(sp)
    8514:	d9403717 	ldw	r5,220(sp)
    8518:	1887883a 	add	r3,r3,r2
    851c:	d8801f17 	ldw	r2,124(sp)
    8520:	41000015 	stw	r4,0(r8)
    8524:	41400115 	stw	r5,4(r8)
    8528:	10800044 	addi	r2,r2,1
    852c:	d8c02015 	stw	r3,128(sp)
    8530:	d8801f15 	stw	r2,124(sp)
    8534:	010001c4 	movi	r4,7
    8538:	20832916 	blt	r4,r2,91e0 <___vfprintf_internal_r+0x1c1c>
    853c:	42000204 	addi	r8,r8,8
    8540:	d8803317 	ldw	r2,204(sp)
    8544:	143fffc4 	addi	r16,r2,-1
    8548:	043ea30e 	bge	zero,r16,7fd8 <__alt_data_end+0xfffe7fd8>
    854c:	04400404 	movi	r17,16
    8550:	d8801f17 	ldw	r2,124(sp)
    8554:	8c00880e 	bge	r17,r16,8778 <___vfprintf_internal_r+0x11b4>
    8558:	01400074 	movhi	r5,1
    855c:	294c5084 	addi	r5,r5,12610
    8560:	d9402c15 	stw	r5,176(sp)
    8564:	058001c4 	movi	r22,7
    8568:	dcc02d17 	ldw	r19,180(sp)
    856c:	00000306 	br	857c <___vfprintf_internal_r+0xfb8>
    8570:	42000204 	addi	r8,r8,8
    8574:	843ffc04 	addi	r16,r16,-16
    8578:	8c00820e 	bge	r17,r16,8784 <___vfprintf_internal_r+0x11c0>
    857c:	18c00404 	addi	r3,r3,16
    8580:	10800044 	addi	r2,r2,1
    8584:	45000015 	stw	r20,0(r8)
    8588:	44400115 	stw	r17,4(r8)
    858c:	d8c02015 	stw	r3,128(sp)
    8590:	d8801f15 	stw	r2,124(sp)
    8594:	b0bff60e 	bge	r22,r2,8570 <__alt_data_end+0xfffe8570>
    8598:	d9801e04 	addi	r6,sp,120
    859c:	b80b883a 	mov	r5,r23
    85a0:	9809883a 	mov	r4,r19
    85a4:	000d9800 	call	d980 <__sprint_r>
    85a8:	103d0a1e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    85ac:	d8c02017 	ldw	r3,128(sp)
    85b0:	d8801f17 	ldw	r2,124(sp)
    85b4:	da000404 	addi	r8,sp,16
    85b8:	003fee06 	br	8574 <__alt_data_end+0xfffe8574>
    85bc:	d9403117 	ldw	r5,196(sp)
    85c0:	d8802917 	ldw	r2,164(sp)
    85c4:	28adc83a 	sub	r22,r5,r2
    85c8:	05be410e 	bge	zero,r22,7ed0 <__alt_data_end+0xfffe7ed0>
    85cc:	07000404 	movi	fp,16
    85d0:	d8801f17 	ldw	r2,124(sp)
    85d4:	e5838f0e 	bge	fp,r22,9414 <___vfprintf_internal_r+0x1e50>
    85d8:	01400074 	movhi	r5,1
    85dc:	294c5084 	addi	r5,r5,12610
    85e0:	dc403015 	stw	r17,192(sp)
    85e4:	d9402c15 	stw	r5,176(sp)
    85e8:	b023883a 	mov	r17,r22
    85ec:	04c001c4 	movi	r19,7
    85f0:	a82d883a 	mov	r22,r21
    85f4:	902b883a 	mov	r21,r18
    85f8:	8025883a 	mov	r18,r16
    85fc:	dc002d17 	ldw	r16,180(sp)
    8600:	00000306 	br	8610 <___vfprintf_internal_r+0x104c>
    8604:	8c7ffc04 	addi	r17,r17,-16
    8608:	42000204 	addi	r8,r8,8
    860c:	e440110e 	bge	fp,r17,8654 <___vfprintf_internal_r+0x1090>
    8610:	18c00404 	addi	r3,r3,16
    8614:	10800044 	addi	r2,r2,1
    8618:	45000015 	stw	r20,0(r8)
    861c:	47000115 	stw	fp,4(r8)
    8620:	d8c02015 	stw	r3,128(sp)
    8624:	d8801f15 	stw	r2,124(sp)
    8628:	98bff60e 	bge	r19,r2,8604 <__alt_data_end+0xfffe8604>
    862c:	d9801e04 	addi	r6,sp,120
    8630:	b80b883a 	mov	r5,r23
    8634:	8009883a 	mov	r4,r16
    8638:	000d9800 	call	d980 <__sprint_r>
    863c:	103ce51e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8640:	8c7ffc04 	addi	r17,r17,-16
    8644:	d8c02017 	ldw	r3,128(sp)
    8648:	d8801f17 	ldw	r2,124(sp)
    864c:	da000404 	addi	r8,sp,16
    8650:	e47fef16 	blt	fp,r17,8610 <__alt_data_end+0xfffe8610>
    8654:	9021883a 	mov	r16,r18
    8658:	a825883a 	mov	r18,r21
    865c:	b02b883a 	mov	r21,r22
    8660:	882d883a 	mov	r22,r17
    8664:	dc403017 	ldw	r17,192(sp)
    8668:	d9002c17 	ldw	r4,176(sp)
    866c:	1d87883a 	add	r3,r3,r22
    8670:	10800044 	addi	r2,r2,1
    8674:	41000015 	stw	r4,0(r8)
    8678:	45800115 	stw	r22,4(r8)
    867c:	d8c02015 	stw	r3,128(sp)
    8680:	d8801f15 	stw	r2,124(sp)
    8684:	010001c4 	movi	r4,7
    8688:	20818e16 	blt	r4,r2,8cc4 <___vfprintf_internal_r+0x1700>
    868c:	42000204 	addi	r8,r8,8
    8690:	003e0f06 	br	7ed0 <__alt_data_end+0xfffe7ed0>
    8694:	d9403317 	ldw	r5,204(sp)
    8698:	00800044 	movi	r2,1
    869c:	18c00044 	addi	r3,r3,1
    86a0:	1141530e 	bge	r2,r5,8bf0 <___vfprintf_internal_r+0x162c>
    86a4:	dc401f17 	ldw	r17,124(sp)
    86a8:	00800044 	movi	r2,1
    86ac:	40800115 	stw	r2,4(r8)
    86b0:	8c400044 	addi	r17,r17,1
    86b4:	44000015 	stw	r16,0(r8)
    86b8:	d8c02015 	stw	r3,128(sp)
    86bc:	dc401f15 	stw	r17,124(sp)
    86c0:	008001c4 	movi	r2,7
    86c4:	14416b16 	blt	r2,r17,8c74 <___vfprintf_internal_r+0x16b0>
    86c8:	42000204 	addi	r8,r8,8
    86cc:	d8803717 	ldw	r2,220(sp)
    86d0:	d9003417 	ldw	r4,208(sp)
    86d4:	8c400044 	addi	r17,r17,1
    86d8:	10c7883a 	add	r3,r2,r3
    86dc:	40800115 	stw	r2,4(r8)
    86e0:	41000015 	stw	r4,0(r8)
    86e4:	d8c02015 	stw	r3,128(sp)
    86e8:	dc401f15 	stw	r17,124(sp)
    86ec:	008001c4 	movi	r2,7
    86f0:	14416916 	blt	r2,r17,8c98 <___vfprintf_internal_r+0x16d4>
    86f4:	45800204 	addi	r22,r8,8
    86f8:	d9003617 	ldw	r4,216(sp)
    86fc:	d9403817 	ldw	r5,224(sp)
    8700:	000d883a 	mov	r6,zero
    8704:	000f883a 	mov	r7,zero
    8708:	d8c03c15 	stw	r3,240(sp)
    870c:	001026c0 	call	1026c <__eqdf2>
    8710:	d8c03c17 	ldw	r3,240(sp)
    8714:	1000bc26 	beq	r2,zero,8a08 <___vfprintf_internal_r+0x1444>
    8718:	d9403317 	ldw	r5,204(sp)
    871c:	84000044 	addi	r16,r16,1
    8720:	8c400044 	addi	r17,r17,1
    8724:	28bfffc4 	addi	r2,r5,-1
    8728:	1887883a 	add	r3,r3,r2
    872c:	b0800115 	stw	r2,4(r22)
    8730:	b4000015 	stw	r16,0(r22)
    8734:	d8c02015 	stw	r3,128(sp)
    8738:	dc401f15 	stw	r17,124(sp)
    873c:	008001c4 	movi	r2,7
    8740:	14414316 	blt	r2,r17,8c50 <___vfprintf_internal_r+0x168c>
    8744:	b5800204 	addi	r22,r22,8
    8748:	d9003a17 	ldw	r4,232(sp)
    874c:	df0022c4 	addi	fp,sp,139
    8750:	8c400044 	addi	r17,r17,1
    8754:	20c7883a 	add	r3,r4,r3
    8758:	b7000015 	stw	fp,0(r22)
    875c:	b1000115 	stw	r4,4(r22)
    8760:	d8c02015 	stw	r3,128(sp)
    8764:	dc401f15 	stw	r17,124(sp)
    8768:	008001c4 	movi	r2,7
    876c:	14400e16 	blt	r2,r17,87a8 <___vfprintf_internal_r+0x11e4>
    8770:	b2000204 	addi	r8,r22,8
    8774:	003e1806 	br	7fd8 <__alt_data_end+0xfffe7fd8>
    8778:	01000074 	movhi	r4,1
    877c:	210c5084 	addi	r4,r4,12610
    8780:	d9002c15 	stw	r4,176(sp)
    8784:	d9002c17 	ldw	r4,176(sp)
    8788:	1c07883a 	add	r3,r3,r16
    878c:	44000115 	stw	r16,4(r8)
    8790:	41000015 	stw	r4,0(r8)
    8794:	10800044 	addi	r2,r2,1
    8798:	d8c02015 	stw	r3,128(sp)
    879c:	d8801f15 	stw	r2,124(sp)
    87a0:	010001c4 	movi	r4,7
    87a4:	20be0b0e 	bge	r4,r2,7fd4 <__alt_data_end+0xfffe7fd4>
    87a8:	d9002d17 	ldw	r4,180(sp)
    87ac:	d9801e04 	addi	r6,sp,120
    87b0:	b80b883a 	mov	r5,r23
    87b4:	000d9800 	call	d980 <__sprint_r>
    87b8:	103c861e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    87bc:	d8c02017 	ldw	r3,128(sp)
    87c0:	da000404 	addi	r8,sp,16
    87c4:	003e0406 	br	7fd8 <__alt_data_end+0xfffe7fd8>
    87c8:	d9002d17 	ldw	r4,180(sp)
    87cc:	d9801e04 	addi	r6,sp,120
    87d0:	b80b883a 	mov	r5,r23
    87d4:	000d9800 	call	d980 <__sprint_r>
    87d8:	103e3b26 	beq	r2,zero,80c8 <__alt_data_end+0xfffe80c8>
    87dc:	003c7d06 	br	79d4 <__alt_data_end+0xfffe79d4>
    87e0:	d9002d17 	ldw	r4,180(sp)
    87e4:	d9801e04 	addi	r6,sp,120
    87e8:	b80b883a 	mov	r5,r23
    87ec:	000d9800 	call	d980 <__sprint_r>
    87f0:	103c781e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    87f4:	d8c02017 	ldw	r3,128(sp)
    87f8:	da000404 	addi	r8,sp,16
    87fc:	003de906 	br	7fa4 <__alt_data_end+0xfffe7fa4>
    8800:	d9002d17 	ldw	r4,180(sp)
    8804:	d9801e04 	addi	r6,sp,120
    8808:	b80b883a 	mov	r5,r23
    880c:	000d9800 	call	d980 <__sprint_r>
    8810:	103c701e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8814:	d8c02017 	ldw	r3,128(sp)
    8818:	da000404 	addi	r8,sp,16
    881c:	003d9b06 	br	7e8c <__alt_data_end+0xfffe7e8c>
    8820:	d9002d17 	ldw	r4,180(sp)
    8824:	d9801e04 	addi	r6,sp,120
    8828:	b80b883a 	mov	r5,r23
    882c:	000d9800 	call	d980 <__sprint_r>
    8830:	103c681e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8834:	d8c02017 	ldw	r3,128(sp)
    8838:	da000404 	addi	r8,sp,16
    883c:	003da106 	br	7ec4 <__alt_data_end+0xfffe7ec4>
    8840:	d9402a17 	ldw	r5,168(sp)
    8844:	d8002785 	stb	zero,158(sp)
    8848:	283f0616 	blt	r5,zero,8464 <__alt_data_end+0xfffe8464>
    884c:	00ffdfc4 	movi	r3,-129
    8850:	9d84b03a 	or	r2,r19,r22
    8854:	90e4703a 	and	r18,r18,r3
    8858:	103c3b26 	beq	r2,zero,7948 <__alt_data_end+0xfffe7948>
    885c:	0039883a 	mov	fp,zero
    8860:	003e5806 	br	81c4 <__alt_data_end+0xfffe81c4>
    8864:	9080040c 	andi	r2,r18,16
    8868:	1001b326 	beq	r2,zero,8f38 <___vfprintf_internal_r+0x1974>
    886c:	d8c02e17 	ldw	r3,184(sp)
    8870:	d9002a17 	ldw	r4,168(sp)
    8874:	d8002785 	stb	zero,158(sp)
    8878:	18800104 	addi	r2,r3,4
    887c:	1cc00017 	ldw	r19,0(r3)
    8880:	002d883a 	mov	r22,zero
    8884:	2001b516 	blt	r4,zero,8f5c <___vfprintf_internal_r+0x1998>
    8888:	00ffdfc4 	movi	r3,-129
    888c:	d8802e15 	stw	r2,184(sp)
    8890:	90e4703a 	and	r18,r18,r3
    8894:	983d0526 	beq	r19,zero,7cac <__alt_data_end+0xfffe7cac>
    8898:	0039883a 	mov	fp,zero
    889c:	003d0806 	br	7cc0 <__alt_data_end+0xfffe7cc0>
    88a0:	dc402617 	ldw	r17,152(sp)
    88a4:	0441d30e 	bge	zero,r17,8ff4 <___vfprintf_internal_r+0x1a30>
    88a8:	dc403217 	ldw	r17,200(sp)
    88ac:	d8803317 	ldw	r2,204(sp)
    88b0:	1440010e 	bge	r2,r17,88b8 <___vfprintf_internal_r+0x12f4>
    88b4:	1023883a 	mov	r17,r2
    88b8:	04400a0e 	bge	zero,r17,88e4 <___vfprintf_internal_r+0x1320>
    88bc:	d8801f17 	ldw	r2,124(sp)
    88c0:	1c47883a 	add	r3,r3,r17
    88c4:	44000015 	stw	r16,0(r8)
    88c8:	10800044 	addi	r2,r2,1
    88cc:	44400115 	stw	r17,4(r8)
    88d0:	d8c02015 	stw	r3,128(sp)
    88d4:	d8801f15 	stw	r2,124(sp)
    88d8:	010001c4 	movi	r4,7
    88dc:	20826516 	blt	r4,r2,9274 <___vfprintf_internal_r+0x1cb0>
    88e0:	42000204 	addi	r8,r8,8
    88e4:	88026116 	blt	r17,zero,926c <___vfprintf_internal_r+0x1ca8>
    88e8:	d9003217 	ldw	r4,200(sp)
    88ec:	2463c83a 	sub	r17,r4,r17
    88f0:	04407b0e 	bge	zero,r17,8ae0 <___vfprintf_internal_r+0x151c>
    88f4:	05800404 	movi	r22,16
    88f8:	d8801f17 	ldw	r2,124(sp)
    88fc:	b4419d0e 	bge	r22,r17,8f74 <___vfprintf_internal_r+0x19b0>
    8900:	01000074 	movhi	r4,1
    8904:	210c5084 	addi	r4,r4,12610
    8908:	d9002c15 	stw	r4,176(sp)
    890c:	070001c4 	movi	fp,7
    8910:	dcc02d17 	ldw	r19,180(sp)
    8914:	00000306 	br	8924 <___vfprintf_internal_r+0x1360>
    8918:	42000204 	addi	r8,r8,8
    891c:	8c7ffc04 	addi	r17,r17,-16
    8920:	b441970e 	bge	r22,r17,8f80 <___vfprintf_internal_r+0x19bc>
    8924:	18c00404 	addi	r3,r3,16
    8928:	10800044 	addi	r2,r2,1
    892c:	45000015 	stw	r20,0(r8)
    8930:	45800115 	stw	r22,4(r8)
    8934:	d8c02015 	stw	r3,128(sp)
    8938:	d8801f15 	stw	r2,124(sp)
    893c:	e0bff60e 	bge	fp,r2,8918 <__alt_data_end+0xfffe8918>
    8940:	d9801e04 	addi	r6,sp,120
    8944:	b80b883a 	mov	r5,r23
    8948:	9809883a 	mov	r4,r19
    894c:	000d9800 	call	d980 <__sprint_r>
    8950:	103c201e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8954:	d8c02017 	ldw	r3,128(sp)
    8958:	d8801f17 	ldw	r2,124(sp)
    895c:	da000404 	addi	r8,sp,16
    8960:	003fee06 	br	891c <__alt_data_end+0xfffe891c>
    8964:	d9002d17 	ldw	r4,180(sp)
    8968:	d9801e04 	addi	r6,sp,120
    896c:	b80b883a 	mov	r5,r23
    8970:	000d9800 	call	d980 <__sprint_r>
    8974:	103c171e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8978:	d8c02017 	ldw	r3,128(sp)
    897c:	df002787 	ldb	fp,158(sp)
    8980:	da000404 	addi	r8,sp,16
    8984:	003d3406 	br	7e58 <__alt_data_end+0xfffe7e58>
    8988:	9080040c 	andi	r2,r18,16
    898c:	10016126 	beq	r2,zero,8f14 <___vfprintf_internal_r+0x1950>
    8990:	d9402e17 	ldw	r5,184(sp)
    8994:	2cc00017 	ldw	r19,0(r5)
    8998:	29400104 	addi	r5,r5,4
    899c:	d9402e15 	stw	r5,184(sp)
    89a0:	982dd7fa 	srai	r22,r19,31
    89a4:	b005883a 	mov	r2,r22
    89a8:	003c5a06 	br	7b14 <__alt_data_end+0xfffe7b14>
    89ac:	9080040c 	andi	r2,r18,16
    89b0:	10003526 	beq	r2,zero,8a88 <___vfprintf_internal_r+0x14c4>
    89b4:	d8c02e17 	ldw	r3,184(sp)
    89b8:	d9002a17 	ldw	r4,168(sp)
    89bc:	d8002785 	stb	zero,158(sp)
    89c0:	18800104 	addi	r2,r3,4
    89c4:	1cc00017 	ldw	r19,0(r3)
    89c8:	002d883a 	mov	r22,zero
    89cc:	20003716 	blt	r4,zero,8aac <___vfprintf_internal_r+0x14e8>
    89d0:	00ffdfc4 	movi	r3,-129
    89d4:	d8802e15 	stw	r2,184(sp)
    89d8:	90e4703a 	and	r18,r18,r3
    89dc:	0039883a 	mov	fp,zero
    89e0:	983dd426 	beq	r19,zero,8134 <__alt_data_end+0xfffe8134>
    89e4:	00800244 	movi	r2,9
    89e8:	14fc5336 	bltu	r2,r19,7b38 <__alt_data_end+0xfffe7b38>
    89ec:	d8c02817 	ldw	r3,160(sp)
    89f0:	dc001dc4 	addi	r16,sp,119
    89f4:	9cc00c04 	addi	r19,r19,48
    89f8:	1c07c83a 	sub	r3,r3,r16
    89fc:	dcc01dc5 	stb	r19,119(sp)
    8a00:	d8c02b15 	stw	r3,172(sp)
    8a04:	003cc606 	br	7d20 <__alt_data_end+0xfffe7d20>
    8a08:	d8803317 	ldw	r2,204(sp)
    8a0c:	143fffc4 	addi	r16,r2,-1
    8a10:	043f4d0e 	bge	zero,r16,8748 <__alt_data_end+0xfffe8748>
    8a14:	07000404 	movi	fp,16
    8a18:	e400810e 	bge	fp,r16,8c20 <___vfprintf_internal_r+0x165c>
    8a1c:	01400074 	movhi	r5,1
    8a20:	294c5084 	addi	r5,r5,12610
    8a24:	d9402c15 	stw	r5,176(sp)
    8a28:	01c001c4 	movi	r7,7
    8a2c:	dcc02d17 	ldw	r19,180(sp)
    8a30:	00000306 	br	8a40 <___vfprintf_internal_r+0x147c>
    8a34:	b5800204 	addi	r22,r22,8
    8a38:	843ffc04 	addi	r16,r16,-16
    8a3c:	e4007b0e 	bge	fp,r16,8c2c <___vfprintf_internal_r+0x1668>
    8a40:	18c00404 	addi	r3,r3,16
    8a44:	8c400044 	addi	r17,r17,1
    8a48:	b5000015 	stw	r20,0(r22)
    8a4c:	b7000115 	stw	fp,4(r22)
    8a50:	d8c02015 	stw	r3,128(sp)
    8a54:	dc401f15 	stw	r17,124(sp)
    8a58:	3c7ff60e 	bge	r7,r17,8a34 <__alt_data_end+0xfffe8a34>
    8a5c:	d9801e04 	addi	r6,sp,120
    8a60:	b80b883a 	mov	r5,r23
    8a64:	9809883a 	mov	r4,r19
    8a68:	d9c03c15 	stw	r7,240(sp)
    8a6c:	000d9800 	call	d980 <__sprint_r>
    8a70:	d9c03c17 	ldw	r7,240(sp)
    8a74:	103bd71e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8a78:	d8c02017 	ldw	r3,128(sp)
    8a7c:	dc401f17 	ldw	r17,124(sp)
    8a80:	dd800404 	addi	r22,sp,16
    8a84:	003fec06 	br	8a38 <__alt_data_end+0xfffe8a38>
    8a88:	9080100c 	andi	r2,r18,64
    8a8c:	d8002785 	stb	zero,158(sp)
    8a90:	10010e26 	beq	r2,zero,8ecc <___vfprintf_internal_r+0x1908>
    8a94:	d9402e17 	ldw	r5,184(sp)
    8a98:	d8c02a17 	ldw	r3,168(sp)
    8a9c:	002d883a 	mov	r22,zero
    8aa0:	28800104 	addi	r2,r5,4
    8aa4:	2cc0000b 	ldhu	r19,0(r5)
    8aa8:	183fc90e 	bge	r3,zero,89d0 <__alt_data_end+0xfffe89d0>
    8aac:	d8802e15 	stw	r2,184(sp)
    8ab0:	0039883a 	mov	fp,zero
    8ab4:	9d84b03a 	or	r2,r19,r22
    8ab8:	103c1e1e 	bne	r2,zero,7b34 <__alt_data_end+0xfffe7b34>
    8abc:	00800044 	movi	r2,1
    8ac0:	003e6c06 	br	8474 <__alt_data_end+0xfffe8474>
    8ac4:	d9002d17 	ldw	r4,180(sp)
    8ac8:	d9801e04 	addi	r6,sp,120
    8acc:	b80b883a 	mov	r5,r23
    8ad0:	000d9800 	call	d980 <__sprint_r>
    8ad4:	103bbf1e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8ad8:	d8c02017 	ldw	r3,128(sp)
    8adc:	da000404 	addi	r8,sp,16
    8ae0:	d9003217 	ldw	r4,200(sp)
    8ae4:	d8802617 	ldw	r2,152(sp)
    8ae8:	d9403317 	ldw	r5,204(sp)
    8aec:	8123883a 	add	r17,r16,r4
    8af0:	11400216 	blt	r2,r5,8afc <___vfprintf_internal_r+0x1538>
    8af4:	9100004c 	andi	r4,r18,1
    8af8:	20000d26 	beq	r4,zero,8b30 <___vfprintf_internal_r+0x156c>
    8afc:	d9003717 	ldw	r4,220(sp)
    8b00:	d9403417 	ldw	r5,208(sp)
    8b04:	1907883a 	add	r3,r3,r4
    8b08:	d9001f17 	ldw	r4,124(sp)
    8b0c:	41400015 	stw	r5,0(r8)
    8b10:	d9403717 	ldw	r5,220(sp)
    8b14:	21000044 	addi	r4,r4,1
    8b18:	d8c02015 	stw	r3,128(sp)
    8b1c:	41400115 	stw	r5,4(r8)
    8b20:	d9001f15 	stw	r4,124(sp)
    8b24:	014001c4 	movi	r5,7
    8b28:	2901e816 	blt	r5,r4,92cc <___vfprintf_internal_r+0x1d08>
    8b2c:	42000204 	addi	r8,r8,8
    8b30:	d9003317 	ldw	r4,204(sp)
    8b34:	8121883a 	add	r16,r16,r4
    8b38:	2085c83a 	sub	r2,r4,r2
    8b3c:	8461c83a 	sub	r16,r16,r17
    8b40:	1400010e 	bge	r2,r16,8b48 <___vfprintf_internal_r+0x1584>
    8b44:	1021883a 	mov	r16,r2
    8b48:	04000a0e 	bge	zero,r16,8b74 <___vfprintf_internal_r+0x15b0>
    8b4c:	d9001f17 	ldw	r4,124(sp)
    8b50:	1c07883a 	add	r3,r3,r16
    8b54:	44400015 	stw	r17,0(r8)
    8b58:	21000044 	addi	r4,r4,1
    8b5c:	44000115 	stw	r16,4(r8)
    8b60:	d8c02015 	stw	r3,128(sp)
    8b64:	d9001f15 	stw	r4,124(sp)
    8b68:	014001c4 	movi	r5,7
    8b6c:	2901fb16 	blt	r5,r4,935c <___vfprintf_internal_r+0x1d98>
    8b70:	42000204 	addi	r8,r8,8
    8b74:	8001f716 	blt	r16,zero,9354 <___vfprintf_internal_r+0x1d90>
    8b78:	1421c83a 	sub	r16,r2,r16
    8b7c:	043d160e 	bge	zero,r16,7fd8 <__alt_data_end+0xfffe7fd8>
    8b80:	04400404 	movi	r17,16
    8b84:	d8801f17 	ldw	r2,124(sp)
    8b88:	8c3efb0e 	bge	r17,r16,8778 <__alt_data_end+0xfffe8778>
    8b8c:	01400074 	movhi	r5,1
    8b90:	294c5084 	addi	r5,r5,12610
    8b94:	d9402c15 	stw	r5,176(sp)
    8b98:	058001c4 	movi	r22,7
    8b9c:	dcc02d17 	ldw	r19,180(sp)
    8ba0:	00000306 	br	8bb0 <___vfprintf_internal_r+0x15ec>
    8ba4:	42000204 	addi	r8,r8,8
    8ba8:	843ffc04 	addi	r16,r16,-16
    8bac:	8c3ef50e 	bge	r17,r16,8784 <__alt_data_end+0xfffe8784>
    8bb0:	18c00404 	addi	r3,r3,16
    8bb4:	10800044 	addi	r2,r2,1
    8bb8:	45000015 	stw	r20,0(r8)
    8bbc:	44400115 	stw	r17,4(r8)
    8bc0:	d8c02015 	stw	r3,128(sp)
    8bc4:	d8801f15 	stw	r2,124(sp)
    8bc8:	b0bff60e 	bge	r22,r2,8ba4 <__alt_data_end+0xfffe8ba4>
    8bcc:	d9801e04 	addi	r6,sp,120
    8bd0:	b80b883a 	mov	r5,r23
    8bd4:	9809883a 	mov	r4,r19
    8bd8:	000d9800 	call	d980 <__sprint_r>
    8bdc:	103b7d1e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8be0:	d8c02017 	ldw	r3,128(sp)
    8be4:	d8801f17 	ldw	r2,124(sp)
    8be8:	da000404 	addi	r8,sp,16
    8bec:	003fee06 	br	8ba8 <__alt_data_end+0xfffe8ba8>
    8bf0:	9088703a 	and	r4,r18,r2
    8bf4:	203eab1e 	bne	r4,zero,86a4 <__alt_data_end+0xfffe86a4>
    8bf8:	dc401f17 	ldw	r17,124(sp)
    8bfc:	40800115 	stw	r2,4(r8)
    8c00:	44000015 	stw	r16,0(r8)
    8c04:	8c400044 	addi	r17,r17,1
    8c08:	d8c02015 	stw	r3,128(sp)
    8c0c:	dc401f15 	stw	r17,124(sp)
    8c10:	008001c4 	movi	r2,7
    8c14:	14400e16 	blt	r2,r17,8c50 <___vfprintf_internal_r+0x168c>
    8c18:	45800204 	addi	r22,r8,8
    8c1c:	003eca06 	br	8748 <__alt_data_end+0xfffe8748>
    8c20:	01000074 	movhi	r4,1
    8c24:	210c5084 	addi	r4,r4,12610
    8c28:	d9002c15 	stw	r4,176(sp)
    8c2c:	d8802c17 	ldw	r2,176(sp)
    8c30:	1c07883a 	add	r3,r3,r16
    8c34:	8c400044 	addi	r17,r17,1
    8c38:	b0800015 	stw	r2,0(r22)
    8c3c:	b4000115 	stw	r16,4(r22)
    8c40:	d8c02015 	stw	r3,128(sp)
    8c44:	dc401f15 	stw	r17,124(sp)
    8c48:	008001c4 	movi	r2,7
    8c4c:	147ebd0e 	bge	r2,r17,8744 <__alt_data_end+0xfffe8744>
    8c50:	d9002d17 	ldw	r4,180(sp)
    8c54:	d9801e04 	addi	r6,sp,120
    8c58:	b80b883a 	mov	r5,r23
    8c5c:	000d9800 	call	d980 <__sprint_r>
    8c60:	103b5c1e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8c64:	d8c02017 	ldw	r3,128(sp)
    8c68:	dc401f17 	ldw	r17,124(sp)
    8c6c:	dd800404 	addi	r22,sp,16
    8c70:	003eb506 	br	8748 <__alt_data_end+0xfffe8748>
    8c74:	d9002d17 	ldw	r4,180(sp)
    8c78:	d9801e04 	addi	r6,sp,120
    8c7c:	b80b883a 	mov	r5,r23
    8c80:	000d9800 	call	d980 <__sprint_r>
    8c84:	103b531e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8c88:	d8c02017 	ldw	r3,128(sp)
    8c8c:	dc401f17 	ldw	r17,124(sp)
    8c90:	da000404 	addi	r8,sp,16
    8c94:	003e8d06 	br	86cc <__alt_data_end+0xfffe86cc>
    8c98:	d9002d17 	ldw	r4,180(sp)
    8c9c:	d9801e04 	addi	r6,sp,120
    8ca0:	b80b883a 	mov	r5,r23
    8ca4:	000d9800 	call	d980 <__sprint_r>
    8ca8:	103b4a1e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8cac:	d8c02017 	ldw	r3,128(sp)
    8cb0:	dc401f17 	ldw	r17,124(sp)
    8cb4:	dd800404 	addi	r22,sp,16
    8cb8:	003e8f06 	br	86f8 <__alt_data_end+0xfffe86f8>
    8cbc:	0027883a 	mov	r19,zero
    8cc0:	003f4a06 	br	89ec <__alt_data_end+0xfffe89ec>
    8cc4:	d9002d17 	ldw	r4,180(sp)
    8cc8:	d9801e04 	addi	r6,sp,120
    8ccc:	b80b883a 	mov	r5,r23
    8cd0:	000d9800 	call	d980 <__sprint_r>
    8cd4:	103b3f1e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8cd8:	d8c02017 	ldw	r3,128(sp)
    8cdc:	da000404 	addi	r8,sp,16
    8ce0:	003c7b06 	br	7ed0 <__alt_data_end+0xfffe7ed0>
    8ce4:	d9402a17 	ldw	r5,168(sp)
    8ce8:	04e7c83a 	sub	r19,zero,r19
    8cec:	07000b44 	movi	fp,45
    8cf0:	9804c03a 	cmpne	r2,r19,zero
    8cf4:	05adc83a 	sub	r22,zero,r22
    8cf8:	df002785 	stb	fp,158(sp)
    8cfc:	b0adc83a 	sub	r22,r22,r2
    8d00:	28017b16 	blt	r5,zero,92f0 <___vfprintf_internal_r+0x1d2c>
    8d04:	00bfdfc4 	movi	r2,-129
    8d08:	90a4703a 	and	r18,r18,r2
    8d0c:	003b8906 	br	7b34 <__alt_data_end+0xfffe7b34>
    8d10:	d9003617 	ldw	r4,216(sp)
    8d14:	d9403817 	ldw	r5,224(sp)
    8d18:	da003d15 	stw	r8,244(sp)
    8d1c:	000d7340 	call	d734 <__fpclassifyd>
    8d20:	da003d17 	ldw	r8,244(sp)
    8d24:	1000f026 	beq	r2,zero,90e8 <___vfprintf_internal_r+0x1b24>
    8d28:	d9002a17 	ldw	r4,168(sp)
    8d2c:	05bff7c4 	movi	r22,-33
    8d30:	00bfffc4 	movi	r2,-1
    8d34:	8dac703a 	and	r22,r17,r22
    8d38:	20820026 	beq	r4,r2,953c <___vfprintf_internal_r+0x1f78>
    8d3c:	008011c4 	movi	r2,71
    8d40:	b081f726 	beq	r22,r2,9520 <___vfprintf_internal_r+0x1f5c>
    8d44:	d9003817 	ldw	r4,224(sp)
    8d48:	90c04014 	ori	r3,r18,256
    8d4c:	d8c02c15 	stw	r3,176(sp)
    8d50:	20021516 	blt	r4,zero,95a8 <___vfprintf_internal_r+0x1fe4>
    8d54:	dcc03817 	ldw	r19,224(sp)
    8d58:	d8002905 	stb	zero,164(sp)
    8d5c:	00801984 	movi	r2,102
    8d60:	8881f926 	beq	r17,r2,9548 <___vfprintf_internal_r+0x1f84>
    8d64:	00801184 	movi	r2,70
    8d68:	88821c26 	beq	r17,r2,95dc <___vfprintf_internal_r+0x2018>
    8d6c:	00801144 	movi	r2,69
    8d70:	b081ef26 	beq	r22,r2,9530 <___vfprintf_internal_r+0x1f6c>
    8d74:	d8c02a17 	ldw	r3,168(sp)
    8d78:	d8802104 	addi	r2,sp,132
    8d7c:	d8800315 	stw	r2,12(sp)
    8d80:	d9403617 	ldw	r5,216(sp)
    8d84:	d8802504 	addi	r2,sp,148
    8d88:	d9002d17 	ldw	r4,180(sp)
    8d8c:	d8800215 	stw	r2,8(sp)
    8d90:	d8802604 	addi	r2,sp,152
    8d94:	d8c00015 	stw	r3,0(sp)
    8d98:	d8800115 	stw	r2,4(sp)
    8d9c:	01c00084 	movi	r7,2
    8da0:	980d883a 	mov	r6,r19
    8da4:	d8c03c15 	stw	r3,240(sp)
    8da8:	da003d15 	stw	r8,244(sp)
    8dac:	0009f280 	call	9f28 <_dtoa_r>
    8db0:	1021883a 	mov	r16,r2
    8db4:	008019c4 	movi	r2,103
    8db8:	d8c03c17 	ldw	r3,240(sp)
    8dbc:	da003d17 	ldw	r8,244(sp)
    8dc0:	88817126 	beq	r17,r2,9388 <___vfprintf_internal_r+0x1dc4>
    8dc4:	008011c4 	movi	r2,71
    8dc8:	88829126 	beq	r17,r2,9810 <___vfprintf_internal_r+0x224c>
    8dcc:	80f9883a 	add	fp,r16,r3
    8dd0:	d9003617 	ldw	r4,216(sp)
    8dd4:	000d883a 	mov	r6,zero
    8dd8:	000f883a 	mov	r7,zero
    8ddc:	980b883a 	mov	r5,r19
    8de0:	da003d15 	stw	r8,244(sp)
    8de4:	001026c0 	call	1026c <__eqdf2>
    8de8:	da003d17 	ldw	r8,244(sp)
    8dec:	10018d26 	beq	r2,zero,9424 <___vfprintf_internal_r+0x1e60>
    8df0:	d8802117 	ldw	r2,132(sp)
    8df4:	1700062e 	bgeu	r2,fp,8e10 <___vfprintf_internal_r+0x184c>
    8df8:	01000c04 	movi	r4,48
    8dfc:	10c00044 	addi	r3,r2,1
    8e00:	d8c02115 	stw	r3,132(sp)
    8e04:	11000005 	stb	r4,0(r2)
    8e08:	d8802117 	ldw	r2,132(sp)
    8e0c:	173ffb36 	bltu	r2,fp,8dfc <__alt_data_end+0xfffe8dfc>
    8e10:	1405c83a 	sub	r2,r2,r16
    8e14:	d8803315 	stw	r2,204(sp)
    8e18:	008011c4 	movi	r2,71
    8e1c:	b0817626 	beq	r22,r2,93f8 <___vfprintf_internal_r+0x1e34>
    8e20:	00801944 	movi	r2,101
    8e24:	1442800e 	bge	r2,r17,9828 <___vfprintf_internal_r+0x2264>
    8e28:	d8c02617 	ldw	r3,152(sp)
    8e2c:	00801984 	movi	r2,102
    8e30:	d8c03215 	stw	r3,200(sp)
    8e34:	8881fe26 	beq	r17,r2,9630 <___vfprintf_internal_r+0x206c>
    8e38:	d8c03217 	ldw	r3,200(sp)
    8e3c:	d9003317 	ldw	r4,204(sp)
    8e40:	1901dd16 	blt	r3,r4,95b8 <___vfprintf_internal_r+0x1ff4>
    8e44:	9480004c 	andi	r18,r18,1
    8e48:	90022b1e 	bne	r18,zero,96f8 <___vfprintf_internal_r+0x2134>
    8e4c:	1805883a 	mov	r2,r3
    8e50:	18028316 	blt	r3,zero,9860 <___vfprintf_internal_r+0x229c>
    8e54:	d8c03217 	ldw	r3,200(sp)
    8e58:	044019c4 	movi	r17,103
    8e5c:	d8c02b15 	stw	r3,172(sp)
    8e60:	df002907 	ldb	fp,164(sp)
    8e64:	e001531e 	bne	fp,zero,93b4 <___vfprintf_internal_r+0x1df0>
    8e68:	df002783 	ldbu	fp,158(sp)
    8e6c:	d8802915 	stw	r2,164(sp)
    8e70:	dc802c17 	ldw	r18,176(sp)
    8e74:	d8002a15 	stw	zero,168(sp)
    8e78:	003baf06 	br	7d38 <__alt_data_end+0xfffe7d38>
    8e7c:	d8c02e17 	ldw	r3,184(sp)
    8e80:	d9002e17 	ldw	r4,184(sp)
    8e84:	d9402e17 	ldw	r5,184(sp)
    8e88:	18c00017 	ldw	r3,0(r3)
    8e8c:	21000117 	ldw	r4,4(r4)
    8e90:	29400204 	addi	r5,r5,8
    8e94:	d8c03615 	stw	r3,216(sp)
    8e98:	d9003815 	stw	r4,224(sp)
    8e9c:	d9402e15 	stw	r5,184(sp)
    8ea0:	003b5006 	br	7be4 <__alt_data_end+0xfffe7be4>
    8ea4:	ac400007 	ldb	r17,0(r21)
    8ea8:	003a2806 	br	774c <__alt_data_end+0xfffe774c>
    8eac:	9080100c 	andi	r2,r18,64
    8eb0:	1000a826 	beq	r2,zero,9154 <___vfprintf_internal_r+0x1b90>
    8eb4:	d8c02e17 	ldw	r3,184(sp)
    8eb8:	002d883a 	mov	r22,zero
    8ebc:	1cc0000b 	ldhu	r19,0(r3)
    8ec0:	18c00104 	addi	r3,r3,4
    8ec4:	d8c02e15 	stw	r3,184(sp)
    8ec8:	003caf06 	br	8188 <__alt_data_end+0xfffe8188>
    8ecc:	d9002e17 	ldw	r4,184(sp)
    8ed0:	d9402a17 	ldw	r5,168(sp)
    8ed4:	002d883a 	mov	r22,zero
    8ed8:	20800104 	addi	r2,r4,4
    8edc:	24c00017 	ldw	r19,0(r4)
    8ee0:	283ebb0e 	bge	r5,zero,89d0 <__alt_data_end+0xfffe89d0>
    8ee4:	003ef106 	br	8aac <__alt_data_end+0xfffe8aac>
    8ee8:	9080040c 	andi	r2,r18,16
    8eec:	1000921e 	bne	r2,zero,9138 <___vfprintf_internal_r+0x1b74>
    8ef0:	9480100c 	andi	r18,r18,64
    8ef4:	90013926 	beq	r18,zero,93dc <___vfprintf_internal_r+0x1e18>
    8ef8:	d9402e17 	ldw	r5,184(sp)
    8efc:	d8c02f17 	ldw	r3,188(sp)
    8f00:	28800017 	ldw	r2,0(r5)
    8f04:	29400104 	addi	r5,r5,4
    8f08:	d9402e15 	stw	r5,184(sp)
    8f0c:	10c0000d 	sth	r3,0(r2)
    8f10:	0039e406 	br	76a4 <__alt_data_end+0xfffe76a4>
    8f14:	9080100c 	andi	r2,r18,64
    8f18:	10008026 	beq	r2,zero,911c <___vfprintf_internal_r+0x1b58>
    8f1c:	d8802e17 	ldw	r2,184(sp)
    8f20:	14c0000f 	ldh	r19,0(r2)
    8f24:	10800104 	addi	r2,r2,4
    8f28:	d8802e15 	stw	r2,184(sp)
    8f2c:	982dd7fa 	srai	r22,r19,31
    8f30:	b005883a 	mov	r2,r22
    8f34:	003af706 	br	7b14 <__alt_data_end+0xfffe7b14>
    8f38:	9080100c 	andi	r2,r18,64
    8f3c:	d8002785 	stb	zero,158(sp)
    8f40:	10008a1e 	bne	r2,zero,916c <___vfprintf_internal_r+0x1ba8>
    8f44:	d9002e17 	ldw	r4,184(sp)
    8f48:	d9402a17 	ldw	r5,168(sp)
    8f4c:	002d883a 	mov	r22,zero
    8f50:	20800104 	addi	r2,r4,4
    8f54:	24c00017 	ldw	r19,0(r4)
    8f58:	283e4b0e 	bge	r5,zero,8888 <__alt_data_end+0xfffe8888>
    8f5c:	9d86b03a 	or	r3,r19,r22
    8f60:	d8802e15 	stw	r2,184(sp)
    8f64:	183e4c1e 	bne	r3,zero,8898 <__alt_data_end+0xfffe8898>
    8f68:	0039883a 	mov	fp,zero
    8f6c:	0005883a 	mov	r2,zero
    8f70:	003d4006 	br	8474 <__alt_data_end+0xfffe8474>
    8f74:	01400074 	movhi	r5,1
    8f78:	294c5084 	addi	r5,r5,12610
    8f7c:	d9402c15 	stw	r5,176(sp)
    8f80:	d9402c17 	ldw	r5,176(sp)
    8f84:	1c47883a 	add	r3,r3,r17
    8f88:	10800044 	addi	r2,r2,1
    8f8c:	41400015 	stw	r5,0(r8)
    8f90:	44400115 	stw	r17,4(r8)
    8f94:	d8c02015 	stw	r3,128(sp)
    8f98:	d8801f15 	stw	r2,124(sp)
    8f9c:	010001c4 	movi	r4,7
    8fa0:	20bec816 	blt	r4,r2,8ac4 <__alt_data_end+0xfffe8ac4>
    8fa4:	42000204 	addi	r8,r8,8
    8fa8:	003ecd06 	br	8ae0 <__alt_data_end+0xfffe8ae0>
    8fac:	d9002a17 	ldw	r4,168(sp)
    8fb0:	d8002785 	stb	zero,158(sp)
    8fb4:	203d2d16 	blt	r4,zero,846c <__alt_data_end+0xfffe846c>
    8fb8:	00bfdfc4 	movi	r2,-129
    8fbc:	90a4703a 	and	r18,r18,r2
    8fc0:	003a6106 	br	7948 <__alt_data_end+0xfffe7948>
    8fc4:	01000074 	movhi	r4,1
    8fc8:	210c5084 	addi	r4,r4,12610
    8fcc:	d9002c15 	stw	r4,176(sp)
    8fd0:	003bea06 	br	7f7c <__alt_data_end+0xfffe7f7c>
    8fd4:	d9002d17 	ldw	r4,180(sp)
    8fd8:	d9801e04 	addi	r6,sp,120
    8fdc:	b80b883a 	mov	r5,r23
    8fe0:	000d9800 	call	d980 <__sprint_r>
    8fe4:	103a7b1e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    8fe8:	d8c02017 	ldw	r3,128(sp)
    8fec:	da000404 	addi	r8,sp,16
    8ff0:	003d4106 	br	84f8 <__alt_data_end+0xfffe84f8>
    8ff4:	d8801f17 	ldw	r2,124(sp)
    8ff8:	01400074 	movhi	r5,1
    8ffc:	01000044 	movi	r4,1
    9000:	18c00044 	addi	r3,r3,1
    9004:	10800044 	addi	r2,r2,1
    9008:	294c5004 	addi	r5,r5,12608
    900c:	41000115 	stw	r4,4(r8)
    9010:	41400015 	stw	r5,0(r8)
    9014:	d8c02015 	stw	r3,128(sp)
    9018:	d8801f15 	stw	r2,124(sp)
    901c:	010001c4 	movi	r4,7
    9020:	20805c16 	blt	r4,r2,9194 <___vfprintf_internal_r+0x1bd0>
    9024:	42000204 	addi	r8,r8,8
    9028:	8800041e 	bne	r17,zero,903c <___vfprintf_internal_r+0x1a78>
    902c:	d8803317 	ldw	r2,204(sp)
    9030:	1000021e 	bne	r2,zero,903c <___vfprintf_internal_r+0x1a78>
    9034:	9080004c 	andi	r2,r18,1
    9038:	103be726 	beq	r2,zero,7fd8 <__alt_data_end+0xfffe7fd8>
    903c:	d9003717 	ldw	r4,220(sp)
    9040:	d8801f17 	ldw	r2,124(sp)
    9044:	d9403417 	ldw	r5,208(sp)
    9048:	20c7883a 	add	r3,r4,r3
    904c:	10800044 	addi	r2,r2,1
    9050:	41000115 	stw	r4,4(r8)
    9054:	41400015 	stw	r5,0(r8)
    9058:	d8c02015 	stw	r3,128(sp)
    905c:	d8801f15 	stw	r2,124(sp)
    9060:	010001c4 	movi	r4,7
    9064:	20812116 	blt	r4,r2,94ec <___vfprintf_internal_r+0x1f28>
    9068:	42000204 	addi	r8,r8,8
    906c:	0463c83a 	sub	r17,zero,r17
    9070:	0440730e 	bge	zero,r17,9240 <___vfprintf_internal_r+0x1c7c>
    9074:	05800404 	movi	r22,16
    9078:	b440860e 	bge	r22,r17,9294 <___vfprintf_internal_r+0x1cd0>
    907c:	01400074 	movhi	r5,1
    9080:	294c5084 	addi	r5,r5,12610
    9084:	d9402c15 	stw	r5,176(sp)
    9088:	070001c4 	movi	fp,7
    908c:	dcc02d17 	ldw	r19,180(sp)
    9090:	00000306 	br	90a0 <___vfprintf_internal_r+0x1adc>
    9094:	42000204 	addi	r8,r8,8
    9098:	8c7ffc04 	addi	r17,r17,-16
    909c:	b440800e 	bge	r22,r17,92a0 <___vfprintf_internal_r+0x1cdc>
    90a0:	18c00404 	addi	r3,r3,16
    90a4:	10800044 	addi	r2,r2,1
    90a8:	45000015 	stw	r20,0(r8)
    90ac:	45800115 	stw	r22,4(r8)
    90b0:	d8c02015 	stw	r3,128(sp)
    90b4:	d8801f15 	stw	r2,124(sp)
    90b8:	e0bff60e 	bge	fp,r2,9094 <__alt_data_end+0xfffe9094>
    90bc:	d9801e04 	addi	r6,sp,120
    90c0:	b80b883a 	mov	r5,r23
    90c4:	9809883a 	mov	r4,r19
    90c8:	000d9800 	call	d980 <__sprint_r>
    90cc:	103a411e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    90d0:	d8c02017 	ldw	r3,128(sp)
    90d4:	d8801f17 	ldw	r2,124(sp)
    90d8:	da000404 	addi	r8,sp,16
    90dc:	003fee06 	br	9098 <__alt_data_end+0xfffe9098>
    90e0:	00bfffc4 	movi	r2,-1
    90e4:	003a3f06 	br	79e4 <__alt_data_end+0xfffe79e4>
    90e8:	008011c4 	movi	r2,71
    90ec:	1440b816 	blt	r2,r17,93d0 <___vfprintf_internal_r+0x1e0c>
    90f0:	04000074 	movhi	r16,1
    90f4:	840c4204 	addi	r16,r16,12552
    90f8:	00c000c4 	movi	r3,3
    90fc:	00bfdfc4 	movi	r2,-129
    9100:	d8c02915 	stw	r3,164(sp)
    9104:	90a4703a 	and	r18,r18,r2
    9108:	df002783 	ldbu	fp,158(sp)
    910c:	d8c02b15 	stw	r3,172(sp)
    9110:	d8002a15 	stw	zero,168(sp)
    9114:	d8003215 	stw	zero,200(sp)
    9118:	003b0706 	br	7d38 <__alt_data_end+0xfffe7d38>
    911c:	d8c02e17 	ldw	r3,184(sp)
    9120:	1cc00017 	ldw	r19,0(r3)
    9124:	18c00104 	addi	r3,r3,4
    9128:	d8c02e15 	stw	r3,184(sp)
    912c:	982dd7fa 	srai	r22,r19,31
    9130:	b005883a 	mov	r2,r22
    9134:	003a7706 	br	7b14 <__alt_data_end+0xfffe7b14>
    9138:	d8c02e17 	ldw	r3,184(sp)
    913c:	d9002f17 	ldw	r4,188(sp)
    9140:	18800017 	ldw	r2,0(r3)
    9144:	18c00104 	addi	r3,r3,4
    9148:	d8c02e15 	stw	r3,184(sp)
    914c:	11000015 	stw	r4,0(r2)
    9150:	00395406 	br	76a4 <__alt_data_end+0xfffe76a4>
    9154:	d9002e17 	ldw	r4,184(sp)
    9158:	002d883a 	mov	r22,zero
    915c:	24c00017 	ldw	r19,0(r4)
    9160:	21000104 	addi	r4,r4,4
    9164:	d9002e15 	stw	r4,184(sp)
    9168:	003c0706 	br	8188 <__alt_data_end+0xfffe8188>
    916c:	d9402e17 	ldw	r5,184(sp)
    9170:	d8c02a17 	ldw	r3,168(sp)
    9174:	002d883a 	mov	r22,zero
    9178:	28800104 	addi	r2,r5,4
    917c:	2cc0000b 	ldhu	r19,0(r5)
    9180:	183dc10e 	bge	r3,zero,8888 <__alt_data_end+0xfffe8888>
    9184:	003f7506 	br	8f5c <__alt_data_end+0xfffe8f5c>
    9188:	04000074 	movhi	r16,1
    918c:	840c4004 	addi	r16,r16,12544
    9190:	003aa706 	br	7c30 <__alt_data_end+0xfffe7c30>
    9194:	d9002d17 	ldw	r4,180(sp)
    9198:	d9801e04 	addi	r6,sp,120
    919c:	b80b883a 	mov	r5,r23
    91a0:	000d9800 	call	d980 <__sprint_r>
    91a4:	103a0b1e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    91a8:	dc402617 	ldw	r17,152(sp)
    91ac:	d8c02017 	ldw	r3,128(sp)
    91b0:	da000404 	addi	r8,sp,16
    91b4:	003f9c06 	br	9028 <__alt_data_end+0xfffe9028>
    91b8:	ac400043 	ldbu	r17,1(r21)
    91bc:	84000814 	ori	r16,r16,32
    91c0:	ad400044 	addi	r21,r21,1
    91c4:	8c403fcc 	andi	r17,r17,255
    91c8:	8c40201c 	xori	r17,r17,128
    91cc:	8c7fe004 	addi	r17,r17,-128
    91d0:	00395e06 	br	774c <__alt_data_end+0xfffe774c>
    91d4:	d8c02e15 	stw	r3,184(sp)
    91d8:	0039883a 	mov	fp,zero
    91dc:	003e3506 	br	8ab4 <__alt_data_end+0xfffe8ab4>
    91e0:	d9002d17 	ldw	r4,180(sp)
    91e4:	d9801e04 	addi	r6,sp,120
    91e8:	b80b883a 	mov	r5,r23
    91ec:	000d9800 	call	d980 <__sprint_r>
    91f0:	1039f81e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    91f4:	d8c02017 	ldw	r3,128(sp)
    91f8:	da000404 	addi	r8,sp,16
    91fc:	003cd006 	br	8540 <__alt_data_end+0xfffe8540>
    9200:	8009883a 	mov	r4,r16
    9204:	df003d15 	stw	fp,244(sp)
    9208:	00074dc0 	call	74dc <strlen>
    920c:	d8802b15 	stw	r2,172(sp)
    9210:	da003d17 	ldw	r8,244(sp)
    9214:	103c200e 	bge	r2,zero,8298 <__alt_data_end+0xfffe8298>
    9218:	0005883a 	mov	r2,zero
    921c:	003c1e06 	br	8298 <__alt_data_end+0xfffe8298>
    9220:	d9002d17 	ldw	r4,180(sp)
    9224:	d9801e04 	addi	r6,sp,120
    9228:	b80b883a 	mov	r5,r23
    922c:	000d9800 	call	d980 <__sprint_r>
    9230:	1039e81e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    9234:	d8c02017 	ldw	r3,128(sp)
    9238:	d8801f17 	ldw	r2,124(sp)
    923c:	da000404 	addi	r8,sp,16
    9240:	d9403317 	ldw	r5,204(sp)
    9244:	10800044 	addi	r2,r2,1
    9248:	44000015 	stw	r16,0(r8)
    924c:	28c7883a 	add	r3,r5,r3
    9250:	003b5b06 	br	7fc0 <__alt_data_end+0xfffe7fc0>
    9254:	01000074 	movhi	r4,1
    9258:	210c5484 	addi	r4,r4,12626
    925c:	d9003515 	stw	r4,212(sp)
    9260:	003af206 	br	7e2c <__alt_data_end+0xfffe7e2c>
    9264:	013fffc4 	movi	r4,-1
    9268:	003a0806 	br	7a8c <__alt_data_end+0xfffe7a8c>
    926c:	0023883a 	mov	r17,zero
    9270:	003d9d06 	br	88e8 <__alt_data_end+0xfffe88e8>
    9274:	d9002d17 	ldw	r4,180(sp)
    9278:	d9801e04 	addi	r6,sp,120
    927c:	b80b883a 	mov	r5,r23
    9280:	000d9800 	call	d980 <__sprint_r>
    9284:	1039d31e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    9288:	d8c02017 	ldw	r3,128(sp)
    928c:	da000404 	addi	r8,sp,16
    9290:	003d9406 	br	88e4 <__alt_data_end+0xfffe88e4>
    9294:	01000074 	movhi	r4,1
    9298:	210c5084 	addi	r4,r4,12610
    929c:	d9002c15 	stw	r4,176(sp)
    92a0:	d9002c17 	ldw	r4,176(sp)
    92a4:	1c47883a 	add	r3,r3,r17
    92a8:	10800044 	addi	r2,r2,1
    92ac:	41000015 	stw	r4,0(r8)
    92b0:	44400115 	stw	r17,4(r8)
    92b4:	d8c02015 	stw	r3,128(sp)
    92b8:	d8801f15 	stw	r2,124(sp)
    92bc:	010001c4 	movi	r4,7
    92c0:	20bfd716 	blt	r4,r2,9220 <__alt_data_end+0xfffe9220>
    92c4:	42000204 	addi	r8,r8,8
    92c8:	003fdd06 	br	9240 <__alt_data_end+0xfffe9240>
    92cc:	d9002d17 	ldw	r4,180(sp)
    92d0:	d9801e04 	addi	r6,sp,120
    92d4:	b80b883a 	mov	r5,r23
    92d8:	000d9800 	call	d980 <__sprint_r>
    92dc:	1039bd1e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    92e0:	d8802617 	ldw	r2,152(sp)
    92e4:	d8c02017 	ldw	r3,128(sp)
    92e8:	da000404 	addi	r8,sp,16
    92ec:	003e1006 	br	8b30 <__alt_data_end+0xfffe8b30>
    92f0:	00800044 	movi	r2,1
    92f4:	10803fcc 	andi	r2,r2,255
    92f8:	00c00044 	movi	r3,1
    92fc:	10fa0d26 	beq	r2,r3,7b34 <__alt_data_end+0xfffe7b34>
    9300:	00c00084 	movi	r3,2
    9304:	10fbaf26 	beq	r2,r3,81c4 <__alt_data_end+0xfffe81c4>
    9308:	003a6d06 	br	7cc0 <__alt_data_end+0xfffe7cc0>
    930c:	01000074 	movhi	r4,1
    9310:	210c5484 	addi	r4,r4,12626
    9314:	d9003515 	stw	r4,212(sp)
    9318:	003b5406 	br	806c <__alt_data_end+0xfffe806c>
    931c:	d8802a17 	ldw	r2,168(sp)
    9320:	00c00184 	movi	r3,6
    9324:	1880012e 	bgeu	r3,r2,932c <___vfprintf_internal_r+0x1d68>
    9328:	1805883a 	mov	r2,r3
    932c:	d8802b15 	stw	r2,172(sp)
    9330:	1000ef16 	blt	r2,zero,96f0 <___vfprintf_internal_r+0x212c>
    9334:	04000074 	movhi	r16,1
    9338:	d8802915 	stw	r2,164(sp)
    933c:	dcc02e15 	stw	r19,184(sp)
    9340:	d8002a15 	stw	zero,168(sp)
    9344:	d8003215 	stw	zero,200(sp)
    9348:	840c4e04 	addi	r16,r16,12600
    934c:	0039883a 	mov	fp,zero
    9350:	003a8006 	br	7d54 <__alt_data_end+0xfffe7d54>
    9354:	0021883a 	mov	r16,zero
    9358:	003e0706 	br	8b78 <__alt_data_end+0xfffe8b78>
    935c:	d9002d17 	ldw	r4,180(sp)
    9360:	d9801e04 	addi	r6,sp,120
    9364:	b80b883a 	mov	r5,r23
    9368:	000d9800 	call	d980 <__sprint_r>
    936c:	1039991e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    9370:	d8802617 	ldw	r2,152(sp)
    9374:	d9403317 	ldw	r5,204(sp)
    9378:	d8c02017 	ldw	r3,128(sp)
    937c:	da000404 	addi	r8,sp,16
    9380:	2885c83a 	sub	r2,r5,r2
    9384:	003dfb06 	br	8b74 <__alt_data_end+0xfffe8b74>
    9388:	9080004c 	andi	r2,r18,1
    938c:	103e8f1e 	bne	r2,zero,8dcc <__alt_data_end+0xfffe8dcc>
    9390:	d8802117 	ldw	r2,132(sp)
    9394:	003e9e06 	br	8e10 <__alt_data_end+0xfffe8e10>
    9398:	1025883a 	mov	r18,r2
    939c:	0039883a 	mov	fp,zero
    93a0:	00800084 	movi	r2,2
    93a4:	003fd306 	br	92f4 <__alt_data_end+0xfffe92f4>
    93a8:	07000b44 	movi	fp,45
    93ac:	df002785 	stb	fp,158(sp)
    93b0:	003a1b06 	br	7c20 <__alt_data_end+0xfffe7c20>
    93b4:	00c00b44 	movi	r3,45
    93b8:	d8c02785 	stb	r3,158(sp)
    93bc:	d8802915 	stw	r2,164(sp)
    93c0:	dc802c17 	ldw	r18,176(sp)
    93c4:	d8002a15 	stw	zero,168(sp)
    93c8:	07000b44 	movi	fp,45
    93cc:	003a5e06 	br	7d48 <__alt_data_end+0xfffe7d48>
    93d0:	04000074 	movhi	r16,1
    93d4:	840c4304 	addi	r16,r16,12556
    93d8:	003f4706 	br	90f8 <__alt_data_end+0xfffe90f8>
    93dc:	d9002e17 	ldw	r4,184(sp)
    93e0:	d9402f17 	ldw	r5,188(sp)
    93e4:	20800017 	ldw	r2,0(r4)
    93e8:	21000104 	addi	r4,r4,4
    93ec:	d9002e15 	stw	r4,184(sp)
    93f0:	11400015 	stw	r5,0(r2)
    93f4:	0038ab06 	br	76a4 <__alt_data_end+0xfffe76a4>
    93f8:	dd802617 	ldw	r22,152(sp)
    93fc:	00bfff44 	movi	r2,-3
    9400:	b0801c16 	blt	r22,r2,9474 <___vfprintf_internal_r+0x1eb0>
    9404:	d9402a17 	ldw	r5,168(sp)
    9408:	2d801a16 	blt	r5,r22,9474 <___vfprintf_internal_r+0x1eb0>
    940c:	dd803215 	stw	r22,200(sp)
    9410:	003e8906 	br	8e38 <__alt_data_end+0xfffe8e38>
    9414:	01000074 	movhi	r4,1
    9418:	210c5084 	addi	r4,r4,12610
    941c:	d9002c15 	stw	r4,176(sp)
    9420:	003c9106 	br	8668 <__alt_data_end+0xfffe8668>
    9424:	e005883a 	mov	r2,fp
    9428:	003e7906 	br	8e10 <__alt_data_end+0xfffe8e10>
    942c:	d9002a17 	ldw	r4,168(sp)
    9430:	df002783 	ldbu	fp,158(sp)
    9434:	dcc02e15 	stw	r19,184(sp)
    9438:	d9002915 	stw	r4,164(sp)
    943c:	d9002b15 	stw	r4,172(sp)
    9440:	d8002a15 	stw	zero,168(sp)
    9444:	d8003215 	stw	zero,200(sp)
    9448:	003a3b06 	br	7d38 <__alt_data_end+0xfffe7d38>
    944c:	9080004c 	andi	r2,r18,1
    9450:	0039883a 	mov	fp,zero
    9454:	10000426 	beq	r2,zero,9468 <___vfprintf_internal_r+0x1ea4>
    9458:	00800c04 	movi	r2,48
    945c:	dc001dc4 	addi	r16,sp,119
    9460:	d8801dc5 	stb	r2,119(sp)
    9464:	003b6406 	br	81f8 <__alt_data_end+0xfffe81f8>
    9468:	d8002b15 	stw	zero,172(sp)
    946c:	dc001e04 	addi	r16,sp,120
    9470:	003a2b06 	br	7d20 <__alt_data_end+0xfffe7d20>
    9474:	8c7fff84 	addi	r17,r17,-2
    9478:	b5bfffc4 	addi	r22,r22,-1
    947c:	dd802615 	stw	r22,152(sp)
    9480:	dc4022c5 	stb	r17,139(sp)
    9484:	b000bf16 	blt	r22,zero,9784 <___vfprintf_internal_r+0x21c0>
    9488:	00800ac4 	movi	r2,43
    948c:	d8802305 	stb	r2,140(sp)
    9490:	00800244 	movi	r2,9
    9494:	15807016 	blt	r2,r22,9658 <___vfprintf_internal_r+0x2094>
    9498:	00800c04 	movi	r2,48
    949c:	b5800c04 	addi	r22,r22,48
    94a0:	d8802345 	stb	r2,141(sp)
    94a4:	dd802385 	stb	r22,142(sp)
    94a8:	d88023c4 	addi	r2,sp,143
    94ac:	df0022c4 	addi	fp,sp,139
    94b0:	d8c03317 	ldw	r3,204(sp)
    94b4:	1739c83a 	sub	fp,r2,fp
    94b8:	d9003317 	ldw	r4,204(sp)
    94bc:	e0c7883a 	add	r3,fp,r3
    94c0:	df003a15 	stw	fp,232(sp)
    94c4:	d8c02b15 	stw	r3,172(sp)
    94c8:	00800044 	movi	r2,1
    94cc:	1100b30e 	bge	r2,r4,979c <___vfprintf_internal_r+0x21d8>
    94d0:	d8c02b17 	ldw	r3,172(sp)
    94d4:	18c00044 	addi	r3,r3,1
    94d8:	d8c02b15 	stw	r3,172(sp)
    94dc:	1805883a 	mov	r2,r3
    94e0:	1800ac16 	blt	r3,zero,9794 <___vfprintf_internal_r+0x21d0>
    94e4:	d8003215 	stw	zero,200(sp)
    94e8:	003e5d06 	br	8e60 <__alt_data_end+0xfffe8e60>
    94ec:	d9002d17 	ldw	r4,180(sp)
    94f0:	d9801e04 	addi	r6,sp,120
    94f4:	b80b883a 	mov	r5,r23
    94f8:	000d9800 	call	d980 <__sprint_r>
    94fc:	1039351e 	bne	r2,zero,79d4 <__alt_data_end+0xfffe79d4>
    9500:	dc402617 	ldw	r17,152(sp)
    9504:	d8c02017 	ldw	r3,128(sp)
    9508:	d8801f17 	ldw	r2,124(sp)
    950c:	da000404 	addi	r8,sp,16
    9510:	003ed606 	br	906c <__alt_data_end+0xfffe906c>
    9514:	182b883a 	mov	r21,r3
    9518:	d8002a15 	stw	zero,168(sp)
    951c:	00388c06 	br	7750 <__alt_data_end+0xfffe7750>
    9520:	d8802a17 	ldw	r2,168(sp)
    9524:	103e071e 	bne	r2,zero,8d44 <__alt_data_end+0xfffe8d44>
    9528:	dc002a15 	stw	r16,168(sp)
    952c:	003e0506 	br	8d44 <__alt_data_end+0xfffe8d44>
    9530:	d9002a17 	ldw	r4,168(sp)
    9534:	20c00044 	addi	r3,r4,1
    9538:	003e0f06 	br	8d78 <__alt_data_end+0xfffe8d78>
    953c:	01400184 	movi	r5,6
    9540:	d9402a15 	stw	r5,168(sp)
    9544:	003dff06 	br	8d44 <__alt_data_end+0xfffe8d44>
    9548:	d8802104 	addi	r2,sp,132
    954c:	d8800315 	stw	r2,12(sp)
    9550:	d8802504 	addi	r2,sp,148
    9554:	d8800215 	stw	r2,8(sp)
    9558:	d8802604 	addi	r2,sp,152
    955c:	d8800115 	stw	r2,4(sp)
    9560:	d8802a17 	ldw	r2,168(sp)
    9564:	d9403617 	ldw	r5,216(sp)
    9568:	d9002d17 	ldw	r4,180(sp)
    956c:	d8800015 	stw	r2,0(sp)
    9570:	01c000c4 	movi	r7,3
    9574:	980d883a 	mov	r6,r19
    9578:	da003d15 	stw	r8,244(sp)
    957c:	0009f280 	call	9f28 <_dtoa_r>
    9580:	d8c02a17 	ldw	r3,168(sp)
    9584:	da003d17 	ldw	r8,244(sp)
    9588:	1021883a 	mov	r16,r2
    958c:	10f9883a 	add	fp,r2,r3
    9590:	81000007 	ldb	r4,0(r16)
    9594:	00800c04 	movi	r2,48
    9598:	20805e26 	beq	r4,r2,9714 <___vfprintf_internal_r+0x2150>
    959c:	d8c02617 	ldw	r3,152(sp)
    95a0:	e0f9883a 	add	fp,fp,r3
    95a4:	003e0a06 	br	8dd0 <__alt_data_end+0xfffe8dd0>
    95a8:	00c00b44 	movi	r3,45
    95ac:	24e0003c 	xorhi	r19,r4,32768
    95b0:	d8c02905 	stb	r3,164(sp)
    95b4:	003de906 	br	8d5c <__alt_data_end+0xfffe8d5c>
    95b8:	d8c03217 	ldw	r3,200(sp)
    95bc:	00c07a0e 	bge	zero,r3,97a8 <___vfprintf_internal_r+0x21e4>
    95c0:	00800044 	movi	r2,1
    95c4:	d9003317 	ldw	r4,204(sp)
    95c8:	1105883a 	add	r2,r2,r4
    95cc:	d8802b15 	stw	r2,172(sp)
    95d0:	10004e16 	blt	r2,zero,970c <___vfprintf_internal_r+0x2148>
    95d4:	044019c4 	movi	r17,103
    95d8:	003e2106 	br	8e60 <__alt_data_end+0xfffe8e60>
    95dc:	d9002a17 	ldw	r4,168(sp)
    95e0:	d8802104 	addi	r2,sp,132
    95e4:	d8800315 	stw	r2,12(sp)
    95e8:	d9000015 	stw	r4,0(sp)
    95ec:	d8802504 	addi	r2,sp,148
    95f0:	d9403617 	ldw	r5,216(sp)
    95f4:	d9002d17 	ldw	r4,180(sp)
    95f8:	d8800215 	stw	r2,8(sp)
    95fc:	d8802604 	addi	r2,sp,152
    9600:	d8800115 	stw	r2,4(sp)
    9604:	01c000c4 	movi	r7,3
    9608:	980d883a 	mov	r6,r19
    960c:	da003d15 	stw	r8,244(sp)
    9610:	0009f280 	call	9f28 <_dtoa_r>
    9614:	d8c02a17 	ldw	r3,168(sp)
    9618:	da003d17 	ldw	r8,244(sp)
    961c:	1021883a 	mov	r16,r2
    9620:	00801184 	movi	r2,70
    9624:	80f9883a 	add	fp,r16,r3
    9628:	88bfd926 	beq	r17,r2,9590 <__alt_data_end+0xfffe9590>
    962c:	003de806 	br	8dd0 <__alt_data_end+0xfffe8dd0>
    9630:	d9002a17 	ldw	r4,168(sp)
    9634:	00c04d0e 	bge	zero,r3,976c <___vfprintf_internal_r+0x21a8>
    9638:	2000441e 	bne	r4,zero,974c <___vfprintf_internal_r+0x2188>
    963c:	9480004c 	andi	r18,r18,1
    9640:	9000421e 	bne	r18,zero,974c <___vfprintf_internal_r+0x2188>
    9644:	1805883a 	mov	r2,r3
    9648:	18006f16 	blt	r3,zero,9808 <___vfprintf_internal_r+0x2244>
    964c:	d8c03217 	ldw	r3,200(sp)
    9650:	d8c02b15 	stw	r3,172(sp)
    9654:	003e0206 	br	8e60 <__alt_data_end+0xfffe8e60>
    9658:	df0022c4 	addi	fp,sp,139
    965c:	dc002a15 	stw	r16,168(sp)
    9660:	4027883a 	mov	r19,r8
    9664:	e021883a 	mov	r16,fp
    9668:	b009883a 	mov	r4,r22
    966c:	01400284 	movi	r5,10
    9670:	0004ae00 	call	4ae0 <__modsi3>
    9674:	10800c04 	addi	r2,r2,48
    9678:	843fffc4 	addi	r16,r16,-1
    967c:	b009883a 	mov	r4,r22
    9680:	01400284 	movi	r5,10
    9684:	80800005 	stb	r2,0(r16)
    9688:	0004a5c0 	call	4a5c <__divsi3>
    968c:	102d883a 	mov	r22,r2
    9690:	00800244 	movi	r2,9
    9694:	15bff416 	blt	r2,r22,9668 <__alt_data_end+0xfffe9668>
    9698:	9811883a 	mov	r8,r19
    969c:	b0800c04 	addi	r2,r22,48
    96a0:	8027883a 	mov	r19,r16
    96a4:	997fffc4 	addi	r5,r19,-1
    96a8:	98bfffc5 	stb	r2,-1(r19)
    96ac:	dc002a17 	ldw	r16,168(sp)
    96b0:	2f006d2e 	bgeu	r5,fp,9868 <___vfprintf_internal_r+0x22a4>
    96b4:	d9c02384 	addi	r7,sp,142
    96b8:	3ccfc83a 	sub	r7,r7,r19
    96bc:	d9002344 	addi	r4,sp,141
    96c0:	e1cf883a 	add	r7,fp,r7
    96c4:	00000106 	br	96cc <___vfprintf_internal_r+0x2108>
    96c8:	28800003 	ldbu	r2,0(r5)
    96cc:	20800005 	stb	r2,0(r4)
    96d0:	21000044 	addi	r4,r4,1
    96d4:	29400044 	addi	r5,r5,1
    96d8:	393ffb1e 	bne	r7,r4,96c8 <__alt_data_end+0xfffe96c8>
    96dc:	d8802304 	addi	r2,sp,140
    96e0:	14c5c83a 	sub	r2,r2,r19
    96e4:	d8c02344 	addi	r3,sp,141
    96e8:	1885883a 	add	r2,r3,r2
    96ec:	003f7006 	br	94b0 <__alt_data_end+0xfffe94b0>
    96f0:	0005883a 	mov	r2,zero
    96f4:	003f0f06 	br	9334 <__alt_data_end+0xfffe9334>
    96f8:	d8c03217 	ldw	r3,200(sp)
    96fc:	18c00044 	addi	r3,r3,1
    9700:	d8c02b15 	stw	r3,172(sp)
    9704:	1805883a 	mov	r2,r3
    9708:	183fb20e 	bge	r3,zero,95d4 <__alt_data_end+0xfffe95d4>
    970c:	0005883a 	mov	r2,zero
    9710:	003fb006 	br	95d4 <__alt_data_end+0xfffe95d4>
    9714:	d9003617 	ldw	r4,216(sp)
    9718:	000d883a 	mov	r6,zero
    971c:	000f883a 	mov	r7,zero
    9720:	980b883a 	mov	r5,r19
    9724:	d8c03c15 	stw	r3,240(sp)
    9728:	da003d15 	stw	r8,244(sp)
    972c:	001026c0 	call	1026c <__eqdf2>
    9730:	d8c03c17 	ldw	r3,240(sp)
    9734:	da003d17 	ldw	r8,244(sp)
    9738:	103f9826 	beq	r2,zero,959c <__alt_data_end+0xfffe959c>
    973c:	00800044 	movi	r2,1
    9740:	10c7c83a 	sub	r3,r2,r3
    9744:	d8c02615 	stw	r3,152(sp)
    9748:	003f9506 	br	95a0 <__alt_data_end+0xfffe95a0>
    974c:	d9002a17 	ldw	r4,168(sp)
    9750:	d8c03217 	ldw	r3,200(sp)
    9754:	20800044 	addi	r2,r4,1
    9758:	1885883a 	add	r2,r3,r2
    975c:	d8802b15 	stw	r2,172(sp)
    9760:	103dbf0e 	bge	r2,zero,8e60 <__alt_data_end+0xfffe8e60>
    9764:	0005883a 	mov	r2,zero
    9768:	003dbd06 	br	8e60 <__alt_data_end+0xfffe8e60>
    976c:	2000201e 	bne	r4,zero,97f0 <___vfprintf_internal_r+0x222c>
    9770:	9480004c 	andi	r18,r18,1
    9774:	90001e1e 	bne	r18,zero,97f0 <___vfprintf_internal_r+0x222c>
    9778:	00800044 	movi	r2,1
    977c:	d8802b15 	stw	r2,172(sp)
    9780:	003db706 	br	8e60 <__alt_data_end+0xfffe8e60>
    9784:	00800b44 	movi	r2,45
    9788:	05adc83a 	sub	r22,zero,r22
    978c:	d8802305 	stb	r2,140(sp)
    9790:	003f3f06 	br	9490 <__alt_data_end+0xfffe9490>
    9794:	0005883a 	mov	r2,zero
    9798:	003f5206 	br	94e4 <__alt_data_end+0xfffe94e4>
    979c:	90a4703a 	and	r18,r18,r2
    97a0:	903f4e26 	beq	r18,zero,94dc <__alt_data_end+0xfffe94dc>
    97a4:	003f4a06 	br	94d0 <__alt_data_end+0xfffe94d0>
    97a8:	00800084 	movi	r2,2
    97ac:	10c5c83a 	sub	r2,r2,r3
    97b0:	003f8406 	br	95c4 <__alt_data_end+0xfffe95c4>
    97b4:	d9402e17 	ldw	r5,184(sp)
    97b8:	d9002e17 	ldw	r4,184(sp)
    97bc:	ac400043 	ldbu	r17,1(r21)
    97c0:	29400017 	ldw	r5,0(r5)
    97c4:	20800104 	addi	r2,r4,4
    97c8:	d8802e15 	stw	r2,184(sp)
    97cc:	d9402a15 	stw	r5,168(sp)
    97d0:	182b883a 	mov	r21,r3
    97d4:	283e7b0e 	bge	r5,zero,91c4 <__alt_data_end+0xfffe91c4>
    97d8:	8c403fcc 	andi	r17,r17,255
    97dc:	017fffc4 	movi	r5,-1
    97e0:	8c40201c 	xori	r17,r17,128
    97e4:	d9402a15 	stw	r5,168(sp)
    97e8:	8c7fe004 	addi	r17,r17,-128
    97ec:	0037d706 	br	774c <__alt_data_end+0xfffe774c>
    97f0:	d8c02a17 	ldw	r3,168(sp)
    97f4:	18c00084 	addi	r3,r3,2
    97f8:	d8c02b15 	stw	r3,172(sp)
    97fc:	1805883a 	mov	r2,r3
    9800:	183d970e 	bge	r3,zero,8e60 <__alt_data_end+0xfffe8e60>
    9804:	003fd706 	br	9764 <__alt_data_end+0xfffe9764>
    9808:	0005883a 	mov	r2,zero
    980c:	003f8f06 	br	964c <__alt_data_end+0xfffe964c>
    9810:	9080004c 	andi	r2,r18,1
    9814:	103f821e 	bne	r2,zero,9620 <__alt_data_end+0xfffe9620>
    9818:	d8802117 	ldw	r2,132(sp)
    981c:	1405c83a 	sub	r2,r2,r16
    9820:	d8803315 	stw	r2,204(sp)
    9824:	b47ef426 	beq	r22,r17,93f8 <__alt_data_end+0xfffe93f8>
    9828:	dd802617 	ldw	r22,152(sp)
    982c:	003f1206 	br	9478 <__alt_data_end+0xfffe9478>
    9830:	d8c02b03 	ldbu	r3,172(sp)
    9834:	d8c02785 	stb	r3,158(sp)
    9838:	0038df06 	br	7bb8 <__alt_data_end+0xfffe7bb8>
    983c:	d8c02b03 	ldbu	r3,172(sp)
    9840:	d8c02785 	stb	r3,158(sp)
    9844:	0038aa06 	br	7af0 <__alt_data_end+0xfffe7af0>
    9848:	d8c02b03 	ldbu	r3,172(sp)
    984c:	d8c02785 	stb	r3,158(sp)
    9850:	003a4306 	br	8160 <__alt_data_end+0xfffe8160>
    9854:	d8c02b03 	ldbu	r3,172(sp)
    9858:	d8c02785 	stb	r3,158(sp)
    985c:	003af506 	br	8434 <__alt_data_end+0xfffe8434>
    9860:	0005883a 	mov	r2,zero
    9864:	003d7b06 	br	8e54 <__alt_data_end+0xfffe8e54>
    9868:	d8802344 	addi	r2,sp,141
    986c:	003f1006 	br	94b0 <__alt_data_end+0xfffe94b0>
    9870:	d8c02b03 	ldbu	r3,172(sp)
    9874:	d8c02785 	stb	r3,158(sp)
    9878:	0038fd06 	br	7c70 <__alt_data_end+0xfffe7c70>
    987c:	d8c02b03 	ldbu	r3,172(sp)
    9880:	d8c02785 	stb	r3,158(sp)
    9884:	003a9706 	br	82e4 <__alt_data_end+0xfffe82e4>
    9888:	d8c02b03 	ldbu	r3,172(sp)
    988c:	d8c02785 	stb	r3,158(sp)
    9890:	003a1806 	br	80f4 <__alt_data_end+0xfffe80f4>
    9894:	d8c02b03 	ldbu	r3,172(sp)
    9898:	d8c02785 	stb	r3,158(sp)
    989c:	003abe06 	br	8398 <__alt_data_end+0xfffe8398>

000098a0 <__vfprintf_internal>:
    98a0:	00800074 	movhi	r2,1
    98a4:	10936d04 	addi	r2,r2,19892
    98a8:	300f883a 	mov	r7,r6
    98ac:	280d883a 	mov	r6,r5
    98b0:	200b883a 	mov	r5,r4
    98b4:	11000017 	ldw	r4,0(r2)
    98b8:	00075c41 	jmpi	75c4 <___vfprintf_internal_r>

000098bc <__sbprintf>:
    98bc:	2880030b 	ldhu	r2,12(r5)
    98c0:	2ac01917 	ldw	r11,100(r5)
    98c4:	2a80038b 	ldhu	r10,14(r5)
    98c8:	2a400717 	ldw	r9,28(r5)
    98cc:	2a000917 	ldw	r8,36(r5)
    98d0:	defee204 	addi	sp,sp,-1144
    98d4:	00c10004 	movi	r3,1024
    98d8:	dc011a15 	stw	r16,1128(sp)
    98dc:	10bfff4c 	andi	r2,r2,65533
    98e0:	2821883a 	mov	r16,r5
    98e4:	d8cb883a 	add	r5,sp,r3
    98e8:	dc811c15 	stw	r18,1136(sp)
    98ec:	dc411b15 	stw	r17,1132(sp)
    98f0:	dfc11d15 	stw	ra,1140(sp)
    98f4:	2025883a 	mov	r18,r4
    98f8:	d881030d 	sth	r2,1036(sp)
    98fc:	dac11915 	stw	r11,1124(sp)
    9900:	da81038d 	sth	r10,1038(sp)
    9904:	da410715 	stw	r9,1052(sp)
    9908:	da010915 	stw	r8,1060(sp)
    990c:	dec10015 	stw	sp,1024(sp)
    9910:	dec10415 	stw	sp,1040(sp)
    9914:	d8c10215 	stw	r3,1032(sp)
    9918:	d8c10515 	stw	r3,1044(sp)
    991c:	d8010615 	stw	zero,1048(sp)
    9920:	00075c40 	call	75c4 <___vfprintf_internal_r>
    9924:	1023883a 	mov	r17,r2
    9928:	10000416 	blt	r2,zero,993c <__sbprintf+0x80>
    992c:	d9410004 	addi	r5,sp,1024
    9930:	9009883a 	mov	r4,r18
    9934:	0004f840 	call	4f84 <_fflush_r>
    9938:	10000d1e 	bne	r2,zero,9970 <__sbprintf+0xb4>
    993c:	d881030b 	ldhu	r2,1036(sp)
    9940:	1080100c 	andi	r2,r2,64
    9944:	10000326 	beq	r2,zero,9954 <__sbprintf+0x98>
    9948:	8080030b 	ldhu	r2,12(r16)
    994c:	10801014 	ori	r2,r2,64
    9950:	8080030d 	sth	r2,12(r16)
    9954:	8805883a 	mov	r2,r17
    9958:	dfc11d17 	ldw	ra,1140(sp)
    995c:	dc811c17 	ldw	r18,1136(sp)
    9960:	dc411b17 	ldw	r17,1132(sp)
    9964:	dc011a17 	ldw	r16,1128(sp)
    9968:	dec11e04 	addi	sp,sp,1144
    996c:	f800283a 	ret
    9970:	047fffc4 	movi	r17,-1
    9974:	003ff106 	br	993c <__alt_data_end+0xfffe993c>

00009978 <_write_r>:
    9978:	defffd04 	addi	sp,sp,-12
    997c:	2805883a 	mov	r2,r5
    9980:	dc000015 	stw	r16,0(sp)
    9984:	04000074 	movhi	r16,1
    9988:	dc400115 	stw	r17,4(sp)
    998c:	300b883a 	mov	r5,r6
    9990:	841a3a04 	addi	r16,r16,26856
    9994:	2023883a 	mov	r17,r4
    9998:	380d883a 	mov	r6,r7
    999c:	1009883a 	mov	r4,r2
    99a0:	dfc00215 	stw	ra,8(sp)
    99a4:	80000015 	stw	zero,0(r16)
    99a8:	00113f40 	call	113f4 <write>
    99ac:	00ffffc4 	movi	r3,-1
    99b0:	10c00526 	beq	r2,r3,99c8 <_write_r+0x50>
    99b4:	dfc00217 	ldw	ra,8(sp)
    99b8:	dc400117 	ldw	r17,4(sp)
    99bc:	dc000017 	ldw	r16,0(sp)
    99c0:	dec00304 	addi	sp,sp,12
    99c4:	f800283a 	ret
    99c8:	80c00017 	ldw	r3,0(r16)
    99cc:	183ff926 	beq	r3,zero,99b4 <__alt_data_end+0xfffe99b4>
    99d0:	88c00015 	stw	r3,0(r17)
    99d4:	003ff706 	br	99b4 <__alt_data_end+0xfffe99b4>

000099d8 <__swsetup_r>:
    99d8:	00800074 	movhi	r2,1
    99dc:	defffd04 	addi	sp,sp,-12
    99e0:	10936d04 	addi	r2,r2,19892
    99e4:	dc400115 	stw	r17,4(sp)
    99e8:	2023883a 	mov	r17,r4
    99ec:	11000017 	ldw	r4,0(r2)
    99f0:	dc000015 	stw	r16,0(sp)
    99f4:	dfc00215 	stw	ra,8(sp)
    99f8:	2821883a 	mov	r16,r5
    99fc:	20000226 	beq	r4,zero,9a08 <__swsetup_r+0x30>
    9a00:	20800e17 	ldw	r2,56(r4)
    9a04:	10003126 	beq	r2,zero,9acc <__swsetup_r+0xf4>
    9a08:	8080030b 	ldhu	r2,12(r16)
    9a0c:	10c0020c 	andi	r3,r2,8
    9a10:	1009883a 	mov	r4,r2
    9a14:	18000f26 	beq	r3,zero,9a54 <__swsetup_r+0x7c>
    9a18:	80c00417 	ldw	r3,16(r16)
    9a1c:	18001526 	beq	r3,zero,9a74 <__swsetup_r+0x9c>
    9a20:	1100004c 	andi	r4,r2,1
    9a24:	20001c1e 	bne	r4,zero,9a98 <__swsetup_r+0xc0>
    9a28:	1080008c 	andi	r2,r2,2
    9a2c:	1000291e 	bne	r2,zero,9ad4 <__swsetup_r+0xfc>
    9a30:	80800517 	ldw	r2,20(r16)
    9a34:	80800215 	stw	r2,8(r16)
    9a38:	18001c26 	beq	r3,zero,9aac <__swsetup_r+0xd4>
    9a3c:	0005883a 	mov	r2,zero
    9a40:	dfc00217 	ldw	ra,8(sp)
    9a44:	dc400117 	ldw	r17,4(sp)
    9a48:	dc000017 	ldw	r16,0(sp)
    9a4c:	dec00304 	addi	sp,sp,12
    9a50:	f800283a 	ret
    9a54:	2080040c 	andi	r2,r4,16
    9a58:	10002e26 	beq	r2,zero,9b14 <__swsetup_r+0x13c>
    9a5c:	2080010c 	andi	r2,r4,4
    9a60:	10001e1e 	bne	r2,zero,9adc <__swsetup_r+0x104>
    9a64:	80c00417 	ldw	r3,16(r16)
    9a68:	20800214 	ori	r2,r4,8
    9a6c:	8080030d 	sth	r2,12(r16)
    9a70:	183feb1e 	bne	r3,zero,9a20 <__alt_data_end+0xfffe9a20>
    9a74:	1100a00c 	andi	r4,r2,640
    9a78:	01408004 	movi	r5,512
    9a7c:	217fe826 	beq	r4,r5,9a20 <__alt_data_end+0xfffe9a20>
    9a80:	800b883a 	mov	r5,r16
    9a84:	8809883a 	mov	r4,r17
    9a88:	00061d40 	call	61d4 <__smakebuf_r>
    9a8c:	8080030b 	ldhu	r2,12(r16)
    9a90:	80c00417 	ldw	r3,16(r16)
    9a94:	003fe206 	br	9a20 <__alt_data_end+0xfffe9a20>
    9a98:	80800517 	ldw	r2,20(r16)
    9a9c:	80000215 	stw	zero,8(r16)
    9aa0:	0085c83a 	sub	r2,zero,r2
    9aa4:	80800615 	stw	r2,24(r16)
    9aa8:	183fe41e 	bne	r3,zero,9a3c <__alt_data_end+0xfffe9a3c>
    9aac:	80c0030b 	ldhu	r3,12(r16)
    9ab0:	0005883a 	mov	r2,zero
    9ab4:	1900200c 	andi	r4,r3,128
    9ab8:	203fe126 	beq	r4,zero,9a40 <__alt_data_end+0xfffe9a40>
    9abc:	18c01014 	ori	r3,r3,64
    9ac0:	80c0030d 	sth	r3,12(r16)
    9ac4:	00bfffc4 	movi	r2,-1
    9ac8:	003fdd06 	br	9a40 <__alt_data_end+0xfffe9a40>
    9acc:	00053700 	call	5370 <__sinit>
    9ad0:	003fcd06 	br	9a08 <__alt_data_end+0xfffe9a08>
    9ad4:	0005883a 	mov	r2,zero
    9ad8:	003fd606 	br	9a34 <__alt_data_end+0xfffe9a34>
    9adc:	81400c17 	ldw	r5,48(r16)
    9ae0:	28000626 	beq	r5,zero,9afc <__swsetup_r+0x124>
    9ae4:	80801004 	addi	r2,r16,64
    9ae8:	28800326 	beq	r5,r2,9af8 <__swsetup_r+0x120>
    9aec:	8809883a 	mov	r4,r17
    9af0:	00058600 	call	5860 <_free_r>
    9af4:	8100030b 	ldhu	r4,12(r16)
    9af8:	80000c15 	stw	zero,48(r16)
    9afc:	80c00417 	ldw	r3,16(r16)
    9b00:	00bff6c4 	movi	r2,-37
    9b04:	1108703a 	and	r4,r2,r4
    9b08:	80000115 	stw	zero,4(r16)
    9b0c:	80c00015 	stw	r3,0(r16)
    9b10:	003fd506 	br	9a68 <__alt_data_end+0xfffe9a68>
    9b14:	00800244 	movi	r2,9
    9b18:	88800015 	stw	r2,0(r17)
    9b1c:	20801014 	ori	r2,r4,64
    9b20:	8080030d 	sth	r2,12(r16)
    9b24:	00bfffc4 	movi	r2,-1
    9b28:	003fc506 	br	9a40 <__alt_data_end+0xfffe9a40>

00009b2c <_close_r>:
    9b2c:	defffd04 	addi	sp,sp,-12
    9b30:	dc000015 	stw	r16,0(sp)
    9b34:	04000074 	movhi	r16,1
    9b38:	dc400115 	stw	r17,4(sp)
    9b3c:	841a3a04 	addi	r16,r16,26856
    9b40:	2023883a 	mov	r17,r4
    9b44:	2809883a 	mov	r4,r5
    9b48:	dfc00215 	stw	ra,8(sp)
    9b4c:	80000015 	stw	zero,0(r16)
    9b50:	001054c0 	call	1054c <close>
    9b54:	00ffffc4 	movi	r3,-1
    9b58:	10c00526 	beq	r2,r3,9b70 <_close_r+0x44>
    9b5c:	dfc00217 	ldw	ra,8(sp)
    9b60:	dc400117 	ldw	r17,4(sp)
    9b64:	dc000017 	ldw	r16,0(sp)
    9b68:	dec00304 	addi	sp,sp,12
    9b6c:	f800283a 	ret
    9b70:	80c00017 	ldw	r3,0(r16)
    9b74:	183ff926 	beq	r3,zero,9b5c <__alt_data_end+0xfffe9b5c>
    9b78:	88c00015 	stw	r3,0(r17)
    9b7c:	003ff706 	br	9b5c <__alt_data_end+0xfffe9b5c>

00009b80 <__call_exitprocs>:
    9b80:	defff504 	addi	sp,sp,-44
    9b84:	df000915 	stw	fp,36(sp)
    9b88:	dd400615 	stw	r21,24(sp)
    9b8c:	dc800315 	stw	r18,12(sp)
    9b90:	dfc00a15 	stw	ra,40(sp)
    9b94:	ddc00815 	stw	r23,32(sp)
    9b98:	dd800715 	stw	r22,28(sp)
    9b9c:	dd000515 	stw	r20,20(sp)
    9ba0:	dcc00415 	stw	r19,16(sp)
    9ba4:	dc400215 	stw	r17,8(sp)
    9ba8:	dc000115 	stw	r16,4(sp)
    9bac:	d9000015 	stw	r4,0(sp)
    9bb0:	2839883a 	mov	fp,r5
    9bb4:	04800044 	movi	r18,1
    9bb8:	057fffc4 	movi	r21,-1
    9bbc:	00800074 	movhi	r2,1
    9bc0:	10936c04 	addi	r2,r2,19888
    9bc4:	12000017 	ldw	r8,0(r2)
    9bc8:	45005217 	ldw	r20,328(r8)
    9bcc:	44c05204 	addi	r19,r8,328
    9bd0:	a0001c26 	beq	r20,zero,9c44 <__call_exitprocs+0xc4>
    9bd4:	a0800117 	ldw	r2,4(r20)
    9bd8:	15ffffc4 	addi	r23,r2,-1
    9bdc:	b8000d16 	blt	r23,zero,9c14 <__call_exitprocs+0x94>
    9be0:	14000044 	addi	r16,r2,1
    9be4:	8421883a 	add	r16,r16,r16
    9be8:	8421883a 	add	r16,r16,r16
    9bec:	84402004 	addi	r17,r16,128
    9bf0:	a463883a 	add	r17,r20,r17
    9bf4:	a421883a 	add	r16,r20,r16
    9bf8:	e0001e26 	beq	fp,zero,9c74 <__call_exitprocs+0xf4>
    9bfc:	80804017 	ldw	r2,256(r16)
    9c00:	e0801c26 	beq	fp,r2,9c74 <__call_exitprocs+0xf4>
    9c04:	bdffffc4 	addi	r23,r23,-1
    9c08:	843fff04 	addi	r16,r16,-4
    9c0c:	8c7fff04 	addi	r17,r17,-4
    9c10:	bd7ff91e 	bne	r23,r21,9bf8 <__alt_data_end+0xfffe9bf8>
    9c14:	00800034 	movhi	r2,0
    9c18:	10800004 	addi	r2,r2,0
    9c1c:	10000926 	beq	r2,zero,9c44 <__call_exitprocs+0xc4>
    9c20:	a0800117 	ldw	r2,4(r20)
    9c24:	1000301e 	bne	r2,zero,9ce8 <__call_exitprocs+0x168>
    9c28:	a0800017 	ldw	r2,0(r20)
    9c2c:	10003226 	beq	r2,zero,9cf8 <__call_exitprocs+0x178>
    9c30:	a009883a 	mov	r4,r20
    9c34:	98800015 	stw	r2,0(r19)
    9c38:	00000000 	call	0 <__reset>
    9c3c:	9d000017 	ldw	r20,0(r19)
    9c40:	a03fe41e 	bne	r20,zero,9bd4 <__alt_data_end+0xfffe9bd4>
    9c44:	dfc00a17 	ldw	ra,40(sp)
    9c48:	df000917 	ldw	fp,36(sp)
    9c4c:	ddc00817 	ldw	r23,32(sp)
    9c50:	dd800717 	ldw	r22,28(sp)
    9c54:	dd400617 	ldw	r21,24(sp)
    9c58:	dd000517 	ldw	r20,20(sp)
    9c5c:	dcc00417 	ldw	r19,16(sp)
    9c60:	dc800317 	ldw	r18,12(sp)
    9c64:	dc400217 	ldw	r17,8(sp)
    9c68:	dc000117 	ldw	r16,4(sp)
    9c6c:	dec00b04 	addi	sp,sp,44
    9c70:	f800283a 	ret
    9c74:	a0800117 	ldw	r2,4(r20)
    9c78:	80c00017 	ldw	r3,0(r16)
    9c7c:	10bfffc4 	addi	r2,r2,-1
    9c80:	15c01426 	beq	r2,r23,9cd4 <__call_exitprocs+0x154>
    9c84:	80000015 	stw	zero,0(r16)
    9c88:	183fde26 	beq	r3,zero,9c04 <__alt_data_end+0xfffe9c04>
    9c8c:	95c8983a 	sll	r4,r18,r23
    9c90:	a0806217 	ldw	r2,392(r20)
    9c94:	a5800117 	ldw	r22,4(r20)
    9c98:	2084703a 	and	r2,r4,r2
    9c9c:	10000b26 	beq	r2,zero,9ccc <__call_exitprocs+0x14c>
    9ca0:	a0806317 	ldw	r2,396(r20)
    9ca4:	2088703a 	and	r4,r4,r2
    9ca8:	20000c1e 	bne	r4,zero,9cdc <__call_exitprocs+0x15c>
    9cac:	89400017 	ldw	r5,0(r17)
    9cb0:	d9000017 	ldw	r4,0(sp)
    9cb4:	183ee83a 	callr	r3
    9cb8:	a0800117 	ldw	r2,4(r20)
    9cbc:	15bfbf1e 	bne	r2,r22,9bbc <__alt_data_end+0xfffe9bbc>
    9cc0:	98800017 	ldw	r2,0(r19)
    9cc4:	153fcf26 	beq	r2,r20,9c04 <__alt_data_end+0xfffe9c04>
    9cc8:	003fbc06 	br	9bbc <__alt_data_end+0xfffe9bbc>
    9ccc:	183ee83a 	callr	r3
    9cd0:	003ff906 	br	9cb8 <__alt_data_end+0xfffe9cb8>
    9cd4:	a5c00115 	stw	r23,4(r20)
    9cd8:	003feb06 	br	9c88 <__alt_data_end+0xfffe9c88>
    9cdc:	89000017 	ldw	r4,0(r17)
    9ce0:	183ee83a 	callr	r3
    9ce4:	003ff406 	br	9cb8 <__alt_data_end+0xfffe9cb8>
    9ce8:	a0800017 	ldw	r2,0(r20)
    9cec:	a027883a 	mov	r19,r20
    9cf0:	1029883a 	mov	r20,r2
    9cf4:	003fb606 	br	9bd0 <__alt_data_end+0xfffe9bd0>
    9cf8:	0005883a 	mov	r2,zero
    9cfc:	003ffb06 	br	9cec <__alt_data_end+0xfffe9cec>

00009d00 <quorem>:
    9d00:	defff204 	addi	sp,sp,-56
    9d04:	ddc00b15 	stw	r23,44(sp)
    9d08:	20800417 	ldw	r2,16(r4)
    9d0c:	2dc00417 	ldw	r23,16(r5)
    9d10:	dfc00d15 	stw	ra,52(sp)
    9d14:	df000c15 	stw	fp,48(sp)
    9d18:	dd800a15 	stw	r22,40(sp)
    9d1c:	dd400915 	stw	r21,36(sp)
    9d20:	dd000815 	stw	r20,32(sp)
    9d24:	dcc00715 	stw	r19,28(sp)
    9d28:	dc800615 	stw	r18,24(sp)
    9d2c:	dc400515 	stw	r17,20(sp)
    9d30:	dc000415 	stw	r16,16(sp)
    9d34:	15c07a16 	blt	r2,r23,9f20 <quorem+0x220>
    9d38:	bdffffc4 	addi	r23,r23,-1
    9d3c:	bde9883a 	add	r20,r23,r23
    9d40:	28c00504 	addi	r3,r5,20
    9d44:	a529883a 	add	r20,r20,r20
    9d48:	1d39883a 	add	fp,r3,r20
    9d4c:	24c00504 	addi	r19,r4,20
    9d50:	d9400215 	stw	r5,8(sp)
    9d54:	9d29883a 	add	r20,r19,r20
    9d58:	e1400017 	ldw	r5,0(fp)
    9d5c:	d9000015 	stw	r4,0(sp)
    9d60:	a1000017 	ldw	r4,0(r20)
    9d64:	29400044 	addi	r5,r5,1
    9d68:	d8c00115 	stw	r3,4(sp)
    9d6c:	dd000315 	stw	r20,12(sp)
    9d70:	0004b540 	call	4b54 <__udivsi3>
    9d74:	1025883a 	mov	r18,r2
    9d78:	10003026 	beq	r2,zero,9e3c <quorem+0x13c>
    9d7c:	dc400117 	ldw	r17,4(sp)
    9d80:	9829883a 	mov	r20,r19
    9d84:	002d883a 	mov	r22,zero
    9d88:	0021883a 	mov	r16,zero
    9d8c:	8d400017 	ldw	r21,0(r17)
    9d90:	900b883a 	mov	r5,r18
    9d94:	8c400104 	addi	r17,r17,4
    9d98:	a93fffcc 	andi	r4,r21,65535
    9d9c:	0001a300 	call	1a30 <__mulsi3>
    9da0:	a808d43a 	srli	r4,r21,16
    9da4:	900b883a 	mov	r5,r18
    9da8:	15ad883a 	add	r22,r2,r22
    9dac:	0001a300 	call	1a30 <__mulsi3>
    9db0:	a1000017 	ldw	r4,0(r20)
    9db4:	b00cd43a 	srli	r6,r22,16
    9db8:	b0ffffcc 	andi	r3,r22,65535
    9dbc:	217fffcc 	andi	r5,r4,65535
    9dc0:	2c21883a 	add	r16,r5,r16
    9dc4:	80c7c83a 	sub	r3,r16,r3
    9dc8:	2008d43a 	srli	r4,r4,16
    9dcc:	1185883a 	add	r2,r2,r6
    9dd0:	1821d43a 	srai	r16,r3,16
    9dd4:	117fffcc 	andi	r5,r2,65535
    9dd8:	2149c83a 	sub	r4,r4,r5
    9ddc:	2421883a 	add	r16,r4,r16
    9de0:	8008943a 	slli	r4,r16,16
    9de4:	18ffffcc 	andi	r3,r3,65535
    9de8:	102cd43a 	srli	r22,r2,16
    9dec:	20c8b03a 	or	r4,r4,r3
    9df0:	a1000015 	stw	r4,0(r20)
    9df4:	8021d43a 	srai	r16,r16,16
    9df8:	a5000104 	addi	r20,r20,4
    9dfc:	e47fe32e 	bgeu	fp,r17,9d8c <__alt_data_end+0xfffe9d8c>
    9e00:	d8c00317 	ldw	r3,12(sp)
    9e04:	18800017 	ldw	r2,0(r3)
    9e08:	10000c1e 	bne	r2,zero,9e3c <quorem+0x13c>
    9e0c:	18bfff04 	addi	r2,r3,-4
    9e10:	9880082e 	bgeu	r19,r2,9e34 <quorem+0x134>
    9e14:	18ffff17 	ldw	r3,-4(r3)
    9e18:	18000326 	beq	r3,zero,9e28 <quorem+0x128>
    9e1c:	00000506 	br	9e34 <quorem+0x134>
    9e20:	10c00017 	ldw	r3,0(r2)
    9e24:	1800031e 	bne	r3,zero,9e34 <quorem+0x134>
    9e28:	10bfff04 	addi	r2,r2,-4
    9e2c:	bdffffc4 	addi	r23,r23,-1
    9e30:	98bffb36 	bltu	r19,r2,9e20 <__alt_data_end+0xfffe9e20>
    9e34:	d8c00017 	ldw	r3,0(sp)
    9e38:	1dc00415 	stw	r23,16(r3)
    9e3c:	d9400217 	ldw	r5,8(sp)
    9e40:	d9000017 	ldw	r4,0(sp)
    9e44:	000c8d40 	call	c8d4 <__mcmp>
    9e48:	10002816 	blt	r2,zero,9eec <quorem+0x1ec>
    9e4c:	dc400117 	ldw	r17,4(sp)
    9e50:	94800044 	addi	r18,r18,1
    9e54:	980d883a 	mov	r6,r19
    9e58:	0007883a 	mov	r3,zero
    9e5c:	31000017 	ldw	r4,0(r6)
    9e60:	89400017 	ldw	r5,0(r17)
    9e64:	31800104 	addi	r6,r6,4
    9e68:	20bfffcc 	andi	r2,r4,65535
    9e6c:	10c7883a 	add	r3,r2,r3
    9e70:	28bfffcc 	andi	r2,r5,65535
    9e74:	1885c83a 	sub	r2,r3,r2
    9e78:	280ad43a 	srli	r5,r5,16
    9e7c:	2008d43a 	srli	r4,r4,16
    9e80:	1007d43a 	srai	r3,r2,16
    9e84:	10bfffcc 	andi	r2,r2,65535
    9e88:	2149c83a 	sub	r4,r4,r5
    9e8c:	20c9883a 	add	r4,r4,r3
    9e90:	200a943a 	slli	r5,r4,16
    9e94:	8c400104 	addi	r17,r17,4
    9e98:	2007d43a 	srai	r3,r4,16
    9e9c:	2884b03a 	or	r2,r5,r2
    9ea0:	30bfff15 	stw	r2,-4(r6)
    9ea4:	e47fed2e 	bgeu	fp,r17,9e5c <__alt_data_end+0xfffe9e5c>
    9ea8:	bdc5883a 	add	r2,r23,r23
    9eac:	1085883a 	add	r2,r2,r2
    9eb0:	9887883a 	add	r3,r19,r2
    9eb4:	18800017 	ldw	r2,0(r3)
    9eb8:	10000c1e 	bne	r2,zero,9eec <quorem+0x1ec>
    9ebc:	18bfff04 	addi	r2,r3,-4
    9ec0:	9880082e 	bgeu	r19,r2,9ee4 <quorem+0x1e4>
    9ec4:	18ffff17 	ldw	r3,-4(r3)
    9ec8:	18000326 	beq	r3,zero,9ed8 <quorem+0x1d8>
    9ecc:	00000506 	br	9ee4 <quorem+0x1e4>
    9ed0:	10c00017 	ldw	r3,0(r2)
    9ed4:	1800031e 	bne	r3,zero,9ee4 <quorem+0x1e4>
    9ed8:	10bfff04 	addi	r2,r2,-4
    9edc:	bdffffc4 	addi	r23,r23,-1
    9ee0:	98bffb36 	bltu	r19,r2,9ed0 <__alt_data_end+0xfffe9ed0>
    9ee4:	d8c00017 	ldw	r3,0(sp)
    9ee8:	1dc00415 	stw	r23,16(r3)
    9eec:	9005883a 	mov	r2,r18
    9ef0:	dfc00d17 	ldw	ra,52(sp)
    9ef4:	df000c17 	ldw	fp,48(sp)
    9ef8:	ddc00b17 	ldw	r23,44(sp)
    9efc:	dd800a17 	ldw	r22,40(sp)
    9f00:	dd400917 	ldw	r21,36(sp)
    9f04:	dd000817 	ldw	r20,32(sp)
    9f08:	dcc00717 	ldw	r19,28(sp)
    9f0c:	dc800617 	ldw	r18,24(sp)
    9f10:	dc400517 	ldw	r17,20(sp)
    9f14:	dc000417 	ldw	r16,16(sp)
    9f18:	dec00e04 	addi	sp,sp,56
    9f1c:	f800283a 	ret
    9f20:	0005883a 	mov	r2,zero
    9f24:	003ff206 	br	9ef0 <__alt_data_end+0xfffe9ef0>

00009f28 <_dtoa_r>:
    9f28:	20801017 	ldw	r2,64(r4)
    9f2c:	deffde04 	addi	sp,sp,-136
    9f30:	df002015 	stw	fp,128(sp)
    9f34:	dcc01b15 	stw	r19,108(sp)
    9f38:	dc801a15 	stw	r18,104(sp)
    9f3c:	dc401915 	stw	r17,100(sp)
    9f40:	dc001815 	stw	r16,96(sp)
    9f44:	dfc02115 	stw	ra,132(sp)
    9f48:	ddc01f15 	stw	r23,124(sp)
    9f4c:	dd801e15 	stw	r22,120(sp)
    9f50:	dd401d15 	stw	r21,116(sp)
    9f54:	dd001c15 	stw	r20,112(sp)
    9f58:	d9c00315 	stw	r7,12(sp)
    9f5c:	2039883a 	mov	fp,r4
    9f60:	3023883a 	mov	r17,r6
    9f64:	2825883a 	mov	r18,r5
    9f68:	dc002417 	ldw	r16,144(sp)
    9f6c:	3027883a 	mov	r19,r6
    9f70:	10000826 	beq	r2,zero,9f94 <_dtoa_r+0x6c>
    9f74:	21801117 	ldw	r6,68(r4)
    9f78:	00c00044 	movi	r3,1
    9f7c:	100b883a 	mov	r5,r2
    9f80:	1986983a 	sll	r3,r3,r6
    9f84:	11800115 	stw	r6,4(r2)
    9f88:	10c00215 	stw	r3,8(r2)
    9f8c:	000bff80 	call	bff8 <_Bfree>
    9f90:	e0001015 	stw	zero,64(fp)
    9f94:	88002e16 	blt	r17,zero,a050 <_dtoa_r+0x128>
    9f98:	80000015 	stw	zero,0(r16)
    9f9c:	889ffc2c 	andhi	r2,r17,32752
    9fa0:	00dffc34 	movhi	r3,32752
    9fa4:	10c01c26 	beq	r2,r3,a018 <_dtoa_r+0xf0>
    9fa8:	000d883a 	mov	r6,zero
    9fac:	000f883a 	mov	r7,zero
    9fb0:	9009883a 	mov	r4,r18
    9fb4:	980b883a 	mov	r5,r19
    9fb8:	001026c0 	call	1026c <__eqdf2>
    9fbc:	10002b1e 	bne	r2,zero,a06c <_dtoa_r+0x144>
    9fc0:	d9c02317 	ldw	r7,140(sp)
    9fc4:	00800044 	movi	r2,1
    9fc8:	38800015 	stw	r2,0(r7)
    9fcc:	d8802517 	ldw	r2,148(sp)
    9fd0:	10019e26 	beq	r2,zero,a64c <_dtoa_r+0x724>
    9fd4:	d8c02517 	ldw	r3,148(sp)
    9fd8:	00800074 	movhi	r2,1
    9fdc:	108c5044 	addi	r2,r2,12609
    9fe0:	18800015 	stw	r2,0(r3)
    9fe4:	10bfffc4 	addi	r2,r2,-1
    9fe8:	dfc02117 	ldw	ra,132(sp)
    9fec:	df002017 	ldw	fp,128(sp)
    9ff0:	ddc01f17 	ldw	r23,124(sp)
    9ff4:	dd801e17 	ldw	r22,120(sp)
    9ff8:	dd401d17 	ldw	r21,116(sp)
    9ffc:	dd001c17 	ldw	r20,112(sp)
    a000:	dcc01b17 	ldw	r19,108(sp)
    a004:	dc801a17 	ldw	r18,104(sp)
    a008:	dc401917 	ldw	r17,100(sp)
    a00c:	dc001817 	ldw	r16,96(sp)
    a010:	dec02204 	addi	sp,sp,136
    a014:	f800283a 	ret
    a018:	d8c02317 	ldw	r3,140(sp)
    a01c:	0089c3c4 	movi	r2,9999
    a020:	18800015 	stw	r2,0(r3)
    a024:	90017726 	beq	r18,zero,a604 <_dtoa_r+0x6dc>
    a028:	00800074 	movhi	r2,1
    a02c:	108c5c04 	addi	r2,r2,12656
    a030:	d9002517 	ldw	r4,148(sp)
    a034:	203fec26 	beq	r4,zero,9fe8 <__alt_data_end+0xfffe9fe8>
    a038:	10c000c7 	ldb	r3,3(r2)
    a03c:	1801781e 	bne	r3,zero,a620 <_dtoa_r+0x6f8>
    a040:	10c000c4 	addi	r3,r2,3
    a044:	d9802517 	ldw	r6,148(sp)
    a048:	30c00015 	stw	r3,0(r6)
    a04c:	003fe606 	br	9fe8 <__alt_data_end+0xfffe9fe8>
    a050:	04e00034 	movhi	r19,32768
    a054:	9cffffc4 	addi	r19,r19,-1
    a058:	00800044 	movi	r2,1
    a05c:	8ce6703a 	and	r19,r17,r19
    a060:	80800015 	stw	r2,0(r16)
    a064:	9823883a 	mov	r17,r19
    a068:	003fcc06 	br	9f9c <__alt_data_end+0xfffe9f9c>
    a06c:	d8800204 	addi	r2,sp,8
    a070:	d8800015 	stw	r2,0(sp)
    a074:	d9c00104 	addi	r7,sp,4
    a078:	900b883a 	mov	r5,r18
    a07c:	980d883a 	mov	r6,r19
    a080:	e009883a 	mov	r4,fp
    a084:	8820d53a 	srli	r16,r17,20
    a088:	000cca00 	call	cca0 <__d2b>
    a08c:	d8800915 	stw	r2,36(sp)
    a090:	8001651e 	bne	r16,zero,a628 <_dtoa_r+0x700>
    a094:	dd800217 	ldw	r22,8(sp)
    a098:	dc000117 	ldw	r16,4(sp)
    a09c:	00800804 	movi	r2,32
    a0a0:	b421883a 	add	r16,r22,r16
    a0a4:	80c10c84 	addi	r3,r16,1074
    a0a8:	10c2d10e 	bge	r2,r3,abf0 <_dtoa_r+0xcc8>
    a0ac:	00801004 	movi	r2,64
    a0b0:	81010484 	addi	r4,r16,1042
    a0b4:	10c7c83a 	sub	r3,r2,r3
    a0b8:	9108d83a 	srl	r4,r18,r4
    a0bc:	88e2983a 	sll	r17,r17,r3
    a0c0:	2448b03a 	or	r4,r4,r17
    a0c4:	00104680 	call	10468 <__floatunsidf>
    a0c8:	017f8434 	movhi	r5,65040
    a0cc:	01800044 	movi	r6,1
    a0d0:	1009883a 	mov	r4,r2
    a0d4:	194b883a 	add	r5,r3,r5
    a0d8:	843fffc4 	addi	r16,r16,-1
    a0dc:	d9801115 	stw	r6,68(sp)
    a0e0:	000d883a 	mov	r6,zero
    a0e4:	01cffe34 	movhi	r7,16376
    a0e8:	00040200 	call	4020 <__subdf3>
    a0ec:	0198dbf4 	movhi	r6,25455
    a0f0:	01cff4f4 	movhi	r7,16339
    a0f4:	3190d844 	addi	r6,r6,17249
    a0f8:	39e1e9c4 	addi	r7,r7,-30809
    a0fc:	1009883a 	mov	r4,r2
    a100:	180b883a 	mov	r5,r3
    a104:	00037b40 	call	37b4 <__muldf3>
    a108:	01a2d874 	movhi	r6,35681
    a10c:	01cff1f4 	movhi	r7,16327
    a110:	31b22cc4 	addi	r6,r6,-14157
    a114:	39e28a04 	addi	r7,r7,-30168
    a118:	180b883a 	mov	r5,r3
    a11c:	1009883a 	mov	r4,r2
    a120:	000245c0 	call	245c <__adddf3>
    a124:	8009883a 	mov	r4,r16
    a128:	1029883a 	mov	r20,r2
    a12c:	1823883a 	mov	r17,r3
    a130:	000491c0 	call	491c <__floatsidf>
    a134:	019427f4 	movhi	r6,20639
    a138:	01cff4f4 	movhi	r7,16339
    a13c:	319e7ec4 	addi	r6,r6,31227
    a140:	39d104c4 	addi	r7,r7,17427
    a144:	1009883a 	mov	r4,r2
    a148:	180b883a 	mov	r5,r3
    a14c:	00037b40 	call	37b4 <__muldf3>
    a150:	100d883a 	mov	r6,r2
    a154:	180f883a 	mov	r7,r3
    a158:	a009883a 	mov	r4,r20
    a15c:	880b883a 	mov	r5,r17
    a160:	000245c0 	call	245c <__adddf3>
    a164:	1009883a 	mov	r4,r2
    a168:	180b883a 	mov	r5,r3
    a16c:	1029883a 	mov	r20,r2
    a170:	1823883a 	mov	r17,r3
    a174:	00103e80 	call	103e8 <__fixdfsi>
    a178:	000d883a 	mov	r6,zero
    a17c:	000f883a 	mov	r7,zero
    a180:	a009883a 	mov	r4,r20
    a184:	880b883a 	mov	r5,r17
    a188:	d8800515 	stw	r2,20(sp)
    a18c:	00102f40 	call	102f4 <__ledf2>
    a190:	10028716 	blt	r2,zero,abb0 <_dtoa_r+0xc88>
    a194:	d8c00517 	ldw	r3,20(sp)
    a198:	00800584 	movi	r2,22
    a19c:	10c27536 	bltu	r2,r3,ab74 <_dtoa_r+0xc4c>
    a1a0:	180490fa 	slli	r2,r3,3
    a1a4:	00c00074 	movhi	r3,1
    a1a8:	18cc7704 	addi	r3,r3,12764
    a1ac:	1885883a 	add	r2,r3,r2
    a1b0:	11000017 	ldw	r4,0(r2)
    a1b4:	11400117 	ldw	r5,4(r2)
    a1b8:	900d883a 	mov	r6,r18
    a1bc:	980f883a 	mov	r7,r19
    a1c0:	00036d80 	call	36d8 <__gedf2>
    a1c4:	00828d0e 	bge	zero,r2,abfc <_dtoa_r+0xcd4>
    a1c8:	d9000517 	ldw	r4,20(sp)
    a1cc:	d8000e15 	stw	zero,56(sp)
    a1d0:	213fffc4 	addi	r4,r4,-1
    a1d4:	d9000515 	stw	r4,20(sp)
    a1d8:	b42dc83a 	sub	r22,r22,r16
    a1dc:	b5bfffc4 	addi	r22,r22,-1
    a1e0:	b0026f16 	blt	r22,zero,aba0 <_dtoa_r+0xc78>
    a1e4:	d8000815 	stw	zero,32(sp)
    a1e8:	d9c00517 	ldw	r7,20(sp)
    a1ec:	38026416 	blt	r7,zero,ab80 <_dtoa_r+0xc58>
    a1f0:	b1ed883a 	add	r22,r22,r7
    a1f4:	d9c00d15 	stw	r7,52(sp)
    a1f8:	d8000a15 	stw	zero,40(sp)
    a1fc:	d9800317 	ldw	r6,12(sp)
    a200:	00800244 	movi	r2,9
    a204:	11811436 	bltu	r2,r6,a658 <_dtoa_r+0x730>
    a208:	00800144 	movi	r2,5
    a20c:	1184e10e 	bge	r2,r6,b594 <_dtoa_r+0x166c>
    a210:	31bfff04 	addi	r6,r6,-4
    a214:	d9800315 	stw	r6,12(sp)
    a218:	0023883a 	mov	r17,zero
    a21c:	d9800317 	ldw	r6,12(sp)
    a220:	008000c4 	movi	r2,3
    a224:	30836726 	beq	r6,r2,afc4 <_dtoa_r+0x109c>
    a228:	1183410e 	bge	r2,r6,af30 <_dtoa_r+0x1008>
    a22c:	d9c00317 	ldw	r7,12(sp)
    a230:	00800104 	movi	r2,4
    a234:	38827c26 	beq	r7,r2,ac28 <_dtoa_r+0xd00>
    a238:	00800144 	movi	r2,5
    a23c:	3884c41e 	bne	r7,r2,b550 <_dtoa_r+0x1628>
    a240:	00800044 	movi	r2,1
    a244:	d8800b15 	stw	r2,44(sp)
    a248:	d8c00517 	ldw	r3,20(sp)
    a24c:	d9002217 	ldw	r4,136(sp)
    a250:	1907883a 	add	r3,r3,r4
    a254:	19800044 	addi	r6,r3,1
    a258:	d8c00c15 	stw	r3,48(sp)
    a25c:	d9800615 	stw	r6,24(sp)
    a260:	0183a40e 	bge	zero,r6,b0f4 <_dtoa_r+0x11cc>
    a264:	d9800617 	ldw	r6,24(sp)
    a268:	3021883a 	mov	r16,r6
    a26c:	e0001115 	stw	zero,68(fp)
    a270:	008005c4 	movi	r2,23
    a274:	1184c92e 	bgeu	r2,r6,b59c <_dtoa_r+0x1674>
    a278:	00c00044 	movi	r3,1
    a27c:	00800104 	movi	r2,4
    a280:	1085883a 	add	r2,r2,r2
    a284:	11000504 	addi	r4,r2,20
    a288:	180b883a 	mov	r5,r3
    a28c:	18c00044 	addi	r3,r3,1
    a290:	313ffb2e 	bgeu	r6,r4,a280 <__alt_data_end+0xfffea280>
    a294:	e1401115 	stw	r5,68(fp)
    a298:	e009883a 	mov	r4,fp
    a29c:	000bf500 	call	bf50 <_Balloc>
    a2a0:	d8800715 	stw	r2,28(sp)
    a2a4:	e0801015 	stw	r2,64(fp)
    a2a8:	00800384 	movi	r2,14
    a2ac:	1400f736 	bltu	r2,r16,a68c <_dtoa_r+0x764>
    a2b0:	8800f626 	beq	r17,zero,a68c <_dtoa_r+0x764>
    a2b4:	d9c00517 	ldw	r7,20(sp)
    a2b8:	01c39a0e 	bge	zero,r7,b124 <_dtoa_r+0x11fc>
    a2bc:	388003cc 	andi	r2,r7,15
    a2c0:	100490fa 	slli	r2,r2,3
    a2c4:	382bd13a 	srai	r21,r7,4
    a2c8:	00c00074 	movhi	r3,1
    a2cc:	18cc7704 	addi	r3,r3,12764
    a2d0:	1885883a 	add	r2,r3,r2
    a2d4:	a8c0040c 	andi	r3,r21,16
    a2d8:	12400017 	ldw	r9,0(r2)
    a2dc:	12000117 	ldw	r8,4(r2)
    a2e0:	18037926 	beq	r3,zero,b0c8 <_dtoa_r+0x11a0>
    a2e4:	00800074 	movhi	r2,1
    a2e8:	108c6d04 	addi	r2,r2,12724
    a2ec:	11800817 	ldw	r6,32(r2)
    a2f0:	11c00917 	ldw	r7,36(r2)
    a2f4:	9009883a 	mov	r4,r18
    a2f8:	980b883a 	mov	r5,r19
    a2fc:	da001715 	stw	r8,92(sp)
    a300:	da401615 	stw	r9,88(sp)
    a304:	0002d080 	call	2d08 <__divdf3>
    a308:	da001717 	ldw	r8,92(sp)
    a30c:	da401617 	ldw	r9,88(sp)
    a310:	ad4003cc 	andi	r21,r21,15
    a314:	040000c4 	movi	r16,3
    a318:	1023883a 	mov	r17,r2
    a31c:	1829883a 	mov	r20,r3
    a320:	a8001126 	beq	r21,zero,a368 <_dtoa_r+0x440>
    a324:	05c00074 	movhi	r23,1
    a328:	bdcc6d04 	addi	r23,r23,12724
    a32c:	4805883a 	mov	r2,r9
    a330:	4007883a 	mov	r3,r8
    a334:	a980004c 	andi	r6,r21,1
    a338:	1009883a 	mov	r4,r2
    a33c:	a82bd07a 	srai	r21,r21,1
    a340:	180b883a 	mov	r5,r3
    a344:	30000426 	beq	r6,zero,a358 <_dtoa_r+0x430>
    a348:	b9800017 	ldw	r6,0(r23)
    a34c:	b9c00117 	ldw	r7,4(r23)
    a350:	84000044 	addi	r16,r16,1
    a354:	00037b40 	call	37b4 <__muldf3>
    a358:	bdc00204 	addi	r23,r23,8
    a35c:	a83ff51e 	bne	r21,zero,a334 <__alt_data_end+0xfffea334>
    a360:	1013883a 	mov	r9,r2
    a364:	1811883a 	mov	r8,r3
    a368:	480d883a 	mov	r6,r9
    a36c:	400f883a 	mov	r7,r8
    a370:	8809883a 	mov	r4,r17
    a374:	a00b883a 	mov	r5,r20
    a378:	0002d080 	call	2d08 <__divdf3>
    a37c:	d8800f15 	stw	r2,60(sp)
    a380:	d8c01015 	stw	r3,64(sp)
    a384:	d8c00e17 	ldw	r3,56(sp)
    a388:	18000626 	beq	r3,zero,a3a4 <_dtoa_r+0x47c>
    a38c:	d9000f17 	ldw	r4,60(sp)
    a390:	d9401017 	ldw	r5,64(sp)
    a394:	000d883a 	mov	r6,zero
    a398:	01cffc34 	movhi	r7,16368
    a39c:	00102f40 	call	102f4 <__ledf2>
    a3a0:	10040b16 	blt	r2,zero,b3d0 <_dtoa_r+0x14a8>
    a3a4:	8009883a 	mov	r4,r16
    a3a8:	000491c0 	call	491c <__floatsidf>
    a3ac:	d9800f17 	ldw	r6,60(sp)
    a3b0:	d9c01017 	ldw	r7,64(sp)
    a3b4:	1009883a 	mov	r4,r2
    a3b8:	180b883a 	mov	r5,r3
    a3bc:	00037b40 	call	37b4 <__muldf3>
    a3c0:	000d883a 	mov	r6,zero
    a3c4:	01d00734 	movhi	r7,16412
    a3c8:	1009883a 	mov	r4,r2
    a3cc:	180b883a 	mov	r5,r3
    a3d0:	000245c0 	call	245c <__adddf3>
    a3d4:	1021883a 	mov	r16,r2
    a3d8:	d8800617 	ldw	r2,24(sp)
    a3dc:	047f3034 	movhi	r17,64704
    a3e0:	1c63883a 	add	r17,r3,r17
    a3e4:	10031826 	beq	r2,zero,b048 <_dtoa_r+0x1120>
    a3e8:	d8c00517 	ldw	r3,20(sp)
    a3ec:	db000617 	ldw	r12,24(sp)
    a3f0:	d8c01315 	stw	r3,76(sp)
    a3f4:	d9000b17 	ldw	r4,44(sp)
    a3f8:	20038f26 	beq	r4,zero,b238 <_dtoa_r+0x1310>
    a3fc:	60bfffc4 	addi	r2,r12,-1
    a400:	100490fa 	slli	r2,r2,3
    a404:	00c00074 	movhi	r3,1
    a408:	18cc7704 	addi	r3,r3,12764
    a40c:	1885883a 	add	r2,r3,r2
    a410:	11800017 	ldw	r6,0(r2)
    a414:	11c00117 	ldw	r7,4(r2)
    a418:	d8800717 	ldw	r2,28(sp)
    a41c:	0009883a 	mov	r4,zero
    a420:	014ff834 	movhi	r5,16352
    a424:	db001615 	stw	r12,88(sp)
    a428:	15c00044 	addi	r23,r2,1
    a42c:	0002d080 	call	2d08 <__divdf3>
    a430:	800d883a 	mov	r6,r16
    a434:	880f883a 	mov	r7,r17
    a438:	1009883a 	mov	r4,r2
    a43c:	180b883a 	mov	r5,r3
    a440:	00040200 	call	4020 <__subdf3>
    a444:	d9401017 	ldw	r5,64(sp)
    a448:	d9000f17 	ldw	r4,60(sp)
    a44c:	102b883a 	mov	r21,r2
    a450:	d8c01215 	stw	r3,72(sp)
    a454:	00103e80 	call	103e8 <__fixdfsi>
    a458:	1009883a 	mov	r4,r2
    a45c:	1029883a 	mov	r20,r2
    a460:	000491c0 	call	491c <__floatsidf>
    a464:	d9000f17 	ldw	r4,60(sp)
    a468:	d9401017 	ldw	r5,64(sp)
    a46c:	100d883a 	mov	r6,r2
    a470:	180f883a 	mov	r7,r3
    a474:	00040200 	call	4020 <__subdf3>
    a478:	1823883a 	mov	r17,r3
    a47c:	d8c00717 	ldw	r3,28(sp)
    a480:	d9401217 	ldw	r5,72(sp)
    a484:	a2000c04 	addi	r8,r20,48
    a488:	1021883a 	mov	r16,r2
    a48c:	1a000005 	stb	r8,0(r3)
    a490:	800d883a 	mov	r6,r16
    a494:	880f883a 	mov	r7,r17
    a498:	a809883a 	mov	r4,r21
    a49c:	4029883a 	mov	r20,r8
    a4a0:	00036d80 	call	36d8 <__gedf2>
    a4a4:	00841d16 	blt	zero,r2,b51c <_dtoa_r+0x15f4>
    a4a8:	800d883a 	mov	r6,r16
    a4ac:	880f883a 	mov	r7,r17
    a4b0:	0009883a 	mov	r4,zero
    a4b4:	014ffc34 	movhi	r5,16368
    a4b8:	00040200 	call	4020 <__subdf3>
    a4bc:	d9401217 	ldw	r5,72(sp)
    a4c0:	100d883a 	mov	r6,r2
    a4c4:	180f883a 	mov	r7,r3
    a4c8:	a809883a 	mov	r4,r21
    a4cc:	00036d80 	call	36d8 <__gedf2>
    a4d0:	db001617 	ldw	r12,88(sp)
    a4d4:	00840e16 	blt	zero,r2,b510 <_dtoa_r+0x15e8>
    a4d8:	00800044 	movi	r2,1
    a4dc:	13006b0e 	bge	r2,r12,a68c <_dtoa_r+0x764>
    a4e0:	d9000717 	ldw	r4,28(sp)
    a4e4:	dd800f15 	stw	r22,60(sp)
    a4e8:	dcc01015 	stw	r19,64(sp)
    a4ec:	2319883a 	add	r12,r4,r12
    a4f0:	dcc01217 	ldw	r19,72(sp)
    a4f4:	602d883a 	mov	r22,r12
    a4f8:	dc801215 	stw	r18,72(sp)
    a4fc:	b825883a 	mov	r18,r23
    a500:	00000906 	br	a528 <_dtoa_r+0x600>
    a504:	00040200 	call	4020 <__subdf3>
    a508:	a80d883a 	mov	r6,r21
    a50c:	980f883a 	mov	r7,r19
    a510:	1009883a 	mov	r4,r2
    a514:	180b883a 	mov	r5,r3
    a518:	00102f40 	call	102f4 <__ledf2>
    a51c:	1003e816 	blt	r2,zero,b4c0 <_dtoa_r+0x1598>
    a520:	b825883a 	mov	r18,r23
    a524:	bd83e926 	beq	r23,r22,b4cc <_dtoa_r+0x15a4>
    a528:	a809883a 	mov	r4,r21
    a52c:	980b883a 	mov	r5,r19
    a530:	000d883a 	mov	r6,zero
    a534:	01d00934 	movhi	r7,16420
    a538:	00037b40 	call	37b4 <__muldf3>
    a53c:	000d883a 	mov	r6,zero
    a540:	01d00934 	movhi	r7,16420
    a544:	8009883a 	mov	r4,r16
    a548:	880b883a 	mov	r5,r17
    a54c:	102b883a 	mov	r21,r2
    a550:	1827883a 	mov	r19,r3
    a554:	00037b40 	call	37b4 <__muldf3>
    a558:	180b883a 	mov	r5,r3
    a55c:	1009883a 	mov	r4,r2
    a560:	1821883a 	mov	r16,r3
    a564:	1023883a 	mov	r17,r2
    a568:	00103e80 	call	103e8 <__fixdfsi>
    a56c:	1009883a 	mov	r4,r2
    a570:	1029883a 	mov	r20,r2
    a574:	000491c0 	call	491c <__floatsidf>
    a578:	8809883a 	mov	r4,r17
    a57c:	800b883a 	mov	r5,r16
    a580:	100d883a 	mov	r6,r2
    a584:	180f883a 	mov	r7,r3
    a588:	00040200 	call	4020 <__subdf3>
    a58c:	a5000c04 	addi	r20,r20,48
    a590:	a80d883a 	mov	r6,r21
    a594:	980f883a 	mov	r7,r19
    a598:	1009883a 	mov	r4,r2
    a59c:	180b883a 	mov	r5,r3
    a5a0:	95000005 	stb	r20,0(r18)
    a5a4:	1021883a 	mov	r16,r2
    a5a8:	1823883a 	mov	r17,r3
    a5ac:	00102f40 	call	102f4 <__ledf2>
    a5b0:	bdc00044 	addi	r23,r23,1
    a5b4:	800d883a 	mov	r6,r16
    a5b8:	880f883a 	mov	r7,r17
    a5bc:	0009883a 	mov	r4,zero
    a5c0:	014ffc34 	movhi	r5,16368
    a5c4:	103fcf0e 	bge	r2,zero,a504 <__alt_data_end+0xfffea504>
    a5c8:	d8c01317 	ldw	r3,76(sp)
    a5cc:	d8c00515 	stw	r3,20(sp)
    a5d0:	d9400917 	ldw	r5,36(sp)
    a5d4:	e009883a 	mov	r4,fp
    a5d8:	000bff80 	call	bff8 <_Bfree>
    a5dc:	d9000517 	ldw	r4,20(sp)
    a5e0:	d9802317 	ldw	r6,140(sp)
    a5e4:	d9c02517 	ldw	r7,148(sp)
    a5e8:	b8000005 	stb	zero,0(r23)
    a5ec:	20800044 	addi	r2,r4,1
    a5f0:	30800015 	stw	r2,0(r6)
    a5f4:	3802aa26 	beq	r7,zero,b0a0 <_dtoa_r+0x1178>
    a5f8:	3dc00015 	stw	r23,0(r7)
    a5fc:	d8800717 	ldw	r2,28(sp)
    a600:	003e7906 	br	9fe8 <__alt_data_end+0xfffe9fe8>
    a604:	00800434 	movhi	r2,16
    a608:	10bfffc4 	addi	r2,r2,-1
    a60c:	88a2703a 	and	r17,r17,r2
    a610:	883e851e 	bne	r17,zero,a028 <__alt_data_end+0xfffea028>
    a614:	00800074 	movhi	r2,1
    a618:	108c5904 	addi	r2,r2,12644
    a61c:	003e8406 	br	a030 <__alt_data_end+0xfffea030>
    a620:	10c00204 	addi	r3,r2,8
    a624:	003e8706 	br	a044 <__alt_data_end+0xfffea044>
    a628:	01400434 	movhi	r5,16
    a62c:	297fffc4 	addi	r5,r5,-1
    a630:	994a703a 	and	r5,r19,r5
    a634:	9009883a 	mov	r4,r18
    a638:	843f0044 	addi	r16,r16,-1023
    a63c:	294ffc34 	orhi	r5,r5,16368
    a640:	dd800217 	ldw	r22,8(sp)
    a644:	d8001115 	stw	zero,68(sp)
    a648:	003ea506 	br	a0e0 <__alt_data_end+0xfffea0e0>
    a64c:	00800074 	movhi	r2,1
    a650:	108c5004 	addi	r2,r2,12608
    a654:	003e6406 	br	9fe8 <__alt_data_end+0xfffe9fe8>
    a658:	e0001115 	stw	zero,68(fp)
    a65c:	000b883a 	mov	r5,zero
    a660:	e009883a 	mov	r4,fp
    a664:	000bf500 	call	bf50 <_Balloc>
    a668:	01bfffc4 	movi	r6,-1
    a66c:	01c00044 	movi	r7,1
    a670:	d8800715 	stw	r2,28(sp)
    a674:	d9800c15 	stw	r6,48(sp)
    a678:	e0801015 	stw	r2,64(fp)
    a67c:	d8000315 	stw	zero,12(sp)
    a680:	d9c00b15 	stw	r7,44(sp)
    a684:	d9800615 	stw	r6,24(sp)
    a688:	d8002215 	stw	zero,136(sp)
    a68c:	d8800117 	ldw	r2,4(sp)
    a690:	10008916 	blt	r2,zero,a8b8 <_dtoa_r+0x990>
    a694:	d9000517 	ldw	r4,20(sp)
    a698:	00c00384 	movi	r3,14
    a69c:	19008616 	blt	r3,r4,a8b8 <_dtoa_r+0x990>
    a6a0:	200490fa 	slli	r2,r4,3
    a6a4:	00c00074 	movhi	r3,1
    a6a8:	d9802217 	ldw	r6,136(sp)
    a6ac:	18cc7704 	addi	r3,r3,12764
    a6b0:	1885883a 	add	r2,r3,r2
    a6b4:	14000017 	ldw	r16,0(r2)
    a6b8:	14400117 	ldw	r17,4(r2)
    a6bc:	30016316 	blt	r6,zero,ac4c <_dtoa_r+0xd24>
    a6c0:	800d883a 	mov	r6,r16
    a6c4:	880f883a 	mov	r7,r17
    a6c8:	9009883a 	mov	r4,r18
    a6cc:	980b883a 	mov	r5,r19
    a6d0:	0002d080 	call	2d08 <__divdf3>
    a6d4:	180b883a 	mov	r5,r3
    a6d8:	1009883a 	mov	r4,r2
    a6dc:	00103e80 	call	103e8 <__fixdfsi>
    a6e0:	1009883a 	mov	r4,r2
    a6e4:	102b883a 	mov	r21,r2
    a6e8:	000491c0 	call	491c <__floatsidf>
    a6ec:	800d883a 	mov	r6,r16
    a6f0:	880f883a 	mov	r7,r17
    a6f4:	1009883a 	mov	r4,r2
    a6f8:	180b883a 	mov	r5,r3
    a6fc:	00037b40 	call	37b4 <__muldf3>
    a700:	100d883a 	mov	r6,r2
    a704:	180f883a 	mov	r7,r3
    a708:	9009883a 	mov	r4,r18
    a70c:	980b883a 	mov	r5,r19
    a710:	00040200 	call	4020 <__subdf3>
    a714:	d9c00717 	ldw	r7,28(sp)
    a718:	1009883a 	mov	r4,r2
    a71c:	a8800c04 	addi	r2,r21,48
    a720:	38800005 	stb	r2,0(r7)
    a724:	3dc00044 	addi	r23,r7,1
    a728:	d9c00617 	ldw	r7,24(sp)
    a72c:	01800044 	movi	r6,1
    a730:	180b883a 	mov	r5,r3
    a734:	2005883a 	mov	r2,r4
    a738:	39803826 	beq	r7,r6,a81c <_dtoa_r+0x8f4>
    a73c:	000d883a 	mov	r6,zero
    a740:	01d00934 	movhi	r7,16420
    a744:	00037b40 	call	37b4 <__muldf3>
    a748:	000d883a 	mov	r6,zero
    a74c:	000f883a 	mov	r7,zero
    a750:	1009883a 	mov	r4,r2
    a754:	180b883a 	mov	r5,r3
    a758:	1025883a 	mov	r18,r2
    a75c:	1827883a 	mov	r19,r3
    a760:	001026c0 	call	1026c <__eqdf2>
    a764:	103f9a26 	beq	r2,zero,a5d0 <__alt_data_end+0xfffea5d0>
    a768:	d9c00617 	ldw	r7,24(sp)
    a76c:	d8c00717 	ldw	r3,28(sp)
    a770:	b829883a 	mov	r20,r23
    a774:	38bfffc4 	addi	r2,r7,-1
    a778:	18ad883a 	add	r22,r3,r2
    a77c:	00000a06 	br	a7a8 <_dtoa_r+0x880>
    a780:	00037b40 	call	37b4 <__muldf3>
    a784:	000d883a 	mov	r6,zero
    a788:	000f883a 	mov	r7,zero
    a78c:	1009883a 	mov	r4,r2
    a790:	180b883a 	mov	r5,r3
    a794:	1025883a 	mov	r18,r2
    a798:	1827883a 	mov	r19,r3
    a79c:	b829883a 	mov	r20,r23
    a7a0:	001026c0 	call	1026c <__eqdf2>
    a7a4:	103f8a26 	beq	r2,zero,a5d0 <__alt_data_end+0xfffea5d0>
    a7a8:	800d883a 	mov	r6,r16
    a7ac:	880f883a 	mov	r7,r17
    a7b0:	9009883a 	mov	r4,r18
    a7b4:	980b883a 	mov	r5,r19
    a7b8:	0002d080 	call	2d08 <__divdf3>
    a7bc:	180b883a 	mov	r5,r3
    a7c0:	1009883a 	mov	r4,r2
    a7c4:	00103e80 	call	103e8 <__fixdfsi>
    a7c8:	1009883a 	mov	r4,r2
    a7cc:	102b883a 	mov	r21,r2
    a7d0:	000491c0 	call	491c <__floatsidf>
    a7d4:	800d883a 	mov	r6,r16
    a7d8:	880f883a 	mov	r7,r17
    a7dc:	1009883a 	mov	r4,r2
    a7e0:	180b883a 	mov	r5,r3
    a7e4:	00037b40 	call	37b4 <__muldf3>
    a7e8:	100d883a 	mov	r6,r2
    a7ec:	180f883a 	mov	r7,r3
    a7f0:	9009883a 	mov	r4,r18
    a7f4:	980b883a 	mov	r5,r19
    a7f8:	00040200 	call	4020 <__subdf3>
    a7fc:	aa000c04 	addi	r8,r21,48
    a800:	a2000005 	stb	r8,0(r20)
    a804:	000d883a 	mov	r6,zero
    a808:	01d00934 	movhi	r7,16420
    a80c:	1009883a 	mov	r4,r2
    a810:	180b883a 	mov	r5,r3
    a814:	a5c00044 	addi	r23,r20,1
    a818:	b53fd91e 	bne	r22,r20,a780 <__alt_data_end+0xfffea780>
    a81c:	100d883a 	mov	r6,r2
    a820:	180f883a 	mov	r7,r3
    a824:	1009883a 	mov	r4,r2
    a828:	180b883a 	mov	r5,r3
    a82c:	000245c0 	call	245c <__adddf3>
    a830:	100d883a 	mov	r6,r2
    a834:	180f883a 	mov	r7,r3
    a838:	8009883a 	mov	r4,r16
    a83c:	880b883a 	mov	r5,r17
    a840:	1027883a 	mov	r19,r2
    a844:	1825883a 	mov	r18,r3
    a848:	00102f40 	call	102f4 <__ledf2>
    a84c:	10000816 	blt	r2,zero,a870 <_dtoa_r+0x948>
    a850:	980d883a 	mov	r6,r19
    a854:	900f883a 	mov	r7,r18
    a858:	8009883a 	mov	r4,r16
    a85c:	880b883a 	mov	r5,r17
    a860:	001026c0 	call	1026c <__eqdf2>
    a864:	103f5a1e 	bne	r2,zero,a5d0 <__alt_data_end+0xfffea5d0>
    a868:	ad40004c 	andi	r21,r21,1
    a86c:	a83f5826 	beq	r21,zero,a5d0 <__alt_data_end+0xfffea5d0>
    a870:	bd3fffc3 	ldbu	r20,-1(r23)
    a874:	b8bfffc4 	addi	r2,r23,-1
    a878:	1007883a 	mov	r3,r2
    a87c:	01400e44 	movi	r5,57
    a880:	d9800717 	ldw	r6,28(sp)
    a884:	00000506 	br	a89c <_dtoa_r+0x974>
    a888:	18ffffc4 	addi	r3,r3,-1
    a88c:	11824726 	beq	r2,r6,b1ac <_dtoa_r+0x1284>
    a890:	1d000003 	ldbu	r20,0(r3)
    a894:	102f883a 	mov	r23,r2
    a898:	10bfffc4 	addi	r2,r2,-1
    a89c:	a1003fcc 	andi	r4,r20,255
    a8a0:	2100201c 	xori	r4,r4,128
    a8a4:	213fe004 	addi	r4,r4,-128
    a8a8:	217ff726 	beq	r4,r5,a888 <__alt_data_end+0xfffea888>
    a8ac:	a2000044 	addi	r8,r20,1
    a8b0:	12000005 	stb	r8,0(r2)
    a8b4:	003f4606 	br	a5d0 <__alt_data_end+0xfffea5d0>
    a8b8:	d9000b17 	ldw	r4,44(sp)
    a8bc:	2000c826 	beq	r4,zero,abe0 <_dtoa_r+0xcb8>
    a8c0:	d9800317 	ldw	r6,12(sp)
    a8c4:	00c00044 	movi	r3,1
    a8c8:	1980f90e 	bge	r3,r6,acb0 <_dtoa_r+0xd88>
    a8cc:	d8800617 	ldw	r2,24(sp)
    a8d0:	d8c00a17 	ldw	r3,40(sp)
    a8d4:	157fffc4 	addi	r21,r2,-1
    a8d8:	1d41f316 	blt	r3,r21,b0a8 <_dtoa_r+0x1180>
    a8dc:	1d6bc83a 	sub	r21,r3,r21
    a8e0:	d9c00617 	ldw	r7,24(sp)
    a8e4:	3802aa16 	blt	r7,zero,b390 <_dtoa_r+0x1468>
    a8e8:	dd000817 	ldw	r20,32(sp)
    a8ec:	d8800617 	ldw	r2,24(sp)
    a8f0:	d8c00817 	ldw	r3,32(sp)
    a8f4:	01400044 	movi	r5,1
    a8f8:	e009883a 	mov	r4,fp
    a8fc:	1887883a 	add	r3,r3,r2
    a900:	d8c00815 	stw	r3,32(sp)
    a904:	b0ad883a 	add	r22,r22,r2
    a908:	000c3840 	call	c384 <__i2b>
    a90c:	1023883a 	mov	r17,r2
    a910:	a0000826 	beq	r20,zero,a934 <_dtoa_r+0xa0c>
    a914:	0580070e 	bge	zero,r22,a934 <_dtoa_r+0xa0c>
    a918:	a005883a 	mov	r2,r20
    a91c:	b500b916 	blt	r22,r20,ac04 <_dtoa_r+0xcdc>
    a920:	d9000817 	ldw	r4,32(sp)
    a924:	a0a9c83a 	sub	r20,r20,r2
    a928:	b0adc83a 	sub	r22,r22,r2
    a92c:	2089c83a 	sub	r4,r4,r2
    a930:	d9000815 	stw	r4,32(sp)
    a934:	d9800a17 	ldw	r6,40(sp)
    a938:	0181810e 	bge	zero,r6,af40 <_dtoa_r+0x1018>
    a93c:	d9c00b17 	ldw	r7,44(sp)
    a940:	3800b326 	beq	r7,zero,ac10 <_dtoa_r+0xce8>
    a944:	a800b226 	beq	r21,zero,ac10 <_dtoa_r+0xce8>
    a948:	880b883a 	mov	r5,r17
    a94c:	a80d883a 	mov	r6,r21
    a950:	e009883a 	mov	r4,fp
    a954:	000c64c0 	call	c64c <__pow5mult>
    a958:	d9800917 	ldw	r6,36(sp)
    a95c:	100b883a 	mov	r5,r2
    a960:	e009883a 	mov	r4,fp
    a964:	1023883a 	mov	r17,r2
    a968:	000c3c00 	call	c3c0 <__multiply>
    a96c:	1021883a 	mov	r16,r2
    a970:	d8800a17 	ldw	r2,40(sp)
    a974:	d9400917 	ldw	r5,36(sp)
    a978:	e009883a 	mov	r4,fp
    a97c:	1545c83a 	sub	r2,r2,r21
    a980:	d8800a15 	stw	r2,40(sp)
    a984:	000bff80 	call	bff8 <_Bfree>
    a988:	d8c00a17 	ldw	r3,40(sp)
    a98c:	18009f1e 	bne	r3,zero,ac0c <_dtoa_r+0xce4>
    a990:	05c00044 	movi	r23,1
    a994:	e009883a 	mov	r4,fp
    a998:	b80b883a 	mov	r5,r23
    a99c:	000c3840 	call	c384 <__i2b>
    a9a0:	d9000d17 	ldw	r4,52(sp)
    a9a4:	102b883a 	mov	r21,r2
    a9a8:	2000ce26 	beq	r4,zero,ace4 <_dtoa_r+0xdbc>
    a9ac:	200d883a 	mov	r6,r4
    a9b0:	100b883a 	mov	r5,r2
    a9b4:	e009883a 	mov	r4,fp
    a9b8:	000c64c0 	call	c64c <__pow5mult>
    a9bc:	d9800317 	ldw	r6,12(sp)
    a9c0:	102b883a 	mov	r21,r2
    a9c4:	b981810e 	bge	r23,r6,afcc <_dtoa_r+0x10a4>
    a9c8:	0027883a 	mov	r19,zero
    a9cc:	a8800417 	ldw	r2,16(r21)
    a9d0:	05c00804 	movi	r23,32
    a9d4:	10800104 	addi	r2,r2,4
    a9d8:	1085883a 	add	r2,r2,r2
    a9dc:	1085883a 	add	r2,r2,r2
    a9e0:	a885883a 	add	r2,r21,r2
    a9e4:	11000017 	ldw	r4,0(r2)
    a9e8:	000c26c0 	call	c26c <__hi0bits>
    a9ec:	b885c83a 	sub	r2,r23,r2
    a9f0:	1585883a 	add	r2,r2,r22
    a9f4:	108007cc 	andi	r2,r2,31
    a9f8:	1000b326 	beq	r2,zero,acc8 <_dtoa_r+0xda0>
    a9fc:	00c00804 	movi	r3,32
    aa00:	1887c83a 	sub	r3,r3,r2
    aa04:	01000104 	movi	r4,4
    aa08:	20c2cd0e 	bge	r4,r3,b540 <_dtoa_r+0x1618>
    aa0c:	00c00704 	movi	r3,28
    aa10:	1885c83a 	sub	r2,r3,r2
    aa14:	d8c00817 	ldw	r3,32(sp)
    aa18:	a0a9883a 	add	r20,r20,r2
    aa1c:	b0ad883a 	add	r22,r22,r2
    aa20:	1887883a 	add	r3,r3,r2
    aa24:	d8c00815 	stw	r3,32(sp)
    aa28:	d9800817 	ldw	r6,32(sp)
    aa2c:	0180040e 	bge	zero,r6,aa40 <_dtoa_r+0xb18>
    aa30:	800b883a 	mov	r5,r16
    aa34:	e009883a 	mov	r4,fp
    aa38:	000c78c0 	call	c78c <__lshift>
    aa3c:	1021883a 	mov	r16,r2
    aa40:	0580050e 	bge	zero,r22,aa58 <_dtoa_r+0xb30>
    aa44:	a80b883a 	mov	r5,r21
    aa48:	b00d883a 	mov	r6,r22
    aa4c:	e009883a 	mov	r4,fp
    aa50:	000c78c0 	call	c78c <__lshift>
    aa54:	102b883a 	mov	r21,r2
    aa58:	d9c00e17 	ldw	r7,56(sp)
    aa5c:	3801211e 	bne	r7,zero,aee4 <_dtoa_r+0xfbc>
    aa60:	d9800617 	ldw	r6,24(sp)
    aa64:	0181380e 	bge	zero,r6,af48 <_dtoa_r+0x1020>
    aa68:	d8c00b17 	ldw	r3,44(sp)
    aa6c:	1800ab1e 	bne	r3,zero,ad1c <_dtoa_r+0xdf4>
    aa70:	dc800717 	ldw	r18,28(sp)
    aa74:	dcc00617 	ldw	r19,24(sp)
    aa78:	9029883a 	mov	r20,r18
    aa7c:	00000206 	br	aa88 <_dtoa_r+0xb60>
    aa80:	000c0200 	call	c020 <__multadd>
    aa84:	1021883a 	mov	r16,r2
    aa88:	a80b883a 	mov	r5,r21
    aa8c:	8009883a 	mov	r4,r16
    aa90:	0009d000 	call	9d00 <quorem>
    aa94:	10800c04 	addi	r2,r2,48
    aa98:	90800005 	stb	r2,0(r18)
    aa9c:	94800044 	addi	r18,r18,1
    aaa0:	9507c83a 	sub	r3,r18,r20
    aaa4:	000f883a 	mov	r7,zero
    aaa8:	01800284 	movi	r6,10
    aaac:	800b883a 	mov	r5,r16
    aab0:	e009883a 	mov	r4,fp
    aab4:	1cfff216 	blt	r3,r19,aa80 <__alt_data_end+0xfffeaa80>
    aab8:	1011883a 	mov	r8,r2
    aabc:	d8800617 	ldw	r2,24(sp)
    aac0:	0082370e 	bge	zero,r2,b3a0 <_dtoa_r+0x1478>
    aac4:	d9000717 	ldw	r4,28(sp)
    aac8:	0025883a 	mov	r18,zero
    aacc:	20af883a 	add	r23,r4,r2
    aad0:	01800044 	movi	r6,1
    aad4:	800b883a 	mov	r5,r16
    aad8:	e009883a 	mov	r4,fp
    aadc:	da001715 	stw	r8,92(sp)
    aae0:	000c78c0 	call	c78c <__lshift>
    aae4:	a80b883a 	mov	r5,r21
    aae8:	1009883a 	mov	r4,r2
    aaec:	d8800915 	stw	r2,36(sp)
    aaf0:	000c8d40 	call	c8d4 <__mcmp>
    aaf4:	da001717 	ldw	r8,92(sp)
    aaf8:	0081800e 	bge	zero,r2,b0fc <_dtoa_r+0x11d4>
    aafc:	b93fffc3 	ldbu	r4,-1(r23)
    ab00:	b8bfffc4 	addi	r2,r23,-1
    ab04:	1007883a 	mov	r3,r2
    ab08:	01800e44 	movi	r6,57
    ab0c:	d9c00717 	ldw	r7,28(sp)
    ab10:	00000506 	br	ab28 <_dtoa_r+0xc00>
    ab14:	18ffffc4 	addi	r3,r3,-1
    ab18:	11c12326 	beq	r2,r7,afa8 <_dtoa_r+0x1080>
    ab1c:	19000003 	ldbu	r4,0(r3)
    ab20:	102f883a 	mov	r23,r2
    ab24:	10bfffc4 	addi	r2,r2,-1
    ab28:	21403fcc 	andi	r5,r4,255
    ab2c:	2940201c 	xori	r5,r5,128
    ab30:	297fe004 	addi	r5,r5,-128
    ab34:	29bff726 	beq	r5,r6,ab14 <__alt_data_end+0xfffeab14>
    ab38:	21000044 	addi	r4,r4,1
    ab3c:	11000005 	stb	r4,0(r2)
    ab40:	a80b883a 	mov	r5,r21
    ab44:	e009883a 	mov	r4,fp
    ab48:	000bff80 	call	bff8 <_Bfree>
    ab4c:	883ea026 	beq	r17,zero,a5d0 <__alt_data_end+0xfffea5d0>
    ab50:	90000426 	beq	r18,zero,ab64 <_dtoa_r+0xc3c>
    ab54:	94400326 	beq	r18,r17,ab64 <_dtoa_r+0xc3c>
    ab58:	900b883a 	mov	r5,r18
    ab5c:	e009883a 	mov	r4,fp
    ab60:	000bff80 	call	bff8 <_Bfree>
    ab64:	880b883a 	mov	r5,r17
    ab68:	e009883a 	mov	r4,fp
    ab6c:	000bff80 	call	bff8 <_Bfree>
    ab70:	003e9706 	br	a5d0 <__alt_data_end+0xfffea5d0>
    ab74:	01800044 	movi	r6,1
    ab78:	d9800e15 	stw	r6,56(sp)
    ab7c:	003d9606 	br	a1d8 <__alt_data_end+0xfffea1d8>
    ab80:	d8800817 	ldw	r2,32(sp)
    ab84:	d8c00517 	ldw	r3,20(sp)
    ab88:	d8000d15 	stw	zero,52(sp)
    ab8c:	10c5c83a 	sub	r2,r2,r3
    ab90:	00c9c83a 	sub	r4,zero,r3
    ab94:	d8800815 	stw	r2,32(sp)
    ab98:	d9000a15 	stw	r4,40(sp)
    ab9c:	003d9706 	br	a1fc <__alt_data_end+0xfffea1fc>
    aba0:	05adc83a 	sub	r22,zero,r22
    aba4:	dd800815 	stw	r22,32(sp)
    aba8:	002d883a 	mov	r22,zero
    abac:	003d8e06 	br	a1e8 <__alt_data_end+0xfffea1e8>
    abb0:	d9000517 	ldw	r4,20(sp)
    abb4:	000491c0 	call	491c <__floatsidf>
    abb8:	100d883a 	mov	r6,r2
    abbc:	180f883a 	mov	r7,r3
    abc0:	a009883a 	mov	r4,r20
    abc4:	880b883a 	mov	r5,r17
    abc8:	001026c0 	call	1026c <__eqdf2>
    abcc:	103d7126 	beq	r2,zero,a194 <__alt_data_end+0xfffea194>
    abd0:	d9c00517 	ldw	r7,20(sp)
    abd4:	39ffffc4 	addi	r7,r7,-1
    abd8:	d9c00515 	stw	r7,20(sp)
    abdc:	003d6d06 	br	a194 <__alt_data_end+0xfffea194>
    abe0:	dd400a17 	ldw	r21,40(sp)
    abe4:	dd000817 	ldw	r20,32(sp)
    abe8:	0023883a 	mov	r17,zero
    abec:	003f4806 	br	a910 <__alt_data_end+0xfffea910>
    abf0:	10e3c83a 	sub	r17,r2,r3
    abf4:	9448983a 	sll	r4,r18,r17
    abf8:	003d3206 	br	a0c4 <__alt_data_end+0xfffea0c4>
    abfc:	d8000e15 	stw	zero,56(sp)
    ac00:	003d7506 	br	a1d8 <__alt_data_end+0xfffea1d8>
    ac04:	b005883a 	mov	r2,r22
    ac08:	003f4506 	br	a920 <__alt_data_end+0xfffea920>
    ac0c:	dc000915 	stw	r16,36(sp)
    ac10:	d9800a17 	ldw	r6,40(sp)
    ac14:	d9400917 	ldw	r5,36(sp)
    ac18:	e009883a 	mov	r4,fp
    ac1c:	000c64c0 	call	c64c <__pow5mult>
    ac20:	1021883a 	mov	r16,r2
    ac24:	003f5a06 	br	a990 <__alt_data_end+0xfffea990>
    ac28:	01c00044 	movi	r7,1
    ac2c:	d9c00b15 	stw	r7,44(sp)
    ac30:	d8802217 	ldw	r2,136(sp)
    ac34:	0081280e 	bge	zero,r2,b0d8 <_dtoa_r+0x11b0>
    ac38:	100d883a 	mov	r6,r2
    ac3c:	1021883a 	mov	r16,r2
    ac40:	d8800c15 	stw	r2,48(sp)
    ac44:	d8800615 	stw	r2,24(sp)
    ac48:	003d8806 	br	a26c <__alt_data_end+0xfffea26c>
    ac4c:	d8800617 	ldw	r2,24(sp)
    ac50:	00be9b16 	blt	zero,r2,a6c0 <__alt_data_end+0xfffea6c0>
    ac54:	10010f1e 	bne	r2,zero,b094 <_dtoa_r+0x116c>
    ac58:	880b883a 	mov	r5,r17
    ac5c:	000d883a 	mov	r6,zero
    ac60:	01d00534 	movhi	r7,16404
    ac64:	8009883a 	mov	r4,r16
    ac68:	00037b40 	call	37b4 <__muldf3>
    ac6c:	900d883a 	mov	r6,r18
    ac70:	980f883a 	mov	r7,r19
    ac74:	1009883a 	mov	r4,r2
    ac78:	180b883a 	mov	r5,r3
    ac7c:	00036d80 	call	36d8 <__gedf2>
    ac80:	002b883a 	mov	r21,zero
    ac84:	0023883a 	mov	r17,zero
    ac88:	1000bf16 	blt	r2,zero,af88 <_dtoa_r+0x1060>
    ac8c:	d9802217 	ldw	r6,136(sp)
    ac90:	ddc00717 	ldw	r23,28(sp)
    ac94:	018c303a 	nor	r6,zero,r6
    ac98:	d9800515 	stw	r6,20(sp)
    ac9c:	a80b883a 	mov	r5,r21
    aca0:	e009883a 	mov	r4,fp
    aca4:	000bff80 	call	bff8 <_Bfree>
    aca8:	883e4926 	beq	r17,zero,a5d0 <__alt_data_end+0xfffea5d0>
    acac:	003fad06 	br	ab64 <__alt_data_end+0xfffeab64>
    acb0:	d9c01117 	ldw	r7,68(sp)
    acb4:	3801bc26 	beq	r7,zero,b3a8 <_dtoa_r+0x1480>
    acb8:	10810cc4 	addi	r2,r2,1075
    acbc:	dd400a17 	ldw	r21,40(sp)
    acc0:	dd000817 	ldw	r20,32(sp)
    acc4:	003f0a06 	br	a8f0 <__alt_data_end+0xfffea8f0>
    acc8:	00800704 	movi	r2,28
    accc:	d9000817 	ldw	r4,32(sp)
    acd0:	a0a9883a 	add	r20,r20,r2
    acd4:	b0ad883a 	add	r22,r22,r2
    acd8:	2089883a 	add	r4,r4,r2
    acdc:	d9000815 	stw	r4,32(sp)
    ace0:	003f5106 	br	aa28 <__alt_data_end+0xfffeaa28>
    ace4:	d8c00317 	ldw	r3,12(sp)
    ace8:	b8c1fc0e 	bge	r23,r3,b4dc <_dtoa_r+0x15b4>
    acec:	0027883a 	mov	r19,zero
    acf0:	b805883a 	mov	r2,r23
    acf4:	003f3e06 	br	a9f0 <__alt_data_end+0xfffea9f0>
    acf8:	880b883a 	mov	r5,r17
    acfc:	e009883a 	mov	r4,fp
    ad00:	000f883a 	mov	r7,zero
    ad04:	01800284 	movi	r6,10
    ad08:	000c0200 	call	c020 <__multadd>
    ad0c:	d9000c17 	ldw	r4,48(sp)
    ad10:	1023883a 	mov	r17,r2
    ad14:	0102040e 	bge	zero,r4,b528 <_dtoa_r+0x1600>
    ad18:	d9000615 	stw	r4,24(sp)
    ad1c:	0500050e 	bge	zero,r20,ad34 <_dtoa_r+0xe0c>
    ad20:	880b883a 	mov	r5,r17
    ad24:	a00d883a 	mov	r6,r20
    ad28:	e009883a 	mov	r4,fp
    ad2c:	000c78c0 	call	c78c <__lshift>
    ad30:	1023883a 	mov	r17,r2
    ad34:	9801241e 	bne	r19,zero,b1c8 <_dtoa_r+0x12a0>
    ad38:	8829883a 	mov	r20,r17
    ad3c:	d9000617 	ldw	r4,24(sp)
    ad40:	dcc00717 	ldw	r19,28(sp)
    ad44:	9480004c 	andi	r18,r18,1
    ad48:	20bfffc4 	addi	r2,r4,-1
    ad4c:	9885883a 	add	r2,r19,r2
    ad50:	d8800415 	stw	r2,16(sp)
    ad54:	dc800615 	stw	r18,24(sp)
    ad58:	a80b883a 	mov	r5,r21
    ad5c:	8009883a 	mov	r4,r16
    ad60:	0009d000 	call	9d00 <quorem>
    ad64:	880b883a 	mov	r5,r17
    ad68:	8009883a 	mov	r4,r16
    ad6c:	102f883a 	mov	r23,r2
    ad70:	000c8d40 	call	c8d4 <__mcmp>
    ad74:	a80b883a 	mov	r5,r21
    ad78:	a00d883a 	mov	r6,r20
    ad7c:	e009883a 	mov	r4,fp
    ad80:	102d883a 	mov	r22,r2
    ad84:	000c9340 	call	c934 <__mdiff>
    ad88:	1007883a 	mov	r3,r2
    ad8c:	10800317 	ldw	r2,12(r2)
    ad90:	bc800c04 	addi	r18,r23,48
    ad94:	180b883a 	mov	r5,r3
    ad98:	10004e1e 	bne	r2,zero,aed4 <_dtoa_r+0xfac>
    ad9c:	8009883a 	mov	r4,r16
    ada0:	d8c01615 	stw	r3,88(sp)
    ada4:	000c8d40 	call	c8d4 <__mcmp>
    ada8:	d8c01617 	ldw	r3,88(sp)
    adac:	e009883a 	mov	r4,fp
    adb0:	d8801615 	stw	r2,88(sp)
    adb4:	180b883a 	mov	r5,r3
    adb8:	000bff80 	call	bff8 <_Bfree>
    adbc:	d8801617 	ldw	r2,88(sp)
    adc0:	1000041e 	bne	r2,zero,add4 <_dtoa_r+0xeac>
    adc4:	d9800317 	ldw	r6,12(sp)
    adc8:	3000021e 	bne	r6,zero,add4 <_dtoa_r+0xeac>
    adcc:	d8c00617 	ldw	r3,24(sp)
    add0:	18003726 	beq	r3,zero,aeb0 <_dtoa_r+0xf88>
    add4:	b0002016 	blt	r22,zero,ae58 <_dtoa_r+0xf30>
    add8:	b000041e 	bne	r22,zero,adec <_dtoa_r+0xec4>
    addc:	d9000317 	ldw	r4,12(sp)
    ade0:	2000021e 	bne	r4,zero,adec <_dtoa_r+0xec4>
    ade4:	d8c00617 	ldw	r3,24(sp)
    ade8:	18001b26 	beq	r3,zero,ae58 <_dtoa_r+0xf30>
    adec:	00810716 	blt	zero,r2,b20c <_dtoa_r+0x12e4>
    adf0:	d8c00417 	ldw	r3,16(sp)
    adf4:	9d800044 	addi	r22,r19,1
    adf8:	9c800005 	stb	r18,0(r19)
    adfc:	b02f883a 	mov	r23,r22
    ae00:	98c10626 	beq	r19,r3,b21c <_dtoa_r+0x12f4>
    ae04:	800b883a 	mov	r5,r16
    ae08:	000f883a 	mov	r7,zero
    ae0c:	01800284 	movi	r6,10
    ae10:	e009883a 	mov	r4,fp
    ae14:	000c0200 	call	c020 <__multadd>
    ae18:	1021883a 	mov	r16,r2
    ae1c:	000f883a 	mov	r7,zero
    ae20:	01800284 	movi	r6,10
    ae24:	880b883a 	mov	r5,r17
    ae28:	e009883a 	mov	r4,fp
    ae2c:	8d002526 	beq	r17,r20,aec4 <_dtoa_r+0xf9c>
    ae30:	000c0200 	call	c020 <__multadd>
    ae34:	a00b883a 	mov	r5,r20
    ae38:	000f883a 	mov	r7,zero
    ae3c:	01800284 	movi	r6,10
    ae40:	e009883a 	mov	r4,fp
    ae44:	1023883a 	mov	r17,r2
    ae48:	000c0200 	call	c020 <__multadd>
    ae4c:	1029883a 	mov	r20,r2
    ae50:	b027883a 	mov	r19,r22
    ae54:	003fc006 	br	ad58 <__alt_data_end+0xfffead58>
    ae58:	9011883a 	mov	r8,r18
    ae5c:	00800e0e 	bge	zero,r2,ae98 <_dtoa_r+0xf70>
    ae60:	800b883a 	mov	r5,r16
    ae64:	01800044 	movi	r6,1
    ae68:	e009883a 	mov	r4,fp
    ae6c:	da001715 	stw	r8,92(sp)
    ae70:	000c78c0 	call	c78c <__lshift>
    ae74:	a80b883a 	mov	r5,r21
    ae78:	1009883a 	mov	r4,r2
    ae7c:	1021883a 	mov	r16,r2
    ae80:	000c8d40 	call	c8d4 <__mcmp>
    ae84:	da001717 	ldw	r8,92(sp)
    ae88:	0081960e 	bge	zero,r2,b4e4 <_dtoa_r+0x15bc>
    ae8c:	00800e44 	movi	r2,57
    ae90:	40817026 	beq	r8,r2,b454 <_dtoa_r+0x152c>
    ae94:	ba000c44 	addi	r8,r23,49
    ae98:	8825883a 	mov	r18,r17
    ae9c:	9dc00044 	addi	r23,r19,1
    aea0:	9a000005 	stb	r8,0(r19)
    aea4:	a023883a 	mov	r17,r20
    aea8:	dc000915 	stw	r16,36(sp)
    aeac:	003f2406 	br	ab40 <__alt_data_end+0xfffeab40>
    aeb0:	00800e44 	movi	r2,57
    aeb4:	9011883a 	mov	r8,r18
    aeb8:	90816626 	beq	r18,r2,b454 <_dtoa_r+0x152c>
    aebc:	05bff516 	blt	zero,r22,ae94 <__alt_data_end+0xfffeae94>
    aec0:	003ff506 	br	ae98 <__alt_data_end+0xfffeae98>
    aec4:	000c0200 	call	c020 <__multadd>
    aec8:	1023883a 	mov	r17,r2
    aecc:	1029883a 	mov	r20,r2
    aed0:	003fdf06 	br	ae50 <__alt_data_end+0xfffeae50>
    aed4:	e009883a 	mov	r4,fp
    aed8:	000bff80 	call	bff8 <_Bfree>
    aedc:	00800044 	movi	r2,1
    aee0:	003fbc06 	br	add4 <__alt_data_end+0xfffeadd4>
    aee4:	a80b883a 	mov	r5,r21
    aee8:	8009883a 	mov	r4,r16
    aeec:	000c8d40 	call	c8d4 <__mcmp>
    aef0:	103edb0e 	bge	r2,zero,aa60 <__alt_data_end+0xfffeaa60>
    aef4:	800b883a 	mov	r5,r16
    aef8:	000f883a 	mov	r7,zero
    aefc:	01800284 	movi	r6,10
    af00:	e009883a 	mov	r4,fp
    af04:	000c0200 	call	c020 <__multadd>
    af08:	1021883a 	mov	r16,r2
    af0c:	d8800517 	ldw	r2,20(sp)
    af10:	d8c00b17 	ldw	r3,44(sp)
    af14:	10bfffc4 	addi	r2,r2,-1
    af18:	d8800515 	stw	r2,20(sp)
    af1c:	183f761e 	bne	r3,zero,acf8 <__alt_data_end+0xfffeacf8>
    af20:	d9000c17 	ldw	r4,48(sp)
    af24:	0101730e 	bge	zero,r4,b4f4 <_dtoa_r+0x15cc>
    af28:	d9000615 	stw	r4,24(sp)
    af2c:	003ed006 	br	aa70 <__alt_data_end+0xfffeaa70>
    af30:	00800084 	movi	r2,2
    af34:	3081861e 	bne	r6,r2,b550 <_dtoa_r+0x1628>
    af38:	d8000b15 	stw	zero,44(sp)
    af3c:	003f3c06 	br	ac30 <__alt_data_end+0xfffeac30>
    af40:	dc000917 	ldw	r16,36(sp)
    af44:	003e9206 	br	a990 <__alt_data_end+0xfffea990>
    af48:	d9c00317 	ldw	r7,12(sp)
    af4c:	00800084 	movi	r2,2
    af50:	11fec50e 	bge	r2,r7,aa68 <__alt_data_end+0xfffeaa68>
    af54:	d9000617 	ldw	r4,24(sp)
    af58:	20013c1e 	bne	r4,zero,b44c <_dtoa_r+0x1524>
    af5c:	a80b883a 	mov	r5,r21
    af60:	000f883a 	mov	r7,zero
    af64:	01800144 	movi	r6,5
    af68:	e009883a 	mov	r4,fp
    af6c:	000c0200 	call	c020 <__multadd>
    af70:	100b883a 	mov	r5,r2
    af74:	8009883a 	mov	r4,r16
    af78:	102b883a 	mov	r21,r2
    af7c:	000c8d40 	call	c8d4 <__mcmp>
    af80:	dc000915 	stw	r16,36(sp)
    af84:	00bf410e 	bge	zero,r2,ac8c <__alt_data_end+0xfffeac8c>
    af88:	d9c00717 	ldw	r7,28(sp)
    af8c:	00800c44 	movi	r2,49
    af90:	38800005 	stb	r2,0(r7)
    af94:	d8800517 	ldw	r2,20(sp)
    af98:	3dc00044 	addi	r23,r7,1
    af9c:	10800044 	addi	r2,r2,1
    afa0:	d8800515 	stw	r2,20(sp)
    afa4:	003f3d06 	br	ac9c <__alt_data_end+0xfffeac9c>
    afa8:	d9800517 	ldw	r6,20(sp)
    afac:	d9c00717 	ldw	r7,28(sp)
    afb0:	00800c44 	movi	r2,49
    afb4:	31800044 	addi	r6,r6,1
    afb8:	d9800515 	stw	r6,20(sp)
    afbc:	38800005 	stb	r2,0(r7)
    afc0:	003edf06 	br	ab40 <__alt_data_end+0xfffeab40>
    afc4:	d8000b15 	stw	zero,44(sp)
    afc8:	003c9f06 	br	a248 <__alt_data_end+0xfffea248>
    afcc:	903e7e1e 	bne	r18,zero,a9c8 <__alt_data_end+0xfffea9c8>
    afd0:	00800434 	movhi	r2,16
    afd4:	10bfffc4 	addi	r2,r2,-1
    afd8:	9884703a 	and	r2,r19,r2
    afdc:	1000ea1e 	bne	r2,zero,b388 <_dtoa_r+0x1460>
    afe0:	9cdffc2c 	andhi	r19,r19,32752
    afe4:	9800e826 	beq	r19,zero,b388 <_dtoa_r+0x1460>
    afe8:	d9c00817 	ldw	r7,32(sp)
    afec:	b5800044 	addi	r22,r22,1
    aff0:	04c00044 	movi	r19,1
    aff4:	39c00044 	addi	r7,r7,1
    aff8:	d9c00815 	stw	r7,32(sp)
    affc:	d8800d17 	ldw	r2,52(sp)
    b000:	103e721e 	bne	r2,zero,a9cc <__alt_data_end+0xfffea9cc>
    b004:	00800044 	movi	r2,1
    b008:	003e7906 	br	a9f0 <__alt_data_end+0xfffea9f0>
    b00c:	8009883a 	mov	r4,r16
    b010:	000491c0 	call	491c <__floatsidf>
    b014:	d9800f17 	ldw	r6,60(sp)
    b018:	d9c01017 	ldw	r7,64(sp)
    b01c:	1009883a 	mov	r4,r2
    b020:	180b883a 	mov	r5,r3
    b024:	00037b40 	call	37b4 <__muldf3>
    b028:	000d883a 	mov	r6,zero
    b02c:	01d00734 	movhi	r7,16412
    b030:	1009883a 	mov	r4,r2
    b034:	180b883a 	mov	r5,r3
    b038:	000245c0 	call	245c <__adddf3>
    b03c:	047f3034 	movhi	r17,64704
    b040:	1021883a 	mov	r16,r2
    b044:	1c63883a 	add	r17,r3,r17
    b048:	d9000f17 	ldw	r4,60(sp)
    b04c:	d9401017 	ldw	r5,64(sp)
    b050:	000d883a 	mov	r6,zero
    b054:	01d00534 	movhi	r7,16404
    b058:	00040200 	call	4020 <__subdf3>
    b05c:	800d883a 	mov	r6,r16
    b060:	880f883a 	mov	r7,r17
    b064:	1009883a 	mov	r4,r2
    b068:	180b883a 	mov	r5,r3
    b06c:	102b883a 	mov	r21,r2
    b070:	1829883a 	mov	r20,r3
    b074:	00036d80 	call	36d8 <__gedf2>
    b078:	00806c16 	blt	zero,r2,b22c <_dtoa_r+0x1304>
    b07c:	89e0003c 	xorhi	r7,r17,32768
    b080:	800d883a 	mov	r6,r16
    b084:	a809883a 	mov	r4,r21
    b088:	a00b883a 	mov	r5,r20
    b08c:	00102f40 	call	102f4 <__ledf2>
    b090:	103d7e0e 	bge	r2,zero,a68c <__alt_data_end+0xfffea68c>
    b094:	002b883a 	mov	r21,zero
    b098:	0023883a 	mov	r17,zero
    b09c:	003efb06 	br	ac8c <__alt_data_end+0xfffeac8c>
    b0a0:	d8800717 	ldw	r2,28(sp)
    b0a4:	003bd006 	br	9fe8 <__alt_data_end+0xfffe9fe8>
    b0a8:	d9000a17 	ldw	r4,40(sp)
    b0ac:	d9800d17 	ldw	r6,52(sp)
    b0b0:	dd400a15 	stw	r21,40(sp)
    b0b4:	a905c83a 	sub	r2,r21,r4
    b0b8:	308d883a 	add	r6,r6,r2
    b0bc:	d9800d15 	stw	r6,52(sp)
    b0c0:	002b883a 	mov	r21,zero
    b0c4:	003e0606 	br	a8e0 <__alt_data_end+0xfffea8e0>
    b0c8:	9023883a 	mov	r17,r18
    b0cc:	9829883a 	mov	r20,r19
    b0d0:	04000084 	movi	r16,2
    b0d4:	003c9206 	br	a320 <__alt_data_end+0xfffea320>
    b0d8:	04000044 	movi	r16,1
    b0dc:	dc000c15 	stw	r16,48(sp)
    b0e0:	dc000615 	stw	r16,24(sp)
    b0e4:	dc002215 	stw	r16,136(sp)
    b0e8:	e0001115 	stw	zero,68(fp)
    b0ec:	000b883a 	mov	r5,zero
    b0f0:	003c6906 	br	a298 <__alt_data_end+0xfffea298>
    b0f4:	3021883a 	mov	r16,r6
    b0f8:	003ffb06 	br	b0e8 <__alt_data_end+0xfffeb0e8>
    b0fc:	1000021e 	bne	r2,zero,b108 <_dtoa_r+0x11e0>
    b100:	4200004c 	andi	r8,r8,1
    b104:	403e7d1e 	bne	r8,zero,aafc <__alt_data_end+0xfffeaafc>
    b108:	01000c04 	movi	r4,48
    b10c:	00000106 	br	b114 <_dtoa_r+0x11ec>
    b110:	102f883a 	mov	r23,r2
    b114:	b8bfffc4 	addi	r2,r23,-1
    b118:	10c00007 	ldb	r3,0(r2)
    b11c:	193ffc26 	beq	r3,r4,b110 <__alt_data_end+0xfffeb110>
    b120:	003e8706 	br	ab40 <__alt_data_end+0xfffeab40>
    b124:	d8800517 	ldw	r2,20(sp)
    b128:	00a3c83a 	sub	r17,zero,r2
    b12c:	8800a426 	beq	r17,zero,b3c0 <_dtoa_r+0x1498>
    b130:	888003cc 	andi	r2,r17,15
    b134:	100490fa 	slli	r2,r2,3
    b138:	00c00074 	movhi	r3,1
    b13c:	18cc7704 	addi	r3,r3,12764
    b140:	1885883a 	add	r2,r3,r2
    b144:	11800017 	ldw	r6,0(r2)
    b148:	11c00117 	ldw	r7,4(r2)
    b14c:	9009883a 	mov	r4,r18
    b150:	980b883a 	mov	r5,r19
    b154:	8823d13a 	srai	r17,r17,4
    b158:	00037b40 	call	37b4 <__muldf3>
    b15c:	d8800f15 	stw	r2,60(sp)
    b160:	d8c01015 	stw	r3,64(sp)
    b164:	8800e826 	beq	r17,zero,b508 <_dtoa_r+0x15e0>
    b168:	05000074 	movhi	r20,1
    b16c:	a50c6d04 	addi	r20,r20,12724
    b170:	04000084 	movi	r16,2
    b174:	8980004c 	andi	r6,r17,1
    b178:	1009883a 	mov	r4,r2
    b17c:	8823d07a 	srai	r17,r17,1
    b180:	180b883a 	mov	r5,r3
    b184:	30000426 	beq	r6,zero,b198 <_dtoa_r+0x1270>
    b188:	a1800017 	ldw	r6,0(r20)
    b18c:	a1c00117 	ldw	r7,4(r20)
    b190:	84000044 	addi	r16,r16,1
    b194:	00037b40 	call	37b4 <__muldf3>
    b198:	a5000204 	addi	r20,r20,8
    b19c:	883ff51e 	bne	r17,zero,b174 <__alt_data_end+0xfffeb174>
    b1a0:	d8800f15 	stw	r2,60(sp)
    b1a4:	d8c01015 	stw	r3,64(sp)
    b1a8:	003c7606 	br	a384 <__alt_data_end+0xfffea384>
    b1ac:	00c00c04 	movi	r3,48
    b1b0:	10c00005 	stb	r3,0(r2)
    b1b4:	d8c00517 	ldw	r3,20(sp)
    b1b8:	bd3fffc3 	ldbu	r20,-1(r23)
    b1bc:	18c00044 	addi	r3,r3,1
    b1c0:	d8c00515 	stw	r3,20(sp)
    b1c4:	003db906 	br	a8ac <__alt_data_end+0xfffea8ac>
    b1c8:	89400117 	ldw	r5,4(r17)
    b1cc:	e009883a 	mov	r4,fp
    b1d0:	000bf500 	call	bf50 <_Balloc>
    b1d4:	89800417 	ldw	r6,16(r17)
    b1d8:	89400304 	addi	r5,r17,12
    b1dc:	11000304 	addi	r4,r2,12
    b1e0:	31800084 	addi	r6,r6,2
    b1e4:	318d883a 	add	r6,r6,r6
    b1e8:	318d883a 	add	r6,r6,r6
    b1ec:	1027883a 	mov	r19,r2
    b1f0:	0006b9c0 	call	6b9c <memcpy>
    b1f4:	01800044 	movi	r6,1
    b1f8:	980b883a 	mov	r5,r19
    b1fc:	e009883a 	mov	r4,fp
    b200:	000c78c0 	call	c78c <__lshift>
    b204:	1029883a 	mov	r20,r2
    b208:	003ecc06 	br	ad3c <__alt_data_end+0xfffead3c>
    b20c:	00800e44 	movi	r2,57
    b210:	90809026 	beq	r18,r2,b454 <_dtoa_r+0x152c>
    b214:	92000044 	addi	r8,r18,1
    b218:	003f1f06 	br	ae98 <__alt_data_end+0xfffeae98>
    b21c:	9011883a 	mov	r8,r18
    b220:	8825883a 	mov	r18,r17
    b224:	a023883a 	mov	r17,r20
    b228:	003e2906 	br	aad0 <__alt_data_end+0xfffeaad0>
    b22c:	002b883a 	mov	r21,zero
    b230:	0023883a 	mov	r17,zero
    b234:	003f5406 	br	af88 <__alt_data_end+0xfffeaf88>
    b238:	61bfffc4 	addi	r6,r12,-1
    b23c:	300490fa 	slli	r2,r6,3
    b240:	00c00074 	movhi	r3,1
    b244:	18cc7704 	addi	r3,r3,12764
    b248:	1885883a 	add	r2,r3,r2
    b24c:	11000017 	ldw	r4,0(r2)
    b250:	11400117 	ldw	r5,4(r2)
    b254:	d8800717 	ldw	r2,28(sp)
    b258:	880f883a 	mov	r7,r17
    b25c:	d9801215 	stw	r6,72(sp)
    b260:	800d883a 	mov	r6,r16
    b264:	db001615 	stw	r12,88(sp)
    b268:	15c00044 	addi	r23,r2,1
    b26c:	00037b40 	call	37b4 <__muldf3>
    b270:	d9401017 	ldw	r5,64(sp)
    b274:	d9000f17 	ldw	r4,60(sp)
    b278:	d8c01515 	stw	r3,84(sp)
    b27c:	d8801415 	stw	r2,80(sp)
    b280:	00103e80 	call	103e8 <__fixdfsi>
    b284:	1009883a 	mov	r4,r2
    b288:	1021883a 	mov	r16,r2
    b28c:	000491c0 	call	491c <__floatsidf>
    b290:	d9000f17 	ldw	r4,60(sp)
    b294:	d9401017 	ldw	r5,64(sp)
    b298:	100d883a 	mov	r6,r2
    b29c:	180f883a 	mov	r7,r3
    b2a0:	00040200 	call	4020 <__subdf3>
    b2a4:	1829883a 	mov	r20,r3
    b2a8:	d8c00717 	ldw	r3,28(sp)
    b2ac:	84000c04 	addi	r16,r16,48
    b2b0:	1023883a 	mov	r17,r2
    b2b4:	1c000005 	stb	r16,0(r3)
    b2b8:	db001617 	ldw	r12,88(sp)
    b2bc:	00800044 	movi	r2,1
    b2c0:	60802226 	beq	r12,r2,b34c <_dtoa_r+0x1424>
    b2c4:	d9c00717 	ldw	r7,28(sp)
    b2c8:	8805883a 	mov	r2,r17
    b2cc:	b82b883a 	mov	r21,r23
    b2d0:	3b19883a 	add	r12,r7,r12
    b2d4:	6023883a 	mov	r17,r12
    b2d8:	a007883a 	mov	r3,r20
    b2dc:	dc800f15 	stw	r18,60(sp)
    b2e0:	000d883a 	mov	r6,zero
    b2e4:	01d00934 	movhi	r7,16420
    b2e8:	1009883a 	mov	r4,r2
    b2ec:	180b883a 	mov	r5,r3
    b2f0:	00037b40 	call	37b4 <__muldf3>
    b2f4:	180b883a 	mov	r5,r3
    b2f8:	1009883a 	mov	r4,r2
    b2fc:	1829883a 	mov	r20,r3
    b300:	1025883a 	mov	r18,r2
    b304:	00103e80 	call	103e8 <__fixdfsi>
    b308:	1009883a 	mov	r4,r2
    b30c:	1021883a 	mov	r16,r2
    b310:	000491c0 	call	491c <__floatsidf>
    b314:	100d883a 	mov	r6,r2
    b318:	180f883a 	mov	r7,r3
    b31c:	9009883a 	mov	r4,r18
    b320:	a00b883a 	mov	r5,r20
    b324:	84000c04 	addi	r16,r16,48
    b328:	00040200 	call	4020 <__subdf3>
    b32c:	ad400044 	addi	r21,r21,1
    b330:	ac3fffc5 	stb	r16,-1(r21)
    b334:	ac7fea1e 	bne	r21,r17,b2e0 <__alt_data_end+0xfffeb2e0>
    b338:	1023883a 	mov	r17,r2
    b33c:	d8801217 	ldw	r2,72(sp)
    b340:	dc800f17 	ldw	r18,60(sp)
    b344:	1829883a 	mov	r20,r3
    b348:	b8af883a 	add	r23,r23,r2
    b34c:	d9001417 	ldw	r4,80(sp)
    b350:	d9401517 	ldw	r5,84(sp)
    b354:	000d883a 	mov	r6,zero
    b358:	01cff834 	movhi	r7,16352
    b35c:	000245c0 	call	245c <__adddf3>
    b360:	880d883a 	mov	r6,r17
    b364:	a00f883a 	mov	r7,r20
    b368:	1009883a 	mov	r4,r2
    b36c:	180b883a 	mov	r5,r3
    b370:	00102f40 	call	102f4 <__ledf2>
    b374:	10003e0e 	bge	r2,zero,b470 <_dtoa_r+0x1548>
    b378:	d9001317 	ldw	r4,76(sp)
    b37c:	bd3fffc3 	ldbu	r20,-1(r23)
    b380:	d9000515 	stw	r4,20(sp)
    b384:	003d3b06 	br	a874 <__alt_data_end+0xfffea874>
    b388:	0027883a 	mov	r19,zero
    b38c:	003f1b06 	br	affc <__alt_data_end+0xfffeaffc>
    b390:	d8800817 	ldw	r2,32(sp)
    b394:	11e9c83a 	sub	r20,r2,r7
    b398:	0005883a 	mov	r2,zero
    b39c:	003d5406 	br	a8f0 <__alt_data_end+0xfffea8f0>
    b3a0:	00800044 	movi	r2,1
    b3a4:	003dc706 	br	aac4 <__alt_data_end+0xfffeaac4>
    b3a8:	d8c00217 	ldw	r3,8(sp)
    b3ac:	00800d84 	movi	r2,54
    b3b0:	dd400a17 	ldw	r21,40(sp)
    b3b4:	10c5c83a 	sub	r2,r2,r3
    b3b8:	dd000817 	ldw	r20,32(sp)
    b3bc:	003d4c06 	br	a8f0 <__alt_data_end+0xfffea8f0>
    b3c0:	dc800f15 	stw	r18,60(sp)
    b3c4:	dcc01015 	stw	r19,64(sp)
    b3c8:	04000084 	movi	r16,2
    b3cc:	003bed06 	br	a384 <__alt_data_end+0xfffea384>
    b3d0:	d9000617 	ldw	r4,24(sp)
    b3d4:	203f0d26 	beq	r4,zero,b00c <__alt_data_end+0xfffeb00c>
    b3d8:	d9800c17 	ldw	r6,48(sp)
    b3dc:	01bcab0e 	bge	zero,r6,a68c <__alt_data_end+0xfffea68c>
    b3e0:	d9401017 	ldw	r5,64(sp)
    b3e4:	d9000f17 	ldw	r4,60(sp)
    b3e8:	000d883a 	mov	r6,zero
    b3ec:	01d00934 	movhi	r7,16420
    b3f0:	00037b40 	call	37b4 <__muldf3>
    b3f4:	81000044 	addi	r4,r16,1
    b3f8:	d8800f15 	stw	r2,60(sp)
    b3fc:	d8c01015 	stw	r3,64(sp)
    b400:	000491c0 	call	491c <__floatsidf>
    b404:	d9800f17 	ldw	r6,60(sp)
    b408:	d9c01017 	ldw	r7,64(sp)
    b40c:	1009883a 	mov	r4,r2
    b410:	180b883a 	mov	r5,r3
    b414:	00037b40 	call	37b4 <__muldf3>
    b418:	01d00734 	movhi	r7,16412
    b41c:	000d883a 	mov	r6,zero
    b420:	1009883a 	mov	r4,r2
    b424:	180b883a 	mov	r5,r3
    b428:	000245c0 	call	245c <__adddf3>
    b42c:	d9c00517 	ldw	r7,20(sp)
    b430:	047f3034 	movhi	r17,64704
    b434:	1021883a 	mov	r16,r2
    b438:	39ffffc4 	addi	r7,r7,-1
    b43c:	d9c01315 	stw	r7,76(sp)
    b440:	1c63883a 	add	r17,r3,r17
    b444:	db000c17 	ldw	r12,48(sp)
    b448:	003bea06 	br	a3f4 <__alt_data_end+0xfffea3f4>
    b44c:	dc000915 	stw	r16,36(sp)
    b450:	003e0e06 	br	ac8c <__alt_data_end+0xfffeac8c>
    b454:	01000e44 	movi	r4,57
    b458:	8825883a 	mov	r18,r17
    b45c:	9dc00044 	addi	r23,r19,1
    b460:	99000005 	stb	r4,0(r19)
    b464:	a023883a 	mov	r17,r20
    b468:	dc000915 	stw	r16,36(sp)
    b46c:	003da406 	br	ab00 <__alt_data_end+0xfffeab00>
    b470:	d9801417 	ldw	r6,80(sp)
    b474:	d9c01517 	ldw	r7,84(sp)
    b478:	0009883a 	mov	r4,zero
    b47c:	014ff834 	movhi	r5,16352
    b480:	00040200 	call	4020 <__subdf3>
    b484:	880d883a 	mov	r6,r17
    b488:	a00f883a 	mov	r7,r20
    b48c:	1009883a 	mov	r4,r2
    b490:	180b883a 	mov	r5,r3
    b494:	00036d80 	call	36d8 <__gedf2>
    b498:	00bc7c0e 	bge	zero,r2,a68c <__alt_data_end+0xfffea68c>
    b49c:	01000c04 	movi	r4,48
    b4a0:	00000106 	br	b4a8 <_dtoa_r+0x1580>
    b4a4:	102f883a 	mov	r23,r2
    b4a8:	b8bfffc4 	addi	r2,r23,-1
    b4ac:	10c00007 	ldb	r3,0(r2)
    b4b0:	193ffc26 	beq	r3,r4,b4a4 <__alt_data_end+0xfffeb4a4>
    b4b4:	d9801317 	ldw	r6,76(sp)
    b4b8:	d9800515 	stw	r6,20(sp)
    b4bc:	003c4406 	br	a5d0 <__alt_data_end+0xfffea5d0>
    b4c0:	d9801317 	ldw	r6,76(sp)
    b4c4:	d9800515 	stw	r6,20(sp)
    b4c8:	003cea06 	br	a874 <__alt_data_end+0xfffea874>
    b4cc:	dd800f17 	ldw	r22,60(sp)
    b4d0:	dcc01017 	ldw	r19,64(sp)
    b4d4:	dc801217 	ldw	r18,72(sp)
    b4d8:	003c6c06 	br	a68c <__alt_data_end+0xfffea68c>
    b4dc:	903e031e 	bne	r18,zero,acec <__alt_data_end+0xfffeacec>
    b4e0:	003ebb06 	br	afd0 <__alt_data_end+0xfffeafd0>
    b4e4:	103e6c1e 	bne	r2,zero,ae98 <__alt_data_end+0xfffeae98>
    b4e8:	4080004c 	andi	r2,r8,1
    b4ec:	103e6a26 	beq	r2,zero,ae98 <__alt_data_end+0xfffeae98>
    b4f0:	003e6606 	br	ae8c <__alt_data_end+0xfffeae8c>
    b4f4:	d8c00317 	ldw	r3,12(sp)
    b4f8:	00800084 	movi	r2,2
    b4fc:	10c02916 	blt	r2,r3,b5a4 <_dtoa_r+0x167c>
    b500:	d9000c17 	ldw	r4,48(sp)
    b504:	003e8806 	br	af28 <__alt_data_end+0xfffeaf28>
    b508:	04000084 	movi	r16,2
    b50c:	003b9d06 	br	a384 <__alt_data_end+0xfffea384>
    b510:	d9001317 	ldw	r4,76(sp)
    b514:	d9000515 	stw	r4,20(sp)
    b518:	003cd606 	br	a874 <__alt_data_end+0xfffea874>
    b51c:	d8801317 	ldw	r2,76(sp)
    b520:	d8800515 	stw	r2,20(sp)
    b524:	003c2a06 	br	a5d0 <__alt_data_end+0xfffea5d0>
    b528:	d9800317 	ldw	r6,12(sp)
    b52c:	00800084 	movi	r2,2
    b530:	11801516 	blt	r2,r6,b588 <_dtoa_r+0x1660>
    b534:	d9c00c17 	ldw	r7,48(sp)
    b538:	d9c00615 	stw	r7,24(sp)
    b53c:	003df706 	br	ad1c <__alt_data_end+0xfffead1c>
    b540:	193d3926 	beq	r3,r4,aa28 <__alt_data_end+0xfffeaa28>
    b544:	00c00f04 	movi	r3,60
    b548:	1885c83a 	sub	r2,r3,r2
    b54c:	003ddf06 	br	accc <__alt_data_end+0xfffeaccc>
    b550:	e009883a 	mov	r4,fp
    b554:	e0001115 	stw	zero,68(fp)
    b558:	000b883a 	mov	r5,zero
    b55c:	000bf500 	call	bf50 <_Balloc>
    b560:	d8800715 	stw	r2,28(sp)
    b564:	d8c00717 	ldw	r3,28(sp)
    b568:	00bfffc4 	movi	r2,-1
    b56c:	01000044 	movi	r4,1
    b570:	d8800c15 	stw	r2,48(sp)
    b574:	e0c01015 	stw	r3,64(fp)
    b578:	d9000b15 	stw	r4,44(sp)
    b57c:	d8800615 	stw	r2,24(sp)
    b580:	d8002215 	stw	zero,136(sp)
    b584:	003c4106 	br	a68c <__alt_data_end+0xfffea68c>
    b588:	d8c00c17 	ldw	r3,48(sp)
    b58c:	d8c00615 	stw	r3,24(sp)
    b590:	003e7006 	br	af54 <__alt_data_end+0xfffeaf54>
    b594:	04400044 	movi	r17,1
    b598:	003b2006 	br	a21c <__alt_data_end+0xfffea21c>
    b59c:	000b883a 	mov	r5,zero
    b5a0:	003b3d06 	br	a298 <__alt_data_end+0xfffea298>
    b5a4:	d8800c17 	ldw	r2,48(sp)
    b5a8:	d8800615 	stw	r2,24(sp)
    b5ac:	003e6906 	br	af54 <__alt_data_end+0xfffeaf54>

0000b5b0 <__sflags>:
    b5b0:	28800007 	ldb	r2,0(r5)
    b5b4:	00c01c84 	movi	r3,114
    b5b8:	10c02426 	beq	r2,r3,b64c <__sflags+0x9c>
    b5bc:	00c01dc4 	movi	r3,119
    b5c0:	10c01e26 	beq	r2,r3,b63c <__sflags+0x8c>
    b5c4:	00c01844 	movi	r3,97
    b5c8:	10c00426 	beq	r2,r3,b5dc <__sflags+0x2c>
    b5cc:	00800584 	movi	r2,22
    b5d0:	20800015 	stw	r2,0(r4)
    b5d4:	0005883a 	mov	r2,zero
    b5d8:	f800283a 	ret
    b5dc:	02c08204 	movi	r11,520
    b5e0:	01000044 	movi	r4,1
    b5e4:	00804204 	movi	r2,264
    b5e8:	01c00ac4 	movi	r7,43
    b5ec:	02bff8c4 	movi	r10,-29
    b5f0:	027fff04 	movi	r9,-4
    b5f4:	02001e04 	movi	r8,120
    b5f8:	29400044 	addi	r5,r5,1
    b5fc:	28c00007 	ldb	r3,0(r5)
    b600:	18000626 	beq	r3,zero,b61c <__sflags+0x6c>
    b604:	19c00826 	beq	r3,r7,b628 <__sflags+0x78>
    b608:	1a3ffb1e 	bne	r3,r8,b5f8 <__alt_data_end+0xfffeb5f8>
    b60c:	29400044 	addi	r5,r5,1
    b610:	28c00007 	ldb	r3,0(r5)
    b614:	21020014 	ori	r4,r4,2048
    b618:	183ffa1e 	bne	r3,zero,b604 <__alt_data_end+0xfffeb604>
    b61c:	22c8b03a 	or	r4,r4,r11
    b620:	31000015 	stw	r4,0(r6)
    b624:	f800283a 	ret
    b628:	1284703a 	and	r2,r2,r10
    b62c:	2248703a 	and	r4,r4,r9
    b630:	10800414 	ori	r2,r2,16
    b634:	21000094 	ori	r4,r4,2
    b638:	003fef06 	br	b5f8 <__alt_data_end+0xfffeb5f8>
    b63c:	02c18004 	movi	r11,1536
    b640:	01000044 	movi	r4,1
    b644:	00800204 	movi	r2,8
    b648:	003fe706 	br	b5e8 <__alt_data_end+0xfffeb5e8>
    b64c:	0017883a 	mov	r11,zero
    b650:	0009883a 	mov	r4,zero
    b654:	00800104 	movi	r2,4
    b658:	003fe306 	br	b5e8 <__alt_data_end+0xfffeb5e8>

0000b65c <__sfvwrite_r>:
    b65c:	30800217 	ldw	r2,8(r6)
    b660:	10006726 	beq	r2,zero,b800 <__sfvwrite_r+0x1a4>
    b664:	28c0030b 	ldhu	r3,12(r5)
    b668:	defff404 	addi	sp,sp,-48
    b66c:	dd400715 	stw	r21,28(sp)
    b670:	dd000615 	stw	r20,24(sp)
    b674:	dc000215 	stw	r16,8(sp)
    b678:	dfc00b15 	stw	ra,44(sp)
    b67c:	df000a15 	stw	fp,40(sp)
    b680:	ddc00915 	stw	r23,36(sp)
    b684:	dd800815 	stw	r22,32(sp)
    b688:	dcc00515 	stw	r19,20(sp)
    b68c:	dc800415 	stw	r18,16(sp)
    b690:	dc400315 	stw	r17,12(sp)
    b694:	1880020c 	andi	r2,r3,8
    b698:	2821883a 	mov	r16,r5
    b69c:	202b883a 	mov	r21,r4
    b6a0:	3029883a 	mov	r20,r6
    b6a4:	10002726 	beq	r2,zero,b744 <__sfvwrite_r+0xe8>
    b6a8:	28800417 	ldw	r2,16(r5)
    b6ac:	10002526 	beq	r2,zero,b744 <__sfvwrite_r+0xe8>
    b6b0:	1880008c 	andi	r2,r3,2
    b6b4:	a4400017 	ldw	r17,0(r20)
    b6b8:	10002a26 	beq	r2,zero,b764 <__sfvwrite_r+0x108>
    b6bc:	05a00034 	movhi	r22,32768
    b6c0:	0027883a 	mov	r19,zero
    b6c4:	0025883a 	mov	r18,zero
    b6c8:	b5bf0004 	addi	r22,r22,-1024
    b6cc:	980d883a 	mov	r6,r19
    b6d0:	a809883a 	mov	r4,r21
    b6d4:	90004626 	beq	r18,zero,b7f0 <__sfvwrite_r+0x194>
    b6d8:	900f883a 	mov	r7,r18
    b6dc:	b480022e 	bgeu	r22,r18,b6e8 <__sfvwrite_r+0x8c>
    b6e0:	01e00034 	movhi	r7,32768
    b6e4:	39ff0004 	addi	r7,r7,-1024
    b6e8:	80800917 	ldw	r2,36(r16)
    b6ec:	81400717 	ldw	r5,28(r16)
    b6f0:	103ee83a 	callr	r2
    b6f4:	00805a0e 	bge	zero,r2,b860 <__sfvwrite_r+0x204>
    b6f8:	a0c00217 	ldw	r3,8(r20)
    b6fc:	98a7883a 	add	r19,r19,r2
    b700:	90a5c83a 	sub	r18,r18,r2
    b704:	1885c83a 	sub	r2,r3,r2
    b708:	a0800215 	stw	r2,8(r20)
    b70c:	103fef1e 	bne	r2,zero,b6cc <__alt_data_end+0xfffeb6cc>
    b710:	0005883a 	mov	r2,zero
    b714:	dfc00b17 	ldw	ra,44(sp)
    b718:	df000a17 	ldw	fp,40(sp)
    b71c:	ddc00917 	ldw	r23,36(sp)
    b720:	dd800817 	ldw	r22,32(sp)
    b724:	dd400717 	ldw	r21,28(sp)
    b728:	dd000617 	ldw	r20,24(sp)
    b72c:	dcc00517 	ldw	r19,20(sp)
    b730:	dc800417 	ldw	r18,16(sp)
    b734:	dc400317 	ldw	r17,12(sp)
    b738:	dc000217 	ldw	r16,8(sp)
    b73c:	dec00c04 	addi	sp,sp,48
    b740:	f800283a 	ret
    b744:	800b883a 	mov	r5,r16
    b748:	a809883a 	mov	r4,r21
    b74c:	00099d80 	call	99d8 <__swsetup_r>
    b750:	1000ee1e 	bne	r2,zero,bb0c <__sfvwrite_r+0x4b0>
    b754:	80c0030b 	ldhu	r3,12(r16)
    b758:	a4400017 	ldw	r17,0(r20)
    b75c:	1880008c 	andi	r2,r3,2
    b760:	103fd61e 	bne	r2,zero,b6bc <__alt_data_end+0xfffeb6bc>
    b764:	1880004c 	andi	r2,r3,1
    b768:	1000421e 	bne	r2,zero,b874 <__sfvwrite_r+0x218>
    b76c:	0039883a 	mov	fp,zero
    b770:	0025883a 	mov	r18,zero
    b774:	90001a26 	beq	r18,zero,b7e0 <__sfvwrite_r+0x184>
    b778:	1880800c 	andi	r2,r3,512
    b77c:	84c00217 	ldw	r19,8(r16)
    b780:	10002126 	beq	r2,zero,b808 <__sfvwrite_r+0x1ac>
    b784:	982f883a 	mov	r23,r19
    b788:	94c09636 	bltu	r18,r19,b9e4 <__sfvwrite_r+0x388>
    b78c:	1881200c 	andi	r2,r3,1152
    b790:	1000a11e 	bne	r2,zero,ba18 <__sfvwrite_r+0x3bc>
    b794:	81000017 	ldw	r4,0(r16)
    b798:	b80d883a 	mov	r6,r23
    b79c:	e00b883a 	mov	r5,fp
    b7a0:	000bdf40 	call	bdf4 <memmove>
    b7a4:	80c00217 	ldw	r3,8(r16)
    b7a8:	81000017 	ldw	r4,0(r16)
    b7ac:	9005883a 	mov	r2,r18
    b7b0:	1ce7c83a 	sub	r19,r3,r19
    b7b4:	25cf883a 	add	r7,r4,r23
    b7b8:	84c00215 	stw	r19,8(r16)
    b7bc:	81c00015 	stw	r7,0(r16)
    b7c0:	a0c00217 	ldw	r3,8(r20)
    b7c4:	e0b9883a 	add	fp,fp,r2
    b7c8:	90a5c83a 	sub	r18,r18,r2
    b7cc:	18a7c83a 	sub	r19,r3,r2
    b7d0:	a4c00215 	stw	r19,8(r20)
    b7d4:	983fce26 	beq	r19,zero,b710 <__alt_data_end+0xfffeb710>
    b7d8:	80c0030b 	ldhu	r3,12(r16)
    b7dc:	903fe61e 	bne	r18,zero,b778 <__alt_data_end+0xfffeb778>
    b7e0:	8f000017 	ldw	fp,0(r17)
    b7e4:	8c800117 	ldw	r18,4(r17)
    b7e8:	8c400204 	addi	r17,r17,8
    b7ec:	003fe106 	br	b774 <__alt_data_end+0xfffeb774>
    b7f0:	8cc00017 	ldw	r19,0(r17)
    b7f4:	8c800117 	ldw	r18,4(r17)
    b7f8:	8c400204 	addi	r17,r17,8
    b7fc:	003fb306 	br	b6cc <__alt_data_end+0xfffeb6cc>
    b800:	0005883a 	mov	r2,zero
    b804:	f800283a 	ret
    b808:	81000017 	ldw	r4,0(r16)
    b80c:	80800417 	ldw	r2,16(r16)
    b810:	11005a36 	bltu	r2,r4,b97c <__sfvwrite_r+0x320>
    b814:	85c00517 	ldw	r23,20(r16)
    b818:	95c05836 	bltu	r18,r23,b97c <__sfvwrite_r+0x320>
    b81c:	00a00034 	movhi	r2,32768
    b820:	10bfffc4 	addi	r2,r2,-1
    b824:	9009883a 	mov	r4,r18
    b828:	1480012e 	bgeu	r2,r18,b830 <__sfvwrite_r+0x1d4>
    b82c:	1009883a 	mov	r4,r2
    b830:	b80b883a 	mov	r5,r23
    b834:	0004a5c0 	call	4a5c <__divsi3>
    b838:	b80b883a 	mov	r5,r23
    b83c:	1009883a 	mov	r4,r2
    b840:	0001a300 	call	1a30 <__mulsi3>
    b844:	81400717 	ldw	r5,28(r16)
    b848:	80c00917 	ldw	r3,36(r16)
    b84c:	100f883a 	mov	r7,r2
    b850:	e00d883a 	mov	r6,fp
    b854:	a809883a 	mov	r4,r21
    b858:	183ee83a 	callr	r3
    b85c:	00bfd816 	blt	zero,r2,b7c0 <__alt_data_end+0xfffeb7c0>
    b860:	8080030b 	ldhu	r2,12(r16)
    b864:	10801014 	ori	r2,r2,64
    b868:	8080030d 	sth	r2,12(r16)
    b86c:	00bfffc4 	movi	r2,-1
    b870:	003fa806 	br	b714 <__alt_data_end+0xfffeb714>
    b874:	0027883a 	mov	r19,zero
    b878:	0011883a 	mov	r8,zero
    b87c:	0039883a 	mov	fp,zero
    b880:	0025883a 	mov	r18,zero
    b884:	90001f26 	beq	r18,zero,b904 <__sfvwrite_r+0x2a8>
    b888:	40005a26 	beq	r8,zero,b9f4 <__sfvwrite_r+0x398>
    b88c:	982d883a 	mov	r22,r19
    b890:	94c0012e 	bgeu	r18,r19,b898 <__sfvwrite_r+0x23c>
    b894:	902d883a 	mov	r22,r18
    b898:	81000017 	ldw	r4,0(r16)
    b89c:	80800417 	ldw	r2,16(r16)
    b8a0:	b02f883a 	mov	r23,r22
    b8a4:	81c00517 	ldw	r7,20(r16)
    b8a8:	1100032e 	bgeu	r2,r4,b8b8 <__sfvwrite_r+0x25c>
    b8ac:	80c00217 	ldw	r3,8(r16)
    b8b0:	38c7883a 	add	r3,r7,r3
    b8b4:	1d801816 	blt	r3,r22,b918 <__sfvwrite_r+0x2bc>
    b8b8:	b1c03e16 	blt	r22,r7,b9b4 <__sfvwrite_r+0x358>
    b8bc:	80800917 	ldw	r2,36(r16)
    b8c0:	81400717 	ldw	r5,28(r16)
    b8c4:	e00d883a 	mov	r6,fp
    b8c8:	da000115 	stw	r8,4(sp)
    b8cc:	a809883a 	mov	r4,r21
    b8d0:	103ee83a 	callr	r2
    b8d4:	102f883a 	mov	r23,r2
    b8d8:	da000117 	ldw	r8,4(sp)
    b8dc:	00bfe00e 	bge	zero,r2,b860 <__alt_data_end+0xfffeb860>
    b8e0:	9de7c83a 	sub	r19,r19,r23
    b8e4:	98001f26 	beq	r19,zero,b964 <__sfvwrite_r+0x308>
    b8e8:	a0800217 	ldw	r2,8(r20)
    b8ec:	e5f9883a 	add	fp,fp,r23
    b8f0:	95e5c83a 	sub	r18,r18,r23
    b8f4:	15efc83a 	sub	r23,r2,r23
    b8f8:	a5c00215 	stw	r23,8(r20)
    b8fc:	b83f8426 	beq	r23,zero,b710 <__alt_data_end+0xfffeb710>
    b900:	903fe11e 	bne	r18,zero,b888 <__alt_data_end+0xfffeb888>
    b904:	8f000017 	ldw	fp,0(r17)
    b908:	8c800117 	ldw	r18,4(r17)
    b90c:	0011883a 	mov	r8,zero
    b910:	8c400204 	addi	r17,r17,8
    b914:	003fdb06 	br	b884 <__alt_data_end+0xfffeb884>
    b918:	180d883a 	mov	r6,r3
    b91c:	e00b883a 	mov	r5,fp
    b920:	da000115 	stw	r8,4(sp)
    b924:	d8c00015 	stw	r3,0(sp)
    b928:	000bdf40 	call	bdf4 <memmove>
    b92c:	d8c00017 	ldw	r3,0(sp)
    b930:	80800017 	ldw	r2,0(r16)
    b934:	800b883a 	mov	r5,r16
    b938:	a809883a 	mov	r4,r21
    b93c:	10c5883a 	add	r2,r2,r3
    b940:	80800015 	stw	r2,0(r16)
    b944:	d8c00015 	stw	r3,0(sp)
    b948:	0004f840 	call	4f84 <_fflush_r>
    b94c:	d8c00017 	ldw	r3,0(sp)
    b950:	da000117 	ldw	r8,4(sp)
    b954:	103fc21e 	bne	r2,zero,b860 <__alt_data_end+0xfffeb860>
    b958:	182f883a 	mov	r23,r3
    b95c:	9de7c83a 	sub	r19,r19,r23
    b960:	983fe11e 	bne	r19,zero,b8e8 <__alt_data_end+0xfffeb8e8>
    b964:	800b883a 	mov	r5,r16
    b968:	a809883a 	mov	r4,r21
    b96c:	0004f840 	call	4f84 <_fflush_r>
    b970:	103fbb1e 	bne	r2,zero,b860 <__alt_data_end+0xfffeb860>
    b974:	0011883a 	mov	r8,zero
    b978:	003fdb06 	br	b8e8 <__alt_data_end+0xfffeb8e8>
    b97c:	94c0012e 	bgeu	r18,r19,b984 <__sfvwrite_r+0x328>
    b980:	9027883a 	mov	r19,r18
    b984:	980d883a 	mov	r6,r19
    b988:	e00b883a 	mov	r5,fp
    b98c:	000bdf40 	call	bdf4 <memmove>
    b990:	80800217 	ldw	r2,8(r16)
    b994:	80c00017 	ldw	r3,0(r16)
    b998:	14c5c83a 	sub	r2,r2,r19
    b99c:	1cc7883a 	add	r3,r3,r19
    b9a0:	80800215 	stw	r2,8(r16)
    b9a4:	80c00015 	stw	r3,0(r16)
    b9a8:	10004326 	beq	r2,zero,bab8 <__sfvwrite_r+0x45c>
    b9ac:	9805883a 	mov	r2,r19
    b9b0:	003f8306 	br	b7c0 <__alt_data_end+0xfffeb7c0>
    b9b4:	b00d883a 	mov	r6,r22
    b9b8:	e00b883a 	mov	r5,fp
    b9bc:	da000115 	stw	r8,4(sp)
    b9c0:	000bdf40 	call	bdf4 <memmove>
    b9c4:	80800217 	ldw	r2,8(r16)
    b9c8:	80c00017 	ldw	r3,0(r16)
    b9cc:	da000117 	ldw	r8,4(sp)
    b9d0:	1585c83a 	sub	r2,r2,r22
    b9d4:	1dad883a 	add	r22,r3,r22
    b9d8:	80800215 	stw	r2,8(r16)
    b9dc:	85800015 	stw	r22,0(r16)
    b9e0:	003fbf06 	br	b8e0 <__alt_data_end+0xfffeb8e0>
    b9e4:	81000017 	ldw	r4,0(r16)
    b9e8:	9027883a 	mov	r19,r18
    b9ec:	902f883a 	mov	r23,r18
    b9f0:	003f6906 	br	b798 <__alt_data_end+0xfffeb798>
    b9f4:	900d883a 	mov	r6,r18
    b9f8:	01400284 	movi	r5,10
    b9fc:	e009883a 	mov	r4,fp
    ba00:	000bd100 	call	bd10 <memchr>
    ba04:	10003e26 	beq	r2,zero,bb00 <__sfvwrite_r+0x4a4>
    ba08:	10800044 	addi	r2,r2,1
    ba0c:	1727c83a 	sub	r19,r2,fp
    ba10:	02000044 	movi	r8,1
    ba14:	003f9d06 	br	b88c <__alt_data_end+0xfffeb88c>
    ba18:	80800517 	ldw	r2,20(r16)
    ba1c:	81400417 	ldw	r5,16(r16)
    ba20:	81c00017 	ldw	r7,0(r16)
    ba24:	10a7883a 	add	r19,r2,r2
    ba28:	9885883a 	add	r2,r19,r2
    ba2c:	1026d7fa 	srli	r19,r2,31
    ba30:	396dc83a 	sub	r22,r7,r5
    ba34:	b1000044 	addi	r4,r22,1
    ba38:	9885883a 	add	r2,r19,r2
    ba3c:	1027d07a 	srai	r19,r2,1
    ba40:	2485883a 	add	r2,r4,r18
    ba44:	980d883a 	mov	r6,r19
    ba48:	9880022e 	bgeu	r19,r2,ba54 <__sfvwrite_r+0x3f8>
    ba4c:	1027883a 	mov	r19,r2
    ba50:	100d883a 	mov	r6,r2
    ba54:	18c1000c 	andi	r3,r3,1024
    ba58:	18001c26 	beq	r3,zero,bacc <__sfvwrite_r+0x470>
    ba5c:	300b883a 	mov	r5,r6
    ba60:	a809883a 	mov	r4,r21
    ba64:	00063900 	call	6390 <_malloc_r>
    ba68:	102f883a 	mov	r23,r2
    ba6c:	10002926 	beq	r2,zero,bb14 <__sfvwrite_r+0x4b8>
    ba70:	81400417 	ldw	r5,16(r16)
    ba74:	b00d883a 	mov	r6,r22
    ba78:	1009883a 	mov	r4,r2
    ba7c:	0006b9c0 	call	6b9c <memcpy>
    ba80:	8080030b 	ldhu	r2,12(r16)
    ba84:	00fedfc4 	movi	r3,-1153
    ba88:	10c4703a 	and	r2,r2,r3
    ba8c:	10802014 	ori	r2,r2,128
    ba90:	8080030d 	sth	r2,12(r16)
    ba94:	bd89883a 	add	r4,r23,r22
    ba98:	9d8fc83a 	sub	r7,r19,r22
    ba9c:	85c00415 	stw	r23,16(r16)
    baa0:	84c00515 	stw	r19,20(r16)
    baa4:	81000015 	stw	r4,0(r16)
    baa8:	9027883a 	mov	r19,r18
    baac:	81c00215 	stw	r7,8(r16)
    bab0:	902f883a 	mov	r23,r18
    bab4:	003f3806 	br	b798 <__alt_data_end+0xfffeb798>
    bab8:	800b883a 	mov	r5,r16
    babc:	a809883a 	mov	r4,r21
    bac0:	0004f840 	call	4f84 <_fflush_r>
    bac4:	103fb926 	beq	r2,zero,b9ac <__alt_data_end+0xfffeb9ac>
    bac8:	003f6506 	br	b860 <__alt_data_end+0xfffeb860>
    bacc:	a809883a 	mov	r4,r21
    bad0:	000d1d00 	call	d1d0 <_realloc_r>
    bad4:	102f883a 	mov	r23,r2
    bad8:	103fee1e 	bne	r2,zero,ba94 <__alt_data_end+0xfffeba94>
    badc:	81400417 	ldw	r5,16(r16)
    bae0:	a809883a 	mov	r4,r21
    bae4:	00058600 	call	5860 <_free_r>
    bae8:	8080030b 	ldhu	r2,12(r16)
    baec:	00ffdfc4 	movi	r3,-129
    baf0:	1884703a 	and	r2,r3,r2
    baf4:	00c00304 	movi	r3,12
    baf8:	a8c00015 	stw	r3,0(r21)
    bafc:	003f5906 	br	b864 <__alt_data_end+0xfffeb864>
    bb00:	94c00044 	addi	r19,r18,1
    bb04:	02000044 	movi	r8,1
    bb08:	003f6006 	br	b88c <__alt_data_end+0xfffeb88c>
    bb0c:	00bfffc4 	movi	r2,-1
    bb10:	003f0006 	br	b714 <__alt_data_end+0xfffeb714>
    bb14:	00800304 	movi	r2,12
    bb18:	a8800015 	stw	r2,0(r21)
    bb1c:	8080030b 	ldhu	r2,12(r16)
    bb20:	003f5006 	br	b864 <__alt_data_end+0xfffeb864>

0000bb24 <_gettimeofday_r>:
    bb24:	defffd04 	addi	sp,sp,-12
    bb28:	2805883a 	mov	r2,r5
    bb2c:	dc000015 	stw	r16,0(sp)
    bb30:	04000074 	movhi	r16,1
    bb34:	dc400115 	stw	r17,4(sp)
    bb38:	841a3a04 	addi	r16,r16,26856
    bb3c:	2023883a 	mov	r17,r4
    bb40:	300b883a 	mov	r5,r6
    bb44:	1009883a 	mov	r4,r2
    bb48:	dfc00215 	stw	ra,8(sp)
    bb4c:	80000015 	stw	zero,0(r16)
    bb50:	00107780 	call	10778 <gettimeofday>
    bb54:	00ffffc4 	movi	r3,-1
    bb58:	10c00526 	beq	r2,r3,bb70 <_gettimeofday_r+0x4c>
    bb5c:	dfc00217 	ldw	ra,8(sp)
    bb60:	dc400117 	ldw	r17,4(sp)
    bb64:	dc000017 	ldw	r16,0(sp)
    bb68:	dec00304 	addi	sp,sp,12
    bb6c:	f800283a 	ret
    bb70:	80c00017 	ldw	r3,0(r16)
    bb74:	183ff926 	beq	r3,zero,bb5c <__alt_data_end+0xfffebb5c>
    bb78:	88c00015 	stw	r3,0(r17)
    bb7c:	003ff706 	br	bb5c <__alt_data_end+0xfffebb5c>

0000bb80 <_isatty_r>:
    bb80:	defffd04 	addi	sp,sp,-12
    bb84:	dc000015 	stw	r16,0(sp)
    bb88:	04000074 	movhi	r16,1
    bb8c:	dc400115 	stw	r17,4(sp)
    bb90:	841a3a04 	addi	r16,r16,26856
    bb94:	2023883a 	mov	r17,r4
    bb98:	2809883a 	mov	r4,r5
    bb9c:	dfc00215 	stw	ra,8(sp)
    bba0:	80000015 	stw	zero,0(r16)
    bba4:	00109a80 	call	109a8 <isatty>
    bba8:	00ffffc4 	movi	r3,-1
    bbac:	10c00526 	beq	r2,r3,bbc4 <_isatty_r+0x44>
    bbb0:	dfc00217 	ldw	ra,8(sp)
    bbb4:	dc400117 	ldw	r17,4(sp)
    bbb8:	dc000017 	ldw	r16,0(sp)
    bbbc:	dec00304 	addi	sp,sp,12
    bbc0:	f800283a 	ret
    bbc4:	80c00017 	ldw	r3,0(r16)
    bbc8:	183ff926 	beq	r3,zero,bbb0 <__alt_data_end+0xfffebbb0>
    bbcc:	88c00015 	stw	r3,0(r17)
    bbd0:	003ff706 	br	bbb0 <__alt_data_end+0xfffebbb0>

0000bbd4 <_setlocale_r>:
    bbd4:	30001b26 	beq	r6,zero,bc44 <_setlocale_r+0x70>
    bbd8:	01400074 	movhi	r5,1
    bbdc:	defffe04 	addi	sp,sp,-8
    bbe0:	294c5d04 	addi	r5,r5,12660
    bbe4:	3009883a 	mov	r4,r6
    bbe8:	dc000015 	stw	r16,0(sp)
    bbec:	dfc00115 	stw	ra,4(sp)
    bbf0:	3021883a 	mov	r16,r6
    bbf4:	000d7a80 	call	d7a8 <strcmp>
    bbf8:	1000061e 	bne	r2,zero,bc14 <_setlocale_r+0x40>
    bbfc:	00800074 	movhi	r2,1
    bc00:	108c3e04 	addi	r2,r2,12536
    bc04:	dfc00117 	ldw	ra,4(sp)
    bc08:	dc000017 	ldw	r16,0(sp)
    bc0c:	dec00204 	addi	sp,sp,8
    bc10:	f800283a 	ret
    bc14:	01400074 	movhi	r5,1
    bc18:	294c3e04 	addi	r5,r5,12536
    bc1c:	8009883a 	mov	r4,r16
    bc20:	000d7a80 	call	d7a8 <strcmp>
    bc24:	103ff526 	beq	r2,zero,bbfc <__alt_data_end+0xfffebbfc>
    bc28:	01400074 	movhi	r5,1
    bc2c:	294c4804 	addi	r5,r5,12576
    bc30:	8009883a 	mov	r4,r16
    bc34:	000d7a80 	call	d7a8 <strcmp>
    bc38:	103ff026 	beq	r2,zero,bbfc <__alt_data_end+0xfffebbfc>
    bc3c:	0005883a 	mov	r2,zero
    bc40:	003ff006 	br	bc04 <__alt_data_end+0xfffebc04>
    bc44:	00800074 	movhi	r2,1
    bc48:	108c3e04 	addi	r2,r2,12536
    bc4c:	f800283a 	ret

0000bc50 <__locale_charset>:
    bc50:	00800074 	movhi	r2,1
    bc54:	108ed104 	addi	r2,r2,15172
    bc58:	f800283a 	ret

0000bc5c <__locale_mb_cur_max>:
    bc5c:	00800074 	movhi	r2,1
    bc60:	10937004 	addi	r2,r2,19904
    bc64:	10800017 	ldw	r2,0(r2)
    bc68:	f800283a 	ret

0000bc6c <__locale_msgcharset>:
    bc6c:	00800074 	movhi	r2,1
    bc70:	108ec904 	addi	r2,r2,15140
    bc74:	f800283a 	ret

0000bc78 <__locale_cjk_lang>:
    bc78:	0005883a 	mov	r2,zero
    bc7c:	f800283a 	ret

0000bc80 <_localeconv_r>:
    bc80:	00800074 	movhi	r2,1
    bc84:	108ed904 	addi	r2,r2,15204
    bc88:	f800283a 	ret

0000bc8c <setlocale>:
    bc8c:	00800074 	movhi	r2,1
    bc90:	10936d04 	addi	r2,r2,19892
    bc94:	280d883a 	mov	r6,r5
    bc98:	200b883a 	mov	r5,r4
    bc9c:	11000017 	ldw	r4,0(r2)
    bca0:	000bbd41 	jmpi	bbd4 <_setlocale_r>

0000bca4 <localeconv>:
    bca4:	00800074 	movhi	r2,1
    bca8:	108ed904 	addi	r2,r2,15204
    bcac:	f800283a 	ret

0000bcb0 <_lseek_r>:
    bcb0:	defffd04 	addi	sp,sp,-12
    bcb4:	2805883a 	mov	r2,r5
    bcb8:	dc000015 	stw	r16,0(sp)
    bcbc:	04000074 	movhi	r16,1
    bcc0:	dc400115 	stw	r17,4(sp)
    bcc4:	300b883a 	mov	r5,r6
    bcc8:	841a3a04 	addi	r16,r16,26856
    bccc:	2023883a 	mov	r17,r4
    bcd0:	380d883a 	mov	r6,r7
    bcd4:	1009883a 	mov	r4,r2
    bcd8:	dfc00215 	stw	ra,8(sp)
    bcdc:	80000015 	stw	zero,0(r16)
    bce0:	0010b7c0 	call	10b7c <lseek>
    bce4:	00ffffc4 	movi	r3,-1
    bce8:	10c00526 	beq	r2,r3,bd00 <_lseek_r+0x50>
    bcec:	dfc00217 	ldw	ra,8(sp)
    bcf0:	dc400117 	ldw	r17,4(sp)
    bcf4:	dc000017 	ldw	r16,0(sp)
    bcf8:	dec00304 	addi	sp,sp,12
    bcfc:	f800283a 	ret
    bd00:	80c00017 	ldw	r3,0(r16)
    bd04:	183ff926 	beq	r3,zero,bcec <__alt_data_end+0xfffebcec>
    bd08:	88c00015 	stw	r3,0(r17)
    bd0c:	003ff706 	br	bcec <__alt_data_end+0xfffebcec>

0000bd10 <memchr>:
    bd10:	208000cc 	andi	r2,r4,3
    bd14:	280f883a 	mov	r7,r5
    bd18:	10003426 	beq	r2,zero,bdec <memchr+0xdc>
    bd1c:	30bfffc4 	addi	r2,r6,-1
    bd20:	30001a26 	beq	r6,zero,bd8c <memchr+0x7c>
    bd24:	20c00003 	ldbu	r3,0(r4)
    bd28:	29803fcc 	andi	r6,r5,255
    bd2c:	30c0051e 	bne	r6,r3,bd44 <memchr+0x34>
    bd30:	00001806 	br	bd94 <memchr+0x84>
    bd34:	10001526 	beq	r2,zero,bd8c <memchr+0x7c>
    bd38:	20c00003 	ldbu	r3,0(r4)
    bd3c:	10bfffc4 	addi	r2,r2,-1
    bd40:	30c01426 	beq	r6,r3,bd94 <memchr+0x84>
    bd44:	21000044 	addi	r4,r4,1
    bd48:	20c000cc 	andi	r3,r4,3
    bd4c:	183ff91e 	bne	r3,zero,bd34 <__alt_data_end+0xfffebd34>
    bd50:	020000c4 	movi	r8,3
    bd54:	40801136 	bltu	r8,r2,bd9c <memchr+0x8c>
    bd58:	10000c26 	beq	r2,zero,bd8c <memchr+0x7c>
    bd5c:	20c00003 	ldbu	r3,0(r4)
    bd60:	29403fcc 	andi	r5,r5,255
    bd64:	28c00b26 	beq	r5,r3,bd94 <memchr+0x84>
    bd68:	20c00044 	addi	r3,r4,1
    bd6c:	39803fcc 	andi	r6,r7,255
    bd70:	2089883a 	add	r4,r4,r2
    bd74:	00000306 	br	bd84 <memchr+0x74>
    bd78:	18c00044 	addi	r3,r3,1
    bd7c:	197fffc3 	ldbu	r5,-1(r3)
    bd80:	31400526 	beq	r6,r5,bd98 <memchr+0x88>
    bd84:	1805883a 	mov	r2,r3
    bd88:	20fffb1e 	bne	r4,r3,bd78 <__alt_data_end+0xfffebd78>
    bd8c:	0005883a 	mov	r2,zero
    bd90:	f800283a 	ret
    bd94:	2005883a 	mov	r2,r4
    bd98:	f800283a 	ret
    bd9c:	28c03fcc 	andi	r3,r5,255
    bda0:	1812923a 	slli	r9,r3,8
    bda4:	02ffbff4 	movhi	r11,65279
    bda8:	02a02074 	movhi	r10,32897
    bdac:	48d2b03a 	or	r9,r9,r3
    bdb0:	4806943a 	slli	r3,r9,16
    bdb4:	5affbfc4 	addi	r11,r11,-257
    bdb8:	52a02004 	addi	r10,r10,-32640
    bdbc:	48d2b03a 	or	r9,r9,r3
    bdc0:	20c00017 	ldw	r3,0(r4)
    bdc4:	48c6f03a 	xor	r3,r9,r3
    bdc8:	1acd883a 	add	r6,r3,r11
    bdcc:	00c6303a 	nor	r3,zero,r3
    bdd0:	30c6703a 	and	r3,r6,r3
    bdd4:	1a86703a 	and	r3,r3,r10
    bdd8:	183fe01e 	bne	r3,zero,bd5c <__alt_data_end+0xfffebd5c>
    bddc:	10bfff04 	addi	r2,r2,-4
    bde0:	21000104 	addi	r4,r4,4
    bde4:	40bff636 	bltu	r8,r2,bdc0 <__alt_data_end+0xfffebdc0>
    bde8:	003fdb06 	br	bd58 <__alt_data_end+0xfffebd58>
    bdec:	3005883a 	mov	r2,r6
    bdf0:	003fd706 	br	bd50 <__alt_data_end+0xfffebd50>

0000bdf4 <memmove>:
    bdf4:	2005883a 	mov	r2,r4
    bdf8:	29000b2e 	bgeu	r5,r4,be28 <memmove+0x34>
    bdfc:	298f883a 	add	r7,r5,r6
    be00:	21c0092e 	bgeu	r4,r7,be28 <memmove+0x34>
    be04:	2187883a 	add	r3,r4,r6
    be08:	198bc83a 	sub	r5,r3,r6
    be0c:	30004826 	beq	r6,zero,bf30 <memmove+0x13c>
    be10:	39ffffc4 	addi	r7,r7,-1
    be14:	39000003 	ldbu	r4,0(r7)
    be18:	18ffffc4 	addi	r3,r3,-1
    be1c:	19000005 	stb	r4,0(r3)
    be20:	28fffb1e 	bne	r5,r3,be10 <__alt_data_end+0xfffebe10>
    be24:	f800283a 	ret
    be28:	00c003c4 	movi	r3,15
    be2c:	1980412e 	bgeu	r3,r6,bf34 <memmove+0x140>
    be30:	2886b03a 	or	r3,r5,r2
    be34:	18c000cc 	andi	r3,r3,3
    be38:	1800401e 	bne	r3,zero,bf3c <memmove+0x148>
    be3c:	33fffc04 	addi	r15,r6,-16
    be40:	781ed13a 	srli	r15,r15,4
    be44:	28c00104 	addi	r3,r5,4
    be48:	13400104 	addi	r13,r2,4
    be4c:	781c913a 	slli	r14,r15,4
    be50:	2b000204 	addi	r12,r5,8
    be54:	12c00204 	addi	r11,r2,8
    be58:	73800504 	addi	r14,r14,20
    be5c:	2a800304 	addi	r10,r5,12
    be60:	12400304 	addi	r9,r2,12
    be64:	2b9d883a 	add	r14,r5,r14
    be68:	2811883a 	mov	r8,r5
    be6c:	100f883a 	mov	r7,r2
    be70:	41000017 	ldw	r4,0(r8)
    be74:	39c00404 	addi	r7,r7,16
    be78:	18c00404 	addi	r3,r3,16
    be7c:	393ffc15 	stw	r4,-16(r7)
    be80:	193ffc17 	ldw	r4,-16(r3)
    be84:	6b400404 	addi	r13,r13,16
    be88:	5ac00404 	addi	r11,r11,16
    be8c:	693ffc15 	stw	r4,-16(r13)
    be90:	61000017 	ldw	r4,0(r12)
    be94:	4a400404 	addi	r9,r9,16
    be98:	42000404 	addi	r8,r8,16
    be9c:	593ffc15 	stw	r4,-16(r11)
    bea0:	51000017 	ldw	r4,0(r10)
    bea4:	63000404 	addi	r12,r12,16
    bea8:	52800404 	addi	r10,r10,16
    beac:	493ffc15 	stw	r4,-16(r9)
    beb0:	1bbfef1e 	bne	r3,r14,be70 <__alt_data_end+0xfffebe70>
    beb4:	79000044 	addi	r4,r15,1
    beb8:	2008913a 	slli	r4,r4,4
    bebc:	328003cc 	andi	r10,r6,15
    bec0:	02c000c4 	movi	r11,3
    bec4:	1107883a 	add	r3,r2,r4
    bec8:	290b883a 	add	r5,r5,r4
    becc:	5a801e2e 	bgeu	r11,r10,bf48 <memmove+0x154>
    bed0:	1813883a 	mov	r9,r3
    bed4:	2811883a 	mov	r8,r5
    bed8:	500f883a 	mov	r7,r10
    bedc:	41000017 	ldw	r4,0(r8)
    bee0:	4a400104 	addi	r9,r9,4
    bee4:	39ffff04 	addi	r7,r7,-4
    bee8:	493fff15 	stw	r4,-4(r9)
    beec:	42000104 	addi	r8,r8,4
    bef0:	59fffa36 	bltu	r11,r7,bedc <__alt_data_end+0xfffebedc>
    bef4:	513fff04 	addi	r4,r10,-4
    bef8:	2008d0ba 	srli	r4,r4,2
    befc:	318000cc 	andi	r6,r6,3
    bf00:	21000044 	addi	r4,r4,1
    bf04:	2109883a 	add	r4,r4,r4
    bf08:	2109883a 	add	r4,r4,r4
    bf0c:	1907883a 	add	r3,r3,r4
    bf10:	290b883a 	add	r5,r5,r4
    bf14:	30000b26 	beq	r6,zero,bf44 <memmove+0x150>
    bf18:	198d883a 	add	r6,r3,r6
    bf1c:	29c00003 	ldbu	r7,0(r5)
    bf20:	18c00044 	addi	r3,r3,1
    bf24:	29400044 	addi	r5,r5,1
    bf28:	19ffffc5 	stb	r7,-1(r3)
    bf2c:	19bffb1e 	bne	r3,r6,bf1c <__alt_data_end+0xfffebf1c>
    bf30:	f800283a 	ret
    bf34:	1007883a 	mov	r3,r2
    bf38:	003ff606 	br	bf14 <__alt_data_end+0xfffebf14>
    bf3c:	1007883a 	mov	r3,r2
    bf40:	003ff506 	br	bf18 <__alt_data_end+0xfffebf18>
    bf44:	f800283a 	ret
    bf48:	500d883a 	mov	r6,r10
    bf4c:	003ff106 	br	bf14 <__alt_data_end+0xfffebf14>

0000bf50 <_Balloc>:
    bf50:	20801317 	ldw	r2,76(r4)
    bf54:	defffc04 	addi	sp,sp,-16
    bf58:	dc400115 	stw	r17,4(sp)
    bf5c:	dc000015 	stw	r16,0(sp)
    bf60:	dfc00315 	stw	ra,12(sp)
    bf64:	dc800215 	stw	r18,8(sp)
    bf68:	2023883a 	mov	r17,r4
    bf6c:	2821883a 	mov	r16,r5
    bf70:	10000f26 	beq	r2,zero,bfb0 <_Balloc+0x60>
    bf74:	8407883a 	add	r3,r16,r16
    bf78:	18c7883a 	add	r3,r3,r3
    bf7c:	10c7883a 	add	r3,r2,r3
    bf80:	18800017 	ldw	r2,0(r3)
    bf84:	10001126 	beq	r2,zero,bfcc <_Balloc+0x7c>
    bf88:	11000017 	ldw	r4,0(r2)
    bf8c:	19000015 	stw	r4,0(r3)
    bf90:	10000415 	stw	zero,16(r2)
    bf94:	10000315 	stw	zero,12(r2)
    bf98:	dfc00317 	ldw	ra,12(sp)
    bf9c:	dc800217 	ldw	r18,8(sp)
    bfa0:	dc400117 	ldw	r17,4(sp)
    bfa4:	dc000017 	ldw	r16,0(sp)
    bfa8:	dec00404 	addi	sp,sp,16
    bfac:	f800283a 	ret
    bfb0:	01800844 	movi	r6,33
    bfb4:	01400104 	movi	r5,4
    bfb8:	000f0d40 	call	f0d4 <_calloc_r>
    bfbc:	88801315 	stw	r2,76(r17)
    bfc0:	103fec1e 	bne	r2,zero,bf74 <__alt_data_end+0xfffebf74>
    bfc4:	0005883a 	mov	r2,zero
    bfc8:	003ff306 	br	bf98 <__alt_data_end+0xfffebf98>
    bfcc:	01400044 	movi	r5,1
    bfd0:	2c24983a 	sll	r18,r5,r16
    bfd4:	8809883a 	mov	r4,r17
    bfd8:	91800144 	addi	r6,r18,5
    bfdc:	318d883a 	add	r6,r6,r6
    bfe0:	318d883a 	add	r6,r6,r6
    bfe4:	000f0d40 	call	f0d4 <_calloc_r>
    bfe8:	103ff626 	beq	r2,zero,bfc4 <__alt_data_end+0xfffebfc4>
    bfec:	14000115 	stw	r16,4(r2)
    bff0:	14800215 	stw	r18,8(r2)
    bff4:	003fe606 	br	bf90 <__alt_data_end+0xfffebf90>

0000bff8 <_Bfree>:
    bff8:	28000826 	beq	r5,zero,c01c <_Bfree+0x24>
    bffc:	28c00117 	ldw	r3,4(r5)
    c000:	20801317 	ldw	r2,76(r4)
    c004:	18c7883a 	add	r3,r3,r3
    c008:	18c7883a 	add	r3,r3,r3
    c00c:	10c5883a 	add	r2,r2,r3
    c010:	10c00017 	ldw	r3,0(r2)
    c014:	28c00015 	stw	r3,0(r5)
    c018:	11400015 	stw	r5,0(r2)
    c01c:	f800283a 	ret

0000c020 <__multadd>:
    c020:	defff704 	addi	sp,sp,-36
    c024:	dc800215 	stw	r18,8(sp)
    c028:	2c800417 	ldw	r18,16(r5)
    c02c:	dd800615 	stw	r22,24(sp)
    c030:	dd400515 	stw	r21,20(sp)
    c034:	dd000415 	stw	r20,16(sp)
    c038:	dcc00315 	stw	r19,12(sp)
    c03c:	dc400115 	stw	r17,4(sp)
    c040:	dc000015 	stw	r16,0(sp)
    c044:	dfc00815 	stw	ra,32(sp)
    c048:	ddc00715 	stw	r23,28(sp)
    c04c:	2827883a 	mov	r19,r5
    c050:	2029883a 	mov	r20,r4
    c054:	3023883a 	mov	r17,r6
    c058:	3821883a 	mov	r16,r7
    c05c:	2d400504 	addi	r21,r5,20
    c060:	002d883a 	mov	r22,zero
    c064:	adc00017 	ldw	r23,0(r21)
    c068:	880b883a 	mov	r5,r17
    c06c:	ad400104 	addi	r21,r21,4
    c070:	b93fffcc 	andi	r4,r23,65535
    c074:	0001a300 	call	1a30 <__mulsi3>
    c078:	b808d43a 	srli	r4,r23,16
    c07c:	880b883a 	mov	r5,r17
    c080:	1421883a 	add	r16,r2,r16
    c084:	0001a300 	call	1a30 <__mulsi3>
    c088:	800ed43a 	srli	r7,r16,16
    c08c:	80ffffcc 	andi	r3,r16,65535
    c090:	b5800044 	addi	r22,r22,1
    c094:	11c5883a 	add	r2,r2,r7
    c098:	100e943a 	slli	r7,r2,16
    c09c:	1020d43a 	srli	r16,r2,16
    c0a0:	38c7883a 	add	r3,r7,r3
    c0a4:	a8ffff15 	stw	r3,-4(r21)
    c0a8:	b4bfee16 	blt	r22,r18,c064 <__alt_data_end+0xfffec064>
    c0ac:	80000926 	beq	r16,zero,c0d4 <__multadd+0xb4>
    c0b0:	98800217 	ldw	r2,8(r19)
    c0b4:	9080130e 	bge	r18,r2,c104 <__multadd+0xe4>
    c0b8:	90800144 	addi	r2,r18,5
    c0bc:	1085883a 	add	r2,r2,r2
    c0c0:	1085883a 	add	r2,r2,r2
    c0c4:	9885883a 	add	r2,r19,r2
    c0c8:	14000015 	stw	r16,0(r2)
    c0cc:	94800044 	addi	r18,r18,1
    c0d0:	9c800415 	stw	r18,16(r19)
    c0d4:	9805883a 	mov	r2,r19
    c0d8:	dfc00817 	ldw	ra,32(sp)
    c0dc:	ddc00717 	ldw	r23,28(sp)
    c0e0:	dd800617 	ldw	r22,24(sp)
    c0e4:	dd400517 	ldw	r21,20(sp)
    c0e8:	dd000417 	ldw	r20,16(sp)
    c0ec:	dcc00317 	ldw	r19,12(sp)
    c0f0:	dc800217 	ldw	r18,8(sp)
    c0f4:	dc400117 	ldw	r17,4(sp)
    c0f8:	dc000017 	ldw	r16,0(sp)
    c0fc:	dec00904 	addi	sp,sp,36
    c100:	f800283a 	ret
    c104:	99400117 	ldw	r5,4(r19)
    c108:	a009883a 	mov	r4,r20
    c10c:	29400044 	addi	r5,r5,1
    c110:	000bf500 	call	bf50 <_Balloc>
    c114:	99800417 	ldw	r6,16(r19)
    c118:	99400304 	addi	r5,r19,12
    c11c:	11000304 	addi	r4,r2,12
    c120:	31800084 	addi	r6,r6,2
    c124:	318d883a 	add	r6,r6,r6
    c128:	318d883a 	add	r6,r6,r6
    c12c:	1023883a 	mov	r17,r2
    c130:	0006b9c0 	call	6b9c <memcpy>
    c134:	98000a26 	beq	r19,zero,c160 <__multadd+0x140>
    c138:	98c00117 	ldw	r3,4(r19)
    c13c:	a0801317 	ldw	r2,76(r20)
    c140:	18c7883a 	add	r3,r3,r3
    c144:	18c7883a 	add	r3,r3,r3
    c148:	10c5883a 	add	r2,r2,r3
    c14c:	10c00017 	ldw	r3,0(r2)
    c150:	98c00015 	stw	r3,0(r19)
    c154:	14c00015 	stw	r19,0(r2)
    c158:	8827883a 	mov	r19,r17
    c15c:	003fd606 	br	c0b8 <__alt_data_end+0xfffec0b8>
    c160:	8827883a 	mov	r19,r17
    c164:	003fd406 	br	c0b8 <__alt_data_end+0xfffec0b8>

0000c168 <__s2b>:
    c168:	defff904 	addi	sp,sp,-28
    c16c:	dc400115 	stw	r17,4(sp)
    c170:	dc000015 	stw	r16,0(sp)
    c174:	2023883a 	mov	r17,r4
    c178:	2821883a 	mov	r16,r5
    c17c:	39000204 	addi	r4,r7,8
    c180:	01400244 	movi	r5,9
    c184:	dcc00315 	stw	r19,12(sp)
    c188:	dc800215 	stw	r18,8(sp)
    c18c:	dfc00615 	stw	ra,24(sp)
    c190:	dd400515 	stw	r21,20(sp)
    c194:	dd000415 	stw	r20,16(sp)
    c198:	3825883a 	mov	r18,r7
    c19c:	3027883a 	mov	r19,r6
    c1a0:	0004a5c0 	call	4a5c <__divsi3>
    c1a4:	00c00044 	movi	r3,1
    c1a8:	000b883a 	mov	r5,zero
    c1ac:	1880030e 	bge	r3,r2,c1bc <__s2b+0x54>
    c1b0:	18c7883a 	add	r3,r3,r3
    c1b4:	29400044 	addi	r5,r5,1
    c1b8:	18bffd16 	blt	r3,r2,c1b0 <__alt_data_end+0xfffec1b0>
    c1bc:	8809883a 	mov	r4,r17
    c1c0:	000bf500 	call	bf50 <_Balloc>
    c1c4:	d8c00717 	ldw	r3,28(sp)
    c1c8:	10c00515 	stw	r3,20(r2)
    c1cc:	00c00044 	movi	r3,1
    c1d0:	10c00415 	stw	r3,16(r2)
    c1d4:	00c00244 	movi	r3,9
    c1d8:	1cc0210e 	bge	r3,r19,c260 <__s2b+0xf8>
    c1dc:	80eb883a 	add	r21,r16,r3
    c1e0:	a829883a 	mov	r20,r21
    c1e4:	84e1883a 	add	r16,r16,r19
    c1e8:	a1c00007 	ldb	r7,0(r20)
    c1ec:	01800284 	movi	r6,10
    c1f0:	a5000044 	addi	r20,r20,1
    c1f4:	100b883a 	mov	r5,r2
    c1f8:	39fff404 	addi	r7,r7,-48
    c1fc:	8809883a 	mov	r4,r17
    c200:	000c0200 	call	c020 <__multadd>
    c204:	a43ff81e 	bne	r20,r16,c1e8 <__alt_data_end+0xfffec1e8>
    c208:	ace1883a 	add	r16,r21,r19
    c20c:	843ffe04 	addi	r16,r16,-8
    c210:	9c800a0e 	bge	r19,r18,c23c <__s2b+0xd4>
    c214:	94e5c83a 	sub	r18,r18,r19
    c218:	84a5883a 	add	r18,r16,r18
    c21c:	81c00007 	ldb	r7,0(r16)
    c220:	01800284 	movi	r6,10
    c224:	84000044 	addi	r16,r16,1
    c228:	100b883a 	mov	r5,r2
    c22c:	39fff404 	addi	r7,r7,-48
    c230:	8809883a 	mov	r4,r17
    c234:	000c0200 	call	c020 <__multadd>
    c238:	84bff81e 	bne	r16,r18,c21c <__alt_data_end+0xfffec21c>
    c23c:	dfc00617 	ldw	ra,24(sp)
    c240:	dd400517 	ldw	r21,20(sp)
    c244:	dd000417 	ldw	r20,16(sp)
    c248:	dcc00317 	ldw	r19,12(sp)
    c24c:	dc800217 	ldw	r18,8(sp)
    c250:	dc400117 	ldw	r17,4(sp)
    c254:	dc000017 	ldw	r16,0(sp)
    c258:	dec00704 	addi	sp,sp,28
    c25c:	f800283a 	ret
    c260:	84000284 	addi	r16,r16,10
    c264:	1827883a 	mov	r19,r3
    c268:	003fe906 	br	c210 <__alt_data_end+0xfffec210>

0000c26c <__hi0bits>:
    c26c:	20bfffec 	andhi	r2,r4,65535
    c270:	1000141e 	bne	r2,zero,c2c4 <__hi0bits+0x58>
    c274:	2008943a 	slli	r4,r4,16
    c278:	00800404 	movi	r2,16
    c27c:	20ffc02c 	andhi	r3,r4,65280
    c280:	1800021e 	bne	r3,zero,c28c <__hi0bits+0x20>
    c284:	2008923a 	slli	r4,r4,8
    c288:	10800204 	addi	r2,r2,8
    c28c:	20fc002c 	andhi	r3,r4,61440
    c290:	1800021e 	bne	r3,zero,c29c <__hi0bits+0x30>
    c294:	2008913a 	slli	r4,r4,4
    c298:	10800104 	addi	r2,r2,4
    c29c:	20f0002c 	andhi	r3,r4,49152
    c2a0:	1800031e 	bne	r3,zero,c2b0 <__hi0bits+0x44>
    c2a4:	2109883a 	add	r4,r4,r4
    c2a8:	10800084 	addi	r2,r2,2
    c2ac:	2109883a 	add	r4,r4,r4
    c2b0:	20000316 	blt	r4,zero,c2c0 <__hi0bits+0x54>
    c2b4:	2110002c 	andhi	r4,r4,16384
    c2b8:	2000041e 	bne	r4,zero,c2cc <__hi0bits+0x60>
    c2bc:	00800804 	movi	r2,32
    c2c0:	f800283a 	ret
    c2c4:	0005883a 	mov	r2,zero
    c2c8:	003fec06 	br	c27c <__alt_data_end+0xfffec27c>
    c2cc:	10800044 	addi	r2,r2,1
    c2d0:	f800283a 	ret

0000c2d4 <__lo0bits>:
    c2d4:	20c00017 	ldw	r3,0(r4)
    c2d8:	188001cc 	andi	r2,r3,7
    c2dc:	10000826 	beq	r2,zero,c300 <__lo0bits+0x2c>
    c2e0:	1880004c 	andi	r2,r3,1
    c2e4:	1000211e 	bne	r2,zero,c36c <__lo0bits+0x98>
    c2e8:	1880008c 	andi	r2,r3,2
    c2ec:	1000211e 	bne	r2,zero,c374 <__lo0bits+0xa0>
    c2f0:	1806d0ba 	srli	r3,r3,2
    c2f4:	00800084 	movi	r2,2
    c2f8:	20c00015 	stw	r3,0(r4)
    c2fc:	f800283a 	ret
    c300:	18bfffcc 	andi	r2,r3,65535
    c304:	10001326 	beq	r2,zero,c354 <__lo0bits+0x80>
    c308:	0005883a 	mov	r2,zero
    c30c:	19403fcc 	andi	r5,r3,255
    c310:	2800021e 	bne	r5,zero,c31c <__lo0bits+0x48>
    c314:	1806d23a 	srli	r3,r3,8
    c318:	10800204 	addi	r2,r2,8
    c31c:	194003cc 	andi	r5,r3,15
    c320:	2800021e 	bne	r5,zero,c32c <__lo0bits+0x58>
    c324:	1806d13a 	srli	r3,r3,4
    c328:	10800104 	addi	r2,r2,4
    c32c:	194000cc 	andi	r5,r3,3
    c330:	2800021e 	bne	r5,zero,c33c <__lo0bits+0x68>
    c334:	1806d0ba 	srli	r3,r3,2
    c338:	10800084 	addi	r2,r2,2
    c33c:	1940004c 	andi	r5,r3,1
    c340:	2800081e 	bne	r5,zero,c364 <__lo0bits+0x90>
    c344:	1806d07a 	srli	r3,r3,1
    c348:	1800051e 	bne	r3,zero,c360 <__lo0bits+0x8c>
    c34c:	00800804 	movi	r2,32
    c350:	f800283a 	ret
    c354:	1806d43a 	srli	r3,r3,16
    c358:	00800404 	movi	r2,16
    c35c:	003feb06 	br	c30c <__alt_data_end+0xfffec30c>
    c360:	10800044 	addi	r2,r2,1
    c364:	20c00015 	stw	r3,0(r4)
    c368:	f800283a 	ret
    c36c:	0005883a 	mov	r2,zero
    c370:	f800283a 	ret
    c374:	1806d07a 	srli	r3,r3,1
    c378:	00800044 	movi	r2,1
    c37c:	20c00015 	stw	r3,0(r4)
    c380:	f800283a 	ret

0000c384 <__i2b>:
    c384:	defffd04 	addi	sp,sp,-12
    c388:	dc000015 	stw	r16,0(sp)
    c38c:	04000044 	movi	r16,1
    c390:	dc400115 	stw	r17,4(sp)
    c394:	2823883a 	mov	r17,r5
    c398:	800b883a 	mov	r5,r16
    c39c:	dfc00215 	stw	ra,8(sp)
    c3a0:	000bf500 	call	bf50 <_Balloc>
    c3a4:	14400515 	stw	r17,20(r2)
    c3a8:	14000415 	stw	r16,16(r2)
    c3ac:	dfc00217 	ldw	ra,8(sp)
    c3b0:	dc400117 	ldw	r17,4(sp)
    c3b4:	dc000017 	ldw	r16,0(sp)
    c3b8:	dec00304 	addi	sp,sp,12
    c3bc:	f800283a 	ret

0000c3c0 <__multiply>:
    c3c0:	deffef04 	addi	sp,sp,-68
    c3c4:	dc400815 	stw	r17,32(sp)
    c3c8:	dc000715 	stw	r16,28(sp)
    c3cc:	34400417 	ldw	r17,16(r6)
    c3d0:	2c000417 	ldw	r16,16(r5)
    c3d4:	dd800d15 	stw	r22,52(sp)
    c3d8:	dc800915 	stw	r18,36(sp)
    c3dc:	dfc01015 	stw	ra,64(sp)
    c3e0:	df000f15 	stw	fp,60(sp)
    c3e4:	ddc00e15 	stw	r23,56(sp)
    c3e8:	dd400c15 	stw	r21,48(sp)
    c3ec:	dd000b15 	stw	r20,44(sp)
    c3f0:	dcc00a15 	stw	r19,40(sp)
    c3f4:	2825883a 	mov	r18,r5
    c3f8:	302d883a 	mov	r22,r6
    c3fc:	8440050e 	bge	r16,r17,c414 <__multiply+0x54>
    c400:	8007883a 	mov	r3,r16
    c404:	3025883a 	mov	r18,r6
    c408:	8821883a 	mov	r16,r17
    c40c:	282d883a 	mov	r22,r5
    c410:	1823883a 	mov	r17,r3
    c414:	90800217 	ldw	r2,8(r18)
    c418:	8447883a 	add	r3,r16,r17
    c41c:	d8c00215 	stw	r3,8(sp)
    c420:	91400117 	ldw	r5,4(r18)
    c424:	10c0010e 	bge	r2,r3,c42c <__multiply+0x6c>
    c428:	29400044 	addi	r5,r5,1
    c42c:	000bf500 	call	bf50 <_Balloc>
    c430:	d8c00217 	ldw	r3,8(sp)
    c434:	d8800615 	stw	r2,24(sp)
    c438:	18eb883a 	add	r21,r3,r3
    c43c:	ad6b883a 	add	r21,r21,r21
    c440:	10c00504 	addi	r3,r2,20
    c444:	1d6b883a 	add	r21,r3,r21
    c448:	d8c00115 	stw	r3,4(sp)
    c44c:	dd400315 	stw	r21,12(sp)
    c450:	1805883a 	mov	r2,r3
    c454:	1d40042e 	bgeu	r3,r21,c468 <__multiply+0xa8>
    c458:	d8c00317 	ldw	r3,12(sp)
    c45c:	10000015 	stw	zero,0(r2)
    c460:	10800104 	addi	r2,r2,4
    c464:	10fffc36 	bltu	r2,r3,c458 <__alt_data_end+0xfffec458>
    c468:	8c63883a 	add	r17,r17,r17
    c46c:	b5800504 	addi	r22,r22,20
    c470:	8c63883a 	add	r17,r17,r17
    c474:	94800504 	addi	r18,r18,20
    c478:	8421883a 	add	r16,r16,r16
    c47c:	b463883a 	add	r17,r22,r17
    c480:	8421883a 	add	r16,r16,r16
    c484:	dd800015 	stw	r22,0(sp)
    c488:	dc800415 	stw	r18,16(sp)
    c48c:	dc400515 	stw	r17,20(sp)
    c490:	9429883a 	add	r20,r18,r16
    c494:	b4404f2e 	bgeu	r22,r17,c5d4 <__multiply+0x214>
    c498:	d8c00017 	ldw	r3,0(sp)
    c49c:	1c800017 	ldw	r18,0(r3)
    c4a0:	947fffcc 	andi	r17,r18,65535
    c4a4:	88001e26 	beq	r17,zero,c520 <__multiply+0x160>
    c4a8:	dd800117 	ldw	r22,4(sp)
    c4ac:	dd400417 	ldw	r21,16(sp)
    c4b0:	0027883a 	mov	r19,zero
    c4b4:	ac800017 	ldw	r18,0(r21)
    c4b8:	b4000017 	ldw	r16,0(r22)
    c4bc:	880b883a 	mov	r5,r17
    c4c0:	913fffcc 	andi	r4,r18,65535
    c4c4:	0001a300 	call	1a30 <__mulsi3>
    c4c8:	9008d43a 	srli	r4,r18,16
    c4cc:	84bfffcc 	andi	r18,r16,65535
    c4d0:	1485883a 	add	r2,r2,r18
    c4d4:	14e5883a 	add	r18,r2,r19
    c4d8:	8020d43a 	srli	r16,r16,16
    c4dc:	9026d43a 	srli	r19,r18,16
    c4e0:	880b883a 	mov	r5,r17
    c4e4:	0001a300 	call	1a30 <__mulsi3>
    c4e8:	1405883a 	add	r2,r2,r16
    c4ec:	14e1883a 	add	r16,r2,r19
    c4f0:	90ffffcc 	andi	r3,r18,65535
    c4f4:	8024943a 	slli	r18,r16,16
    c4f8:	ad400104 	addi	r21,r21,4
    c4fc:	b005883a 	mov	r2,r22
    c500:	90c6b03a 	or	r3,r18,r3
    c504:	b0c00015 	stw	r3,0(r22)
    c508:	8026d43a 	srli	r19,r16,16
    c50c:	b5800104 	addi	r22,r22,4
    c510:	ad3fe836 	bltu	r21,r20,c4b4 <__alt_data_end+0xfffec4b4>
    c514:	d8c00017 	ldw	r3,0(sp)
    c518:	14c00115 	stw	r19,4(r2)
    c51c:	1c800017 	ldw	r18,0(r3)
    c520:	9024d43a 	srli	r18,r18,16
    c524:	90002226 	beq	r18,zero,c5b0 <__multiply+0x1f0>
    c528:	d8c00117 	ldw	r3,4(sp)
    c52c:	dd800417 	ldw	r22,16(sp)
    c530:	002f883a 	mov	r23,zero
    c534:	1f000017 	ldw	fp,0(r3)
    c538:	1823883a 	mov	r17,r3
    c53c:	182b883a 	mov	r21,r3
    c540:	e021883a 	mov	r16,fp
    c544:	00000106 	br	c54c <__multiply+0x18c>
    c548:	982b883a 	mov	r21,r19
    c54c:	b100000b 	ldhu	r4,0(r22)
    c550:	8020d43a 	srli	r16,r16,16
    c554:	900b883a 	mov	r5,r18
    c558:	0001a300 	call	1a30 <__mulsi3>
    c55c:	1405883a 	add	r2,r2,r16
    c560:	15ef883a 	add	r23,r2,r23
    c564:	b804943a 	slli	r2,r23,16
    c568:	e0ffffcc 	andi	r3,fp,65535
    c56c:	8c400104 	addi	r17,r17,4
    c570:	10c6b03a 	or	r3,r2,r3
    c574:	88ffff15 	stw	r3,-4(r17)
    c578:	b5800104 	addi	r22,r22,4
    c57c:	b13fff17 	ldw	r4,-4(r22)
    c580:	acc00104 	addi	r19,r21,4
    c584:	900b883a 	mov	r5,r18
    c588:	2008d43a 	srli	r4,r4,16
    c58c:	9c000017 	ldw	r16,0(r19)
    c590:	0001a300 	call	1a30 <__mulsi3>
    c594:	b806d43a 	srli	r3,r23,16
    c598:	813fffcc 	andi	r4,r16,65535
    c59c:	1105883a 	add	r2,r2,r4
    c5a0:	10f9883a 	add	fp,r2,r3
    c5a4:	e02ed43a 	srli	r23,fp,16
    c5a8:	b53fe736 	bltu	r22,r20,c548 <__alt_data_end+0xfffec548>
    c5ac:	af000115 	stw	fp,4(r21)
    c5b0:	d8c00017 	ldw	r3,0(sp)
    c5b4:	d9000517 	ldw	r4,20(sp)
    c5b8:	18c00104 	addi	r3,r3,4
    c5bc:	d8c00015 	stw	r3,0(sp)
    c5c0:	d8c00117 	ldw	r3,4(sp)
    c5c4:	18c00104 	addi	r3,r3,4
    c5c8:	d8c00115 	stw	r3,4(sp)
    c5cc:	d8c00017 	ldw	r3,0(sp)
    c5d0:	193fb136 	bltu	r3,r4,c498 <__alt_data_end+0xfffec498>
    c5d4:	d8c00217 	ldw	r3,8(sp)
    c5d8:	00c00c0e 	bge	zero,r3,c60c <__multiply+0x24c>
    c5dc:	d8c00317 	ldw	r3,12(sp)
    c5e0:	18bfff17 	ldw	r2,-4(r3)
    c5e4:	1d7fff04 	addi	r21,r3,-4
    c5e8:	10000326 	beq	r2,zero,c5f8 <__multiply+0x238>
    c5ec:	00000706 	br	c60c <__multiply+0x24c>
    c5f0:	a8800017 	ldw	r2,0(r21)
    c5f4:	1000051e 	bne	r2,zero,c60c <__multiply+0x24c>
    c5f8:	d8c00217 	ldw	r3,8(sp)
    c5fc:	ad7fff04 	addi	r21,r21,-4
    c600:	18ffffc4 	addi	r3,r3,-1
    c604:	d8c00215 	stw	r3,8(sp)
    c608:	183ff91e 	bne	r3,zero,c5f0 <__alt_data_end+0xfffec5f0>
    c60c:	d8c00617 	ldw	r3,24(sp)
    c610:	d9000217 	ldw	r4,8(sp)
    c614:	1805883a 	mov	r2,r3
    c618:	19000415 	stw	r4,16(r3)
    c61c:	dfc01017 	ldw	ra,64(sp)
    c620:	df000f17 	ldw	fp,60(sp)
    c624:	ddc00e17 	ldw	r23,56(sp)
    c628:	dd800d17 	ldw	r22,52(sp)
    c62c:	dd400c17 	ldw	r21,48(sp)
    c630:	dd000b17 	ldw	r20,44(sp)
    c634:	dcc00a17 	ldw	r19,40(sp)
    c638:	dc800917 	ldw	r18,36(sp)
    c63c:	dc400817 	ldw	r17,32(sp)
    c640:	dc000717 	ldw	r16,28(sp)
    c644:	dec01104 	addi	sp,sp,68
    c648:	f800283a 	ret

0000c64c <__pow5mult>:
    c64c:	defffa04 	addi	sp,sp,-24
    c650:	dcc00315 	stw	r19,12(sp)
    c654:	dc000015 	stw	r16,0(sp)
    c658:	dfc00515 	stw	ra,20(sp)
    c65c:	dd000415 	stw	r20,16(sp)
    c660:	dc800215 	stw	r18,8(sp)
    c664:	dc400115 	stw	r17,4(sp)
    c668:	308000cc 	andi	r2,r6,3
    c66c:	3021883a 	mov	r16,r6
    c670:	2027883a 	mov	r19,r4
    c674:	10002f1e 	bne	r2,zero,c734 <__pow5mult+0xe8>
    c678:	2825883a 	mov	r18,r5
    c67c:	8021d0ba 	srai	r16,r16,2
    c680:	80001a26 	beq	r16,zero,c6ec <__pow5mult+0xa0>
    c684:	9c401217 	ldw	r17,72(r19)
    c688:	8800061e 	bne	r17,zero,c6a4 <__pow5mult+0x58>
    c68c:	00003406 	br	c760 <__pow5mult+0x114>
    c690:	8021d07a 	srai	r16,r16,1
    c694:	80001526 	beq	r16,zero,c6ec <__pow5mult+0xa0>
    c698:	88800017 	ldw	r2,0(r17)
    c69c:	10001c26 	beq	r2,zero,c710 <__pow5mult+0xc4>
    c6a0:	1023883a 	mov	r17,r2
    c6a4:	8080004c 	andi	r2,r16,1
    c6a8:	103ff926 	beq	r2,zero,c690 <__alt_data_end+0xfffec690>
    c6ac:	880d883a 	mov	r6,r17
    c6b0:	900b883a 	mov	r5,r18
    c6b4:	9809883a 	mov	r4,r19
    c6b8:	000c3c00 	call	c3c0 <__multiply>
    c6bc:	90001b26 	beq	r18,zero,c72c <__pow5mult+0xe0>
    c6c0:	91000117 	ldw	r4,4(r18)
    c6c4:	98c01317 	ldw	r3,76(r19)
    c6c8:	8021d07a 	srai	r16,r16,1
    c6cc:	2109883a 	add	r4,r4,r4
    c6d0:	2109883a 	add	r4,r4,r4
    c6d4:	1907883a 	add	r3,r3,r4
    c6d8:	19000017 	ldw	r4,0(r3)
    c6dc:	91000015 	stw	r4,0(r18)
    c6e0:	1c800015 	stw	r18,0(r3)
    c6e4:	1025883a 	mov	r18,r2
    c6e8:	803feb1e 	bne	r16,zero,c698 <__alt_data_end+0xfffec698>
    c6ec:	9005883a 	mov	r2,r18
    c6f0:	dfc00517 	ldw	ra,20(sp)
    c6f4:	dd000417 	ldw	r20,16(sp)
    c6f8:	dcc00317 	ldw	r19,12(sp)
    c6fc:	dc800217 	ldw	r18,8(sp)
    c700:	dc400117 	ldw	r17,4(sp)
    c704:	dc000017 	ldw	r16,0(sp)
    c708:	dec00604 	addi	sp,sp,24
    c70c:	f800283a 	ret
    c710:	880d883a 	mov	r6,r17
    c714:	880b883a 	mov	r5,r17
    c718:	9809883a 	mov	r4,r19
    c71c:	000c3c00 	call	c3c0 <__multiply>
    c720:	88800015 	stw	r2,0(r17)
    c724:	10000015 	stw	zero,0(r2)
    c728:	003fdd06 	br	c6a0 <__alt_data_end+0xfffec6a0>
    c72c:	1025883a 	mov	r18,r2
    c730:	003fd706 	br	c690 <__alt_data_end+0xfffec690>
    c734:	10bfffc4 	addi	r2,r2,-1
    c738:	1085883a 	add	r2,r2,r2
    c73c:	00c00074 	movhi	r3,1
    c740:	18cc6004 	addi	r3,r3,12672
    c744:	1085883a 	add	r2,r2,r2
    c748:	1885883a 	add	r2,r3,r2
    c74c:	11800017 	ldw	r6,0(r2)
    c750:	000f883a 	mov	r7,zero
    c754:	000c0200 	call	c020 <__multadd>
    c758:	1025883a 	mov	r18,r2
    c75c:	003fc706 	br	c67c <__alt_data_end+0xfffec67c>
    c760:	05000044 	movi	r20,1
    c764:	a00b883a 	mov	r5,r20
    c768:	9809883a 	mov	r4,r19
    c76c:	000bf500 	call	bf50 <_Balloc>
    c770:	1023883a 	mov	r17,r2
    c774:	00809c44 	movi	r2,625
    c778:	88800515 	stw	r2,20(r17)
    c77c:	8d000415 	stw	r20,16(r17)
    c780:	9c401215 	stw	r17,72(r19)
    c784:	88000015 	stw	zero,0(r17)
    c788:	003fc606 	br	c6a4 <__alt_data_end+0xfffec6a4>

0000c78c <__lshift>:
    c78c:	defff904 	addi	sp,sp,-28
    c790:	dd400515 	stw	r21,20(sp)
    c794:	dcc00315 	stw	r19,12(sp)
    c798:	302bd17a 	srai	r21,r6,5
    c79c:	2cc00417 	ldw	r19,16(r5)
    c7a0:	28800217 	ldw	r2,8(r5)
    c7a4:	dd000415 	stw	r20,16(sp)
    c7a8:	ace7883a 	add	r19,r21,r19
    c7ac:	dc800215 	stw	r18,8(sp)
    c7b0:	dc400115 	stw	r17,4(sp)
    c7b4:	dc000015 	stw	r16,0(sp)
    c7b8:	dfc00615 	stw	ra,24(sp)
    c7bc:	9c000044 	addi	r16,r19,1
    c7c0:	2823883a 	mov	r17,r5
    c7c4:	3029883a 	mov	r20,r6
    c7c8:	2025883a 	mov	r18,r4
    c7cc:	29400117 	ldw	r5,4(r5)
    c7d0:	1400030e 	bge	r2,r16,c7e0 <__lshift+0x54>
    c7d4:	1085883a 	add	r2,r2,r2
    c7d8:	29400044 	addi	r5,r5,1
    c7dc:	143ffd16 	blt	r2,r16,c7d4 <__alt_data_end+0xfffec7d4>
    c7e0:	9009883a 	mov	r4,r18
    c7e4:	000bf500 	call	bf50 <_Balloc>
    c7e8:	10c00504 	addi	r3,r2,20
    c7ec:	0540070e 	bge	zero,r21,c80c <__lshift+0x80>
    c7f0:	ad6b883a 	add	r21,r21,r21
    c7f4:	ad6b883a 	add	r21,r21,r21
    c7f8:	1809883a 	mov	r4,r3
    c7fc:	1d47883a 	add	r3,r3,r21
    c800:	20000015 	stw	zero,0(r4)
    c804:	21000104 	addi	r4,r4,4
    c808:	193ffd1e 	bne	r3,r4,c800 <__alt_data_end+0xfffec800>
    c80c:	8a000417 	ldw	r8,16(r17)
    c810:	89000504 	addi	r4,r17,20
    c814:	a18007cc 	andi	r6,r20,31
    c818:	4211883a 	add	r8,r8,r8
    c81c:	4211883a 	add	r8,r8,r8
    c820:	2211883a 	add	r8,r4,r8
    c824:	30002326 	beq	r6,zero,c8b4 <__lshift+0x128>
    c828:	02400804 	movi	r9,32
    c82c:	4993c83a 	sub	r9,r9,r6
    c830:	000b883a 	mov	r5,zero
    c834:	21c00017 	ldw	r7,0(r4)
    c838:	1815883a 	mov	r10,r3
    c83c:	18c00104 	addi	r3,r3,4
    c840:	398e983a 	sll	r7,r7,r6
    c844:	21000104 	addi	r4,r4,4
    c848:	394ab03a 	or	r5,r7,r5
    c84c:	197fff15 	stw	r5,-4(r3)
    c850:	217fff17 	ldw	r5,-4(r4)
    c854:	2a4ad83a 	srl	r5,r5,r9
    c858:	223ff636 	bltu	r4,r8,c834 <__alt_data_end+0xfffec834>
    c85c:	51400115 	stw	r5,4(r10)
    c860:	28001a1e 	bne	r5,zero,c8cc <__lshift+0x140>
    c864:	843fffc4 	addi	r16,r16,-1
    c868:	14000415 	stw	r16,16(r2)
    c86c:	88000826 	beq	r17,zero,c890 <__lshift+0x104>
    c870:	89000117 	ldw	r4,4(r17)
    c874:	90c01317 	ldw	r3,76(r18)
    c878:	2109883a 	add	r4,r4,r4
    c87c:	2109883a 	add	r4,r4,r4
    c880:	1907883a 	add	r3,r3,r4
    c884:	19000017 	ldw	r4,0(r3)
    c888:	89000015 	stw	r4,0(r17)
    c88c:	1c400015 	stw	r17,0(r3)
    c890:	dfc00617 	ldw	ra,24(sp)
    c894:	dd400517 	ldw	r21,20(sp)
    c898:	dd000417 	ldw	r20,16(sp)
    c89c:	dcc00317 	ldw	r19,12(sp)
    c8a0:	dc800217 	ldw	r18,8(sp)
    c8a4:	dc400117 	ldw	r17,4(sp)
    c8a8:	dc000017 	ldw	r16,0(sp)
    c8ac:	dec00704 	addi	sp,sp,28
    c8b0:	f800283a 	ret
    c8b4:	21400017 	ldw	r5,0(r4)
    c8b8:	18c00104 	addi	r3,r3,4
    c8bc:	21000104 	addi	r4,r4,4
    c8c0:	197fff15 	stw	r5,-4(r3)
    c8c4:	223ffb36 	bltu	r4,r8,c8b4 <__alt_data_end+0xfffec8b4>
    c8c8:	003fe606 	br	c864 <__alt_data_end+0xfffec864>
    c8cc:	9c000084 	addi	r16,r19,2
    c8d0:	003fe406 	br	c864 <__alt_data_end+0xfffec864>

0000c8d4 <__mcmp>:
    c8d4:	20800417 	ldw	r2,16(r4)
    c8d8:	28c00417 	ldw	r3,16(r5)
    c8dc:	10c5c83a 	sub	r2,r2,r3
    c8e0:	1000111e 	bne	r2,zero,c928 <__mcmp+0x54>
    c8e4:	18c7883a 	add	r3,r3,r3
    c8e8:	18c7883a 	add	r3,r3,r3
    c8ec:	21000504 	addi	r4,r4,20
    c8f0:	29400504 	addi	r5,r5,20
    c8f4:	20c5883a 	add	r2,r4,r3
    c8f8:	28cb883a 	add	r5,r5,r3
    c8fc:	00000106 	br	c904 <__mcmp+0x30>
    c900:	20800a2e 	bgeu	r4,r2,c92c <__mcmp+0x58>
    c904:	10bfff04 	addi	r2,r2,-4
    c908:	297fff04 	addi	r5,r5,-4
    c90c:	11800017 	ldw	r6,0(r2)
    c910:	28c00017 	ldw	r3,0(r5)
    c914:	30fffa26 	beq	r6,r3,c900 <__alt_data_end+0xfffec900>
    c918:	30c00236 	bltu	r6,r3,c924 <__mcmp+0x50>
    c91c:	00800044 	movi	r2,1
    c920:	f800283a 	ret
    c924:	00bfffc4 	movi	r2,-1
    c928:	f800283a 	ret
    c92c:	0005883a 	mov	r2,zero
    c930:	f800283a 	ret

0000c934 <__mdiff>:
    c934:	28c00417 	ldw	r3,16(r5)
    c938:	30800417 	ldw	r2,16(r6)
    c93c:	defffa04 	addi	sp,sp,-24
    c940:	dcc00315 	stw	r19,12(sp)
    c944:	dc800215 	stw	r18,8(sp)
    c948:	dfc00515 	stw	ra,20(sp)
    c94c:	dd000415 	stw	r20,16(sp)
    c950:	dc400115 	stw	r17,4(sp)
    c954:	dc000015 	stw	r16,0(sp)
    c958:	1887c83a 	sub	r3,r3,r2
    c95c:	2825883a 	mov	r18,r5
    c960:	3027883a 	mov	r19,r6
    c964:	1800141e 	bne	r3,zero,c9b8 <__mdiff+0x84>
    c968:	1085883a 	add	r2,r2,r2
    c96c:	1085883a 	add	r2,r2,r2
    c970:	2a000504 	addi	r8,r5,20
    c974:	34000504 	addi	r16,r6,20
    c978:	4087883a 	add	r3,r8,r2
    c97c:	8085883a 	add	r2,r16,r2
    c980:	00000106 	br	c988 <__mdiff+0x54>
    c984:	40c0592e 	bgeu	r8,r3,caec <__mdiff+0x1b8>
    c988:	18ffff04 	addi	r3,r3,-4
    c98c:	10bfff04 	addi	r2,r2,-4
    c990:	19c00017 	ldw	r7,0(r3)
    c994:	11400017 	ldw	r5,0(r2)
    c998:	397ffa26 	beq	r7,r5,c984 <__alt_data_end+0xfffec984>
    c99c:	3940592e 	bgeu	r7,r5,cb04 <__mdiff+0x1d0>
    c9a0:	9005883a 	mov	r2,r18
    c9a4:	4023883a 	mov	r17,r8
    c9a8:	9825883a 	mov	r18,r19
    c9ac:	05000044 	movi	r20,1
    c9b0:	1027883a 	mov	r19,r2
    c9b4:	00000406 	br	c9c8 <__mdiff+0x94>
    c9b8:	18005616 	blt	r3,zero,cb14 <__mdiff+0x1e0>
    c9bc:	34400504 	addi	r17,r6,20
    c9c0:	2c000504 	addi	r16,r5,20
    c9c4:	0029883a 	mov	r20,zero
    c9c8:	91400117 	ldw	r5,4(r18)
    c9cc:	000bf500 	call	bf50 <_Balloc>
    c9d0:	92400417 	ldw	r9,16(r18)
    c9d4:	9b000417 	ldw	r12,16(r19)
    c9d8:	12c00504 	addi	r11,r2,20
    c9dc:	4a51883a 	add	r8,r9,r9
    c9e0:	6319883a 	add	r12,r12,r12
    c9e4:	4211883a 	add	r8,r8,r8
    c9e8:	6319883a 	add	r12,r12,r12
    c9ec:	15000315 	stw	r20,12(r2)
    c9f0:	8211883a 	add	r8,r16,r8
    c9f4:	8b19883a 	add	r12,r17,r12
    c9f8:	0007883a 	mov	r3,zero
    c9fc:	81400017 	ldw	r5,0(r16)
    ca00:	89c00017 	ldw	r7,0(r17)
    ca04:	59800104 	addi	r6,r11,4
    ca08:	293fffcc 	andi	r4,r5,65535
    ca0c:	20c7883a 	add	r3,r4,r3
    ca10:	393fffcc 	andi	r4,r7,65535
    ca14:	1909c83a 	sub	r4,r3,r4
    ca18:	280ad43a 	srli	r5,r5,16
    ca1c:	380ed43a 	srli	r7,r7,16
    ca20:	2007d43a 	srai	r3,r4,16
    ca24:	213fffcc 	andi	r4,r4,65535
    ca28:	29cbc83a 	sub	r5,r5,r7
    ca2c:	28c7883a 	add	r3,r5,r3
    ca30:	180a943a 	slli	r5,r3,16
    ca34:	8c400104 	addi	r17,r17,4
    ca38:	84000104 	addi	r16,r16,4
    ca3c:	2908b03a 	or	r4,r5,r4
    ca40:	59000015 	stw	r4,0(r11)
    ca44:	1807d43a 	srai	r3,r3,16
    ca48:	3015883a 	mov	r10,r6
    ca4c:	3017883a 	mov	r11,r6
    ca50:	8b3fea36 	bltu	r17,r12,c9fc <__alt_data_end+0xfffec9fc>
    ca54:	8200162e 	bgeu	r16,r8,cab0 <__mdiff+0x17c>
    ca58:	8017883a 	mov	r11,r16
    ca5c:	59400017 	ldw	r5,0(r11)
    ca60:	31800104 	addi	r6,r6,4
    ca64:	5ac00104 	addi	r11,r11,4
    ca68:	293fffcc 	andi	r4,r5,65535
    ca6c:	20c7883a 	add	r3,r4,r3
    ca70:	280ed43a 	srli	r7,r5,16
    ca74:	180bd43a 	srai	r5,r3,16
    ca78:	193fffcc 	andi	r4,r3,65535
    ca7c:	3947883a 	add	r3,r7,r5
    ca80:	180a943a 	slli	r5,r3,16
    ca84:	1807d43a 	srai	r3,r3,16
    ca88:	2908b03a 	or	r4,r5,r4
    ca8c:	313fff15 	stw	r4,-4(r6)
    ca90:	5a3ff236 	bltu	r11,r8,ca5c <__alt_data_end+0xfffeca5c>
    ca94:	0406303a 	nor	r3,zero,r16
    ca98:	1a07883a 	add	r3,r3,r8
    ca9c:	1806d0ba 	srli	r3,r3,2
    caa0:	18c00044 	addi	r3,r3,1
    caa4:	18c7883a 	add	r3,r3,r3
    caa8:	18c7883a 	add	r3,r3,r3
    caac:	50d5883a 	add	r10,r10,r3
    cab0:	50ffff04 	addi	r3,r10,-4
    cab4:	2000041e 	bne	r4,zero,cac8 <__mdiff+0x194>
    cab8:	18ffff04 	addi	r3,r3,-4
    cabc:	19000017 	ldw	r4,0(r3)
    cac0:	4a7fffc4 	addi	r9,r9,-1
    cac4:	203ffc26 	beq	r4,zero,cab8 <__alt_data_end+0xfffecab8>
    cac8:	12400415 	stw	r9,16(r2)
    cacc:	dfc00517 	ldw	ra,20(sp)
    cad0:	dd000417 	ldw	r20,16(sp)
    cad4:	dcc00317 	ldw	r19,12(sp)
    cad8:	dc800217 	ldw	r18,8(sp)
    cadc:	dc400117 	ldw	r17,4(sp)
    cae0:	dc000017 	ldw	r16,0(sp)
    cae4:	dec00604 	addi	sp,sp,24
    cae8:	f800283a 	ret
    caec:	000b883a 	mov	r5,zero
    caf0:	000bf500 	call	bf50 <_Balloc>
    caf4:	00c00044 	movi	r3,1
    caf8:	10c00415 	stw	r3,16(r2)
    cafc:	10000515 	stw	zero,20(r2)
    cb00:	003ff206 	br	cacc <__alt_data_end+0xfffecacc>
    cb04:	8023883a 	mov	r17,r16
    cb08:	0029883a 	mov	r20,zero
    cb0c:	4021883a 	mov	r16,r8
    cb10:	003fad06 	br	c9c8 <__alt_data_end+0xfffec9c8>
    cb14:	9005883a 	mov	r2,r18
    cb18:	94400504 	addi	r17,r18,20
    cb1c:	9c000504 	addi	r16,r19,20
    cb20:	9825883a 	mov	r18,r19
    cb24:	05000044 	movi	r20,1
    cb28:	1027883a 	mov	r19,r2
    cb2c:	003fa606 	br	c9c8 <__alt_data_end+0xfffec9c8>

0000cb30 <__ulp>:
    cb30:	295ffc2c 	andhi	r5,r5,32752
    cb34:	00bf3034 	movhi	r2,64704
    cb38:	2887883a 	add	r3,r5,r2
    cb3c:	00c0020e 	bge	zero,r3,cb48 <__ulp+0x18>
    cb40:	0005883a 	mov	r2,zero
    cb44:	f800283a 	ret
    cb48:	00c7c83a 	sub	r3,zero,r3
    cb4c:	1807d53a 	srai	r3,r3,20
    cb50:	008004c4 	movi	r2,19
    cb54:	10c00b0e 	bge	r2,r3,cb84 <__ulp+0x54>
    cb58:	18bffb04 	addi	r2,r3,-20
    cb5c:	01000784 	movi	r4,30
    cb60:	0007883a 	mov	r3,zero
    cb64:	20800516 	blt	r4,r2,cb7c <__ulp+0x4c>
    cb68:	010007c4 	movi	r4,31
    cb6c:	2089c83a 	sub	r4,r4,r2
    cb70:	00800044 	movi	r2,1
    cb74:	1104983a 	sll	r2,r2,r4
    cb78:	f800283a 	ret
    cb7c:	00800044 	movi	r2,1
    cb80:	f800283a 	ret
    cb84:	01400234 	movhi	r5,8
    cb88:	28c7d83a 	sra	r3,r5,r3
    cb8c:	0005883a 	mov	r2,zero
    cb90:	f800283a 	ret

0000cb94 <__b2d>:
    cb94:	defffa04 	addi	sp,sp,-24
    cb98:	dc000015 	stw	r16,0(sp)
    cb9c:	24000417 	ldw	r16,16(r4)
    cba0:	dc400115 	stw	r17,4(sp)
    cba4:	24400504 	addi	r17,r4,20
    cba8:	8421883a 	add	r16,r16,r16
    cbac:	8421883a 	add	r16,r16,r16
    cbb0:	8c21883a 	add	r16,r17,r16
    cbb4:	dc800215 	stw	r18,8(sp)
    cbb8:	84bfff17 	ldw	r18,-4(r16)
    cbbc:	dd000415 	stw	r20,16(sp)
    cbc0:	dcc00315 	stw	r19,12(sp)
    cbc4:	9009883a 	mov	r4,r18
    cbc8:	2829883a 	mov	r20,r5
    cbcc:	dfc00515 	stw	ra,20(sp)
    cbd0:	000c26c0 	call	c26c <__hi0bits>
    cbd4:	00c00804 	movi	r3,32
    cbd8:	1889c83a 	sub	r4,r3,r2
    cbdc:	a1000015 	stw	r4,0(r20)
    cbe0:	01000284 	movi	r4,10
    cbe4:	84ffff04 	addi	r19,r16,-4
    cbe8:	20801216 	blt	r4,r2,cc34 <__b2d+0xa0>
    cbec:	018002c4 	movi	r6,11
    cbf0:	308dc83a 	sub	r6,r6,r2
    cbf4:	9186d83a 	srl	r3,r18,r6
    cbf8:	18cffc34 	orhi	r3,r3,16368
    cbfc:	8cc0212e 	bgeu	r17,r19,cc84 <__b2d+0xf0>
    cc00:	813ffe17 	ldw	r4,-8(r16)
    cc04:	218cd83a 	srl	r6,r4,r6
    cc08:	10800544 	addi	r2,r2,21
    cc0c:	9084983a 	sll	r2,r18,r2
    cc10:	1184b03a 	or	r2,r2,r6
    cc14:	dfc00517 	ldw	ra,20(sp)
    cc18:	dd000417 	ldw	r20,16(sp)
    cc1c:	dcc00317 	ldw	r19,12(sp)
    cc20:	dc800217 	ldw	r18,8(sp)
    cc24:	dc400117 	ldw	r17,4(sp)
    cc28:	dc000017 	ldw	r16,0(sp)
    cc2c:	dec00604 	addi	sp,sp,24
    cc30:	f800283a 	ret
    cc34:	8cc00f2e 	bgeu	r17,r19,cc74 <__b2d+0xe0>
    cc38:	117ffd44 	addi	r5,r2,-11
    cc3c:	80bffe17 	ldw	r2,-8(r16)
    cc40:	28000e26 	beq	r5,zero,cc7c <__b2d+0xe8>
    cc44:	1949c83a 	sub	r4,r3,r5
    cc48:	9164983a 	sll	r18,r18,r5
    cc4c:	1106d83a 	srl	r3,r2,r4
    cc50:	81bffe04 	addi	r6,r16,-8
    cc54:	948ffc34 	orhi	r18,r18,16368
    cc58:	90c6b03a 	or	r3,r18,r3
    cc5c:	89800e2e 	bgeu	r17,r6,cc98 <__b2d+0x104>
    cc60:	81bffd17 	ldw	r6,-12(r16)
    cc64:	1144983a 	sll	r2,r2,r5
    cc68:	310ad83a 	srl	r5,r6,r4
    cc6c:	2884b03a 	or	r2,r5,r2
    cc70:	003fe806 	br	cc14 <__alt_data_end+0xfffecc14>
    cc74:	10bffd44 	addi	r2,r2,-11
    cc78:	1000041e 	bne	r2,zero,cc8c <__b2d+0xf8>
    cc7c:	90cffc34 	orhi	r3,r18,16368
    cc80:	003fe406 	br	cc14 <__alt_data_end+0xfffecc14>
    cc84:	000d883a 	mov	r6,zero
    cc88:	003fdf06 	br	cc08 <__alt_data_end+0xfffecc08>
    cc8c:	90a4983a 	sll	r18,r18,r2
    cc90:	0005883a 	mov	r2,zero
    cc94:	003ff906 	br	cc7c <__alt_data_end+0xfffecc7c>
    cc98:	1144983a 	sll	r2,r2,r5
    cc9c:	003fdd06 	br	cc14 <__alt_data_end+0xfffecc14>

0000cca0 <__d2b>:
    cca0:	defff804 	addi	sp,sp,-32
    cca4:	dc000215 	stw	r16,8(sp)
    cca8:	3021883a 	mov	r16,r6
    ccac:	dc400315 	stw	r17,12(sp)
    ccb0:	8022907a 	slli	r17,r16,1
    ccb4:	dd000615 	stw	r20,24(sp)
    ccb8:	2829883a 	mov	r20,r5
    ccbc:	01400044 	movi	r5,1
    ccc0:	dcc00515 	stw	r19,20(sp)
    ccc4:	dc800415 	stw	r18,16(sp)
    ccc8:	dfc00715 	stw	ra,28(sp)
    cccc:	3825883a 	mov	r18,r7
    ccd0:	8822d57a 	srli	r17,r17,21
    ccd4:	000bf500 	call	bf50 <_Balloc>
    ccd8:	1027883a 	mov	r19,r2
    ccdc:	00800434 	movhi	r2,16
    cce0:	10bfffc4 	addi	r2,r2,-1
    cce4:	808c703a 	and	r6,r16,r2
    cce8:	88000126 	beq	r17,zero,ccf0 <__d2b+0x50>
    ccec:	31800434 	orhi	r6,r6,16
    ccf0:	d9800015 	stw	r6,0(sp)
    ccf4:	a0002426 	beq	r20,zero,cd88 <__d2b+0xe8>
    ccf8:	d9000104 	addi	r4,sp,4
    ccfc:	dd000115 	stw	r20,4(sp)
    cd00:	000c2d40 	call	c2d4 <__lo0bits>
    cd04:	d8c00017 	ldw	r3,0(sp)
    cd08:	10002f1e 	bne	r2,zero,cdc8 <__d2b+0x128>
    cd0c:	d9000117 	ldw	r4,4(sp)
    cd10:	99000515 	stw	r4,20(r19)
    cd14:	1821003a 	cmpeq	r16,r3,zero
    cd18:	01000084 	movi	r4,2
    cd1c:	2421c83a 	sub	r16,r4,r16
    cd20:	98c00615 	stw	r3,24(r19)
    cd24:	9c000415 	stw	r16,16(r19)
    cd28:	88001f1e 	bne	r17,zero,cda8 <__d2b+0x108>
    cd2c:	10bef384 	addi	r2,r2,-1074
    cd30:	90800015 	stw	r2,0(r18)
    cd34:	00900034 	movhi	r2,16384
    cd38:	10bfffc4 	addi	r2,r2,-1
    cd3c:	8085883a 	add	r2,r16,r2
    cd40:	1085883a 	add	r2,r2,r2
    cd44:	1085883a 	add	r2,r2,r2
    cd48:	9885883a 	add	r2,r19,r2
    cd4c:	11000517 	ldw	r4,20(r2)
    cd50:	8020917a 	slli	r16,r16,5
    cd54:	000c26c0 	call	c26c <__hi0bits>
    cd58:	d8c00817 	ldw	r3,32(sp)
    cd5c:	8085c83a 	sub	r2,r16,r2
    cd60:	18800015 	stw	r2,0(r3)
    cd64:	9805883a 	mov	r2,r19
    cd68:	dfc00717 	ldw	ra,28(sp)
    cd6c:	dd000617 	ldw	r20,24(sp)
    cd70:	dcc00517 	ldw	r19,20(sp)
    cd74:	dc800417 	ldw	r18,16(sp)
    cd78:	dc400317 	ldw	r17,12(sp)
    cd7c:	dc000217 	ldw	r16,8(sp)
    cd80:	dec00804 	addi	sp,sp,32
    cd84:	f800283a 	ret
    cd88:	d809883a 	mov	r4,sp
    cd8c:	000c2d40 	call	c2d4 <__lo0bits>
    cd90:	d8c00017 	ldw	r3,0(sp)
    cd94:	04000044 	movi	r16,1
    cd98:	9c000415 	stw	r16,16(r19)
    cd9c:	98c00515 	stw	r3,20(r19)
    cda0:	10800804 	addi	r2,r2,32
    cda4:	883fe126 	beq	r17,zero,cd2c <__alt_data_end+0xfffecd2c>
    cda8:	00c00d44 	movi	r3,53
    cdac:	8c7ef344 	addi	r17,r17,-1075
    cdb0:	88a3883a 	add	r17,r17,r2
    cdb4:	1885c83a 	sub	r2,r3,r2
    cdb8:	d8c00817 	ldw	r3,32(sp)
    cdbc:	94400015 	stw	r17,0(r18)
    cdc0:	18800015 	stw	r2,0(r3)
    cdc4:	003fe706 	br	cd64 <__alt_data_end+0xfffecd64>
    cdc8:	01000804 	movi	r4,32
    cdcc:	2089c83a 	sub	r4,r4,r2
    cdd0:	1908983a 	sll	r4,r3,r4
    cdd4:	d9400117 	ldw	r5,4(sp)
    cdd8:	1886d83a 	srl	r3,r3,r2
    cddc:	2148b03a 	or	r4,r4,r5
    cde0:	99000515 	stw	r4,20(r19)
    cde4:	d8c00015 	stw	r3,0(sp)
    cde8:	003fca06 	br	cd14 <__alt_data_end+0xfffecd14>

0000cdec <__ratio>:
    cdec:	defff904 	addi	sp,sp,-28
    cdf0:	dc400315 	stw	r17,12(sp)
    cdf4:	2823883a 	mov	r17,r5
    cdf8:	d9400104 	addi	r5,sp,4
    cdfc:	dfc00615 	stw	ra,24(sp)
    ce00:	dcc00515 	stw	r19,20(sp)
    ce04:	dc800415 	stw	r18,16(sp)
    ce08:	2027883a 	mov	r19,r4
    ce0c:	dc000215 	stw	r16,8(sp)
    ce10:	000cb940 	call	cb94 <__b2d>
    ce14:	d80b883a 	mov	r5,sp
    ce18:	8809883a 	mov	r4,r17
    ce1c:	1025883a 	mov	r18,r2
    ce20:	1821883a 	mov	r16,r3
    ce24:	000cb940 	call	cb94 <__b2d>
    ce28:	8a000417 	ldw	r8,16(r17)
    ce2c:	99000417 	ldw	r4,16(r19)
    ce30:	d9400117 	ldw	r5,4(sp)
    ce34:	2209c83a 	sub	r4,r4,r8
    ce38:	2010917a 	slli	r8,r4,5
    ce3c:	d9000017 	ldw	r4,0(sp)
    ce40:	2909c83a 	sub	r4,r5,r4
    ce44:	4109883a 	add	r4,r8,r4
    ce48:	01000e0e 	bge	zero,r4,ce84 <__ratio+0x98>
    ce4c:	2008953a 	slli	r4,r4,20
    ce50:	2421883a 	add	r16,r4,r16
    ce54:	100d883a 	mov	r6,r2
    ce58:	180f883a 	mov	r7,r3
    ce5c:	9009883a 	mov	r4,r18
    ce60:	800b883a 	mov	r5,r16
    ce64:	0002d080 	call	2d08 <__divdf3>
    ce68:	dfc00617 	ldw	ra,24(sp)
    ce6c:	dcc00517 	ldw	r19,20(sp)
    ce70:	dc800417 	ldw	r18,16(sp)
    ce74:	dc400317 	ldw	r17,12(sp)
    ce78:	dc000217 	ldw	r16,8(sp)
    ce7c:	dec00704 	addi	sp,sp,28
    ce80:	f800283a 	ret
    ce84:	2008953a 	slli	r4,r4,20
    ce88:	1907c83a 	sub	r3,r3,r4
    ce8c:	003ff106 	br	ce54 <__alt_data_end+0xfffece54>

0000ce90 <_mprec_log10>:
    ce90:	defffe04 	addi	sp,sp,-8
    ce94:	dc000015 	stw	r16,0(sp)
    ce98:	dfc00115 	stw	ra,4(sp)
    ce9c:	008005c4 	movi	r2,23
    cea0:	2021883a 	mov	r16,r4
    cea4:	11000d0e 	bge	r2,r4,cedc <_mprec_log10+0x4c>
    cea8:	0005883a 	mov	r2,zero
    ceac:	00cffc34 	movhi	r3,16368
    ceb0:	843fffc4 	addi	r16,r16,-1
    ceb4:	000d883a 	mov	r6,zero
    ceb8:	01d00934 	movhi	r7,16420
    cebc:	1009883a 	mov	r4,r2
    cec0:	180b883a 	mov	r5,r3
    cec4:	00037b40 	call	37b4 <__muldf3>
    cec8:	803ff91e 	bne	r16,zero,ceb0 <__alt_data_end+0xfffeceb0>
    cecc:	dfc00117 	ldw	ra,4(sp)
    ced0:	dc000017 	ldw	r16,0(sp)
    ced4:	dec00204 	addi	sp,sp,8
    ced8:	f800283a 	ret
    cedc:	202090fa 	slli	r16,r4,3
    cee0:	00800074 	movhi	r2,1
    cee4:	108c7704 	addi	r2,r2,12764
    cee8:	1421883a 	add	r16,r2,r16
    ceec:	80800017 	ldw	r2,0(r16)
    cef0:	80c00117 	ldw	r3,4(r16)
    cef4:	dfc00117 	ldw	ra,4(sp)
    cef8:	dc000017 	ldw	r16,0(sp)
    cefc:	dec00204 	addi	sp,sp,8
    cf00:	f800283a 	ret

0000cf04 <__copybits>:
    cf04:	297fffc4 	addi	r5,r5,-1
    cf08:	280fd17a 	srai	r7,r5,5
    cf0c:	30c00417 	ldw	r3,16(r6)
    cf10:	30800504 	addi	r2,r6,20
    cf14:	39c00044 	addi	r7,r7,1
    cf18:	18c7883a 	add	r3,r3,r3
    cf1c:	39cf883a 	add	r7,r7,r7
    cf20:	18c7883a 	add	r3,r3,r3
    cf24:	39cf883a 	add	r7,r7,r7
    cf28:	10c7883a 	add	r3,r2,r3
    cf2c:	21cf883a 	add	r7,r4,r7
    cf30:	10c00d2e 	bgeu	r2,r3,cf68 <__copybits+0x64>
    cf34:	200b883a 	mov	r5,r4
    cf38:	12000017 	ldw	r8,0(r2)
    cf3c:	29400104 	addi	r5,r5,4
    cf40:	10800104 	addi	r2,r2,4
    cf44:	2a3fff15 	stw	r8,-4(r5)
    cf48:	10fffb36 	bltu	r2,r3,cf38 <__alt_data_end+0xfffecf38>
    cf4c:	1985c83a 	sub	r2,r3,r6
    cf50:	10bffac4 	addi	r2,r2,-21
    cf54:	1004d0ba 	srli	r2,r2,2
    cf58:	10800044 	addi	r2,r2,1
    cf5c:	1085883a 	add	r2,r2,r2
    cf60:	1085883a 	add	r2,r2,r2
    cf64:	2089883a 	add	r4,r4,r2
    cf68:	21c0032e 	bgeu	r4,r7,cf78 <__copybits+0x74>
    cf6c:	20000015 	stw	zero,0(r4)
    cf70:	21000104 	addi	r4,r4,4
    cf74:	21fffd36 	bltu	r4,r7,cf6c <__alt_data_end+0xfffecf6c>
    cf78:	f800283a 	ret

0000cf7c <__any_on>:
    cf7c:	20c00417 	ldw	r3,16(r4)
    cf80:	2805d17a 	srai	r2,r5,5
    cf84:	21000504 	addi	r4,r4,20
    cf88:	18800d0e 	bge	r3,r2,cfc0 <__any_on+0x44>
    cf8c:	18c7883a 	add	r3,r3,r3
    cf90:	18c7883a 	add	r3,r3,r3
    cf94:	20c7883a 	add	r3,r4,r3
    cf98:	20c0192e 	bgeu	r4,r3,d000 <__any_on+0x84>
    cf9c:	18bfff17 	ldw	r2,-4(r3)
    cfa0:	18ffff04 	addi	r3,r3,-4
    cfa4:	1000041e 	bne	r2,zero,cfb8 <__any_on+0x3c>
    cfa8:	20c0142e 	bgeu	r4,r3,cffc <__any_on+0x80>
    cfac:	18ffff04 	addi	r3,r3,-4
    cfb0:	19400017 	ldw	r5,0(r3)
    cfb4:	283ffc26 	beq	r5,zero,cfa8 <__alt_data_end+0xfffecfa8>
    cfb8:	00800044 	movi	r2,1
    cfbc:	f800283a 	ret
    cfc0:	10c00a0e 	bge	r2,r3,cfec <__any_on+0x70>
    cfc4:	1085883a 	add	r2,r2,r2
    cfc8:	1085883a 	add	r2,r2,r2
    cfcc:	294007cc 	andi	r5,r5,31
    cfd0:	2087883a 	add	r3,r4,r2
    cfd4:	283ff026 	beq	r5,zero,cf98 <__alt_data_end+0xfffecf98>
    cfd8:	19800017 	ldw	r6,0(r3)
    cfdc:	3144d83a 	srl	r2,r6,r5
    cfe0:	114a983a 	sll	r5,r2,r5
    cfe4:	317ff41e 	bne	r6,r5,cfb8 <__alt_data_end+0xfffecfb8>
    cfe8:	003feb06 	br	cf98 <__alt_data_end+0xfffecf98>
    cfec:	1085883a 	add	r2,r2,r2
    cff0:	1085883a 	add	r2,r2,r2
    cff4:	2087883a 	add	r3,r4,r2
    cff8:	003fe706 	br	cf98 <__alt_data_end+0xfffecf98>
    cffc:	f800283a 	ret
    d000:	0005883a 	mov	r2,zero
    d004:	f800283a 	ret

0000d008 <_putc_r>:
    d008:	defffc04 	addi	sp,sp,-16
    d00c:	dc000215 	stw	r16,8(sp)
    d010:	dfc00315 	stw	ra,12(sp)
    d014:	2021883a 	mov	r16,r4
    d018:	20000226 	beq	r4,zero,d024 <_putc_r+0x1c>
    d01c:	20800e17 	ldw	r2,56(r4)
    d020:	10001b26 	beq	r2,zero,d090 <_putc_r+0x88>
    d024:	30800217 	ldw	r2,8(r6)
    d028:	10bfffc4 	addi	r2,r2,-1
    d02c:	30800215 	stw	r2,8(r6)
    d030:	10000a16 	blt	r2,zero,d05c <_putc_r+0x54>
    d034:	30800017 	ldw	r2,0(r6)
    d038:	11400005 	stb	r5,0(r2)
    d03c:	30800017 	ldw	r2,0(r6)
    d040:	10c00044 	addi	r3,r2,1
    d044:	30c00015 	stw	r3,0(r6)
    d048:	10800003 	ldbu	r2,0(r2)
    d04c:	dfc00317 	ldw	ra,12(sp)
    d050:	dc000217 	ldw	r16,8(sp)
    d054:	dec00404 	addi	sp,sp,16
    d058:	f800283a 	ret
    d05c:	30c00617 	ldw	r3,24(r6)
    d060:	10c00616 	blt	r2,r3,d07c <_putc_r+0x74>
    d064:	30800017 	ldw	r2,0(r6)
    d068:	00c00284 	movi	r3,10
    d06c:	11400005 	stb	r5,0(r2)
    d070:	30800017 	ldw	r2,0(r6)
    d074:	11400003 	ldbu	r5,0(r2)
    d078:	28fff11e 	bne	r5,r3,d040 <__alt_data_end+0xfffed040>
    d07c:	8009883a 	mov	r4,r16
    d080:	dfc00317 	ldw	ra,12(sp)
    d084:	dc000217 	ldw	r16,8(sp)
    d088:	dec00404 	addi	sp,sp,16
    d08c:	000ef7c1 	jmpi	ef7c <__swbuf_r>
    d090:	d9400015 	stw	r5,0(sp)
    d094:	d9800115 	stw	r6,4(sp)
    d098:	00053700 	call	5370 <__sinit>
    d09c:	d9800117 	ldw	r6,4(sp)
    d0a0:	d9400017 	ldw	r5,0(sp)
    d0a4:	003fdf06 	br	d024 <__alt_data_end+0xfffed024>

0000d0a8 <putc>:
    d0a8:	00800074 	movhi	r2,1
    d0ac:	defffc04 	addi	sp,sp,-16
    d0b0:	10936d04 	addi	r2,r2,19892
    d0b4:	dc000115 	stw	r16,4(sp)
    d0b8:	14000017 	ldw	r16,0(r2)
    d0bc:	dc400215 	stw	r17,8(sp)
    d0c0:	dfc00315 	stw	ra,12(sp)
    d0c4:	2023883a 	mov	r17,r4
    d0c8:	80000226 	beq	r16,zero,d0d4 <putc+0x2c>
    d0cc:	80800e17 	ldw	r2,56(r16)
    d0d0:	10001a26 	beq	r2,zero,d13c <putc+0x94>
    d0d4:	28800217 	ldw	r2,8(r5)
    d0d8:	10bfffc4 	addi	r2,r2,-1
    d0dc:	28800215 	stw	r2,8(r5)
    d0e0:	10000b16 	blt	r2,zero,d110 <putc+0x68>
    d0e4:	28800017 	ldw	r2,0(r5)
    d0e8:	14400005 	stb	r17,0(r2)
    d0ec:	28800017 	ldw	r2,0(r5)
    d0f0:	10c00044 	addi	r3,r2,1
    d0f4:	28c00015 	stw	r3,0(r5)
    d0f8:	10800003 	ldbu	r2,0(r2)
    d0fc:	dfc00317 	ldw	ra,12(sp)
    d100:	dc400217 	ldw	r17,8(sp)
    d104:	dc000117 	ldw	r16,4(sp)
    d108:	dec00404 	addi	sp,sp,16
    d10c:	f800283a 	ret
    d110:	28c00617 	ldw	r3,24(r5)
    d114:	10c00e16 	blt	r2,r3,d150 <putc+0xa8>
    d118:	28800017 	ldw	r2,0(r5)
    d11c:	01000284 	movi	r4,10
    d120:	14400005 	stb	r17,0(r2)
    d124:	28800017 	ldw	r2,0(r5)
    d128:	10c00003 	ldbu	r3,0(r2)
    d12c:	193ff01e 	bne	r3,r4,d0f0 <__alt_data_end+0xfffed0f0>
    d130:	280d883a 	mov	r6,r5
    d134:	180b883a 	mov	r5,r3
    d138:	00000706 	br	d158 <putc+0xb0>
    d13c:	8009883a 	mov	r4,r16
    d140:	d9400015 	stw	r5,0(sp)
    d144:	00053700 	call	5370 <__sinit>
    d148:	d9400017 	ldw	r5,0(sp)
    d14c:	003fe106 	br	d0d4 <__alt_data_end+0xfffed0d4>
    d150:	280d883a 	mov	r6,r5
    d154:	880b883a 	mov	r5,r17
    d158:	8009883a 	mov	r4,r16
    d15c:	dfc00317 	ldw	ra,12(sp)
    d160:	dc400217 	ldw	r17,8(sp)
    d164:	dc000117 	ldw	r16,4(sp)
    d168:	dec00404 	addi	sp,sp,16
    d16c:	000ef7c1 	jmpi	ef7c <__swbuf_r>

0000d170 <_read_r>:
    d170:	defffd04 	addi	sp,sp,-12
    d174:	2805883a 	mov	r2,r5
    d178:	dc000015 	stw	r16,0(sp)
    d17c:	04000074 	movhi	r16,1
    d180:	dc400115 	stw	r17,4(sp)
    d184:	300b883a 	mov	r5,r6
    d188:	841a3a04 	addi	r16,r16,26856
    d18c:	2023883a 	mov	r17,r4
    d190:	380d883a 	mov	r6,r7
    d194:	1009883a 	mov	r4,r2
    d198:	dfc00215 	stw	ra,8(sp)
    d19c:	80000015 	stw	zero,0(r16)
    d1a0:	0010fdc0 	call	10fdc <read>
    d1a4:	00ffffc4 	movi	r3,-1
    d1a8:	10c00526 	beq	r2,r3,d1c0 <_read_r+0x50>
    d1ac:	dfc00217 	ldw	ra,8(sp)
    d1b0:	dc400117 	ldw	r17,4(sp)
    d1b4:	dc000017 	ldw	r16,0(sp)
    d1b8:	dec00304 	addi	sp,sp,12
    d1bc:	f800283a 	ret
    d1c0:	80c00017 	ldw	r3,0(r16)
    d1c4:	183ff926 	beq	r3,zero,d1ac <__alt_data_end+0xfffed1ac>
    d1c8:	88c00015 	stw	r3,0(r17)
    d1cc:	003ff706 	br	d1ac <__alt_data_end+0xfffed1ac>

0000d1d0 <_realloc_r>:
    d1d0:	defff604 	addi	sp,sp,-40
    d1d4:	dc800215 	stw	r18,8(sp)
    d1d8:	dfc00915 	stw	ra,36(sp)
    d1dc:	df000815 	stw	fp,32(sp)
    d1e0:	ddc00715 	stw	r23,28(sp)
    d1e4:	dd800615 	stw	r22,24(sp)
    d1e8:	dd400515 	stw	r21,20(sp)
    d1ec:	dd000415 	stw	r20,16(sp)
    d1f0:	dcc00315 	stw	r19,12(sp)
    d1f4:	dc400115 	stw	r17,4(sp)
    d1f8:	dc000015 	stw	r16,0(sp)
    d1fc:	3025883a 	mov	r18,r6
    d200:	2800b726 	beq	r5,zero,d4e0 <_realloc_r+0x310>
    d204:	282b883a 	mov	r21,r5
    d208:	2029883a 	mov	r20,r4
    d20c:	0010cd40 	call	10cd4 <__malloc_lock>
    d210:	a8bfff17 	ldw	r2,-4(r21)
    d214:	043fff04 	movi	r16,-4
    d218:	90c002c4 	addi	r3,r18,11
    d21c:	01000584 	movi	r4,22
    d220:	acfffe04 	addi	r19,r21,-8
    d224:	1420703a 	and	r16,r2,r16
    d228:	20c0332e 	bgeu	r4,r3,d2f8 <_realloc_r+0x128>
    d22c:	047ffe04 	movi	r17,-8
    d230:	1c62703a 	and	r17,r3,r17
    d234:	8807883a 	mov	r3,r17
    d238:	88005816 	blt	r17,zero,d39c <_realloc_r+0x1cc>
    d23c:	8c805736 	bltu	r17,r18,d39c <_realloc_r+0x1cc>
    d240:	80c0300e 	bge	r16,r3,d304 <_realloc_r+0x134>
    d244:	07000074 	movhi	fp,1
    d248:	e70dc704 	addi	fp,fp,14108
    d24c:	e1c00217 	ldw	r7,8(fp)
    d250:	9c09883a 	add	r4,r19,r16
    d254:	22000117 	ldw	r8,4(r4)
    d258:	21c06326 	beq	r4,r7,d3e8 <_realloc_r+0x218>
    d25c:	017fff84 	movi	r5,-2
    d260:	414a703a 	and	r5,r8,r5
    d264:	214b883a 	add	r5,r4,r5
    d268:	29800117 	ldw	r6,4(r5)
    d26c:	3180004c 	andi	r6,r6,1
    d270:	30003f26 	beq	r6,zero,d370 <_realloc_r+0x1a0>
    d274:	1080004c 	andi	r2,r2,1
    d278:	10008326 	beq	r2,zero,d488 <_realloc_r+0x2b8>
    d27c:	900b883a 	mov	r5,r18
    d280:	a009883a 	mov	r4,r20
    d284:	00063900 	call	6390 <_malloc_r>
    d288:	1025883a 	mov	r18,r2
    d28c:	10011e26 	beq	r2,zero,d708 <_realloc_r+0x538>
    d290:	a93fff17 	ldw	r4,-4(r21)
    d294:	10fffe04 	addi	r3,r2,-8
    d298:	00bfff84 	movi	r2,-2
    d29c:	2084703a 	and	r2,r4,r2
    d2a0:	9885883a 	add	r2,r19,r2
    d2a4:	1880ee26 	beq	r3,r2,d660 <_realloc_r+0x490>
    d2a8:	81bfff04 	addi	r6,r16,-4
    d2ac:	00800904 	movi	r2,36
    d2b0:	1180b836 	bltu	r2,r6,d594 <_realloc_r+0x3c4>
    d2b4:	00c004c4 	movi	r3,19
    d2b8:	19809636 	bltu	r3,r6,d514 <_realloc_r+0x344>
    d2bc:	9005883a 	mov	r2,r18
    d2c0:	a807883a 	mov	r3,r21
    d2c4:	19000017 	ldw	r4,0(r3)
    d2c8:	11000015 	stw	r4,0(r2)
    d2cc:	19000117 	ldw	r4,4(r3)
    d2d0:	11000115 	stw	r4,4(r2)
    d2d4:	18c00217 	ldw	r3,8(r3)
    d2d8:	10c00215 	stw	r3,8(r2)
    d2dc:	a80b883a 	mov	r5,r21
    d2e0:	a009883a 	mov	r4,r20
    d2e4:	00058600 	call	5860 <_free_r>
    d2e8:	a009883a 	mov	r4,r20
    d2ec:	0010cf80 	call	10cf8 <__malloc_unlock>
    d2f0:	9005883a 	mov	r2,r18
    d2f4:	00001206 	br	d340 <_realloc_r+0x170>
    d2f8:	00c00404 	movi	r3,16
    d2fc:	1823883a 	mov	r17,r3
    d300:	003fce06 	br	d23c <__alt_data_end+0xfffed23c>
    d304:	a825883a 	mov	r18,r21
    d308:	8445c83a 	sub	r2,r16,r17
    d30c:	00c003c4 	movi	r3,15
    d310:	18802636 	bltu	r3,r2,d3ac <_realloc_r+0x1dc>
    d314:	99800117 	ldw	r6,4(r19)
    d318:	9c07883a 	add	r3,r19,r16
    d31c:	3180004c 	andi	r6,r6,1
    d320:	3420b03a 	or	r16,r6,r16
    d324:	9c000115 	stw	r16,4(r19)
    d328:	18800117 	ldw	r2,4(r3)
    d32c:	10800054 	ori	r2,r2,1
    d330:	18800115 	stw	r2,4(r3)
    d334:	a009883a 	mov	r4,r20
    d338:	0010cf80 	call	10cf8 <__malloc_unlock>
    d33c:	9005883a 	mov	r2,r18
    d340:	dfc00917 	ldw	ra,36(sp)
    d344:	df000817 	ldw	fp,32(sp)
    d348:	ddc00717 	ldw	r23,28(sp)
    d34c:	dd800617 	ldw	r22,24(sp)
    d350:	dd400517 	ldw	r21,20(sp)
    d354:	dd000417 	ldw	r20,16(sp)
    d358:	dcc00317 	ldw	r19,12(sp)
    d35c:	dc800217 	ldw	r18,8(sp)
    d360:	dc400117 	ldw	r17,4(sp)
    d364:	dc000017 	ldw	r16,0(sp)
    d368:	dec00a04 	addi	sp,sp,40
    d36c:	f800283a 	ret
    d370:	017fff04 	movi	r5,-4
    d374:	414a703a 	and	r5,r8,r5
    d378:	814d883a 	add	r6,r16,r5
    d37c:	30c01f16 	blt	r6,r3,d3fc <_realloc_r+0x22c>
    d380:	20800317 	ldw	r2,12(r4)
    d384:	20c00217 	ldw	r3,8(r4)
    d388:	a825883a 	mov	r18,r21
    d38c:	3021883a 	mov	r16,r6
    d390:	18800315 	stw	r2,12(r3)
    d394:	10c00215 	stw	r3,8(r2)
    d398:	003fdb06 	br	d308 <__alt_data_end+0xfffed308>
    d39c:	00800304 	movi	r2,12
    d3a0:	a0800015 	stw	r2,0(r20)
    d3a4:	0005883a 	mov	r2,zero
    d3a8:	003fe506 	br	d340 <__alt_data_end+0xfffed340>
    d3ac:	98c00117 	ldw	r3,4(r19)
    d3b0:	9c4b883a 	add	r5,r19,r17
    d3b4:	11000054 	ori	r4,r2,1
    d3b8:	18c0004c 	andi	r3,r3,1
    d3bc:	1c62b03a 	or	r17,r3,r17
    d3c0:	9c400115 	stw	r17,4(r19)
    d3c4:	29000115 	stw	r4,4(r5)
    d3c8:	2885883a 	add	r2,r5,r2
    d3cc:	10c00117 	ldw	r3,4(r2)
    d3d0:	29400204 	addi	r5,r5,8
    d3d4:	a009883a 	mov	r4,r20
    d3d8:	18c00054 	ori	r3,r3,1
    d3dc:	10c00115 	stw	r3,4(r2)
    d3e0:	00058600 	call	5860 <_free_r>
    d3e4:	003fd306 	br	d334 <__alt_data_end+0xfffed334>
    d3e8:	017fff04 	movi	r5,-4
    d3ec:	414a703a 	and	r5,r8,r5
    d3f0:	89800404 	addi	r6,r17,16
    d3f4:	8151883a 	add	r8,r16,r5
    d3f8:	4180590e 	bge	r8,r6,d560 <_realloc_r+0x390>
    d3fc:	1080004c 	andi	r2,r2,1
    d400:	103f9e1e 	bne	r2,zero,d27c <__alt_data_end+0xfffed27c>
    d404:	adbffe17 	ldw	r22,-8(r21)
    d408:	00bfff04 	movi	r2,-4
    d40c:	9dadc83a 	sub	r22,r19,r22
    d410:	b1800117 	ldw	r6,4(r22)
    d414:	3084703a 	and	r2,r6,r2
    d418:	20002026 	beq	r4,zero,d49c <_realloc_r+0x2cc>
    d41c:	80af883a 	add	r23,r16,r2
    d420:	b96f883a 	add	r23,r23,r5
    d424:	21c05f26 	beq	r4,r7,d5a4 <_realloc_r+0x3d4>
    d428:	b8c01c16 	blt	r23,r3,d49c <_realloc_r+0x2cc>
    d42c:	20800317 	ldw	r2,12(r4)
    d430:	20c00217 	ldw	r3,8(r4)
    d434:	81bfff04 	addi	r6,r16,-4
    d438:	01000904 	movi	r4,36
    d43c:	18800315 	stw	r2,12(r3)
    d440:	10c00215 	stw	r3,8(r2)
    d444:	b0c00217 	ldw	r3,8(r22)
    d448:	b0800317 	ldw	r2,12(r22)
    d44c:	b4800204 	addi	r18,r22,8
    d450:	18800315 	stw	r2,12(r3)
    d454:	10c00215 	stw	r3,8(r2)
    d458:	21801b36 	bltu	r4,r6,d4c8 <_realloc_r+0x2f8>
    d45c:	008004c4 	movi	r2,19
    d460:	1180352e 	bgeu	r2,r6,d538 <_realloc_r+0x368>
    d464:	a8800017 	ldw	r2,0(r21)
    d468:	b0800215 	stw	r2,8(r22)
    d46c:	a8800117 	ldw	r2,4(r21)
    d470:	b0800315 	stw	r2,12(r22)
    d474:	008006c4 	movi	r2,27
    d478:	11807f36 	bltu	r2,r6,d678 <_realloc_r+0x4a8>
    d47c:	b0800404 	addi	r2,r22,16
    d480:	ad400204 	addi	r21,r21,8
    d484:	00002d06 	br	d53c <_realloc_r+0x36c>
    d488:	adbffe17 	ldw	r22,-8(r21)
    d48c:	00bfff04 	movi	r2,-4
    d490:	9dadc83a 	sub	r22,r19,r22
    d494:	b1000117 	ldw	r4,4(r22)
    d498:	2084703a 	and	r2,r4,r2
    d49c:	b03f7726 	beq	r22,zero,d27c <__alt_data_end+0xfffed27c>
    d4a0:	80af883a 	add	r23,r16,r2
    d4a4:	b8ff7516 	blt	r23,r3,d27c <__alt_data_end+0xfffed27c>
    d4a8:	b0800317 	ldw	r2,12(r22)
    d4ac:	b0c00217 	ldw	r3,8(r22)
    d4b0:	81bfff04 	addi	r6,r16,-4
    d4b4:	01000904 	movi	r4,36
    d4b8:	18800315 	stw	r2,12(r3)
    d4bc:	10c00215 	stw	r3,8(r2)
    d4c0:	b4800204 	addi	r18,r22,8
    d4c4:	21bfe52e 	bgeu	r4,r6,d45c <__alt_data_end+0xfffed45c>
    d4c8:	a80b883a 	mov	r5,r21
    d4cc:	9009883a 	mov	r4,r18
    d4d0:	000bdf40 	call	bdf4 <memmove>
    d4d4:	b821883a 	mov	r16,r23
    d4d8:	b027883a 	mov	r19,r22
    d4dc:	003f8a06 	br	d308 <__alt_data_end+0xfffed308>
    d4e0:	300b883a 	mov	r5,r6
    d4e4:	dfc00917 	ldw	ra,36(sp)
    d4e8:	df000817 	ldw	fp,32(sp)
    d4ec:	ddc00717 	ldw	r23,28(sp)
    d4f0:	dd800617 	ldw	r22,24(sp)
    d4f4:	dd400517 	ldw	r21,20(sp)
    d4f8:	dd000417 	ldw	r20,16(sp)
    d4fc:	dcc00317 	ldw	r19,12(sp)
    d500:	dc800217 	ldw	r18,8(sp)
    d504:	dc400117 	ldw	r17,4(sp)
    d508:	dc000017 	ldw	r16,0(sp)
    d50c:	dec00a04 	addi	sp,sp,40
    d510:	00063901 	jmpi	6390 <_malloc_r>
    d514:	a8c00017 	ldw	r3,0(r21)
    d518:	90c00015 	stw	r3,0(r18)
    d51c:	a8c00117 	ldw	r3,4(r21)
    d520:	90c00115 	stw	r3,4(r18)
    d524:	00c006c4 	movi	r3,27
    d528:	19804536 	bltu	r3,r6,d640 <_realloc_r+0x470>
    d52c:	90800204 	addi	r2,r18,8
    d530:	a8c00204 	addi	r3,r21,8
    d534:	003f6306 	br	d2c4 <__alt_data_end+0xfffed2c4>
    d538:	9005883a 	mov	r2,r18
    d53c:	a8c00017 	ldw	r3,0(r21)
    d540:	b821883a 	mov	r16,r23
    d544:	b027883a 	mov	r19,r22
    d548:	10c00015 	stw	r3,0(r2)
    d54c:	a8c00117 	ldw	r3,4(r21)
    d550:	10c00115 	stw	r3,4(r2)
    d554:	a8c00217 	ldw	r3,8(r21)
    d558:	10c00215 	stw	r3,8(r2)
    d55c:	003f6a06 	br	d308 <__alt_data_end+0xfffed308>
    d560:	9c67883a 	add	r19,r19,r17
    d564:	4445c83a 	sub	r2,r8,r17
    d568:	e4c00215 	stw	r19,8(fp)
    d56c:	10800054 	ori	r2,r2,1
    d570:	98800115 	stw	r2,4(r19)
    d574:	a8bfff17 	ldw	r2,-4(r21)
    d578:	a009883a 	mov	r4,r20
    d57c:	1080004c 	andi	r2,r2,1
    d580:	1462b03a 	or	r17,r2,r17
    d584:	ac7fff15 	stw	r17,-4(r21)
    d588:	0010cf80 	call	10cf8 <__malloc_unlock>
    d58c:	a805883a 	mov	r2,r21
    d590:	003f6b06 	br	d340 <__alt_data_end+0xfffed340>
    d594:	a80b883a 	mov	r5,r21
    d598:	9009883a 	mov	r4,r18
    d59c:	000bdf40 	call	bdf4 <memmove>
    d5a0:	003f4e06 	br	d2dc <__alt_data_end+0xfffed2dc>
    d5a4:	89000404 	addi	r4,r17,16
    d5a8:	b93fbc16 	blt	r23,r4,d49c <__alt_data_end+0xfffed49c>
    d5ac:	b0800317 	ldw	r2,12(r22)
    d5b0:	b0c00217 	ldw	r3,8(r22)
    d5b4:	81bfff04 	addi	r6,r16,-4
    d5b8:	01000904 	movi	r4,36
    d5bc:	18800315 	stw	r2,12(r3)
    d5c0:	10c00215 	stw	r3,8(r2)
    d5c4:	b4800204 	addi	r18,r22,8
    d5c8:	21804336 	bltu	r4,r6,d6d8 <_realloc_r+0x508>
    d5cc:	008004c4 	movi	r2,19
    d5d0:	11803f2e 	bgeu	r2,r6,d6d0 <_realloc_r+0x500>
    d5d4:	a8800017 	ldw	r2,0(r21)
    d5d8:	b0800215 	stw	r2,8(r22)
    d5dc:	a8800117 	ldw	r2,4(r21)
    d5e0:	b0800315 	stw	r2,12(r22)
    d5e4:	008006c4 	movi	r2,27
    d5e8:	11803f36 	bltu	r2,r6,d6e8 <_realloc_r+0x518>
    d5ec:	b0800404 	addi	r2,r22,16
    d5f0:	ad400204 	addi	r21,r21,8
    d5f4:	a8c00017 	ldw	r3,0(r21)
    d5f8:	10c00015 	stw	r3,0(r2)
    d5fc:	a8c00117 	ldw	r3,4(r21)
    d600:	10c00115 	stw	r3,4(r2)
    d604:	a8c00217 	ldw	r3,8(r21)
    d608:	10c00215 	stw	r3,8(r2)
    d60c:	b447883a 	add	r3,r22,r17
    d610:	bc45c83a 	sub	r2,r23,r17
    d614:	e0c00215 	stw	r3,8(fp)
    d618:	10800054 	ori	r2,r2,1
    d61c:	18800115 	stw	r2,4(r3)
    d620:	b0800117 	ldw	r2,4(r22)
    d624:	a009883a 	mov	r4,r20
    d628:	1080004c 	andi	r2,r2,1
    d62c:	1462b03a 	or	r17,r2,r17
    d630:	b4400115 	stw	r17,4(r22)
    d634:	0010cf80 	call	10cf8 <__malloc_unlock>
    d638:	9005883a 	mov	r2,r18
    d63c:	003f4006 	br	d340 <__alt_data_end+0xfffed340>
    d640:	a8c00217 	ldw	r3,8(r21)
    d644:	90c00215 	stw	r3,8(r18)
    d648:	a8c00317 	ldw	r3,12(r21)
    d64c:	90c00315 	stw	r3,12(r18)
    d650:	30801126 	beq	r6,r2,d698 <_realloc_r+0x4c8>
    d654:	90800404 	addi	r2,r18,16
    d658:	a8c00404 	addi	r3,r21,16
    d65c:	003f1906 	br	d2c4 <__alt_data_end+0xfffed2c4>
    d660:	90ffff17 	ldw	r3,-4(r18)
    d664:	00bfff04 	movi	r2,-4
    d668:	a825883a 	mov	r18,r21
    d66c:	1884703a 	and	r2,r3,r2
    d670:	80a1883a 	add	r16,r16,r2
    d674:	003f2406 	br	d308 <__alt_data_end+0xfffed308>
    d678:	a8800217 	ldw	r2,8(r21)
    d67c:	b0800415 	stw	r2,16(r22)
    d680:	a8800317 	ldw	r2,12(r21)
    d684:	b0800515 	stw	r2,20(r22)
    d688:	31000a26 	beq	r6,r4,d6b4 <_realloc_r+0x4e4>
    d68c:	b0800604 	addi	r2,r22,24
    d690:	ad400404 	addi	r21,r21,16
    d694:	003fa906 	br	d53c <__alt_data_end+0xfffed53c>
    d698:	a9000417 	ldw	r4,16(r21)
    d69c:	90800604 	addi	r2,r18,24
    d6a0:	a8c00604 	addi	r3,r21,24
    d6a4:	91000415 	stw	r4,16(r18)
    d6a8:	a9000517 	ldw	r4,20(r21)
    d6ac:	91000515 	stw	r4,20(r18)
    d6b0:	003f0406 	br	d2c4 <__alt_data_end+0xfffed2c4>
    d6b4:	a8c00417 	ldw	r3,16(r21)
    d6b8:	ad400604 	addi	r21,r21,24
    d6bc:	b0800804 	addi	r2,r22,32
    d6c0:	b0c00615 	stw	r3,24(r22)
    d6c4:	a8ffff17 	ldw	r3,-4(r21)
    d6c8:	b0c00715 	stw	r3,28(r22)
    d6cc:	003f9b06 	br	d53c <__alt_data_end+0xfffed53c>
    d6d0:	9005883a 	mov	r2,r18
    d6d4:	003fc706 	br	d5f4 <__alt_data_end+0xfffed5f4>
    d6d8:	a80b883a 	mov	r5,r21
    d6dc:	9009883a 	mov	r4,r18
    d6e0:	000bdf40 	call	bdf4 <memmove>
    d6e4:	003fc906 	br	d60c <__alt_data_end+0xfffed60c>
    d6e8:	a8800217 	ldw	r2,8(r21)
    d6ec:	b0800415 	stw	r2,16(r22)
    d6f0:	a8800317 	ldw	r2,12(r21)
    d6f4:	b0800515 	stw	r2,20(r22)
    d6f8:	31000726 	beq	r6,r4,d718 <_realloc_r+0x548>
    d6fc:	b0800604 	addi	r2,r22,24
    d700:	ad400404 	addi	r21,r21,16
    d704:	003fbb06 	br	d5f4 <__alt_data_end+0xfffed5f4>
    d708:	a009883a 	mov	r4,r20
    d70c:	0010cf80 	call	10cf8 <__malloc_unlock>
    d710:	0005883a 	mov	r2,zero
    d714:	003f0a06 	br	d340 <__alt_data_end+0xfffed340>
    d718:	a8c00417 	ldw	r3,16(r21)
    d71c:	ad400604 	addi	r21,r21,24
    d720:	b0800804 	addi	r2,r22,32
    d724:	b0c00615 	stw	r3,24(r22)
    d728:	a8ffff17 	ldw	r3,-4(r21)
    d72c:	b0c00715 	stw	r3,28(r22)
    d730:	003fb006 	br	d5f4 <__alt_data_end+0xfffed5f4>

0000d734 <__fpclassifyd>:
    d734:	00a00034 	movhi	r2,32768
    d738:	10bfffc4 	addi	r2,r2,-1
    d73c:	2884703a 	and	r2,r5,r2
    d740:	10000726 	beq	r2,zero,d760 <__fpclassifyd+0x2c>
    d744:	00fffc34 	movhi	r3,65520
    d748:	019ff834 	movhi	r6,32736
    d74c:	28c7883a 	add	r3,r5,r3
    d750:	31bfffc4 	addi	r6,r6,-1
    d754:	30c00536 	bltu	r6,r3,d76c <__fpclassifyd+0x38>
    d758:	00800104 	movi	r2,4
    d75c:	f800283a 	ret
    d760:	2000021e 	bne	r4,zero,d76c <__fpclassifyd+0x38>
    d764:	00800084 	movi	r2,2
    d768:	f800283a 	ret
    d76c:	00dffc34 	movhi	r3,32752
    d770:	019ff834 	movhi	r6,32736
    d774:	28cb883a 	add	r5,r5,r3
    d778:	31bfffc4 	addi	r6,r6,-1
    d77c:	317ff62e 	bgeu	r6,r5,d758 <__alt_data_end+0xfffed758>
    d780:	01400434 	movhi	r5,16
    d784:	297fffc4 	addi	r5,r5,-1
    d788:	28800236 	bltu	r5,r2,d794 <__fpclassifyd+0x60>
    d78c:	008000c4 	movi	r2,3
    d790:	f800283a 	ret
    d794:	10c00226 	beq	r2,r3,d7a0 <__fpclassifyd+0x6c>
    d798:	0005883a 	mov	r2,zero
    d79c:	f800283a 	ret
    d7a0:	2005003a 	cmpeq	r2,r4,zero
    d7a4:	f800283a 	ret

0000d7a8 <strcmp>:
    d7a8:	2144b03a 	or	r2,r4,r5
    d7ac:	108000cc 	andi	r2,r2,3
    d7b0:	1000171e 	bne	r2,zero,d810 <strcmp+0x68>
    d7b4:	20800017 	ldw	r2,0(r4)
    d7b8:	28c00017 	ldw	r3,0(r5)
    d7bc:	10c0141e 	bne	r2,r3,d810 <strcmp+0x68>
    d7c0:	027fbff4 	movhi	r9,65279
    d7c4:	4a7fbfc4 	addi	r9,r9,-257
    d7c8:	0086303a 	nor	r3,zero,r2
    d7cc:	02202074 	movhi	r8,32897
    d7d0:	1245883a 	add	r2,r2,r9
    d7d4:	42202004 	addi	r8,r8,-32640
    d7d8:	10c4703a 	and	r2,r2,r3
    d7dc:	1204703a 	and	r2,r2,r8
    d7e0:	10000226 	beq	r2,zero,d7ec <strcmp+0x44>
    d7e4:	00002306 	br	d874 <strcmp+0xcc>
    d7e8:	1000221e 	bne	r2,zero,d874 <strcmp+0xcc>
    d7ec:	21000104 	addi	r4,r4,4
    d7f0:	20c00017 	ldw	r3,0(r4)
    d7f4:	29400104 	addi	r5,r5,4
    d7f8:	29800017 	ldw	r6,0(r5)
    d7fc:	1a4f883a 	add	r7,r3,r9
    d800:	00c4303a 	nor	r2,zero,r3
    d804:	3884703a 	and	r2,r7,r2
    d808:	1204703a 	and	r2,r2,r8
    d80c:	19bff626 	beq	r3,r6,d7e8 <__alt_data_end+0xfffed7e8>
    d810:	20800003 	ldbu	r2,0(r4)
    d814:	10c03fcc 	andi	r3,r2,255
    d818:	18c0201c 	xori	r3,r3,128
    d81c:	18ffe004 	addi	r3,r3,-128
    d820:	18000c26 	beq	r3,zero,d854 <strcmp+0xac>
    d824:	29800007 	ldb	r6,0(r5)
    d828:	19800326 	beq	r3,r6,d838 <strcmp+0x90>
    d82c:	00001306 	br	d87c <strcmp+0xd4>
    d830:	29800007 	ldb	r6,0(r5)
    d834:	11800b1e 	bne	r2,r6,d864 <strcmp+0xbc>
    d838:	21000044 	addi	r4,r4,1
    d83c:	20c00003 	ldbu	r3,0(r4)
    d840:	29400044 	addi	r5,r5,1
    d844:	18803fcc 	andi	r2,r3,255
    d848:	1080201c 	xori	r2,r2,128
    d84c:	10bfe004 	addi	r2,r2,-128
    d850:	103ff71e 	bne	r2,zero,d830 <__alt_data_end+0xfffed830>
    d854:	0007883a 	mov	r3,zero
    d858:	28800003 	ldbu	r2,0(r5)
    d85c:	1885c83a 	sub	r2,r3,r2
    d860:	f800283a 	ret
    d864:	28800003 	ldbu	r2,0(r5)
    d868:	18c03fcc 	andi	r3,r3,255
    d86c:	1885c83a 	sub	r2,r3,r2
    d870:	f800283a 	ret
    d874:	0005883a 	mov	r2,zero
    d878:	f800283a 	ret
    d87c:	10c03fcc 	andi	r3,r2,255
    d880:	003ff506 	br	d858 <__alt_data_end+0xfffed858>

0000d884 <__sprint_r.part.0>:
    d884:	28801917 	ldw	r2,100(r5)
    d888:	defff604 	addi	sp,sp,-40
    d88c:	dd400515 	stw	r21,20(sp)
    d890:	dfc00915 	stw	ra,36(sp)
    d894:	df000815 	stw	fp,32(sp)
    d898:	ddc00715 	stw	r23,28(sp)
    d89c:	dd800615 	stw	r22,24(sp)
    d8a0:	dd000415 	stw	r20,16(sp)
    d8a4:	dcc00315 	stw	r19,12(sp)
    d8a8:	dc800215 	stw	r18,8(sp)
    d8ac:	dc400115 	stw	r17,4(sp)
    d8b0:	dc000015 	stw	r16,0(sp)
    d8b4:	1088000c 	andi	r2,r2,8192
    d8b8:	302b883a 	mov	r21,r6
    d8bc:	10002e26 	beq	r2,zero,d978 <__sprint_r.part.0+0xf4>
    d8c0:	30800217 	ldw	r2,8(r6)
    d8c4:	35800017 	ldw	r22,0(r6)
    d8c8:	10002926 	beq	r2,zero,d970 <__sprint_r.part.0+0xec>
    d8cc:	2827883a 	mov	r19,r5
    d8d0:	2029883a 	mov	r20,r4
    d8d4:	b5c00104 	addi	r23,r22,4
    d8d8:	04bfffc4 	movi	r18,-1
    d8dc:	bc400017 	ldw	r17,0(r23)
    d8e0:	b4000017 	ldw	r16,0(r22)
    d8e4:	0039883a 	mov	fp,zero
    d8e8:	8822d0ba 	srli	r17,r17,2
    d8ec:	8800031e 	bne	r17,zero,d8fc <__sprint_r.part.0+0x78>
    d8f0:	00001806 	br	d954 <__sprint_r.part.0+0xd0>
    d8f4:	84000104 	addi	r16,r16,4
    d8f8:	8f001526 	beq	r17,fp,d950 <__sprint_r.part.0+0xcc>
    d8fc:	81400017 	ldw	r5,0(r16)
    d900:	980d883a 	mov	r6,r19
    d904:	a009883a 	mov	r4,r20
    d908:	000f3140 	call	f314 <_fputwc_r>
    d90c:	e7000044 	addi	fp,fp,1
    d910:	14bff81e 	bne	r2,r18,d8f4 <__alt_data_end+0xfffed8f4>
    d914:	9005883a 	mov	r2,r18
    d918:	a8000215 	stw	zero,8(r21)
    d91c:	a8000115 	stw	zero,4(r21)
    d920:	dfc00917 	ldw	ra,36(sp)
    d924:	df000817 	ldw	fp,32(sp)
    d928:	ddc00717 	ldw	r23,28(sp)
    d92c:	dd800617 	ldw	r22,24(sp)
    d930:	dd400517 	ldw	r21,20(sp)
    d934:	dd000417 	ldw	r20,16(sp)
    d938:	dcc00317 	ldw	r19,12(sp)
    d93c:	dc800217 	ldw	r18,8(sp)
    d940:	dc400117 	ldw	r17,4(sp)
    d944:	dc000017 	ldw	r16,0(sp)
    d948:	dec00a04 	addi	sp,sp,40
    d94c:	f800283a 	ret
    d950:	a8800217 	ldw	r2,8(r21)
    d954:	8c63883a 	add	r17,r17,r17
    d958:	8c63883a 	add	r17,r17,r17
    d95c:	1445c83a 	sub	r2,r2,r17
    d960:	a8800215 	stw	r2,8(r21)
    d964:	b5800204 	addi	r22,r22,8
    d968:	bdc00204 	addi	r23,r23,8
    d96c:	103fdb1e 	bne	r2,zero,d8dc <__alt_data_end+0xfffed8dc>
    d970:	0005883a 	mov	r2,zero
    d974:	003fe806 	br	d918 <__alt_data_end+0xfffed918>
    d978:	000b65c0 	call	b65c <__sfvwrite_r>
    d97c:	003fe606 	br	d918 <__alt_data_end+0xfffed918>

0000d980 <__sprint_r>:
    d980:	30c00217 	ldw	r3,8(r6)
    d984:	18000126 	beq	r3,zero,d98c <__sprint_r+0xc>
    d988:	000d8841 	jmpi	d884 <__sprint_r.part.0>
    d98c:	30000115 	stw	zero,4(r6)
    d990:	0005883a 	mov	r2,zero
    d994:	f800283a 	ret

0000d998 <___vfiprintf_internal_r>:
    d998:	deffca04 	addi	sp,sp,-216
    d99c:	dd403115 	stw	r21,196(sp)
    d9a0:	dfc03515 	stw	ra,212(sp)
    d9a4:	df003415 	stw	fp,208(sp)
    d9a8:	ddc03315 	stw	r23,204(sp)
    d9ac:	dd803215 	stw	r22,200(sp)
    d9b0:	dd003015 	stw	r20,192(sp)
    d9b4:	dcc02f15 	stw	r19,188(sp)
    d9b8:	dc802e15 	stw	r18,184(sp)
    d9bc:	dc402d15 	stw	r17,180(sp)
    d9c0:	dc002c15 	stw	r16,176(sp)
    d9c4:	d9002115 	stw	r4,132(sp)
    d9c8:	d9402015 	stw	r5,128(sp)
    d9cc:	d9c02215 	stw	r7,136(sp)
    d9d0:	302b883a 	mov	r21,r6
    d9d4:	20000226 	beq	r4,zero,d9e0 <___vfiprintf_internal_r+0x48>
    d9d8:	20800e17 	ldw	r2,56(r4)
    d9dc:	1000cf26 	beq	r2,zero,dd1c <___vfiprintf_internal_r+0x384>
    d9e0:	d8c02017 	ldw	r3,128(sp)
    d9e4:	1880030b 	ldhu	r2,12(r3)
    d9e8:	10c8000c 	andi	r3,r2,8192
    d9ec:	1800071e 	bne	r3,zero,da0c <___vfiprintf_internal_r+0x74>
    d9f0:	d9402017 	ldw	r5,128(sp)
    d9f4:	00f7ffc4 	movi	r3,-8193
    d9f8:	10880014 	ori	r2,r2,8192
    d9fc:	29001917 	ldw	r4,100(r5)
    da00:	2880030d 	sth	r2,12(r5)
    da04:	20c6703a 	and	r3,r4,r3
    da08:	28c01915 	stw	r3,100(r5)
    da0c:	10c0020c 	andi	r3,r2,8
    da10:	1800a526 	beq	r3,zero,dca8 <___vfiprintf_internal_r+0x310>
    da14:	d9002017 	ldw	r4,128(sp)
    da18:	20c00417 	ldw	r3,16(r4)
    da1c:	1800a226 	beq	r3,zero,dca8 <___vfiprintf_internal_r+0x310>
    da20:	1080068c 	andi	r2,r2,26
    da24:	00c00284 	movi	r3,10
    da28:	10c0a826 	beq	r2,r3,dccc <___vfiprintf_internal_r+0x334>
    da2c:	d9001a04 	addi	r4,sp,104
    da30:	d94019c4 	addi	r5,sp,103
    da34:	04800074 	movhi	r18,1
    da38:	2145c83a 	sub	r2,r4,r5
    da3c:	948ca904 	addi	r18,r18,12964
    da40:	d9001e15 	stw	r4,120(sp)
    da44:	d9401f15 	stw	r5,124(sp)
    da48:	dec01a15 	stw	sp,104(sp)
    da4c:	d8001c15 	stw	zero,112(sp)
    da50:	d8001b15 	stw	zero,108(sp)
    da54:	d811883a 	mov	r8,sp
    da58:	d8002615 	stw	zero,152(sp)
    da5c:	d8002415 	stw	zero,144(sp)
    da60:	d8802815 	stw	r2,160(sp)
    da64:	a82d883a 	mov	r22,r21
    da68:	b0800007 	ldb	r2,0(r22)
    da6c:	10040d26 	beq	r2,zero,eaa4 <___vfiprintf_internal_r+0x110c>
    da70:	00c00944 	movi	r3,37
    da74:	b029883a 	mov	r20,r22
    da78:	10c0021e 	bne	r2,r3,da84 <___vfiprintf_internal_r+0xec>
    da7c:	00001606 	br	dad8 <___vfiprintf_internal_r+0x140>
    da80:	10c00326 	beq	r2,r3,da90 <___vfiprintf_internal_r+0xf8>
    da84:	a5000044 	addi	r20,r20,1
    da88:	a0800007 	ldb	r2,0(r20)
    da8c:	103ffc1e 	bne	r2,zero,da80 <__alt_data_end+0xfffeda80>
    da90:	a5a1c83a 	sub	r16,r20,r22
    da94:	80001026 	beq	r16,zero,dad8 <___vfiprintf_internal_r+0x140>
    da98:	d8c01c17 	ldw	r3,112(sp)
    da9c:	d8801b17 	ldw	r2,108(sp)
    daa0:	45800015 	stw	r22,0(r8)
    daa4:	80c7883a 	add	r3,r16,r3
    daa8:	10800044 	addi	r2,r2,1
    daac:	44000115 	stw	r16,4(r8)
    dab0:	d8c01c15 	stw	r3,112(sp)
    dab4:	d8801b15 	stw	r2,108(sp)
    dab8:	010001c4 	movi	r4,7
    dabc:	2080750e 	bge	r4,r2,dc94 <___vfiprintf_internal_r+0x2fc>
    dac0:	1803951e 	bne	r3,zero,e918 <___vfiprintf_internal_r+0xf80>
    dac4:	d8c02417 	ldw	r3,144(sp)
    dac8:	d8001b15 	stw	zero,108(sp)
    dacc:	d811883a 	mov	r8,sp
    dad0:	1c07883a 	add	r3,r3,r16
    dad4:	d8c02415 	stw	r3,144(sp)
    dad8:	a0800007 	ldb	r2,0(r20)
    dadc:	1002e026 	beq	r2,zero,e660 <___vfiprintf_internal_r+0xcc8>
    dae0:	a5800044 	addi	r22,r20,1
    dae4:	a0c00047 	ldb	r3,1(r20)
    dae8:	d8001d85 	stb	zero,118(sp)
    daec:	0027883a 	mov	r19,zero
    daf0:	d8002305 	stb	zero,140(sp)
    daf4:	043fffc4 	movi	r16,-1
    daf8:	d8002515 	stw	zero,148(sp)
    dafc:	0023883a 	mov	r17,zero
    db00:	05001604 	movi	r20,88
    db04:	05400244 	movi	r21,9
    db08:	402f883a 	mov	r23,r8
    db0c:	b5800044 	addi	r22,r22,1
    db10:	18bff804 	addi	r2,r3,-32
    db14:	a0827736 	bltu	r20,r2,e4f4 <___vfiprintf_internal_r+0xb5c>
    db18:	100490ba 	slli	r2,r2,2
    db1c:	01000074 	movhi	r4,1
    db20:	2136cc04 	addi	r4,r4,-9424
    db24:	1105883a 	add	r2,r2,r4
    db28:	10800017 	ldw	r2,0(r2)
    db2c:	1000683a 	jmp	r2
    db30:	0000e1f4 	movhi	zero,903
    db34:	0000e4f4 	movhi	zero,915
    db38:	0000e4f4 	movhi	zero,915
    db3c:	0000e210 	cmplti	zero,zero,904
    db40:	0000e4f4 	movhi	zero,915
    db44:	0000e4f4 	movhi	zero,915
    db48:	0000e4f4 	movhi	zero,915
    db4c:	0000e4f4 	movhi	zero,915
    db50:	0000e4f4 	movhi	zero,915
    db54:	0000e4f4 	movhi	zero,915
    db58:	0000e418 	cmpnei	zero,zero,912
    db5c:	0000e43c 	xorhi	zero,zero,912
    db60:	0000e4f4 	movhi	zero,915
    db64:	0000dd34 	movhi	zero,884
    db68:	0000e450 	cmplti	zero,zero,913
    db6c:	0000e4f4 	movhi	zero,915
    db70:	0000e21c 	xori	zero,zero,904
    db74:	0000e228 	cmpgeui	zero,zero,904
    db78:	0000e228 	cmpgeui	zero,zero,904
    db7c:	0000e228 	cmpgeui	zero,zero,904
    db80:	0000e228 	cmpgeui	zero,zero,904
    db84:	0000e228 	cmpgeui	zero,zero,904
    db88:	0000e228 	cmpgeui	zero,zero,904
    db8c:	0000e228 	cmpgeui	zero,zero,904
    db90:	0000e228 	cmpgeui	zero,zero,904
    db94:	0000e228 	cmpgeui	zero,zero,904
    db98:	0000e4f4 	movhi	zero,915
    db9c:	0000e4f4 	movhi	zero,915
    dba0:	0000e4f4 	movhi	zero,915
    dba4:	0000e4f4 	movhi	zero,915
    dba8:	0000e4f4 	movhi	zero,915
    dbac:	0000e4f4 	movhi	zero,915
    dbb0:	0000e4f4 	movhi	zero,915
    dbb4:	0000e4f4 	movhi	zero,915
    dbb8:	0000e4f4 	movhi	zero,915
    dbbc:	0000e4f4 	movhi	zero,915
    dbc0:	0000e268 	cmpgeui	zero,zero,905
    dbc4:	0000e4f4 	movhi	zero,915
    dbc8:	0000e4f4 	movhi	zero,915
    dbcc:	0000e4f4 	movhi	zero,915
    dbd0:	0000e4f4 	movhi	zero,915
    dbd4:	0000e4f4 	movhi	zero,915
    dbd8:	0000e4f4 	movhi	zero,915
    dbdc:	0000e4f4 	movhi	zero,915
    dbe0:	0000e4f4 	movhi	zero,915
    dbe4:	0000e4f4 	movhi	zero,915
    dbe8:	0000e4f4 	movhi	zero,915
    dbec:	0000e2a4 	muli	zero,zero,906
    dbf0:	0000e4f4 	movhi	zero,915
    dbf4:	0000e4f4 	movhi	zero,915
    dbf8:	0000e4f4 	movhi	zero,915
    dbfc:	0000e4f4 	movhi	zero,915
    dc00:	0000e4f4 	movhi	zero,915
    dc04:	0000e300 	call	e30 <main+0xc8>
    dc08:	0000e4f4 	movhi	zero,915
    dc0c:	0000e4f4 	movhi	zero,915
    dc10:	0000e374 	movhi	zero,909
    dc14:	0000e4f4 	movhi	zero,915
    dc18:	0000e4f4 	movhi	zero,915
    dc1c:	0000e4f4 	movhi	zero,915
    dc20:	0000e4f4 	movhi	zero,915
    dc24:	0000e4f4 	movhi	zero,915
    dc28:	0000e4f4 	movhi	zero,915
    dc2c:	0000e4f4 	movhi	zero,915
    dc30:	0000e4f4 	movhi	zero,915
    dc34:	0000e4f4 	movhi	zero,915
    dc38:	0000e4f4 	movhi	zero,915
    dc3c:	0000e11c 	xori	zero,zero,900
    dc40:	0000e14c 	andi	zero,zero,901
    dc44:	0000e4f4 	movhi	zero,915
    dc48:	0000e4f4 	movhi	zero,915
    dc4c:	0000e4f4 	movhi	zero,915
    dc50:	0000e49c 	xori	zero,zero,914
    dc54:	0000e14c 	andi	zero,zero,901
    dc58:	0000e4f4 	movhi	zero,915
    dc5c:	0000e4f4 	movhi	zero,915
    dc60:	0000dff4 	movhi	zero,895
    dc64:	0000e4f4 	movhi	zero,915
    dc68:	0000e008 	cmpgei	zero,zero,896
    dc6c:	0000e040 	call	e04 <main+0x9c>
    dc70:	0000dd40 	call	dd4 <main+0x6c>
    dc74:	0000dfe8 	cmpgeui	zero,zero,895
    dc78:	0000e4f4 	movhi	zero,915
    dc7c:	0000e3b4 	movhi	zero,910
    dc80:	0000e4f4 	movhi	zero,915
    dc84:	0000e400 	call	e40 <main+0xd8>
    dc88:	0000e4f4 	movhi	zero,915
    dc8c:	0000e4f4 	movhi	zero,915
    dc90:	0000e0c4 	movi	zero,899
    dc94:	42000204 	addi	r8,r8,8
    dc98:	d8c02417 	ldw	r3,144(sp)
    dc9c:	1c07883a 	add	r3,r3,r16
    dca0:	d8c02415 	stw	r3,144(sp)
    dca4:	003f8c06 	br	dad8 <__alt_data_end+0xfffedad8>
    dca8:	d9402017 	ldw	r5,128(sp)
    dcac:	d9002117 	ldw	r4,132(sp)
    dcb0:	00099d80 	call	99d8 <__swsetup_r>
    dcb4:	1003c11e 	bne	r2,zero,ebbc <___vfiprintf_internal_r+0x1224>
    dcb8:	d9402017 	ldw	r5,128(sp)
    dcbc:	00c00284 	movi	r3,10
    dcc0:	2880030b 	ldhu	r2,12(r5)
    dcc4:	1080068c 	andi	r2,r2,26
    dcc8:	10ff581e 	bne	r2,r3,da2c <__alt_data_end+0xfffeda2c>
    dccc:	d8c02017 	ldw	r3,128(sp)
    dcd0:	1880038f 	ldh	r2,14(r3)
    dcd4:	103f5516 	blt	r2,zero,da2c <__alt_data_end+0xfffeda2c>
    dcd8:	d9c02217 	ldw	r7,136(sp)
    dcdc:	d9002117 	ldw	r4,132(sp)
    dce0:	a80d883a 	mov	r6,r21
    dce4:	180b883a 	mov	r5,r3
    dce8:	000eec00 	call	eec0 <__sbprintf>
    dcec:	dfc03517 	ldw	ra,212(sp)
    dcf0:	df003417 	ldw	fp,208(sp)
    dcf4:	ddc03317 	ldw	r23,204(sp)
    dcf8:	dd803217 	ldw	r22,200(sp)
    dcfc:	dd403117 	ldw	r21,196(sp)
    dd00:	dd003017 	ldw	r20,192(sp)
    dd04:	dcc02f17 	ldw	r19,188(sp)
    dd08:	dc802e17 	ldw	r18,184(sp)
    dd0c:	dc402d17 	ldw	r17,180(sp)
    dd10:	dc002c17 	ldw	r16,176(sp)
    dd14:	dec03604 	addi	sp,sp,216
    dd18:	f800283a 	ret
    dd1c:	00053700 	call	5370 <__sinit>
    dd20:	003f2f06 	br	d9e0 <__alt_data_end+0xfffed9e0>
    dd24:	d8c02517 	ldw	r3,148(sp)
    dd28:	d8802215 	stw	r2,136(sp)
    dd2c:	00c7c83a 	sub	r3,zero,r3
    dd30:	d8c02515 	stw	r3,148(sp)
    dd34:	8c400114 	ori	r17,r17,4
    dd38:	b0c00007 	ldb	r3,0(r22)
    dd3c:	003f7306 	br	db0c <__alt_data_end+0xfffedb0c>
    dd40:	00800c04 	movi	r2,48
    dd44:	d9402217 	ldw	r5,136(sp)
    dd48:	d8801d05 	stb	r2,116(sp)
    dd4c:	00801e04 	movi	r2,120
    dd50:	d8801d45 	stb	r2,117(sp)
    dd54:	d8001d85 	stb	zero,118(sp)
    dd58:	b811883a 	mov	r8,r23
    dd5c:	28c00104 	addi	r3,r5,4
    dd60:	2cc00017 	ldw	r19,0(r5)
    dd64:	0029883a 	mov	r20,zero
    dd68:	88800094 	ori	r2,r17,2
    dd6c:	80032516 	blt	r16,zero,ea04 <___vfiprintf_internal_r+0x106c>
    dd70:	00bfdfc4 	movi	r2,-129
    dd74:	88a2703a 	and	r17,r17,r2
    dd78:	d8c02215 	stw	r3,136(sp)
    dd7c:	8c400094 	ori	r17,r17,2
    dd80:	98032a1e 	bne	r19,zero,ea2c <___vfiprintf_internal_r+0x1094>
    dd84:	00800074 	movhi	r2,1
    dd88:	108c4904 	addi	r2,r2,12580
    dd8c:	d8802615 	stw	r2,152(sp)
    dd90:	002b883a 	mov	r21,zero
    dd94:	8001741e 	bne	r16,zero,e368 <___vfiprintf_internal_r+0x9d0>
    dd98:	0021883a 	mov	r16,zero
    dd9c:	0029883a 	mov	r20,zero
    dda0:	ddc01a04 	addi	r23,sp,104
    dda4:	8027883a 	mov	r19,r16
    dda8:	8500010e 	bge	r16,r20,ddb0 <___vfiprintf_internal_r+0x418>
    ddac:	a027883a 	mov	r19,r20
    ddb0:	ad403fcc 	andi	r21,r21,255
    ddb4:	ad40201c 	xori	r21,r21,128
    ddb8:	ad7fe004 	addi	r21,r21,-128
    ddbc:	a8000126 	beq	r21,zero,ddc4 <___vfiprintf_internal_r+0x42c>
    ddc0:	9cc00044 	addi	r19,r19,1
    ddc4:	89c0008c 	andi	r7,r17,2
    ddc8:	38000126 	beq	r7,zero,ddd0 <___vfiprintf_internal_r+0x438>
    ddcc:	9cc00084 	addi	r19,r19,2
    ddd0:	88c0210c 	andi	r3,r17,132
    ddd4:	1801dd1e 	bne	r3,zero,e54c <___vfiprintf_internal_r+0xbb4>
    ddd8:	d9402517 	ldw	r5,148(sp)
    dddc:	2cebc83a 	sub	r21,r5,r19
    dde0:	0541da0e 	bge	zero,r21,e54c <___vfiprintf_internal_r+0xbb4>
    dde4:	07000404 	movi	fp,16
    dde8:	d8801c17 	ldw	r2,112(sp)
    ddec:	e543be0e 	bge	fp,r21,ece8 <___vfiprintf_internal_r+0x1350>
    ddf0:	01400074 	movhi	r5,1
    ddf4:	294cad04 	addi	r5,r5,12980
    ddf8:	dc002715 	stw	r16,156(sp)
    ddfc:	d9801b17 	ldw	r6,108(sp)
    de00:	a821883a 	mov	r16,r21
    de04:	d9402315 	stw	r5,140(sp)
    de08:	028001c4 	movi	r10,7
    de0c:	d9c02915 	stw	r7,164(sp)
    de10:	182b883a 	mov	r21,r3
    de14:	00000506 	br	de2c <___vfiprintf_internal_r+0x494>
    de18:	31000084 	addi	r4,r6,2
    de1c:	42000204 	addi	r8,r8,8
    de20:	180d883a 	mov	r6,r3
    de24:	843ffc04 	addi	r16,r16,-16
    de28:	e4000f0e 	bge	fp,r16,de68 <___vfiprintf_internal_r+0x4d0>
    de2c:	01000074 	movhi	r4,1
    de30:	10800404 	addi	r2,r2,16
    de34:	30c00044 	addi	r3,r6,1
    de38:	210cad04 	addi	r4,r4,12980
    de3c:	41000015 	stw	r4,0(r8)
    de40:	47000115 	stw	fp,4(r8)
    de44:	d8801c15 	stw	r2,112(sp)
    de48:	d8c01b15 	stw	r3,108(sp)
    de4c:	50fff20e 	bge	r10,r3,de18 <__alt_data_end+0xfffede18>
    de50:	1001b21e 	bne	r2,zero,e51c <___vfiprintf_internal_r+0xb84>
    de54:	843ffc04 	addi	r16,r16,-16
    de58:	000d883a 	mov	r6,zero
    de5c:	01000044 	movi	r4,1
    de60:	d811883a 	mov	r8,sp
    de64:	e43ff116 	blt	fp,r16,de2c <__alt_data_end+0xfffede2c>
    de68:	a807883a 	mov	r3,r21
    de6c:	d9c02917 	ldw	r7,164(sp)
    de70:	802b883a 	mov	r21,r16
    de74:	dc002717 	ldw	r16,156(sp)
    de78:	d9402317 	ldw	r5,140(sp)
    de7c:	a885883a 	add	r2,r21,r2
    de80:	45400115 	stw	r21,4(r8)
    de84:	41400015 	stw	r5,0(r8)
    de88:	d8801c15 	stw	r2,112(sp)
    de8c:	d9001b15 	stw	r4,108(sp)
    de90:	014001c4 	movi	r5,7
    de94:	29026216 	blt	r5,r4,e820 <___vfiprintf_internal_r+0xe88>
    de98:	d9801d87 	ldb	r6,118(sp)
    de9c:	42000204 	addi	r8,r8,8
    dea0:	21400044 	addi	r5,r4,1
    dea4:	3001ae1e 	bne	r6,zero,e560 <___vfiprintf_internal_r+0xbc8>
    dea8:	3801bb26 	beq	r7,zero,e598 <___vfiprintf_internal_r+0xc00>
    deac:	d9001d04 	addi	r4,sp,116
    deb0:	10800084 	addi	r2,r2,2
    deb4:	41000015 	stw	r4,0(r8)
    deb8:	01000084 	movi	r4,2
    debc:	41000115 	stw	r4,4(r8)
    dec0:	d8801c15 	stw	r2,112(sp)
    dec4:	d9401b15 	stw	r5,108(sp)
    dec8:	010001c4 	movi	r4,7
    decc:	2142680e 	bge	r4,r5,e870 <___vfiprintf_internal_r+0xed8>
    ded0:	1002b11e 	bne	r2,zero,e998 <___vfiprintf_internal_r+0x1000>
    ded4:	01802004 	movi	r6,128
    ded8:	01400044 	movi	r5,1
    dedc:	0009883a 	mov	r4,zero
    dee0:	d811883a 	mov	r8,sp
    dee4:	1981ae1e 	bne	r3,r6,e5a0 <___vfiprintf_internal_r+0xc08>
    dee8:	d8c02517 	ldw	r3,148(sp)
    deec:	1cf9c83a 	sub	fp,r3,r19
    def0:	0701ab0e 	bge	zero,fp,e5a0 <___vfiprintf_internal_r+0xc08>
    def4:	05400404 	movi	r21,16
    def8:	af03a90e 	bge	r21,fp,eda0 <___vfiprintf_internal_r+0x1408>
    defc:	01400074 	movhi	r5,1
    df00:	294ca904 	addi	r5,r5,12964
    df04:	d9402315 	stw	r5,140(sp)
    df08:	01c001c4 	movi	r7,7
    df0c:	00000506 	br	df24 <___vfiprintf_internal_r+0x58c>
    df10:	21800084 	addi	r6,r4,2
    df14:	42000204 	addi	r8,r8,8
    df18:	1809883a 	mov	r4,r3
    df1c:	e73ffc04 	addi	fp,fp,-16
    df20:	af000d0e 	bge	r21,fp,df58 <___vfiprintf_internal_r+0x5c0>
    df24:	10800404 	addi	r2,r2,16
    df28:	20c00044 	addi	r3,r4,1
    df2c:	44800015 	stw	r18,0(r8)
    df30:	45400115 	stw	r21,4(r8)
    df34:	d8801c15 	stw	r2,112(sp)
    df38:	d8c01b15 	stw	r3,108(sp)
    df3c:	38fff40e 	bge	r7,r3,df10 <__alt_data_end+0xfffedf10>
    df40:	10022b1e 	bne	r2,zero,e7f0 <___vfiprintf_internal_r+0xe58>
    df44:	e73ffc04 	addi	fp,fp,-16
    df48:	01800044 	movi	r6,1
    df4c:	0009883a 	mov	r4,zero
    df50:	d811883a 	mov	r8,sp
    df54:	af3ff316 	blt	r21,fp,df24 <__alt_data_end+0xfffedf24>
    df58:	d8c02317 	ldw	r3,140(sp)
    df5c:	1705883a 	add	r2,r2,fp
    df60:	47000115 	stw	fp,4(r8)
    df64:	40c00015 	stw	r3,0(r8)
    df68:	d8801c15 	stw	r2,112(sp)
    df6c:	d9801b15 	stw	r6,108(sp)
    df70:	00c001c4 	movi	r3,7
    df74:	19829416 	blt	r3,r6,e9c8 <___vfiprintf_internal_r+0x1030>
    df78:	8521c83a 	sub	r16,r16,r20
    df7c:	42000204 	addi	r8,r8,8
    df80:	31400044 	addi	r5,r6,1
    df84:	3009883a 	mov	r4,r6
    df88:	04018716 	blt	zero,r16,e5a8 <___vfiprintf_internal_r+0xc10>
    df8c:	a085883a 	add	r2,r20,r2
    df90:	45c00015 	stw	r23,0(r8)
    df94:	45000115 	stw	r20,4(r8)
    df98:	d8801c15 	stw	r2,112(sp)
    df9c:	d9401b15 	stw	r5,108(sp)
    dfa0:	00c001c4 	movi	r3,7
    dfa4:	1941c20e 	bge	r3,r5,e6b0 <___vfiprintf_internal_r+0xd18>
    dfa8:	1002531e 	bne	r2,zero,e8f8 <___vfiprintf_internal_r+0xf60>
    dfac:	d8001b15 	stw	zero,108(sp)
    dfb0:	8c40010c 	andi	r17,r17,4
    dfb4:	88023226 	beq	r17,zero,e880 <___vfiprintf_internal_r+0xee8>
    dfb8:	d9002517 	ldw	r4,148(sp)
    dfbc:	24e3c83a 	sub	r17,r4,r19
    dfc0:	04432916 	blt	zero,r17,ec68 <___vfiprintf_internal_r+0x12d0>
    dfc4:	d8802517 	ldw	r2,148(sp)
    dfc8:	14c0010e 	bge	r2,r19,dfd0 <___vfiprintf_internal_r+0x638>
    dfcc:	9805883a 	mov	r2,r19
    dfd0:	d8c02417 	ldw	r3,144(sp)
    dfd4:	1887883a 	add	r3,r3,r2
    dfd8:	d8c02415 	stw	r3,144(sp)
    dfdc:	d8001b15 	stw	zero,108(sp)
    dfe0:	d811883a 	mov	r8,sp
    dfe4:	003ea006 	br	da68 <__alt_data_end+0xfffeda68>
    dfe8:	8c400814 	ori	r17,r17,32
    dfec:	b0c00007 	ldb	r3,0(r22)
    dff0:	003ec606 	br	db0c <__alt_data_end+0xfffedb0c>
    dff4:	b0c00007 	ldb	r3,0(r22)
    dff8:	00801b04 	movi	r2,108
    dffc:	18832026 	beq	r3,r2,ec80 <___vfiprintf_internal_r+0x12e8>
    e000:	8c400414 	ori	r17,r17,16
    e004:	003ec106 	br	db0c <__alt_data_end+0xfffedb0c>
    e008:	9cc03fcc 	andi	r19,r19,255
    e00c:	b811883a 	mov	r8,r23
    e010:	9803981e 	bne	r19,zero,ee74 <___vfiprintf_internal_r+0x14dc>
    e014:	8880080c 	andi	r2,r17,32
    e018:	1002be26 	beq	r2,zero,eb14 <___vfiprintf_internal_r+0x117c>
    e01c:	d9002217 	ldw	r4,136(sp)
    e020:	d9402417 	ldw	r5,144(sp)
    e024:	20800017 	ldw	r2,0(r4)
    e028:	2807d7fa 	srai	r3,r5,31
    e02c:	21000104 	addi	r4,r4,4
    e030:	d9002215 	stw	r4,136(sp)
    e034:	11400015 	stw	r5,0(r2)
    e038:	10c00115 	stw	r3,4(r2)
    e03c:	003e8a06 	br	da68 <__alt_data_end+0xfffeda68>
    e040:	9cc03fcc 	andi	r19,r19,255
    e044:	b811883a 	mov	r8,r23
    e048:	9803871e 	bne	r19,zero,ee68 <___vfiprintf_internal_r+0x14d0>
    e04c:	8880080c 	andi	r2,r17,32
    e050:	10009a26 	beq	r2,zero,e2bc <___vfiprintf_internal_r+0x924>
    e054:	d9002217 	ldw	r4,136(sp)
    e058:	d8001d85 	stb	zero,118(sp)
    e05c:	20800204 	addi	r2,r4,8
    e060:	24c00017 	ldw	r19,0(r4)
    e064:	25000117 	ldw	r20,4(r4)
    e068:	8002a416 	blt	r16,zero,eafc <___vfiprintf_internal_r+0x1164>
    e06c:	013fdfc4 	movi	r4,-129
    e070:	9d06b03a 	or	r3,r19,r20
    e074:	d8802215 	stw	r2,136(sp)
    e078:	8922703a 	and	r17,r17,r4
    e07c:	18009b26 	beq	r3,zero,e2ec <___vfiprintf_internal_r+0x954>
    e080:	002b883a 	mov	r21,zero
    e084:	ddc01a04 	addi	r23,sp,104
    e088:	9806d0fa 	srli	r3,r19,3
    e08c:	a008977a 	slli	r4,r20,29
    e090:	a028d0fa 	srli	r20,r20,3
    e094:	9cc001cc 	andi	r19,r19,7
    e098:	98800c04 	addi	r2,r19,48
    e09c:	bdffffc4 	addi	r23,r23,-1
    e0a0:	20e6b03a 	or	r19,r4,r3
    e0a4:	b8800005 	stb	r2,0(r23)
    e0a8:	9d06b03a 	or	r3,r19,r20
    e0ac:	183ff61e 	bne	r3,zero,e088 <__alt_data_end+0xfffee088>
    e0b0:	88c0004c 	andi	r3,r17,1
    e0b4:	18021f1e 	bne	r3,zero,e934 <___vfiprintf_internal_r+0xf9c>
    e0b8:	d9401e17 	ldw	r5,120(sp)
    e0bc:	2de9c83a 	sub	r20,r5,r23
    e0c0:	003f3806 	br	dda4 <__alt_data_end+0xfffedda4>
    e0c4:	9cc03fcc 	andi	r19,r19,255
    e0c8:	b811883a 	mov	r8,r23
    e0cc:	98034f1e 	bne	r19,zero,ee0c <___vfiprintf_internal_r+0x1474>
    e0d0:	00800074 	movhi	r2,1
    e0d4:	108c4904 	addi	r2,r2,12580
    e0d8:	d8802615 	stw	r2,152(sp)
    e0dc:	8880080c 	andi	r2,r17,32
    e0e0:	1000ac26 	beq	r2,zero,e394 <___vfiprintf_internal_r+0x9fc>
    e0e4:	d9002217 	ldw	r4,136(sp)
    e0e8:	24c00017 	ldw	r19,0(r4)
    e0ec:	25000117 	ldw	r20,4(r4)
    e0f0:	21000204 	addi	r4,r4,8
    e0f4:	d9002215 	stw	r4,136(sp)
    e0f8:	8880004c 	andi	r2,r17,1
    e0fc:	1001e726 	beq	r2,zero,e89c <___vfiprintf_internal_r+0xf04>
    e100:	9d04b03a 	or	r2,r19,r20
    e104:	10025c1e 	bne	r2,zero,ea78 <___vfiprintf_internal_r+0x10e0>
    e108:	d8001d85 	stb	zero,118(sp)
    e10c:	80024416 	blt	r16,zero,ea20 <___vfiprintf_internal_r+0x1088>
    e110:	00bfdfc4 	movi	r2,-129
    e114:	88a2703a 	and	r17,r17,r2
    e118:	003f1d06 	br	dd90 <__alt_data_end+0xfffedd90>
    e11c:	d8c02217 	ldw	r3,136(sp)
    e120:	04c00044 	movi	r19,1
    e124:	b811883a 	mov	r8,r23
    e128:	18800017 	ldw	r2,0(r3)
    e12c:	18c00104 	addi	r3,r3,4
    e130:	d8001d85 	stb	zero,118(sp)
    e134:	d8801005 	stb	r2,64(sp)
    e138:	d8c02215 	stw	r3,136(sp)
    e13c:	9829883a 	mov	r20,r19
    e140:	ddc01004 	addi	r23,sp,64
    e144:	0021883a 	mov	r16,zero
    e148:	003f1e06 	br	ddc4 <__alt_data_end+0xfffeddc4>
    e14c:	9cc03fcc 	andi	r19,r19,255
    e150:	b811883a 	mov	r8,r23
    e154:	9803331e 	bne	r19,zero,ee24 <___vfiprintf_internal_r+0x148c>
    e158:	8880080c 	andi	r2,r17,32
    e15c:	10004826 	beq	r2,zero,e280 <___vfiprintf_internal_r+0x8e8>
    e160:	d9002217 	ldw	r4,136(sp)
    e164:	20800117 	ldw	r2,4(r4)
    e168:	24c00017 	ldw	r19,0(r4)
    e16c:	21000204 	addi	r4,r4,8
    e170:	d9002215 	stw	r4,136(sp)
    e174:	1029883a 	mov	r20,r2
    e178:	10024c16 	blt	r2,zero,eaac <___vfiprintf_internal_r+0x1114>
    e17c:	dd401d83 	ldbu	r21,118(sp)
    e180:	80007116 	blt	r16,zero,e348 <___vfiprintf_internal_r+0x9b0>
    e184:	00ffdfc4 	movi	r3,-129
    e188:	9d04b03a 	or	r2,r19,r20
    e18c:	88e2703a 	and	r17,r17,r3
    e190:	1000d126 	beq	r2,zero,e4d8 <___vfiprintf_internal_r+0xb40>
    e194:	a0023526 	beq	r20,zero,ea6c <___vfiprintf_internal_r+0x10d4>
    e198:	ddc01a04 	addi	r23,sp,104
    e19c:	4039883a 	mov	fp,r8
    e1a0:	9809883a 	mov	r4,r19
    e1a4:	a00b883a 	mov	r5,r20
    e1a8:	01800284 	movi	r6,10
    e1ac:	000f883a 	mov	r7,zero
    e1b0:	000fca80 	call	fca8 <__umoddi3>
    e1b4:	10800c04 	addi	r2,r2,48
    e1b8:	bdffffc4 	addi	r23,r23,-1
    e1bc:	9809883a 	mov	r4,r19
    e1c0:	a00b883a 	mov	r5,r20
    e1c4:	b8800005 	stb	r2,0(r23)
    e1c8:	01800284 	movi	r6,10
    e1cc:	000f883a 	mov	r7,zero
    e1d0:	000f6ac0 	call	f6ac <__udivdi3>
    e1d4:	1027883a 	mov	r19,r2
    e1d8:	10c4b03a 	or	r2,r2,r3
    e1dc:	1829883a 	mov	r20,r3
    e1e0:	103fef1e 	bne	r2,zero,e1a0 <__alt_data_end+0xfffee1a0>
    e1e4:	d9001e17 	ldw	r4,120(sp)
    e1e8:	e011883a 	mov	r8,fp
    e1ec:	25e9c83a 	sub	r20,r4,r23
    e1f0:	003eec06 	br	dda4 <__alt_data_end+0xfffedda4>
    e1f4:	d8802307 	ldb	r2,140(sp)
    e1f8:	1002361e 	bne	r2,zero,ead4 <___vfiprintf_internal_r+0x113c>
    e1fc:	00c00804 	movi	r3,32
    e200:	d8c02305 	stb	r3,140(sp)
    e204:	04c00044 	movi	r19,1
    e208:	b0c00007 	ldb	r3,0(r22)
    e20c:	003e3f06 	br	db0c <__alt_data_end+0xfffedb0c>
    e210:	8c400054 	ori	r17,r17,1
    e214:	b0c00007 	ldb	r3,0(r22)
    e218:	003e3c06 	br	db0c <__alt_data_end+0xfffedb0c>
    e21c:	8c402014 	ori	r17,r17,128
    e220:	b0c00007 	ldb	r3,0(r22)
    e224:	003e3906 	br	db0c <__alt_data_end+0xfffedb0c>
    e228:	dc002715 	stw	r16,156(sp)
    e22c:	d8002515 	stw	zero,148(sp)
    e230:	1f3ff404 	addi	fp,r3,-48
    e234:	0009883a 	mov	r4,zero
    e238:	b021883a 	mov	r16,r22
    e23c:	01400284 	movi	r5,10
    e240:	0001a300 	call	1a30 <__mulsi3>
    e244:	80c00007 	ldb	r3,0(r16)
    e248:	e089883a 	add	r4,fp,r2
    e24c:	b5800044 	addi	r22,r22,1
    e250:	1f3ff404 	addi	fp,r3,-48
    e254:	b021883a 	mov	r16,r22
    e258:	af3ff82e 	bgeu	r21,fp,e23c <__alt_data_end+0xfffee23c>
    e25c:	d9002515 	stw	r4,148(sp)
    e260:	dc002717 	ldw	r16,156(sp)
    e264:	003e2a06 	br	db10 <__alt_data_end+0xfffedb10>
    e268:	9cc03fcc 	andi	r19,r19,255
    e26c:	b811883a 	mov	r8,r23
    e270:	9802e91e 	bne	r19,zero,ee18 <___vfiprintf_internal_r+0x1480>
    e274:	8c400414 	ori	r17,r17,16
    e278:	8880080c 	andi	r2,r17,32
    e27c:	103fb81e 	bne	r2,zero,e160 <__alt_data_end+0xfffee160>
    e280:	8880040c 	andi	r2,r17,16
    e284:	10022e26 	beq	r2,zero,eb40 <___vfiprintf_internal_r+0x11a8>
    e288:	d9402217 	ldw	r5,136(sp)
    e28c:	2cc00017 	ldw	r19,0(r5)
    e290:	29400104 	addi	r5,r5,4
    e294:	d9402215 	stw	r5,136(sp)
    e298:	9829d7fa 	srai	r20,r19,31
    e29c:	a005883a 	mov	r2,r20
    e2a0:	003fb506 	br	e178 <__alt_data_end+0xfffee178>
    e2a4:	9cc03fcc 	andi	r19,r19,255
    e2a8:	b811883a 	mov	r8,r23
    e2ac:	9802fa1e 	bne	r19,zero,ee98 <___vfiprintf_internal_r+0x1500>
    e2b0:	8c400414 	ori	r17,r17,16
    e2b4:	8880080c 	andi	r2,r17,32
    e2b8:	103f661e 	bne	r2,zero,e054 <__alt_data_end+0xfffee054>
    e2bc:	8880040c 	andi	r2,r17,16
    e2c0:	10020626 	beq	r2,zero,eadc <___vfiprintf_internal_r+0x1144>
    e2c4:	d9402217 	ldw	r5,136(sp)
    e2c8:	d8001d85 	stb	zero,118(sp)
    e2cc:	0029883a 	mov	r20,zero
    e2d0:	28800104 	addi	r2,r5,4
    e2d4:	2cc00017 	ldw	r19,0(r5)
    e2d8:	80020816 	blt	r16,zero,eafc <___vfiprintf_internal_r+0x1164>
    e2dc:	00ffdfc4 	movi	r3,-129
    e2e0:	d8802215 	stw	r2,136(sp)
    e2e4:	88e2703a 	and	r17,r17,r3
    e2e8:	983f651e 	bne	r19,zero,e080 <__alt_data_end+0xfffee080>
    e2ec:	002b883a 	mov	r21,zero
    e2f0:	8002cf26 	beq	r16,zero,ee30 <___vfiprintf_internal_r+0x1498>
    e2f4:	0027883a 	mov	r19,zero
    e2f8:	0029883a 	mov	r20,zero
    e2fc:	003f6106 	br	e084 <__alt_data_end+0xfffee084>
    e300:	9cc03fcc 	andi	r19,r19,255
    e304:	b811883a 	mov	r8,r23
    e308:	9802e01e 	bne	r19,zero,ee8c <___vfiprintf_internal_r+0x14f4>
    e30c:	8c400414 	ori	r17,r17,16
    e310:	8880080c 	andi	r2,r17,32
    e314:	1000641e 	bne	r2,zero,e4a8 <___vfiprintf_internal_r+0xb10>
    e318:	8880040c 	andi	r2,r17,16
    e31c:	1001c81e 	bne	r2,zero,ea40 <___vfiprintf_internal_r+0x10a8>
    e320:	8880100c 	andi	r2,r17,64
    e324:	d8001d85 	stb	zero,118(sp)
    e328:	1002281e 	bne	r2,zero,ebcc <___vfiprintf_internal_r+0x1234>
    e32c:	d9002217 	ldw	r4,136(sp)
    e330:	0029883a 	mov	r20,zero
    e334:	20800104 	addi	r2,r4,4
    e338:	24c00017 	ldw	r19,0(r4)
    e33c:	8001c60e 	bge	r16,zero,ea58 <___vfiprintf_internal_r+0x10c0>
    e340:	d8802215 	stw	r2,136(sp)
    e344:	002b883a 	mov	r21,zero
    e348:	9d04b03a 	or	r2,r19,r20
    e34c:	103f911e 	bne	r2,zero,e194 <__alt_data_end+0xfffee194>
    e350:	00800044 	movi	r2,1
    e354:	10803fcc 	andi	r2,r2,255
    e358:	00c00044 	movi	r3,1
    e35c:	10c05f26 	beq	r2,r3,e4dc <___vfiprintf_internal_r+0xb44>
    e360:	00c00084 	movi	r3,2
    e364:	10ffe31e 	bne	r2,r3,e2f4 <__alt_data_end+0xfffee2f4>
    e368:	0027883a 	mov	r19,zero
    e36c:	0029883a 	mov	r20,zero
    e370:	00015106 	br	e8b8 <___vfiprintf_internal_r+0xf20>
    e374:	9cc03fcc 	andi	r19,r19,255
    e378:	b811883a 	mov	r8,r23
    e37c:	9802c01e 	bne	r19,zero,ee80 <___vfiprintf_internal_r+0x14e8>
    e380:	01400074 	movhi	r5,1
    e384:	294c4404 	addi	r5,r5,12560
    e388:	d9402615 	stw	r5,152(sp)
    e38c:	8880080c 	andi	r2,r17,32
    e390:	103f541e 	bne	r2,zero,e0e4 <__alt_data_end+0xfffee0e4>
    e394:	8880040c 	andi	r2,r17,16
    e398:	1001f226 	beq	r2,zero,eb64 <___vfiprintf_internal_r+0x11cc>
    e39c:	d9402217 	ldw	r5,136(sp)
    e3a0:	0029883a 	mov	r20,zero
    e3a4:	2cc00017 	ldw	r19,0(r5)
    e3a8:	29400104 	addi	r5,r5,4
    e3ac:	d9402215 	stw	r5,136(sp)
    e3b0:	003f5106 	br	e0f8 <__alt_data_end+0xfffee0f8>
    e3b4:	d8c02217 	ldw	r3,136(sp)
    e3b8:	b811883a 	mov	r8,r23
    e3bc:	d8001d85 	stb	zero,118(sp)
    e3c0:	1dc00017 	ldw	r23,0(r3)
    e3c4:	1f000104 	addi	fp,r3,4
    e3c8:	b8025926 	beq	r23,zero,ed30 <___vfiprintf_internal_r+0x1398>
    e3cc:	80023316 	blt	r16,zero,ec9c <___vfiprintf_internal_r+0x1304>
    e3d0:	800d883a 	mov	r6,r16
    e3d4:	000b883a 	mov	r5,zero
    e3d8:	b809883a 	mov	r4,r23
    e3dc:	da002a15 	stw	r8,168(sp)
    e3e0:	000bd100 	call	bd10 <memchr>
    e3e4:	da002a17 	ldw	r8,168(sp)
    e3e8:	10026826 	beq	r2,zero,ed8c <___vfiprintf_internal_r+0x13f4>
    e3ec:	15e9c83a 	sub	r20,r2,r23
    e3f0:	dd401d83 	ldbu	r21,118(sp)
    e3f4:	df002215 	stw	fp,136(sp)
    e3f8:	0021883a 	mov	r16,zero
    e3fc:	003e6906 	br	dda4 <__alt_data_end+0xfffedda4>
    e400:	9cc03fcc 	andi	r19,r19,255
    e404:	b811883a 	mov	r8,r23
    e408:	983fc126 	beq	r19,zero,e310 <__alt_data_end+0xfffee310>
    e40c:	d8c02303 	ldbu	r3,140(sp)
    e410:	d8c01d85 	stb	r3,118(sp)
    e414:	003fbe06 	br	e310 <__alt_data_end+0xfffee310>
    e418:	d9002217 	ldw	r4,136(sp)
    e41c:	d9402217 	ldw	r5,136(sp)
    e420:	21000017 	ldw	r4,0(r4)
    e424:	28800104 	addi	r2,r5,4
    e428:	d9002515 	stw	r4,148(sp)
    e42c:	203e3d16 	blt	r4,zero,dd24 <__alt_data_end+0xfffedd24>
    e430:	d8802215 	stw	r2,136(sp)
    e434:	b0c00007 	ldb	r3,0(r22)
    e438:	003db406 	br	db0c <__alt_data_end+0xfffedb0c>
    e43c:	00c00ac4 	movi	r3,43
    e440:	d8c02305 	stb	r3,140(sp)
    e444:	04c00044 	movi	r19,1
    e448:	b0c00007 	ldb	r3,0(r22)
    e44c:	003daf06 	br	db0c <__alt_data_end+0xfffedb0c>
    e450:	b0c00007 	ldb	r3,0(r22)
    e454:	01000a84 	movi	r4,42
    e458:	b4000044 	addi	r16,r22,1
    e45c:	19025e26 	beq	r3,r4,edd8 <___vfiprintf_internal_r+0x1440>
    e460:	1f3ff404 	addi	fp,r3,-48
    e464:	0009883a 	mov	r4,zero
    e468:	af025236 	bltu	r21,fp,edb4 <___vfiprintf_internal_r+0x141c>
    e46c:	01400284 	movi	r5,10
    e470:	0001a300 	call	1a30 <__mulsi3>
    e474:	80c00007 	ldb	r3,0(r16)
    e478:	1709883a 	add	r4,r2,fp
    e47c:	85800044 	addi	r22,r16,1
    e480:	1f3ff404 	addi	fp,r3,-48
    e484:	b021883a 	mov	r16,r22
    e488:	af3ff82e 	bgeu	r21,fp,e46c <__alt_data_end+0xfffee46c>
    e48c:	2021883a 	mov	r16,r4
    e490:	203d9f0e 	bge	r4,zero,db10 <__alt_data_end+0xfffedb10>
    e494:	043fffc4 	movi	r16,-1
    e498:	003d9d06 	br	db10 <__alt_data_end+0xfffedb10>
    e49c:	8c401014 	ori	r17,r17,64
    e4a0:	b0c00007 	ldb	r3,0(r22)
    e4a4:	003d9906 	br	db0c <__alt_data_end+0xfffedb0c>
    e4a8:	d9002217 	ldw	r4,136(sp)
    e4ac:	d8001d85 	stb	zero,118(sp)
    e4b0:	20c00204 	addi	r3,r4,8
    e4b4:	24c00017 	ldw	r19,0(r4)
    e4b8:	25000117 	ldw	r20,4(r4)
    e4bc:	8001e716 	blt	r16,zero,ec5c <___vfiprintf_internal_r+0x12c4>
    e4c0:	013fdfc4 	movi	r4,-129
    e4c4:	9d04b03a 	or	r2,r19,r20
    e4c8:	d8c02215 	stw	r3,136(sp)
    e4cc:	8922703a 	and	r17,r17,r4
    e4d0:	002b883a 	mov	r21,zero
    e4d4:	103f2f1e 	bne	r2,zero,e194 <__alt_data_end+0xfffee194>
    e4d8:	803e2f26 	beq	r16,zero,dd98 <__alt_data_end+0xfffedd98>
    e4dc:	0027883a 	mov	r19,zero
    e4e0:	9cc00c04 	addi	r19,r19,48
    e4e4:	dcc019c5 	stb	r19,103(sp)
    e4e8:	dd002817 	ldw	r20,160(sp)
    e4ec:	ddc019c4 	addi	r23,sp,103
    e4f0:	003e2c06 	br	dda4 <__alt_data_end+0xfffedda4>
    e4f4:	9cc03fcc 	andi	r19,r19,255
    e4f8:	b811883a 	mov	r8,r23
    e4fc:	9802571e 	bne	r19,zero,ee5c <___vfiprintf_internal_r+0x14c4>
    e500:	18005726 	beq	r3,zero,e660 <___vfiprintf_internal_r+0xcc8>
    e504:	04c00044 	movi	r19,1
    e508:	d8c01005 	stb	r3,64(sp)
    e50c:	d8001d85 	stb	zero,118(sp)
    e510:	9829883a 	mov	r20,r19
    e514:	ddc01004 	addi	r23,sp,64
    e518:	003f0a06 	br	e144 <__alt_data_end+0xfffee144>
    e51c:	d9402017 	ldw	r5,128(sp)
    e520:	d9002117 	ldw	r4,132(sp)
    e524:	d9801a04 	addi	r6,sp,104
    e528:	da802a15 	stw	r10,168(sp)
    e52c:	000d8840 	call	d884 <__sprint_r.part.0>
    e530:	da802a17 	ldw	r10,168(sp)
    e534:	1000501e 	bne	r2,zero,e678 <___vfiprintf_internal_r+0xce0>
    e538:	d9801b17 	ldw	r6,108(sp)
    e53c:	d8801c17 	ldw	r2,112(sp)
    e540:	d811883a 	mov	r8,sp
    e544:	31000044 	addi	r4,r6,1
    e548:	003e3606 	br	de24 <__alt_data_end+0xfffede24>
    e54c:	d9001b17 	ldw	r4,108(sp)
    e550:	d8801c17 	ldw	r2,112(sp)
    e554:	21400044 	addi	r5,r4,1
    e558:	d9801d87 	ldb	r6,118(sp)
    e55c:	303e5226 	beq	r6,zero,dea8 <__alt_data_end+0xfffedea8>
    e560:	01800044 	movi	r6,1
    e564:	d9001d84 	addi	r4,sp,118
    e568:	1185883a 	add	r2,r2,r6
    e56c:	41000015 	stw	r4,0(r8)
    e570:	41800115 	stw	r6,4(r8)
    e574:	d8801c15 	stw	r2,112(sp)
    e578:	d9401b15 	stw	r5,108(sp)
    e57c:	010001c4 	movi	r4,7
    e580:	2140b00e 	bge	r4,r5,e844 <___vfiprintf_internal_r+0xeac>
    e584:	1000f61e 	bne	r2,zero,e960 <___vfiprintf_internal_r+0xfc8>
    e588:	3800b31e 	bne	r7,zero,e858 <___vfiprintf_internal_r+0xec0>
    e58c:	0009883a 	mov	r4,zero
    e590:	300b883a 	mov	r5,r6
    e594:	d811883a 	mov	r8,sp
    e598:	01802004 	movi	r6,128
    e59c:	19be5226 	beq	r3,r6,dee8 <__alt_data_end+0xfffedee8>
    e5a0:	8521c83a 	sub	r16,r16,r20
    e5a4:	043e790e 	bge	zero,r16,df8c <__alt_data_end+0xfffedf8c>
    e5a8:	05400404 	movi	r21,16
    e5ac:	ac01b00e 	bge	r21,r16,ec70 <___vfiprintf_internal_r+0x12d8>
    e5b0:	01400074 	movhi	r5,1
    e5b4:	294ca904 	addi	r5,r5,12964
    e5b8:	d9402315 	stw	r5,140(sp)
    e5bc:	070001c4 	movi	fp,7
    e5c0:	00000506 	br	e5d8 <___vfiprintf_internal_r+0xc40>
    e5c4:	21400084 	addi	r5,r4,2
    e5c8:	42000204 	addi	r8,r8,8
    e5cc:	1809883a 	mov	r4,r3
    e5d0:	843ffc04 	addi	r16,r16,-16
    e5d4:	ac000d0e 	bge	r21,r16,e60c <___vfiprintf_internal_r+0xc74>
    e5d8:	10800404 	addi	r2,r2,16
    e5dc:	20c00044 	addi	r3,r4,1
    e5e0:	44800015 	stw	r18,0(r8)
    e5e4:	45400115 	stw	r21,4(r8)
    e5e8:	d8801c15 	stw	r2,112(sp)
    e5ec:	d8c01b15 	stw	r3,108(sp)
    e5f0:	e0fff40e 	bge	fp,r3,e5c4 <__alt_data_end+0xfffee5c4>
    e5f4:	1000101e 	bne	r2,zero,e638 <___vfiprintf_internal_r+0xca0>
    e5f8:	843ffc04 	addi	r16,r16,-16
    e5fc:	01400044 	movi	r5,1
    e600:	0009883a 	mov	r4,zero
    e604:	d811883a 	mov	r8,sp
    e608:	ac3ff316 	blt	r21,r16,e5d8 <__alt_data_end+0xfffee5d8>
    e60c:	d8c02317 	ldw	r3,140(sp)
    e610:	1405883a 	add	r2,r2,r16
    e614:	44000115 	stw	r16,4(r8)
    e618:	40c00015 	stw	r3,0(r8)
    e61c:	d8801c15 	stw	r2,112(sp)
    e620:	d9401b15 	stw	r5,108(sp)
    e624:	00c001c4 	movi	r3,7
    e628:	19401916 	blt	r3,r5,e690 <___vfiprintf_internal_r+0xcf8>
    e62c:	42000204 	addi	r8,r8,8
    e630:	29400044 	addi	r5,r5,1
    e634:	003e5506 	br	df8c <__alt_data_end+0xfffedf8c>
    e638:	d9402017 	ldw	r5,128(sp)
    e63c:	d9002117 	ldw	r4,132(sp)
    e640:	d9801a04 	addi	r6,sp,104
    e644:	000d8840 	call	d884 <__sprint_r.part.0>
    e648:	10000b1e 	bne	r2,zero,e678 <___vfiprintf_internal_r+0xce0>
    e64c:	d9001b17 	ldw	r4,108(sp)
    e650:	d8801c17 	ldw	r2,112(sp)
    e654:	d811883a 	mov	r8,sp
    e658:	21400044 	addi	r5,r4,1
    e65c:	003fdc06 	br	e5d0 <__alt_data_end+0xfffee5d0>
    e660:	d8801c17 	ldw	r2,112(sp)
    e664:	10000426 	beq	r2,zero,e678 <___vfiprintf_internal_r+0xce0>
    e668:	d9402017 	ldw	r5,128(sp)
    e66c:	d9002117 	ldw	r4,132(sp)
    e670:	d9801a04 	addi	r6,sp,104
    e674:	000d8840 	call	d884 <__sprint_r.part.0>
    e678:	d9402017 	ldw	r5,128(sp)
    e67c:	2880030b 	ldhu	r2,12(r5)
    e680:	1080100c 	andi	r2,r2,64
    e684:	10014d1e 	bne	r2,zero,ebbc <___vfiprintf_internal_r+0x1224>
    e688:	d8802417 	ldw	r2,144(sp)
    e68c:	003d9706 	br	dcec <__alt_data_end+0xfffedcec>
    e690:	1000d21e 	bne	r2,zero,e9dc <___vfiprintf_internal_r+0x1044>
    e694:	00c00044 	movi	r3,1
    e698:	a005883a 	mov	r2,r20
    e69c:	ddc00015 	stw	r23,0(sp)
    e6a0:	dd000115 	stw	r20,4(sp)
    e6a4:	dd001c15 	stw	r20,112(sp)
    e6a8:	d8c01b15 	stw	r3,108(sp)
    e6ac:	d811883a 	mov	r8,sp
    e6b0:	42000204 	addi	r8,r8,8
    e6b4:	8c40010c 	andi	r17,r17,4
    e6b8:	88004026 	beq	r17,zero,e7bc <___vfiprintf_internal_r+0xe24>
    e6bc:	d9002517 	ldw	r4,148(sp)
    e6c0:	24e3c83a 	sub	r17,r4,r19
    e6c4:	04403d0e 	bge	zero,r17,e7bc <___vfiprintf_internal_r+0xe24>
    e6c8:	04000404 	movi	r16,16
    e6cc:	8441a90e 	bge	r16,r17,ed74 <___vfiprintf_internal_r+0x13dc>
    e6d0:	00c00074 	movhi	r3,1
    e6d4:	18ccad04 	addi	r3,r3,12980
    e6d8:	d9001b17 	ldw	r4,108(sp)
    e6dc:	d8c02315 	stw	r3,140(sp)
    e6e0:	050001c4 	movi	r20,7
    e6e4:	dd402117 	ldw	r21,132(sp)
    e6e8:	ddc02017 	ldw	r23,128(sp)
    e6ec:	00000506 	br	e704 <___vfiprintf_internal_r+0xd6c>
    e6f0:	21400084 	addi	r5,r4,2
    e6f4:	42000204 	addi	r8,r8,8
    e6f8:	1809883a 	mov	r4,r3
    e6fc:	8c7ffc04 	addi	r17,r17,-16
    e700:	84400f0e 	bge	r16,r17,e740 <___vfiprintf_internal_r+0xda8>
    e704:	01400074 	movhi	r5,1
    e708:	10800404 	addi	r2,r2,16
    e70c:	20c00044 	addi	r3,r4,1
    e710:	294cad04 	addi	r5,r5,12980
    e714:	41400015 	stw	r5,0(r8)
    e718:	44000115 	stw	r16,4(r8)
    e71c:	d8801c15 	stw	r2,112(sp)
    e720:	d8c01b15 	stw	r3,108(sp)
    e724:	a0fff20e 	bge	r20,r3,e6f0 <__alt_data_end+0xfffee6f0>
    e728:	1000141e 	bne	r2,zero,e77c <___vfiprintf_internal_r+0xde4>
    e72c:	8c7ffc04 	addi	r17,r17,-16
    e730:	01400044 	movi	r5,1
    e734:	0009883a 	mov	r4,zero
    e738:	d811883a 	mov	r8,sp
    e73c:	847ff116 	blt	r16,r17,e704 <__alt_data_end+0xfffee704>
    e740:	d8c02317 	ldw	r3,140(sp)
    e744:	1445883a 	add	r2,r2,r17
    e748:	44400115 	stw	r17,4(r8)
    e74c:	40c00015 	stw	r3,0(r8)
    e750:	d8801c15 	stw	r2,112(sp)
    e754:	d9401b15 	stw	r5,108(sp)
    e758:	00c001c4 	movi	r3,7
    e75c:	1940170e 	bge	r3,r5,e7bc <___vfiprintf_internal_r+0xe24>
    e760:	1000101e 	bne	r2,zero,e7a4 <___vfiprintf_internal_r+0xe0c>
    e764:	d8802517 	ldw	r2,148(sp)
    e768:	14c11616 	blt	r2,r19,ebc4 <___vfiprintf_internal_r+0x122c>
    e76c:	d9002417 	ldw	r4,144(sp)
    e770:	2089883a 	add	r4,r4,r2
    e774:	d9002415 	stw	r4,144(sp)
    e778:	003e1806 	br	dfdc <__alt_data_end+0xfffedfdc>
    e77c:	d9801a04 	addi	r6,sp,104
    e780:	b80b883a 	mov	r5,r23
    e784:	a809883a 	mov	r4,r21
    e788:	000d8840 	call	d884 <__sprint_r.part.0>
    e78c:	103fba1e 	bne	r2,zero,e678 <__alt_data_end+0xfffee678>
    e790:	d9001b17 	ldw	r4,108(sp)
    e794:	d8801c17 	ldw	r2,112(sp)
    e798:	d811883a 	mov	r8,sp
    e79c:	21400044 	addi	r5,r4,1
    e7a0:	003fd606 	br	e6fc <__alt_data_end+0xfffee6fc>
    e7a4:	d9402017 	ldw	r5,128(sp)
    e7a8:	d9002117 	ldw	r4,132(sp)
    e7ac:	d9801a04 	addi	r6,sp,104
    e7b0:	000d8840 	call	d884 <__sprint_r.part.0>
    e7b4:	103fb01e 	bne	r2,zero,e678 <__alt_data_end+0xfffee678>
    e7b8:	d8801c17 	ldw	r2,112(sp)
    e7bc:	d8c02517 	ldw	r3,148(sp)
    e7c0:	1cc0010e 	bge	r3,r19,e7c8 <___vfiprintf_internal_r+0xe30>
    e7c4:	9807883a 	mov	r3,r19
    e7c8:	d9002417 	ldw	r4,144(sp)
    e7cc:	20c9883a 	add	r4,r4,r3
    e7d0:	d9002415 	stw	r4,144(sp)
    e7d4:	103e0126 	beq	r2,zero,dfdc <__alt_data_end+0xfffedfdc>
    e7d8:	d9402017 	ldw	r5,128(sp)
    e7dc:	d9002117 	ldw	r4,132(sp)
    e7e0:	d9801a04 	addi	r6,sp,104
    e7e4:	000d8840 	call	d884 <__sprint_r.part.0>
    e7e8:	103dfc26 	beq	r2,zero,dfdc <__alt_data_end+0xfffedfdc>
    e7ec:	003fa206 	br	e678 <__alt_data_end+0xfffee678>
    e7f0:	d9402017 	ldw	r5,128(sp)
    e7f4:	d9002117 	ldw	r4,132(sp)
    e7f8:	d9801a04 	addi	r6,sp,104
    e7fc:	d9c02b15 	stw	r7,172(sp)
    e800:	000d8840 	call	d884 <__sprint_r.part.0>
    e804:	d9c02b17 	ldw	r7,172(sp)
    e808:	103f9b1e 	bne	r2,zero,e678 <__alt_data_end+0xfffee678>
    e80c:	d9001b17 	ldw	r4,108(sp)
    e810:	d8801c17 	ldw	r2,112(sp)
    e814:	d811883a 	mov	r8,sp
    e818:	21800044 	addi	r6,r4,1
    e81c:	003dbf06 	br	df1c <__alt_data_end+0xfffedf1c>
    e820:	1000d81e 	bne	r2,zero,eb84 <___vfiprintf_internal_r+0x11ec>
    e824:	d9001d87 	ldb	r4,118(sp)
    e828:	20000a26 	beq	r4,zero,e854 <___vfiprintf_internal_r+0xebc>
    e82c:	00800044 	movi	r2,1
    e830:	d9001d84 	addi	r4,sp,118
    e834:	100b883a 	mov	r5,r2
    e838:	d9000015 	stw	r4,0(sp)
    e83c:	d8800115 	stw	r2,4(sp)
    e840:	d811883a 	mov	r8,sp
    e844:	2809883a 	mov	r4,r5
    e848:	42000204 	addi	r8,r8,8
    e84c:	29400044 	addi	r5,r5,1
    e850:	003d9506 	br	dea8 <__alt_data_end+0xfffedea8>
    e854:	3800fd26 	beq	r7,zero,ec4c <___vfiprintf_internal_r+0x12b4>
    e858:	00800084 	movi	r2,2
    e85c:	d9001d04 	addi	r4,sp,116
    e860:	d9000015 	stw	r4,0(sp)
    e864:	d8800115 	stw	r2,4(sp)
    e868:	01400044 	movi	r5,1
    e86c:	d811883a 	mov	r8,sp
    e870:	2809883a 	mov	r4,r5
    e874:	42000204 	addi	r8,r8,8
    e878:	29400044 	addi	r5,r5,1
    e87c:	003f4606 	br	e598 <__alt_data_end+0xfffee598>
    e880:	d8802517 	ldw	r2,148(sp)
    e884:	14c0010e 	bge	r2,r19,e88c <___vfiprintf_internal_r+0xef4>
    e888:	9805883a 	mov	r2,r19
    e88c:	d9402417 	ldw	r5,144(sp)
    e890:	288b883a 	add	r5,r5,r2
    e894:	d9402415 	stw	r5,144(sp)
    e898:	003dd006 	br	dfdc <__alt_data_end+0xfffedfdc>
    e89c:	d8001d85 	stb	zero,118(sp)
    e8a0:	80005d16 	blt	r16,zero,ea18 <___vfiprintf_internal_r+0x1080>
    e8a4:	00ffdfc4 	movi	r3,-129
    e8a8:	9d04b03a 	or	r2,r19,r20
    e8ac:	88e2703a 	and	r17,r17,r3
    e8b0:	103d3726 	beq	r2,zero,dd90 <__alt_data_end+0xfffedd90>
    e8b4:	002b883a 	mov	r21,zero
    e8b8:	d9002617 	ldw	r4,152(sp)
    e8bc:	ddc01a04 	addi	r23,sp,104
    e8c0:	988003cc 	andi	r2,r19,15
    e8c4:	a006973a 	slli	r3,r20,28
    e8c8:	2085883a 	add	r2,r4,r2
    e8cc:	9826d13a 	srli	r19,r19,4
    e8d0:	10800003 	ldbu	r2,0(r2)
    e8d4:	a028d13a 	srli	r20,r20,4
    e8d8:	bdffffc4 	addi	r23,r23,-1
    e8dc:	1ce6b03a 	or	r19,r3,r19
    e8e0:	b8800005 	stb	r2,0(r23)
    e8e4:	9d04b03a 	or	r2,r19,r20
    e8e8:	103ff51e 	bne	r2,zero,e8c0 <__alt_data_end+0xfffee8c0>
    e8ec:	d8801e17 	ldw	r2,120(sp)
    e8f0:	15e9c83a 	sub	r20,r2,r23
    e8f4:	003d2b06 	br	dda4 <__alt_data_end+0xfffedda4>
    e8f8:	d9402017 	ldw	r5,128(sp)
    e8fc:	d9002117 	ldw	r4,132(sp)
    e900:	d9801a04 	addi	r6,sp,104
    e904:	000d8840 	call	d884 <__sprint_r.part.0>
    e908:	103f5b1e 	bne	r2,zero,e678 <__alt_data_end+0xfffee678>
    e90c:	d8801c17 	ldw	r2,112(sp)
    e910:	d811883a 	mov	r8,sp
    e914:	003f6706 	br	e6b4 <__alt_data_end+0xfffee6b4>
    e918:	d9402017 	ldw	r5,128(sp)
    e91c:	d9002117 	ldw	r4,132(sp)
    e920:	d9801a04 	addi	r6,sp,104
    e924:	000d8840 	call	d884 <__sprint_r.part.0>
    e928:	103f531e 	bne	r2,zero,e678 <__alt_data_end+0xfffee678>
    e92c:	d811883a 	mov	r8,sp
    e930:	003cd906 	br	dc98 <__alt_data_end+0xfffedc98>
    e934:	10803fcc 	andi	r2,r2,255
    e938:	1080201c 	xori	r2,r2,128
    e93c:	10bfe004 	addi	r2,r2,-128
    e940:	00c00c04 	movi	r3,48
    e944:	10ffe926 	beq	r2,r3,e8ec <__alt_data_end+0xfffee8ec>
    e948:	b8ffffc5 	stb	r3,-1(r23)
    e94c:	d8c01e17 	ldw	r3,120(sp)
    e950:	b8bfffc4 	addi	r2,r23,-1
    e954:	102f883a 	mov	r23,r2
    e958:	18a9c83a 	sub	r20,r3,r2
    e95c:	003d1106 	br	dda4 <__alt_data_end+0xfffedda4>
    e960:	d9402017 	ldw	r5,128(sp)
    e964:	d9002117 	ldw	r4,132(sp)
    e968:	d9801a04 	addi	r6,sp,104
    e96c:	d8c02a15 	stw	r3,168(sp)
    e970:	d9c02b15 	stw	r7,172(sp)
    e974:	000d8840 	call	d884 <__sprint_r.part.0>
    e978:	d8c02a17 	ldw	r3,168(sp)
    e97c:	d9c02b17 	ldw	r7,172(sp)
    e980:	103f3d1e 	bne	r2,zero,e678 <__alt_data_end+0xfffee678>
    e984:	d9001b17 	ldw	r4,108(sp)
    e988:	d8801c17 	ldw	r2,112(sp)
    e98c:	d811883a 	mov	r8,sp
    e990:	21400044 	addi	r5,r4,1
    e994:	003d4406 	br	dea8 <__alt_data_end+0xfffedea8>
    e998:	d9402017 	ldw	r5,128(sp)
    e99c:	d9002117 	ldw	r4,132(sp)
    e9a0:	d9801a04 	addi	r6,sp,104
    e9a4:	d8c02a15 	stw	r3,168(sp)
    e9a8:	000d8840 	call	d884 <__sprint_r.part.0>
    e9ac:	d8c02a17 	ldw	r3,168(sp)
    e9b0:	103f311e 	bne	r2,zero,e678 <__alt_data_end+0xfffee678>
    e9b4:	d9001b17 	ldw	r4,108(sp)
    e9b8:	d8801c17 	ldw	r2,112(sp)
    e9bc:	d811883a 	mov	r8,sp
    e9c0:	21400044 	addi	r5,r4,1
    e9c4:	003ef406 	br	e598 <__alt_data_end+0xfffee598>
    e9c8:	1000bd1e 	bne	r2,zero,ecc0 <___vfiprintf_internal_r+0x1328>
    e9cc:	01400044 	movi	r5,1
    e9d0:	0009883a 	mov	r4,zero
    e9d4:	d811883a 	mov	r8,sp
    e9d8:	003ef106 	br	e5a0 <__alt_data_end+0xfffee5a0>
    e9dc:	d9402017 	ldw	r5,128(sp)
    e9e0:	d9002117 	ldw	r4,132(sp)
    e9e4:	d9801a04 	addi	r6,sp,104
    e9e8:	000d8840 	call	d884 <__sprint_r.part.0>
    e9ec:	103f221e 	bne	r2,zero,e678 <__alt_data_end+0xfffee678>
    e9f0:	d9401b17 	ldw	r5,108(sp)
    e9f4:	d8801c17 	ldw	r2,112(sp)
    e9f8:	d811883a 	mov	r8,sp
    e9fc:	29400044 	addi	r5,r5,1
    ea00:	003d6206 	br	df8c <__alt_data_end+0xfffedf8c>
    ea04:	01400074 	movhi	r5,1
    ea08:	294c4904 	addi	r5,r5,12580
    ea0c:	d9402615 	stw	r5,152(sp)
    ea10:	d8c02215 	stw	r3,136(sp)
    ea14:	1023883a 	mov	r17,r2
    ea18:	9d04b03a 	or	r2,r19,r20
    ea1c:	103fa51e 	bne	r2,zero,e8b4 <__alt_data_end+0xfffee8b4>
    ea20:	002b883a 	mov	r21,zero
    ea24:	00800084 	movi	r2,2
    ea28:	003e4a06 	br	e354 <__alt_data_end+0xfffee354>
    ea2c:	01400074 	movhi	r5,1
    ea30:	294c4904 	addi	r5,r5,12580
    ea34:	002b883a 	mov	r21,zero
    ea38:	d9402615 	stw	r5,152(sp)
    ea3c:	003f9e06 	br	e8b8 <__alt_data_end+0xfffee8b8>
    ea40:	d9402217 	ldw	r5,136(sp)
    ea44:	d8001d85 	stb	zero,118(sp)
    ea48:	0029883a 	mov	r20,zero
    ea4c:	28800104 	addi	r2,r5,4
    ea50:	2cc00017 	ldw	r19,0(r5)
    ea54:	803e3a16 	blt	r16,zero,e340 <__alt_data_end+0xfffee340>
    ea58:	00ffdfc4 	movi	r3,-129
    ea5c:	d8802215 	stw	r2,136(sp)
    ea60:	88e2703a 	and	r17,r17,r3
    ea64:	002b883a 	mov	r21,zero
    ea68:	983e9b26 	beq	r19,zero,e4d8 <__alt_data_end+0xfffee4d8>
    ea6c:	00800244 	movi	r2,9
    ea70:	14fdc936 	bltu	r2,r19,e198 <__alt_data_end+0xfffee198>
    ea74:	003e9a06 	br	e4e0 <__alt_data_end+0xfffee4e0>
    ea78:	00800c04 	movi	r2,48
    ea7c:	d8c01d45 	stb	r3,117(sp)
    ea80:	d8801d05 	stb	r2,116(sp)
    ea84:	d8001d85 	stb	zero,118(sp)
    ea88:	88c00094 	ori	r3,r17,2
    ea8c:	80009c16 	blt	r16,zero,ed00 <___vfiprintf_internal_r+0x1368>
    ea90:	00bfdfc4 	movi	r2,-129
    ea94:	88a2703a 	and	r17,r17,r2
    ea98:	8c400094 	ori	r17,r17,2
    ea9c:	002b883a 	mov	r21,zero
    eaa0:	003f8506 	br	e8b8 <__alt_data_end+0xfffee8b8>
    eaa4:	b029883a 	mov	r20,r22
    eaa8:	003c0b06 	br	dad8 <__alt_data_end+0xfffedad8>
    eaac:	04e7c83a 	sub	r19,zero,r19
    eab0:	05400b44 	movi	r21,45
    eab4:	9804c03a 	cmpne	r2,r19,zero
    eab8:	0529c83a 	sub	r20,zero,r20
    eabc:	dd401d85 	stb	r21,118(sp)
    eac0:	a0a9c83a 	sub	r20,r20,r2
    eac4:	80009716 	blt	r16,zero,ed24 <___vfiprintf_internal_r+0x138c>
    eac8:	00bfdfc4 	movi	r2,-129
    eacc:	88a2703a 	and	r17,r17,r2
    ead0:	003db006 	br	e194 <__alt_data_end+0xfffee194>
    ead4:	b0c00007 	ldb	r3,0(r22)
    ead8:	003c0c06 	br	db0c <__alt_data_end+0xfffedb0c>
    eadc:	8880100c 	andi	r2,r17,64
    eae0:	d8001d85 	stb	zero,118(sp)
    eae4:	1000461e 	bne	r2,zero,ec00 <___vfiprintf_internal_r+0x1268>
    eae8:	d9002217 	ldw	r4,136(sp)
    eaec:	0029883a 	mov	r20,zero
    eaf0:	20800104 	addi	r2,r4,4
    eaf4:	24c00017 	ldw	r19,0(r4)
    eaf8:	803df80e 	bge	r16,zero,e2dc <__alt_data_end+0xfffee2dc>
    eafc:	9d06b03a 	or	r3,r19,r20
    eb00:	d8802215 	stw	r2,136(sp)
    eb04:	183d5e1e 	bne	r3,zero,e080 <__alt_data_end+0xfffee080>
    eb08:	002b883a 	mov	r21,zero
    eb0c:	0005883a 	mov	r2,zero
    eb10:	003e1006 	br	e354 <__alt_data_end+0xfffee354>
    eb14:	8880040c 	andi	r2,r17,16
    eb18:	1000321e 	bne	r2,zero,ebe4 <___vfiprintf_internal_r+0x124c>
    eb1c:	8c40100c 	andi	r17,r17,64
    eb20:	88008d26 	beq	r17,zero,ed58 <___vfiprintf_internal_r+0x13c0>
    eb24:	d9402217 	ldw	r5,136(sp)
    eb28:	d8c02417 	ldw	r3,144(sp)
    eb2c:	28800017 	ldw	r2,0(r5)
    eb30:	29400104 	addi	r5,r5,4
    eb34:	d9402215 	stw	r5,136(sp)
    eb38:	10c0000d 	sth	r3,0(r2)
    eb3c:	003bca06 	br	da68 <__alt_data_end+0xfffeda68>
    eb40:	8880100c 	andi	r2,r17,64
    eb44:	10003a26 	beq	r2,zero,ec30 <___vfiprintf_internal_r+0x1298>
    eb48:	d8802217 	ldw	r2,136(sp)
    eb4c:	14c0000f 	ldh	r19,0(r2)
    eb50:	10800104 	addi	r2,r2,4
    eb54:	d8802215 	stw	r2,136(sp)
    eb58:	9829d7fa 	srai	r20,r19,31
    eb5c:	a005883a 	mov	r2,r20
    eb60:	003d8506 	br	e178 <__alt_data_end+0xfffee178>
    eb64:	8880100c 	andi	r2,r17,64
    eb68:	10002b26 	beq	r2,zero,ec18 <___vfiprintf_internal_r+0x1280>
    eb6c:	d8802217 	ldw	r2,136(sp)
    eb70:	0029883a 	mov	r20,zero
    eb74:	14c0000b 	ldhu	r19,0(r2)
    eb78:	10800104 	addi	r2,r2,4
    eb7c:	d8802215 	stw	r2,136(sp)
    eb80:	003d5d06 	br	e0f8 <__alt_data_end+0xfffee0f8>
    eb84:	d9402017 	ldw	r5,128(sp)
    eb88:	d9002117 	ldw	r4,132(sp)
    eb8c:	d9801a04 	addi	r6,sp,104
    eb90:	d8c02a15 	stw	r3,168(sp)
    eb94:	d9c02b15 	stw	r7,172(sp)
    eb98:	000d8840 	call	d884 <__sprint_r.part.0>
    eb9c:	d8c02a17 	ldw	r3,168(sp)
    eba0:	d9c02b17 	ldw	r7,172(sp)
    eba4:	103eb41e 	bne	r2,zero,e678 <__alt_data_end+0xfffee678>
    eba8:	d9001b17 	ldw	r4,108(sp)
    ebac:	d8801c17 	ldw	r2,112(sp)
    ebb0:	d811883a 	mov	r8,sp
    ebb4:	21400044 	addi	r5,r4,1
    ebb8:	003e6706 	br	e558 <__alt_data_end+0xfffee558>
    ebbc:	00bfffc4 	movi	r2,-1
    ebc0:	003c4a06 	br	dcec <__alt_data_end+0xfffedcec>
    ebc4:	9805883a 	mov	r2,r19
    ebc8:	003ee806 	br	e76c <__alt_data_end+0xfffee76c>
    ebcc:	d8c02217 	ldw	r3,136(sp)
    ebd0:	0029883a 	mov	r20,zero
    ebd4:	18800104 	addi	r2,r3,4
    ebd8:	1cc0000b 	ldhu	r19,0(r3)
    ebdc:	803f9e0e 	bge	r16,zero,ea58 <__alt_data_end+0xfffeea58>
    ebe0:	003dd706 	br	e340 <__alt_data_end+0xfffee340>
    ebe4:	d8c02217 	ldw	r3,136(sp)
    ebe8:	d9002417 	ldw	r4,144(sp)
    ebec:	18800017 	ldw	r2,0(r3)
    ebf0:	18c00104 	addi	r3,r3,4
    ebf4:	d8c02215 	stw	r3,136(sp)
    ebf8:	11000015 	stw	r4,0(r2)
    ebfc:	003b9a06 	br	da68 <__alt_data_end+0xfffeda68>
    ec00:	d8c02217 	ldw	r3,136(sp)
    ec04:	0029883a 	mov	r20,zero
    ec08:	18800104 	addi	r2,r3,4
    ec0c:	1cc0000b 	ldhu	r19,0(r3)
    ec10:	803db20e 	bge	r16,zero,e2dc <__alt_data_end+0xfffee2dc>
    ec14:	003fb906 	br	eafc <__alt_data_end+0xfffeeafc>
    ec18:	d9002217 	ldw	r4,136(sp)
    ec1c:	0029883a 	mov	r20,zero
    ec20:	24c00017 	ldw	r19,0(r4)
    ec24:	21000104 	addi	r4,r4,4
    ec28:	d9002215 	stw	r4,136(sp)
    ec2c:	003d3206 	br	e0f8 <__alt_data_end+0xfffee0f8>
    ec30:	d8c02217 	ldw	r3,136(sp)
    ec34:	1cc00017 	ldw	r19,0(r3)
    ec38:	18c00104 	addi	r3,r3,4
    ec3c:	d8c02215 	stw	r3,136(sp)
    ec40:	9829d7fa 	srai	r20,r19,31
    ec44:	a005883a 	mov	r2,r20
    ec48:	003d4b06 	br	e178 <__alt_data_end+0xfffee178>
    ec4c:	0009883a 	mov	r4,zero
    ec50:	01400044 	movi	r5,1
    ec54:	d811883a 	mov	r8,sp
    ec58:	003e4f06 	br	e598 <__alt_data_end+0xfffee598>
    ec5c:	d8c02215 	stw	r3,136(sp)
    ec60:	002b883a 	mov	r21,zero
    ec64:	003db806 	br	e348 <__alt_data_end+0xfffee348>
    ec68:	d811883a 	mov	r8,sp
    ec6c:	003e9606 	br	e6c8 <__alt_data_end+0xfffee6c8>
    ec70:	01000074 	movhi	r4,1
    ec74:	210ca904 	addi	r4,r4,12964
    ec78:	d9002315 	stw	r4,140(sp)
    ec7c:	003e6306 	br	e60c <__alt_data_end+0xfffee60c>
    ec80:	b0c00043 	ldbu	r3,1(r22)
    ec84:	8c400814 	ori	r17,r17,32
    ec88:	b5800044 	addi	r22,r22,1
    ec8c:	18c03fcc 	andi	r3,r3,255
    ec90:	18c0201c 	xori	r3,r3,128
    ec94:	18ffe004 	addi	r3,r3,-128
    ec98:	003b9c06 	br	db0c <__alt_data_end+0xfffedb0c>
    ec9c:	b809883a 	mov	r4,r23
    eca0:	da002a15 	stw	r8,168(sp)
    eca4:	00074dc0 	call	74dc <strlen>
    eca8:	1029883a 	mov	r20,r2
    ecac:	dd401d83 	ldbu	r21,118(sp)
    ecb0:	df002215 	stw	fp,136(sp)
    ecb4:	0021883a 	mov	r16,zero
    ecb8:	da002a17 	ldw	r8,168(sp)
    ecbc:	003c3906 	br	dda4 <__alt_data_end+0xfffedda4>
    ecc0:	d9402017 	ldw	r5,128(sp)
    ecc4:	d9002117 	ldw	r4,132(sp)
    ecc8:	d9801a04 	addi	r6,sp,104
    eccc:	000d8840 	call	d884 <__sprint_r.part.0>
    ecd0:	103e691e 	bne	r2,zero,e678 <__alt_data_end+0xfffee678>
    ecd4:	d9001b17 	ldw	r4,108(sp)
    ecd8:	d8801c17 	ldw	r2,112(sp)
    ecdc:	d811883a 	mov	r8,sp
    ece0:	21400044 	addi	r5,r4,1
    ece4:	003e2e06 	br	e5a0 <__alt_data_end+0xfffee5a0>
    ece8:	01000074 	movhi	r4,1
    ecec:	210cad04 	addi	r4,r4,12980
    ecf0:	d9002315 	stw	r4,140(sp)
    ecf4:	d9001b17 	ldw	r4,108(sp)
    ecf8:	21000044 	addi	r4,r4,1
    ecfc:	003c5e06 	br	de78 <__alt_data_end+0xfffede78>
    ed00:	002b883a 	mov	r21,zero
    ed04:	00800084 	movi	r2,2
    ed08:	10803fcc 	andi	r2,r2,255
    ed0c:	01000044 	movi	r4,1
    ed10:	11002b26 	beq	r2,r4,edc0 <___vfiprintf_internal_r+0x1428>
    ed14:	01000084 	movi	r4,2
    ed18:	11002b1e 	bne	r2,r4,edc8 <___vfiprintf_internal_r+0x1430>
    ed1c:	1823883a 	mov	r17,r3
    ed20:	003ee506 	br	e8b8 <__alt_data_end+0xfffee8b8>
    ed24:	8807883a 	mov	r3,r17
    ed28:	00800044 	movi	r2,1
    ed2c:	003ff606 	br	ed08 <__alt_data_end+0xfffeed08>
    ed30:	00800184 	movi	r2,6
    ed34:	1400012e 	bgeu	r2,r16,ed3c <___vfiprintf_internal_r+0x13a4>
    ed38:	1021883a 	mov	r16,r2
    ed3c:	8029883a 	mov	r20,r16
    ed40:	8027883a 	mov	r19,r16
    ed44:	80002216 	blt	r16,zero,edd0 <___vfiprintf_internal_r+0x1438>
    ed48:	05c00074 	movhi	r23,1
    ed4c:	df002215 	stw	fp,136(sp)
    ed50:	bdcc4e04 	addi	r23,r23,12600
    ed54:	003cfb06 	br	e144 <__alt_data_end+0xfffee144>
    ed58:	d9002217 	ldw	r4,136(sp)
    ed5c:	d9402417 	ldw	r5,144(sp)
    ed60:	20800017 	ldw	r2,0(r4)
    ed64:	21000104 	addi	r4,r4,4
    ed68:	d9002215 	stw	r4,136(sp)
    ed6c:	11400015 	stw	r5,0(r2)
    ed70:	003b3d06 	br	da68 <__alt_data_end+0xfffeda68>
    ed74:	01400074 	movhi	r5,1
    ed78:	294cad04 	addi	r5,r5,12980
    ed7c:	d9402315 	stw	r5,140(sp)
    ed80:	d9401b17 	ldw	r5,108(sp)
    ed84:	29400044 	addi	r5,r5,1
    ed88:	003e6d06 	br	e740 <__alt_data_end+0xfffee740>
    ed8c:	8029883a 	mov	r20,r16
    ed90:	dd401d83 	ldbu	r21,118(sp)
    ed94:	df002215 	stw	fp,136(sp)
    ed98:	0021883a 	mov	r16,zero
    ed9c:	003c0106 	br	dda4 <__alt_data_end+0xfffedda4>
    eda0:	00c00074 	movhi	r3,1
    eda4:	18cca904 	addi	r3,r3,12964
    eda8:	d8c02315 	stw	r3,140(sp)
    edac:	280d883a 	mov	r6,r5
    edb0:	003c6906 	br	df58 <__alt_data_end+0xfffedf58>
    edb4:	802d883a 	mov	r22,r16
    edb8:	0021883a 	mov	r16,zero
    edbc:	003b5406 	br	db10 <__alt_data_end+0xfffedb10>
    edc0:	1823883a 	mov	r17,r3
    edc4:	003cf306 	br	e194 <__alt_data_end+0xfffee194>
    edc8:	1823883a 	mov	r17,r3
    edcc:	003cad06 	br	e084 <__alt_data_end+0xfffee084>
    edd0:	0027883a 	mov	r19,zero
    edd4:	003fdc06 	br	ed48 <__alt_data_end+0xfffeed48>
    edd8:	d9402217 	ldw	r5,136(sp)
    eddc:	8005883a 	mov	r2,r16
    ede0:	b0c00043 	ldbu	r3,1(r22)
    ede4:	2c000017 	ldw	r16,0(r5)
    ede8:	29000104 	addi	r4,r5,4
    edec:	d9002215 	stw	r4,136(sp)
    edf0:	102d883a 	mov	r22,r2
    edf4:	803fa50e 	bge	r16,zero,ec8c <__alt_data_end+0xfffeec8c>
    edf8:	18c03fcc 	andi	r3,r3,255
    edfc:	18c0201c 	xori	r3,r3,128
    ee00:	043fffc4 	movi	r16,-1
    ee04:	18ffe004 	addi	r3,r3,-128
    ee08:	003b4006 	br	db0c <__alt_data_end+0xfffedb0c>
    ee0c:	d9402303 	ldbu	r5,140(sp)
    ee10:	d9401d85 	stb	r5,118(sp)
    ee14:	003cae06 	br	e0d0 <__alt_data_end+0xfffee0d0>
    ee18:	d8c02303 	ldbu	r3,140(sp)
    ee1c:	d8c01d85 	stb	r3,118(sp)
    ee20:	003d1406 	br	e274 <__alt_data_end+0xfffee274>
    ee24:	d8c02303 	ldbu	r3,140(sp)
    ee28:	d8c01d85 	stb	r3,118(sp)
    ee2c:	003cca06 	br	e158 <__alt_data_end+0xfffee158>
    ee30:	8880004c 	andi	r2,r17,1
    ee34:	002b883a 	mov	r21,zero
    ee38:	10000526 	beq	r2,zero,ee50 <___vfiprintf_internal_r+0x14b8>
    ee3c:	00800c04 	movi	r2,48
    ee40:	d88019c5 	stb	r2,103(sp)
    ee44:	dd002817 	ldw	r20,160(sp)
    ee48:	ddc019c4 	addi	r23,sp,103
    ee4c:	003bd506 	br	dda4 <__alt_data_end+0xfffedda4>
    ee50:	0029883a 	mov	r20,zero
    ee54:	ddc01a04 	addi	r23,sp,104
    ee58:	003bd206 	br	dda4 <__alt_data_end+0xfffedda4>
    ee5c:	d9002303 	ldbu	r4,140(sp)
    ee60:	d9001d85 	stb	r4,118(sp)
    ee64:	003da606 	br	e500 <__alt_data_end+0xfffee500>
    ee68:	d8c02303 	ldbu	r3,140(sp)
    ee6c:	d8c01d85 	stb	r3,118(sp)
    ee70:	003c7606 	br	e04c <__alt_data_end+0xfffee04c>
    ee74:	d8c02303 	ldbu	r3,140(sp)
    ee78:	d8c01d85 	stb	r3,118(sp)
    ee7c:	003c6506 	br	e014 <__alt_data_end+0xfffee014>
    ee80:	d9002303 	ldbu	r4,140(sp)
    ee84:	d9001d85 	stb	r4,118(sp)
    ee88:	003d3d06 	br	e380 <__alt_data_end+0xfffee380>
    ee8c:	d8c02303 	ldbu	r3,140(sp)
    ee90:	d8c01d85 	stb	r3,118(sp)
    ee94:	003d1d06 	br	e30c <__alt_data_end+0xfffee30c>
    ee98:	d8c02303 	ldbu	r3,140(sp)
    ee9c:	d8c01d85 	stb	r3,118(sp)
    eea0:	003d0306 	br	e2b0 <__alt_data_end+0xfffee2b0>

0000eea4 <__vfiprintf_internal>:
    eea4:	00800074 	movhi	r2,1
    eea8:	10936d04 	addi	r2,r2,19892
    eeac:	300f883a 	mov	r7,r6
    eeb0:	280d883a 	mov	r6,r5
    eeb4:	200b883a 	mov	r5,r4
    eeb8:	11000017 	ldw	r4,0(r2)
    eebc:	000d9981 	jmpi	d998 <___vfiprintf_internal_r>

0000eec0 <__sbprintf>:
    eec0:	2880030b 	ldhu	r2,12(r5)
    eec4:	2ac01917 	ldw	r11,100(r5)
    eec8:	2a80038b 	ldhu	r10,14(r5)
    eecc:	2a400717 	ldw	r9,28(r5)
    eed0:	2a000917 	ldw	r8,36(r5)
    eed4:	defee204 	addi	sp,sp,-1144
    eed8:	00c10004 	movi	r3,1024
    eedc:	dc011a15 	stw	r16,1128(sp)
    eee0:	10bfff4c 	andi	r2,r2,65533
    eee4:	2821883a 	mov	r16,r5
    eee8:	d8cb883a 	add	r5,sp,r3
    eeec:	dc811c15 	stw	r18,1136(sp)
    eef0:	dc411b15 	stw	r17,1132(sp)
    eef4:	dfc11d15 	stw	ra,1140(sp)
    eef8:	2025883a 	mov	r18,r4
    eefc:	d881030d 	sth	r2,1036(sp)
    ef00:	dac11915 	stw	r11,1124(sp)
    ef04:	da81038d 	sth	r10,1038(sp)
    ef08:	da410715 	stw	r9,1052(sp)
    ef0c:	da010915 	stw	r8,1060(sp)
    ef10:	dec10015 	stw	sp,1024(sp)
    ef14:	dec10415 	stw	sp,1040(sp)
    ef18:	d8c10215 	stw	r3,1032(sp)
    ef1c:	d8c10515 	stw	r3,1044(sp)
    ef20:	d8010615 	stw	zero,1048(sp)
    ef24:	000d9980 	call	d998 <___vfiprintf_internal_r>
    ef28:	1023883a 	mov	r17,r2
    ef2c:	10000416 	blt	r2,zero,ef40 <__sbprintf+0x80>
    ef30:	d9410004 	addi	r5,sp,1024
    ef34:	9009883a 	mov	r4,r18
    ef38:	0004f840 	call	4f84 <_fflush_r>
    ef3c:	10000d1e 	bne	r2,zero,ef74 <__sbprintf+0xb4>
    ef40:	d881030b 	ldhu	r2,1036(sp)
    ef44:	1080100c 	andi	r2,r2,64
    ef48:	10000326 	beq	r2,zero,ef58 <__sbprintf+0x98>
    ef4c:	8080030b 	ldhu	r2,12(r16)
    ef50:	10801014 	ori	r2,r2,64
    ef54:	8080030d 	sth	r2,12(r16)
    ef58:	8805883a 	mov	r2,r17
    ef5c:	dfc11d17 	ldw	ra,1140(sp)
    ef60:	dc811c17 	ldw	r18,1136(sp)
    ef64:	dc411b17 	ldw	r17,1132(sp)
    ef68:	dc011a17 	ldw	r16,1128(sp)
    ef6c:	dec11e04 	addi	sp,sp,1144
    ef70:	f800283a 	ret
    ef74:	047fffc4 	movi	r17,-1
    ef78:	003ff106 	br	ef40 <__alt_data_end+0xfffeef40>

0000ef7c <__swbuf_r>:
    ef7c:	defffb04 	addi	sp,sp,-20
    ef80:	dcc00315 	stw	r19,12(sp)
    ef84:	dc800215 	stw	r18,8(sp)
    ef88:	dc000015 	stw	r16,0(sp)
    ef8c:	dfc00415 	stw	ra,16(sp)
    ef90:	dc400115 	stw	r17,4(sp)
    ef94:	2025883a 	mov	r18,r4
    ef98:	2827883a 	mov	r19,r5
    ef9c:	3021883a 	mov	r16,r6
    efa0:	20000226 	beq	r4,zero,efac <__swbuf_r+0x30>
    efa4:	20800e17 	ldw	r2,56(r4)
    efa8:	10004226 	beq	r2,zero,f0b4 <__swbuf_r+0x138>
    efac:	80800617 	ldw	r2,24(r16)
    efb0:	8100030b 	ldhu	r4,12(r16)
    efb4:	80800215 	stw	r2,8(r16)
    efb8:	2080020c 	andi	r2,r4,8
    efbc:	10003626 	beq	r2,zero,f098 <__swbuf_r+0x11c>
    efc0:	80c00417 	ldw	r3,16(r16)
    efc4:	18003426 	beq	r3,zero,f098 <__swbuf_r+0x11c>
    efc8:	2088000c 	andi	r2,r4,8192
    efcc:	9c403fcc 	andi	r17,r19,255
    efd0:	10001a26 	beq	r2,zero,f03c <__swbuf_r+0xc0>
    efd4:	80800017 	ldw	r2,0(r16)
    efd8:	81000517 	ldw	r4,20(r16)
    efdc:	10c7c83a 	sub	r3,r2,r3
    efe0:	1900200e 	bge	r3,r4,f064 <__swbuf_r+0xe8>
    efe4:	18c00044 	addi	r3,r3,1
    efe8:	81000217 	ldw	r4,8(r16)
    efec:	11400044 	addi	r5,r2,1
    eff0:	81400015 	stw	r5,0(r16)
    eff4:	213fffc4 	addi	r4,r4,-1
    eff8:	81000215 	stw	r4,8(r16)
    effc:	14c00005 	stb	r19,0(r2)
    f000:	80800517 	ldw	r2,20(r16)
    f004:	10c01e26 	beq	r2,r3,f080 <__swbuf_r+0x104>
    f008:	8080030b 	ldhu	r2,12(r16)
    f00c:	1080004c 	andi	r2,r2,1
    f010:	10000226 	beq	r2,zero,f01c <__swbuf_r+0xa0>
    f014:	00800284 	movi	r2,10
    f018:	88801926 	beq	r17,r2,f080 <__swbuf_r+0x104>
    f01c:	8805883a 	mov	r2,r17
    f020:	dfc00417 	ldw	ra,16(sp)
    f024:	dcc00317 	ldw	r19,12(sp)
    f028:	dc800217 	ldw	r18,8(sp)
    f02c:	dc400117 	ldw	r17,4(sp)
    f030:	dc000017 	ldw	r16,0(sp)
    f034:	dec00504 	addi	sp,sp,20
    f038:	f800283a 	ret
    f03c:	81401917 	ldw	r5,100(r16)
    f040:	00b7ffc4 	movi	r2,-8193
    f044:	21080014 	ori	r4,r4,8192
    f048:	2884703a 	and	r2,r5,r2
    f04c:	80801915 	stw	r2,100(r16)
    f050:	80800017 	ldw	r2,0(r16)
    f054:	8100030d 	sth	r4,12(r16)
    f058:	81000517 	ldw	r4,20(r16)
    f05c:	10c7c83a 	sub	r3,r2,r3
    f060:	193fe016 	blt	r3,r4,efe4 <__alt_data_end+0xfffeefe4>
    f064:	800b883a 	mov	r5,r16
    f068:	9009883a 	mov	r4,r18
    f06c:	0004f840 	call	4f84 <_fflush_r>
    f070:	1000071e 	bne	r2,zero,f090 <__swbuf_r+0x114>
    f074:	80800017 	ldw	r2,0(r16)
    f078:	00c00044 	movi	r3,1
    f07c:	003fda06 	br	efe8 <__alt_data_end+0xfffeefe8>
    f080:	800b883a 	mov	r5,r16
    f084:	9009883a 	mov	r4,r18
    f088:	0004f840 	call	4f84 <_fflush_r>
    f08c:	103fe326 	beq	r2,zero,f01c <__alt_data_end+0xfffef01c>
    f090:	00bfffc4 	movi	r2,-1
    f094:	003fe206 	br	f020 <__alt_data_end+0xfffef020>
    f098:	800b883a 	mov	r5,r16
    f09c:	9009883a 	mov	r4,r18
    f0a0:	00099d80 	call	99d8 <__swsetup_r>
    f0a4:	103ffa1e 	bne	r2,zero,f090 <__alt_data_end+0xfffef090>
    f0a8:	8100030b 	ldhu	r4,12(r16)
    f0ac:	80c00417 	ldw	r3,16(r16)
    f0b0:	003fc506 	br	efc8 <__alt_data_end+0xfffeefc8>
    f0b4:	00053700 	call	5370 <__sinit>
    f0b8:	003fbc06 	br	efac <__alt_data_end+0xfffeefac>

0000f0bc <__swbuf>:
    f0bc:	00800074 	movhi	r2,1
    f0c0:	10936d04 	addi	r2,r2,19892
    f0c4:	280d883a 	mov	r6,r5
    f0c8:	200b883a 	mov	r5,r4
    f0cc:	11000017 	ldw	r4,0(r2)
    f0d0:	000ef7c1 	jmpi	ef7c <__swbuf_r>

0000f0d4 <_calloc_r>:
    f0d4:	defffe04 	addi	sp,sp,-8
    f0d8:	2805883a 	mov	r2,r5
    f0dc:	dc000015 	stw	r16,0(sp)
    f0e0:	300b883a 	mov	r5,r6
    f0e4:	2021883a 	mov	r16,r4
    f0e8:	1009883a 	mov	r4,r2
    f0ec:	dfc00115 	stw	ra,4(sp)
    f0f0:	0001a300 	call	1a30 <__mulsi3>
    f0f4:	100b883a 	mov	r5,r2
    f0f8:	8009883a 	mov	r4,r16
    f0fc:	00063900 	call	6390 <_malloc_r>
    f100:	10002926 	beq	r2,zero,f1a8 <_calloc_r+0xd4>
    f104:	11bfff17 	ldw	r6,-4(r2)
    f108:	1021883a 	mov	r16,r2
    f10c:	00bfff04 	movi	r2,-4
    f110:	308c703a 	and	r6,r6,r2
    f114:	00c00904 	movi	r3,36
    f118:	308d883a 	add	r6,r6,r2
    f11c:	19801636 	bltu	r3,r6,f178 <_calloc_r+0xa4>
    f120:	008004c4 	movi	r2,19
    f124:	11800b2e 	bgeu	r2,r6,f154 <_calloc_r+0x80>
    f128:	80000015 	stw	zero,0(r16)
    f12c:	80000115 	stw	zero,4(r16)
    f130:	008006c4 	movi	r2,27
    f134:	11801a2e 	bgeu	r2,r6,f1a0 <_calloc_r+0xcc>
    f138:	80000215 	stw	zero,8(r16)
    f13c:	80000315 	stw	zero,12(r16)
    f140:	30c0151e 	bne	r6,r3,f198 <_calloc_r+0xc4>
    f144:	80000415 	stw	zero,16(r16)
    f148:	80800604 	addi	r2,r16,24
    f14c:	80000515 	stw	zero,20(r16)
    f150:	00000106 	br	f158 <_calloc_r+0x84>
    f154:	8005883a 	mov	r2,r16
    f158:	10000015 	stw	zero,0(r2)
    f15c:	10000115 	stw	zero,4(r2)
    f160:	10000215 	stw	zero,8(r2)
    f164:	8005883a 	mov	r2,r16
    f168:	dfc00117 	ldw	ra,4(sp)
    f16c:	dc000017 	ldw	r16,0(sp)
    f170:	dec00204 	addi	sp,sp,8
    f174:	f800283a 	ret
    f178:	000b883a 	mov	r5,zero
    f17c:	8009883a 	mov	r4,r16
    f180:	0006ce40 	call	6ce4 <memset>
    f184:	8005883a 	mov	r2,r16
    f188:	dfc00117 	ldw	ra,4(sp)
    f18c:	dc000017 	ldw	r16,0(sp)
    f190:	dec00204 	addi	sp,sp,8
    f194:	f800283a 	ret
    f198:	80800404 	addi	r2,r16,16
    f19c:	003fee06 	br	f158 <__alt_data_end+0xfffef158>
    f1a0:	80800204 	addi	r2,r16,8
    f1a4:	003fec06 	br	f158 <__alt_data_end+0xfffef158>
    f1a8:	0005883a 	mov	r2,zero
    f1ac:	003fee06 	br	f168 <__alt_data_end+0xfffef168>

0000f1b0 <__fputwc>:
    f1b0:	defff804 	addi	sp,sp,-32
    f1b4:	dcc00415 	stw	r19,16(sp)
    f1b8:	dc800315 	stw	r18,12(sp)
    f1bc:	dc000115 	stw	r16,4(sp)
    f1c0:	dfc00715 	stw	ra,28(sp)
    f1c4:	dd400615 	stw	r21,24(sp)
    f1c8:	dd000515 	stw	r20,20(sp)
    f1cc:	dc400215 	stw	r17,8(sp)
    f1d0:	2027883a 	mov	r19,r4
    f1d4:	2825883a 	mov	r18,r5
    f1d8:	3021883a 	mov	r16,r6
    f1dc:	000bc5c0 	call	bc5c <__locale_mb_cur_max>
    f1e0:	00c00044 	movi	r3,1
    f1e4:	10c03e26 	beq	r2,r3,f2e0 <__fputwc+0x130>
    f1e8:	81c01704 	addi	r7,r16,92
    f1ec:	900d883a 	mov	r6,r18
    f1f0:	d80b883a 	mov	r5,sp
    f1f4:	9809883a 	mov	r4,r19
    f1f8:	000f3b80 	call	f3b8 <_wcrtomb_r>
    f1fc:	1029883a 	mov	r20,r2
    f200:	00bfffc4 	movi	r2,-1
    f204:	a0802026 	beq	r20,r2,f288 <__fputwc+0xd8>
    f208:	d9400003 	ldbu	r5,0(sp)
    f20c:	a0001c26 	beq	r20,zero,f280 <__fputwc+0xd0>
    f210:	0023883a 	mov	r17,zero
    f214:	05400284 	movi	r21,10
    f218:	00000906 	br	f240 <__fputwc+0x90>
    f21c:	80800017 	ldw	r2,0(r16)
    f220:	11400005 	stb	r5,0(r2)
    f224:	80c00017 	ldw	r3,0(r16)
    f228:	18c00044 	addi	r3,r3,1
    f22c:	80c00015 	stw	r3,0(r16)
    f230:	8c400044 	addi	r17,r17,1
    f234:	dc45883a 	add	r2,sp,r17
    f238:	8d00112e 	bgeu	r17,r20,f280 <__fputwc+0xd0>
    f23c:	11400003 	ldbu	r5,0(r2)
    f240:	80c00217 	ldw	r3,8(r16)
    f244:	18ffffc4 	addi	r3,r3,-1
    f248:	80c00215 	stw	r3,8(r16)
    f24c:	183ff30e 	bge	r3,zero,f21c <__alt_data_end+0xfffef21c>
    f250:	80800617 	ldw	r2,24(r16)
    f254:	18801916 	blt	r3,r2,f2bc <__fputwc+0x10c>
    f258:	80800017 	ldw	r2,0(r16)
    f25c:	11400005 	stb	r5,0(r2)
    f260:	80800017 	ldw	r2,0(r16)
    f264:	10c00003 	ldbu	r3,0(r2)
    f268:	10800044 	addi	r2,r2,1
    f26c:	1d402326 	beq	r3,r21,f2fc <__fputwc+0x14c>
    f270:	80800015 	stw	r2,0(r16)
    f274:	8c400044 	addi	r17,r17,1
    f278:	dc45883a 	add	r2,sp,r17
    f27c:	8d3fef36 	bltu	r17,r20,f23c <__alt_data_end+0xfffef23c>
    f280:	9005883a 	mov	r2,r18
    f284:	00000406 	br	f298 <__fputwc+0xe8>
    f288:	80c0030b 	ldhu	r3,12(r16)
    f28c:	a005883a 	mov	r2,r20
    f290:	18c01014 	ori	r3,r3,64
    f294:	80c0030d 	sth	r3,12(r16)
    f298:	dfc00717 	ldw	ra,28(sp)
    f29c:	dd400617 	ldw	r21,24(sp)
    f2a0:	dd000517 	ldw	r20,20(sp)
    f2a4:	dcc00417 	ldw	r19,16(sp)
    f2a8:	dc800317 	ldw	r18,12(sp)
    f2ac:	dc400217 	ldw	r17,8(sp)
    f2b0:	dc000117 	ldw	r16,4(sp)
    f2b4:	dec00804 	addi	sp,sp,32
    f2b8:	f800283a 	ret
    f2bc:	800d883a 	mov	r6,r16
    f2c0:	29403fcc 	andi	r5,r5,255
    f2c4:	9809883a 	mov	r4,r19
    f2c8:	000ef7c0 	call	ef7c <__swbuf_r>
    f2cc:	10bfffe0 	cmpeqi	r2,r2,-1
    f2d0:	10803fcc 	andi	r2,r2,255
    f2d4:	103fd626 	beq	r2,zero,f230 <__alt_data_end+0xfffef230>
    f2d8:	00bfffc4 	movi	r2,-1
    f2dc:	003fee06 	br	f298 <__alt_data_end+0xfffef298>
    f2e0:	90ffffc4 	addi	r3,r18,-1
    f2e4:	01003f84 	movi	r4,254
    f2e8:	20ffbf36 	bltu	r4,r3,f1e8 <__alt_data_end+0xfffef1e8>
    f2ec:	900b883a 	mov	r5,r18
    f2f0:	dc800005 	stb	r18,0(sp)
    f2f4:	1029883a 	mov	r20,r2
    f2f8:	003fc506 	br	f210 <__alt_data_end+0xfffef210>
    f2fc:	800d883a 	mov	r6,r16
    f300:	a80b883a 	mov	r5,r21
    f304:	9809883a 	mov	r4,r19
    f308:	000ef7c0 	call	ef7c <__swbuf_r>
    f30c:	10bfffe0 	cmpeqi	r2,r2,-1
    f310:	003fef06 	br	f2d0 <__alt_data_end+0xfffef2d0>

0000f314 <_fputwc_r>:
    f314:	3080030b 	ldhu	r2,12(r6)
    f318:	10c8000c 	andi	r3,r2,8192
    f31c:	1800051e 	bne	r3,zero,f334 <_fputwc_r+0x20>
    f320:	30c01917 	ldw	r3,100(r6)
    f324:	10880014 	ori	r2,r2,8192
    f328:	3080030d 	sth	r2,12(r6)
    f32c:	18880014 	ori	r2,r3,8192
    f330:	30801915 	stw	r2,100(r6)
    f334:	000f1b01 	jmpi	f1b0 <__fputwc>

0000f338 <fputwc>:
    f338:	00800074 	movhi	r2,1
    f33c:	defffc04 	addi	sp,sp,-16
    f340:	10936d04 	addi	r2,r2,19892
    f344:	dc000115 	stw	r16,4(sp)
    f348:	14000017 	ldw	r16,0(r2)
    f34c:	dc400215 	stw	r17,8(sp)
    f350:	dfc00315 	stw	ra,12(sp)
    f354:	2023883a 	mov	r17,r4
    f358:	80000226 	beq	r16,zero,f364 <fputwc+0x2c>
    f35c:	80800e17 	ldw	r2,56(r16)
    f360:	10001026 	beq	r2,zero,f3a4 <fputwc+0x6c>
    f364:	2880030b 	ldhu	r2,12(r5)
    f368:	10c8000c 	andi	r3,r2,8192
    f36c:	1800051e 	bne	r3,zero,f384 <fputwc+0x4c>
    f370:	28c01917 	ldw	r3,100(r5)
    f374:	10880014 	ori	r2,r2,8192
    f378:	2880030d 	sth	r2,12(r5)
    f37c:	18880014 	ori	r2,r3,8192
    f380:	28801915 	stw	r2,100(r5)
    f384:	280d883a 	mov	r6,r5
    f388:	8009883a 	mov	r4,r16
    f38c:	880b883a 	mov	r5,r17
    f390:	dfc00317 	ldw	ra,12(sp)
    f394:	dc400217 	ldw	r17,8(sp)
    f398:	dc000117 	ldw	r16,4(sp)
    f39c:	dec00404 	addi	sp,sp,16
    f3a0:	000f1b01 	jmpi	f1b0 <__fputwc>
    f3a4:	8009883a 	mov	r4,r16
    f3a8:	d9400015 	stw	r5,0(sp)
    f3ac:	00053700 	call	5370 <__sinit>
    f3b0:	d9400017 	ldw	r5,0(sp)
    f3b4:	003feb06 	br	f364 <__alt_data_end+0xfffef364>

0000f3b8 <_wcrtomb_r>:
    f3b8:	defff604 	addi	sp,sp,-40
    f3bc:	00800074 	movhi	r2,1
    f3c0:	dc800815 	stw	r18,32(sp)
    f3c4:	dc400715 	stw	r17,28(sp)
    f3c8:	dc000615 	stw	r16,24(sp)
    f3cc:	10937104 	addi	r2,r2,19908
    f3d0:	dfc00915 	stw	ra,36(sp)
    f3d4:	2021883a 	mov	r16,r4
    f3d8:	3823883a 	mov	r17,r7
    f3dc:	14800017 	ldw	r18,0(r2)
    f3e0:	28001426 	beq	r5,zero,f434 <_wcrtomb_r+0x7c>
    f3e4:	d9400415 	stw	r5,16(sp)
    f3e8:	d9800515 	stw	r6,20(sp)
    f3ec:	000bc500 	call	bc50 <__locale_charset>
    f3f0:	d9800517 	ldw	r6,20(sp)
    f3f4:	d9400417 	ldw	r5,16(sp)
    f3f8:	100f883a 	mov	r7,r2
    f3fc:	dc400015 	stw	r17,0(sp)
    f400:	8009883a 	mov	r4,r16
    f404:	903ee83a 	callr	r18
    f408:	00ffffc4 	movi	r3,-1
    f40c:	10c0031e 	bne	r2,r3,f41c <_wcrtomb_r+0x64>
    f410:	88000015 	stw	zero,0(r17)
    f414:	00c02284 	movi	r3,138
    f418:	80c00015 	stw	r3,0(r16)
    f41c:	dfc00917 	ldw	ra,36(sp)
    f420:	dc800817 	ldw	r18,32(sp)
    f424:	dc400717 	ldw	r17,28(sp)
    f428:	dc000617 	ldw	r16,24(sp)
    f42c:	dec00a04 	addi	sp,sp,40
    f430:	f800283a 	ret
    f434:	000bc500 	call	bc50 <__locale_charset>
    f438:	100f883a 	mov	r7,r2
    f43c:	dc400015 	stw	r17,0(sp)
    f440:	000d883a 	mov	r6,zero
    f444:	d9400104 	addi	r5,sp,4
    f448:	8009883a 	mov	r4,r16
    f44c:	903ee83a 	callr	r18
    f450:	003fed06 	br	f408 <__alt_data_end+0xfffef408>

0000f454 <wcrtomb>:
    f454:	defff604 	addi	sp,sp,-40
    f458:	00800074 	movhi	r2,1
    f45c:	dc800615 	stw	r18,24(sp)
    f460:	dc400515 	stw	r17,20(sp)
    f464:	10936d04 	addi	r2,r2,19892
    f468:	dfc00915 	stw	ra,36(sp)
    f46c:	dd000815 	stw	r20,32(sp)
    f470:	dcc00715 	stw	r19,28(sp)
    f474:	dc000415 	stw	r16,16(sp)
    f478:	3025883a 	mov	r18,r6
    f47c:	14400017 	ldw	r17,0(r2)
    f480:	20001926 	beq	r4,zero,f4e8 <wcrtomb+0x94>
    f484:	00800074 	movhi	r2,1
    f488:	10937104 	addi	r2,r2,19908
    f48c:	15000017 	ldw	r20,0(r2)
    f490:	2021883a 	mov	r16,r4
    f494:	2827883a 	mov	r19,r5
    f498:	000bc500 	call	bc50 <__locale_charset>
    f49c:	100f883a 	mov	r7,r2
    f4a0:	dc800015 	stw	r18,0(sp)
    f4a4:	980d883a 	mov	r6,r19
    f4a8:	800b883a 	mov	r5,r16
    f4ac:	8809883a 	mov	r4,r17
    f4b0:	a03ee83a 	callr	r20
    f4b4:	00ffffc4 	movi	r3,-1
    f4b8:	10c0031e 	bne	r2,r3,f4c8 <wcrtomb+0x74>
    f4bc:	90000015 	stw	zero,0(r18)
    f4c0:	00c02284 	movi	r3,138
    f4c4:	88c00015 	stw	r3,0(r17)
    f4c8:	dfc00917 	ldw	ra,36(sp)
    f4cc:	dd000817 	ldw	r20,32(sp)
    f4d0:	dcc00717 	ldw	r19,28(sp)
    f4d4:	dc800617 	ldw	r18,24(sp)
    f4d8:	dc400517 	ldw	r17,20(sp)
    f4dc:	dc000417 	ldw	r16,16(sp)
    f4e0:	dec00a04 	addi	sp,sp,40
    f4e4:	f800283a 	ret
    f4e8:	00800074 	movhi	r2,1
    f4ec:	10937104 	addi	r2,r2,19908
    f4f0:	14000017 	ldw	r16,0(r2)
    f4f4:	000bc500 	call	bc50 <__locale_charset>
    f4f8:	100f883a 	mov	r7,r2
    f4fc:	dc800015 	stw	r18,0(sp)
    f500:	000d883a 	mov	r6,zero
    f504:	d9400104 	addi	r5,sp,4
    f508:	8809883a 	mov	r4,r17
    f50c:	803ee83a 	callr	r16
    f510:	003fe806 	br	f4b4 <__alt_data_end+0xfffef4b4>

0000f514 <__ascii_wctomb>:
    f514:	28000526 	beq	r5,zero,f52c <__ascii_wctomb+0x18>
    f518:	00803fc4 	movi	r2,255
    f51c:	11800536 	bltu	r2,r6,f534 <__ascii_wctomb+0x20>
    f520:	29800005 	stb	r6,0(r5)
    f524:	00800044 	movi	r2,1
    f528:	f800283a 	ret
    f52c:	0005883a 	mov	r2,zero
    f530:	f800283a 	ret
    f534:	00802284 	movi	r2,138
    f538:	20800015 	stw	r2,0(r4)
    f53c:	00bfffc4 	movi	r2,-1
    f540:	f800283a 	ret

0000f544 <_wctomb_r>:
    f544:	00800074 	movhi	r2,1
    f548:	defff904 	addi	sp,sp,-28
    f54c:	10937104 	addi	r2,r2,19908
    f550:	dfc00615 	stw	ra,24(sp)
    f554:	dc400515 	stw	r17,20(sp)
    f558:	dc000415 	stw	r16,16(sp)
    f55c:	3823883a 	mov	r17,r7
    f560:	14000017 	ldw	r16,0(r2)
    f564:	d9000115 	stw	r4,4(sp)
    f568:	d9400215 	stw	r5,8(sp)
    f56c:	d9800315 	stw	r6,12(sp)
    f570:	000bc500 	call	bc50 <__locale_charset>
    f574:	d9800317 	ldw	r6,12(sp)
    f578:	d9400217 	ldw	r5,8(sp)
    f57c:	d9000117 	ldw	r4,4(sp)
    f580:	100f883a 	mov	r7,r2
    f584:	dc400015 	stw	r17,0(sp)
    f588:	803ee83a 	callr	r16
    f58c:	dfc00617 	ldw	ra,24(sp)
    f590:	dc400517 	ldw	r17,20(sp)
    f594:	dc000417 	ldw	r16,16(sp)
    f598:	dec00704 	addi	sp,sp,28
    f59c:	f800283a 	ret

0000f5a0 <__muldi3>:
    f5a0:	defff604 	addi	sp,sp,-40
    f5a4:	dd800615 	stw	r22,24(sp)
    f5a8:	dd400515 	stw	r21,20(sp)
    f5ac:	dc400115 	stw	r17,4(sp)
    f5b0:	357fffcc 	andi	r21,r6,65535
    f5b4:	2022d43a 	srli	r17,r4,16
    f5b8:	25bfffcc 	andi	r22,r4,65535
    f5bc:	dcc00315 	stw	r19,12(sp)
    f5c0:	dc800215 	stw	r18,8(sp)
    f5c4:	2027883a 	mov	r19,r4
    f5c8:	2825883a 	mov	r18,r5
    f5cc:	b009883a 	mov	r4,r22
    f5d0:	a80b883a 	mov	r5,r21
    f5d4:	dfc00915 	stw	ra,36(sp)
    f5d8:	df000815 	stw	fp,32(sp)
    f5dc:	ddc00715 	stw	r23,28(sp)
    f5e0:	3839883a 	mov	fp,r7
    f5e4:	302ed43a 	srli	r23,r6,16
    f5e8:	dd000415 	stw	r20,16(sp)
    f5ec:	dc000015 	stw	r16,0(sp)
    f5f0:	3029883a 	mov	r20,r6
    f5f4:	0001a300 	call	1a30 <__mulsi3>
    f5f8:	a80b883a 	mov	r5,r21
    f5fc:	8809883a 	mov	r4,r17
    f600:	1021883a 	mov	r16,r2
    f604:	0001a300 	call	1a30 <__mulsi3>
    f608:	8809883a 	mov	r4,r17
    f60c:	b80b883a 	mov	r5,r23
    f610:	102b883a 	mov	r21,r2
    f614:	0001a300 	call	1a30 <__mulsi3>
    f618:	b80b883a 	mov	r5,r23
    f61c:	b009883a 	mov	r4,r22
    f620:	1023883a 	mov	r17,r2
    f624:	0001a300 	call	1a30 <__mulsi3>
    f628:	8006d43a 	srli	r3,r16,16
    f62c:	1545883a 	add	r2,r2,r21
    f630:	1885883a 	add	r2,r3,r2
    f634:	1540022e 	bgeu	r2,r21,f640 <__muldi3+0xa0>
    f638:	00c00074 	movhi	r3,1
    f63c:	88e3883a 	add	r17,r17,r3
    f640:	1006d43a 	srli	r3,r2,16
    f644:	1004943a 	slli	r2,r2,16
    f648:	e00b883a 	mov	r5,fp
    f64c:	9809883a 	mov	r4,r19
    f650:	843fffcc 	andi	r16,r16,65535
    f654:	1c63883a 	add	r17,r3,r17
    f658:	1421883a 	add	r16,r2,r16
    f65c:	0001a300 	call	1a30 <__mulsi3>
    f660:	900b883a 	mov	r5,r18
    f664:	a009883a 	mov	r4,r20
    f668:	1027883a 	mov	r19,r2
    f66c:	0001a300 	call	1a30 <__mulsi3>
    f670:	9885883a 	add	r2,r19,r2
    f674:	1447883a 	add	r3,r2,r17
    f678:	8005883a 	mov	r2,r16
    f67c:	dfc00917 	ldw	ra,36(sp)
    f680:	df000817 	ldw	fp,32(sp)
    f684:	ddc00717 	ldw	r23,28(sp)
    f688:	dd800617 	ldw	r22,24(sp)
    f68c:	dd400517 	ldw	r21,20(sp)
    f690:	dd000417 	ldw	r20,16(sp)
    f694:	dcc00317 	ldw	r19,12(sp)
    f698:	dc800217 	ldw	r18,8(sp)
    f69c:	dc400117 	ldw	r17,4(sp)
    f6a0:	dc000017 	ldw	r16,0(sp)
    f6a4:	dec00a04 	addi	sp,sp,40
    f6a8:	f800283a 	ret

0000f6ac <__udivdi3>:
    f6ac:	defff404 	addi	sp,sp,-48
    f6b0:	dcc00515 	stw	r19,20(sp)
    f6b4:	dc000215 	stw	r16,8(sp)
    f6b8:	dfc00b15 	stw	ra,44(sp)
    f6bc:	df000a15 	stw	fp,40(sp)
    f6c0:	ddc00915 	stw	r23,36(sp)
    f6c4:	dd800815 	stw	r22,32(sp)
    f6c8:	dd400715 	stw	r21,28(sp)
    f6cc:	dd000615 	stw	r20,24(sp)
    f6d0:	dc800415 	stw	r18,16(sp)
    f6d4:	dc400315 	stw	r17,12(sp)
    f6d8:	2027883a 	mov	r19,r4
    f6dc:	2821883a 	mov	r16,r5
    f6e0:	3800461e 	bne	r7,zero,f7fc <__udivdi3+0x150>
    f6e4:	3023883a 	mov	r17,r6
    f6e8:	2025883a 	mov	r18,r4
    f6ec:	2980572e 	bgeu	r5,r6,f84c <__udivdi3+0x1a0>
    f6f0:	00bfffd4 	movui	r2,65535
    f6f4:	282d883a 	mov	r22,r5
    f6f8:	1180b236 	bltu	r2,r6,f9c4 <__udivdi3+0x318>
    f6fc:	00803fc4 	movi	r2,255
    f700:	1185803a 	cmpltu	r2,r2,r6
    f704:	100490fa 	slli	r2,r2,3
    f708:	3086d83a 	srl	r3,r6,r2
    f70c:	01000074 	movhi	r4,1
    f710:	210bfd84 	addi	r4,r4,12278
    f714:	20c7883a 	add	r3,r4,r3
    f718:	18c00003 	ldbu	r3,0(r3)
    f71c:	1885883a 	add	r2,r3,r2
    f720:	00c00804 	movi	r3,32
    f724:	1887c83a 	sub	r3,r3,r2
    f728:	18000526 	beq	r3,zero,f740 <__udivdi3+0x94>
    f72c:	80e0983a 	sll	r16,r16,r3
    f730:	9884d83a 	srl	r2,r19,r2
    f734:	30e2983a 	sll	r17,r6,r3
    f738:	98e4983a 	sll	r18,r19,r3
    f73c:	142cb03a 	or	r22,r2,r16
    f740:	882ad43a 	srli	r21,r17,16
    f744:	b009883a 	mov	r4,r22
    f748:	8d3fffcc 	andi	r20,r17,65535
    f74c:	a80b883a 	mov	r5,r21
    f750:	0004bb80 	call	4bb8 <__umodsi3>
    f754:	b009883a 	mov	r4,r22
    f758:	a80b883a 	mov	r5,r21
    f75c:	1027883a 	mov	r19,r2
    f760:	0004b540 	call	4b54 <__udivsi3>
    f764:	100b883a 	mov	r5,r2
    f768:	a009883a 	mov	r4,r20
    f76c:	102d883a 	mov	r22,r2
    f770:	0001a300 	call	1a30 <__mulsi3>
    f774:	9826943a 	slli	r19,r19,16
    f778:	9006d43a 	srli	r3,r18,16
    f77c:	1cc6b03a 	or	r3,r3,r19
    f780:	1880052e 	bgeu	r3,r2,f798 <__udivdi3+0xec>
    f784:	1c47883a 	add	r3,r3,r17
    f788:	b13fffc4 	addi	r4,r22,-1
    f78c:	1c400136 	bltu	r3,r17,f794 <__udivdi3+0xe8>
    f790:	18814236 	bltu	r3,r2,fc9c <__udivdi3+0x5f0>
    f794:	202d883a 	mov	r22,r4
    f798:	18a1c83a 	sub	r16,r3,r2
    f79c:	8009883a 	mov	r4,r16
    f7a0:	a80b883a 	mov	r5,r21
    f7a4:	0004bb80 	call	4bb8 <__umodsi3>
    f7a8:	1027883a 	mov	r19,r2
    f7ac:	8009883a 	mov	r4,r16
    f7b0:	a80b883a 	mov	r5,r21
    f7b4:	9826943a 	slli	r19,r19,16
    f7b8:	0004b540 	call	4b54 <__udivsi3>
    f7bc:	100b883a 	mov	r5,r2
    f7c0:	a009883a 	mov	r4,r20
    f7c4:	94bfffcc 	andi	r18,r18,65535
    f7c8:	1021883a 	mov	r16,r2
    f7cc:	94e4b03a 	or	r18,r18,r19
    f7d0:	0001a300 	call	1a30 <__mulsi3>
    f7d4:	9080052e 	bgeu	r18,r2,f7ec <__udivdi3+0x140>
    f7d8:	8ca5883a 	add	r18,r17,r18
    f7dc:	80ffffc4 	addi	r3,r16,-1
    f7e0:	94410c36 	bltu	r18,r17,fc14 <__udivdi3+0x568>
    f7e4:	90810b2e 	bgeu	r18,r2,fc14 <__udivdi3+0x568>
    f7e8:	843fff84 	addi	r16,r16,-2
    f7ec:	b004943a 	slli	r2,r22,16
    f7f0:	0007883a 	mov	r3,zero
    f7f4:	1404b03a 	or	r2,r2,r16
    f7f8:	00005e06 	br	f974 <__udivdi3+0x2c8>
    f7fc:	29c05b36 	bltu	r5,r7,f96c <__udivdi3+0x2c0>
    f800:	00bfffd4 	movui	r2,65535
    f804:	11c0672e 	bgeu	r2,r7,f9a4 <__udivdi3+0x2f8>
    f808:	00804034 	movhi	r2,256
    f80c:	10bfffc4 	addi	r2,r2,-1
    f810:	11c10a36 	bltu	r2,r7,fc3c <__udivdi3+0x590>
    f814:	00800404 	movi	r2,16
    f818:	3886d83a 	srl	r3,r7,r2
    f81c:	01000074 	movhi	r4,1
    f820:	210bfd84 	addi	r4,r4,12278
    f824:	20c7883a 	add	r3,r4,r3
    f828:	18c00003 	ldbu	r3,0(r3)
    f82c:	05c00804 	movi	r23,32
    f830:	1885883a 	add	r2,r3,r2
    f834:	b8afc83a 	sub	r23,r23,r2
    f838:	b800671e 	bne	r23,zero,f9d8 <__udivdi3+0x32c>
    f83c:	3c010536 	bltu	r7,r16,fc54 <__udivdi3+0x5a8>
    f840:	9985403a 	cmpgeu	r2,r19,r6
    f844:	0007883a 	mov	r3,zero
    f848:	00004a06 	br	f974 <__udivdi3+0x2c8>
    f84c:	3000041e 	bne	r6,zero,f860 <__udivdi3+0x1b4>
    f850:	000b883a 	mov	r5,zero
    f854:	01000044 	movi	r4,1
    f858:	0004b540 	call	4b54 <__udivsi3>
    f85c:	1023883a 	mov	r17,r2
    f860:	00bfffd4 	movui	r2,65535
    f864:	1440532e 	bgeu	r2,r17,f9b4 <__udivdi3+0x308>
    f868:	00804034 	movhi	r2,256
    f86c:	10bfffc4 	addi	r2,r2,-1
    f870:	1440f436 	bltu	r2,r17,fc44 <__udivdi3+0x598>
    f874:	00800404 	movi	r2,16
    f878:	8886d83a 	srl	r3,r17,r2
    f87c:	01000074 	movhi	r4,1
    f880:	210bfd84 	addi	r4,r4,12278
    f884:	20c7883a 	add	r3,r4,r3
    f888:	18c00003 	ldbu	r3,0(r3)
    f88c:	1885883a 	add	r2,r3,r2
    f890:	00c00804 	movi	r3,32
    f894:	1887c83a 	sub	r3,r3,r2
    f898:	1800a51e 	bne	r3,zero,fb30 <__udivdi3+0x484>
    f89c:	882ad43a 	srli	r21,r17,16
    f8a0:	8461c83a 	sub	r16,r16,r17
    f8a4:	8d3fffcc 	andi	r20,r17,65535
    f8a8:	00c00044 	movi	r3,1
    f8ac:	a80b883a 	mov	r5,r21
    f8b0:	8009883a 	mov	r4,r16
    f8b4:	d8c00115 	stw	r3,4(sp)
    f8b8:	0004bb80 	call	4bb8 <__umodsi3>
    f8bc:	a80b883a 	mov	r5,r21
    f8c0:	8009883a 	mov	r4,r16
    f8c4:	1027883a 	mov	r19,r2
    f8c8:	0004b540 	call	4b54 <__udivsi3>
    f8cc:	a00b883a 	mov	r5,r20
    f8d0:	1009883a 	mov	r4,r2
    f8d4:	102d883a 	mov	r22,r2
    f8d8:	0001a300 	call	1a30 <__mulsi3>
    f8dc:	9826943a 	slli	r19,r19,16
    f8e0:	900ed43a 	srli	r7,r18,16
    f8e4:	d8c00117 	ldw	r3,4(sp)
    f8e8:	3cceb03a 	or	r7,r7,r19
    f8ec:	3880052e 	bgeu	r7,r2,f904 <__udivdi3+0x258>
    f8f0:	3c4f883a 	add	r7,r7,r17
    f8f4:	b13fffc4 	addi	r4,r22,-1
    f8f8:	3c400136 	bltu	r7,r17,f900 <__udivdi3+0x254>
    f8fc:	3880e436 	bltu	r7,r2,fc90 <__udivdi3+0x5e4>
    f900:	202d883a 	mov	r22,r4
    f904:	38a1c83a 	sub	r16,r7,r2
    f908:	8009883a 	mov	r4,r16
    f90c:	a80b883a 	mov	r5,r21
    f910:	d8c00115 	stw	r3,4(sp)
    f914:	0004bb80 	call	4bb8 <__umodsi3>
    f918:	1027883a 	mov	r19,r2
    f91c:	8009883a 	mov	r4,r16
    f920:	a80b883a 	mov	r5,r21
    f924:	9826943a 	slli	r19,r19,16
    f928:	0004b540 	call	4b54 <__udivsi3>
    f92c:	a00b883a 	mov	r5,r20
    f930:	1009883a 	mov	r4,r2
    f934:	94bfffcc 	andi	r18,r18,65535
    f938:	1021883a 	mov	r16,r2
    f93c:	94e4b03a 	or	r18,r18,r19
    f940:	0001a300 	call	1a30 <__mulsi3>
    f944:	d8c00117 	ldw	r3,4(sp)
    f948:	9080052e 	bgeu	r18,r2,f960 <__udivdi3+0x2b4>
    f94c:	8ca5883a 	add	r18,r17,r18
    f950:	813fffc4 	addi	r4,r16,-1
    f954:	9440ad36 	bltu	r18,r17,fc0c <__udivdi3+0x560>
    f958:	9080ac2e 	bgeu	r18,r2,fc0c <__udivdi3+0x560>
    f95c:	843fff84 	addi	r16,r16,-2
    f960:	b004943a 	slli	r2,r22,16
    f964:	1404b03a 	or	r2,r2,r16
    f968:	00000206 	br	f974 <__udivdi3+0x2c8>
    f96c:	0007883a 	mov	r3,zero
    f970:	0005883a 	mov	r2,zero
    f974:	dfc00b17 	ldw	ra,44(sp)
    f978:	df000a17 	ldw	fp,40(sp)
    f97c:	ddc00917 	ldw	r23,36(sp)
    f980:	dd800817 	ldw	r22,32(sp)
    f984:	dd400717 	ldw	r21,28(sp)
    f988:	dd000617 	ldw	r20,24(sp)
    f98c:	dcc00517 	ldw	r19,20(sp)
    f990:	dc800417 	ldw	r18,16(sp)
    f994:	dc400317 	ldw	r17,12(sp)
    f998:	dc000217 	ldw	r16,8(sp)
    f99c:	dec00c04 	addi	sp,sp,48
    f9a0:	f800283a 	ret
    f9a4:	00803fc4 	movi	r2,255
    f9a8:	11c5803a 	cmpltu	r2,r2,r7
    f9ac:	100490fa 	slli	r2,r2,3
    f9b0:	003f9906 	br	f818 <__alt_data_end+0xfffef818>
    f9b4:	00803fc4 	movi	r2,255
    f9b8:	1445803a 	cmpltu	r2,r2,r17
    f9bc:	100490fa 	slli	r2,r2,3
    f9c0:	003fad06 	br	f878 <__alt_data_end+0xfffef878>
    f9c4:	00804034 	movhi	r2,256
    f9c8:	10bfffc4 	addi	r2,r2,-1
    f9cc:	11809f36 	bltu	r2,r6,fc4c <__udivdi3+0x5a0>
    f9d0:	00800404 	movi	r2,16
    f9d4:	003f4c06 	br	f708 <__alt_data_end+0xfffef708>
    f9d8:	3dce983a 	sll	r7,r7,r23
    f9dc:	30b8d83a 	srl	fp,r6,r2
    f9e0:	80a2d83a 	srl	r17,r16,r2
    f9e4:	35cc983a 	sll	r6,r6,r23
    f9e8:	3f38b03a 	or	fp,r7,fp
    f9ec:	e024d43a 	srli	r18,fp,16
    f9f0:	9884d83a 	srl	r2,r19,r2
    f9f4:	85e0983a 	sll	r16,r16,r23
    f9f8:	8809883a 	mov	r4,r17
    f9fc:	900b883a 	mov	r5,r18
    fa00:	d9800015 	stw	r6,0(sp)
    fa04:	1420b03a 	or	r16,r2,r16
    fa08:	0004bb80 	call	4bb8 <__umodsi3>
    fa0c:	900b883a 	mov	r5,r18
    fa10:	8809883a 	mov	r4,r17
    fa14:	1029883a 	mov	r20,r2
    fa18:	e5bfffcc 	andi	r22,fp,65535
    fa1c:	0004b540 	call	4b54 <__udivsi3>
    fa20:	100b883a 	mov	r5,r2
    fa24:	b009883a 	mov	r4,r22
    fa28:	102b883a 	mov	r21,r2
    fa2c:	0001a300 	call	1a30 <__mulsi3>
    fa30:	a028943a 	slli	r20,r20,16
    fa34:	8006d43a 	srli	r3,r16,16
    fa38:	1d06b03a 	or	r3,r3,r20
    fa3c:	1880042e 	bgeu	r3,r2,fa50 <__udivdi3+0x3a4>
    fa40:	1f07883a 	add	r3,r3,fp
    fa44:	a93fffc4 	addi	r4,r21,-1
    fa48:	1f00892e 	bgeu	r3,fp,fc70 <__udivdi3+0x5c4>
    fa4c:	202b883a 	mov	r21,r4
    fa50:	18a3c83a 	sub	r17,r3,r2
    fa54:	8809883a 	mov	r4,r17
    fa58:	900b883a 	mov	r5,r18
    fa5c:	0004bb80 	call	4bb8 <__umodsi3>
    fa60:	1029883a 	mov	r20,r2
    fa64:	8809883a 	mov	r4,r17
    fa68:	900b883a 	mov	r5,r18
    fa6c:	a028943a 	slli	r20,r20,16
    fa70:	0004b540 	call	4b54 <__udivsi3>
    fa74:	100b883a 	mov	r5,r2
    fa78:	b009883a 	mov	r4,r22
    fa7c:	843fffcc 	andi	r16,r16,65535
    fa80:	1023883a 	mov	r17,r2
    fa84:	8520b03a 	or	r16,r16,r20
    fa88:	0001a300 	call	1a30 <__mulsi3>
    fa8c:	8080042e 	bgeu	r16,r2,faa0 <__udivdi3+0x3f4>
    fa90:	8721883a 	add	r16,r16,fp
    fa94:	88ffffc4 	addi	r3,r17,-1
    fa98:	8700712e 	bgeu	r16,fp,fc60 <__udivdi3+0x5b4>
    fa9c:	1823883a 	mov	r17,r3
    faa0:	a80e943a 	slli	r7,r21,16
    faa4:	d8c00017 	ldw	r3,0(sp)
    faa8:	80a1c83a 	sub	r16,r16,r2
    faac:	3c64b03a 	or	r18,r7,r17
    fab0:	1d3fffcc 	andi	r20,r3,65535
    fab4:	9022d43a 	srli	r17,r18,16
    fab8:	95bfffcc 	andi	r22,r18,65535
    fabc:	a00b883a 	mov	r5,r20
    fac0:	b009883a 	mov	r4,r22
    fac4:	182ad43a 	srli	r21,r3,16
    fac8:	0001a300 	call	1a30 <__mulsi3>
    facc:	a00b883a 	mov	r5,r20
    fad0:	8809883a 	mov	r4,r17
    fad4:	1039883a 	mov	fp,r2
    fad8:	0001a300 	call	1a30 <__mulsi3>
    fadc:	8809883a 	mov	r4,r17
    fae0:	a80b883a 	mov	r5,r21
    fae4:	1029883a 	mov	r20,r2
    fae8:	0001a300 	call	1a30 <__mulsi3>
    faec:	a80b883a 	mov	r5,r21
    faf0:	b009883a 	mov	r4,r22
    faf4:	1023883a 	mov	r17,r2
    faf8:	0001a300 	call	1a30 <__mulsi3>
    fafc:	e006d43a 	srli	r3,fp,16
    fb00:	1505883a 	add	r2,r2,r20
    fb04:	1887883a 	add	r3,r3,r2
    fb08:	1d00022e 	bgeu	r3,r20,fb14 <__udivdi3+0x468>
    fb0c:	00800074 	movhi	r2,1
    fb10:	88a3883a 	add	r17,r17,r2
    fb14:	1804d43a 	srli	r2,r3,16
    fb18:	1463883a 	add	r17,r2,r17
    fb1c:	84404436 	bltu	r16,r17,fc30 <__udivdi3+0x584>
    fb20:	84403e26 	beq	r16,r17,fc1c <__udivdi3+0x570>
    fb24:	9005883a 	mov	r2,r18
    fb28:	0007883a 	mov	r3,zero
    fb2c:	003f9106 	br	f974 <__alt_data_end+0xfffef974>
    fb30:	88e2983a 	sll	r17,r17,r3
    fb34:	80aed83a 	srl	r23,r16,r2
    fb38:	80e0983a 	sll	r16,r16,r3
    fb3c:	882ad43a 	srli	r21,r17,16
    fb40:	9884d83a 	srl	r2,r19,r2
    fb44:	b809883a 	mov	r4,r23
    fb48:	a80b883a 	mov	r5,r21
    fb4c:	98e4983a 	sll	r18,r19,r3
    fb50:	142cb03a 	or	r22,r2,r16
    fb54:	0004bb80 	call	4bb8 <__umodsi3>
    fb58:	b809883a 	mov	r4,r23
    fb5c:	a80b883a 	mov	r5,r21
    fb60:	1027883a 	mov	r19,r2
    fb64:	8d3fffcc 	andi	r20,r17,65535
    fb68:	0004b540 	call	4b54 <__udivsi3>
    fb6c:	a009883a 	mov	r4,r20
    fb70:	100b883a 	mov	r5,r2
    fb74:	102f883a 	mov	r23,r2
    fb78:	0001a300 	call	1a30 <__mulsi3>
    fb7c:	9826943a 	slli	r19,r19,16
    fb80:	b008d43a 	srli	r4,r22,16
    fb84:	24c8b03a 	or	r4,r4,r19
    fb88:	2080062e 	bgeu	r4,r2,fba4 <__udivdi3+0x4f8>
    fb8c:	2449883a 	add	r4,r4,r17
    fb90:	b8ffffc4 	addi	r3,r23,-1
    fb94:	24403c36 	bltu	r4,r17,fc88 <__udivdi3+0x5dc>
    fb98:	20803b2e 	bgeu	r4,r2,fc88 <__udivdi3+0x5dc>
    fb9c:	bdffff84 	addi	r23,r23,-2
    fba0:	2449883a 	add	r4,r4,r17
    fba4:	20a1c83a 	sub	r16,r4,r2
    fba8:	a80b883a 	mov	r5,r21
    fbac:	8009883a 	mov	r4,r16
    fbb0:	0004bb80 	call	4bb8 <__umodsi3>
    fbb4:	a80b883a 	mov	r5,r21
    fbb8:	8009883a 	mov	r4,r16
    fbbc:	1027883a 	mov	r19,r2
    fbc0:	0004b540 	call	4b54 <__udivsi3>
    fbc4:	a009883a 	mov	r4,r20
    fbc8:	100b883a 	mov	r5,r2
    fbcc:	9826943a 	slli	r19,r19,16
    fbd0:	1039883a 	mov	fp,r2
    fbd4:	0001a300 	call	1a30 <__mulsi3>
    fbd8:	b13fffcc 	andi	r4,r22,65535
    fbdc:	24c8b03a 	or	r4,r4,r19
    fbe0:	2080062e 	bgeu	r4,r2,fbfc <__udivdi3+0x550>
    fbe4:	2449883a 	add	r4,r4,r17
    fbe8:	e0ffffc4 	addi	r3,fp,-1
    fbec:	24402436 	bltu	r4,r17,fc80 <__udivdi3+0x5d4>
    fbf0:	2080232e 	bgeu	r4,r2,fc80 <__udivdi3+0x5d4>
    fbf4:	e73fff84 	addi	fp,fp,-2
    fbf8:	2449883a 	add	r4,r4,r17
    fbfc:	b82e943a 	slli	r23,r23,16
    fc00:	20a1c83a 	sub	r16,r4,r2
    fc04:	bf06b03a 	or	r3,r23,fp
    fc08:	003f2806 	br	f8ac <__alt_data_end+0xfffef8ac>
    fc0c:	2021883a 	mov	r16,r4
    fc10:	003f5306 	br	f960 <__alt_data_end+0xfffef960>
    fc14:	1821883a 	mov	r16,r3
    fc18:	003ef406 	br	f7ec <__alt_data_end+0xfffef7ec>
    fc1c:	1806943a 	slli	r3,r3,16
    fc20:	9de6983a 	sll	r19,r19,r23
    fc24:	e73fffcc 	andi	fp,fp,65535
    fc28:	1f07883a 	add	r3,r3,fp
    fc2c:	98ffbd2e 	bgeu	r19,r3,fb24 <__alt_data_end+0xfffefb24>
    fc30:	90bfffc4 	addi	r2,r18,-1
    fc34:	0007883a 	mov	r3,zero
    fc38:	003f4e06 	br	f974 <__alt_data_end+0xfffef974>
    fc3c:	00800604 	movi	r2,24
    fc40:	003ef506 	br	f818 <__alt_data_end+0xfffef818>
    fc44:	00800604 	movi	r2,24
    fc48:	003f0b06 	br	f878 <__alt_data_end+0xfffef878>
    fc4c:	00800604 	movi	r2,24
    fc50:	003ead06 	br	f708 <__alt_data_end+0xfffef708>
    fc54:	0007883a 	mov	r3,zero
    fc58:	00800044 	movi	r2,1
    fc5c:	003f4506 	br	f974 <__alt_data_end+0xfffef974>
    fc60:	80bf8e2e 	bgeu	r16,r2,fa9c <__alt_data_end+0xfffefa9c>
    fc64:	8c7fff84 	addi	r17,r17,-2
    fc68:	8721883a 	add	r16,r16,fp
    fc6c:	003f8c06 	br	faa0 <__alt_data_end+0xfffefaa0>
    fc70:	18bf762e 	bgeu	r3,r2,fa4c <__alt_data_end+0xfffefa4c>
    fc74:	ad7fff84 	addi	r21,r21,-2
    fc78:	1f07883a 	add	r3,r3,fp
    fc7c:	003f7406 	br	fa50 <__alt_data_end+0xfffefa50>
    fc80:	1839883a 	mov	fp,r3
    fc84:	003fdd06 	br	fbfc <__alt_data_end+0xfffefbfc>
    fc88:	182f883a 	mov	r23,r3
    fc8c:	003fc506 	br	fba4 <__alt_data_end+0xfffefba4>
    fc90:	b5bfff84 	addi	r22,r22,-2
    fc94:	3c4f883a 	add	r7,r7,r17
    fc98:	003f1a06 	br	f904 <__alt_data_end+0xfffef904>
    fc9c:	b5bfff84 	addi	r22,r22,-2
    fca0:	1c47883a 	add	r3,r3,r17
    fca4:	003ebc06 	br	f798 <__alt_data_end+0xfffef798>

0000fca8 <__umoddi3>:
    fca8:	defff304 	addi	sp,sp,-52
    fcac:	df000b15 	stw	fp,44(sp)
    fcb0:	dc400415 	stw	r17,16(sp)
    fcb4:	dc000315 	stw	r16,12(sp)
    fcb8:	dfc00c15 	stw	ra,48(sp)
    fcbc:	ddc00a15 	stw	r23,40(sp)
    fcc0:	dd800915 	stw	r22,36(sp)
    fcc4:	dd400815 	stw	r21,32(sp)
    fcc8:	dd000715 	stw	r20,28(sp)
    fccc:	dcc00615 	stw	r19,24(sp)
    fcd0:	dc800515 	stw	r18,20(sp)
    fcd4:	2021883a 	mov	r16,r4
    fcd8:	2823883a 	mov	r17,r5
    fcdc:	2839883a 	mov	fp,r5
    fce0:	3800401e 	bne	r7,zero,fde4 <__umoddi3+0x13c>
    fce4:	3027883a 	mov	r19,r6
    fce8:	2029883a 	mov	r20,r4
    fcec:	2980552e 	bgeu	r5,r6,fe44 <__umoddi3+0x19c>
    fcf0:	00bfffd4 	movui	r2,65535
    fcf4:	1180a236 	bltu	r2,r6,ff80 <__umoddi3+0x2d8>
    fcf8:	01003fc4 	movi	r4,255
    fcfc:	2189803a 	cmpltu	r4,r4,r6
    fd00:	200890fa 	slli	r4,r4,3
    fd04:	3104d83a 	srl	r2,r6,r4
    fd08:	00c00074 	movhi	r3,1
    fd0c:	18cbfd84 	addi	r3,r3,12278
    fd10:	1885883a 	add	r2,r3,r2
    fd14:	10c00003 	ldbu	r3,0(r2)
    fd18:	00800804 	movi	r2,32
    fd1c:	1909883a 	add	r4,r3,r4
    fd20:	1125c83a 	sub	r18,r2,r4
    fd24:	90000526 	beq	r18,zero,fd3c <__umoddi3+0x94>
    fd28:	8ca2983a 	sll	r17,r17,r18
    fd2c:	8108d83a 	srl	r4,r16,r4
    fd30:	34a6983a 	sll	r19,r6,r18
    fd34:	84a8983a 	sll	r20,r16,r18
    fd38:	2478b03a 	or	fp,r4,r17
    fd3c:	982cd43a 	srli	r22,r19,16
    fd40:	e009883a 	mov	r4,fp
    fd44:	9dffffcc 	andi	r23,r19,65535
    fd48:	b00b883a 	mov	r5,r22
    fd4c:	0004bb80 	call	4bb8 <__umodsi3>
    fd50:	b00b883a 	mov	r5,r22
    fd54:	e009883a 	mov	r4,fp
    fd58:	102b883a 	mov	r21,r2
    fd5c:	0004b540 	call	4b54 <__udivsi3>
    fd60:	100b883a 	mov	r5,r2
    fd64:	b809883a 	mov	r4,r23
    fd68:	0001a300 	call	1a30 <__mulsi3>
    fd6c:	a82a943a 	slli	r21,r21,16
    fd70:	a006d43a 	srli	r3,r20,16
    fd74:	1d46b03a 	or	r3,r3,r21
    fd78:	1880032e 	bgeu	r3,r2,fd88 <__umoddi3+0xe0>
    fd7c:	1cc7883a 	add	r3,r3,r19
    fd80:	1cc00136 	bltu	r3,r19,fd88 <__umoddi3+0xe0>
    fd84:	18813136 	bltu	r3,r2,1024c <__umoddi3+0x5a4>
    fd88:	18a1c83a 	sub	r16,r3,r2
    fd8c:	b00b883a 	mov	r5,r22
    fd90:	8009883a 	mov	r4,r16
    fd94:	0004bb80 	call	4bb8 <__umodsi3>
    fd98:	b00b883a 	mov	r5,r22
    fd9c:	8009883a 	mov	r4,r16
    fda0:	1023883a 	mov	r17,r2
    fda4:	0004b540 	call	4b54 <__udivsi3>
    fda8:	100b883a 	mov	r5,r2
    fdac:	b809883a 	mov	r4,r23
    fdb0:	8822943a 	slli	r17,r17,16
    fdb4:	0001a300 	call	1a30 <__mulsi3>
    fdb8:	a0ffffcc 	andi	r3,r20,65535
    fdbc:	1c46b03a 	or	r3,r3,r17
    fdc0:	1880042e 	bgeu	r3,r2,fdd4 <__umoddi3+0x12c>
    fdc4:	1cc7883a 	add	r3,r3,r19
    fdc8:	1cc00236 	bltu	r3,r19,fdd4 <__umoddi3+0x12c>
    fdcc:	1880012e 	bgeu	r3,r2,fdd4 <__umoddi3+0x12c>
    fdd0:	1cc7883a 	add	r3,r3,r19
    fdd4:	1885c83a 	sub	r2,r3,r2
    fdd8:	1484d83a 	srl	r2,r2,r18
    fddc:	0007883a 	mov	r3,zero
    fde0:	00005306 	br	ff30 <__umoddi3+0x288>
    fde4:	29c05036 	bltu	r5,r7,ff28 <__umoddi3+0x280>
    fde8:	00bfffd4 	movui	r2,65535
    fdec:	11c05c2e 	bgeu	r2,r7,ff60 <__umoddi3+0x2b8>
    fdf0:	00804034 	movhi	r2,256
    fdf4:	10bfffc4 	addi	r2,r2,-1
    fdf8:	11c10636 	bltu	r2,r7,10214 <__umoddi3+0x56c>
    fdfc:	01000404 	movi	r4,16
    fe00:	3904d83a 	srl	r2,r7,r4
    fe04:	00c00074 	movhi	r3,1
    fe08:	18cbfd84 	addi	r3,r3,12278
    fe0c:	1885883a 	add	r2,r3,r2
    fe10:	14c00003 	ldbu	r19,0(r2)
    fe14:	00c00804 	movi	r3,32
    fe18:	9927883a 	add	r19,r19,r4
    fe1c:	1ce9c83a 	sub	r20,r3,r19
    fe20:	a0005c1e 	bne	r20,zero,ff94 <__umoddi3+0x2ec>
    fe24:	3c400136 	bltu	r7,r17,fe2c <__umoddi3+0x184>
    fe28:	81810a36 	bltu	r16,r6,10254 <__umoddi3+0x5ac>
    fe2c:	8185c83a 	sub	r2,r16,r6
    fe30:	89e3c83a 	sub	r17,r17,r7
    fe34:	8089803a 	cmpltu	r4,r16,r2
    fe38:	8939c83a 	sub	fp,r17,r4
    fe3c:	e007883a 	mov	r3,fp
    fe40:	00003b06 	br	ff30 <__umoddi3+0x288>
    fe44:	3000041e 	bne	r6,zero,fe58 <__umoddi3+0x1b0>
    fe48:	000b883a 	mov	r5,zero
    fe4c:	01000044 	movi	r4,1
    fe50:	0004b540 	call	4b54 <__udivsi3>
    fe54:	1027883a 	mov	r19,r2
    fe58:	00bfffd4 	movui	r2,65535
    fe5c:	14c0442e 	bgeu	r2,r19,ff70 <__umoddi3+0x2c8>
    fe60:	00804034 	movhi	r2,256
    fe64:	10bfffc4 	addi	r2,r2,-1
    fe68:	14c0ec36 	bltu	r2,r19,1021c <__umoddi3+0x574>
    fe6c:	00800404 	movi	r2,16
    fe70:	9886d83a 	srl	r3,r19,r2
    fe74:	01000074 	movhi	r4,1
    fe78:	210bfd84 	addi	r4,r4,12278
    fe7c:	20c7883a 	add	r3,r4,r3
    fe80:	18c00003 	ldbu	r3,0(r3)
    fe84:	1887883a 	add	r3,r3,r2
    fe88:	00800804 	movi	r2,32
    fe8c:	10e5c83a 	sub	r18,r2,r3
    fe90:	9000ab1e 	bne	r18,zero,10140 <__umoddi3+0x498>
    fe94:	982cd43a 	srli	r22,r19,16
    fe98:	8ce3c83a 	sub	r17,r17,r19
    fe9c:	9dffffcc 	andi	r23,r19,65535
    fea0:	b00b883a 	mov	r5,r22
    fea4:	8809883a 	mov	r4,r17
    fea8:	0004bb80 	call	4bb8 <__umodsi3>
    feac:	b00b883a 	mov	r5,r22
    feb0:	8809883a 	mov	r4,r17
    feb4:	102b883a 	mov	r21,r2
    feb8:	0004b540 	call	4b54 <__udivsi3>
    febc:	b80b883a 	mov	r5,r23
    fec0:	1009883a 	mov	r4,r2
    fec4:	0001a300 	call	1a30 <__mulsi3>
    fec8:	a82a943a 	slli	r21,r21,16
    fecc:	a006d43a 	srli	r3,r20,16
    fed0:	1d46b03a 	or	r3,r3,r21
    fed4:	1880042e 	bgeu	r3,r2,fee8 <__umoddi3+0x240>
    fed8:	1cc7883a 	add	r3,r3,r19
    fedc:	1cc00236 	bltu	r3,r19,fee8 <__umoddi3+0x240>
    fee0:	1880012e 	bgeu	r3,r2,fee8 <__umoddi3+0x240>
    fee4:	1cc7883a 	add	r3,r3,r19
    fee8:	18a1c83a 	sub	r16,r3,r2
    feec:	b00b883a 	mov	r5,r22
    fef0:	8009883a 	mov	r4,r16
    fef4:	0004bb80 	call	4bb8 <__umodsi3>
    fef8:	1023883a 	mov	r17,r2
    fefc:	b00b883a 	mov	r5,r22
    ff00:	8009883a 	mov	r4,r16
    ff04:	0004b540 	call	4b54 <__udivsi3>
    ff08:	8822943a 	slli	r17,r17,16
    ff0c:	b80b883a 	mov	r5,r23
    ff10:	1009883a 	mov	r4,r2
    ff14:	0001a300 	call	1a30 <__mulsi3>
    ff18:	a53fffcc 	andi	r20,r20,65535
    ff1c:	a446b03a 	or	r3,r20,r17
    ff20:	18bfac2e 	bgeu	r3,r2,fdd4 <__alt_data_end+0xfffefdd4>
    ff24:	003fa706 	br	fdc4 <__alt_data_end+0xfffefdc4>
    ff28:	2005883a 	mov	r2,r4
    ff2c:	2807883a 	mov	r3,r5
    ff30:	dfc00c17 	ldw	ra,48(sp)
    ff34:	df000b17 	ldw	fp,44(sp)
    ff38:	ddc00a17 	ldw	r23,40(sp)
    ff3c:	dd800917 	ldw	r22,36(sp)
    ff40:	dd400817 	ldw	r21,32(sp)
    ff44:	dd000717 	ldw	r20,28(sp)
    ff48:	dcc00617 	ldw	r19,24(sp)
    ff4c:	dc800517 	ldw	r18,20(sp)
    ff50:	dc400417 	ldw	r17,16(sp)
    ff54:	dc000317 	ldw	r16,12(sp)
    ff58:	dec00d04 	addi	sp,sp,52
    ff5c:	f800283a 	ret
    ff60:	04c03fc4 	movi	r19,255
    ff64:	99c9803a 	cmpltu	r4,r19,r7
    ff68:	200890fa 	slli	r4,r4,3
    ff6c:	003fa406 	br	fe00 <__alt_data_end+0xfffefe00>
    ff70:	00803fc4 	movi	r2,255
    ff74:	14c5803a 	cmpltu	r2,r2,r19
    ff78:	100490fa 	slli	r2,r2,3
    ff7c:	003fbc06 	br	fe70 <__alt_data_end+0xfffefe70>
    ff80:	00804034 	movhi	r2,256
    ff84:	10bfffc4 	addi	r2,r2,-1
    ff88:	1180a636 	bltu	r2,r6,10224 <__umoddi3+0x57c>
    ff8c:	01000404 	movi	r4,16
    ff90:	003f5c06 	br	fd04 <__alt_data_end+0xfffefd04>
    ff94:	3d0e983a 	sll	r7,r7,r20
    ff98:	34ead83a 	srl	r21,r6,r19
    ff9c:	8cc6d83a 	srl	r3,r17,r19
    ffa0:	8d10983a 	sll	r8,r17,r20
    ffa4:	3d6ab03a 	or	r21,r7,r21
    ffa8:	a82cd43a 	srli	r22,r21,16
    ffac:	84e2d83a 	srl	r17,r16,r19
    ffb0:	1809883a 	mov	r4,r3
    ffb4:	b00b883a 	mov	r5,r22
    ffb8:	8a22b03a 	or	r17,r17,r8
    ffbc:	3524983a 	sll	r18,r6,r20
    ffc0:	dc400015 	stw	r17,0(sp)
    ffc4:	d8c00115 	stw	r3,4(sp)
    ffc8:	0004bb80 	call	4bb8 <__umodsi3>
    ffcc:	d8c00117 	ldw	r3,4(sp)
    ffd0:	b00b883a 	mov	r5,r22
    ffd4:	1039883a 	mov	fp,r2
    ffd8:	1809883a 	mov	r4,r3
    ffdc:	0004b540 	call	4b54 <__udivsi3>
    ffe0:	adffffcc 	andi	r23,r21,65535
    ffe4:	100b883a 	mov	r5,r2
    ffe8:	b809883a 	mov	r4,r23
    ffec:	1023883a 	mov	r17,r2
    fff0:	0001a300 	call	1a30 <__mulsi3>
    fff4:	d9400017 	ldw	r5,0(sp)
    fff8:	e008943a 	slli	r4,fp,16
    fffc:	8520983a 	sll	r16,r16,r20
   10000:	2806d43a 	srli	r3,r5,16
   10004:	1906b03a 	or	r3,r3,r4
   10008:	1880042e 	bgeu	r3,r2,1001c <__umoddi3+0x374>
   1000c:	1d47883a 	add	r3,r3,r21
   10010:	893fffc4 	addi	r4,r17,-1
   10014:	1d40892e 	bgeu	r3,r21,1023c <__umoddi3+0x594>
   10018:	2023883a 	mov	r17,r4
   1001c:	18b9c83a 	sub	fp,r3,r2
   10020:	b00b883a 	mov	r5,r22
   10024:	e009883a 	mov	r4,fp
   10028:	0004bb80 	call	4bb8 <__umodsi3>
   1002c:	b00b883a 	mov	r5,r22
   10030:	e009883a 	mov	r4,fp
   10034:	d8800215 	stw	r2,8(sp)
   10038:	0004b540 	call	4b54 <__udivsi3>
   1003c:	100b883a 	mov	r5,r2
   10040:	b809883a 	mov	r4,r23
   10044:	102d883a 	mov	r22,r2
   10048:	0001a300 	call	1a30 <__mulsi3>
   1004c:	d9800217 	ldw	r6,8(sp)
   10050:	d8c00017 	ldw	r3,0(sp)
   10054:	300c943a 	slli	r6,r6,16
   10058:	1a3fffcc 	andi	r8,r3,65535
   1005c:	4190b03a 	or	r8,r8,r6
   10060:	4080042e 	bgeu	r8,r2,10074 <__umoddi3+0x3cc>
   10064:	4551883a 	add	r8,r8,r21
   10068:	b0ffffc4 	addi	r3,r22,-1
   1006c:	45406f2e 	bgeu	r8,r21,1022c <__umoddi3+0x584>
   10070:	182d883a 	mov	r22,r3
   10074:	880e943a 	slli	r7,r17,16
   10078:	9006d43a 	srli	r3,r18,16
   1007c:	91bfffcc 	andi	r6,r18,65535
   10080:	3dacb03a 	or	r22,r7,r22
   10084:	b02ed43a 	srli	r23,r22,16
   10088:	b5bfffcc 	andi	r22,r22,65535
   1008c:	300b883a 	mov	r5,r6
   10090:	b009883a 	mov	r4,r22
   10094:	40a3c83a 	sub	r17,r8,r2
   10098:	d8c00115 	stw	r3,4(sp)
   1009c:	d9800215 	stw	r6,8(sp)
   100a0:	0001a300 	call	1a30 <__mulsi3>
   100a4:	d9800217 	ldw	r6,8(sp)
   100a8:	b809883a 	mov	r4,r23
   100ac:	1039883a 	mov	fp,r2
   100b0:	300b883a 	mov	r5,r6
   100b4:	0001a300 	call	1a30 <__mulsi3>
   100b8:	d8c00117 	ldw	r3,4(sp)
   100bc:	b809883a 	mov	r4,r23
   100c0:	d8800215 	stw	r2,8(sp)
   100c4:	180b883a 	mov	r5,r3
   100c8:	0001a300 	call	1a30 <__mulsi3>
   100cc:	d8c00117 	ldw	r3,4(sp)
   100d0:	b009883a 	mov	r4,r22
   100d4:	102f883a 	mov	r23,r2
   100d8:	180b883a 	mov	r5,r3
   100dc:	0001a300 	call	1a30 <__mulsi3>
   100e0:	d9800217 	ldw	r6,8(sp)
   100e4:	e006d43a 	srli	r3,fp,16
   100e8:	1185883a 	add	r2,r2,r6
   100ec:	1885883a 	add	r2,r3,r2
   100f0:	1180022e 	bgeu	r2,r6,100fc <__umoddi3+0x454>
   100f4:	00c00074 	movhi	r3,1
   100f8:	b8ef883a 	add	r23,r23,r3
   100fc:	1006d43a 	srli	r3,r2,16
   10100:	1004943a 	slli	r2,r2,16
   10104:	e73fffcc 	andi	fp,fp,65535
   10108:	1dc7883a 	add	r3,r3,r23
   1010c:	1739883a 	add	fp,r2,fp
   10110:	88c03a36 	bltu	r17,r3,101fc <__umoddi3+0x554>
   10114:	88c05126 	beq	r17,r3,1025c <__umoddi3+0x5b4>
   10118:	88c9c83a 	sub	r4,r17,r3
   1011c:	e00f883a 	mov	r7,fp
   10120:	81cfc83a 	sub	r7,r16,r7
   10124:	81c7803a 	cmpltu	r3,r16,r7
   10128:	20c7c83a 	sub	r3,r4,r3
   1012c:	1cc4983a 	sll	r2,r3,r19
   10130:	3d0ed83a 	srl	r7,r7,r20
   10134:	1d06d83a 	srl	r3,r3,r20
   10138:	11c4b03a 	or	r2,r2,r7
   1013c:	003f7c06 	br	ff30 <__alt_data_end+0xfffeff30>
   10140:	9ca6983a 	sll	r19,r19,r18
   10144:	88f8d83a 	srl	fp,r17,r3
   10148:	80c4d83a 	srl	r2,r16,r3
   1014c:	982cd43a 	srli	r22,r19,16
   10150:	8ca2983a 	sll	r17,r17,r18
   10154:	e009883a 	mov	r4,fp
   10158:	b00b883a 	mov	r5,r22
   1015c:	146ab03a 	or	r21,r2,r17
   10160:	0004bb80 	call	4bb8 <__umodsi3>
   10164:	b00b883a 	mov	r5,r22
   10168:	e009883a 	mov	r4,fp
   1016c:	1029883a 	mov	r20,r2
   10170:	9dffffcc 	andi	r23,r19,65535
   10174:	0004b540 	call	4b54 <__udivsi3>
   10178:	b809883a 	mov	r4,r23
   1017c:	100b883a 	mov	r5,r2
   10180:	0001a300 	call	1a30 <__mulsi3>
   10184:	a008943a 	slli	r4,r20,16
   10188:	a806d43a 	srli	r3,r21,16
   1018c:	84a8983a 	sll	r20,r16,r18
   10190:	1906b03a 	or	r3,r3,r4
   10194:	1880042e 	bgeu	r3,r2,101a8 <__umoddi3+0x500>
   10198:	1cc7883a 	add	r3,r3,r19
   1019c:	1cc00236 	bltu	r3,r19,101a8 <__umoddi3+0x500>
   101a0:	1880012e 	bgeu	r3,r2,101a8 <__umoddi3+0x500>
   101a4:	1cc7883a 	add	r3,r3,r19
   101a8:	18a3c83a 	sub	r17,r3,r2
   101ac:	b00b883a 	mov	r5,r22
   101b0:	8809883a 	mov	r4,r17
   101b4:	0004bb80 	call	4bb8 <__umodsi3>
   101b8:	b00b883a 	mov	r5,r22
   101bc:	8809883a 	mov	r4,r17
   101c0:	1021883a 	mov	r16,r2
   101c4:	0004b540 	call	4b54 <__udivsi3>
   101c8:	100b883a 	mov	r5,r2
   101cc:	b809883a 	mov	r4,r23
   101d0:	8020943a 	slli	r16,r16,16
   101d4:	0001a300 	call	1a30 <__mulsi3>
   101d8:	a8ffffcc 	andi	r3,r21,65535
   101dc:	1c06b03a 	or	r3,r3,r16
   101e0:	1880042e 	bgeu	r3,r2,101f4 <__umoddi3+0x54c>
   101e4:	1cc7883a 	add	r3,r3,r19
   101e8:	1cc00236 	bltu	r3,r19,101f4 <__umoddi3+0x54c>
   101ec:	1880012e 	bgeu	r3,r2,101f4 <__umoddi3+0x54c>
   101f0:	1cc7883a 	add	r3,r3,r19
   101f4:	18a3c83a 	sub	r17,r3,r2
   101f8:	003f2906 	br	fea0 <__alt_data_end+0xfffefea0>
   101fc:	e48fc83a 	sub	r7,fp,r18
   10200:	1d49c83a 	sub	r4,r3,r21
   10204:	e1f9803a 	cmpltu	fp,fp,r7
   10208:	2739c83a 	sub	fp,r4,fp
   1020c:	8f09c83a 	sub	r4,r17,fp
   10210:	003fc306 	br	10120 <__alt_data_end+0xffff0120>
   10214:	01000604 	movi	r4,24
   10218:	003ef906 	br	fe00 <__alt_data_end+0xfffefe00>
   1021c:	00800604 	movi	r2,24
   10220:	003f1306 	br	fe70 <__alt_data_end+0xfffefe70>
   10224:	01000604 	movi	r4,24
   10228:	003eb606 	br	fd04 <__alt_data_end+0xfffefd04>
   1022c:	40bf902e 	bgeu	r8,r2,10070 <__alt_data_end+0xffff0070>
   10230:	b5bfff84 	addi	r22,r22,-2
   10234:	4551883a 	add	r8,r8,r21
   10238:	003f8e06 	br	10074 <__alt_data_end+0xffff0074>
   1023c:	18bf762e 	bgeu	r3,r2,10018 <__alt_data_end+0xffff0018>
   10240:	8c7fff84 	addi	r17,r17,-2
   10244:	1d47883a 	add	r3,r3,r21
   10248:	003f7406 	br	1001c <__alt_data_end+0xffff001c>
   1024c:	1cc7883a 	add	r3,r3,r19
   10250:	003ecd06 	br	fd88 <__alt_data_end+0xfffefd88>
   10254:	8005883a 	mov	r2,r16
   10258:	003ef806 	br	fe3c <__alt_data_end+0xfffefe3c>
   1025c:	873fe736 	bltu	r16,fp,101fc <__alt_data_end+0xffff01fc>
   10260:	e00f883a 	mov	r7,fp
   10264:	0009883a 	mov	r4,zero
   10268:	003fad06 	br	10120 <__alt_data_end+0xffff0120>

0001026c <__eqdf2>:
   1026c:	2804d53a 	srli	r2,r5,20
   10270:	3806d53a 	srli	r3,r7,20
   10274:	02000434 	movhi	r8,16
   10278:	423fffc4 	addi	r8,r8,-1
   1027c:	1081ffcc 	andi	r2,r2,2047
   10280:	0281ffc4 	movi	r10,2047
   10284:	2a12703a 	and	r9,r5,r8
   10288:	18c1ffcc 	andi	r3,r3,2047
   1028c:	3a10703a 	and	r8,r7,r8
   10290:	280ad7fa 	srli	r5,r5,31
   10294:	380ed7fa 	srli	r7,r7,31
   10298:	12801026 	beq	r2,r10,102dc <__eqdf2+0x70>
   1029c:	0281ffc4 	movi	r10,2047
   102a0:	1a800a26 	beq	r3,r10,102cc <__eqdf2+0x60>
   102a4:	10c00226 	beq	r2,r3,102b0 <__eqdf2+0x44>
   102a8:	00800044 	movi	r2,1
   102ac:	f800283a 	ret
   102b0:	4a3ffd1e 	bne	r9,r8,102a8 <__alt_data_end+0xffff02a8>
   102b4:	21bffc1e 	bne	r4,r6,102a8 <__alt_data_end+0xffff02a8>
   102b8:	29c00c26 	beq	r5,r7,102ec <__eqdf2+0x80>
   102bc:	103ffa1e 	bne	r2,zero,102a8 <__alt_data_end+0xffff02a8>
   102c0:	2244b03a 	or	r2,r4,r9
   102c4:	1004c03a 	cmpne	r2,r2,zero
   102c8:	f800283a 	ret
   102cc:	3214b03a 	or	r10,r6,r8
   102d0:	503ff426 	beq	r10,zero,102a4 <__alt_data_end+0xffff02a4>
   102d4:	00800044 	movi	r2,1
   102d8:	f800283a 	ret
   102dc:	2254b03a 	or	r10,r4,r9
   102e0:	503fee26 	beq	r10,zero,1029c <__alt_data_end+0xffff029c>
   102e4:	00800044 	movi	r2,1
   102e8:	f800283a 	ret
   102ec:	0005883a 	mov	r2,zero
   102f0:	f800283a 	ret

000102f4 <__ledf2>:
   102f4:	2804d53a 	srli	r2,r5,20
   102f8:	3810d53a 	srli	r8,r7,20
   102fc:	00c00434 	movhi	r3,16
   10300:	18ffffc4 	addi	r3,r3,-1
   10304:	1081ffcc 	andi	r2,r2,2047
   10308:	0241ffc4 	movi	r9,2047
   1030c:	28d4703a 	and	r10,r5,r3
   10310:	4201ffcc 	andi	r8,r8,2047
   10314:	38c6703a 	and	r3,r7,r3
   10318:	280ad7fa 	srli	r5,r5,31
   1031c:	380ed7fa 	srli	r7,r7,31
   10320:	12401f26 	beq	r2,r9,103a0 <__ledf2+0xac>
   10324:	0241ffc4 	movi	r9,2047
   10328:	42401426 	beq	r8,r9,1037c <__ledf2+0x88>
   1032c:	1000091e 	bne	r2,zero,10354 <__ledf2+0x60>
   10330:	2296b03a 	or	r11,r4,r10
   10334:	5813003a 	cmpeq	r9,r11,zero
   10338:	29403fcc 	andi	r5,r5,255
   1033c:	40000a1e 	bne	r8,zero,10368 <__ledf2+0x74>
   10340:	30d8b03a 	or	r12,r6,r3
   10344:	6000081e 	bne	r12,zero,10368 <__ledf2+0x74>
   10348:	0005883a 	mov	r2,zero
   1034c:	5800111e 	bne	r11,zero,10394 <__ledf2+0xa0>
   10350:	f800283a 	ret
   10354:	29403fcc 	andi	r5,r5,255
   10358:	40000c1e 	bne	r8,zero,1038c <__ledf2+0x98>
   1035c:	30d2b03a 	or	r9,r6,r3
   10360:	48000c26 	beq	r9,zero,10394 <__ledf2+0xa0>
   10364:	0013883a 	mov	r9,zero
   10368:	39c03fcc 	andi	r7,r7,255
   1036c:	48000826 	beq	r9,zero,10390 <__ledf2+0x9c>
   10370:	38001126 	beq	r7,zero,103b8 <__ledf2+0xc4>
   10374:	00800044 	movi	r2,1
   10378:	f800283a 	ret
   1037c:	30d2b03a 	or	r9,r6,r3
   10380:	483fea26 	beq	r9,zero,1032c <__alt_data_end+0xffff032c>
   10384:	00800084 	movi	r2,2
   10388:	f800283a 	ret
   1038c:	39c03fcc 	andi	r7,r7,255
   10390:	39400726 	beq	r7,r5,103b0 <__ledf2+0xbc>
   10394:	2800081e 	bne	r5,zero,103b8 <__ledf2+0xc4>
   10398:	00800044 	movi	r2,1
   1039c:	f800283a 	ret
   103a0:	2292b03a 	or	r9,r4,r10
   103a4:	483fdf26 	beq	r9,zero,10324 <__alt_data_end+0xffff0324>
   103a8:	00800084 	movi	r2,2
   103ac:	f800283a 	ret
   103b0:	4080030e 	bge	r8,r2,103c0 <__ledf2+0xcc>
   103b4:	383fef26 	beq	r7,zero,10374 <__alt_data_end+0xffff0374>
   103b8:	00bfffc4 	movi	r2,-1
   103bc:	f800283a 	ret
   103c0:	123feb16 	blt	r2,r8,10370 <__alt_data_end+0xffff0370>
   103c4:	1abff336 	bltu	r3,r10,10394 <__alt_data_end+0xffff0394>
   103c8:	50c00326 	beq	r10,r3,103d8 <__ledf2+0xe4>
   103cc:	50c0042e 	bgeu	r10,r3,103e0 <__ledf2+0xec>
   103d0:	283fe81e 	bne	r5,zero,10374 <__alt_data_end+0xffff0374>
   103d4:	003ff806 	br	103b8 <__alt_data_end+0xffff03b8>
   103d8:	313fee36 	bltu	r6,r4,10394 <__alt_data_end+0xffff0394>
   103dc:	21bffc36 	bltu	r4,r6,103d0 <__alt_data_end+0xffff03d0>
   103e0:	0005883a 	mov	r2,zero
   103e4:	f800283a 	ret

000103e8 <__fixdfsi>:
   103e8:	280cd53a 	srli	r6,r5,20
   103ec:	00c00434 	movhi	r3,16
   103f0:	18ffffc4 	addi	r3,r3,-1
   103f4:	3181ffcc 	andi	r6,r6,2047
   103f8:	01c0ff84 	movi	r7,1022
   103fc:	28c6703a 	and	r3,r5,r3
   10400:	280ad7fa 	srli	r5,r5,31
   10404:	3980120e 	bge	r7,r6,10450 <__fixdfsi+0x68>
   10408:	00810744 	movi	r2,1053
   1040c:	11800c16 	blt	r2,r6,10440 <__fixdfsi+0x58>
   10410:	00810cc4 	movi	r2,1075
   10414:	1185c83a 	sub	r2,r2,r6
   10418:	01c007c4 	movi	r7,31
   1041c:	18c00434 	orhi	r3,r3,16
   10420:	38800d16 	blt	r7,r2,10458 <__fixdfsi+0x70>
   10424:	31befb44 	addi	r6,r6,-1043
   10428:	2084d83a 	srl	r2,r4,r2
   1042c:	1986983a 	sll	r3,r3,r6
   10430:	1884b03a 	or	r2,r3,r2
   10434:	28000726 	beq	r5,zero,10454 <__fixdfsi+0x6c>
   10438:	0085c83a 	sub	r2,zero,r2
   1043c:	f800283a 	ret
   10440:	00a00034 	movhi	r2,32768
   10444:	10bfffc4 	addi	r2,r2,-1
   10448:	2885883a 	add	r2,r5,r2
   1044c:	f800283a 	ret
   10450:	0005883a 	mov	r2,zero
   10454:	f800283a 	ret
   10458:	008104c4 	movi	r2,1043
   1045c:	1185c83a 	sub	r2,r2,r6
   10460:	1884d83a 	srl	r2,r3,r2
   10464:	003ff306 	br	10434 <__alt_data_end+0xffff0434>

00010468 <__floatunsidf>:
   10468:	defffe04 	addi	sp,sp,-8
   1046c:	dc000015 	stw	r16,0(sp)
   10470:	dfc00115 	stw	ra,4(sp)
   10474:	2021883a 	mov	r16,r4
   10478:	20002226 	beq	r4,zero,10504 <__floatunsidf+0x9c>
   1047c:	00049f80 	call	49f8 <__clzsi2>
   10480:	01010784 	movi	r4,1054
   10484:	2089c83a 	sub	r4,r4,r2
   10488:	01810cc4 	movi	r6,1075
   1048c:	310dc83a 	sub	r6,r6,r4
   10490:	00c007c4 	movi	r3,31
   10494:	1980120e 	bge	r3,r6,104e0 <__floatunsidf+0x78>
   10498:	00c104c4 	movi	r3,1043
   1049c:	1907c83a 	sub	r3,r3,r4
   104a0:	80ca983a 	sll	r5,r16,r3
   104a4:	00800434 	movhi	r2,16
   104a8:	10bfffc4 	addi	r2,r2,-1
   104ac:	2101ffcc 	andi	r4,r4,2047
   104b0:	0021883a 	mov	r16,zero
   104b4:	288a703a 	and	r5,r5,r2
   104b8:	2008953a 	slli	r4,r4,20
   104bc:	00c00434 	movhi	r3,16
   104c0:	18ffffc4 	addi	r3,r3,-1
   104c4:	28c6703a 	and	r3,r5,r3
   104c8:	8005883a 	mov	r2,r16
   104cc:	1906b03a 	or	r3,r3,r4
   104d0:	dfc00117 	ldw	ra,4(sp)
   104d4:	dc000017 	ldw	r16,0(sp)
   104d8:	dec00204 	addi	sp,sp,8
   104dc:	f800283a 	ret
   104e0:	00c002c4 	movi	r3,11
   104e4:	188bc83a 	sub	r5,r3,r2
   104e8:	814ad83a 	srl	r5,r16,r5
   104ec:	00c00434 	movhi	r3,16
   104f0:	18ffffc4 	addi	r3,r3,-1
   104f4:	81a0983a 	sll	r16,r16,r6
   104f8:	2101ffcc 	andi	r4,r4,2047
   104fc:	28ca703a 	and	r5,r5,r3
   10500:	003fed06 	br	104b8 <__alt_data_end+0xffff04b8>
   10504:	0009883a 	mov	r4,zero
   10508:	000b883a 	mov	r5,zero
   1050c:	003fea06 	br	104b8 <__alt_data_end+0xffff04b8>

00010510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10510:	defffe04 	addi	sp,sp,-8
   10514:	dfc00115 	stw	ra,4(sp)
   10518:	df000015 	stw	fp,0(sp)
   1051c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10520:	d0a00e17 	ldw	r2,-32712(gp)
   10524:	10000326 	beq	r2,zero,10534 <alt_get_errno+0x24>
   10528:	d0a00e17 	ldw	r2,-32712(gp)
   1052c:	103ee83a 	callr	r2
   10530:	00000106 	br	10538 <alt_get_errno+0x28>
   10534:	d0a6d104 	addi	r2,gp,-25788
}
   10538:	e037883a 	mov	sp,fp
   1053c:	dfc00117 	ldw	ra,4(sp)
   10540:	df000017 	ldw	fp,0(sp)
   10544:	dec00204 	addi	sp,sp,8
   10548:	f800283a 	ret

0001054c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1054c:	defffb04 	addi	sp,sp,-20
   10550:	dfc00415 	stw	ra,16(sp)
   10554:	df000315 	stw	fp,12(sp)
   10558:	df000304 	addi	fp,sp,12
   1055c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   10560:	e0bfff17 	ldw	r2,-4(fp)
   10564:	10000816 	blt	r2,zero,10588 <close+0x3c>
   10568:	01400304 	movi	r5,12
   1056c:	e13fff17 	ldw	r4,-4(fp)
   10570:	0001a300 	call	1a30 <__mulsi3>
   10574:	1007883a 	mov	r3,r2
   10578:	00800074 	movhi	r2,1
   1057c:	108ef104 	addi	r2,r2,15300
   10580:	1885883a 	add	r2,r3,r2
   10584:	00000106 	br	1058c <close+0x40>
   10588:	0005883a 	mov	r2,zero
   1058c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   10590:	e0bffd17 	ldw	r2,-12(fp)
   10594:	10001926 	beq	r2,zero,105fc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   10598:	e0bffd17 	ldw	r2,-12(fp)
   1059c:	10800017 	ldw	r2,0(r2)
   105a0:	10800417 	ldw	r2,16(r2)
   105a4:	10000626 	beq	r2,zero,105c0 <close+0x74>
   105a8:	e0bffd17 	ldw	r2,-12(fp)
   105ac:	10800017 	ldw	r2,0(r2)
   105b0:	10800417 	ldw	r2,16(r2)
   105b4:	e13ffd17 	ldw	r4,-12(fp)
   105b8:	103ee83a 	callr	r2
   105bc:	00000106 	br	105c4 <close+0x78>
   105c0:	0005883a 	mov	r2,zero
   105c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   105c8:	e13fff17 	ldw	r4,-4(fp)
   105cc:	00110e00 	call	110e0 <alt_release_fd>
    if (rval < 0)
   105d0:	e0bffe17 	ldw	r2,-8(fp)
   105d4:	1000070e 	bge	r2,zero,105f4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   105d8:	00105100 	call	10510 <alt_get_errno>
   105dc:	1007883a 	mov	r3,r2
   105e0:	e0bffe17 	ldw	r2,-8(fp)
   105e4:	0085c83a 	sub	r2,zero,r2
   105e8:	18800015 	stw	r2,0(r3)
      return -1;
   105ec:	00bfffc4 	movi	r2,-1
   105f0:	00000706 	br	10610 <close+0xc4>
    }
    return 0;
   105f4:	0005883a 	mov	r2,zero
   105f8:	00000506 	br	10610 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   105fc:	00105100 	call	10510 <alt_get_errno>
   10600:	1007883a 	mov	r3,r2
   10604:	00801444 	movi	r2,81
   10608:	18800015 	stw	r2,0(r3)
    return -1;
   1060c:	00bfffc4 	movi	r2,-1
  }
}
   10610:	e037883a 	mov	sp,fp
   10614:	dfc00117 	ldw	ra,4(sp)
   10618:	df000017 	ldw	fp,0(sp)
   1061c:	dec00204 	addi	sp,sp,8
   10620:	f800283a 	ret

00010624 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   10624:	defffc04 	addi	sp,sp,-16
   10628:	df000315 	stw	fp,12(sp)
   1062c:	df000304 	addi	fp,sp,12
   10630:	e13ffd15 	stw	r4,-12(fp)
   10634:	e17ffe15 	stw	r5,-8(fp)
   10638:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1063c:	e0bfff17 	ldw	r2,-4(fp)
}
   10640:	e037883a 	mov	sp,fp
   10644:	df000017 	ldw	fp,0(sp)
   10648:	dec00104 	addi	sp,sp,4
   1064c:	f800283a 	ret

00010650 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10650:	defffd04 	addi	sp,sp,-12
   10654:	df000215 	stw	fp,8(sp)
   10658:	df000204 	addi	fp,sp,8
   1065c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10660:	0001883a 	nop
   10664:	e0bfff17 	ldw	r2,-4(fp)
   10668:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1066c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10670:	10000226 	beq	r2,zero,1067c <_exit+0x2c>
    ALT_SIM_FAIL();
   10674:	002af070 	cmpltui	zero,zero,43969
   10678:	00000106 	br	10680 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1067c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10680:	003fff06 	br	10680 <__alt_data_end+0xffff0680>

00010684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10684:	defffe04 	addi	sp,sp,-8
   10688:	dfc00115 	stw	ra,4(sp)
   1068c:	df000015 	stw	fp,0(sp)
   10690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10694:	d0a00e17 	ldw	r2,-32712(gp)
   10698:	10000326 	beq	r2,zero,106a8 <alt_get_errno+0x24>
   1069c:	d0a00e17 	ldw	r2,-32712(gp)
   106a0:	103ee83a 	callr	r2
   106a4:	00000106 	br	106ac <alt_get_errno+0x28>
   106a8:	d0a6d104 	addi	r2,gp,-25788
}
   106ac:	e037883a 	mov	sp,fp
   106b0:	dfc00117 	ldw	ra,4(sp)
   106b4:	df000017 	ldw	fp,0(sp)
   106b8:	dec00204 	addi	sp,sp,8
   106bc:	f800283a 	ret

000106c0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   106c0:	defffb04 	addi	sp,sp,-20
   106c4:	dfc00415 	stw	ra,16(sp)
   106c8:	df000315 	stw	fp,12(sp)
   106cc:	df000304 	addi	fp,sp,12
   106d0:	e13ffe15 	stw	r4,-8(fp)
   106d4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   106d8:	e0bffe17 	ldw	r2,-8(fp)
   106dc:	10000816 	blt	r2,zero,10700 <fstat+0x40>
   106e0:	01400304 	movi	r5,12
   106e4:	e13ffe17 	ldw	r4,-8(fp)
   106e8:	0001a300 	call	1a30 <__mulsi3>
   106ec:	1007883a 	mov	r3,r2
   106f0:	00800074 	movhi	r2,1
   106f4:	108ef104 	addi	r2,r2,15300
   106f8:	1885883a 	add	r2,r3,r2
   106fc:	00000106 	br	10704 <fstat+0x44>
   10700:	0005883a 	mov	r2,zero
   10704:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   10708:	e0bffd17 	ldw	r2,-12(fp)
   1070c:	10001026 	beq	r2,zero,10750 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   10710:	e0bffd17 	ldw	r2,-12(fp)
   10714:	10800017 	ldw	r2,0(r2)
   10718:	10800817 	ldw	r2,32(r2)
   1071c:	10000726 	beq	r2,zero,1073c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   10720:	e0bffd17 	ldw	r2,-12(fp)
   10724:	10800017 	ldw	r2,0(r2)
   10728:	10800817 	ldw	r2,32(r2)
   1072c:	e17fff17 	ldw	r5,-4(fp)
   10730:	e13ffd17 	ldw	r4,-12(fp)
   10734:	103ee83a 	callr	r2
   10738:	00000a06 	br	10764 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1073c:	e0bfff17 	ldw	r2,-4(fp)
   10740:	00c80004 	movi	r3,8192
   10744:	10c00115 	stw	r3,4(r2)
      return 0;
   10748:	0005883a 	mov	r2,zero
   1074c:	00000506 	br	10764 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10750:	00106840 	call	10684 <alt_get_errno>
   10754:	1007883a 	mov	r3,r2
   10758:	00801444 	movi	r2,81
   1075c:	18800015 	stw	r2,0(r3)
    return -1;
   10760:	00bfffc4 	movi	r2,-1
  }
}
   10764:	e037883a 	mov	sp,fp
   10768:	dfc00117 	ldw	ra,4(sp)
   1076c:	df000017 	ldw	fp,0(sp)
   10770:	dec00204 	addi	sp,sp,8
   10774:	f800283a 	ret

00010778 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   10778:	defff404 	addi	sp,sp,-48
   1077c:	dfc00b15 	stw	ra,44(sp)
   10780:	df000a15 	stw	fp,40(sp)
   10784:	dd000915 	stw	r20,36(sp)
   10788:	dcc00815 	stw	r19,32(sp)
   1078c:	dc800715 	stw	r18,28(sp)
   10790:	dc400615 	stw	r17,24(sp)
   10794:	dc000515 	stw	r16,20(sp)
   10798:	df000a04 	addi	fp,sp,40
   1079c:	e13ff915 	stw	r4,-28(fp)
   107a0:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
   107a4:	e0bffa17 	ldw	r2,-24(fp)
   107a8:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   107ac:	d0a6e017 	ldw	r2,-25728(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
   107b0:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   107b4:	d0a6df17 	ldw	r2,-25732(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
   107b8:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   107bc:	e0bff817 	ldw	r2,-32(fp)
   107c0:	10005f26 	beq	r2,zero,10940 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   107c4:	d0a6da17 	ldw	r2,-25752(gp)
   107c8:	1029883a 	mov	r20,r2
   107cc:	e17ff817 	ldw	r5,-32(fp)
   107d0:	e13ff717 	ldw	r4,-36(fp)
   107d4:	0004b540 	call	4b54 <__udivsi3>
   107d8:	a085883a 	add	r2,r20,r2
   107dc:	1007883a 	mov	r3,r2
   107e0:	e0bff917 	ldw	r2,-28(fp)
   107e4:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   107e8:	d0a6db17 	ldw	r2,-25748(gp)
   107ec:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   107f0:	e0bff717 	ldw	r2,-36(fp)
   107f4:	1021883a 	mov	r16,r2
   107f8:	0023883a 	mov	r17,zero
   107fc:	e17ff817 	ldw	r5,-32(fp)
   10800:	010003f4 	movhi	r4,15
   10804:	21109004 	addi	r4,r4,16960
   10808:	0004b540 	call	4b54 <__udivsi3>
   1080c:	1025883a 	mov	r18,r2
   10810:	0027883a 	mov	r19,zero
   10814:	900d883a 	mov	r6,r18
   10818:	980f883a 	mov	r7,r19
   1081c:	8009883a 	mov	r4,r16
   10820:	880b883a 	mov	r5,r17
   10824:	000f5a00 	call	f5a0 <__muldi3>
   10828:	1009883a 	mov	r4,r2
   1082c:	180b883a 	mov	r5,r3
   10830:	2005883a 	mov	r2,r4
   10834:	2807883a 	mov	r3,r5
   10838:	018003f4 	movhi	r6,15
   1083c:	31909004 	addi	r6,r6,16960
   10840:	000f883a 	mov	r7,zero
   10844:	1009883a 	mov	r4,r2
   10848:	180b883a 	mov	r5,r3
   1084c:	000fca80 	call	fca8 <__umoddi3>
   10850:	1009883a 	mov	r4,r2
   10854:	180b883a 	mov	r5,r3
   10858:	2005883a 	mov	r2,r4
   1085c:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   10860:	a085883a 	add	r2,r20,r2
   10864:	1007883a 	mov	r3,r2
   10868:	e0bff917 	ldw	r2,-28(fp)
   1086c:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   10870:	00001406 	br	108c4 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
   10874:	e0bff917 	ldw	r2,-28(fp)
   10878:	10800017 	ldw	r2,0(r2)
   1087c:	00800516 	blt	zero,r2,10894 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
   10880:	e0bff917 	ldw	r2,-28(fp)
   10884:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
   10888:	e0bff917 	ldw	r2,-28(fp)
   1088c:	10000115 	stw	zero,4(r2)
          break;
   10890:	00000f06 	br	108d0 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
   10894:	e0bff917 	ldw	r2,-28(fp)
   10898:	10800017 	ldw	r2,0(r2)
   1089c:	10ffffc4 	addi	r3,r2,-1
   108a0:	e0bff917 	ldw	r2,-28(fp)
   108a4:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
   108a8:	e0bff917 	ldw	r2,-28(fp)
   108ac:	10c00117 	ldw	r3,4(r2)
   108b0:	008003f4 	movhi	r2,15
   108b4:	10909004 	addi	r2,r2,16960
   108b8:	1887883a 	add	r3,r3,r2
   108bc:	e0bff917 	ldw	r2,-28(fp)
   108c0:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   108c4:	e0bff917 	ldw	r2,-28(fp)
   108c8:	10800117 	ldw	r2,4(r2)
   108cc:	103fe916 	blt	r2,zero,10874 <__alt_data_end+0xffff0874>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   108d0:	00000c06 	br	10904 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
   108d4:	e0bff917 	ldw	r2,-28(fp)
   108d8:	10800017 	ldw	r2,0(r2)
   108dc:	10c00044 	addi	r3,r2,1
   108e0:	e0bff917 	ldw	r2,-28(fp)
   108e4:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
   108e8:	e0bff917 	ldw	r2,-28(fp)
   108ec:	10c00117 	ldw	r3,4(r2)
   108f0:	00bffc74 	movhi	r2,65521
   108f4:	10af7004 	addi	r2,r2,-16960
   108f8:	1887883a 	add	r3,r3,r2
   108fc:	e0bff917 	ldw	r2,-28(fp)
   10900:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   10904:	e0bff917 	ldw	r2,-28(fp)
   10908:	10c00117 	ldw	r3,4(r2)
   1090c:	008003f4 	movhi	r2,15
   10910:	10908fc4 	addi	r2,r2,16959
   10914:	10ffef16 	blt	r2,r3,108d4 <__alt_data_end+0xffff08d4>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   10918:	e0bff617 	ldw	r2,-40(fp)
   1091c:	10000626 	beq	r2,zero,10938 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   10920:	d0e6d817 	ldw	r3,-25760(gp)
   10924:	e0bff617 	ldw	r2,-40(fp)
   10928:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   1092c:	d0e6d917 	ldw	r3,-25756(gp)
   10930:	e0bff617 	ldw	r2,-40(fp)
   10934:	10c00115 	stw	r3,4(r2)
    }

    return 0;
   10938:	0005883a 	mov	r2,zero
   1093c:	00000106 	br	10944 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
   10940:	00bfde84 	movi	r2,-134
}
   10944:	e6fffb04 	addi	sp,fp,-20
   10948:	dfc00617 	ldw	ra,24(sp)
   1094c:	df000517 	ldw	fp,20(sp)
   10950:	dd000417 	ldw	r20,16(sp)
   10954:	dcc00317 	ldw	r19,12(sp)
   10958:	dc800217 	ldw	r18,8(sp)
   1095c:	dc400117 	ldw	r17,4(sp)
   10960:	dc000017 	ldw	r16,0(sp)
   10964:	dec00704 	addi	sp,sp,28
   10968:	f800283a 	ret

0001096c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1096c:	defffe04 	addi	sp,sp,-8
   10970:	dfc00115 	stw	ra,4(sp)
   10974:	df000015 	stw	fp,0(sp)
   10978:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1097c:	d0a00e17 	ldw	r2,-32712(gp)
   10980:	10000326 	beq	r2,zero,10990 <alt_get_errno+0x24>
   10984:	d0a00e17 	ldw	r2,-32712(gp)
   10988:	103ee83a 	callr	r2
   1098c:	00000106 	br	10994 <alt_get_errno+0x28>
   10990:	d0a6d104 	addi	r2,gp,-25788
}
   10994:	e037883a 	mov	sp,fp
   10998:	dfc00117 	ldw	ra,4(sp)
   1099c:	df000017 	ldw	fp,0(sp)
   109a0:	dec00204 	addi	sp,sp,8
   109a4:	f800283a 	ret

000109a8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   109a8:	deffed04 	addi	sp,sp,-76
   109ac:	dfc01215 	stw	ra,72(sp)
   109b0:	df001115 	stw	fp,68(sp)
   109b4:	df001104 	addi	fp,sp,68
   109b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   109bc:	e0bfff17 	ldw	r2,-4(fp)
   109c0:	10000816 	blt	r2,zero,109e4 <isatty+0x3c>
   109c4:	01400304 	movi	r5,12
   109c8:	e13fff17 	ldw	r4,-4(fp)
   109cc:	0001a300 	call	1a30 <__mulsi3>
   109d0:	1007883a 	mov	r3,r2
   109d4:	00800074 	movhi	r2,1
   109d8:	108ef104 	addi	r2,r2,15300
   109dc:	1885883a 	add	r2,r3,r2
   109e0:	00000106 	br	109e8 <isatty+0x40>
   109e4:	0005883a 	mov	r2,zero
   109e8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   109ec:	e0bfef17 	ldw	r2,-68(fp)
   109f0:	10000e26 	beq	r2,zero,10a2c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   109f4:	e0bfef17 	ldw	r2,-68(fp)
   109f8:	10800017 	ldw	r2,0(r2)
   109fc:	10800817 	ldw	r2,32(r2)
   10a00:	1000021e 	bne	r2,zero,10a0c <isatty+0x64>
    {
      return 1;
   10a04:	00800044 	movi	r2,1
   10a08:	00000d06 	br	10a40 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   10a0c:	e0bff004 	addi	r2,fp,-64
   10a10:	100b883a 	mov	r5,r2
   10a14:	e13fff17 	ldw	r4,-4(fp)
   10a18:	00106c00 	call	106c0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10a1c:	e0bff117 	ldw	r2,-60(fp)
   10a20:	10880020 	cmpeqi	r2,r2,8192
   10a24:	10803fcc 	andi	r2,r2,255
   10a28:	00000506 	br	10a40 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10a2c:	001096c0 	call	1096c <alt_get_errno>
   10a30:	1007883a 	mov	r3,r2
   10a34:	00801444 	movi	r2,81
   10a38:	18800015 	stw	r2,0(r3)
    return 0;
   10a3c:	0005883a 	mov	r2,zero
  }
}
   10a40:	e037883a 	mov	sp,fp
   10a44:	dfc00117 	ldw	ra,4(sp)
   10a48:	df000017 	ldw	fp,0(sp)
   10a4c:	dec00204 	addi	sp,sp,8
   10a50:	f800283a 	ret

00010a54 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10a54:	defffc04 	addi	sp,sp,-16
   10a58:	df000315 	stw	fp,12(sp)
   10a5c:	df000304 	addi	fp,sp,12
   10a60:	e13ffd15 	stw	r4,-12(fp)
   10a64:	e17ffe15 	stw	r5,-8(fp)
   10a68:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10a6c:	e0fffe17 	ldw	r3,-8(fp)
   10a70:	e0bffd17 	ldw	r2,-12(fp)
   10a74:	18800c26 	beq	r3,r2,10aa8 <alt_load_section+0x54>
  {
    while( to != end )
   10a78:	00000806 	br	10a9c <alt_load_section+0x48>
    {
      *to++ = *from++;
   10a7c:	e0bffe17 	ldw	r2,-8(fp)
   10a80:	10c00104 	addi	r3,r2,4
   10a84:	e0fffe15 	stw	r3,-8(fp)
   10a88:	e0fffd17 	ldw	r3,-12(fp)
   10a8c:	19000104 	addi	r4,r3,4
   10a90:	e13ffd15 	stw	r4,-12(fp)
   10a94:	18c00017 	ldw	r3,0(r3)
   10a98:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10a9c:	e0fffe17 	ldw	r3,-8(fp)
   10aa0:	e0bfff17 	ldw	r2,-4(fp)
   10aa4:	18bff51e 	bne	r3,r2,10a7c <__alt_data_end+0xffff0a7c>
    {
      *to++ = *from++;
    }
  }
}
   10aa8:	0001883a 	nop
   10aac:	e037883a 	mov	sp,fp
   10ab0:	df000017 	ldw	fp,0(sp)
   10ab4:	dec00104 	addi	sp,sp,4
   10ab8:	f800283a 	ret

00010abc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10abc:	defffe04 	addi	sp,sp,-8
   10ac0:	dfc00115 	stw	ra,4(sp)
   10ac4:	df000015 	stw	fp,0(sp)
   10ac8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10acc:	01800074 	movhi	r6,1
   10ad0:	31937c04 	addi	r6,r6,19952
   10ad4:	01400074 	movhi	r5,1
   10ad8:	294cbe04 	addi	r5,r5,13048
   10adc:	01000074 	movhi	r4,1
   10ae0:	21137c04 	addi	r4,r4,19952
   10ae4:	0010a540 	call	10a54 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10ae8:	01800034 	movhi	r6,0
   10aec:	31808c04 	addi	r6,r6,560
   10af0:	01400034 	movhi	r5,0
   10af4:	29400804 	addi	r5,r5,32
   10af8:	01000034 	movhi	r4,0
   10afc:	21000804 	addi	r4,r4,32
   10b00:	0010a540 	call	10a54 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10b04:	01800074 	movhi	r6,1
   10b08:	318cbe04 	addi	r6,r6,13048
   10b0c:	01400074 	movhi	r5,1
   10b10:	294b3c04 	addi	r5,r5,11504
   10b14:	01000074 	movhi	r4,1
   10b18:	210b3c04 	addi	r4,r4,11504
   10b1c:	0010a540 	call	10a54 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10b20:	001224c0 	call	1224c <alt_dcache_flush_all>
  alt_icache_flush_all();
   10b24:	00126680 	call	12668 <alt_icache_flush_all>
}
   10b28:	0001883a 	nop
   10b2c:	e037883a 	mov	sp,fp
   10b30:	dfc00117 	ldw	ra,4(sp)
   10b34:	df000017 	ldw	fp,0(sp)
   10b38:	dec00204 	addi	sp,sp,8
   10b3c:	f800283a 	ret

00010b40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10b40:	defffe04 	addi	sp,sp,-8
   10b44:	dfc00115 	stw	ra,4(sp)
   10b48:	df000015 	stw	fp,0(sp)
   10b4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10b50:	d0a00e17 	ldw	r2,-32712(gp)
   10b54:	10000326 	beq	r2,zero,10b64 <alt_get_errno+0x24>
   10b58:	d0a00e17 	ldw	r2,-32712(gp)
   10b5c:	103ee83a 	callr	r2
   10b60:	00000106 	br	10b68 <alt_get_errno+0x28>
   10b64:	d0a6d104 	addi	r2,gp,-25788
}
   10b68:	e037883a 	mov	sp,fp
   10b6c:	dfc00117 	ldw	ra,4(sp)
   10b70:	df000017 	ldw	fp,0(sp)
   10b74:	dec00204 	addi	sp,sp,8
   10b78:	f800283a 	ret

00010b7c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   10b7c:	defff904 	addi	sp,sp,-28
   10b80:	dfc00615 	stw	ra,24(sp)
   10b84:	df000515 	stw	fp,20(sp)
   10b88:	df000504 	addi	fp,sp,20
   10b8c:	e13ffd15 	stw	r4,-12(fp)
   10b90:	e17ffe15 	stw	r5,-8(fp)
   10b94:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   10b98:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10b9c:	e0bffd17 	ldw	r2,-12(fp)
   10ba0:	10000816 	blt	r2,zero,10bc4 <lseek+0x48>
   10ba4:	01400304 	movi	r5,12
   10ba8:	e13ffd17 	ldw	r4,-12(fp)
   10bac:	0001a300 	call	1a30 <__mulsi3>
   10bb0:	1007883a 	mov	r3,r2
   10bb4:	00800074 	movhi	r2,1
   10bb8:	108ef104 	addi	r2,r2,15300
   10bbc:	1885883a 	add	r2,r3,r2
   10bc0:	00000106 	br	10bc8 <lseek+0x4c>
   10bc4:	0005883a 	mov	r2,zero
   10bc8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   10bcc:	e0bffc17 	ldw	r2,-16(fp)
   10bd0:	10001026 	beq	r2,zero,10c14 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   10bd4:	e0bffc17 	ldw	r2,-16(fp)
   10bd8:	10800017 	ldw	r2,0(r2)
   10bdc:	10800717 	ldw	r2,28(r2)
   10be0:	10000926 	beq	r2,zero,10c08 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   10be4:	e0bffc17 	ldw	r2,-16(fp)
   10be8:	10800017 	ldw	r2,0(r2)
   10bec:	10800717 	ldw	r2,28(r2)
   10bf0:	e1bfff17 	ldw	r6,-4(fp)
   10bf4:	e17ffe17 	ldw	r5,-8(fp)
   10bf8:	e13ffc17 	ldw	r4,-16(fp)
   10bfc:	103ee83a 	callr	r2
   10c00:	e0bffb15 	stw	r2,-20(fp)
   10c04:	00000506 	br	10c1c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   10c08:	00bfde84 	movi	r2,-134
   10c0c:	e0bffb15 	stw	r2,-20(fp)
   10c10:	00000206 	br	10c1c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   10c14:	00bfebc4 	movi	r2,-81
   10c18:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   10c1c:	e0bffb17 	ldw	r2,-20(fp)
   10c20:	1000070e 	bge	r2,zero,10c40 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   10c24:	0010b400 	call	10b40 <alt_get_errno>
   10c28:	1007883a 	mov	r3,r2
   10c2c:	e0bffb17 	ldw	r2,-20(fp)
   10c30:	0085c83a 	sub	r2,zero,r2
   10c34:	18800015 	stw	r2,0(r3)
    rc = -1;
   10c38:	00bfffc4 	movi	r2,-1
   10c3c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   10c40:	e0bffb17 	ldw	r2,-20(fp)
}
   10c44:	e037883a 	mov	sp,fp
   10c48:	dfc00117 	ldw	ra,4(sp)
   10c4c:	df000017 	ldw	fp,0(sp)
   10c50:	dec00204 	addi	sp,sp,8
   10c54:	f800283a 	ret

00010c58 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10c58:	defffd04 	addi	sp,sp,-12
   10c5c:	dfc00215 	stw	ra,8(sp)
   10c60:	df000115 	stw	fp,4(sp)
   10c64:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10c68:	0009883a 	mov	r4,zero
   10c6c:	00115280 	call	11528 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10c70:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10c74:	00115600 	call	11560 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10c78:	01800074 	movhi	r6,1
   10c7c:	318cb404 	addi	r6,r6,13008
   10c80:	01400074 	movhi	r5,1
   10c84:	294cb404 	addi	r5,r5,13008
   10c88:	01000074 	movhi	r4,1
   10c8c:	210cb404 	addi	r4,r4,13008
   10c90:	0012a0c0 	call	12a0c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10c94:	001234c0 	call	1234c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10c98:	01000074 	movhi	r4,1
   10c9c:	2108eb04 	addi	r4,r4,9132
   10ca0:	0012b480 	call	12b48 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10ca4:	d0a6dc17 	ldw	r2,-25744(gp)
   10ca8:	d0e6dd17 	ldw	r3,-25740(gp)
   10cac:	d126de17 	ldw	r4,-25736(gp)
   10cb0:	200d883a 	mov	r6,r4
   10cb4:	180b883a 	mov	r5,r3
   10cb8:	1009883a 	mov	r4,r2
   10cbc:	0000d680 	call	d68 <main>
   10cc0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10cc4:	01000044 	movi	r4,1
   10cc8:	001054c0 	call	1054c <close>
  exit (result);
   10ccc:	e13fff17 	ldw	r4,-4(fp)
   10cd0:	0004c2c0 	call	4c2c <exit>

00010cd4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   10cd4:	defffe04 	addi	sp,sp,-8
   10cd8:	df000115 	stw	fp,4(sp)
   10cdc:	df000104 	addi	fp,sp,4
   10ce0:	e13fff15 	stw	r4,-4(fp)
}
   10ce4:	0001883a 	nop
   10ce8:	e037883a 	mov	sp,fp
   10cec:	df000017 	ldw	fp,0(sp)
   10cf0:	dec00104 	addi	sp,sp,4
   10cf4:	f800283a 	ret

00010cf8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10cf8:	defffe04 	addi	sp,sp,-8
   10cfc:	df000115 	stw	fp,4(sp)
   10d00:	df000104 	addi	fp,sp,4
   10d04:	e13fff15 	stw	r4,-4(fp)
}
   10d08:	0001883a 	nop
   10d0c:	e037883a 	mov	sp,fp
   10d10:	df000017 	ldw	fp,0(sp)
   10d14:	dec00104 	addi	sp,sp,4
   10d18:	f800283a 	ret

00010d1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10d1c:	defffe04 	addi	sp,sp,-8
   10d20:	dfc00115 	stw	ra,4(sp)
   10d24:	df000015 	stw	fp,0(sp)
   10d28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10d2c:	d0a00e17 	ldw	r2,-32712(gp)
   10d30:	10000326 	beq	r2,zero,10d40 <alt_get_errno+0x24>
   10d34:	d0a00e17 	ldw	r2,-32712(gp)
   10d38:	103ee83a 	callr	r2
   10d3c:	00000106 	br	10d44 <alt_get_errno+0x28>
   10d40:	d0a6d104 	addi	r2,gp,-25788
}
   10d44:	e037883a 	mov	sp,fp
   10d48:	dfc00117 	ldw	ra,4(sp)
   10d4c:	df000017 	ldw	fp,0(sp)
   10d50:	dec00204 	addi	sp,sp,8
   10d54:	f800283a 	ret

00010d58 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10d58:	defffb04 	addi	sp,sp,-20
   10d5c:	dfc00415 	stw	ra,16(sp)
   10d60:	df000315 	stw	fp,12(sp)
   10d64:	dc000215 	stw	r16,8(sp)
   10d68:	df000304 	addi	fp,sp,12
   10d6c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10d70:	e0bffe17 	ldw	r2,-8(fp)
   10d74:	10800217 	ldw	r2,8(r2)
   10d78:	10d00034 	orhi	r3,r2,16384
   10d7c:	e0bffe17 	ldw	r2,-8(fp)
   10d80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10d84:	e03ffd15 	stw	zero,-12(fp)
   10d88:	00002306 	br	10e18 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10d8c:	04000074 	movhi	r16,1
   10d90:	840ef104 	addi	r16,r16,15300
   10d94:	e0bffd17 	ldw	r2,-12(fp)
   10d98:	01400304 	movi	r5,12
   10d9c:	1009883a 	mov	r4,r2
   10da0:	0001a300 	call	1a30 <__mulsi3>
   10da4:	8085883a 	add	r2,r16,r2
   10da8:	10c00017 	ldw	r3,0(r2)
   10dac:	e0bffe17 	ldw	r2,-8(fp)
   10db0:	10800017 	ldw	r2,0(r2)
   10db4:	1880151e 	bne	r3,r2,10e0c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10db8:	04000074 	movhi	r16,1
   10dbc:	840ef104 	addi	r16,r16,15300
   10dc0:	e0bffd17 	ldw	r2,-12(fp)
   10dc4:	01400304 	movi	r5,12
   10dc8:	1009883a 	mov	r4,r2
   10dcc:	0001a300 	call	1a30 <__mulsi3>
   10dd0:	8085883a 	add	r2,r16,r2
   10dd4:	10800204 	addi	r2,r2,8
   10dd8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10ddc:	10000b0e 	bge	r2,zero,10e0c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10de0:	01400304 	movi	r5,12
   10de4:	e13ffd17 	ldw	r4,-12(fp)
   10de8:	0001a300 	call	1a30 <__mulsi3>
   10dec:	1007883a 	mov	r3,r2
   10df0:	00800074 	movhi	r2,1
   10df4:	108ef104 	addi	r2,r2,15300
   10df8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10dfc:	e0bffe17 	ldw	r2,-8(fp)
   10e00:	18800226 	beq	r3,r2,10e0c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10e04:	00bffcc4 	movi	r2,-13
   10e08:	00000806 	br	10e2c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10e0c:	e0bffd17 	ldw	r2,-12(fp)
   10e10:	10800044 	addi	r2,r2,1
   10e14:	e0bffd15 	stw	r2,-12(fp)
   10e18:	d0a00d17 	ldw	r2,-32716(gp)
   10e1c:	1007883a 	mov	r3,r2
   10e20:	e0bffd17 	ldw	r2,-12(fp)
   10e24:	18bfd92e 	bgeu	r3,r2,10d8c <__alt_data_end+0xffff0d8c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10e28:	0005883a 	mov	r2,zero
}
   10e2c:	e6ffff04 	addi	sp,fp,-4
   10e30:	dfc00217 	ldw	ra,8(sp)
   10e34:	df000117 	ldw	fp,4(sp)
   10e38:	dc000017 	ldw	r16,0(sp)
   10e3c:	dec00304 	addi	sp,sp,12
   10e40:	f800283a 	ret

00010e44 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10e44:	defff604 	addi	sp,sp,-40
   10e48:	dfc00915 	stw	ra,36(sp)
   10e4c:	df000815 	stw	fp,32(sp)
   10e50:	df000804 	addi	fp,sp,32
   10e54:	e13ffd15 	stw	r4,-12(fp)
   10e58:	e17ffe15 	stw	r5,-8(fp)
   10e5c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10e60:	00bfffc4 	movi	r2,-1
   10e64:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10e68:	00bffb44 	movi	r2,-19
   10e6c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10e70:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10e74:	d1600b04 	addi	r5,gp,-32724
   10e78:	e13ffd17 	ldw	r4,-12(fp)
   10e7c:	001240c0 	call	1240c <alt_find_dev>
   10e80:	e0bff815 	stw	r2,-32(fp)
   10e84:	e0bff817 	ldw	r2,-32(fp)
   10e88:	1000051e 	bne	r2,zero,10ea0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10e8c:	e13ffd17 	ldw	r4,-12(fp)
   10e90:	001249c0 	call	1249c <alt_find_file>
   10e94:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10e98:	00800044 	movi	r2,1
   10e9c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10ea0:	e0bff817 	ldw	r2,-32(fp)
   10ea4:	10002b26 	beq	r2,zero,10f54 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10ea8:	e13ff817 	ldw	r4,-32(fp)
   10eac:	00125a40 	call	125a4 <alt_get_fd>
   10eb0:	e0bff915 	stw	r2,-28(fp)
   10eb4:	e0bff917 	ldw	r2,-28(fp)
   10eb8:	1000030e 	bge	r2,zero,10ec8 <open+0x84>
    {
      status = index;
   10ebc:	e0bff917 	ldw	r2,-28(fp)
   10ec0:	e0bffa15 	stw	r2,-24(fp)
   10ec4:	00002506 	br	10f5c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   10ec8:	01400304 	movi	r5,12
   10ecc:	e13ff917 	ldw	r4,-28(fp)
   10ed0:	0001a300 	call	1a30 <__mulsi3>
   10ed4:	1007883a 	mov	r3,r2
   10ed8:	00800074 	movhi	r2,1
   10edc:	108ef104 	addi	r2,r2,15300
   10ee0:	1885883a 	add	r2,r3,r2
   10ee4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10ee8:	e0fffe17 	ldw	r3,-8(fp)
   10eec:	00900034 	movhi	r2,16384
   10ef0:	10bfffc4 	addi	r2,r2,-1
   10ef4:	1886703a 	and	r3,r3,r2
   10ef8:	e0bffc17 	ldw	r2,-16(fp)
   10efc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10f00:	e0bffb17 	ldw	r2,-20(fp)
   10f04:	1000051e 	bne	r2,zero,10f1c <open+0xd8>
   10f08:	e13ffc17 	ldw	r4,-16(fp)
   10f0c:	0010d580 	call	10d58 <alt_file_locked>
   10f10:	e0bffa15 	stw	r2,-24(fp)
   10f14:	e0bffa17 	ldw	r2,-24(fp)
   10f18:	10001016 	blt	r2,zero,10f5c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10f1c:	e0bff817 	ldw	r2,-32(fp)
   10f20:	10800317 	ldw	r2,12(r2)
   10f24:	10000826 	beq	r2,zero,10f48 <open+0x104>
   10f28:	e0bff817 	ldw	r2,-32(fp)
   10f2c:	10800317 	ldw	r2,12(r2)
   10f30:	e1ffff17 	ldw	r7,-4(fp)
   10f34:	e1bffe17 	ldw	r6,-8(fp)
   10f38:	e17ffd17 	ldw	r5,-12(fp)
   10f3c:	e13ffc17 	ldw	r4,-16(fp)
   10f40:	103ee83a 	callr	r2
   10f44:	00000106 	br	10f4c <open+0x108>
   10f48:	0005883a 	mov	r2,zero
   10f4c:	e0bffa15 	stw	r2,-24(fp)
   10f50:	00000206 	br	10f5c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10f54:	00bffb44 	movi	r2,-19
   10f58:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10f5c:	e0bffa17 	ldw	r2,-24(fp)
   10f60:	1000090e 	bge	r2,zero,10f88 <open+0x144>
  {
    alt_release_fd (index);  
   10f64:	e13ff917 	ldw	r4,-28(fp)
   10f68:	00110e00 	call	110e0 <alt_release_fd>
    ALT_ERRNO = -status;
   10f6c:	0010d1c0 	call	10d1c <alt_get_errno>
   10f70:	1007883a 	mov	r3,r2
   10f74:	e0bffa17 	ldw	r2,-24(fp)
   10f78:	0085c83a 	sub	r2,zero,r2
   10f7c:	18800015 	stw	r2,0(r3)
    return -1;
   10f80:	00bfffc4 	movi	r2,-1
   10f84:	00000106 	br	10f8c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   10f88:	e0bff917 	ldw	r2,-28(fp)
}
   10f8c:	e037883a 	mov	sp,fp
   10f90:	dfc00117 	ldw	ra,4(sp)
   10f94:	df000017 	ldw	fp,0(sp)
   10f98:	dec00204 	addi	sp,sp,8
   10f9c:	f800283a 	ret

00010fa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10fa0:	defffe04 	addi	sp,sp,-8
   10fa4:	dfc00115 	stw	ra,4(sp)
   10fa8:	df000015 	stw	fp,0(sp)
   10fac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10fb0:	d0a00e17 	ldw	r2,-32712(gp)
   10fb4:	10000326 	beq	r2,zero,10fc4 <alt_get_errno+0x24>
   10fb8:	d0a00e17 	ldw	r2,-32712(gp)
   10fbc:	103ee83a 	callr	r2
   10fc0:	00000106 	br	10fc8 <alt_get_errno+0x28>
   10fc4:	d0a6d104 	addi	r2,gp,-25788
}
   10fc8:	e037883a 	mov	sp,fp
   10fcc:	dfc00117 	ldw	ra,4(sp)
   10fd0:	df000017 	ldw	fp,0(sp)
   10fd4:	dec00204 	addi	sp,sp,8
   10fd8:	f800283a 	ret

00010fdc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   10fdc:	defff904 	addi	sp,sp,-28
   10fe0:	dfc00615 	stw	ra,24(sp)
   10fe4:	df000515 	stw	fp,20(sp)
   10fe8:	df000504 	addi	fp,sp,20
   10fec:	e13ffd15 	stw	r4,-12(fp)
   10ff0:	e17ffe15 	stw	r5,-8(fp)
   10ff4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10ff8:	e0bffd17 	ldw	r2,-12(fp)
   10ffc:	10000816 	blt	r2,zero,11020 <read+0x44>
   11000:	01400304 	movi	r5,12
   11004:	e13ffd17 	ldw	r4,-12(fp)
   11008:	0001a300 	call	1a30 <__mulsi3>
   1100c:	1007883a 	mov	r3,r2
   11010:	00800074 	movhi	r2,1
   11014:	108ef104 	addi	r2,r2,15300
   11018:	1885883a 	add	r2,r3,r2
   1101c:	00000106 	br	11024 <read+0x48>
   11020:	0005883a 	mov	r2,zero
   11024:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11028:	e0bffb17 	ldw	r2,-20(fp)
   1102c:	10002226 	beq	r2,zero,110b8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   11030:	e0bffb17 	ldw	r2,-20(fp)
   11034:	10800217 	ldw	r2,8(r2)
   11038:	108000cc 	andi	r2,r2,3
   1103c:	10800060 	cmpeqi	r2,r2,1
   11040:	1000181e 	bne	r2,zero,110a4 <read+0xc8>
        (fd->dev->read))
   11044:	e0bffb17 	ldw	r2,-20(fp)
   11048:	10800017 	ldw	r2,0(r2)
   1104c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   11050:	10001426 	beq	r2,zero,110a4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   11054:	e0bffb17 	ldw	r2,-20(fp)
   11058:	10800017 	ldw	r2,0(r2)
   1105c:	10800517 	ldw	r2,20(r2)
   11060:	e0ffff17 	ldw	r3,-4(fp)
   11064:	180d883a 	mov	r6,r3
   11068:	e17ffe17 	ldw	r5,-8(fp)
   1106c:	e13ffb17 	ldw	r4,-20(fp)
   11070:	103ee83a 	callr	r2
   11074:	e0bffc15 	stw	r2,-16(fp)
   11078:	e0bffc17 	ldw	r2,-16(fp)
   1107c:	1000070e 	bge	r2,zero,1109c <read+0xc0>
        {
          ALT_ERRNO = -rval;
   11080:	0010fa00 	call	10fa0 <alt_get_errno>
   11084:	1007883a 	mov	r3,r2
   11088:	e0bffc17 	ldw	r2,-16(fp)
   1108c:	0085c83a 	sub	r2,zero,r2
   11090:	18800015 	stw	r2,0(r3)
          return -1;
   11094:	00bfffc4 	movi	r2,-1
   11098:	00000c06 	br	110cc <read+0xf0>
        }
        return rval;
   1109c:	e0bffc17 	ldw	r2,-16(fp)
   110a0:	00000a06 	br	110cc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   110a4:	0010fa00 	call	10fa0 <alt_get_errno>
   110a8:	1007883a 	mov	r3,r2
   110ac:	00800344 	movi	r2,13
   110b0:	18800015 	stw	r2,0(r3)
   110b4:	00000406 	br	110c8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   110b8:	0010fa00 	call	10fa0 <alt_get_errno>
   110bc:	1007883a 	mov	r3,r2
   110c0:	00801444 	movi	r2,81
   110c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   110c8:	00bfffc4 	movi	r2,-1
}
   110cc:	e037883a 	mov	sp,fp
   110d0:	dfc00117 	ldw	ra,4(sp)
   110d4:	df000017 	ldw	fp,0(sp)
   110d8:	dec00204 	addi	sp,sp,8
   110dc:	f800283a 	ret

000110e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   110e0:	defffc04 	addi	sp,sp,-16
   110e4:	dfc00315 	stw	ra,12(sp)
   110e8:	df000215 	stw	fp,8(sp)
   110ec:	dc000115 	stw	r16,4(sp)
   110f0:	df000204 	addi	fp,sp,8
   110f4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   110f8:	e0bffe17 	ldw	r2,-8(fp)
   110fc:	108000d0 	cmplti	r2,r2,3
   11100:	1000111e 	bne	r2,zero,11148 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   11104:	04000074 	movhi	r16,1
   11108:	840ef104 	addi	r16,r16,15300
   1110c:	e0bffe17 	ldw	r2,-8(fp)
   11110:	01400304 	movi	r5,12
   11114:	1009883a 	mov	r4,r2
   11118:	0001a300 	call	1a30 <__mulsi3>
   1111c:	8085883a 	add	r2,r16,r2
   11120:	10800204 	addi	r2,r2,8
   11124:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   11128:	04000074 	movhi	r16,1
   1112c:	840ef104 	addi	r16,r16,15300
   11130:	e0bffe17 	ldw	r2,-8(fp)
   11134:	01400304 	movi	r5,12
   11138:	1009883a 	mov	r4,r2
   1113c:	0001a300 	call	1a30 <__mulsi3>
   11140:	8085883a 	add	r2,r16,r2
   11144:	10000015 	stw	zero,0(r2)
  }
}
   11148:	0001883a 	nop
   1114c:	e6ffff04 	addi	sp,fp,-4
   11150:	dfc00217 	ldw	ra,8(sp)
   11154:	df000117 	ldw	fp,4(sp)
   11158:	dc000017 	ldw	r16,0(sp)
   1115c:	dec00304 	addi	sp,sp,12
   11160:	f800283a 	ret

00011164 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   11164:	defff904 	addi	sp,sp,-28
   11168:	df000615 	stw	fp,24(sp)
   1116c:	df000604 	addi	fp,sp,24
   11170:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11174:	0005303a 	rdctl	r2,status
   11178:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1117c:	e0fffe17 	ldw	r3,-8(fp)
   11180:	00bfff84 	movi	r2,-2
   11184:	1884703a 	and	r2,r3,r2
   11188:	1001703a 	wrctl	status,r2
  
  return context;
   1118c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   11190:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   11194:	d0a00f17 	ldw	r2,-32708(gp)
   11198:	10c000c4 	addi	r3,r2,3
   1119c:	00bfff04 	movi	r2,-4
   111a0:	1884703a 	and	r2,r3,r2
   111a4:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   111a8:	d0e00f17 	ldw	r3,-32708(gp)
   111ac:	e0bfff17 	ldw	r2,-4(fp)
   111b0:	1887883a 	add	r3,r3,r2
   111b4:	008000b4 	movhi	r2,2
   111b8:	10800004 	addi	r2,r2,0
   111bc:	10c0062e 	bgeu	r2,r3,111d8 <sbrk+0x74>
   111c0:	e0bffb17 	ldw	r2,-20(fp)
   111c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111c8:	e0bffa17 	ldw	r2,-24(fp)
   111cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   111d0:	00bfffc4 	movi	r2,-1
   111d4:	00000b06 	br	11204 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   111d8:	d0a00f17 	ldw	r2,-32708(gp)
   111dc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   111e0:	d0e00f17 	ldw	r3,-32708(gp)
   111e4:	e0bfff17 	ldw	r2,-4(fp)
   111e8:	1885883a 	add	r2,r3,r2
   111ec:	d0a00f15 	stw	r2,-32708(gp)
   111f0:	e0bffb17 	ldw	r2,-20(fp)
   111f4:	e0bffc15 	stw	r2,-16(fp)
   111f8:	e0bffc17 	ldw	r2,-16(fp)
   111fc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   11200:	e0bffd17 	ldw	r2,-12(fp)
} 
   11204:	e037883a 	mov	sp,fp
   11208:	df000017 	ldw	fp,0(sp)
   1120c:	dec00104 	addi	sp,sp,4
   11210:	f800283a 	ret

00011214 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11214:	defffa04 	addi	sp,sp,-24
   11218:	df000515 	stw	fp,20(sp)
   1121c:	df000504 	addi	fp,sp,20
   11220:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11224:	0005303a 	rdctl	r2,status
   11228:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1122c:	e0fffc17 	ldw	r3,-16(fp)
   11230:	00bfff84 	movi	r2,-2
   11234:	1884703a 	and	r2,r3,r2
   11238:	1001703a 	wrctl	status,r2
  
  return context;
   1123c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11240:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11244:	e0bfff17 	ldw	r2,-4(fp)
   11248:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1124c:	e0bffd17 	ldw	r2,-12(fp)
   11250:	10800017 	ldw	r2,0(r2)
   11254:	e0fffd17 	ldw	r3,-12(fp)
   11258:	18c00117 	ldw	r3,4(r3)
   1125c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11260:	e0bffd17 	ldw	r2,-12(fp)
   11264:	10800117 	ldw	r2,4(r2)
   11268:	e0fffd17 	ldw	r3,-12(fp)
   1126c:	18c00017 	ldw	r3,0(r3)
   11270:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11274:	e0bffd17 	ldw	r2,-12(fp)
   11278:	e0fffd17 	ldw	r3,-12(fp)
   1127c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11280:	e0bffd17 	ldw	r2,-12(fp)
   11284:	e0fffd17 	ldw	r3,-12(fp)
   11288:	10c00015 	stw	r3,0(r2)
   1128c:	e0bffb17 	ldw	r2,-20(fp)
   11290:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11294:	e0bffe17 	ldw	r2,-8(fp)
   11298:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1129c:	0001883a 	nop
   112a0:	e037883a 	mov	sp,fp
   112a4:	df000017 	ldw	fp,0(sp)
   112a8:	dec00104 	addi	sp,sp,4
   112ac:	f800283a 	ret

000112b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   112b0:	defffb04 	addi	sp,sp,-20
   112b4:	dfc00415 	stw	ra,16(sp)
   112b8:	df000315 	stw	fp,12(sp)
   112bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   112c0:	d0a01017 	ldw	r2,-32704(gp)
   112c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   112c8:	d0a6e017 	ldw	r2,-25728(gp)
   112cc:	10800044 	addi	r2,r2,1
   112d0:	d0a6e015 	stw	r2,-25728(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   112d4:	00002e06 	br	11390 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   112d8:	e0bffd17 	ldw	r2,-12(fp)
   112dc:	10800017 	ldw	r2,0(r2)
   112e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   112e4:	e0bffd17 	ldw	r2,-12(fp)
   112e8:	10800403 	ldbu	r2,16(r2)
   112ec:	10803fcc 	andi	r2,r2,255
   112f0:	10000426 	beq	r2,zero,11304 <alt_tick+0x54>
   112f4:	d0a6e017 	ldw	r2,-25728(gp)
   112f8:	1000021e 	bne	r2,zero,11304 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   112fc:	e0bffd17 	ldw	r2,-12(fp)
   11300:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11304:	e0bffd17 	ldw	r2,-12(fp)
   11308:	10800217 	ldw	r2,8(r2)
   1130c:	d0e6e017 	ldw	r3,-25728(gp)
   11310:	18801d36 	bltu	r3,r2,11388 <alt_tick+0xd8>
   11314:	e0bffd17 	ldw	r2,-12(fp)
   11318:	10800403 	ldbu	r2,16(r2)
   1131c:	10803fcc 	andi	r2,r2,255
   11320:	1000191e 	bne	r2,zero,11388 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11324:	e0bffd17 	ldw	r2,-12(fp)
   11328:	10800317 	ldw	r2,12(r2)
   1132c:	e0fffd17 	ldw	r3,-12(fp)
   11330:	18c00517 	ldw	r3,20(r3)
   11334:	1809883a 	mov	r4,r3
   11338:	103ee83a 	callr	r2
   1133c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11340:	e0bfff17 	ldw	r2,-4(fp)
   11344:	1000031e 	bne	r2,zero,11354 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11348:	e13ffd17 	ldw	r4,-12(fp)
   1134c:	00112140 	call	11214 <alt_alarm_stop>
   11350:	00000d06 	br	11388 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11354:	e0bffd17 	ldw	r2,-12(fp)
   11358:	10c00217 	ldw	r3,8(r2)
   1135c:	e0bfff17 	ldw	r2,-4(fp)
   11360:	1887883a 	add	r3,r3,r2
   11364:	e0bffd17 	ldw	r2,-12(fp)
   11368:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1136c:	e0bffd17 	ldw	r2,-12(fp)
   11370:	10c00217 	ldw	r3,8(r2)
   11374:	d0a6e017 	ldw	r2,-25728(gp)
   11378:	1880032e 	bgeu	r3,r2,11388 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1137c:	e0bffd17 	ldw	r2,-12(fp)
   11380:	00c00044 	movi	r3,1
   11384:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11388:	e0bffe17 	ldw	r2,-8(fp)
   1138c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11390:	e0fffd17 	ldw	r3,-12(fp)
   11394:	d0a01004 	addi	r2,gp,-32704
   11398:	18bfcf1e 	bne	r3,r2,112d8 <__alt_data_end+0xffff12d8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1139c:	0001883a 	nop
}
   113a0:	0001883a 	nop
   113a4:	e037883a 	mov	sp,fp
   113a8:	dfc00117 	ldw	ra,4(sp)
   113ac:	df000017 	ldw	fp,0(sp)
   113b0:	dec00204 	addi	sp,sp,8
   113b4:	f800283a 	ret

000113b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   113b8:	defffe04 	addi	sp,sp,-8
   113bc:	dfc00115 	stw	ra,4(sp)
   113c0:	df000015 	stw	fp,0(sp)
   113c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   113c8:	d0a00e17 	ldw	r2,-32712(gp)
   113cc:	10000326 	beq	r2,zero,113dc <alt_get_errno+0x24>
   113d0:	d0a00e17 	ldw	r2,-32712(gp)
   113d4:	103ee83a 	callr	r2
   113d8:	00000106 	br	113e0 <alt_get_errno+0x28>
   113dc:	d0a6d104 	addi	r2,gp,-25788
}
   113e0:	e037883a 	mov	sp,fp
   113e4:	dfc00117 	ldw	ra,4(sp)
   113e8:	df000017 	ldw	fp,0(sp)
   113ec:	dec00204 	addi	sp,sp,8
   113f0:	f800283a 	ret

000113f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   113f4:	defff904 	addi	sp,sp,-28
   113f8:	dfc00615 	stw	ra,24(sp)
   113fc:	df000515 	stw	fp,20(sp)
   11400:	df000504 	addi	fp,sp,20
   11404:	e13ffd15 	stw	r4,-12(fp)
   11408:	e17ffe15 	stw	r5,-8(fp)
   1140c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11410:	e0bffd17 	ldw	r2,-12(fp)
   11414:	10000816 	blt	r2,zero,11438 <write+0x44>
   11418:	01400304 	movi	r5,12
   1141c:	e13ffd17 	ldw	r4,-12(fp)
   11420:	0001a300 	call	1a30 <__mulsi3>
   11424:	1007883a 	mov	r3,r2
   11428:	00800074 	movhi	r2,1
   1142c:	108ef104 	addi	r2,r2,15300
   11430:	1885883a 	add	r2,r3,r2
   11434:	00000106 	br	1143c <write+0x48>
   11438:	0005883a 	mov	r2,zero
   1143c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11440:	e0bffb17 	ldw	r2,-20(fp)
   11444:	10002126 	beq	r2,zero,114cc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   11448:	e0bffb17 	ldw	r2,-20(fp)
   1144c:	10800217 	ldw	r2,8(r2)
   11450:	108000cc 	andi	r2,r2,3
   11454:	10001826 	beq	r2,zero,114b8 <write+0xc4>
   11458:	e0bffb17 	ldw	r2,-20(fp)
   1145c:	10800017 	ldw	r2,0(r2)
   11460:	10800617 	ldw	r2,24(r2)
   11464:	10001426 	beq	r2,zero,114b8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   11468:	e0bffb17 	ldw	r2,-20(fp)
   1146c:	10800017 	ldw	r2,0(r2)
   11470:	10800617 	ldw	r2,24(r2)
   11474:	e0ffff17 	ldw	r3,-4(fp)
   11478:	180d883a 	mov	r6,r3
   1147c:	e17ffe17 	ldw	r5,-8(fp)
   11480:	e13ffb17 	ldw	r4,-20(fp)
   11484:	103ee83a 	callr	r2
   11488:	e0bffc15 	stw	r2,-16(fp)
   1148c:	e0bffc17 	ldw	r2,-16(fp)
   11490:	1000070e 	bge	r2,zero,114b0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   11494:	00113b80 	call	113b8 <alt_get_errno>
   11498:	1007883a 	mov	r3,r2
   1149c:	e0bffc17 	ldw	r2,-16(fp)
   114a0:	0085c83a 	sub	r2,zero,r2
   114a4:	18800015 	stw	r2,0(r3)
        return -1;
   114a8:	00bfffc4 	movi	r2,-1
   114ac:	00000c06 	br	114e0 <write+0xec>
      }
      return rval;
   114b0:	e0bffc17 	ldw	r2,-16(fp)
   114b4:	00000a06 	br	114e0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   114b8:	00113b80 	call	113b8 <alt_get_errno>
   114bc:	1007883a 	mov	r3,r2
   114c0:	00800344 	movi	r2,13
   114c4:	18800015 	stw	r2,0(r3)
   114c8:	00000406 	br	114dc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   114cc:	00113b80 	call	113b8 <alt_get_errno>
   114d0:	1007883a 	mov	r3,r2
   114d4:	00801444 	movi	r2,81
   114d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   114dc:	00bfffc4 	movi	r2,-1
}
   114e0:	e037883a 	mov	sp,fp
   114e4:	dfc00117 	ldw	ra,4(sp)
   114e8:	df000017 	ldw	fp,0(sp)
   114ec:	dec00204 	addi	sp,sp,8
   114f0:	f800283a 	ret

000114f4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   114f4:	defffd04 	addi	sp,sp,-12
   114f8:	dfc00215 	stw	ra,8(sp)
   114fc:	df000115 	stw	fp,4(sp)
   11500:	df000104 	addi	fp,sp,4
   11504:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11508:	d1600b04 	addi	r5,gp,-32724
   1150c:	e13fff17 	ldw	r4,-4(fp)
   11510:	00122a80 	call	122a8 <alt_dev_llist_insert>
}
   11514:	e037883a 	mov	sp,fp
   11518:	dfc00117 	ldw	ra,4(sp)
   1151c:	df000017 	ldw	fp,0(sp)
   11520:	dec00204 	addi	sp,sp,8
   11524:	f800283a 	ret

00011528 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11528:	defffd04 	addi	sp,sp,-12
   1152c:	dfc00215 	stw	ra,8(sp)
   11530:	df000115 	stw	fp,4(sp)
   11534:	df000104 	addi	fp,sp,4
   11538:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROC, proc);
   1153c:	0012a880 	call	12a88 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11540:	00800044 	movi	r2,1
   11544:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11548:	0001883a 	nop
   1154c:	e037883a 	mov	sp,fp
   11550:	dfc00117 	ldw	ra,4(sp)
   11554:	df000017 	ldw	fp,0(sp)
   11558:	dec00204 	addi	sp,sp,8
   1155c:	f800283a 	ret

00011560 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11560:	defffe04 	addi	sp,sp,-8
   11564:	dfc00115 	stw	ra,4(sp)
   11568:	df000015 	stw	fp,0(sp)
   1156c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   11570:	01c0fa04 	movi	r7,1000
   11574:	01800044 	movi	r6,1
   11578:	000b883a 	mov	r5,zero
   1157c:	01000134 	movhi	r4,4
   11580:	21040804 	addi	r4,r4,4128
   11584:	00120a40 	call	120a4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( WATCHDOG, watchdog);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   11588:	000d883a 	mov	r6,zero
   1158c:	000b883a 	mov	r5,zero
   11590:	01000074 	movhi	r4,1
   11594:	210f5b04 	addi	r4,r4,15724
   11598:	00117280 	call	11728 <altera_avalon_jtag_uart_init>
   1159c:	01000074 	movhi	r4,1
   115a0:	210f5104 	addi	r4,r4,15684
   115a4:	00114f40 	call	114f4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   115a8:	0001883a 	nop
}
   115ac:	0001883a 	nop
   115b0:	e037883a 	mov	sp,fp
   115b4:	dfc00117 	ldw	ra,4(sp)
   115b8:	df000017 	ldw	fp,0(sp)
   115bc:	dec00204 	addi	sp,sp,8
   115c0:	f800283a 	ret

000115c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   115c4:	defffa04 	addi	sp,sp,-24
   115c8:	dfc00515 	stw	ra,20(sp)
   115cc:	df000415 	stw	fp,16(sp)
   115d0:	df000404 	addi	fp,sp,16
   115d4:	e13ffd15 	stw	r4,-12(fp)
   115d8:	e17ffe15 	stw	r5,-8(fp)
   115dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   115e0:	e0bffd17 	ldw	r2,-12(fp)
   115e4:	10800017 	ldw	r2,0(r2)
   115e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   115ec:	e0bffc17 	ldw	r2,-16(fp)
   115f0:	10c00a04 	addi	r3,r2,40
   115f4:	e0bffd17 	ldw	r2,-12(fp)
   115f8:	10800217 	ldw	r2,8(r2)
   115fc:	100f883a 	mov	r7,r2
   11600:	e1bfff17 	ldw	r6,-4(fp)
   11604:	e17ffe17 	ldw	r5,-8(fp)
   11608:	1809883a 	mov	r4,r3
   1160c:	0011bec0 	call	11bec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   11610:	e037883a 	mov	sp,fp
   11614:	dfc00117 	ldw	ra,4(sp)
   11618:	df000017 	ldw	fp,0(sp)
   1161c:	dec00204 	addi	sp,sp,8
   11620:	f800283a 	ret

00011624 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   11624:	defffa04 	addi	sp,sp,-24
   11628:	dfc00515 	stw	ra,20(sp)
   1162c:	df000415 	stw	fp,16(sp)
   11630:	df000404 	addi	fp,sp,16
   11634:	e13ffd15 	stw	r4,-12(fp)
   11638:	e17ffe15 	stw	r5,-8(fp)
   1163c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11640:	e0bffd17 	ldw	r2,-12(fp)
   11644:	10800017 	ldw	r2,0(r2)
   11648:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1164c:	e0bffc17 	ldw	r2,-16(fp)
   11650:	10c00a04 	addi	r3,r2,40
   11654:	e0bffd17 	ldw	r2,-12(fp)
   11658:	10800217 	ldw	r2,8(r2)
   1165c:	100f883a 	mov	r7,r2
   11660:	e1bfff17 	ldw	r6,-4(fp)
   11664:	e17ffe17 	ldw	r5,-8(fp)
   11668:	1809883a 	mov	r4,r3
   1166c:	0011e080 	call	11e08 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   11670:	e037883a 	mov	sp,fp
   11674:	dfc00117 	ldw	ra,4(sp)
   11678:	df000017 	ldw	fp,0(sp)
   1167c:	dec00204 	addi	sp,sp,8
   11680:	f800283a 	ret

00011684 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   11684:	defffc04 	addi	sp,sp,-16
   11688:	dfc00315 	stw	ra,12(sp)
   1168c:	df000215 	stw	fp,8(sp)
   11690:	df000204 	addi	fp,sp,8
   11694:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11698:	e0bfff17 	ldw	r2,-4(fp)
   1169c:	10800017 	ldw	r2,0(r2)
   116a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   116a4:	e0bffe17 	ldw	r2,-8(fp)
   116a8:	10c00a04 	addi	r3,r2,40
   116ac:	e0bfff17 	ldw	r2,-4(fp)
   116b0:	10800217 	ldw	r2,8(r2)
   116b4:	100b883a 	mov	r5,r2
   116b8:	1809883a 	mov	r4,r3
   116bc:	0011a940 	call	11a94 <altera_avalon_jtag_uart_close>
}
   116c0:	e037883a 	mov	sp,fp
   116c4:	dfc00117 	ldw	ra,4(sp)
   116c8:	df000017 	ldw	fp,0(sp)
   116cc:	dec00204 	addi	sp,sp,8
   116d0:	f800283a 	ret

000116d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   116d4:	defffa04 	addi	sp,sp,-24
   116d8:	dfc00515 	stw	ra,20(sp)
   116dc:	df000415 	stw	fp,16(sp)
   116e0:	df000404 	addi	fp,sp,16
   116e4:	e13ffd15 	stw	r4,-12(fp)
   116e8:	e17ffe15 	stw	r5,-8(fp)
   116ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   116f0:	e0bffd17 	ldw	r2,-12(fp)
   116f4:	10800017 	ldw	r2,0(r2)
   116f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   116fc:	e0bffc17 	ldw	r2,-16(fp)
   11700:	10800a04 	addi	r2,r2,40
   11704:	e1bfff17 	ldw	r6,-4(fp)
   11708:	e17ffe17 	ldw	r5,-8(fp)
   1170c:	1009883a 	mov	r4,r2
   11710:	0011afc0 	call	11afc <altera_avalon_jtag_uart_ioctl>
}
   11714:	e037883a 	mov	sp,fp
   11718:	dfc00117 	ldw	ra,4(sp)
   1171c:	df000017 	ldw	fp,0(sp)
   11720:	dec00204 	addi	sp,sp,8
   11724:	f800283a 	ret

00011728 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   11728:	defffa04 	addi	sp,sp,-24
   1172c:	dfc00515 	stw	ra,20(sp)
   11730:	df000415 	stw	fp,16(sp)
   11734:	df000404 	addi	fp,sp,16
   11738:	e13ffd15 	stw	r4,-12(fp)
   1173c:	e17ffe15 	stw	r5,-8(fp)
   11740:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11744:	e0bffd17 	ldw	r2,-12(fp)
   11748:	00c00044 	movi	r3,1
   1174c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   11750:	e0bffd17 	ldw	r2,-12(fp)
   11754:	10800017 	ldw	r2,0(r2)
   11758:	10800104 	addi	r2,r2,4
   1175c:	1007883a 	mov	r3,r2
   11760:	e0bffd17 	ldw	r2,-12(fp)
   11764:	10800817 	ldw	r2,32(r2)
   11768:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1176c:	e0bffe17 	ldw	r2,-8(fp)
   11770:	e0ffff17 	ldw	r3,-4(fp)
   11774:	d8000015 	stw	zero,0(sp)
   11778:	e1fffd17 	ldw	r7,-12(fp)
   1177c:	01800074 	movhi	r6,1
   11780:	3185fa04 	addi	r6,r6,6120
   11784:	180b883a 	mov	r5,r3
   11788:	1009883a 	mov	r4,r2
   1178c:	00126880 	call	12688 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   11790:	e0bffd17 	ldw	r2,-12(fp)
   11794:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   11798:	e0bffd17 	ldw	r2,-12(fp)
   1179c:	10800204 	addi	r2,r2,8
   117a0:	d0e6df17 	ldw	r3,-25732(gp)
   117a4:	e1fffd17 	ldw	r7,-12(fp)
   117a8:	01800074 	movhi	r6,1
   117ac:	31867d04 	addi	r6,r6,6644
   117b0:	180b883a 	mov	r5,r3
   117b4:	1009883a 	mov	r4,r2
   117b8:	00121200 	call	12120 <alt_alarm_start>
   117bc:	1000040e 	bge	r2,zero,117d0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   117c0:	e0fffd17 	ldw	r3,-12(fp)
   117c4:	00a00034 	movhi	r2,32768
   117c8:	10bfffc4 	addi	r2,r2,-1
   117cc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   117d0:	0001883a 	nop
   117d4:	e037883a 	mov	sp,fp
   117d8:	dfc00117 	ldw	ra,4(sp)
   117dc:	df000017 	ldw	fp,0(sp)
   117e0:	dec00204 	addi	sp,sp,8
   117e4:	f800283a 	ret

000117e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   117e8:	defff804 	addi	sp,sp,-32
   117ec:	df000715 	stw	fp,28(sp)
   117f0:	df000704 	addi	fp,sp,28
   117f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   117f8:	e0bfff17 	ldw	r2,-4(fp)
   117fc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   11800:	e0bffb17 	ldw	r2,-20(fp)
   11804:	10800017 	ldw	r2,0(r2)
   11808:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1180c:	e0bffc17 	ldw	r2,-16(fp)
   11810:	10800104 	addi	r2,r2,4
   11814:	10800037 	ldwio	r2,0(r2)
   11818:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1181c:	e0bffd17 	ldw	r2,-12(fp)
   11820:	1080c00c 	andi	r2,r2,768
   11824:	10006d26 	beq	r2,zero,119dc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   11828:	e0bffd17 	ldw	r2,-12(fp)
   1182c:	1080400c 	andi	r2,r2,256
   11830:	10003526 	beq	r2,zero,11908 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   11834:	00800074 	movhi	r2,1
   11838:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1183c:	e0bffb17 	ldw	r2,-20(fp)
   11840:	10800a17 	ldw	r2,40(r2)
   11844:	10800044 	addi	r2,r2,1
   11848:	1081ffcc 	andi	r2,r2,2047
   1184c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   11850:	e0bffb17 	ldw	r2,-20(fp)
   11854:	10c00b17 	ldw	r3,44(r2)
   11858:	e0bffe17 	ldw	r2,-8(fp)
   1185c:	18801526 	beq	r3,r2,118b4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11860:	e0bffc17 	ldw	r2,-16(fp)
   11864:	10800037 	ldwio	r2,0(r2)
   11868:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1186c:	e0bff917 	ldw	r2,-28(fp)
   11870:	10a0000c 	andi	r2,r2,32768
   11874:	10001126 	beq	r2,zero,118bc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   11878:	e0bffb17 	ldw	r2,-20(fp)
   1187c:	10800a17 	ldw	r2,40(r2)
   11880:	e0fff917 	ldw	r3,-28(fp)
   11884:	1809883a 	mov	r4,r3
   11888:	e0fffb17 	ldw	r3,-20(fp)
   1188c:	1885883a 	add	r2,r3,r2
   11890:	10800e04 	addi	r2,r2,56
   11894:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11898:	e0bffb17 	ldw	r2,-20(fp)
   1189c:	10800a17 	ldw	r2,40(r2)
   118a0:	10800044 	addi	r2,r2,1
   118a4:	10c1ffcc 	andi	r3,r2,2047
   118a8:	e0bffb17 	ldw	r2,-20(fp)
   118ac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   118b0:	003fe206 	br	1183c <__alt_data_end+0xffff183c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   118b4:	0001883a 	nop
   118b8:	00000106 	br	118c0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   118bc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   118c0:	e0bff917 	ldw	r2,-28(fp)
   118c4:	10bfffec 	andhi	r2,r2,65535
   118c8:	10000f26 	beq	r2,zero,11908 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   118cc:	e0bffb17 	ldw	r2,-20(fp)
   118d0:	10c00817 	ldw	r3,32(r2)
   118d4:	00bfff84 	movi	r2,-2
   118d8:	1886703a 	and	r3,r3,r2
   118dc:	e0bffb17 	ldw	r2,-20(fp)
   118e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   118e4:	e0bffc17 	ldw	r2,-16(fp)
   118e8:	10800104 	addi	r2,r2,4
   118ec:	1007883a 	mov	r3,r2
   118f0:	e0bffb17 	ldw	r2,-20(fp)
   118f4:	10800817 	ldw	r2,32(r2)
   118f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   118fc:	e0bffc17 	ldw	r2,-16(fp)
   11900:	10800104 	addi	r2,r2,4
   11904:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   11908:	e0bffd17 	ldw	r2,-12(fp)
   1190c:	1080800c 	andi	r2,r2,512
   11910:	103fbe26 	beq	r2,zero,1180c <__alt_data_end+0xffff180c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   11914:	e0bffd17 	ldw	r2,-12(fp)
   11918:	1004d43a 	srli	r2,r2,16
   1191c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   11920:	00001406 	br	11974 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   11924:	e0bffc17 	ldw	r2,-16(fp)
   11928:	e0fffb17 	ldw	r3,-20(fp)
   1192c:	18c00d17 	ldw	r3,52(r3)
   11930:	e13ffb17 	ldw	r4,-20(fp)
   11934:	20c7883a 	add	r3,r4,r3
   11938:	18c20e04 	addi	r3,r3,2104
   1193c:	18c00003 	ldbu	r3,0(r3)
   11940:	18c03fcc 	andi	r3,r3,255
   11944:	18c0201c 	xori	r3,r3,128
   11948:	18ffe004 	addi	r3,r3,-128
   1194c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11950:	e0bffb17 	ldw	r2,-20(fp)
   11954:	10800d17 	ldw	r2,52(r2)
   11958:	10800044 	addi	r2,r2,1
   1195c:	10c1ffcc 	andi	r3,r2,2047
   11960:	e0bffb17 	ldw	r2,-20(fp)
   11964:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   11968:	e0bffa17 	ldw	r2,-24(fp)
   1196c:	10bfffc4 	addi	r2,r2,-1
   11970:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   11974:	e0bffa17 	ldw	r2,-24(fp)
   11978:	10000526 	beq	r2,zero,11990 <altera_avalon_jtag_uart_irq+0x1a8>
   1197c:	e0bffb17 	ldw	r2,-20(fp)
   11980:	10c00d17 	ldw	r3,52(r2)
   11984:	e0bffb17 	ldw	r2,-20(fp)
   11988:	10800c17 	ldw	r2,48(r2)
   1198c:	18bfe51e 	bne	r3,r2,11924 <__alt_data_end+0xffff1924>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   11990:	e0bffa17 	ldw	r2,-24(fp)
   11994:	103f9d26 	beq	r2,zero,1180c <__alt_data_end+0xffff180c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11998:	e0bffb17 	ldw	r2,-20(fp)
   1199c:	10c00817 	ldw	r3,32(r2)
   119a0:	00bfff44 	movi	r2,-3
   119a4:	1886703a 	and	r3,r3,r2
   119a8:	e0bffb17 	ldw	r2,-20(fp)
   119ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   119b0:	e0bffb17 	ldw	r2,-20(fp)
   119b4:	10800017 	ldw	r2,0(r2)
   119b8:	10800104 	addi	r2,r2,4
   119bc:	1007883a 	mov	r3,r2
   119c0:	e0bffb17 	ldw	r2,-20(fp)
   119c4:	10800817 	ldw	r2,32(r2)
   119c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   119cc:	e0bffc17 	ldw	r2,-16(fp)
   119d0:	10800104 	addi	r2,r2,4
   119d4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   119d8:	003f8c06 	br	1180c <__alt_data_end+0xffff180c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   119dc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   119e0:	0001883a 	nop
   119e4:	e037883a 	mov	sp,fp
   119e8:	df000017 	ldw	fp,0(sp)
   119ec:	dec00104 	addi	sp,sp,4
   119f0:	f800283a 	ret

000119f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   119f4:	defff804 	addi	sp,sp,-32
   119f8:	df000715 	stw	fp,28(sp)
   119fc:	df000704 	addi	fp,sp,28
   11a00:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   11a04:	e0bffb17 	ldw	r2,-20(fp)
   11a08:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   11a0c:	e0bff917 	ldw	r2,-28(fp)
   11a10:	10800017 	ldw	r2,0(r2)
   11a14:	10800104 	addi	r2,r2,4
   11a18:	10800037 	ldwio	r2,0(r2)
   11a1c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   11a20:	e0bffa17 	ldw	r2,-24(fp)
   11a24:	1081000c 	andi	r2,r2,1024
   11a28:	10000b26 	beq	r2,zero,11a58 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   11a2c:	e0bff917 	ldw	r2,-28(fp)
   11a30:	10800017 	ldw	r2,0(r2)
   11a34:	10800104 	addi	r2,r2,4
   11a38:	1007883a 	mov	r3,r2
   11a3c:	e0bff917 	ldw	r2,-28(fp)
   11a40:	10800817 	ldw	r2,32(r2)
   11a44:	10810014 	ori	r2,r2,1024
   11a48:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   11a4c:	e0bff917 	ldw	r2,-28(fp)
   11a50:	10000915 	stw	zero,36(r2)
   11a54:	00000a06 	br	11a80 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   11a58:	e0bff917 	ldw	r2,-28(fp)
   11a5c:	10c00917 	ldw	r3,36(r2)
   11a60:	00a00034 	movhi	r2,32768
   11a64:	10bfff04 	addi	r2,r2,-4
   11a68:	10c00536 	bltu	r2,r3,11a80 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   11a6c:	e0bff917 	ldw	r2,-28(fp)
   11a70:	10800917 	ldw	r2,36(r2)
   11a74:	10c00044 	addi	r3,r2,1
   11a78:	e0bff917 	ldw	r2,-28(fp)
   11a7c:	10c00915 	stw	r3,36(r2)
   11a80:	d0a6df17 	ldw	r2,-25732(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   11a84:	e037883a 	mov	sp,fp
   11a88:	df000017 	ldw	fp,0(sp)
   11a8c:	dec00104 	addi	sp,sp,4
   11a90:	f800283a 	ret

00011a94 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   11a94:	defffd04 	addi	sp,sp,-12
   11a98:	df000215 	stw	fp,8(sp)
   11a9c:	df000204 	addi	fp,sp,8
   11aa0:	e13ffe15 	stw	r4,-8(fp)
   11aa4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11aa8:	00000506 	br	11ac0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   11aac:	e0bfff17 	ldw	r2,-4(fp)
   11ab0:	1090000c 	andi	r2,r2,16384
   11ab4:	10000226 	beq	r2,zero,11ac0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   11ab8:	00bffd44 	movi	r2,-11
   11abc:	00000b06 	br	11aec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11ac0:	e0bffe17 	ldw	r2,-8(fp)
   11ac4:	10c00d17 	ldw	r3,52(r2)
   11ac8:	e0bffe17 	ldw	r2,-8(fp)
   11acc:	10800c17 	ldw	r2,48(r2)
   11ad0:	18800526 	beq	r3,r2,11ae8 <altera_avalon_jtag_uart_close+0x54>
   11ad4:	e0bffe17 	ldw	r2,-8(fp)
   11ad8:	10c00917 	ldw	r3,36(r2)
   11adc:	e0bffe17 	ldw	r2,-8(fp)
   11ae0:	10800117 	ldw	r2,4(r2)
   11ae4:	18bff136 	bltu	r3,r2,11aac <__alt_data_end+0xffff1aac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   11ae8:	0005883a 	mov	r2,zero
}
   11aec:	e037883a 	mov	sp,fp
   11af0:	df000017 	ldw	fp,0(sp)
   11af4:	dec00104 	addi	sp,sp,4
   11af8:	f800283a 	ret

00011afc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   11afc:	defffa04 	addi	sp,sp,-24
   11b00:	df000515 	stw	fp,20(sp)
   11b04:	df000504 	addi	fp,sp,20
   11b08:	e13ffd15 	stw	r4,-12(fp)
   11b0c:	e17ffe15 	stw	r5,-8(fp)
   11b10:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   11b14:	00bff9c4 	movi	r2,-25
   11b18:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   11b1c:	e0bffe17 	ldw	r2,-8(fp)
   11b20:	10da8060 	cmpeqi	r3,r2,27137
   11b24:	1800031e 	bne	r3,zero,11b34 <altera_avalon_jtag_uart_ioctl+0x38>
   11b28:	109a80a0 	cmpeqi	r2,r2,27138
   11b2c:	1000181e 	bne	r2,zero,11b90 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   11b30:	00002906 	br	11bd8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   11b34:	e0bffd17 	ldw	r2,-12(fp)
   11b38:	10c00117 	ldw	r3,4(r2)
   11b3c:	00a00034 	movhi	r2,32768
   11b40:	10bfffc4 	addi	r2,r2,-1
   11b44:	18802126 	beq	r3,r2,11bcc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   11b48:	e0bfff17 	ldw	r2,-4(fp)
   11b4c:	10800017 	ldw	r2,0(r2)
   11b50:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   11b54:	e0bffc17 	ldw	r2,-16(fp)
   11b58:	10800090 	cmplti	r2,r2,2
   11b5c:	1000061e 	bne	r2,zero,11b78 <altera_avalon_jtag_uart_ioctl+0x7c>
   11b60:	e0fffc17 	ldw	r3,-16(fp)
   11b64:	00a00034 	movhi	r2,32768
   11b68:	10bfffc4 	addi	r2,r2,-1
   11b6c:	18800226 	beq	r3,r2,11b78 <altera_avalon_jtag_uart_ioctl+0x7c>
   11b70:	e0bffc17 	ldw	r2,-16(fp)
   11b74:	00000206 	br	11b80 <altera_avalon_jtag_uart_ioctl+0x84>
   11b78:	00a00034 	movhi	r2,32768
   11b7c:	10bfff84 	addi	r2,r2,-2
   11b80:	e0fffd17 	ldw	r3,-12(fp)
   11b84:	18800115 	stw	r2,4(r3)
      rc = 0;
   11b88:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11b8c:	00000f06 	br	11bcc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   11b90:	e0bffd17 	ldw	r2,-12(fp)
   11b94:	10c00117 	ldw	r3,4(r2)
   11b98:	00a00034 	movhi	r2,32768
   11b9c:	10bfffc4 	addi	r2,r2,-1
   11ba0:	18800c26 	beq	r3,r2,11bd4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   11ba4:	e0bffd17 	ldw	r2,-12(fp)
   11ba8:	10c00917 	ldw	r3,36(r2)
   11bac:	e0bffd17 	ldw	r2,-12(fp)
   11bb0:	10800117 	ldw	r2,4(r2)
   11bb4:	1885803a 	cmpltu	r2,r3,r2
   11bb8:	10c03fcc 	andi	r3,r2,255
   11bbc:	e0bfff17 	ldw	r2,-4(fp)
   11bc0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   11bc4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11bc8:	00000206 	br	11bd4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   11bcc:	0001883a 	nop
   11bd0:	00000106 	br	11bd8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   11bd4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   11bd8:	e0bffb17 	ldw	r2,-20(fp)
}
   11bdc:	e037883a 	mov	sp,fp
   11be0:	df000017 	ldw	fp,0(sp)
   11be4:	dec00104 	addi	sp,sp,4
   11be8:	f800283a 	ret

00011bec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   11bec:	defff304 	addi	sp,sp,-52
   11bf0:	dfc00c15 	stw	ra,48(sp)
   11bf4:	df000b15 	stw	fp,44(sp)
   11bf8:	df000b04 	addi	fp,sp,44
   11bfc:	e13ffc15 	stw	r4,-16(fp)
   11c00:	e17ffd15 	stw	r5,-12(fp)
   11c04:	e1bffe15 	stw	r6,-8(fp)
   11c08:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   11c0c:	e0bffd17 	ldw	r2,-12(fp)
   11c10:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11c14:	00004706 	br	11d34 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   11c18:	e0bffc17 	ldw	r2,-16(fp)
   11c1c:	10800a17 	ldw	r2,40(r2)
   11c20:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   11c24:	e0bffc17 	ldw	r2,-16(fp)
   11c28:	10800b17 	ldw	r2,44(r2)
   11c2c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   11c30:	e0fff717 	ldw	r3,-36(fp)
   11c34:	e0bff817 	ldw	r2,-32(fp)
   11c38:	18800536 	bltu	r3,r2,11c50 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   11c3c:	e0fff717 	ldw	r3,-36(fp)
   11c40:	e0bff817 	ldw	r2,-32(fp)
   11c44:	1885c83a 	sub	r2,r3,r2
   11c48:	e0bff615 	stw	r2,-40(fp)
   11c4c:	00000406 	br	11c60 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   11c50:	00c20004 	movi	r3,2048
   11c54:	e0bff817 	ldw	r2,-32(fp)
   11c58:	1885c83a 	sub	r2,r3,r2
   11c5c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11c60:	e0bff617 	ldw	r2,-40(fp)
   11c64:	10001e26 	beq	r2,zero,11ce0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   11c68:	e0fffe17 	ldw	r3,-8(fp)
   11c6c:	e0bff617 	ldw	r2,-40(fp)
   11c70:	1880022e 	bgeu	r3,r2,11c7c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   11c74:	e0bffe17 	ldw	r2,-8(fp)
   11c78:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   11c7c:	e0bffc17 	ldw	r2,-16(fp)
   11c80:	10c00e04 	addi	r3,r2,56
   11c84:	e0bff817 	ldw	r2,-32(fp)
   11c88:	1885883a 	add	r2,r3,r2
   11c8c:	e1bff617 	ldw	r6,-40(fp)
   11c90:	100b883a 	mov	r5,r2
   11c94:	e13ff517 	ldw	r4,-44(fp)
   11c98:	0006b9c0 	call	6b9c <memcpy>
      ptr   += n;
   11c9c:	e0fff517 	ldw	r3,-44(fp)
   11ca0:	e0bff617 	ldw	r2,-40(fp)
   11ca4:	1885883a 	add	r2,r3,r2
   11ca8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   11cac:	e0fffe17 	ldw	r3,-8(fp)
   11cb0:	e0bff617 	ldw	r2,-40(fp)
   11cb4:	1885c83a 	sub	r2,r3,r2
   11cb8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11cbc:	e0fff817 	ldw	r3,-32(fp)
   11cc0:	e0bff617 	ldw	r2,-40(fp)
   11cc4:	1885883a 	add	r2,r3,r2
   11cc8:	10c1ffcc 	andi	r3,r2,2047
   11ccc:	e0bffc17 	ldw	r2,-16(fp)
   11cd0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   11cd4:	e0bffe17 	ldw	r2,-8(fp)
   11cd8:	00bfcf16 	blt	zero,r2,11c18 <__alt_data_end+0xffff1c18>
   11cdc:	00000106 	br	11ce4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   11ce0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   11ce4:	e0fff517 	ldw	r3,-44(fp)
   11ce8:	e0bffd17 	ldw	r2,-12(fp)
   11cec:	1880141e 	bne	r3,r2,11d40 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   11cf0:	e0bfff17 	ldw	r2,-4(fp)
   11cf4:	1090000c 	andi	r2,r2,16384
   11cf8:	1000131e 	bne	r2,zero,11d48 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   11cfc:	0001883a 	nop
   11d00:	e0bffc17 	ldw	r2,-16(fp)
   11d04:	10c00a17 	ldw	r3,40(r2)
   11d08:	e0bff717 	ldw	r2,-36(fp)
   11d0c:	1880051e 	bne	r3,r2,11d24 <altera_avalon_jtag_uart_read+0x138>
   11d10:	e0bffc17 	ldw	r2,-16(fp)
   11d14:	10c00917 	ldw	r3,36(r2)
   11d18:	e0bffc17 	ldw	r2,-16(fp)
   11d1c:	10800117 	ldw	r2,4(r2)
   11d20:	18bff736 	bltu	r3,r2,11d00 <__alt_data_end+0xffff1d00>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   11d24:	e0bffc17 	ldw	r2,-16(fp)
   11d28:	10c00a17 	ldw	r3,40(r2)
   11d2c:	e0bff717 	ldw	r2,-36(fp)
   11d30:	18800726 	beq	r3,r2,11d50 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11d34:	e0bffe17 	ldw	r2,-8(fp)
   11d38:	00bfb716 	blt	zero,r2,11c18 <__alt_data_end+0xffff1c18>
   11d3c:	00000506 	br	11d54 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   11d40:	0001883a 	nop
   11d44:	00000306 	br	11d54 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   11d48:	0001883a 	nop
   11d4c:	00000106 	br	11d54 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   11d50:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   11d54:	e0fff517 	ldw	r3,-44(fp)
   11d58:	e0bffd17 	ldw	r2,-12(fp)
   11d5c:	18801826 	beq	r3,r2,11dc0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d60:	0005303a 	rdctl	r2,status
   11d64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d68:	e0fffb17 	ldw	r3,-20(fp)
   11d6c:	00bfff84 	movi	r2,-2
   11d70:	1884703a 	and	r2,r3,r2
   11d74:	1001703a 	wrctl	status,r2
  
  return context;
   11d78:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   11d7c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11d80:	e0bffc17 	ldw	r2,-16(fp)
   11d84:	10800817 	ldw	r2,32(r2)
   11d88:	10c00054 	ori	r3,r2,1
   11d8c:	e0bffc17 	ldw	r2,-16(fp)
   11d90:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11d94:	e0bffc17 	ldw	r2,-16(fp)
   11d98:	10800017 	ldw	r2,0(r2)
   11d9c:	10800104 	addi	r2,r2,4
   11da0:	1007883a 	mov	r3,r2
   11da4:	e0bffc17 	ldw	r2,-16(fp)
   11da8:	10800817 	ldw	r2,32(r2)
   11dac:	18800035 	stwio	r2,0(r3)
   11db0:	e0bffa17 	ldw	r2,-24(fp)
   11db4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11db8:	e0bff917 	ldw	r2,-28(fp)
   11dbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11dc0:	e0fff517 	ldw	r3,-44(fp)
   11dc4:	e0bffd17 	ldw	r2,-12(fp)
   11dc8:	18800426 	beq	r3,r2,11ddc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   11dcc:	e0fff517 	ldw	r3,-44(fp)
   11dd0:	e0bffd17 	ldw	r2,-12(fp)
   11dd4:	1885c83a 	sub	r2,r3,r2
   11dd8:	00000606 	br	11df4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   11ddc:	e0bfff17 	ldw	r2,-4(fp)
   11de0:	1090000c 	andi	r2,r2,16384
   11de4:	10000226 	beq	r2,zero,11df0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   11de8:	00bffd44 	movi	r2,-11
   11dec:	00000106 	br	11df4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   11df0:	00bffec4 	movi	r2,-5
}
   11df4:	e037883a 	mov	sp,fp
   11df8:	dfc00117 	ldw	ra,4(sp)
   11dfc:	df000017 	ldw	fp,0(sp)
   11e00:	dec00204 	addi	sp,sp,8
   11e04:	f800283a 	ret

00011e08 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11e08:	defff304 	addi	sp,sp,-52
   11e0c:	dfc00c15 	stw	ra,48(sp)
   11e10:	df000b15 	stw	fp,44(sp)
   11e14:	df000b04 	addi	fp,sp,44
   11e18:	e13ffc15 	stw	r4,-16(fp)
   11e1c:	e17ffd15 	stw	r5,-12(fp)
   11e20:	e1bffe15 	stw	r6,-8(fp)
   11e24:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   11e28:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   11e2c:	e0bffd17 	ldw	r2,-12(fp)
   11e30:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11e34:	00003706 	br	11f14 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   11e38:	e0bffc17 	ldw	r2,-16(fp)
   11e3c:	10800c17 	ldw	r2,48(r2)
   11e40:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   11e44:	e0bffc17 	ldw	r2,-16(fp)
   11e48:	10800d17 	ldw	r2,52(r2)
   11e4c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   11e50:	e0fff917 	ldw	r3,-28(fp)
   11e54:	e0bff517 	ldw	r2,-44(fp)
   11e58:	1880062e 	bgeu	r3,r2,11e74 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   11e5c:	e0fff517 	ldw	r3,-44(fp)
   11e60:	e0bff917 	ldw	r2,-28(fp)
   11e64:	1885c83a 	sub	r2,r3,r2
   11e68:	10bfffc4 	addi	r2,r2,-1
   11e6c:	e0bff615 	stw	r2,-40(fp)
   11e70:	00000b06 	br	11ea0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   11e74:	e0bff517 	ldw	r2,-44(fp)
   11e78:	10000526 	beq	r2,zero,11e90 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   11e7c:	00c20004 	movi	r3,2048
   11e80:	e0bff917 	ldw	r2,-28(fp)
   11e84:	1885c83a 	sub	r2,r3,r2
   11e88:	e0bff615 	stw	r2,-40(fp)
   11e8c:	00000406 	br	11ea0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11e90:	00c1ffc4 	movi	r3,2047
   11e94:	e0bff917 	ldw	r2,-28(fp)
   11e98:	1885c83a 	sub	r2,r3,r2
   11e9c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11ea0:	e0bff617 	ldw	r2,-40(fp)
   11ea4:	10001e26 	beq	r2,zero,11f20 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   11ea8:	e0fffe17 	ldw	r3,-8(fp)
   11eac:	e0bff617 	ldw	r2,-40(fp)
   11eb0:	1880022e 	bgeu	r3,r2,11ebc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   11eb4:	e0bffe17 	ldw	r2,-8(fp)
   11eb8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11ebc:	e0bffc17 	ldw	r2,-16(fp)
   11ec0:	10c20e04 	addi	r3,r2,2104
   11ec4:	e0bff917 	ldw	r2,-28(fp)
   11ec8:	1885883a 	add	r2,r3,r2
   11ecc:	e1bff617 	ldw	r6,-40(fp)
   11ed0:	e17ffd17 	ldw	r5,-12(fp)
   11ed4:	1009883a 	mov	r4,r2
   11ed8:	0006b9c0 	call	6b9c <memcpy>
      ptr   += n;
   11edc:	e0fffd17 	ldw	r3,-12(fp)
   11ee0:	e0bff617 	ldw	r2,-40(fp)
   11ee4:	1885883a 	add	r2,r3,r2
   11ee8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   11eec:	e0fffe17 	ldw	r3,-8(fp)
   11ef0:	e0bff617 	ldw	r2,-40(fp)
   11ef4:	1885c83a 	sub	r2,r3,r2
   11ef8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11efc:	e0fff917 	ldw	r3,-28(fp)
   11f00:	e0bff617 	ldw	r2,-40(fp)
   11f04:	1885883a 	add	r2,r3,r2
   11f08:	10c1ffcc 	andi	r3,r2,2047
   11f0c:	e0bffc17 	ldw	r2,-16(fp)
   11f10:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11f14:	e0bffe17 	ldw	r2,-8(fp)
   11f18:	00bfc716 	blt	zero,r2,11e38 <__alt_data_end+0xffff1e38>
   11f1c:	00000106 	br	11f24 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   11f20:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f24:	0005303a 	rdctl	r2,status
   11f28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f2c:	e0fffb17 	ldw	r3,-20(fp)
   11f30:	00bfff84 	movi	r2,-2
   11f34:	1884703a 	and	r2,r3,r2
   11f38:	1001703a 	wrctl	status,r2
  
  return context;
   11f3c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11f40:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11f44:	e0bffc17 	ldw	r2,-16(fp)
   11f48:	10800817 	ldw	r2,32(r2)
   11f4c:	10c00094 	ori	r3,r2,2
   11f50:	e0bffc17 	ldw	r2,-16(fp)
   11f54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11f58:	e0bffc17 	ldw	r2,-16(fp)
   11f5c:	10800017 	ldw	r2,0(r2)
   11f60:	10800104 	addi	r2,r2,4
   11f64:	1007883a 	mov	r3,r2
   11f68:	e0bffc17 	ldw	r2,-16(fp)
   11f6c:	10800817 	ldw	r2,32(r2)
   11f70:	18800035 	stwio	r2,0(r3)
   11f74:	e0bffa17 	ldw	r2,-24(fp)
   11f78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f7c:	e0bff817 	ldw	r2,-32(fp)
   11f80:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   11f84:	e0bffe17 	ldw	r2,-8(fp)
   11f88:	0080100e 	bge	zero,r2,11fcc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   11f8c:	e0bfff17 	ldw	r2,-4(fp)
   11f90:	1090000c 	andi	r2,r2,16384
   11f94:	1000101e 	bne	r2,zero,11fd8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   11f98:	0001883a 	nop
   11f9c:	e0bffc17 	ldw	r2,-16(fp)
   11fa0:	10c00d17 	ldw	r3,52(r2)
   11fa4:	e0bff517 	ldw	r2,-44(fp)
   11fa8:	1880051e 	bne	r3,r2,11fc0 <altera_avalon_jtag_uart_write+0x1b8>
   11fac:	e0bffc17 	ldw	r2,-16(fp)
   11fb0:	10c00917 	ldw	r3,36(r2)
   11fb4:	e0bffc17 	ldw	r2,-16(fp)
   11fb8:	10800117 	ldw	r2,4(r2)
   11fbc:	18bff736 	bltu	r3,r2,11f9c <__alt_data_end+0xffff1f9c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11fc0:	e0bffc17 	ldw	r2,-16(fp)
   11fc4:	10800917 	ldw	r2,36(r2)
   11fc8:	1000051e 	bne	r2,zero,11fe0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   11fcc:	e0bffe17 	ldw	r2,-8(fp)
   11fd0:	00bfd016 	blt	zero,r2,11f14 <__alt_data_end+0xffff1f14>
   11fd4:	00000306 	br	11fe4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   11fd8:	0001883a 	nop
   11fdc:	00000106 	br	11fe4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   11fe0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   11fe4:	e0fffd17 	ldw	r3,-12(fp)
   11fe8:	e0bff717 	ldw	r2,-36(fp)
   11fec:	18800426 	beq	r3,r2,12000 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   11ff0:	e0fffd17 	ldw	r3,-12(fp)
   11ff4:	e0bff717 	ldw	r2,-36(fp)
   11ff8:	1885c83a 	sub	r2,r3,r2
   11ffc:	00000606 	br	12018 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   12000:	e0bfff17 	ldw	r2,-4(fp)
   12004:	1090000c 	andi	r2,r2,16384
   12008:	10000226 	beq	r2,zero,12014 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1200c:	00bffd44 	movi	r2,-11
   12010:	00000106 	br	12018 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   12014:	00bffec4 	movi	r2,-5
}
   12018:	e037883a 	mov	sp,fp
   1201c:	dfc00117 	ldw	ra,4(sp)
   12020:	df000017 	ldw	fp,0(sp)
   12024:	dec00204 	addi	sp,sp,8
   12028:	f800283a 	ret

0001202c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1202c:	defffa04 	addi	sp,sp,-24
   12030:	dfc00515 	stw	ra,20(sp)
   12034:	df000415 	stw	fp,16(sp)
   12038:	df000404 	addi	fp,sp,16
   1203c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   12040:	0007883a 	mov	r3,zero
   12044:	e0bfff17 	ldw	r2,-4(fp)
   12048:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1204c:	e0bfff17 	ldw	r2,-4(fp)
   12050:	10800104 	addi	r2,r2,4
   12054:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12058:	0005303a 	rdctl	r2,status
   1205c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12060:	e0fffd17 	ldw	r3,-12(fp)
   12064:	00bfff84 	movi	r2,-2
   12068:	1884703a 	and	r2,r3,r2
   1206c:	1001703a 	wrctl	status,r2
  
  return context;
   12070:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   12074:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   12078:	00112b00 	call	112b0 <alt_tick>
   1207c:	e0bffc17 	ldw	r2,-16(fp)
   12080:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12084:	e0bffe17 	ldw	r2,-8(fp)
   12088:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1208c:	0001883a 	nop
   12090:	e037883a 	mov	sp,fp
   12094:	dfc00117 	ldw	ra,4(sp)
   12098:	df000017 	ldw	fp,0(sp)
   1209c:	dec00204 	addi	sp,sp,8
   120a0:	f800283a 	ret

000120a4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   120a4:	defff804 	addi	sp,sp,-32
   120a8:	dfc00715 	stw	ra,28(sp)
   120ac:	df000615 	stw	fp,24(sp)
   120b0:	df000604 	addi	fp,sp,24
   120b4:	e13ffc15 	stw	r4,-16(fp)
   120b8:	e17ffd15 	stw	r5,-12(fp)
   120bc:	e1bffe15 	stw	r6,-8(fp)
   120c0:	e1ffff15 	stw	r7,-4(fp)
   120c4:	e0bfff17 	ldw	r2,-4(fp)
   120c8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   120cc:	d0a6df17 	ldw	r2,-25732(gp)
   120d0:	1000021e 	bne	r2,zero,120dc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   120d4:	e0bffb17 	ldw	r2,-20(fp)
   120d8:	d0a6df15 	stw	r2,-25732(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   120dc:	e0bffc17 	ldw	r2,-16(fp)
   120e0:	10800104 	addi	r2,r2,4
   120e4:	00c001c4 	movi	r3,7
   120e8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   120ec:	d8000015 	stw	zero,0(sp)
   120f0:	e1fffc17 	ldw	r7,-16(fp)
   120f4:	01800074 	movhi	r6,1
   120f8:	31880b04 	addi	r6,r6,8236
   120fc:	e17ffe17 	ldw	r5,-8(fp)
   12100:	e13ffd17 	ldw	r4,-12(fp)
   12104:	00126880 	call	12688 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   12108:	0001883a 	nop
   1210c:	e037883a 	mov	sp,fp
   12110:	dfc00117 	ldw	ra,4(sp)
   12114:	df000017 	ldw	fp,0(sp)
   12118:	dec00204 	addi	sp,sp,8
   1211c:	f800283a 	ret

00012120 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   12120:	defff504 	addi	sp,sp,-44
   12124:	df000a15 	stw	fp,40(sp)
   12128:	df000a04 	addi	fp,sp,40
   1212c:	e13ffc15 	stw	r4,-16(fp)
   12130:	e17ffd15 	stw	r5,-12(fp)
   12134:	e1bffe15 	stw	r6,-8(fp)
   12138:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1213c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   12140:	d0a6df17 	ldw	r2,-25732(gp)
  
  if (alt_ticks_per_second ())
   12144:	10003c26 	beq	r2,zero,12238 <alt_alarm_start+0x118>
  {
    if (alarm)
   12148:	e0bffc17 	ldw	r2,-16(fp)
   1214c:	10003826 	beq	r2,zero,12230 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   12150:	e0bffc17 	ldw	r2,-16(fp)
   12154:	e0fffe17 	ldw	r3,-8(fp)
   12158:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1215c:	e0bffc17 	ldw	r2,-16(fp)
   12160:	e0ffff17 	ldw	r3,-4(fp)
   12164:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12168:	0005303a 	rdctl	r2,status
   1216c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12170:	e0fff917 	ldw	r3,-28(fp)
   12174:	00bfff84 	movi	r2,-2
   12178:	1884703a 	and	r2,r3,r2
   1217c:	1001703a 	wrctl	status,r2
  
  return context;
   12180:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   12184:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   12188:	d0a6e017 	ldw	r2,-25728(gp)
      
      current_nticks = alt_nticks();
   1218c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   12190:	e0fffd17 	ldw	r3,-12(fp)
   12194:	e0bff617 	ldw	r2,-40(fp)
   12198:	1885883a 	add	r2,r3,r2
   1219c:	10c00044 	addi	r3,r2,1
   121a0:	e0bffc17 	ldw	r2,-16(fp)
   121a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   121a8:	e0bffc17 	ldw	r2,-16(fp)
   121ac:	10c00217 	ldw	r3,8(r2)
   121b0:	e0bff617 	ldw	r2,-40(fp)
   121b4:	1880042e 	bgeu	r3,r2,121c8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   121b8:	e0bffc17 	ldw	r2,-16(fp)
   121bc:	00c00044 	movi	r3,1
   121c0:	10c00405 	stb	r3,16(r2)
   121c4:	00000206 	br	121d0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   121c8:	e0bffc17 	ldw	r2,-16(fp)
   121cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   121d0:	e0bffc17 	ldw	r2,-16(fp)
   121d4:	d0e01004 	addi	r3,gp,-32704
   121d8:	e0fffa15 	stw	r3,-24(fp)
   121dc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   121e0:	e0bffb17 	ldw	r2,-20(fp)
   121e4:	e0fffa17 	ldw	r3,-24(fp)
   121e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   121ec:	e0bffa17 	ldw	r2,-24(fp)
   121f0:	10c00017 	ldw	r3,0(r2)
   121f4:	e0bffb17 	ldw	r2,-20(fp)
   121f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   121fc:	e0bffa17 	ldw	r2,-24(fp)
   12200:	10800017 	ldw	r2,0(r2)
   12204:	e0fffb17 	ldw	r3,-20(fp)
   12208:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1220c:	e0bffa17 	ldw	r2,-24(fp)
   12210:	e0fffb17 	ldw	r3,-20(fp)
   12214:	10c00015 	stw	r3,0(r2)
   12218:	e0bff817 	ldw	r2,-32(fp)
   1221c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12220:	e0bff717 	ldw	r2,-36(fp)
   12224:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   12228:	0005883a 	mov	r2,zero
   1222c:	00000306 	br	1223c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   12230:	00bffa84 	movi	r2,-22
   12234:	00000106 	br	1223c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   12238:	00bfde84 	movi	r2,-134
  }
}
   1223c:	e037883a 	mov	sp,fp
   12240:	df000017 	ldw	fp,0(sp)
   12244:	dec00104 	addi	sp,sp,4
   12248:	f800283a 	ret

0001224c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1224c:	deffff04 	addi	sp,sp,-4
   12250:	df000015 	stw	fp,0(sp)
   12254:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12258:	0001883a 	nop
   1225c:	e037883a 	mov	sp,fp
   12260:	df000017 	ldw	fp,0(sp)
   12264:	dec00104 	addi	sp,sp,4
   12268:	f800283a 	ret

0001226c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1226c:	defffe04 	addi	sp,sp,-8
   12270:	dfc00115 	stw	ra,4(sp)
   12274:	df000015 	stw	fp,0(sp)
   12278:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1227c:	d0a00e17 	ldw	r2,-32712(gp)
   12280:	10000326 	beq	r2,zero,12290 <alt_get_errno+0x24>
   12284:	d0a00e17 	ldw	r2,-32712(gp)
   12288:	103ee83a 	callr	r2
   1228c:	00000106 	br	12294 <alt_get_errno+0x28>
   12290:	d0a6d104 	addi	r2,gp,-25788
}
   12294:	e037883a 	mov	sp,fp
   12298:	dfc00117 	ldw	ra,4(sp)
   1229c:	df000017 	ldw	fp,0(sp)
   122a0:	dec00204 	addi	sp,sp,8
   122a4:	f800283a 	ret

000122a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   122a8:	defffa04 	addi	sp,sp,-24
   122ac:	dfc00515 	stw	ra,20(sp)
   122b0:	df000415 	stw	fp,16(sp)
   122b4:	df000404 	addi	fp,sp,16
   122b8:	e13ffe15 	stw	r4,-8(fp)
   122bc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   122c0:	e0bffe17 	ldw	r2,-8(fp)
   122c4:	10000326 	beq	r2,zero,122d4 <alt_dev_llist_insert+0x2c>
   122c8:	e0bffe17 	ldw	r2,-8(fp)
   122cc:	10800217 	ldw	r2,8(r2)
   122d0:	1000061e 	bne	r2,zero,122ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   122d4:	001226c0 	call	1226c <alt_get_errno>
   122d8:	1007883a 	mov	r3,r2
   122dc:	00800584 	movi	r2,22
   122e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   122e4:	00bffa84 	movi	r2,-22
   122e8:	00001306 	br	12338 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   122ec:	e0bffe17 	ldw	r2,-8(fp)
   122f0:	e0ffff17 	ldw	r3,-4(fp)
   122f4:	e0fffc15 	stw	r3,-16(fp)
   122f8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   122fc:	e0bffd17 	ldw	r2,-12(fp)
   12300:	e0fffc17 	ldw	r3,-16(fp)
   12304:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12308:	e0bffc17 	ldw	r2,-16(fp)
   1230c:	10c00017 	ldw	r3,0(r2)
   12310:	e0bffd17 	ldw	r2,-12(fp)
   12314:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12318:	e0bffc17 	ldw	r2,-16(fp)
   1231c:	10800017 	ldw	r2,0(r2)
   12320:	e0fffd17 	ldw	r3,-12(fp)
   12324:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12328:	e0bffc17 	ldw	r2,-16(fp)
   1232c:	e0fffd17 	ldw	r3,-12(fp)
   12330:	10c00015 	stw	r3,0(r2)

  return 0;  
   12334:	0005883a 	mov	r2,zero
}
   12338:	e037883a 	mov	sp,fp
   1233c:	dfc00117 	ldw	ra,4(sp)
   12340:	df000017 	ldw	fp,0(sp)
   12344:	dec00204 	addi	sp,sp,8
   12348:	f800283a 	ret

0001234c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1234c:	defffd04 	addi	sp,sp,-12
   12350:	dfc00215 	stw	ra,8(sp)
   12354:	df000115 	stw	fp,4(sp)
   12358:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1235c:	00800074 	movhi	r2,1
   12360:	108b3b04 	addi	r2,r2,11500
   12364:	e0bfff15 	stw	r2,-4(fp)
   12368:	00000606 	br	12384 <_do_ctors+0x38>
        (*ctor) (); 
   1236c:	e0bfff17 	ldw	r2,-4(fp)
   12370:	10800017 	ldw	r2,0(r2)
   12374:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12378:	e0bfff17 	ldw	r2,-4(fp)
   1237c:	10bfff04 	addi	r2,r2,-4
   12380:	e0bfff15 	stw	r2,-4(fp)
   12384:	e0ffff17 	ldw	r3,-4(fp)
   12388:	00800074 	movhi	r2,1
   1238c:	108b3c04 	addi	r2,r2,11504
   12390:	18bff62e 	bgeu	r3,r2,1236c <__alt_data_end+0xffff236c>
        (*ctor) (); 
}
   12394:	0001883a 	nop
   12398:	e037883a 	mov	sp,fp
   1239c:	dfc00117 	ldw	ra,4(sp)
   123a0:	df000017 	ldw	fp,0(sp)
   123a4:	dec00204 	addi	sp,sp,8
   123a8:	f800283a 	ret

000123ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   123ac:	defffd04 	addi	sp,sp,-12
   123b0:	dfc00215 	stw	ra,8(sp)
   123b4:	df000115 	stw	fp,4(sp)
   123b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   123bc:	00800074 	movhi	r2,1
   123c0:	108b3b04 	addi	r2,r2,11500
   123c4:	e0bfff15 	stw	r2,-4(fp)
   123c8:	00000606 	br	123e4 <_do_dtors+0x38>
        (*dtor) (); 
   123cc:	e0bfff17 	ldw	r2,-4(fp)
   123d0:	10800017 	ldw	r2,0(r2)
   123d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   123d8:	e0bfff17 	ldw	r2,-4(fp)
   123dc:	10bfff04 	addi	r2,r2,-4
   123e0:	e0bfff15 	stw	r2,-4(fp)
   123e4:	e0ffff17 	ldw	r3,-4(fp)
   123e8:	00800074 	movhi	r2,1
   123ec:	108b3c04 	addi	r2,r2,11504
   123f0:	18bff62e 	bgeu	r3,r2,123cc <__alt_data_end+0xffff23cc>
        (*dtor) (); 
}
   123f4:	0001883a 	nop
   123f8:	e037883a 	mov	sp,fp
   123fc:	dfc00117 	ldw	ra,4(sp)
   12400:	df000017 	ldw	fp,0(sp)
   12404:	dec00204 	addi	sp,sp,8
   12408:	f800283a 	ret

0001240c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1240c:	defffa04 	addi	sp,sp,-24
   12410:	dfc00515 	stw	ra,20(sp)
   12414:	df000415 	stw	fp,16(sp)
   12418:	df000404 	addi	fp,sp,16
   1241c:	e13ffe15 	stw	r4,-8(fp)
   12420:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12424:	e0bfff17 	ldw	r2,-4(fp)
   12428:	10800017 	ldw	r2,0(r2)
   1242c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12430:	e13ffe17 	ldw	r4,-8(fp)
   12434:	00074dc0 	call	74dc <strlen>
   12438:	10800044 	addi	r2,r2,1
   1243c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12440:	00000d06 	br	12478 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12444:	e0bffc17 	ldw	r2,-16(fp)
   12448:	10800217 	ldw	r2,8(r2)
   1244c:	e0fffd17 	ldw	r3,-12(fp)
   12450:	180d883a 	mov	r6,r3
   12454:	e17ffe17 	ldw	r5,-8(fp)
   12458:	1009883a 	mov	r4,r2
   1245c:	0012b5c0 	call	12b5c <memcmp>
   12460:	1000021e 	bne	r2,zero,1246c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12464:	e0bffc17 	ldw	r2,-16(fp)
   12468:	00000706 	br	12488 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1246c:	e0bffc17 	ldw	r2,-16(fp)
   12470:	10800017 	ldw	r2,0(r2)
   12474:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12478:	e0fffc17 	ldw	r3,-16(fp)
   1247c:	e0bfff17 	ldw	r2,-4(fp)
   12480:	18bff01e 	bne	r3,r2,12444 <__alt_data_end+0xffff2444>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   12484:	0005883a 	mov	r2,zero
}
   12488:	e037883a 	mov	sp,fp
   1248c:	dfc00117 	ldw	ra,4(sp)
   12490:	df000017 	ldw	fp,0(sp)
   12494:	dec00204 	addi	sp,sp,8
   12498:	f800283a 	ret

0001249c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1249c:	defffb04 	addi	sp,sp,-20
   124a0:	dfc00415 	stw	ra,16(sp)
   124a4:	df000315 	stw	fp,12(sp)
   124a8:	df000304 	addi	fp,sp,12
   124ac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   124b0:	d0a00917 	ldw	r2,-32732(gp)
   124b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   124b8:	00003106 	br	12580 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   124bc:	e0bffd17 	ldw	r2,-12(fp)
   124c0:	10800217 	ldw	r2,8(r2)
   124c4:	1009883a 	mov	r4,r2
   124c8:	00074dc0 	call	74dc <strlen>
   124cc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   124d0:	e0bffd17 	ldw	r2,-12(fp)
   124d4:	10c00217 	ldw	r3,8(r2)
   124d8:	e0bffe17 	ldw	r2,-8(fp)
   124dc:	10bfffc4 	addi	r2,r2,-1
   124e0:	1885883a 	add	r2,r3,r2
   124e4:	10800003 	ldbu	r2,0(r2)
   124e8:	10803fcc 	andi	r2,r2,255
   124ec:	1080201c 	xori	r2,r2,128
   124f0:	10bfe004 	addi	r2,r2,-128
   124f4:	10800bd8 	cmpnei	r2,r2,47
   124f8:	1000031e 	bne	r2,zero,12508 <alt_find_file+0x6c>
    {
      len -= 1;
   124fc:	e0bffe17 	ldw	r2,-8(fp)
   12500:	10bfffc4 	addi	r2,r2,-1
   12504:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12508:	e0bffe17 	ldw	r2,-8(fp)
   1250c:	e0ffff17 	ldw	r3,-4(fp)
   12510:	1885883a 	add	r2,r3,r2
   12514:	10800003 	ldbu	r2,0(r2)
   12518:	10803fcc 	andi	r2,r2,255
   1251c:	1080201c 	xori	r2,r2,128
   12520:	10bfe004 	addi	r2,r2,-128
   12524:	10800be0 	cmpeqi	r2,r2,47
   12528:	1000081e 	bne	r2,zero,1254c <alt_find_file+0xb0>
   1252c:	e0bffe17 	ldw	r2,-8(fp)
   12530:	e0ffff17 	ldw	r3,-4(fp)
   12534:	1885883a 	add	r2,r3,r2
   12538:	10800003 	ldbu	r2,0(r2)
   1253c:	10803fcc 	andi	r2,r2,255
   12540:	1080201c 	xori	r2,r2,128
   12544:	10bfe004 	addi	r2,r2,-128
   12548:	10000a1e 	bne	r2,zero,12574 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1254c:	e0bffd17 	ldw	r2,-12(fp)
   12550:	10800217 	ldw	r2,8(r2)
   12554:	e0fffe17 	ldw	r3,-8(fp)
   12558:	180d883a 	mov	r6,r3
   1255c:	e17fff17 	ldw	r5,-4(fp)
   12560:	1009883a 	mov	r4,r2
   12564:	0012b5c0 	call	12b5c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12568:	1000021e 	bne	r2,zero,12574 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1256c:	e0bffd17 	ldw	r2,-12(fp)
   12570:	00000706 	br	12590 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   12574:	e0bffd17 	ldw	r2,-12(fp)
   12578:	10800017 	ldw	r2,0(r2)
   1257c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12580:	e0fffd17 	ldw	r3,-12(fp)
   12584:	d0a00904 	addi	r2,gp,-32732
   12588:	18bfcc1e 	bne	r3,r2,124bc <__alt_data_end+0xffff24bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1258c:	0005883a 	mov	r2,zero
}
   12590:	e037883a 	mov	sp,fp
   12594:	dfc00117 	ldw	ra,4(sp)
   12598:	df000017 	ldw	fp,0(sp)
   1259c:	dec00204 	addi	sp,sp,8
   125a0:	f800283a 	ret

000125a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   125a4:	defffa04 	addi	sp,sp,-24
   125a8:	dfc00515 	stw	ra,20(sp)
   125ac:	df000415 	stw	fp,16(sp)
   125b0:	dc000315 	stw	r16,12(sp)
   125b4:	df000404 	addi	fp,sp,16
   125b8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   125bc:	00bffa04 	movi	r2,-24
   125c0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   125c4:	e03ffc15 	stw	zero,-16(fp)
   125c8:	00001d06 	br	12640 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   125cc:	04000074 	movhi	r16,1
   125d0:	840ef104 	addi	r16,r16,15300
   125d4:	e0bffc17 	ldw	r2,-16(fp)
   125d8:	01400304 	movi	r5,12
   125dc:	1009883a 	mov	r4,r2
   125e0:	0001a300 	call	1a30 <__mulsi3>
   125e4:	8085883a 	add	r2,r16,r2
   125e8:	10800017 	ldw	r2,0(r2)
   125ec:	1000111e 	bne	r2,zero,12634 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   125f0:	04000074 	movhi	r16,1
   125f4:	840ef104 	addi	r16,r16,15300
   125f8:	e0bffc17 	ldw	r2,-16(fp)
   125fc:	01400304 	movi	r5,12
   12600:	1009883a 	mov	r4,r2
   12604:	0001a300 	call	1a30 <__mulsi3>
   12608:	8085883a 	add	r2,r16,r2
   1260c:	e0fffe17 	ldw	r3,-8(fp)
   12610:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12614:	d0e00d17 	ldw	r3,-32716(gp)
   12618:	e0bffc17 	ldw	r2,-16(fp)
   1261c:	1880020e 	bge	r3,r2,12628 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   12620:	e0bffc17 	ldw	r2,-16(fp)
   12624:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
   12628:	e0bffc17 	ldw	r2,-16(fp)
   1262c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   12630:	00000606 	br	1264c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12634:	e0bffc17 	ldw	r2,-16(fp)
   12638:	10800044 	addi	r2,r2,1
   1263c:	e0bffc15 	stw	r2,-16(fp)
   12640:	e0bffc17 	ldw	r2,-16(fp)
   12644:	10800810 	cmplti	r2,r2,32
   12648:	103fe01e 	bne	r2,zero,125cc <__alt_data_end+0xffff25cc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1264c:	e0bffd17 	ldw	r2,-12(fp)
}
   12650:	e6ffff04 	addi	sp,fp,-4
   12654:	dfc00217 	ldw	ra,8(sp)
   12658:	df000117 	ldw	fp,4(sp)
   1265c:	dc000017 	ldw	r16,0(sp)
   12660:	dec00304 	addi	sp,sp,12
   12664:	f800283a 	ret

00012668 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12668:	deffff04 	addi	sp,sp,-4
   1266c:	df000015 	stw	fp,0(sp)
   12670:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   12674:	0001883a 	nop
   12678:	e037883a 	mov	sp,fp
   1267c:	df000017 	ldw	fp,0(sp)
   12680:	dec00104 	addi	sp,sp,4
   12684:	f800283a 	ret

00012688 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12688:	defff904 	addi	sp,sp,-28
   1268c:	dfc00615 	stw	ra,24(sp)
   12690:	df000515 	stw	fp,20(sp)
   12694:	df000504 	addi	fp,sp,20
   12698:	e13ffc15 	stw	r4,-16(fp)
   1269c:	e17ffd15 	stw	r5,-12(fp)
   126a0:	e1bffe15 	stw	r6,-8(fp)
   126a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   126a8:	e0800217 	ldw	r2,8(fp)
   126ac:	d8800015 	stw	r2,0(sp)
   126b0:	e1ffff17 	ldw	r7,-4(fp)
   126b4:	e1bffe17 	ldw	r6,-8(fp)
   126b8:	e17ffd17 	ldw	r5,-12(fp)
   126bc:	e13ffc17 	ldw	r4,-16(fp)
   126c0:	00128380 	call	12838 <alt_iic_isr_register>
}  
   126c4:	e037883a 	mov	sp,fp
   126c8:	dfc00117 	ldw	ra,4(sp)
   126cc:	df000017 	ldw	fp,0(sp)
   126d0:	dec00204 	addi	sp,sp,8
   126d4:	f800283a 	ret

000126d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   126d8:	defff904 	addi	sp,sp,-28
   126dc:	df000615 	stw	fp,24(sp)
   126e0:	df000604 	addi	fp,sp,24
   126e4:	e13ffe15 	stw	r4,-8(fp)
   126e8:	e17fff15 	stw	r5,-4(fp)
   126ec:	e0bfff17 	ldw	r2,-4(fp)
   126f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   126f4:	0005303a 	rdctl	r2,status
   126f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   126fc:	e0fffb17 	ldw	r3,-20(fp)
   12700:	00bfff84 	movi	r2,-2
   12704:	1884703a 	and	r2,r3,r2
   12708:	1001703a 	wrctl	status,r2
  
  return context;
   1270c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12710:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   12714:	00c00044 	movi	r3,1
   12718:	e0bffa17 	ldw	r2,-24(fp)
   1271c:	1884983a 	sll	r2,r3,r2
   12720:	1007883a 	mov	r3,r2
   12724:	d0a6e117 	ldw	r2,-25724(gp)
   12728:	1884b03a 	or	r2,r3,r2
   1272c:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12730:	d0a6e117 	ldw	r2,-25724(gp)
   12734:	100170fa 	wrctl	ienable,r2
   12738:	e0bffc17 	ldw	r2,-16(fp)
   1273c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12740:	e0bffd17 	ldw	r2,-12(fp)
   12744:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12748:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1274c:	0001883a 	nop
}
   12750:	e037883a 	mov	sp,fp
   12754:	df000017 	ldw	fp,0(sp)
   12758:	dec00104 	addi	sp,sp,4
   1275c:	f800283a 	ret

00012760 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   12760:	defff904 	addi	sp,sp,-28
   12764:	df000615 	stw	fp,24(sp)
   12768:	df000604 	addi	fp,sp,24
   1276c:	e13ffe15 	stw	r4,-8(fp)
   12770:	e17fff15 	stw	r5,-4(fp)
   12774:	e0bfff17 	ldw	r2,-4(fp)
   12778:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1277c:	0005303a 	rdctl	r2,status
   12780:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12784:	e0fffb17 	ldw	r3,-20(fp)
   12788:	00bfff84 	movi	r2,-2
   1278c:	1884703a 	and	r2,r3,r2
   12790:	1001703a 	wrctl	status,r2
  
  return context;
   12794:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12798:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1279c:	00c00044 	movi	r3,1
   127a0:	e0bffa17 	ldw	r2,-24(fp)
   127a4:	1884983a 	sll	r2,r3,r2
   127a8:	0084303a 	nor	r2,zero,r2
   127ac:	1007883a 	mov	r3,r2
   127b0:	d0a6e117 	ldw	r2,-25724(gp)
   127b4:	1884703a 	and	r2,r3,r2
   127b8:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   127bc:	d0a6e117 	ldw	r2,-25724(gp)
   127c0:	100170fa 	wrctl	ienable,r2
   127c4:	e0bffc17 	ldw	r2,-16(fp)
   127c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127cc:	e0bffd17 	ldw	r2,-12(fp)
   127d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   127d4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   127d8:	0001883a 	nop
}
   127dc:	e037883a 	mov	sp,fp
   127e0:	df000017 	ldw	fp,0(sp)
   127e4:	dec00104 	addi	sp,sp,4
   127e8:	f800283a 	ret

000127ec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   127ec:	defffc04 	addi	sp,sp,-16
   127f0:	df000315 	stw	fp,12(sp)
   127f4:	df000304 	addi	fp,sp,12
   127f8:	e13ffe15 	stw	r4,-8(fp)
   127fc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   12800:	000530fa 	rdctl	r2,ienable
   12804:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   12808:	00c00044 	movi	r3,1
   1280c:	e0bfff17 	ldw	r2,-4(fp)
   12810:	1884983a 	sll	r2,r3,r2
   12814:	1007883a 	mov	r3,r2
   12818:	e0bffd17 	ldw	r2,-12(fp)
   1281c:	1884703a 	and	r2,r3,r2
   12820:	1004c03a 	cmpne	r2,r2,zero
   12824:	10803fcc 	andi	r2,r2,255
}
   12828:	e037883a 	mov	sp,fp
   1282c:	df000017 	ldw	fp,0(sp)
   12830:	dec00104 	addi	sp,sp,4
   12834:	f800283a 	ret

00012838 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12838:	defff504 	addi	sp,sp,-44
   1283c:	dfc00a15 	stw	ra,40(sp)
   12840:	df000915 	stw	fp,36(sp)
   12844:	df000904 	addi	fp,sp,36
   12848:	e13ffc15 	stw	r4,-16(fp)
   1284c:	e17ffd15 	stw	r5,-12(fp)
   12850:	e1bffe15 	stw	r6,-8(fp)
   12854:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   12858:	00bffa84 	movi	r2,-22
   1285c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   12860:	e0bffd17 	ldw	r2,-12(fp)
   12864:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   12868:	e0bff817 	ldw	r2,-32(fp)
   1286c:	10800808 	cmpgei	r2,r2,32
   12870:	1000271e 	bne	r2,zero,12910 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12874:	0005303a 	rdctl	r2,status
   12878:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1287c:	e0fffb17 	ldw	r3,-20(fp)
   12880:	00bfff84 	movi	r2,-2
   12884:	1884703a 	and	r2,r3,r2
   12888:	1001703a 	wrctl	status,r2
  
  return context;
   1288c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   12890:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   12894:	00800074 	movhi	r2,1
   12898:	109a5604 	addi	r2,r2,26968
   1289c:	e0fff817 	ldw	r3,-32(fp)
   128a0:	180690fa 	slli	r3,r3,3
   128a4:	10c5883a 	add	r2,r2,r3
   128a8:	e0fffe17 	ldw	r3,-8(fp)
   128ac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   128b0:	00800074 	movhi	r2,1
   128b4:	109a5604 	addi	r2,r2,26968
   128b8:	e0fff817 	ldw	r3,-32(fp)
   128bc:	180690fa 	slli	r3,r3,3
   128c0:	10c5883a 	add	r2,r2,r3
   128c4:	10800104 	addi	r2,r2,4
   128c8:	e0ffff17 	ldw	r3,-4(fp)
   128cc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   128d0:	e0bffe17 	ldw	r2,-8(fp)
   128d4:	10000526 	beq	r2,zero,128ec <alt_iic_isr_register+0xb4>
   128d8:	e0bff817 	ldw	r2,-32(fp)
   128dc:	100b883a 	mov	r5,r2
   128e0:	e13ffc17 	ldw	r4,-16(fp)
   128e4:	00126d80 	call	126d8 <alt_ic_irq_enable>
   128e8:	00000406 	br	128fc <alt_iic_isr_register+0xc4>
   128ec:	e0bff817 	ldw	r2,-32(fp)
   128f0:	100b883a 	mov	r5,r2
   128f4:	e13ffc17 	ldw	r4,-16(fp)
   128f8:	00127600 	call	12760 <alt_ic_irq_disable>
   128fc:	e0bff715 	stw	r2,-36(fp)
   12900:	e0bffa17 	ldw	r2,-24(fp)
   12904:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12908:	e0bff917 	ldw	r2,-28(fp)
   1290c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   12910:	e0bff717 	ldw	r2,-36(fp)
}
   12914:	e037883a 	mov	sp,fp
   12918:	dfc00117 	ldw	ra,4(sp)
   1291c:	df000017 	ldw	fp,0(sp)
   12920:	dec00204 	addi	sp,sp,8
   12924:	f800283a 	ret

00012928 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   12928:	defff804 	addi	sp,sp,-32
   1292c:	dfc00715 	stw	ra,28(sp)
   12930:	df000615 	stw	fp,24(sp)
   12934:	dc000515 	stw	r16,20(sp)
   12938:	df000604 	addi	fp,sp,24
   1293c:	e13ffb15 	stw	r4,-20(fp)
   12940:	e17ffc15 	stw	r5,-16(fp)
   12944:	e1bffd15 	stw	r6,-12(fp)
   12948:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1294c:	e1bffe17 	ldw	r6,-8(fp)
   12950:	e17ffd17 	ldw	r5,-12(fp)
   12954:	e13ffc17 	ldw	r4,-16(fp)
   12958:	0010e440 	call	10e44 <open>
   1295c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   12960:	e0bffa17 	ldw	r2,-24(fp)
   12964:	10002216 	blt	r2,zero,129f0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   12968:	04000074 	movhi	r16,1
   1296c:	840ef104 	addi	r16,r16,15300
   12970:	e0bffa17 	ldw	r2,-24(fp)
   12974:	01400304 	movi	r5,12
   12978:	1009883a 	mov	r4,r2
   1297c:	0001a300 	call	1a30 <__mulsi3>
   12980:	8085883a 	add	r2,r16,r2
   12984:	10c00017 	ldw	r3,0(r2)
   12988:	e0bffb17 	ldw	r2,-20(fp)
   1298c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   12990:	04000074 	movhi	r16,1
   12994:	840ef104 	addi	r16,r16,15300
   12998:	e0bffa17 	ldw	r2,-24(fp)
   1299c:	01400304 	movi	r5,12
   129a0:	1009883a 	mov	r4,r2
   129a4:	0001a300 	call	1a30 <__mulsi3>
   129a8:	8085883a 	add	r2,r16,r2
   129ac:	10800104 	addi	r2,r2,4
   129b0:	10c00017 	ldw	r3,0(r2)
   129b4:	e0bffb17 	ldw	r2,-20(fp)
   129b8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   129bc:	04000074 	movhi	r16,1
   129c0:	840ef104 	addi	r16,r16,15300
   129c4:	e0bffa17 	ldw	r2,-24(fp)
   129c8:	01400304 	movi	r5,12
   129cc:	1009883a 	mov	r4,r2
   129d0:	0001a300 	call	1a30 <__mulsi3>
   129d4:	8085883a 	add	r2,r16,r2
   129d8:	10800204 	addi	r2,r2,8
   129dc:	10c00017 	ldw	r3,0(r2)
   129e0:	e0bffb17 	ldw	r2,-20(fp)
   129e4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   129e8:	e13ffa17 	ldw	r4,-24(fp)
   129ec:	00110e00 	call	110e0 <alt_release_fd>
  }
} 
   129f0:	0001883a 	nop
   129f4:	e6ffff04 	addi	sp,fp,-4
   129f8:	dfc00217 	ldw	ra,8(sp)
   129fc:	df000117 	ldw	fp,4(sp)
   12a00:	dc000017 	ldw	r16,0(sp)
   12a04:	dec00304 	addi	sp,sp,12
   12a08:	f800283a 	ret

00012a0c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   12a0c:	defffb04 	addi	sp,sp,-20
   12a10:	dfc00415 	stw	ra,16(sp)
   12a14:	df000315 	stw	fp,12(sp)
   12a18:	df000304 	addi	fp,sp,12
   12a1c:	e13ffd15 	stw	r4,-12(fp)
   12a20:	e17ffe15 	stw	r5,-8(fp)
   12a24:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   12a28:	01c07fc4 	movi	r7,511
   12a2c:	01800044 	movi	r6,1
   12a30:	e17ffd17 	ldw	r5,-12(fp)
   12a34:	01000074 	movhi	r4,1
   12a38:	210ef404 	addi	r4,r4,15312
   12a3c:	00129280 	call	12928 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   12a40:	01c07fc4 	movi	r7,511
   12a44:	000d883a 	mov	r6,zero
   12a48:	e17ffe17 	ldw	r5,-8(fp)
   12a4c:	01000074 	movhi	r4,1
   12a50:	210ef104 	addi	r4,r4,15300
   12a54:	00129280 	call	12928 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   12a58:	01c07fc4 	movi	r7,511
   12a5c:	01800044 	movi	r6,1
   12a60:	e17fff17 	ldw	r5,-4(fp)
   12a64:	01000074 	movhi	r4,1
   12a68:	210ef704 	addi	r4,r4,15324
   12a6c:	00129280 	call	12928 <alt_open_fd>
}  
   12a70:	0001883a 	nop
   12a74:	e037883a 	mov	sp,fp
   12a78:	dfc00117 	ldw	ra,4(sp)
   12a7c:	df000017 	ldw	fp,0(sp)
   12a80:	dec00204 	addi	sp,sp,8
   12a84:	f800283a 	ret

00012a88 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   12a88:	deffff04 	addi	sp,sp,-4
   12a8c:	df000015 	stw	fp,0(sp)
   12a90:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12a94:	000170fa 	wrctl	ienable,zero
}
   12a98:	0001883a 	nop
   12a9c:	e037883a 	mov	sp,fp
   12aa0:	df000017 	ldw	fp,0(sp)
   12aa4:	dec00104 	addi	sp,sp,4
   12aa8:	f800283a 	ret

00012aac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   12aac:	defffe04 	addi	sp,sp,-8
   12ab0:	df000115 	stw	fp,4(sp)
   12ab4:	df000104 	addi	fp,sp,4
   12ab8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   12abc:	e0bfff17 	ldw	r2,-4(fp)
   12ac0:	10bffe84 	addi	r2,r2,-6
   12ac4:	10c00428 	cmpgeui	r3,r2,16
   12ac8:	18001a1e 	bne	r3,zero,12b34 <alt_exception_cause_generated_bad_addr+0x88>
   12acc:	100690ba 	slli	r3,r2,2
   12ad0:	00800074 	movhi	r2,1
   12ad4:	108ab904 	addi	r2,r2,10980
   12ad8:	1885883a 	add	r2,r3,r2
   12adc:	10800017 	ldw	r2,0(r2)
   12ae0:	1000683a 	jmp	r2
   12ae4:	00012b24 	muli	zero,zero,1196
   12ae8:	00012b24 	muli	zero,zero,1196
   12aec:	00012b34 	movhi	zero,1196
   12af0:	00012b34 	movhi	zero,1196
   12af4:	00012b34 	movhi	zero,1196
   12af8:	00012b24 	muli	zero,zero,1196
   12afc:	00012b2c 	andhi	zero,zero,1196
   12b00:	00012b34 	movhi	zero,1196
   12b04:	00012b24 	muli	zero,zero,1196
   12b08:	00012b24 	muli	zero,zero,1196
   12b0c:	00012b34 	movhi	zero,1196
   12b10:	00012b24 	muli	zero,zero,1196
   12b14:	00012b2c 	andhi	zero,zero,1196
   12b18:	00012b34 	movhi	zero,1196
   12b1c:	00012b34 	movhi	zero,1196
   12b20:	00012b24 	muli	zero,zero,1196
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12b24:	00800044 	movi	r2,1
   12b28:	00000306 	br	12b38 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12b2c:	0005883a 	mov	r2,zero
   12b30:	00000106 	br	12b38 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   12b34:	0005883a 	mov	r2,zero
  }
}
   12b38:	e037883a 	mov	sp,fp
   12b3c:	df000017 	ldw	fp,0(sp)
   12b40:	dec00104 	addi	sp,sp,4
   12b44:	f800283a 	ret

00012b48 <atexit>:
   12b48:	200b883a 	mov	r5,r4
   12b4c:	000f883a 	mov	r7,zero
   12b50:	000d883a 	mov	r6,zero
   12b54:	0009883a 	mov	r4,zero
   12b58:	0012bd81 	jmpi	12bd8 <__register_exitproc>

00012b5c <memcmp>:
   12b5c:	01c000c4 	movi	r7,3
   12b60:	3980192e 	bgeu	r7,r6,12bc8 <memcmp+0x6c>
   12b64:	2144b03a 	or	r2,r4,r5
   12b68:	11c4703a 	and	r2,r2,r7
   12b6c:	10000f26 	beq	r2,zero,12bac <memcmp+0x50>
   12b70:	20800003 	ldbu	r2,0(r4)
   12b74:	28c00003 	ldbu	r3,0(r5)
   12b78:	10c0151e 	bne	r2,r3,12bd0 <memcmp+0x74>
   12b7c:	31bfff84 	addi	r6,r6,-2
   12b80:	01ffffc4 	movi	r7,-1
   12b84:	00000406 	br	12b98 <memcmp+0x3c>
   12b88:	20800003 	ldbu	r2,0(r4)
   12b8c:	28c00003 	ldbu	r3,0(r5)
   12b90:	31bfffc4 	addi	r6,r6,-1
   12b94:	10c00e1e 	bne	r2,r3,12bd0 <memcmp+0x74>
   12b98:	21000044 	addi	r4,r4,1
   12b9c:	29400044 	addi	r5,r5,1
   12ba0:	31fff91e 	bne	r6,r7,12b88 <__alt_data_end+0xffff2b88>
   12ba4:	0005883a 	mov	r2,zero
   12ba8:	f800283a 	ret
   12bac:	20c00017 	ldw	r3,0(r4)
   12bb0:	28800017 	ldw	r2,0(r5)
   12bb4:	18bfee1e 	bne	r3,r2,12b70 <__alt_data_end+0xffff2b70>
   12bb8:	31bfff04 	addi	r6,r6,-4
   12bbc:	21000104 	addi	r4,r4,4
   12bc0:	29400104 	addi	r5,r5,4
   12bc4:	39bff936 	bltu	r7,r6,12bac <__alt_data_end+0xffff2bac>
   12bc8:	303fe91e 	bne	r6,zero,12b70 <__alt_data_end+0xffff2b70>
   12bcc:	003ff506 	br	12ba4 <__alt_data_end+0xffff2ba4>
   12bd0:	10c5c83a 	sub	r2,r2,r3
   12bd4:	f800283a 	ret

00012bd8 <__register_exitproc>:
   12bd8:	defffa04 	addi	sp,sp,-24
   12bdc:	dc000315 	stw	r16,12(sp)
   12be0:	04000074 	movhi	r16,1
   12be4:	84136c04 	addi	r16,r16,19888
   12be8:	80c00017 	ldw	r3,0(r16)
   12bec:	dc400415 	stw	r17,16(sp)
   12bf0:	dfc00515 	stw	ra,20(sp)
   12bf4:	18805217 	ldw	r2,328(r3)
   12bf8:	2023883a 	mov	r17,r4
   12bfc:	10003726 	beq	r2,zero,12cdc <__register_exitproc+0x104>
   12c00:	10c00117 	ldw	r3,4(r2)
   12c04:	010007c4 	movi	r4,31
   12c08:	20c00e16 	blt	r4,r3,12c44 <__register_exitproc+0x6c>
   12c0c:	1a000044 	addi	r8,r3,1
   12c10:	8800221e 	bne	r17,zero,12c9c <__register_exitproc+0xc4>
   12c14:	18c00084 	addi	r3,r3,2
   12c18:	18c7883a 	add	r3,r3,r3
   12c1c:	18c7883a 	add	r3,r3,r3
   12c20:	12000115 	stw	r8,4(r2)
   12c24:	10c7883a 	add	r3,r2,r3
   12c28:	19400015 	stw	r5,0(r3)
   12c2c:	0005883a 	mov	r2,zero
   12c30:	dfc00517 	ldw	ra,20(sp)
   12c34:	dc400417 	ldw	r17,16(sp)
   12c38:	dc000317 	ldw	r16,12(sp)
   12c3c:	dec00604 	addi	sp,sp,24
   12c40:	f800283a 	ret
   12c44:	00800034 	movhi	r2,0
   12c48:	10800004 	addi	r2,r2,0
   12c4c:	10002626 	beq	r2,zero,12ce8 <__register_exitproc+0x110>
   12c50:	01006404 	movi	r4,400
   12c54:	d9400015 	stw	r5,0(sp)
   12c58:	d9800115 	stw	r6,4(sp)
   12c5c:	d9c00215 	stw	r7,8(sp)
   12c60:	00000000 	call	0 <__reset>
   12c64:	d9400017 	ldw	r5,0(sp)
   12c68:	d9800117 	ldw	r6,4(sp)
   12c6c:	d9c00217 	ldw	r7,8(sp)
   12c70:	10001d26 	beq	r2,zero,12ce8 <__register_exitproc+0x110>
   12c74:	81000017 	ldw	r4,0(r16)
   12c78:	10000115 	stw	zero,4(r2)
   12c7c:	02000044 	movi	r8,1
   12c80:	22405217 	ldw	r9,328(r4)
   12c84:	0007883a 	mov	r3,zero
   12c88:	12400015 	stw	r9,0(r2)
   12c8c:	20805215 	stw	r2,328(r4)
   12c90:	10006215 	stw	zero,392(r2)
   12c94:	10006315 	stw	zero,396(r2)
   12c98:	883fde26 	beq	r17,zero,12c14 <__alt_data_end+0xffff2c14>
   12c9c:	18c9883a 	add	r4,r3,r3
   12ca0:	2109883a 	add	r4,r4,r4
   12ca4:	1109883a 	add	r4,r2,r4
   12ca8:	21802215 	stw	r6,136(r4)
   12cac:	01800044 	movi	r6,1
   12cb0:	12406217 	ldw	r9,392(r2)
   12cb4:	30cc983a 	sll	r6,r6,r3
   12cb8:	4992b03a 	or	r9,r9,r6
   12cbc:	12406215 	stw	r9,392(r2)
   12cc0:	21c04215 	stw	r7,264(r4)
   12cc4:	01000084 	movi	r4,2
   12cc8:	893fd21e 	bne	r17,r4,12c14 <__alt_data_end+0xffff2c14>
   12ccc:	11006317 	ldw	r4,396(r2)
   12cd0:	218cb03a 	or	r6,r4,r6
   12cd4:	11806315 	stw	r6,396(r2)
   12cd8:	003fce06 	br	12c14 <__alt_data_end+0xffff2c14>
   12cdc:	18805304 	addi	r2,r3,332
   12ce0:	18805215 	stw	r2,328(r3)
   12ce4:	003fc606 	br	12c00 <__alt_data_end+0xffff2c00>
   12ce8:	00bfffc4 	movi	r2,-1
   12cec:	003fd006 	br	12c30 <__alt_data_end+0xffff2c30>
