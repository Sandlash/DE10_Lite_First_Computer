
Math_Training.elf:     file format elf32-littlenios2
Math_Training.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000114c4 memsz 0x000114c4 flags r-x
    LOAD off    0x000124e4 vaddr 0x000114e4 paddr 0x00012fd0 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00014abc vaddr 0x00014abc paddr 0x00014abc align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010eb0  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000404  000110e0  000110e0  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  000114e4  00012fd0  000124e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00014abc  00014abc  00014abc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00014c1c  00014c1c  00013fd0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013fd0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001000  00000000  00000000  00013ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029de3  00000000  00000000  00014ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a586  00000000  00000000  0003eddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cba1  00000000  00000000  00049361  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002560  00000000  00000000  00055f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d96  00000000  00000000  00058464  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018588  00000000  00000000  0005c1fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00074784  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019e0  00000000  00000000  00074798  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00079659  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  0007965c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00079660  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00079661  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00079662  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00079666  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007966a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0007966e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00079679  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00079684  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  0007968f  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  000796a3  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00062588  00000000  00000000  000796f1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
000110e0 l    d  .rodata	00000000 .rodata
000114e4 l    d  .rwdata	00000000 .rwdata
00014abc l    d  .bss	00000000 .bss
00014c1c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/emilio/UNI/Magistrale/Embedded/progetto/DE10_Lite_First_Computer/Software/Math_Training_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 1lnn.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mnist-utils.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003ac4 l     F .text	00000008 __fp_unlock
00003ad8 l     F .text	0000019c __sinit.part.1
00003c74 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000114e4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00005a60 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001132e l     O .rodata	00000010 zeroes.4404
00008170 l     F .text	000000bc __sbprintf
0001133e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
000085b4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00011d30 l     O .rwdata	00000020 lc_ctype_charset
00011d10 l     O .rwdata	00000020 lc_message_charset
00011d50 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0001136c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000bf74 l     F .text	000000fc __sprint_r.part.0
00011490 l     O .rodata	00000010 zeroes.4349
0000d5b0 l     F .text	000000bc __sbprintf
000114a0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000eaf4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ec08 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ec68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ed5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ee44 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000ef30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f10c l     F .text	0000003c alt_get_errno
0000f148 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0000f390 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012fc0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000f604 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f740 l     F .text	00000034 alt_dev_reg
00011f30 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000fa34 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000fc40 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010278 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000104b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010b74 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00014af0 g     O .bss	00000004 alt_instruction_exception_handler
0000b6e8 g     F .text	00000074 _mprec_log10
0000b7d4 g     F .text	0000008c __any_on
0000a3d8 g     F .text	00000054 _isatty_r
00011378 g     O .rodata	00000028 __mprec_tinytens
0000f048 g     F .text	0000007c alt_main
0000598c g     F .text	000000c0 _puts_r
00014b1c g     O .bss	00000100 alt_irq
0000a508 g     F .text	00000060 _lseek_r
00012fd0 g       *ABS*	00000000 __flash_rwdata_start
00009e64 g     F .text	000000ac __sflags
0000e850 g     F .text	00000088 .hidden __eqdf2
00014c1c g       *ABS*	00000000 __alt_heap_start
00005950 g     F .text	0000003c printf
0000daa8 g     F .text	0000009c _wcrtomb_r
00005d7c g     F .text	0000005c __sseek
00003e24 g     F .text	00000010 __sinit
0000d950 g     F .text	00000140 __swbuf_r
0000a42c g     F .text	0000007c _setlocale_r
00003c7c g     F .text	00000078 __sfmoreglue
0000f0e8 g     F .text	00000024 __malloc_unlock
00000b5c g     F .text	0000012c readImageFileHeader
0000a64c g     F .text	0000015c memmove
00003e0c g     F .text	00000018 _cleanup
0000a7a8 g     F .text	000000a8 _Balloc
000021a8 g     F .text	000000dc .hidden __gtdf2
00010e78 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004aa4 g     F .text	0000005c _fstat_r
00014abc g     O .bss	00000004 errno
00005cf8 g     F .text	00000008 __seofread
00014adc g     O .bss	00000004 alt_argv
0001af90 g       *ABS*	00000000 _gp
00011db0 g     O .rwdata	00000180 alt_fd_list
00010658 g     F .text	00000090 alt_find_dev
00005650 g     F .text	00000148 memcpy
00003acc g     F .text	0000000c _cleanup_r
000033ec g     F .text	000000dc .hidden __floatsidf
00010c58 g     F .text	0000007c alt_io_redirect
0000e8d8 g     F .text	000000f4 .hidden __ltdf2
000110e0 g       *ABS*	00000000 __DTOR_END__
00005a4c g     F .text	00000014 puts
00010e9c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000be24 g     F .text	00000074 __fpclassifyd
0000b644 g     F .text	000000a4 __ratio
0000d594 g     F .text	0000001c __vfiprintf_internal
0000fe38 g     F .text	0000021c altera_avalon_jtag_uart_read
00005920 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00003624 g     F .text	00000064 .hidden __udivsi3
0000ed98 g     F .text	000000ac isatty
000113c8 g     O .rodata	000000c8 __mprec_tens
0000a4a8 g     F .text	0000000c __locale_charset
00014ac8 g     O .bss	00000004 __malloc_top_pad
000007a4 g     F .text	00000128 updateCellWeights
00012fa0 g     O .rwdata	00000004 __mb_cur_max
0000a4d8 g     F .text	0000000c _localeconv_r
0000abdc g     F .text	0000003c __i2b
00009f10 g     F .text	000004c8 __sfvwrite_r
00000e9c g     F .text	00000068 getLabel
00005c50 g     F .text	00000054 _sbrk_r
0000b860 g     F .text	00000060 _read_r
00012fb8 g     O .rwdata	00000004 alt_max_fd
00003718 g     F .text	000000f0 _fclose_r
00003a94 g     F .text	00000030 fflush
00014ac4 g     O .bss	00000004 __malloc_max_sbrked_mem
00000f2c g     F .text	000008ac .hidden __adddf3
0000b3ec g     F .text	0000010c __b2d
0000e28c g     F .text	000005c4 .hidden __umoddi3
0000ef6c g     F .text	000000dc lseek
00012f90 g     O .rwdata	00000004 _global_impure_ptr
0000b8c0 g     F .text	00000564 _realloc_r
00014c1c g       *ABS*	00000000 __bss_end
00010a84 g     F .text	000000f0 alt_iic_isr_register
00010d70 g     F .text	00000108 alt_tick
0000dc90 g     F .text	000005fc .hidden __udivdi3
0000d8ac g     F .text	00000024 _fputwc_r
000113a0 g     O .rodata	00000028 __mprec_bigtens
0000a9c0 g     F .text	00000104 __s2b
0000ea4c g     F .text	000000a8 .hidden __floatunsidf
0000b12c g     F .text	00000060 __mcmp
00003e44 g     F .text	00000018 __fp_lock_all
00010a38 g     F .text	0000004c alt_ic_irq_enabled
00000e14 g     F .text	00000088 getImage
00010cd4 g     F .text	0000009c alt_alarm_stop
00014ae4 g     O .bss	00000004 alt_irq_active
00004644 g     F .text	00000444 _fseeko_r
000000fc g     F .exceptions	000000d4 alt_irq_handler
00011d88 g     O .rwdata	00000028 alt_dev_null
000008cc g     F .text	0000006c trainCell
00010498 g     F .text	00000020 alt_dcache_flush_all
0000aac4 g     F .text	00000068 __hi0bits
0000e9cc g     F .text	00000080 .hidden __fixdfsi
00000938 g     F .text	00000044 testCell
00012fd0 g       *ABS*	00000000 __ram_rwdata_end
00012fb0 g     O .rwdata	00000008 alt_dev_list
0000f640 g     F .text	00000100 write
000114e4 g       *ABS*	00000000 __ram_rodata_end
0000eca4 g     F .text	000000b8 fstat
0000e8d8 g     F .text	000000f4 .hidden __ledf2
0000aea4 g     F .text	00000140 __pow5mult
0000c088 g     F .text	0000150c ___vfiprintf_internal_r
00014ad4 g     O .bss	00000004 __nlocale_changed
00003688 g     F .text	00000058 .hidden __umodsi3
00014c1c g       *ABS*	00000000 end
00004a88 g     F .text	0000001c fseeko
00004628 g     F .text	0000001c fseek
0000f974 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000110e0 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
000102f0 g     F .text	0000007c alt_avalon_timer_sc_init
000034c8 g     F .text	00000064 .hidden __clzsi2
00010054 g     F .text	00000224 altera_avalon_jtag_uart_write
00000ae8 g     F .text	00000074 flipBytes
000005e4 g     F .text	0000013c calcCellOutput
00003e34 g     F .text	00000004 __sfp_lock_acquire
0000a568 g     F .text	000000e4 memchr
00005e78 g     F .text	000022dc ___vfprintf_internal_r
00004314 g     F .text	00000310 _free_r
0000a4b4 g     F .text	00000010 __locale_mb_cur_max
00008434 g     F .text	00000180 __call_exitprocs
00014ad0 g     O .bss	00000004 __mlocale_changed
00012f98 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00014ae8 g     O .bss	00000004 _alt_tick_rate
00000558 g     F .text	0000008c setCellInput
0000afe4 g     F .text	00000148 __lshift
00014aec g     O .bss	00000004 _alt_nticks
0000f3cc g     F .text	00000104 read
0000f7ac g     F .text	00000064 alt_sys_init
000058c0 g     F .text	00000060 _open_r
00010fc8 g     F .text	00000118 __register_exitproc
00000d34 g     F .text	00000070 openMNISTImageFile
0000ac18 g     F .text	0000028c __multiply
0000fce0 g     F .text	00000068 altera_avalon_jtag_uart_close
00000f04 g     F .text	00000028 .hidden __mulsi3
000114e4 g       *ABS*	00000000 __ram_rwdata_start
000110e0 g       *ABS*	00000000 __ram_rodata_start
00000488 g     F .text	000000d0 getLayerPrediction
00014af4 g     O .bss	00000028 __malloc_current_mallinfo
0000b4f8 g     F .text	0000014c __d2b
0000f810 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000107f0 g     F .text	000000c4 alt_get_fd
000083e0 g     F .text	00000054 _close_r
00010f4c g     F .text	0000007c memcmp
0000f8d0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014c1c g       *ABS*	00000000 __alt_stack_base
0000f920 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000828c g     F .text	00000154 __swsetup_r
000017d8 g     F .text	000009d0 .hidden __divdf3
00003cf4 g     F .text	00000118 __sfp
0000b75c g     F .text	00000078 __copybits
00011908 g     O .rwdata	00000408 __malloc_av_
00003e40 g     F .text	00000004 __sinit_lock_release
00002284 g     F .text	0000086c .hidden __muldf3
00005ca4 g     F .text	00000054 __sread
000041bc g     F .text	00000034 fread
000106e8 g     F .text	00000108 alt_find_file
000104f4 g     F .text	000000a4 alt_dev_llist_insert
0000f0c4 g     F .text	00000024 __malloc_lock
0000f554 g     F .text	000000b0 sbrk
00003a38 g     F .text	0000005c _fflush_r
0000d66c g     F .text	000000dc _calloc_r
00003f68 g     F .text	00000018 fopen
00014abc g       *ABS*	00000000 __bss_start
00005798 g     F .text	00000128 memset
00000a24 g     F .text	000000c4 main
00014ae0 g     O .bss	00000004 alt_envp
00014ac0 g     O .bss	00000004 __malloc_max_total_mem
0000f870 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000da90 g     F .text	00000018 __swbuf
00003f80 g     F .text	0000023c _fread_r
00000da4 g     F .text	00000070 openMNISTLabelFile
00005dd8 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00003808 g     F .text	00000014 fclose
000087dc g     F .text	00001688 _dtoa_r
00004e44 g     F .text	0000080c _malloc_r
0000dc04 g     F .text	00000030 __ascii_wctomb
00012fbc g     O .rwdata	00000004 alt_errno
00004b00 g     F .text	000000c4 _fwalk
0000352c g     F .text	00000084 .hidden __divsi3
000041f0 g     F .text	00000124 _malloc_trim_r
000110e0 g       *ABS*	00000000 __CTOR_END__
0000be98 g     F .text	000000dc strcmp
000110e0 g       *ABS*	00000000 __flash_rodata_start
000110e0 g       *ABS*	00000000 __DTOR_LIST__
0000e850 g     F .text	00000088 .hidden __nedf2
00000c88 g     F .text	000000ac readLabelFileHeader
0000f774 g     F .text	00000038 alt_irq_init
0000f4d0 g     F .text	00000084 alt_release_fd
000111e3 g     O .rodata	00000100 .hidden __clz_tab
00014acc g     O .bss	00000004 _PathLocale
00010f38 g     F .text	00000014 atexit
0000822c g     F .text	00000060 _write_r
0000a4e4 g     F .text	00000018 setlocale
00012f94 g     O .rwdata	00000004 _impure_ptr
00014ad8 g     O .bss	00000004 alt_argc
0000381c g     F .text	0000021c __sflush_r
000105f8 g     F .text	00000060 _do_dtors
0000a4d0 g     F .text	00000008 __locale_cjk_lang
00004624 g     F .text	00000004 _fseek_r
00005a7c g     F .text	000001d4 __srefill_r
00000720 g     F .text	00000084 getCellError
00000020 g       .exceptions	00000000 alt_irq_entry
0000b388 g     F .text	00000064 __ulp
00003e5c g     F .text	00000018 __fp_unlock_all
00012fa8 g     O .rwdata	00000008 alt_fs_list
0000097c g     F .text	000000a8 testLayer
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000a4fc g     F .text	0000000c localeconv
000108d4 g     F .text	00000050 alt_ic_isr_register
0000026c g     F .text	000000c8 getTargetOutput
00012fd0 g       *ABS*	00000000 _edata
00014c1c g       *ABS*	00000000 _end
0000d748 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000fd48 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00000334 g     F .text	00000154 initLayer
000109ac g     F .text	0000008c alt_ic_irq_disable
00005d00 g     F .text	0000007c __swrite
00012f9c g     O .rwdata	00000004 __malloc_trim_threshold
0000a4c4 g     F .text	0000000c __locale_msgcharset
000036e0 g     F .text	00000038 exit
00004bc4 g     F .text	000000c4 _fwalk_reent
0000b18c g     F .text	000001fc __mdiff
000035b0 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003e38 g     F .text	00000004 __sfp_lock_release
00003e74 g     F .text	000000f4 _fopen_r
0000ec34 g     F .text	00000034 _exit
0001036c g     F .text	0000012c alt_alarm_start
00004c88 g     F .text	000001bc __smakebuf_r
00005de0 g     F .text	00000098 strlen
0000f234 g     F .text	0000015c open
000021a8 g     F .text	000000dc .hidden __gedf2
00012fa4 g     O .rwdata	00000004 __wctomb
0000c070 g     F .text	00000018 __sprint_r
000108b4 g     F .text	00000020 alt_icache_flush_all
00012fc4 g     O .rwdata	00000004 alt_priority_mask
00010924 g     F .text	00000088 alt_ic_irq_enable
00008154 g     F .text	0000001c __vfprintf_internal
0000dc34 g     F .text	0000005c _wctomb_r
00002af0 g     F .text	000008fc .hidden __subdf3
0000ab2c g     F .text	000000b0 __lo0bits
00012fc8 g     O .rwdata	00000008 alt_alarm_list
00010598 g     F .text	00000060 _do_ctors
0000db44 g     F .text	000000c0 wcrtomb
0000eb30 g     F .text	000000d8 close
0000eeac g     F .text	00000084 alt_load
0000d8d0 g     F .text	00000080 fputwc
00003e3c g     F .text	00000004 __sinit_lock_acquire
0000a878 g     F .text	00000148 __multadd
0000a850 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	1092c704 	addi	r2,r2,19228
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	1092c704 	addi	r2,r2,19228
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6d817 	ldw	r2,-25760(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6d817 	ldw	r2,-25760(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6abe414 	ori	gp,gp,44944
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	1092af14 	ori	r2,r2,19132

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d30714 	ori	r3,r3,19484

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000eeac0 	call	eeac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000f0480 	call	f048 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffe0268>

0000026c <getTargetOutput>:

/**
 * @details Returns an output vector with targetIndex set to 1, all others to 0
 */

Vector getTargetOutput(int targetIndex){
     26c:	defff204 	addi	sp,sp,-56
     270:	df000d15 	stw	fp,52(sp)
     274:	df000d04 	addi	fp,sp,52
     278:	e13ffe15 	stw	r4,-8(fp)
     27c:	e17fff15 	stw	r5,-4(fp)
    Vector v;
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     280:	e03ff315 	stw	zero,-52(fp)
     284:	00000e06 	br	2c0 <getTargetOutput+0x54>
        v.val[i] = (i==targetIndex) ? 1 : 0;
     288:	e0fff317 	ldw	r3,-52(fp)
     28c:	e0bfff17 	ldw	r2,-4(fp)
     290:	1885003a 	cmpeq	r2,r3,r2
     294:	10c03fcc 	andi	r3,r2,255
     298:	e0bff317 	ldw	r2,-52(fp)
     29c:	1085883a 	add	r2,r2,r2
     2a0:	1085883a 	add	r2,r2,r2
     2a4:	e13ff304 	addi	r4,fp,-52
     2a8:	2085883a 	add	r2,r4,r2
     2ac:	10800104 	addi	r2,r2,4
     2b0:	10c00015 	stw	r3,0(r2)
 * @details Returns an output vector with targetIndex set to 1, all others to 0
 */

Vector getTargetOutput(int targetIndex){
    Vector v;
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     2b4:	e0bff317 	ldw	r2,-52(fp)
     2b8:	10800044 	addi	r2,r2,1
     2bc:	e0bff315 	stw	r2,-52(fp)
     2c0:	e0bff317 	ldw	r2,-52(fp)
     2c4:	10800290 	cmplti	r2,r2,10
     2c8:	103fef1e 	bne	r2,zero,288 <__alt_data_end+0xfffe0288>
        v.val[i] = (i==targetIndex) ? 1 : 0;
    }
    return v;
     2cc:	e0bffe17 	ldw	r2,-8(fp)
     2d0:	e0fff417 	ldw	r3,-48(fp)
     2d4:	10c00015 	stw	r3,0(r2)
     2d8:	e0fff517 	ldw	r3,-44(fp)
     2dc:	10c00115 	stw	r3,4(r2)
     2e0:	e0fff617 	ldw	r3,-40(fp)
     2e4:	10c00215 	stw	r3,8(r2)
     2e8:	e0fff717 	ldw	r3,-36(fp)
     2ec:	10c00315 	stw	r3,12(r2)
     2f0:	e0fff817 	ldw	r3,-32(fp)
     2f4:	10c00415 	stw	r3,16(r2)
     2f8:	e0fff917 	ldw	r3,-28(fp)
     2fc:	10c00515 	stw	r3,20(r2)
     300:	e0fffa17 	ldw	r3,-24(fp)
     304:	10c00615 	stw	r3,24(r2)
     308:	e0fffb17 	ldw	r3,-20(fp)
     30c:	10c00715 	stw	r3,28(r2)
     310:	e0fffc17 	ldw	r3,-16(fp)
     314:	10c00815 	stw	r3,32(r2)
     318:	e0fffd17 	ldw	r3,-12(fp)
     31c:	10c00915 	stw	r3,36(r2)
}
     320:	e0bffe17 	ldw	r2,-8(fp)
     324:	e037883a 	mov	sp,fp
     328:	df000017 	ldw	fp,0(sp)
     32c:	dec00104 	addi	sp,sp,4
     330:	f800283a 	ret

00000334 <initLayer>:
 * @attention It actually makes no difference whether the weights are
 * initialized to a constant (e.g. 0.5) or to a random number.
 * The result (85% success rate) will not change significantly.
 */

void initLayer(Layer *l, FILE *weightsFile){
     334:	defff804 	addi	sp,sp,-32
     338:	dfc00715 	stw	ra,28(sp)
     33c:	df000615 	stw	fp,24(sp)
     340:	dc000515 	stw	r16,20(sp)
     344:	df000604 	addi	fp,sp,24
     348:	e13ffd15 	stw	r4,-12(fp)
     34c:	e17ffe15 	stw	r5,-8(fp)
	int result=0;
     350:	e03ffc15 	stw	zero,-16(fp)
    
    for (int o=0; o<NUMBER_OF_OUTPUT_CELLS; o++){
     354:	e03ffa15 	stw	zero,-24(fp)
     358:	00004106 	br	460 <initLayer+0x12c>
        
        for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     35c:	e03ffb15 	stw	zero,-20(fp)
     360:	00002706 	br	400 <initLayer+0xcc>
            l->cell[o].input[i]=0;
     364:	e43ffd17 	ldw	r16,-12(fp)
     368:	e0bffa17 	ldw	r2,-24(fp)
     36c:	01418884 	movi	r5,1570
     370:	1009883a 	mov	r4,r2
     374:	0000f040 	call	f04 <__mulsi3>
     378:	1007883a 	mov	r3,r2
     37c:	e0bffb17 	ldw	r2,-20(fp)
     380:	1885883a 	add	r2,r3,r2
     384:	100490fa 	slli	r2,r2,3
     388:	8085883a 	add	r2,r16,r2
     38c:	10000015 	stw	zero,0(r2)
     390:	10000115 	stw	zero,4(r2)
            result=fread(&l->cell[o].weight[i], sizeof(double), 1, weightsFile);
     394:	01418884 	movi	r5,1570
     398:	e13ffa17 	ldw	r4,-24(fp)
     39c:	0000f040 	call	f04 <__mulsi3>
     3a0:	1007883a 	mov	r3,r2
     3a4:	e0bffb17 	ldw	r2,-20(fp)
     3a8:	1885883a 	add	r2,r3,r2
     3ac:	1080c404 	addi	r2,r2,784
     3b0:	100490fa 	slli	r2,r2,3
     3b4:	e0fffd17 	ldw	r3,-12(fp)
     3b8:	1885883a 	add	r2,r3,r2
     3bc:	e1fffe17 	ldw	r7,-8(fp)
     3c0:	01800044 	movi	r6,1
     3c4:	01400204 	movi	r5,8
     3c8:	1009883a 	mov	r4,r2
     3cc:	00041bc0 	call	41bc <fread>
     3d0:	e0bffc15 	stw	r2,-16(fp)

            if (result!=1) {
     3d4:	e0bffc17 	ldw	r2,-16(fp)
     3d8:	10800060 	cmpeqi	r2,r2,1
     3dc:	1000051e 	bne	r2,zero,3f4 <initLayer+0xc0>
                    printf("\nError when reading WEIGHTS file! Abort!\n");
     3e0:	01000074 	movhi	r4,1
     3e4:	21043804 	addi	r4,r4,4320
     3e8:	0005a4c0 	call	5a4c <puts>
                    exit(1);
     3ec:	01000044 	movi	r4,1
     3f0:	00036e00 	call	36e0 <exit>
void initLayer(Layer *l, FILE *weightsFile){
	int result=0;
    
    for (int o=0; o<NUMBER_OF_OUTPUT_CELLS; o++){
        
        for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     3f4:	e0bffb17 	ldw	r2,-20(fp)
     3f8:	10800044 	addi	r2,r2,1
     3fc:	e0bffb15 	stw	r2,-20(fp)
     400:	e0bffb17 	ldw	r2,-20(fp)
     404:	1080c410 	cmplti	r2,r2,784
     408:	103fd61e 	bne	r2,zero,364 <__alt_data_end+0xfffe0364>
                    printf("\nError when reading WEIGHTS file! Abort!\n");
                    exit(1);
                }
        }
        
        l->cell[o].output = 0;
     40c:	e43ffd17 	ldw	r16,-12(fp)
     410:	e0bffa17 	ldw	r2,-24(fp)
     414:	014c4404 	movi	r5,12560
     418:	1009883a 	mov	r4,r2
     41c:	0000f040 	call	f04 <__mulsi3>
     420:	8085883a 	add	r2,r16,r2
     424:	108c4004 	addi	r2,r2,12544
     428:	10000015 	stw	zero,0(r2)
     42c:	10000115 	stw	zero,4(r2)
        l->cell[o].bias = 0;
     430:	e43ffd17 	ldw	r16,-12(fp)
     434:	e0bffa17 	ldw	r2,-24(fp)
     438:	014c4404 	movi	r5,12560
     43c:	1009883a 	mov	r4,r2
     440:	0000f040 	call	f04 <__mulsi3>
     444:	8085883a 	add	r2,r16,r2
     448:	108c4204 	addi	r2,r2,12552
     44c:	10000015 	stw	zero,0(r2)
     450:	10000115 	stw	zero,4(r2)
 */

void initLayer(Layer *l, FILE *weightsFile){
	int result=0;
    
    for (int o=0; o<NUMBER_OF_OUTPUT_CELLS; o++){
     454:	e0bffa17 	ldw	r2,-24(fp)
     458:	10800044 	addi	r2,r2,1
     45c:	e0bffa15 	stw	r2,-24(fp)
     460:	e0bffa17 	ldw	r2,-24(fp)
     464:	10800290 	cmplti	r2,r2,10
     468:	103fbc1e 	bne	r2,zero,35c <__alt_data_end+0xfffe035c>
        }
        
        l->cell[o].output = 0;
        l->cell[o].bias = 0;
    }
}
     46c:	0001883a 	nop
     470:	e6ffff04 	addi	sp,fp,-4
     474:	dfc00217 	ldw	ra,8(sp)
     478:	df000117 	ldw	fp,4(sp)
     47c:	dc000017 	ldw	r16,0(sp)
     480:	dec00304 	addi	sp,sp,12
     484:	f800283a 	ret

00000488 <getLayerPrediction>:
/**
 * @details The output prediction is derived by simply sorting all output values
 * and using the index (=0-9 number) of the highest value as the prediction.
 */

uint8_t getLayerPrediction(Layer *l){
     488:	defff804 	addi	sp,sp,-32
     48c:	dfc00715 	stw	ra,28(sp)
     490:	df000615 	stw	fp,24(sp)
     494:	dc000515 	stw	r16,20(sp)
     498:	df000604 	addi	fp,sp,24
     49c:	e13ffe15 	stw	r4,-8(fp)
    
    double maxOut = 0;
     4a0:	e03ffa15 	stw	zero,-24(fp)
     4a4:	e03ffb15 	stw	zero,-20(fp)
    uint8_t maxInd = 0;
     4a8:	e03ffc05 	stb	zero,-16(fp)
    
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     4ac:	e03ffd15 	stw	zero,-12(fp)
     4b0:	00001f06 	br	530 <getLayerPrediction+0xa8>
        
        if (l->cell[i].output > maxOut){
     4b4:	e43ffe17 	ldw	r16,-8(fp)
     4b8:	e0bffd17 	ldw	r2,-12(fp)
     4bc:	014c4404 	movi	r5,12560
     4c0:	1009883a 	mov	r4,r2
     4c4:	0000f040 	call	f04 <__mulsi3>
     4c8:	8085883a 	add	r2,r16,r2
     4cc:	110c4004 	addi	r4,r2,12544
     4d0:	20800017 	ldw	r2,0(r4)
     4d4:	20c00117 	ldw	r3,4(r4)
     4d8:	e1bffa17 	ldw	r6,-24(fp)
     4dc:	e1fffb17 	ldw	r7,-20(fp)
     4e0:	1009883a 	mov	r4,r2
     4e4:	180b883a 	mov	r5,r3
     4e8:	00021a80 	call	21a8 <__gedf2>
     4ec:	00800d0e 	bge	zero,r2,524 <getLayerPrediction+0x9c>
            maxOut = l->cell[i].output;
     4f0:	e43ffe17 	ldw	r16,-8(fp)
     4f4:	e0bffd17 	ldw	r2,-12(fp)
     4f8:	014c4404 	movi	r5,12560
     4fc:	1009883a 	mov	r4,r2
     500:	0000f040 	call	f04 <__mulsi3>
     504:	8085883a 	add	r2,r16,r2
     508:	108c4004 	addi	r2,r2,12544
     50c:	10c00017 	ldw	r3,0(r2)
     510:	e0fffa15 	stw	r3,-24(fp)
     514:	10800117 	ldw	r2,4(r2)
     518:	e0bffb15 	stw	r2,-20(fp)
            maxInd = i;
     51c:	e0bffd17 	ldw	r2,-12(fp)
     520:	e0bffc05 	stb	r2,-16(fp)
uint8_t getLayerPrediction(Layer *l){
    
    double maxOut = 0;
    uint8_t maxInd = 0;
    
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     524:	e0bffd17 	ldw	r2,-12(fp)
     528:	10800044 	addi	r2,r2,1
     52c:	e0bffd15 	stw	r2,-12(fp)
     530:	e0bffd17 	ldw	r2,-12(fp)
     534:	10800290 	cmplti	r2,r2,10
     538:	103fde1e 	bne	r2,zero,4b4 <__alt_data_end+0xfffe04b4>
            maxOut = l->cell[i].output;
            maxInd = i;
        }
    }
    
    return maxInd;
     53c:	e0bffc03 	ldbu	r2,-16(fp)
    
}
     540:	e6ffff04 	addi	sp,fp,-4
     544:	dfc00217 	ldw	ra,8(sp)
     548:	df000117 	ldw	fp,4(sp)
     54c:	dc000017 	ldw	r16,0(sp)
     550:	dec00304 	addi	sp,sp,12
     554:	f800283a 	ret

00000558 <setCellInput>:
 * of a given MNIST image, setting input vector cells to [0,1]
 * based on the pixels of the image.
 * Scalar pixel intensity [=grey-scale] is ignored, only 0 or 1 [=black-white].
 */

void setCellInput(Cell *c, MNIST_Image *img){
     558:	defffc04 	addi	sp,sp,-16
     55c:	df000315 	stw	fp,12(sp)
     560:	df000304 	addi	fp,sp,12
     564:	e13ffe15 	stw	r4,-8(fp)
     568:	e17fff15 	stw	r5,-4(fp)
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     56c:	e03ffd15 	stw	zero,-12(fp)
     570:	00001406 	br	5c4 <setCellInput+0x6c>
        c->input[i] = img->pixel[i] ? 1 : 0;
     574:	e0ffff17 	ldw	r3,-4(fp)
     578:	e0bffd17 	ldw	r2,-12(fp)
     57c:	1885883a 	add	r2,r3,r2
     580:	10800003 	ldbu	r2,0(r2)
     584:	10803fcc 	andi	r2,r2,255
     588:	10000326 	beq	r2,zero,598 <setCellInput+0x40>
     58c:	0005883a 	mov	r2,zero
     590:	00cffc34 	movhi	r3,16368
     594:	00000206 	br	5a0 <setCellInput+0x48>
     598:	0005883a 	mov	r2,zero
     59c:	0007883a 	mov	r3,zero
     5a0:	e17ffe17 	ldw	r5,-8(fp)
     5a4:	e13ffd17 	ldw	r4,-12(fp)
     5a8:	200890fa 	slli	r4,r4,3
     5ac:	2909883a 	add	r4,r5,r4
     5b0:	20800015 	stw	r2,0(r4)
     5b4:	20c00115 	stw	r3,4(r4)
 * Scalar pixel intensity [=grey-scale] is ignored, only 0 or 1 [=black-white].
 */

void setCellInput(Cell *c, MNIST_Image *img){
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     5b8:	e0bffd17 	ldw	r2,-12(fp)
     5bc:	10800044 	addi	r2,r2,1
     5c0:	e0bffd15 	stw	r2,-12(fp)
     5c4:	e0bffd17 	ldw	r2,-12(fp)
     5c8:	1080c410 	cmplti	r2,r2,784
     5cc:	103fe91e 	bne	r2,zero,574 <__alt_data_end+0xfffe0574>
        c->input[i] = img->pixel[i] ? 1 : 0;
    }
}
     5d0:	0001883a 	nop
     5d4:	e037883a 	mov	sp,fp
     5d8:	df000017 	ldw	fp,0(sp)
     5dc:	dec00104 	addi	sp,sp,4
     5e0:	f800283a 	ret

000005e4 <calcCellOutput>:
/**
 * @details Calculates a cell's output by suming all input-weight-products
 * and normalizes to [0-1].
 */

void calcCellOutput(Cell *c){
     5e4:	defffa04 	addi	sp,sp,-24
     5e8:	dfc00515 	stw	ra,20(sp)
     5ec:	df000415 	stw	fp,16(sp)
     5f0:	dc400315 	stw	r17,12(sp)
     5f4:	dc000215 	stw	r16,8(sp)
     5f8:	df000404 	addi	fp,sp,16
     5fc:	e13ffd15 	stw	r4,-12(fp)
    
    c->output=0;
     600:	e0bffd17 	ldw	r2,-12(fp)
     604:	100c4015 	stw	zero,12544(r2)
     608:	100c4115 	stw	zero,12548(r2)
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     60c:	e03ffc15 	stw	zero,-16(fp)
     610:	00002806 	br	6b4 <calcCellOutput+0xd0>
        c->output += c->input[i] * c->weight[i];
     614:	e0bffd17 	ldw	r2,-12(fp)
     618:	140c4017 	ldw	r16,12544(r2)
     61c:	144c4117 	ldw	r17,12548(r2)
     620:	e0fffd17 	ldw	r3,-12(fp)
     624:	e0bffc17 	ldw	r2,-16(fp)
     628:	100490fa 	slli	r2,r2,3
     62c:	1889883a 	add	r4,r3,r2
     630:	20800017 	ldw	r2,0(r4)
     634:	20c00117 	ldw	r3,4(r4)
     638:	e17ffd17 	ldw	r5,-12(fp)
     63c:	e13ffc17 	ldw	r4,-16(fp)
     640:	2100c404 	addi	r4,r4,784
     644:	200890fa 	slli	r4,r4,3
     648:	290d883a 	add	r6,r5,r4
     64c:	31000017 	ldw	r4,0(r6)
     650:	31400117 	ldw	r5,4(r6)
     654:	200d883a 	mov	r6,r4
     658:	280f883a 	mov	r7,r5
     65c:	1009883a 	mov	r4,r2
     660:	180b883a 	mov	r5,r3
     664:	00022840 	call	2284 <__muldf3>
     668:	1009883a 	mov	r4,r2
     66c:	180b883a 	mov	r5,r3
     670:	2005883a 	mov	r2,r4
     674:	2807883a 	mov	r3,r5
     678:	100d883a 	mov	r6,r2
     67c:	180f883a 	mov	r7,r3
     680:	8009883a 	mov	r4,r16
     684:	880b883a 	mov	r5,r17
     688:	0000f2c0 	call	f2c <__adddf3>
     68c:	1009883a 	mov	r4,r2
     690:	180b883a 	mov	r5,r3
     694:	2005883a 	mov	r2,r4
     698:	2807883a 	mov	r3,r5
     69c:	e13ffd17 	ldw	r4,-12(fp)
     6a0:	208c4015 	stw	r2,12544(r4)
     6a4:	20cc4115 	stw	r3,12548(r4)

void calcCellOutput(Cell *c){
    
    c->output=0;
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     6a8:	e0bffc17 	ldw	r2,-16(fp)
     6ac:	10800044 	addi	r2,r2,1
     6b0:	e0bffc15 	stw	r2,-16(fp)
     6b4:	e0bffc17 	ldw	r2,-16(fp)
     6b8:	1080c410 	cmplti	r2,r2,784
     6bc:	103fd51e 	bne	r2,zero,614 <__alt_data_end+0xfffe0614>
        c->output += c->input[i] * c->weight[i];
    }
    
    c->output /= NUMBER_OF_INPUT_CELLS;             // normalize output (0-1)
     6c0:	e13ffd17 	ldw	r4,-12(fp)
     6c4:	208c4017 	ldw	r2,12544(r4)
     6c8:	20cc4117 	ldw	r3,12548(r4)
     6cc:	000d883a 	mov	r6,zero
     6d0:	01d02274 	movhi	r7,16521
     6d4:	39e00004 	addi	r7,r7,-32768
     6d8:	1009883a 	mov	r4,r2
     6dc:	180b883a 	mov	r5,r3
     6e0:	00017d80 	call	17d8 <__divdf3>
     6e4:	1009883a 	mov	r4,r2
     6e8:	180b883a 	mov	r5,r3
     6ec:	2005883a 	mov	r2,r4
     6f0:	2807883a 	mov	r3,r5
     6f4:	e13ffd17 	ldw	r4,-12(fp)
     6f8:	208c4015 	stw	r2,12544(r4)
     6fc:	20cc4115 	stw	r3,12548(r4)
}
     700:	0001883a 	nop
     704:	e6fffe04 	addi	sp,fp,-8
     708:	dfc00317 	ldw	ra,12(sp)
     70c:	df000217 	ldw	fp,8(sp)
     710:	dc400117 	ldw	r17,4(sp)
     714:	dc000017 	ldw	r16,0(sp)
     718:	dec00404 	addi	sp,sp,16
     71c:	f800283a 	ret

00000720 <getCellError>:

/**
 * @details Returns the difference between a target value and the cell's ouput
 */

double getCellError(Cell *c, int target){
     720:	defffa04 	addi	sp,sp,-24
     724:	dfc00515 	stw	ra,20(sp)
     728:	df000415 	stw	fp,16(sp)
     72c:	df000404 	addi	fp,sp,16
     730:	e13ffe15 	stw	r4,-8(fp)
     734:	e17fff15 	stw	r5,-4(fp)

    double err = target - c->output;
     738:	e13fff17 	ldw	r4,-4(fp)
     73c:	00033ec0 	call	33ec <__floatsidf>
     740:	1011883a 	mov	r8,r2
     744:	1813883a 	mov	r9,r3
     748:	e13ffe17 	ldw	r4,-8(fp)
     74c:	208c4017 	ldw	r2,12544(r4)
     750:	20cc4117 	ldw	r3,12548(r4)
     754:	100d883a 	mov	r6,r2
     758:	180f883a 	mov	r7,r3
     75c:	4009883a 	mov	r4,r8
     760:	480b883a 	mov	r5,r9
     764:	0002af00 	call	2af0 <__subdf3>
     768:	1009883a 	mov	r4,r2
     76c:	180b883a 	mov	r5,r3
     770:	e13ffc15 	stw	r4,-16(fp)
     774:	e17ffd15 	stw	r5,-12(fp)

    return err;
     778:	e0bffc17 	ldw	r2,-16(fp)
     77c:	e0fffd17 	ldw	r3,-12(fp)
     780:	1009883a 	mov	r4,r2
     784:	180b883a 	mov	r5,r3
}
     788:	2005883a 	mov	r2,r4
     78c:	2807883a 	mov	r3,r5
     790:	e037883a 	mov	sp,fp
     794:	dfc00117 	ldw	ra,4(sp)
     798:	df000017 	ldw	fp,0(sp)
     79c:	dec00204 	addi	sp,sp,8
     7a0:	f800283a 	ret

000007a4 <updateCellWeights>:

/**
 * @details Updates a cell's weights based on given error and LEARNING_RATE
 */

void updateCellWeights(Cell *c, double err){
     7a4:	defff804 	addi	sp,sp,-32
     7a8:	dfc00715 	stw	ra,28(sp)
     7ac:	df000615 	stw	fp,24(sp)
     7b0:	dc400515 	stw	r17,20(sp)
     7b4:	dc000415 	stw	r16,16(sp)
     7b8:	df000604 	addi	fp,sp,24
     7bc:	e13ffb15 	stw	r4,-20(fp)
     7c0:	e17ffc15 	stw	r5,-16(fp)
     7c4:	e1bffd15 	stw	r6,-12(fp)
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     7c8:	e03ffa15 	stw	zero,-24(fp)
     7cc:	00003406 	br	8a0 <updateCellWeights+0xfc>
        c->weight[i] += LEARNING_RATE * c->input[i] * err;
     7d0:	e0fffb17 	ldw	r3,-20(fp)
     7d4:	e0bffa17 	ldw	r2,-24(fp)
     7d8:	1080c404 	addi	r2,r2,784
     7dc:	100490fa 	slli	r2,r2,3
     7e0:	1885883a 	add	r2,r3,r2
     7e4:	14000017 	ldw	r16,0(r2)
     7e8:	14400117 	ldw	r17,4(r2)
     7ec:	e0fffb17 	ldw	r3,-20(fp)
     7f0:	e0bffa17 	ldw	r2,-24(fp)
     7f4:	100490fa 	slli	r2,r2,3
     7f8:	1889883a 	add	r4,r3,r2
     7fc:	20800017 	ldw	r2,0(r4)
     800:	20c00117 	ldw	r3,4(r4)
     804:	01a666b4 	movhi	r6,39322
     808:	31a66684 	addi	r6,r6,-26214
     80c:	01cfeab4 	movhi	r7,16298
     810:	39e66644 	addi	r7,r7,-26215
     814:	1009883a 	mov	r4,r2
     818:	180b883a 	mov	r5,r3
     81c:	00022840 	call	2284 <__muldf3>
     820:	1009883a 	mov	r4,r2
     824:	180b883a 	mov	r5,r3
     828:	2005883a 	mov	r2,r4
     82c:	2807883a 	mov	r3,r5
     830:	e1bffc17 	ldw	r6,-16(fp)
     834:	e1fffd17 	ldw	r7,-12(fp)
     838:	1009883a 	mov	r4,r2
     83c:	180b883a 	mov	r5,r3
     840:	00022840 	call	2284 <__muldf3>
     844:	1009883a 	mov	r4,r2
     848:	180b883a 	mov	r5,r3
     84c:	2005883a 	mov	r2,r4
     850:	2807883a 	mov	r3,r5
     854:	100d883a 	mov	r6,r2
     858:	180f883a 	mov	r7,r3
     85c:	8009883a 	mov	r4,r16
     860:	880b883a 	mov	r5,r17
     864:	0000f2c0 	call	f2c <__adddf3>
     868:	1009883a 	mov	r4,r2
     86c:	180b883a 	mov	r5,r3
     870:	2005883a 	mov	r2,r4
     874:	2807883a 	mov	r3,r5
     878:	e17ffb17 	ldw	r5,-20(fp)
     87c:	e13ffa17 	ldw	r4,-24(fp)
     880:	2100c404 	addi	r4,r4,784
     884:	200890fa 	slli	r4,r4,3
     888:	2909883a 	add	r4,r5,r4
     88c:	20800015 	stw	r2,0(r4)
     890:	20c00115 	stw	r3,4(r4)
 * @details Updates a cell's weights based on given error and LEARNING_RATE
 */

void updateCellWeights(Cell *c, double err){
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     894:	e0bffa17 	ldw	r2,-24(fp)
     898:	10800044 	addi	r2,r2,1
     89c:	e0bffa15 	stw	r2,-24(fp)
     8a0:	e0bffa17 	ldw	r2,-24(fp)
     8a4:	1080c410 	cmplti	r2,r2,784
     8a8:	103fc91e 	bne	r2,zero,7d0 <__alt_data_end+0xfffe07d0>
        c->weight[i] += LEARNING_RATE * c->input[i] * err;
    }
}
     8ac:	0001883a 	nop
     8b0:	e6fffe04 	addi	sp,fp,-8
     8b4:	dfc00317 	ldw	ra,12(sp)
     8b8:	df000217 	ldw	fp,8(sp)
     8bc:	dc400117 	ldw	r17,4(sp)
     8c0:	dc000017 	ldw	r16,0(sp)
     8c4:	dec00404 	addi	sp,sp,16
     8c8:	f800283a 	ret

000008cc <trainCell>:
/**
 * @details Performs the training algorithm:
 * feeding input, calculate output, calculate error, update weights)
 */

void trainCell(Cell *c, MNIST_Image *img, int target){
     8cc:	defff904 	addi	sp,sp,-28
     8d0:	dfc00615 	stw	ra,24(sp)
     8d4:	df000515 	stw	fp,20(sp)
     8d8:	df000504 	addi	fp,sp,20
     8dc:	e13ffd15 	stw	r4,-12(fp)
     8e0:	e17ffe15 	stw	r5,-8(fp)
     8e4:	e1bfff15 	stw	r6,-4(fp)
    
    setCellInput(c, img);
     8e8:	e17ffe17 	ldw	r5,-8(fp)
     8ec:	e13ffd17 	ldw	r4,-12(fp)
     8f0:	00005580 	call	558 <setCellInput>
    calcCellOutput(c);
     8f4:	e13ffd17 	ldw	r4,-12(fp)
     8f8:	00005e40 	call	5e4 <calcCellOutput>
    
    // learning (by updating the weights)
    double err = getCellError(c, target);
     8fc:	e17fff17 	ldw	r5,-4(fp)
     900:	e13ffd17 	ldw	r4,-12(fp)
     904:	00007200 	call	720 <getCellError>
     908:	e0bffb15 	stw	r2,-20(fp)
     90c:	e0fffc15 	stw	r3,-16(fp)
    updateCellWeights(c, err);
     910:	e17ffb17 	ldw	r5,-20(fp)
     914:	e1bffc17 	ldw	r6,-16(fp)
     918:	e13ffd17 	ldw	r4,-12(fp)
     91c:	00007a40 	call	7a4 <updateCellWeights>
}
     920:	0001883a 	nop
     924:	e037883a 	mov	sp,fp
     928:	dfc00117 	ldw	ra,4(sp)
     92c:	df000017 	ldw	fp,0(sp)
     930:	dec00204 	addi	sp,sp,8
     934:	f800283a 	ret

00000938 <testCell>:
/**
 * @details Performs the testing of the trained network
 * Same as training a cell, but without updating weights (learning)
 */

void testCell(Cell *c, MNIST_Image *img){
     938:	defffc04 	addi	sp,sp,-16
     93c:	dfc00315 	stw	ra,12(sp)
     940:	df000215 	stw	fp,8(sp)
     944:	df000204 	addi	fp,sp,8
     948:	e13ffe15 	stw	r4,-8(fp)
     94c:	e17fff15 	stw	r5,-4(fp)
    
    setCellInput(c, img);
     950:	e17fff17 	ldw	r5,-4(fp)
     954:	e13ffe17 	ldw	r4,-8(fp)
     958:	00005580 	call	558 <setCellInput>
    calcCellOutput(c);
     95c:	e13ffe17 	ldw	r4,-8(fp)
     960:	00005e40 	call	5e4 <calcCellOutput>
    
}
     964:	0001883a 	nop
     968:	e037883a 	mov	sp,fp
     96c:	dfc00117 	ldw	ra,4(sp)
     970:	df000017 	ldw	fp,0(sp)
     974:	dec00204 	addi	sp,sp,8
     978:	f800283a 	ret

0000097c <testLayer>:
 * @details Tests a layer by looping through and testing its cells
 * Exactly the same as TrainLayer() but WITHOUT LEARNING.
 * @param l A pointer to the layer that is to be training
 */

int testLayer(Layer *l){
     97c:	deff3604 	addi	sp,sp,-808
     980:	dfc0c915 	stw	ra,804(sp)
     984:	df00c815 	stw	fp,800(sp)
     988:	df00c804 	addi	fp,sp,800
     98c:	e13fff15 	stw	r4,-4(fp)
    
    // open MNIST files
    FILE *imageFile;
    imageFile = openMNISTImageFile(MNIST_TESTING_SET_IMAGE_FILE_NAME);
     990:	01000074 	movhi	r4,1
     994:	21044304 	addi	r4,r4,4364
     998:	0000d340 	call	d34 <openMNISTImageFile>
     99c:	e0bf3915 	stw	r2,-796(fp)
    
        
	// Reading next image
	MNIST_Image img = getImage(imageFile);
     9a0:	e0bf3a44 	addi	r2,fp,-791
     9a4:	e17f3917 	ldw	r5,-796(fp)
     9a8:	1009883a 	mov	r4,r2
     9ac:	0000e140 	call	e14 <getImage>


	// loop through all output cells for the given image
	for (int i=0; i < NUMBER_OF_OUTPUT_CELLS; i++){
     9b0:	e03f3815 	stw	zero,-800(fp)
     9b4:	00000d06 	br	9ec <testLayer+0x70>
		testCell(&l->cell[i], &img);
     9b8:	014c4404 	movi	r5,12560
     9bc:	e13f3817 	ldw	r4,-800(fp)
     9c0:	0000f040 	call	f04 <__mulsi3>
     9c4:	1007883a 	mov	r3,r2
     9c8:	e0bfff17 	ldw	r2,-4(fp)
     9cc:	10c5883a 	add	r2,r2,r3
     9d0:	e0ff3a44 	addi	r3,fp,-791
     9d4:	180b883a 	mov	r5,r3
     9d8:	1009883a 	mov	r4,r2
     9dc:	00009380 	call	938 <testCell>
	// Reading next image
	MNIST_Image img = getImage(imageFile);


	// loop through all output cells for the given image
	for (int i=0; i < NUMBER_OF_OUTPUT_CELLS; i++){
     9e0:	e0bf3817 	ldw	r2,-800(fp)
     9e4:	10800044 	addi	r2,r2,1
     9e8:	e0bf3815 	stw	r2,-800(fp)
     9ec:	e0bf3817 	ldw	r2,-800(fp)
     9f0:	10800290 	cmplti	r2,r2,10
     9f4:	103ff01e 	bne	r2,zero,9b8 <__alt_data_end+0xfffe09b8>
		testCell(&l->cell[i], &img);
	}

	uint8_t predictedNum = getLayerPrediction(l);
     9f8:	e13fff17 	ldw	r4,-4(fp)
     9fc:	00004880 	call	488 <getLayerPrediction>
     a00:	e0bf3a05 	stb	r2,-792(fp)
        
    
    // Close files
    fclose(imageFile);
     a04:	e13f3917 	ldw	r4,-796(fp)
     a08:	00038080 	call	3808 <fclose>
    
    return predictedNum;
     a0c:	e0bf3a03 	ldbu	r2,-792(fp)

}
     a10:	e037883a 	mov	sp,fp
     a14:	dfc00117 	ldw	ra,4(sp)
     a18:	df000017 	ldw	fp,0(sp)
     a1c:	dec00204 	addi	sp,sp,8
     a20:	f800283a 	ret

00000a24 <main>:

/**
 * @details Main function to run MNIST-1LNN
 */

int main() {
     a24:	defffe04 	addi	sp,sp,-8
     a28:	dfc00115 	stw	ra,4(sp)
     a2c:	df000015 	stw	fp,0(sp)
     a30:	d839883a 	mov	fp,sp
     a34:	023fffb4 	movhi	r8,65534
     a38:	42055504 	addi	r8,r8,5460
     a3c:	da37883a 	add	sp,sp,r8
	uint8_t img_ready=0;
     a40:	00bfffb4 	movhi	r2,65534
     a44:	10855504 	addi	r2,r2,5460
     a48:	1705883a 	add	r2,r2,fp
     a4c:	10000005 	stb	zero,0(r2)
	uint8_t result;

    Layer outputLayer;
    FILE *weightsFile;

    weightsFile=fopen(MNIST_WEIGHTS_INIT_FILE_NAME, "rb");
     a50:	01400074 	movhi	r5,1
     a54:	29444a04 	addi	r5,r5,4392
     a58:	01000074 	movhi	r4,1
     a5c:	21044b04 	addi	r4,r4,4396
     a60:	0003f680 	call	3f68 <fopen>
     a64:	00ffffb4 	movhi	r3,65534
     a68:	18c55604 	addi	r3,r3,5464
     a6c:	1f07883a 	add	r3,r3,fp
     a70:	18800015 	stw	r2,0(r3)
    initLayer(&outputLayer, weightsFile);
     a74:	00ffffb4 	movhi	r3,65534
     a78:	18c55804 	addi	r3,r3,5472
     a7c:	e0c5883a 	add	r2,fp,r3
     a80:	00ffffb4 	movhi	r3,65534
     a84:	18c55604 	addi	r3,r3,5464
     a88:	1f07883a 	add	r3,r3,fp
     a8c:	19400017 	ldw	r5,0(r3)
     a90:	1009883a 	mov	r4,r2
     a94:	00003340 	call	334 <initLayer>
    fclose(weightsFile);
     a98:	00bfffb4 	movhi	r2,65534
     a9c:	10855604 	addi	r2,r2,5464
     aa0:	1705883a 	add	r2,r2,fp
     aa4:	11000017 	ldw	r4,0(r2)
     aa8:	00038080 	call	3808 <fclose>
    
    while(1){
    	if(img_ready)
     aac:	00ffffb4 	movhi	r3,65534
     ab0:	18c55504 	addi	r3,r3,5460
     ab4:	1f07883a 	add	r3,r3,fp
     ab8:	18800003 	ldbu	r2,0(r3)
     abc:	103ffb26 	beq	r2,zero,aac <__alt_data_end+0xfffe0aac>
    		 result=testLayer(&outputLayer);
     ac0:	00ffffb4 	movhi	r3,65534
     ac4:	18c55804 	addi	r3,r3,5472
     ac8:	e0c5883a 	add	r2,fp,r3
     acc:	1009883a 	mov	r4,r2
     ad0:	000097c0 	call	97c <testLayer>
     ad4:	00ffffb4 	movhi	r3,65534
     ad8:	18c55704 	addi	r3,r3,5468
     adc:	1f07883a 	add	r3,r3,fp
     ae0:	18800005 	stb	r2,0(r3)
    }
     ae4:	003ff106 	br	aac <__alt_data_end+0xfffe0aac>

00000ae8 <flipBytes>:
 * @details Reverse byte order in 32bit numbers
 * MNIST files contain all numbers in reversed byte order,
 * and hence must be reversed before using
 */

uint32_t flipBytes(uint32_t n){
     ae8:	defffa04 	addi	sp,sp,-24
     aec:	df000515 	stw	fp,20(sp)
     af0:	df000504 	addi	fp,sp,20
     af4:	e13fff15 	stw	r4,-4(fp)
    
    uint32_t b0,b1,b2,b3;
    
    b0 = (n & 0x000000ff) <<  24u;
     af8:	e0bfff17 	ldw	r2,-4(fp)
     afc:	1004963a 	slli	r2,r2,24
     b00:	e0bffb15 	stw	r2,-20(fp)
    b1 = (n & 0x0000ff00) <<   8u;
     b04:	e0bfff17 	ldw	r2,-4(fp)
     b08:	10bfc00c 	andi	r2,r2,65280
     b0c:	1004923a 	slli	r2,r2,8
     b10:	e0bffc15 	stw	r2,-16(fp)
    b2 = (n & 0x00ff0000) >>   8u;
     b14:	e0bfff17 	ldw	r2,-4(fp)
     b18:	10803fec 	andhi	r2,r2,255
     b1c:	1004d23a 	srli	r2,r2,8
     b20:	e0bffd15 	stw	r2,-12(fp)
    b3 = (n & 0xff000000) >>  24u;
     b24:	e0bfff17 	ldw	r2,-4(fp)
     b28:	1004d63a 	srli	r2,r2,24
     b2c:	e0bffe15 	stw	r2,-8(fp)
    
    return (b0 | b1 | b2 | b3);
     b30:	e0fffb17 	ldw	r3,-20(fp)
     b34:	e0bffc17 	ldw	r2,-16(fp)
     b38:	1886b03a 	or	r3,r3,r2
     b3c:	e0bffd17 	ldw	r2,-12(fp)
     b40:	1886b03a 	or	r3,r3,r2
     b44:	e0bffe17 	ldw	r2,-8(fp)
     b48:	1884b03a 	or	r2,r3,r2
    
}
     b4c:	e037883a 	mov	sp,fp
     b50:	df000017 	ldw	fp,0(sp)
     b54:	dec00104 	addi	sp,sp,4
     b58:	f800283a 	ret

00000b5c <readImageFileHeader>:
/**
 * @details Read MNIST image file header
 * @see http://yann.lecun.com/exdb/mnist/ for definition details
 */

void readImageFileHeader(FILE *imageFile, MNIST_ImageFileHeader *ifh){
     b5c:	defffc04 	addi	sp,sp,-16
     b60:	dfc00315 	stw	ra,12(sp)
     b64:	df000215 	stw	fp,8(sp)
     b68:	df000204 	addi	fp,sp,8
     b6c:	e13ffe15 	stw	r4,-8(fp)
     b70:	e17fff15 	stw	r5,-4(fp)
    
    ifh->magicNumber =0;
     b74:	e0bfff17 	ldw	r2,-4(fp)
     b78:	10000015 	stw	zero,0(r2)
    ifh->maxImages   =0;
     b7c:	e0bfff17 	ldw	r2,-4(fp)
     b80:	10000115 	stw	zero,4(r2)
    ifh->imgWidth    =0;
     b84:	e0bfff17 	ldw	r2,-4(fp)
     b88:	10000215 	stw	zero,8(r2)
    ifh->imgHeight   =0;
     b8c:	e0bfff17 	ldw	r2,-4(fp)
     b90:	10000315 	stw	zero,12(r2)
    
    fread(&ifh->magicNumber, 4, 1, imageFile);
     b94:	e0bfff17 	ldw	r2,-4(fp)
     b98:	e1fffe17 	ldw	r7,-8(fp)
     b9c:	01800044 	movi	r6,1
     ba0:	01400104 	movi	r5,4
     ba4:	1009883a 	mov	r4,r2
     ba8:	00041bc0 	call	41bc <fread>
    ifh->magicNumber = flipBytes(ifh->magicNumber);
     bac:	e0bfff17 	ldw	r2,-4(fp)
     bb0:	10800017 	ldw	r2,0(r2)
     bb4:	1009883a 	mov	r4,r2
     bb8:	0000ae80 	call	ae8 <flipBytes>
     bbc:	1007883a 	mov	r3,r2
     bc0:	e0bfff17 	ldw	r2,-4(fp)
     bc4:	10c00015 	stw	r3,0(r2)
    
    fread(&ifh->maxImages, 4, 1, imageFile);
     bc8:	e0bfff17 	ldw	r2,-4(fp)
     bcc:	10800104 	addi	r2,r2,4
     bd0:	e1fffe17 	ldw	r7,-8(fp)
     bd4:	01800044 	movi	r6,1
     bd8:	01400104 	movi	r5,4
     bdc:	1009883a 	mov	r4,r2
     be0:	00041bc0 	call	41bc <fread>
    ifh->maxImages = flipBytes(ifh->maxImages);
     be4:	e0bfff17 	ldw	r2,-4(fp)
     be8:	10800117 	ldw	r2,4(r2)
     bec:	1009883a 	mov	r4,r2
     bf0:	0000ae80 	call	ae8 <flipBytes>
     bf4:	1007883a 	mov	r3,r2
     bf8:	e0bfff17 	ldw	r2,-4(fp)
     bfc:	10c00115 	stw	r3,4(r2)
    
    fread(&ifh->imgWidth, 4, 1, imageFile);
     c00:	e0bfff17 	ldw	r2,-4(fp)
     c04:	10800204 	addi	r2,r2,8
     c08:	e1fffe17 	ldw	r7,-8(fp)
     c0c:	01800044 	movi	r6,1
     c10:	01400104 	movi	r5,4
     c14:	1009883a 	mov	r4,r2
     c18:	00041bc0 	call	41bc <fread>
    ifh->imgWidth = flipBytes(ifh->imgWidth);
     c1c:	e0bfff17 	ldw	r2,-4(fp)
     c20:	10800217 	ldw	r2,8(r2)
     c24:	1009883a 	mov	r4,r2
     c28:	0000ae80 	call	ae8 <flipBytes>
     c2c:	1007883a 	mov	r3,r2
     c30:	e0bfff17 	ldw	r2,-4(fp)
     c34:	10c00215 	stw	r3,8(r2)
    
    fread(&ifh->imgHeight, 4, 1, imageFile);
     c38:	e0bfff17 	ldw	r2,-4(fp)
     c3c:	10800304 	addi	r2,r2,12
     c40:	e1fffe17 	ldw	r7,-8(fp)
     c44:	01800044 	movi	r6,1
     c48:	01400104 	movi	r5,4
     c4c:	1009883a 	mov	r4,r2
     c50:	00041bc0 	call	41bc <fread>
    ifh->imgHeight = flipBytes(ifh->imgHeight);
     c54:	e0bfff17 	ldw	r2,-4(fp)
     c58:	10800317 	ldw	r2,12(r2)
     c5c:	1009883a 	mov	r4,r2
     c60:	0000ae80 	call	ae8 <flipBytes>
     c64:	1007883a 	mov	r3,r2
     c68:	e0bfff17 	ldw	r2,-4(fp)
     c6c:	10c00315 	stw	r3,12(r2)
}
     c70:	0001883a 	nop
     c74:	e037883a 	mov	sp,fp
     c78:	dfc00117 	ldw	ra,4(sp)
     c7c:	df000017 	ldw	fp,0(sp)
     c80:	dec00204 	addi	sp,sp,8
     c84:	f800283a 	ret

00000c88 <readLabelFileHeader>:
/**
 * @details Read MNIST label file header
 * @see http://yann.lecun.com/exdb/mnist/ for definition details
 */

void readLabelFileHeader(FILE *imageFile, MNIST_LabelFileHeader *lfh){
     c88:	defffc04 	addi	sp,sp,-16
     c8c:	dfc00315 	stw	ra,12(sp)
     c90:	df000215 	stw	fp,8(sp)
     c94:	df000204 	addi	fp,sp,8
     c98:	e13ffe15 	stw	r4,-8(fp)
     c9c:	e17fff15 	stw	r5,-4(fp)
    
    lfh->magicNumber =0;
     ca0:	e0bfff17 	ldw	r2,-4(fp)
     ca4:	10000015 	stw	zero,0(r2)
    lfh->maxImages   =0;
     ca8:	e0bfff17 	ldw	r2,-4(fp)
     cac:	10000115 	stw	zero,4(r2)
    
    fread(&lfh->magicNumber, 4, 1, imageFile);
     cb0:	e0bfff17 	ldw	r2,-4(fp)
     cb4:	e1fffe17 	ldw	r7,-8(fp)
     cb8:	01800044 	movi	r6,1
     cbc:	01400104 	movi	r5,4
     cc0:	1009883a 	mov	r4,r2
     cc4:	00041bc0 	call	41bc <fread>
    lfh->magicNumber = flipBytes(lfh->magicNumber);
     cc8:	e0bfff17 	ldw	r2,-4(fp)
     ccc:	10800017 	ldw	r2,0(r2)
     cd0:	1009883a 	mov	r4,r2
     cd4:	0000ae80 	call	ae8 <flipBytes>
     cd8:	1007883a 	mov	r3,r2
     cdc:	e0bfff17 	ldw	r2,-4(fp)
     ce0:	10c00015 	stw	r3,0(r2)
    
    fread(&lfh->maxImages, 4, 1, imageFile);
     ce4:	e0bfff17 	ldw	r2,-4(fp)
     ce8:	10800104 	addi	r2,r2,4
     cec:	e1fffe17 	ldw	r7,-8(fp)
     cf0:	01800044 	movi	r6,1
     cf4:	01400104 	movi	r5,4
     cf8:	1009883a 	mov	r4,r2
     cfc:	00041bc0 	call	41bc <fread>
    lfh->maxImages = flipBytes(lfh->maxImages);
     d00:	e0bfff17 	ldw	r2,-4(fp)
     d04:	10800117 	ldw	r2,4(r2)
     d08:	1009883a 	mov	r4,r2
     d0c:	0000ae80 	call	ae8 <flipBytes>
     d10:	1007883a 	mov	r3,r2
     d14:	e0bfff17 	ldw	r2,-4(fp)
     d18:	10c00115 	stw	r3,4(r2)
    
}
     d1c:	0001883a 	nop
     d20:	e037883a 	mov	sp,fp
     d24:	dfc00117 	ldw	ra,4(sp)
     d28:	df000017 	ldw	fp,0(sp)
     d2c:	dec00204 	addi	sp,sp,8
     d30:	f800283a 	ret

00000d34 <openMNISTImageFile>:
 * @details Open MNIST image file and read header info
 * by reading the header info, the read pointer
 * is moved to the position of the 1st IMAGE
 */

FILE *openMNISTImageFile(char *fileName){
     d34:	defff804 	addi	sp,sp,-32
     d38:	dfc00715 	stw	ra,28(sp)
     d3c:	df000615 	stw	fp,24(sp)
     d40:	df000604 	addi	fp,sp,24
     d44:	e13fff15 	stw	r4,-4(fp)

    FILE *imageFile;
    imageFile = fopen (fileName, "rb");
     d48:	01400074 	movhi	r5,1
     d4c:	29444e04 	addi	r5,r5,4408
     d50:	e13fff17 	ldw	r4,-4(fp)
     d54:	0003f680 	call	3f68 <fopen>
     d58:	e0bffa15 	stw	r2,-24(fp)
    if (imageFile == NULL) {
     d5c:	e0bffa17 	ldw	r2,-24(fp)
     d60:	1000061e 	bne	r2,zero,d7c <openMNISTImageFile+0x48>
        printf("Abort! Could not fine MNIST IMAGE file: %s\n",fileName);
     d64:	e17fff17 	ldw	r5,-4(fp)
     d68:	01000074 	movhi	r4,1
     d6c:	21044f04 	addi	r4,r4,4412
     d70:	00059500 	call	5950 <printf>
        exit(0);
     d74:	0009883a 	mov	r4,zero
     d78:	00036e00 	call	36e0 <exit>
    }

    MNIST_ImageFileHeader imageFileHeader;
    readImageFileHeader(imageFile, &imageFileHeader);
     d7c:	e0bffb04 	addi	r2,fp,-20
     d80:	100b883a 	mov	r5,r2
     d84:	e13ffa17 	ldw	r4,-24(fp)
     d88:	0000b5c0 	call	b5c <readImageFileHeader>
    
    return imageFile;
     d8c:	e0bffa17 	ldw	r2,-24(fp)
}
     d90:	e037883a 	mov	sp,fp
     d94:	dfc00117 	ldw	ra,4(sp)
     d98:	df000017 	ldw	fp,0(sp)
     d9c:	dec00204 	addi	sp,sp,8
     da0:	f800283a 	ret

00000da4 <openMNISTLabelFile>:
 * @details Open MNIST label file and read header info
 * by reading the header info, the read pointer
 * is moved to the position of the 1st LABEL
 */

FILE *openMNISTLabelFile(char *fileName){
     da4:	defffa04 	addi	sp,sp,-24
     da8:	dfc00515 	stw	ra,20(sp)
     dac:	df000415 	stw	fp,16(sp)
     db0:	df000404 	addi	fp,sp,16
     db4:	e13fff15 	stw	r4,-4(fp)
    
    FILE *labelFile;
    labelFile = fopen (fileName, "rb");
     db8:	01400074 	movhi	r5,1
     dbc:	29444e04 	addi	r5,r5,4408
     dc0:	e13fff17 	ldw	r4,-4(fp)
     dc4:	0003f680 	call	3f68 <fopen>
     dc8:	e0bffc15 	stw	r2,-16(fp)
    if (labelFile == NULL) {
     dcc:	e0bffc17 	ldw	r2,-16(fp)
     dd0:	1000061e 	bne	r2,zero,dec <openMNISTLabelFile+0x48>
        printf("Abort! Could not find MNIST LABEL file: %s\n",fileName);
     dd4:	e17fff17 	ldw	r5,-4(fp)
     dd8:	01000074 	movhi	r4,1
     ddc:	21045a04 	addi	r4,r4,4456
     de0:	00059500 	call	5950 <printf>
        exit(0);
     de4:	0009883a 	mov	r4,zero
     de8:	00036e00 	call	36e0 <exit>
    }

    MNIST_LabelFileHeader labelFileHeader;
    readLabelFileHeader(labelFile, &labelFileHeader);
     dec:	e0bffd04 	addi	r2,fp,-12
     df0:	100b883a 	mov	r5,r2
     df4:	e13ffc17 	ldw	r4,-16(fp)
     df8:	0000c880 	call	c88 <readLabelFileHeader>
    
    return labelFile;
     dfc:	e0bffc17 	ldw	r2,-16(fp)
}
     e00:	e037883a 	mov	sp,fp
     e04:	dfc00117 	ldw	ra,4(sp)
     e08:	df000017 	ldw	fp,0(sp)
     e0c:	dec00204 	addi	sp,sp,8
     e10:	f800283a 	ret

00000e14 <getImage>:

/**
 * @details Returns the next image in the given MNIST image file
 */

MNIST_Image getImage(FILE *imageFile){
     e14:	deff3704 	addi	sp,sp,-804
     e18:	dfc0c815 	stw	ra,800(sp)
     e1c:	df00c715 	stw	fp,796(sp)
     e20:	df00c704 	addi	fp,sp,796
     e24:	e13ffe15 	stw	r4,-8(fp)
     e28:	e17fff15 	stw	r5,-4(fp)
    
    MNIST_Image img;
    size_t result;
    result = fread(&img, sizeof(img), 1, imageFile);
     e2c:	e0bf3a04 	addi	r2,fp,-792
     e30:	e1ffff17 	ldw	r7,-4(fp)
     e34:	01800044 	movi	r6,1
     e38:	0140c404 	movi	r5,784
     e3c:	1009883a 	mov	r4,r2
     e40:	00041bc0 	call	41bc <fread>
     e44:	e0bf3915 	stw	r2,-796(fp)
    if (result!=1) {
     e48:	e0bf3917 	ldw	r2,-796(fp)
     e4c:	10800060 	cmpeqi	r2,r2,1
     e50:	1000051e 	bne	r2,zero,e68 <getImage+0x54>
        printf("\nError when reading IMAGE file! Abort!\n");
     e54:	01000074 	movhi	r4,1
     e58:	21046504 	addi	r4,r4,4500
     e5c:	0005a4c0 	call	5a4c <puts>
        exit(1);
     e60:	01000044 	movi	r4,1
     e64:	00036e00 	call	36e0 <exit>
    }
    
    return img;
     e68:	e0bffe17 	ldw	r2,-8(fp)
     e6c:	1009883a 	mov	r4,r2
     e70:	e0bf3a04 	addi	r2,fp,-792
     e74:	00c0c404 	movi	r3,784
     e78:	180d883a 	mov	r6,r3
     e7c:	100b883a 	mov	r5,r2
     e80:	00056500 	call	5650 <memcpy>
}
     e84:	e0bffe17 	ldw	r2,-8(fp)
     e88:	e037883a 	mov	sp,fp
     e8c:	dfc00117 	ldw	ra,4(sp)
     e90:	df000017 	ldw	fp,0(sp)
     e94:	dec00204 	addi	sp,sp,8
     e98:	f800283a 	ret

00000e9c <getLabel>:

/**
 * @details Returns the next label in the given MNIST label file
 */

MNIST_Label getLabel(FILE *labelFile){
     e9c:	defffb04 	addi	sp,sp,-20
     ea0:	dfc00415 	stw	ra,16(sp)
     ea4:	df000315 	stw	fp,12(sp)
     ea8:	df000304 	addi	fp,sp,12
     eac:	e13fff15 	stw	r4,-4(fp)
    
    MNIST_Label lbl;
    size_t result;
    result = fread(&lbl, sizeof(lbl), 1, labelFile);
     eb0:	e0bffe04 	addi	r2,fp,-8
     eb4:	e1ffff17 	ldw	r7,-4(fp)
     eb8:	01800044 	movi	r6,1
     ebc:	01400044 	movi	r5,1
     ec0:	1009883a 	mov	r4,r2
     ec4:	00041bc0 	call	41bc <fread>
     ec8:	e0bffd15 	stw	r2,-12(fp)
    if (result!=1) {
     ecc:	e0bffd17 	ldw	r2,-12(fp)
     ed0:	10800060 	cmpeqi	r2,r2,1
     ed4:	1000051e 	bne	r2,zero,eec <getLabel+0x50>
        printf("\nError when reading LABEL file! Abort!\n");
     ed8:	01000074 	movhi	r4,1
     edc:	21046f04 	addi	r4,r4,4540
     ee0:	0005a4c0 	call	5a4c <puts>
        exit(1);
     ee4:	01000044 	movi	r4,1
     ee8:	00036e00 	call	36e0 <exit>
    }
    
    return lbl;
     eec:	e0bffe03 	ldbu	r2,-8(fp)
}
     ef0:	e037883a 	mov	sp,fp
     ef4:	dfc00117 	ldw	ra,4(sp)
     ef8:	df000017 	ldw	fp,0(sp)
     efc:	dec00204 	addi	sp,sp,8
     f00:	f800283a 	ret

00000f04 <__mulsi3>:
     f04:	0005883a 	mov	r2,zero
     f08:	20000726 	beq	r4,zero,f28 <__mulsi3+0x24>
     f0c:	20c0004c 	andi	r3,r4,1
     f10:	2008d07a 	srli	r4,r4,1
     f14:	18000126 	beq	r3,zero,f1c <__mulsi3+0x18>
     f18:	1145883a 	add	r2,r2,r5
     f1c:	294b883a 	add	r5,r5,r5
     f20:	203ffa1e 	bne	r4,zero,f0c <__alt_data_end+0xfffe0f0c>
     f24:	f800283a 	ret
     f28:	f800283a 	ret

00000f2c <__adddf3>:
     f2c:	02c00434 	movhi	r11,16
     f30:	5affffc4 	addi	r11,r11,-1
     f34:	2806d7fa 	srli	r3,r5,31
     f38:	2ad4703a 	and	r10,r5,r11
     f3c:	3ad2703a 	and	r9,r7,r11
     f40:	3804d53a 	srli	r2,r7,20
     f44:	3018d77a 	srli	r12,r6,29
     f48:	280ad53a 	srli	r5,r5,20
     f4c:	501490fa 	slli	r10,r10,3
     f50:	2010d77a 	srli	r8,r4,29
     f54:	481290fa 	slli	r9,r9,3
     f58:	380ed7fa 	srli	r7,r7,31
     f5c:	defffb04 	addi	sp,sp,-20
     f60:	dc800215 	stw	r18,8(sp)
     f64:	dc400115 	stw	r17,4(sp)
     f68:	dc000015 	stw	r16,0(sp)
     f6c:	dfc00415 	stw	ra,16(sp)
     f70:	dcc00315 	stw	r19,12(sp)
     f74:	1c803fcc 	andi	r18,r3,255
     f78:	2c01ffcc 	andi	r16,r5,2047
     f7c:	5210b03a 	or	r8,r10,r8
     f80:	202290fa 	slli	r17,r4,3
     f84:	1081ffcc 	andi	r2,r2,2047
     f88:	4b12b03a 	or	r9,r9,r12
     f8c:	300c90fa 	slli	r6,r6,3
     f90:	91c07526 	beq	r18,r7,1168 <__adddf3+0x23c>
     f94:	8087c83a 	sub	r3,r16,r2
     f98:	00c0ab0e 	bge	zero,r3,1248 <__adddf3+0x31c>
     f9c:	10002a1e 	bne	r2,zero,1048 <__adddf3+0x11c>
     fa0:	4984b03a 	or	r2,r9,r6
     fa4:	1000961e 	bne	r2,zero,1200 <__adddf3+0x2d4>
     fa8:	888001cc 	andi	r2,r17,7
     fac:	10000726 	beq	r2,zero,fcc <__adddf3+0xa0>
     fb0:	888003cc 	andi	r2,r17,15
     fb4:	00c00104 	movi	r3,4
     fb8:	10c00426 	beq	r2,r3,fcc <__adddf3+0xa0>
     fbc:	88c7883a 	add	r3,r17,r3
     fc0:	1c63803a 	cmpltu	r17,r3,r17
     fc4:	4451883a 	add	r8,r8,r17
     fc8:	1823883a 	mov	r17,r3
     fcc:	4080202c 	andhi	r2,r8,128
     fd0:	10005926 	beq	r2,zero,1138 <__adddf3+0x20c>
     fd4:	84000044 	addi	r16,r16,1
     fd8:	0081ffc4 	movi	r2,2047
     fdc:	8080ba26 	beq	r16,r2,12c8 <__adddf3+0x39c>
     fe0:	00bfe034 	movhi	r2,65408
     fe4:	10bfffc4 	addi	r2,r2,-1
     fe8:	4090703a 	and	r8,r8,r2
     fec:	4004977a 	slli	r2,r8,29
     ff0:	4010927a 	slli	r8,r8,9
     ff4:	8822d0fa 	srli	r17,r17,3
     ff8:	8401ffcc 	andi	r16,r16,2047
     ffc:	4010d33a 	srli	r8,r8,12
    1000:	9007883a 	mov	r3,r18
    1004:	1444b03a 	or	r2,r2,r17
    1008:	8401ffcc 	andi	r16,r16,2047
    100c:	8020953a 	slli	r16,r16,20
    1010:	18c03fcc 	andi	r3,r3,255
    1014:	01000434 	movhi	r4,16
    1018:	213fffc4 	addi	r4,r4,-1
    101c:	180697fa 	slli	r3,r3,31
    1020:	4110703a 	and	r8,r8,r4
    1024:	4410b03a 	or	r8,r8,r16
    1028:	40c6b03a 	or	r3,r8,r3
    102c:	dfc00417 	ldw	ra,16(sp)
    1030:	dcc00317 	ldw	r19,12(sp)
    1034:	dc800217 	ldw	r18,8(sp)
    1038:	dc400117 	ldw	r17,4(sp)
    103c:	dc000017 	ldw	r16,0(sp)
    1040:	dec00504 	addi	sp,sp,20
    1044:	f800283a 	ret
    1048:	0081ffc4 	movi	r2,2047
    104c:	80bfd626 	beq	r16,r2,fa8 <__alt_data_end+0xfffe0fa8>
    1050:	4a402034 	orhi	r9,r9,128
    1054:	00800e04 	movi	r2,56
    1058:	10c09f16 	blt	r2,r3,12d8 <__adddf3+0x3ac>
    105c:	008007c4 	movi	r2,31
    1060:	10c0c216 	blt	r2,r3,136c <__adddf3+0x440>
    1064:	00800804 	movi	r2,32
    1068:	10c5c83a 	sub	r2,r2,r3
    106c:	488a983a 	sll	r5,r9,r2
    1070:	30c8d83a 	srl	r4,r6,r3
    1074:	3084983a 	sll	r2,r6,r2
    1078:	48c6d83a 	srl	r3,r9,r3
    107c:	290cb03a 	or	r6,r5,r4
    1080:	1004c03a 	cmpne	r2,r2,zero
    1084:	308cb03a 	or	r6,r6,r2
    1088:	898dc83a 	sub	r6,r17,r6
    108c:	89a3803a 	cmpltu	r17,r17,r6
    1090:	40d1c83a 	sub	r8,r8,r3
    1094:	4451c83a 	sub	r8,r8,r17
    1098:	3023883a 	mov	r17,r6
    109c:	4080202c 	andhi	r2,r8,128
    10a0:	10002326 	beq	r2,zero,1130 <__adddf3+0x204>
    10a4:	04c02034 	movhi	r19,128
    10a8:	9cffffc4 	addi	r19,r19,-1
    10ac:	44e6703a 	and	r19,r8,r19
    10b0:	98007626 	beq	r19,zero,128c <__adddf3+0x360>
    10b4:	9809883a 	mov	r4,r19
    10b8:	00034c80 	call	34c8 <__clzsi2>
    10bc:	10fffe04 	addi	r3,r2,-8
    10c0:	010007c4 	movi	r4,31
    10c4:	20c07716 	blt	r4,r3,12a4 <__adddf3+0x378>
    10c8:	00800804 	movi	r2,32
    10cc:	10c5c83a 	sub	r2,r2,r3
    10d0:	8884d83a 	srl	r2,r17,r2
    10d4:	98d0983a 	sll	r8,r19,r3
    10d8:	88e2983a 	sll	r17,r17,r3
    10dc:	1204b03a 	or	r2,r2,r8
    10e0:	1c007416 	blt	r3,r16,12b4 <__adddf3+0x388>
    10e4:	1c21c83a 	sub	r16,r3,r16
    10e8:	82000044 	addi	r8,r16,1
    10ec:	00c007c4 	movi	r3,31
    10f0:	1a009116 	blt	r3,r8,1338 <__adddf3+0x40c>
    10f4:	00c00804 	movi	r3,32
    10f8:	1a07c83a 	sub	r3,r3,r8
    10fc:	8a08d83a 	srl	r4,r17,r8
    1100:	88e2983a 	sll	r17,r17,r3
    1104:	10c6983a 	sll	r3,r2,r3
    1108:	1210d83a 	srl	r8,r2,r8
    110c:	8804c03a 	cmpne	r2,r17,zero
    1110:	1906b03a 	or	r3,r3,r4
    1114:	18a2b03a 	or	r17,r3,r2
    1118:	0021883a 	mov	r16,zero
    111c:	003fa206 	br	fa8 <__alt_data_end+0xfffe0fa8>
    1120:	1890b03a 	or	r8,r3,r2
    1124:	40017d26 	beq	r8,zero,171c <__adddf3+0x7f0>
    1128:	1011883a 	mov	r8,r2
    112c:	1823883a 	mov	r17,r3
    1130:	888001cc 	andi	r2,r17,7
    1134:	103f9e1e 	bne	r2,zero,fb0 <__alt_data_end+0xfffe0fb0>
    1138:	4004977a 	slli	r2,r8,29
    113c:	8822d0fa 	srli	r17,r17,3
    1140:	4010d0fa 	srli	r8,r8,3
    1144:	9007883a 	mov	r3,r18
    1148:	1444b03a 	or	r2,r2,r17
    114c:	0101ffc4 	movi	r4,2047
    1150:	81002426 	beq	r16,r4,11e4 <__adddf3+0x2b8>
    1154:	8120703a 	and	r16,r16,r4
    1158:	01000434 	movhi	r4,16
    115c:	213fffc4 	addi	r4,r4,-1
    1160:	4110703a 	and	r8,r8,r4
    1164:	003fa806 	br	1008 <__alt_data_end+0xfffe1008>
    1168:	8089c83a 	sub	r4,r16,r2
    116c:	01005e0e 	bge	zero,r4,12e8 <__adddf3+0x3bc>
    1170:	10002b26 	beq	r2,zero,1220 <__adddf3+0x2f4>
    1174:	0081ffc4 	movi	r2,2047
    1178:	80bf8b26 	beq	r16,r2,fa8 <__alt_data_end+0xfffe0fa8>
    117c:	4a402034 	orhi	r9,r9,128
    1180:	00800e04 	movi	r2,56
    1184:	1100a40e 	bge	r2,r4,1418 <__adddf3+0x4ec>
    1188:	498cb03a 	or	r6,r9,r6
    118c:	300ac03a 	cmpne	r5,r6,zero
    1190:	0013883a 	mov	r9,zero
    1194:	2c4b883a 	add	r5,r5,r17
    1198:	2c63803a 	cmpltu	r17,r5,r17
    119c:	4a11883a 	add	r8,r9,r8
    11a0:	8a11883a 	add	r8,r17,r8
    11a4:	2823883a 	mov	r17,r5
    11a8:	4080202c 	andhi	r2,r8,128
    11ac:	103fe026 	beq	r2,zero,1130 <__alt_data_end+0xfffe1130>
    11b0:	84000044 	addi	r16,r16,1
    11b4:	0081ffc4 	movi	r2,2047
    11b8:	8080d226 	beq	r16,r2,1504 <__adddf3+0x5d8>
    11bc:	00bfe034 	movhi	r2,65408
    11c0:	10bfffc4 	addi	r2,r2,-1
    11c4:	4090703a 	and	r8,r8,r2
    11c8:	880ad07a 	srli	r5,r17,1
    11cc:	400897fa 	slli	r4,r8,31
    11d0:	88c0004c 	andi	r3,r17,1
    11d4:	28e2b03a 	or	r17,r5,r3
    11d8:	4010d07a 	srli	r8,r8,1
    11dc:	2462b03a 	or	r17,r4,r17
    11e0:	003f7106 	br	fa8 <__alt_data_end+0xfffe0fa8>
    11e4:	4088b03a 	or	r4,r8,r2
    11e8:	20014526 	beq	r4,zero,1700 <__adddf3+0x7d4>
    11ec:	01000434 	movhi	r4,16
    11f0:	42000234 	orhi	r8,r8,8
    11f4:	213fffc4 	addi	r4,r4,-1
    11f8:	4110703a 	and	r8,r8,r4
    11fc:	003f8206 	br	1008 <__alt_data_end+0xfffe1008>
    1200:	18ffffc4 	addi	r3,r3,-1
    1204:	1800491e 	bne	r3,zero,132c <__adddf3+0x400>
    1208:	898bc83a 	sub	r5,r17,r6
    120c:	8963803a 	cmpltu	r17,r17,r5
    1210:	4251c83a 	sub	r8,r8,r9
    1214:	4451c83a 	sub	r8,r8,r17
    1218:	2823883a 	mov	r17,r5
    121c:	003f9f06 	br	109c <__alt_data_end+0xfffe109c>
    1220:	4984b03a 	or	r2,r9,r6
    1224:	103f6026 	beq	r2,zero,fa8 <__alt_data_end+0xfffe0fa8>
    1228:	213fffc4 	addi	r4,r4,-1
    122c:	2000931e 	bne	r4,zero,147c <__adddf3+0x550>
    1230:	898d883a 	add	r6,r17,r6
    1234:	3463803a 	cmpltu	r17,r6,r17
    1238:	4251883a 	add	r8,r8,r9
    123c:	8a11883a 	add	r8,r17,r8
    1240:	3023883a 	mov	r17,r6
    1244:	003fd806 	br	11a8 <__alt_data_end+0xfffe11a8>
    1248:	1800541e 	bne	r3,zero,139c <__adddf3+0x470>
    124c:	80800044 	addi	r2,r16,1
    1250:	1081ffcc 	andi	r2,r2,2047
    1254:	00c00044 	movi	r3,1
    1258:	1880a00e 	bge	r3,r2,14dc <__adddf3+0x5b0>
    125c:	8989c83a 	sub	r4,r17,r6
    1260:	8905803a 	cmpltu	r2,r17,r4
    1264:	4267c83a 	sub	r19,r8,r9
    1268:	98a7c83a 	sub	r19,r19,r2
    126c:	9880202c 	andhi	r2,r19,128
    1270:	10006326 	beq	r2,zero,1400 <__adddf3+0x4d4>
    1274:	3463c83a 	sub	r17,r6,r17
    1278:	4a07c83a 	sub	r3,r9,r8
    127c:	344d803a 	cmpltu	r6,r6,r17
    1280:	19a7c83a 	sub	r19,r3,r6
    1284:	3825883a 	mov	r18,r7
    1288:	983f8a1e 	bne	r19,zero,10b4 <__alt_data_end+0xfffe10b4>
    128c:	8809883a 	mov	r4,r17
    1290:	00034c80 	call	34c8 <__clzsi2>
    1294:	10800804 	addi	r2,r2,32
    1298:	10fffe04 	addi	r3,r2,-8
    129c:	010007c4 	movi	r4,31
    12a0:	20ff890e 	bge	r4,r3,10c8 <__alt_data_end+0xfffe10c8>
    12a4:	10bff604 	addi	r2,r2,-40
    12a8:	8884983a 	sll	r2,r17,r2
    12ac:	0023883a 	mov	r17,zero
    12b0:	1c3f8c0e 	bge	r3,r16,10e4 <__alt_data_end+0xfffe10e4>
    12b4:	023fe034 	movhi	r8,65408
    12b8:	423fffc4 	addi	r8,r8,-1
    12bc:	80e1c83a 	sub	r16,r16,r3
    12c0:	1210703a 	and	r8,r2,r8
    12c4:	003f3806 	br	fa8 <__alt_data_end+0xfffe0fa8>
    12c8:	9007883a 	mov	r3,r18
    12cc:	0011883a 	mov	r8,zero
    12d0:	0005883a 	mov	r2,zero
    12d4:	003f4c06 	br	1008 <__alt_data_end+0xfffe1008>
    12d8:	498cb03a 	or	r6,r9,r6
    12dc:	300cc03a 	cmpne	r6,r6,zero
    12e0:	0007883a 	mov	r3,zero
    12e4:	003f6806 	br	1088 <__alt_data_end+0xfffe1088>
    12e8:	20009c1e 	bne	r4,zero,155c <__adddf3+0x630>
    12ec:	80800044 	addi	r2,r16,1
    12f0:	1141ffcc 	andi	r5,r2,2047
    12f4:	01000044 	movi	r4,1
    12f8:	2140670e 	bge	r4,r5,1498 <__adddf3+0x56c>
    12fc:	0101ffc4 	movi	r4,2047
    1300:	11007f26 	beq	r2,r4,1500 <__adddf3+0x5d4>
    1304:	898d883a 	add	r6,r17,r6
    1308:	4247883a 	add	r3,r8,r9
    130c:	3451803a 	cmpltu	r8,r6,r17
    1310:	40d1883a 	add	r8,r8,r3
    1314:	402297fa 	slli	r17,r8,31
    1318:	300cd07a 	srli	r6,r6,1
    131c:	4010d07a 	srli	r8,r8,1
    1320:	1021883a 	mov	r16,r2
    1324:	89a2b03a 	or	r17,r17,r6
    1328:	003f1f06 	br	fa8 <__alt_data_end+0xfffe0fa8>
    132c:	0081ffc4 	movi	r2,2047
    1330:	80bf481e 	bne	r16,r2,1054 <__alt_data_end+0xfffe1054>
    1334:	003f1c06 	br	fa8 <__alt_data_end+0xfffe0fa8>
    1338:	843ff844 	addi	r16,r16,-31
    133c:	01000804 	movi	r4,32
    1340:	1406d83a 	srl	r3,r2,r16
    1344:	41005026 	beq	r8,r4,1488 <__adddf3+0x55c>
    1348:	01001004 	movi	r4,64
    134c:	2211c83a 	sub	r8,r4,r8
    1350:	1204983a 	sll	r2,r2,r8
    1354:	88a2b03a 	or	r17,r17,r2
    1358:	8822c03a 	cmpne	r17,r17,zero
    135c:	1c62b03a 	or	r17,r3,r17
    1360:	0011883a 	mov	r8,zero
    1364:	0021883a 	mov	r16,zero
    1368:	003f7106 	br	1130 <__alt_data_end+0xfffe1130>
    136c:	193ff804 	addi	r4,r3,-32
    1370:	00800804 	movi	r2,32
    1374:	4908d83a 	srl	r4,r9,r4
    1378:	18804526 	beq	r3,r2,1490 <__adddf3+0x564>
    137c:	00801004 	movi	r2,64
    1380:	10c5c83a 	sub	r2,r2,r3
    1384:	4886983a 	sll	r3,r9,r2
    1388:	198cb03a 	or	r6,r3,r6
    138c:	300cc03a 	cmpne	r6,r6,zero
    1390:	218cb03a 	or	r6,r4,r6
    1394:	0007883a 	mov	r3,zero
    1398:	003f3b06 	br	1088 <__alt_data_end+0xfffe1088>
    139c:	80002a26 	beq	r16,zero,1448 <__adddf3+0x51c>
    13a0:	0101ffc4 	movi	r4,2047
    13a4:	11006826 	beq	r2,r4,1548 <__adddf3+0x61c>
    13a8:	00c7c83a 	sub	r3,zero,r3
    13ac:	42002034 	orhi	r8,r8,128
    13b0:	01000e04 	movi	r4,56
    13b4:	20c07c16 	blt	r4,r3,15a8 <__adddf3+0x67c>
    13b8:	010007c4 	movi	r4,31
    13bc:	20c0da16 	blt	r4,r3,1728 <__adddf3+0x7fc>
    13c0:	01000804 	movi	r4,32
    13c4:	20c9c83a 	sub	r4,r4,r3
    13c8:	4114983a 	sll	r10,r8,r4
    13cc:	88cad83a 	srl	r5,r17,r3
    13d0:	8908983a 	sll	r4,r17,r4
    13d4:	40c6d83a 	srl	r3,r8,r3
    13d8:	5162b03a 	or	r17,r10,r5
    13dc:	2008c03a 	cmpne	r4,r4,zero
    13e0:	8922b03a 	or	r17,r17,r4
    13e4:	3463c83a 	sub	r17,r6,r17
    13e8:	48c7c83a 	sub	r3,r9,r3
    13ec:	344d803a 	cmpltu	r6,r6,r17
    13f0:	1991c83a 	sub	r8,r3,r6
    13f4:	1021883a 	mov	r16,r2
    13f8:	3825883a 	mov	r18,r7
    13fc:	003f2706 	br	109c <__alt_data_end+0xfffe109c>
    1400:	24d0b03a 	or	r8,r4,r19
    1404:	40001b1e 	bne	r8,zero,1474 <__adddf3+0x548>
    1408:	0005883a 	mov	r2,zero
    140c:	0007883a 	mov	r3,zero
    1410:	0021883a 	mov	r16,zero
    1414:	003f4d06 	br	114c <__alt_data_end+0xfffe114c>
    1418:	008007c4 	movi	r2,31
    141c:	11003c16 	blt	r2,r4,1510 <__adddf3+0x5e4>
    1420:	00800804 	movi	r2,32
    1424:	1105c83a 	sub	r2,r2,r4
    1428:	488e983a 	sll	r7,r9,r2
    142c:	310ad83a 	srl	r5,r6,r4
    1430:	3084983a 	sll	r2,r6,r2
    1434:	4912d83a 	srl	r9,r9,r4
    1438:	394ab03a 	or	r5,r7,r5
    143c:	1004c03a 	cmpne	r2,r2,zero
    1440:	288ab03a 	or	r5,r5,r2
    1444:	003f5306 	br	1194 <__alt_data_end+0xfffe1194>
    1448:	4448b03a 	or	r4,r8,r17
    144c:	20003e26 	beq	r4,zero,1548 <__adddf3+0x61c>
    1450:	00c6303a 	nor	r3,zero,r3
    1454:	18003a1e 	bne	r3,zero,1540 <__adddf3+0x614>
    1458:	3463c83a 	sub	r17,r6,r17
    145c:	4a07c83a 	sub	r3,r9,r8
    1460:	344d803a 	cmpltu	r6,r6,r17
    1464:	1991c83a 	sub	r8,r3,r6
    1468:	1021883a 	mov	r16,r2
    146c:	3825883a 	mov	r18,r7
    1470:	003f0a06 	br	109c <__alt_data_end+0xfffe109c>
    1474:	2023883a 	mov	r17,r4
    1478:	003f0d06 	br	10b0 <__alt_data_end+0xfffe10b0>
    147c:	0081ffc4 	movi	r2,2047
    1480:	80bf3f1e 	bne	r16,r2,1180 <__alt_data_end+0xfffe1180>
    1484:	003ec806 	br	fa8 <__alt_data_end+0xfffe0fa8>
    1488:	0005883a 	mov	r2,zero
    148c:	003fb106 	br	1354 <__alt_data_end+0xfffe1354>
    1490:	0007883a 	mov	r3,zero
    1494:	003fbc06 	br	1388 <__alt_data_end+0xfffe1388>
    1498:	4444b03a 	or	r2,r8,r17
    149c:	8000871e 	bne	r16,zero,16bc <__adddf3+0x790>
    14a0:	1000ba26 	beq	r2,zero,178c <__adddf3+0x860>
    14a4:	4984b03a 	or	r2,r9,r6
    14a8:	103ebf26 	beq	r2,zero,fa8 <__alt_data_end+0xfffe0fa8>
    14ac:	8985883a 	add	r2,r17,r6
    14b0:	4247883a 	add	r3,r8,r9
    14b4:	1451803a 	cmpltu	r8,r2,r17
    14b8:	40d1883a 	add	r8,r8,r3
    14bc:	40c0202c 	andhi	r3,r8,128
    14c0:	1023883a 	mov	r17,r2
    14c4:	183f1a26 	beq	r3,zero,1130 <__alt_data_end+0xfffe1130>
    14c8:	00bfe034 	movhi	r2,65408
    14cc:	10bfffc4 	addi	r2,r2,-1
    14d0:	2021883a 	mov	r16,r4
    14d4:	4090703a 	and	r8,r8,r2
    14d8:	003eb306 	br	fa8 <__alt_data_end+0xfffe0fa8>
    14dc:	4444b03a 	or	r2,r8,r17
    14e0:	8000291e 	bne	r16,zero,1588 <__adddf3+0x65c>
    14e4:	10004b1e 	bne	r2,zero,1614 <__adddf3+0x6e8>
    14e8:	4990b03a 	or	r8,r9,r6
    14ec:	40008b26 	beq	r8,zero,171c <__adddf3+0x7f0>
    14f0:	4811883a 	mov	r8,r9
    14f4:	3023883a 	mov	r17,r6
    14f8:	3825883a 	mov	r18,r7
    14fc:	003eaa06 	br	fa8 <__alt_data_end+0xfffe0fa8>
    1500:	1021883a 	mov	r16,r2
    1504:	0011883a 	mov	r8,zero
    1508:	0005883a 	mov	r2,zero
    150c:	003f0f06 	br	114c <__alt_data_end+0xfffe114c>
    1510:	217ff804 	addi	r5,r4,-32
    1514:	00800804 	movi	r2,32
    1518:	494ad83a 	srl	r5,r9,r5
    151c:	20807d26 	beq	r4,r2,1714 <__adddf3+0x7e8>
    1520:	00801004 	movi	r2,64
    1524:	1109c83a 	sub	r4,r2,r4
    1528:	4912983a 	sll	r9,r9,r4
    152c:	498cb03a 	or	r6,r9,r6
    1530:	300cc03a 	cmpne	r6,r6,zero
    1534:	298ab03a 	or	r5,r5,r6
    1538:	0013883a 	mov	r9,zero
    153c:	003f1506 	br	1194 <__alt_data_end+0xfffe1194>
    1540:	0101ffc4 	movi	r4,2047
    1544:	113f9a1e 	bne	r2,r4,13b0 <__alt_data_end+0xfffe13b0>
    1548:	4811883a 	mov	r8,r9
    154c:	3023883a 	mov	r17,r6
    1550:	1021883a 	mov	r16,r2
    1554:	3825883a 	mov	r18,r7
    1558:	003e9306 	br	fa8 <__alt_data_end+0xfffe0fa8>
    155c:	8000161e 	bne	r16,zero,15b8 <__adddf3+0x68c>
    1560:	444ab03a 	or	r5,r8,r17
    1564:	28005126 	beq	r5,zero,16ac <__adddf3+0x780>
    1568:	0108303a 	nor	r4,zero,r4
    156c:	20004d1e 	bne	r4,zero,16a4 <__adddf3+0x778>
    1570:	89a3883a 	add	r17,r17,r6
    1574:	4253883a 	add	r9,r8,r9
    1578:	898d803a 	cmpltu	r6,r17,r6
    157c:	3251883a 	add	r8,r6,r9
    1580:	1021883a 	mov	r16,r2
    1584:	003f0806 	br	11a8 <__alt_data_end+0xfffe11a8>
    1588:	1000301e 	bne	r2,zero,164c <__adddf3+0x720>
    158c:	4984b03a 	or	r2,r9,r6
    1590:	10007126 	beq	r2,zero,1758 <__adddf3+0x82c>
    1594:	4811883a 	mov	r8,r9
    1598:	3023883a 	mov	r17,r6
    159c:	3825883a 	mov	r18,r7
    15a0:	0401ffc4 	movi	r16,2047
    15a4:	003e8006 	br	fa8 <__alt_data_end+0xfffe0fa8>
    15a8:	4462b03a 	or	r17,r8,r17
    15ac:	8822c03a 	cmpne	r17,r17,zero
    15b0:	0007883a 	mov	r3,zero
    15b4:	003f8b06 	br	13e4 <__alt_data_end+0xfffe13e4>
    15b8:	0141ffc4 	movi	r5,2047
    15bc:	11403b26 	beq	r2,r5,16ac <__adddf3+0x780>
    15c0:	0109c83a 	sub	r4,zero,r4
    15c4:	42002034 	orhi	r8,r8,128
    15c8:	01400e04 	movi	r5,56
    15cc:	29006716 	blt	r5,r4,176c <__adddf3+0x840>
    15d0:	014007c4 	movi	r5,31
    15d4:	29007016 	blt	r5,r4,1798 <__adddf3+0x86c>
    15d8:	01400804 	movi	r5,32
    15dc:	290bc83a 	sub	r5,r5,r4
    15e0:	4154983a 	sll	r10,r8,r5
    15e4:	890ed83a 	srl	r7,r17,r4
    15e8:	894a983a 	sll	r5,r17,r5
    15ec:	4108d83a 	srl	r4,r8,r4
    15f0:	51e2b03a 	or	r17,r10,r7
    15f4:	280ac03a 	cmpne	r5,r5,zero
    15f8:	8962b03a 	or	r17,r17,r5
    15fc:	89a3883a 	add	r17,r17,r6
    1600:	2253883a 	add	r9,r4,r9
    1604:	898d803a 	cmpltu	r6,r17,r6
    1608:	3251883a 	add	r8,r6,r9
    160c:	1021883a 	mov	r16,r2
    1610:	003ee506 	br	11a8 <__alt_data_end+0xfffe11a8>
    1614:	4984b03a 	or	r2,r9,r6
    1618:	103e6326 	beq	r2,zero,fa8 <__alt_data_end+0xfffe0fa8>
    161c:	8987c83a 	sub	r3,r17,r6
    1620:	88c9803a 	cmpltu	r4,r17,r3
    1624:	4245c83a 	sub	r2,r8,r9
    1628:	1105c83a 	sub	r2,r2,r4
    162c:	1100202c 	andhi	r4,r2,128
    1630:	203ebb26 	beq	r4,zero,1120 <__alt_data_end+0xfffe1120>
    1634:	3463c83a 	sub	r17,r6,r17
    1638:	4a07c83a 	sub	r3,r9,r8
    163c:	344d803a 	cmpltu	r6,r6,r17
    1640:	1991c83a 	sub	r8,r3,r6
    1644:	3825883a 	mov	r18,r7
    1648:	003e5706 	br	fa8 <__alt_data_end+0xfffe0fa8>
    164c:	4984b03a 	or	r2,r9,r6
    1650:	10002e26 	beq	r2,zero,170c <__adddf3+0x7e0>
    1654:	4004d0fa 	srli	r2,r8,3
    1658:	8822d0fa 	srli	r17,r17,3
    165c:	4010977a 	slli	r8,r8,29
    1660:	10c0022c 	andhi	r3,r2,8
    1664:	4462b03a 	or	r17,r8,r17
    1668:	18000826 	beq	r3,zero,168c <__adddf3+0x760>
    166c:	4808d0fa 	srli	r4,r9,3
    1670:	20c0022c 	andhi	r3,r4,8
    1674:	1800051e 	bne	r3,zero,168c <__adddf3+0x760>
    1678:	300cd0fa 	srli	r6,r6,3
    167c:	4806977a 	slli	r3,r9,29
    1680:	2005883a 	mov	r2,r4
    1684:	3825883a 	mov	r18,r7
    1688:	19a2b03a 	or	r17,r3,r6
    168c:	8810d77a 	srli	r8,r17,29
    1690:	100490fa 	slli	r2,r2,3
    1694:	882290fa 	slli	r17,r17,3
    1698:	0401ffc4 	movi	r16,2047
    169c:	4090b03a 	or	r8,r8,r2
    16a0:	003e4106 	br	fa8 <__alt_data_end+0xfffe0fa8>
    16a4:	0141ffc4 	movi	r5,2047
    16a8:	117fc71e 	bne	r2,r5,15c8 <__alt_data_end+0xfffe15c8>
    16ac:	4811883a 	mov	r8,r9
    16b0:	3023883a 	mov	r17,r6
    16b4:	1021883a 	mov	r16,r2
    16b8:	003e3b06 	br	fa8 <__alt_data_end+0xfffe0fa8>
    16bc:	10002f26 	beq	r2,zero,177c <__adddf3+0x850>
    16c0:	4984b03a 	or	r2,r9,r6
    16c4:	10001126 	beq	r2,zero,170c <__adddf3+0x7e0>
    16c8:	4004d0fa 	srli	r2,r8,3
    16cc:	8822d0fa 	srli	r17,r17,3
    16d0:	4010977a 	slli	r8,r8,29
    16d4:	10c0022c 	andhi	r3,r2,8
    16d8:	4462b03a 	or	r17,r8,r17
    16dc:	183feb26 	beq	r3,zero,168c <__alt_data_end+0xfffe168c>
    16e0:	4808d0fa 	srli	r4,r9,3
    16e4:	20c0022c 	andhi	r3,r4,8
    16e8:	183fe81e 	bne	r3,zero,168c <__alt_data_end+0xfffe168c>
    16ec:	300cd0fa 	srli	r6,r6,3
    16f0:	4806977a 	slli	r3,r9,29
    16f4:	2005883a 	mov	r2,r4
    16f8:	19a2b03a 	or	r17,r3,r6
    16fc:	003fe306 	br	168c <__alt_data_end+0xfffe168c>
    1700:	0011883a 	mov	r8,zero
    1704:	0005883a 	mov	r2,zero
    1708:	003e3f06 	br	1008 <__alt_data_end+0xfffe1008>
    170c:	0401ffc4 	movi	r16,2047
    1710:	003e2506 	br	fa8 <__alt_data_end+0xfffe0fa8>
    1714:	0013883a 	mov	r9,zero
    1718:	003f8406 	br	152c <__alt_data_end+0xfffe152c>
    171c:	0005883a 	mov	r2,zero
    1720:	0007883a 	mov	r3,zero
    1724:	003e8906 	br	114c <__alt_data_end+0xfffe114c>
    1728:	197ff804 	addi	r5,r3,-32
    172c:	01000804 	movi	r4,32
    1730:	414ad83a 	srl	r5,r8,r5
    1734:	19002426 	beq	r3,r4,17c8 <__adddf3+0x89c>
    1738:	01001004 	movi	r4,64
    173c:	20c7c83a 	sub	r3,r4,r3
    1740:	40c6983a 	sll	r3,r8,r3
    1744:	1c46b03a 	or	r3,r3,r17
    1748:	1806c03a 	cmpne	r3,r3,zero
    174c:	28e2b03a 	or	r17,r5,r3
    1750:	0007883a 	mov	r3,zero
    1754:	003f2306 	br	13e4 <__alt_data_end+0xfffe13e4>
    1758:	0007883a 	mov	r3,zero
    175c:	5811883a 	mov	r8,r11
    1760:	00bfffc4 	movi	r2,-1
    1764:	0401ffc4 	movi	r16,2047
    1768:	003e7806 	br	114c <__alt_data_end+0xfffe114c>
    176c:	4462b03a 	or	r17,r8,r17
    1770:	8822c03a 	cmpne	r17,r17,zero
    1774:	0009883a 	mov	r4,zero
    1778:	003fa006 	br	15fc <__alt_data_end+0xfffe15fc>
    177c:	4811883a 	mov	r8,r9
    1780:	3023883a 	mov	r17,r6
    1784:	0401ffc4 	movi	r16,2047
    1788:	003e0706 	br	fa8 <__alt_data_end+0xfffe0fa8>
    178c:	4811883a 	mov	r8,r9
    1790:	3023883a 	mov	r17,r6
    1794:	003e0406 	br	fa8 <__alt_data_end+0xfffe0fa8>
    1798:	21fff804 	addi	r7,r4,-32
    179c:	01400804 	movi	r5,32
    17a0:	41ced83a 	srl	r7,r8,r7
    17a4:	21400a26 	beq	r4,r5,17d0 <__adddf3+0x8a4>
    17a8:	01401004 	movi	r5,64
    17ac:	2909c83a 	sub	r4,r5,r4
    17b0:	4108983a 	sll	r4,r8,r4
    17b4:	2448b03a 	or	r4,r4,r17
    17b8:	2008c03a 	cmpne	r4,r4,zero
    17bc:	3922b03a 	or	r17,r7,r4
    17c0:	0009883a 	mov	r4,zero
    17c4:	003f8d06 	br	15fc <__alt_data_end+0xfffe15fc>
    17c8:	0007883a 	mov	r3,zero
    17cc:	003fdd06 	br	1744 <__alt_data_end+0xfffe1744>
    17d0:	0009883a 	mov	r4,zero
    17d4:	003ff706 	br	17b4 <__alt_data_end+0xfffe17b4>

000017d8 <__divdf3>:
    17d8:	defff004 	addi	sp,sp,-64
    17dc:	dc800815 	stw	r18,32(sp)
    17e0:	2824d53a 	srli	r18,r5,20
    17e4:	dd800c15 	stw	r22,48(sp)
    17e8:	282cd7fa 	srli	r22,r5,31
    17ec:	dc000615 	stw	r16,24(sp)
    17f0:	04000434 	movhi	r16,16
    17f4:	843fffc4 	addi	r16,r16,-1
    17f8:	dfc00f15 	stw	ra,60(sp)
    17fc:	df000e15 	stw	fp,56(sp)
    1800:	ddc00d15 	stw	r23,52(sp)
    1804:	dd400b15 	stw	r21,44(sp)
    1808:	dd000a15 	stw	r20,40(sp)
    180c:	dcc00915 	stw	r19,36(sp)
    1810:	dc400715 	stw	r17,28(sp)
    1814:	9481ffcc 	andi	r18,r18,2047
    1818:	2c20703a 	and	r16,r5,r16
    181c:	b2003fcc 	andi	r8,r22,255
    1820:	90006126 	beq	r18,zero,19a8 <__divdf3+0x1d0>
    1824:	0081ffc4 	movi	r2,2047
    1828:	202b883a 	mov	r21,r4
    182c:	90803726 	beq	r18,r2,190c <__divdf3+0x134>
    1830:	80800434 	orhi	r2,r16,16
    1834:	100490fa 	slli	r2,r2,3
    1838:	2020d77a 	srli	r16,r4,29
    183c:	202a90fa 	slli	r21,r4,3
    1840:	94bf0044 	addi	r18,r18,-1023
    1844:	80a0b03a 	or	r16,r16,r2
    1848:	0013883a 	mov	r9,zero
    184c:	000b883a 	mov	r5,zero
    1850:	3806d53a 	srli	r3,r7,20
    1854:	382ed7fa 	srli	r23,r7,31
    1858:	04400434 	movhi	r17,16
    185c:	8c7fffc4 	addi	r17,r17,-1
    1860:	18c1ffcc 	andi	r3,r3,2047
    1864:	3029883a 	mov	r20,r6
    1868:	3c62703a 	and	r17,r7,r17
    186c:	bf003fcc 	andi	fp,r23,255
    1870:	18006e26 	beq	r3,zero,1a2c <__divdf3+0x254>
    1874:	0081ffc4 	movi	r2,2047
    1878:	18806626 	beq	r3,r2,1a14 <__divdf3+0x23c>
    187c:	88800434 	orhi	r2,r17,16
    1880:	100490fa 	slli	r2,r2,3
    1884:	3022d77a 	srli	r17,r6,29
    1888:	302890fa 	slli	r20,r6,3
    188c:	18ff0044 	addi	r3,r3,-1023
    1890:	88a2b03a 	or	r17,r17,r2
    1894:	000f883a 	mov	r7,zero
    1898:	b5e6f03a 	xor	r19,r22,r23
    189c:	3a4cb03a 	or	r6,r7,r9
    18a0:	008003c4 	movi	r2,15
    18a4:	9809883a 	mov	r4,r19
    18a8:	90c7c83a 	sub	r3,r18,r3
    18ac:	9cc03fcc 	andi	r19,r19,255
    18b0:	11809636 	bltu	r2,r6,1b0c <__divdf3+0x334>
    18b4:	300c90ba 	slli	r6,r6,2
    18b8:	00800034 	movhi	r2,0
    18bc:	10863304 	addi	r2,r2,6348
    18c0:	308d883a 	add	r6,r6,r2
    18c4:	30800017 	ldw	r2,0(r6)
    18c8:	1000683a 	jmp	r2
    18cc:	00001b0c 	andi	zero,zero,108
    18d0:	00001944 	movi	zero,101
    18d4:	00001afc 	xorhi	zero,zero,107
    18d8:	00001938 	rdprs	zero,zero,100
    18dc:	00001afc 	xorhi	zero,zero,107
    18e0:	00001ad0 	cmplti	zero,zero,107
    18e4:	00001afc 	xorhi	zero,zero,107
    18e8:	00001938 	rdprs	zero,zero,100
    18ec:	00001944 	movi	zero,101
    18f0:	00001944 	movi	zero,101
    18f4:	00001ad0 	cmplti	zero,zero,107
    18f8:	00001938 	rdprs	zero,zero,100
    18fc:	00001928 	cmpgeui	zero,zero,100
    1900:	00001928 	cmpgeui	zero,zero,100
    1904:	00001928 	cmpgeui	zero,zero,100
    1908:	00001e94 	movui	zero,122
    190c:	2404b03a 	or	r2,r4,r16
    1910:	10006c1e 	bne	r2,zero,1ac4 <__divdf3+0x2ec>
    1914:	02400204 	movi	r9,8
    1918:	0021883a 	mov	r16,zero
    191c:	002b883a 	mov	r21,zero
    1920:	01400084 	movi	r5,2
    1924:	003fca06 	br	1850 <__alt_data_end+0xfffe1850>
    1928:	8023883a 	mov	r17,r16
    192c:	a829883a 	mov	r20,r21
    1930:	4039883a 	mov	fp,r8
    1934:	280f883a 	mov	r7,r5
    1938:	00800084 	movi	r2,2
    193c:	3881601e 	bne	r7,r2,1ec0 <__divdf3+0x6e8>
    1940:	e027883a 	mov	r19,fp
    1944:	9900004c 	andi	r4,r19,1
    1948:	0081ffc4 	movi	r2,2047
    194c:	0021883a 	mov	r16,zero
    1950:	002b883a 	mov	r21,zero
    1954:	1004953a 	slli	r2,r2,20
    1958:	20c03fcc 	andi	r3,r4,255
    195c:	01400434 	movhi	r5,16
    1960:	297fffc4 	addi	r5,r5,-1
    1964:	180697fa 	slli	r3,r3,31
    1968:	8160703a 	and	r16,r16,r5
    196c:	80a0b03a 	or	r16,r16,r2
    1970:	80c6b03a 	or	r3,r16,r3
    1974:	a805883a 	mov	r2,r21
    1978:	dfc00f17 	ldw	ra,60(sp)
    197c:	df000e17 	ldw	fp,56(sp)
    1980:	ddc00d17 	ldw	r23,52(sp)
    1984:	dd800c17 	ldw	r22,48(sp)
    1988:	dd400b17 	ldw	r21,44(sp)
    198c:	dd000a17 	ldw	r20,40(sp)
    1990:	dcc00917 	ldw	r19,36(sp)
    1994:	dc800817 	ldw	r18,32(sp)
    1998:	dc400717 	ldw	r17,28(sp)
    199c:	dc000617 	ldw	r16,24(sp)
    19a0:	dec01004 	addi	sp,sp,64
    19a4:	f800283a 	ret
    19a8:	2404b03a 	or	r2,r4,r16
    19ac:	2023883a 	mov	r17,r4
    19b0:	10003f26 	beq	r2,zero,1ab0 <__divdf3+0x2d8>
    19b4:	80015e26 	beq	r16,zero,1f30 <__divdf3+0x758>
    19b8:	8009883a 	mov	r4,r16
    19bc:	d9800215 	stw	r6,8(sp)
    19c0:	d9c00515 	stw	r7,20(sp)
    19c4:	da000415 	stw	r8,16(sp)
    19c8:	00034c80 	call	34c8 <__clzsi2>
    19cc:	d9800217 	ldw	r6,8(sp)
    19d0:	d9c00517 	ldw	r7,20(sp)
    19d4:	da000417 	ldw	r8,16(sp)
    19d8:	113ffd44 	addi	r4,r2,-11
    19dc:	00c00704 	movi	r3,28
    19e0:	19014f16 	blt	r3,r4,1f20 <__divdf3+0x748>
    19e4:	00c00744 	movi	r3,29
    19e8:	157ffe04 	addi	r21,r2,-8
    19ec:	1907c83a 	sub	r3,r3,r4
    19f0:	8560983a 	sll	r16,r16,r21
    19f4:	88c6d83a 	srl	r3,r17,r3
    19f8:	8d6a983a 	sll	r21,r17,r21
    19fc:	1c20b03a 	or	r16,r3,r16
    1a00:	1080fcc4 	addi	r2,r2,1011
    1a04:	00a5c83a 	sub	r18,zero,r2
    1a08:	0013883a 	mov	r9,zero
    1a0c:	000b883a 	mov	r5,zero
    1a10:	003f8f06 	br	1850 <__alt_data_end+0xfffe1850>
    1a14:	3444b03a 	or	r2,r6,r17
    1a18:	1000231e 	bne	r2,zero,1aa8 <__divdf3+0x2d0>
    1a1c:	0023883a 	mov	r17,zero
    1a20:	0029883a 	mov	r20,zero
    1a24:	01c00084 	movi	r7,2
    1a28:	003f9b06 	br	1898 <__alt_data_end+0xfffe1898>
    1a2c:	3444b03a 	or	r2,r6,r17
    1a30:	10001926 	beq	r2,zero,1a98 <__divdf3+0x2c0>
    1a34:	88014b26 	beq	r17,zero,1f64 <__divdf3+0x78c>
    1a38:	8809883a 	mov	r4,r17
    1a3c:	d9400115 	stw	r5,4(sp)
    1a40:	d9800215 	stw	r6,8(sp)
    1a44:	da000415 	stw	r8,16(sp)
    1a48:	da400315 	stw	r9,12(sp)
    1a4c:	00034c80 	call	34c8 <__clzsi2>
    1a50:	d9400117 	ldw	r5,4(sp)
    1a54:	d9800217 	ldw	r6,8(sp)
    1a58:	da000417 	ldw	r8,16(sp)
    1a5c:	da400317 	ldw	r9,12(sp)
    1a60:	113ffd44 	addi	r4,r2,-11
    1a64:	00c00704 	movi	r3,28
    1a68:	19013a16 	blt	r3,r4,1f54 <__divdf3+0x77c>
    1a6c:	00c00744 	movi	r3,29
    1a70:	153ffe04 	addi	r20,r2,-8
    1a74:	1907c83a 	sub	r3,r3,r4
    1a78:	8d22983a 	sll	r17,r17,r20
    1a7c:	30c6d83a 	srl	r3,r6,r3
    1a80:	3528983a 	sll	r20,r6,r20
    1a84:	1c62b03a 	or	r17,r3,r17
    1a88:	1080fcc4 	addi	r2,r2,1011
    1a8c:	0087c83a 	sub	r3,zero,r2
    1a90:	000f883a 	mov	r7,zero
    1a94:	003f8006 	br	1898 <__alt_data_end+0xfffe1898>
    1a98:	0023883a 	mov	r17,zero
    1a9c:	0029883a 	mov	r20,zero
    1aa0:	01c00044 	movi	r7,1
    1aa4:	003f7c06 	br	1898 <__alt_data_end+0xfffe1898>
    1aa8:	01c000c4 	movi	r7,3
    1aac:	003f7a06 	br	1898 <__alt_data_end+0xfffe1898>
    1ab0:	02400104 	movi	r9,4
    1ab4:	0021883a 	mov	r16,zero
    1ab8:	002b883a 	mov	r21,zero
    1abc:	01400044 	movi	r5,1
    1ac0:	003f6306 	br	1850 <__alt_data_end+0xfffe1850>
    1ac4:	02400304 	movi	r9,12
    1ac8:	014000c4 	movi	r5,3
    1acc:	003f6006 	br	1850 <__alt_data_end+0xfffe1850>
    1ad0:	04000434 	movhi	r16,16
    1ad4:	0009883a 	mov	r4,zero
    1ad8:	843fffc4 	addi	r16,r16,-1
    1adc:	057fffc4 	movi	r21,-1
    1ae0:	0081ffc4 	movi	r2,2047
    1ae4:	003f9b06 	br	1954 <__alt_data_end+0xfffe1954>
    1ae8:	00c00044 	movi	r3,1
    1aec:	1887c83a 	sub	r3,r3,r2
    1af0:	01000e04 	movi	r4,56
    1af4:	20c1530e 	bge	r4,r3,2044 <__divdf3+0x86c>
    1af8:	9900004c 	andi	r4,r19,1
    1afc:	0005883a 	mov	r2,zero
    1b00:	0021883a 	mov	r16,zero
    1b04:	002b883a 	mov	r21,zero
    1b08:	003f9206 	br	1954 <__alt_data_end+0xfffe1954>
    1b0c:	8c012e36 	bltu	r17,r16,1fc8 <__divdf3+0x7f0>
    1b10:	84412c26 	beq	r16,r17,1fc4 <__divdf3+0x7ec>
    1b14:	a82f883a 	mov	r23,r21
    1b18:	18ffffc4 	addi	r3,r3,-1
    1b1c:	002b883a 	mov	r21,zero
    1b20:	a004d63a 	srli	r2,r20,24
    1b24:	8822923a 	slli	r17,r17,8
    1b28:	a028923a 	slli	r20,r20,8
    1b2c:	8009883a 	mov	r4,r16
    1b30:	88acb03a 	or	r22,r17,r2
    1b34:	dd000015 	stw	r20,0(sp)
    1b38:	b028d43a 	srli	r20,r22,16
    1b3c:	d8c00215 	stw	r3,8(sp)
    1b40:	b4bfffcc 	andi	r18,r22,65535
    1b44:	a00b883a 	mov	r5,r20
    1b48:	00036240 	call	3624 <__udivsi3>
    1b4c:	100b883a 	mov	r5,r2
    1b50:	9009883a 	mov	r4,r18
    1b54:	1023883a 	mov	r17,r2
    1b58:	0000f040 	call	f04 <__mulsi3>
    1b5c:	8009883a 	mov	r4,r16
    1b60:	a00b883a 	mov	r5,r20
    1b64:	1039883a 	mov	fp,r2
    1b68:	00036880 	call	3688 <__umodsi3>
    1b6c:	1004943a 	slli	r2,r2,16
    1b70:	b808d43a 	srli	r4,r23,16
    1b74:	d8c00217 	ldw	r3,8(sp)
    1b78:	2084b03a 	or	r2,r4,r2
    1b7c:	1700062e 	bgeu	r2,fp,1b98 <__divdf3+0x3c0>
    1b80:	1585883a 	add	r2,r2,r22
    1b84:	893fffc4 	addi	r4,r17,-1
    1b88:	15811d36 	bltu	r2,r22,2000 <__divdf3+0x828>
    1b8c:	17011c2e 	bgeu	r2,fp,2000 <__divdf3+0x828>
    1b90:	8c7fff84 	addi	r17,r17,-2
    1b94:	1585883a 	add	r2,r2,r22
    1b98:	1739c83a 	sub	fp,r2,fp
    1b9c:	a00b883a 	mov	r5,r20
    1ba0:	e009883a 	mov	r4,fp
    1ba4:	d8c00215 	stw	r3,8(sp)
    1ba8:	00036240 	call	3624 <__udivsi3>
    1bac:	100b883a 	mov	r5,r2
    1bb0:	9009883a 	mov	r4,r18
    1bb4:	1021883a 	mov	r16,r2
    1bb8:	0000f040 	call	f04 <__mulsi3>
    1bbc:	a00b883a 	mov	r5,r20
    1bc0:	e009883a 	mov	r4,fp
    1bc4:	d8800415 	stw	r2,16(sp)
    1bc8:	00036880 	call	3688 <__umodsi3>
    1bcc:	1004943a 	slli	r2,r2,16
    1bd0:	da000417 	ldw	r8,16(sp)
    1bd4:	bdffffcc 	andi	r23,r23,65535
    1bd8:	b884b03a 	or	r2,r23,r2
    1bdc:	d8c00217 	ldw	r3,8(sp)
    1be0:	1200062e 	bgeu	r2,r8,1bfc <__divdf3+0x424>
    1be4:	1585883a 	add	r2,r2,r22
    1be8:	813fffc4 	addi	r4,r16,-1
    1bec:	15810236 	bltu	r2,r22,1ff8 <__divdf3+0x820>
    1bf0:	1201012e 	bgeu	r2,r8,1ff8 <__divdf3+0x820>
    1bf4:	843fff84 	addi	r16,r16,-2
    1bf8:	1585883a 	add	r2,r2,r22
    1bfc:	8822943a 	slli	r17,r17,16
    1c00:	d9800017 	ldw	r6,0(sp)
    1c04:	1211c83a 	sub	r8,r2,r8
    1c08:	8c22b03a 	or	r17,r17,r16
    1c0c:	373fffcc 	andi	fp,r6,65535
    1c10:	8abfffcc 	andi	r10,r17,65535
    1c14:	8820d43a 	srli	r16,r17,16
    1c18:	5009883a 	mov	r4,r10
    1c1c:	e00b883a 	mov	r5,fp
    1c20:	302ed43a 	srli	r23,r6,16
    1c24:	d8c00215 	stw	r3,8(sp)
    1c28:	da000415 	stw	r8,16(sp)
    1c2c:	da800115 	stw	r10,4(sp)
    1c30:	0000f040 	call	f04 <__mulsi3>
    1c34:	800b883a 	mov	r5,r16
    1c38:	e009883a 	mov	r4,fp
    1c3c:	d8800515 	stw	r2,20(sp)
    1c40:	0000f040 	call	f04 <__mulsi3>
    1c44:	8009883a 	mov	r4,r16
    1c48:	b80b883a 	mov	r5,r23
    1c4c:	d8800315 	stw	r2,12(sp)
    1c50:	0000f040 	call	f04 <__mulsi3>
    1c54:	da800117 	ldw	r10,4(sp)
    1c58:	b80b883a 	mov	r5,r23
    1c5c:	1021883a 	mov	r16,r2
    1c60:	5009883a 	mov	r4,r10
    1c64:	0000f040 	call	f04 <__mulsi3>
    1c68:	d9c00517 	ldw	r7,20(sp)
    1c6c:	da400317 	ldw	r9,12(sp)
    1c70:	d8c00217 	ldw	r3,8(sp)
    1c74:	3808d43a 	srli	r4,r7,16
    1c78:	1245883a 	add	r2,r2,r9
    1c7c:	da000417 	ldw	r8,16(sp)
    1c80:	2085883a 	add	r2,r4,r2
    1c84:	1240022e 	bgeu	r2,r9,1c90 <__divdf3+0x4b8>
    1c88:	01000074 	movhi	r4,1
    1c8c:	8121883a 	add	r16,r16,r4
    1c90:	1008d43a 	srli	r4,r2,16
    1c94:	1004943a 	slli	r2,r2,16
    1c98:	39ffffcc 	andi	r7,r7,65535
    1c9c:	2409883a 	add	r4,r4,r16
    1ca0:	11c5883a 	add	r2,r2,r7
    1ca4:	4100bb36 	bltu	r8,r4,1f94 <__divdf3+0x7bc>
    1ca8:	4100d726 	beq	r8,r4,2008 <__divdf3+0x830>
    1cac:	4109c83a 	sub	r4,r8,r4
    1cb0:	a8a1c83a 	sub	r16,r21,r2
    1cb4:	ac2b803a 	cmpltu	r21,r21,r16
    1cb8:	256bc83a 	sub	r21,r4,r21
    1cbc:	b540d926 	beq	r22,r21,2024 <__divdf3+0x84c>
    1cc0:	a00b883a 	mov	r5,r20
    1cc4:	a809883a 	mov	r4,r21
    1cc8:	d8c00215 	stw	r3,8(sp)
    1ccc:	00036240 	call	3624 <__udivsi3>
    1cd0:	100b883a 	mov	r5,r2
    1cd4:	9009883a 	mov	r4,r18
    1cd8:	d8800515 	stw	r2,20(sp)
    1cdc:	0000f040 	call	f04 <__mulsi3>
    1ce0:	a809883a 	mov	r4,r21
    1ce4:	a00b883a 	mov	r5,r20
    1ce8:	d8800415 	stw	r2,16(sp)
    1cec:	00036880 	call	3688 <__umodsi3>
    1cf0:	1004943a 	slli	r2,r2,16
    1cf4:	8008d43a 	srli	r4,r16,16
    1cf8:	da000417 	ldw	r8,16(sp)
    1cfc:	d8c00217 	ldw	r3,8(sp)
    1d00:	2084b03a 	or	r2,r4,r2
    1d04:	d9c00517 	ldw	r7,20(sp)
    1d08:	1200062e 	bgeu	r2,r8,1d24 <__divdf3+0x54c>
    1d0c:	1585883a 	add	r2,r2,r22
    1d10:	393fffc4 	addi	r4,r7,-1
    1d14:	1580c536 	bltu	r2,r22,202c <__divdf3+0x854>
    1d18:	1200c42e 	bgeu	r2,r8,202c <__divdf3+0x854>
    1d1c:	39ffff84 	addi	r7,r7,-2
    1d20:	1585883a 	add	r2,r2,r22
    1d24:	122bc83a 	sub	r21,r2,r8
    1d28:	a00b883a 	mov	r5,r20
    1d2c:	a809883a 	mov	r4,r21
    1d30:	d8c00215 	stw	r3,8(sp)
    1d34:	d9c00515 	stw	r7,20(sp)
    1d38:	00036240 	call	3624 <__udivsi3>
    1d3c:	9009883a 	mov	r4,r18
    1d40:	100b883a 	mov	r5,r2
    1d44:	d8800415 	stw	r2,16(sp)
    1d48:	0000f040 	call	f04 <__mulsi3>
    1d4c:	a809883a 	mov	r4,r21
    1d50:	a00b883a 	mov	r5,r20
    1d54:	1025883a 	mov	r18,r2
    1d58:	00036880 	call	3688 <__umodsi3>
    1d5c:	1004943a 	slli	r2,r2,16
    1d60:	813fffcc 	andi	r4,r16,65535
    1d64:	d8c00217 	ldw	r3,8(sp)
    1d68:	20a0b03a 	or	r16,r4,r2
    1d6c:	d9c00517 	ldw	r7,20(sp)
    1d70:	da000417 	ldw	r8,16(sp)
    1d74:	8480062e 	bgeu	r16,r18,1d90 <__divdf3+0x5b8>
    1d78:	85a1883a 	add	r16,r16,r22
    1d7c:	40bfffc4 	addi	r2,r8,-1
    1d80:	8580ac36 	bltu	r16,r22,2034 <__divdf3+0x85c>
    1d84:	8480ab2e 	bgeu	r16,r18,2034 <__divdf3+0x85c>
    1d88:	423fff84 	addi	r8,r8,-2
    1d8c:	85a1883a 	add	r16,r16,r22
    1d90:	3804943a 	slli	r2,r7,16
    1d94:	84a1c83a 	sub	r16,r16,r18
    1d98:	e009883a 	mov	r4,fp
    1d9c:	1228b03a 	or	r20,r2,r8
    1da0:	a1ffffcc 	andi	r7,r20,65535
    1da4:	a024d43a 	srli	r18,r20,16
    1da8:	380b883a 	mov	r5,r7
    1dac:	d8c00215 	stw	r3,8(sp)
    1db0:	d9c00515 	stw	r7,20(sp)
    1db4:	0000f040 	call	f04 <__mulsi3>
    1db8:	900b883a 	mov	r5,r18
    1dbc:	e009883a 	mov	r4,fp
    1dc0:	102b883a 	mov	r21,r2
    1dc4:	0000f040 	call	f04 <__mulsi3>
    1dc8:	900b883a 	mov	r5,r18
    1dcc:	b809883a 	mov	r4,r23
    1dd0:	1039883a 	mov	fp,r2
    1dd4:	0000f040 	call	f04 <__mulsi3>
    1dd8:	d9c00517 	ldw	r7,20(sp)
    1ddc:	b80b883a 	mov	r5,r23
    1de0:	1025883a 	mov	r18,r2
    1de4:	3809883a 	mov	r4,r7
    1de8:	0000f040 	call	f04 <__mulsi3>
    1dec:	a808d43a 	srli	r4,r21,16
    1df0:	1705883a 	add	r2,r2,fp
    1df4:	d8c00217 	ldw	r3,8(sp)
    1df8:	2085883a 	add	r2,r4,r2
    1dfc:	1700022e 	bgeu	r2,fp,1e08 <__divdf3+0x630>
    1e00:	01000074 	movhi	r4,1
    1e04:	9125883a 	add	r18,r18,r4
    1e08:	1008d43a 	srli	r4,r2,16
    1e0c:	1004943a 	slli	r2,r2,16
    1e10:	ad7fffcc 	andi	r21,r21,65535
    1e14:	2489883a 	add	r4,r4,r18
    1e18:	1545883a 	add	r2,r2,r21
    1e1c:	81003836 	bltu	r16,r4,1f00 <__divdf3+0x728>
    1e20:	81003626 	beq	r16,r4,1efc <__divdf3+0x724>
    1e24:	a5000054 	ori	r20,r20,1
    1e28:	1880ffc4 	addi	r2,r3,1023
    1e2c:	00bf2e0e 	bge	zero,r2,1ae8 <__alt_data_end+0xfffe1ae8>
    1e30:	a10001cc 	andi	r4,r20,7
    1e34:	20000726 	beq	r4,zero,1e54 <__divdf3+0x67c>
    1e38:	a10003cc 	andi	r4,r20,15
    1e3c:	01400104 	movi	r5,4
    1e40:	21400426 	beq	r4,r5,1e54 <__divdf3+0x67c>
    1e44:	a149883a 	add	r4,r20,r5
    1e48:	2529803a 	cmpltu	r20,r4,r20
    1e4c:	8d23883a 	add	r17,r17,r20
    1e50:	2029883a 	mov	r20,r4
    1e54:	8900402c 	andhi	r4,r17,256
    1e58:	20000426 	beq	r4,zero,1e6c <__divdf3+0x694>
    1e5c:	18810004 	addi	r2,r3,1024
    1e60:	00ffc034 	movhi	r3,65280
    1e64:	18ffffc4 	addi	r3,r3,-1
    1e68:	88e2703a 	and	r17,r17,r3
    1e6c:	00c1ff84 	movi	r3,2046
    1e70:	18beb416 	blt	r3,r2,1944 <__alt_data_end+0xfffe1944>
    1e74:	a028d0fa 	srli	r20,r20,3
    1e78:	882a977a 	slli	r21,r17,29
    1e7c:	8820927a 	slli	r16,r17,9
    1e80:	1081ffcc 	andi	r2,r2,2047
    1e84:	ad2ab03a 	or	r21,r21,r20
    1e88:	8020d33a 	srli	r16,r16,12
    1e8c:	9900004c 	andi	r4,r19,1
    1e90:	003eb006 	br	1954 <__alt_data_end+0xfffe1954>
    1e94:	8080022c 	andhi	r2,r16,8
    1e98:	10001226 	beq	r2,zero,1ee4 <__divdf3+0x70c>
    1e9c:	8880022c 	andhi	r2,r17,8
    1ea0:	1000101e 	bne	r2,zero,1ee4 <__divdf3+0x70c>
    1ea4:	00800434 	movhi	r2,16
    1ea8:	8c000234 	orhi	r16,r17,8
    1eac:	10bfffc4 	addi	r2,r2,-1
    1eb0:	b809883a 	mov	r4,r23
    1eb4:	80a0703a 	and	r16,r16,r2
    1eb8:	a02b883a 	mov	r21,r20
    1ebc:	003f0806 	br	1ae0 <__alt_data_end+0xfffe1ae0>
    1ec0:	008000c4 	movi	r2,3
    1ec4:	3880b126 	beq	r7,r2,218c <__divdf3+0x9b4>
    1ec8:	00800044 	movi	r2,1
    1ecc:	38805b1e 	bne	r7,r2,203c <__divdf3+0x864>
    1ed0:	e009883a 	mov	r4,fp
    1ed4:	0005883a 	mov	r2,zero
    1ed8:	0021883a 	mov	r16,zero
    1edc:	002b883a 	mov	r21,zero
    1ee0:	003e9c06 	br	1954 <__alt_data_end+0xfffe1954>
    1ee4:	00800434 	movhi	r2,16
    1ee8:	84000234 	orhi	r16,r16,8
    1eec:	10bfffc4 	addi	r2,r2,-1
    1ef0:	b009883a 	mov	r4,r22
    1ef4:	80a0703a 	and	r16,r16,r2
    1ef8:	003ef906 	br	1ae0 <__alt_data_end+0xfffe1ae0>
    1efc:	103fca26 	beq	r2,zero,1e28 <__alt_data_end+0xfffe1e28>
    1f00:	b421883a 	add	r16,r22,r16
    1f04:	a17fffc4 	addi	r5,r20,-1
    1f08:	8580422e 	bgeu	r16,r22,2014 <__divdf3+0x83c>
    1f0c:	2829883a 	mov	r20,r5
    1f10:	813fc41e 	bne	r16,r4,1e24 <__alt_data_end+0xfffe1e24>
    1f14:	d9800017 	ldw	r6,0(sp)
    1f18:	30bfc21e 	bne	r6,r2,1e24 <__alt_data_end+0xfffe1e24>
    1f1c:	003fc206 	br	1e28 <__alt_data_end+0xfffe1e28>
    1f20:	143ff604 	addi	r16,r2,-40
    1f24:	8c20983a 	sll	r16,r17,r16
    1f28:	002b883a 	mov	r21,zero
    1f2c:	003eb406 	br	1a00 <__alt_data_end+0xfffe1a00>
    1f30:	d9800215 	stw	r6,8(sp)
    1f34:	d9c00515 	stw	r7,20(sp)
    1f38:	da000415 	stw	r8,16(sp)
    1f3c:	00034c80 	call	34c8 <__clzsi2>
    1f40:	10800804 	addi	r2,r2,32
    1f44:	da000417 	ldw	r8,16(sp)
    1f48:	d9c00517 	ldw	r7,20(sp)
    1f4c:	d9800217 	ldw	r6,8(sp)
    1f50:	003ea106 	br	19d8 <__alt_data_end+0xfffe19d8>
    1f54:	147ff604 	addi	r17,r2,-40
    1f58:	3462983a 	sll	r17,r6,r17
    1f5c:	0029883a 	mov	r20,zero
    1f60:	003ec906 	br	1a88 <__alt_data_end+0xfffe1a88>
    1f64:	3009883a 	mov	r4,r6
    1f68:	d9400115 	stw	r5,4(sp)
    1f6c:	d9800215 	stw	r6,8(sp)
    1f70:	da000415 	stw	r8,16(sp)
    1f74:	da400315 	stw	r9,12(sp)
    1f78:	00034c80 	call	34c8 <__clzsi2>
    1f7c:	10800804 	addi	r2,r2,32
    1f80:	da400317 	ldw	r9,12(sp)
    1f84:	da000417 	ldw	r8,16(sp)
    1f88:	d9800217 	ldw	r6,8(sp)
    1f8c:	d9400117 	ldw	r5,4(sp)
    1f90:	003eb306 	br	1a60 <__alt_data_end+0xfffe1a60>
    1f94:	d9800017 	ldw	r6,0(sp)
    1f98:	a9ab883a 	add	r21,r21,r6
    1f9c:	a98b803a 	cmpltu	r5,r21,r6
    1fa0:	2d8b883a 	add	r5,r5,r22
    1fa4:	2a11883a 	add	r8,r5,r8
    1fa8:	897fffc4 	addi	r5,r17,-1
    1fac:	b2000c2e 	bgeu	r22,r8,1fe0 <__divdf3+0x808>
    1fb0:	41003f36 	bltu	r8,r4,20b0 <__divdf3+0x8d8>
    1fb4:	22006c26 	beq	r4,r8,2168 <__divdf3+0x990>
    1fb8:	4109c83a 	sub	r4,r8,r4
    1fbc:	2823883a 	mov	r17,r5
    1fc0:	003f3b06 	br	1cb0 <__alt_data_end+0xfffe1cb0>
    1fc4:	ad3ed336 	bltu	r21,r20,1b14 <__alt_data_end+0xfffe1b14>
    1fc8:	a804d07a 	srli	r2,r21,1
    1fcc:	802e97fa 	slli	r23,r16,31
    1fd0:	a82a97fa 	slli	r21,r21,31
    1fd4:	8020d07a 	srli	r16,r16,1
    1fd8:	b8aeb03a 	or	r23,r23,r2
    1fdc:	003ed006 	br	1b20 <__alt_data_end+0xfffe1b20>
    1fe0:	b23ff51e 	bne	r22,r8,1fb8 <__alt_data_end+0xfffe1fb8>
    1fe4:	d9800017 	ldw	r6,0(sp)
    1fe8:	a9bff12e 	bgeu	r21,r6,1fb0 <__alt_data_end+0xfffe1fb0>
    1fec:	b109c83a 	sub	r4,r22,r4
    1ff0:	2823883a 	mov	r17,r5
    1ff4:	003f2e06 	br	1cb0 <__alt_data_end+0xfffe1cb0>
    1ff8:	2021883a 	mov	r16,r4
    1ffc:	003eff06 	br	1bfc <__alt_data_end+0xfffe1bfc>
    2000:	2023883a 	mov	r17,r4
    2004:	003ee406 	br	1b98 <__alt_data_end+0xfffe1b98>
    2008:	a8bfe236 	bltu	r21,r2,1f94 <__alt_data_end+0xfffe1f94>
    200c:	0009883a 	mov	r4,zero
    2010:	003f2706 	br	1cb0 <__alt_data_end+0xfffe1cb0>
    2014:	81002d36 	bltu	r16,r4,20cc <__divdf3+0x8f4>
    2018:	24005626 	beq	r4,r16,2174 <__divdf3+0x99c>
    201c:	2829883a 	mov	r20,r5
    2020:	003f8006 	br	1e24 <__alt_data_end+0xfffe1e24>
    2024:	053fffc4 	movi	r20,-1
    2028:	003f7f06 	br	1e28 <__alt_data_end+0xfffe1e28>
    202c:	200f883a 	mov	r7,r4
    2030:	003f3c06 	br	1d24 <__alt_data_end+0xfffe1d24>
    2034:	1011883a 	mov	r8,r2
    2038:	003f5506 	br	1d90 <__alt_data_end+0xfffe1d90>
    203c:	e027883a 	mov	r19,fp
    2040:	003f7906 	br	1e28 <__alt_data_end+0xfffe1e28>
    2044:	010007c4 	movi	r4,31
    2048:	20c02816 	blt	r4,r3,20ec <__divdf3+0x914>
    204c:	00800804 	movi	r2,32
    2050:	10c5c83a 	sub	r2,r2,r3
    2054:	888a983a 	sll	r5,r17,r2
    2058:	a0c8d83a 	srl	r4,r20,r3
    205c:	a084983a 	sll	r2,r20,r2
    2060:	88e2d83a 	srl	r17,r17,r3
    2064:	2906b03a 	or	r3,r5,r4
    2068:	1004c03a 	cmpne	r2,r2,zero
    206c:	1886b03a 	or	r3,r3,r2
    2070:	188001cc 	andi	r2,r3,7
    2074:	10000726 	beq	r2,zero,2094 <__divdf3+0x8bc>
    2078:	188003cc 	andi	r2,r3,15
    207c:	01000104 	movi	r4,4
    2080:	11000426 	beq	r2,r4,2094 <__divdf3+0x8bc>
    2084:	1805883a 	mov	r2,r3
    2088:	10c00104 	addi	r3,r2,4
    208c:	1885803a 	cmpltu	r2,r3,r2
    2090:	88a3883a 	add	r17,r17,r2
    2094:	8880202c 	andhi	r2,r17,128
    2098:	10002926 	beq	r2,zero,2140 <__divdf3+0x968>
    209c:	9900004c 	andi	r4,r19,1
    20a0:	00800044 	movi	r2,1
    20a4:	0021883a 	mov	r16,zero
    20a8:	002b883a 	mov	r21,zero
    20ac:	003e2906 	br	1954 <__alt_data_end+0xfffe1954>
    20b0:	d9800017 	ldw	r6,0(sp)
    20b4:	8c7fff84 	addi	r17,r17,-2
    20b8:	a9ab883a 	add	r21,r21,r6
    20bc:	a98b803a 	cmpltu	r5,r21,r6
    20c0:	2d8b883a 	add	r5,r5,r22
    20c4:	2a11883a 	add	r8,r5,r8
    20c8:	003ef806 	br	1cac <__alt_data_end+0xfffe1cac>
    20cc:	d9800017 	ldw	r6,0(sp)
    20d0:	318f883a 	add	r7,r6,r6
    20d4:	398b803a 	cmpltu	r5,r7,r6
    20d8:	2d8d883a 	add	r6,r5,r22
    20dc:	81a1883a 	add	r16,r16,r6
    20e0:	a17fff84 	addi	r5,r20,-2
    20e4:	d9c00015 	stw	r7,0(sp)
    20e8:	003f8806 	br	1f0c <__alt_data_end+0xfffe1f0c>
    20ec:	013ff844 	movi	r4,-31
    20f0:	2085c83a 	sub	r2,r4,r2
    20f4:	8888d83a 	srl	r4,r17,r2
    20f8:	00800804 	movi	r2,32
    20fc:	18802126 	beq	r3,r2,2184 <__divdf3+0x9ac>
    2100:	04001004 	movi	r16,64
    2104:	80c7c83a 	sub	r3,r16,r3
    2108:	88e0983a 	sll	r16,r17,r3
    210c:	8504b03a 	or	r2,r16,r20
    2110:	1004c03a 	cmpne	r2,r2,zero
    2114:	2084b03a 	or	r2,r4,r2
    2118:	144001cc 	andi	r17,r2,7
    211c:	88000d1e 	bne	r17,zero,2154 <__divdf3+0x97c>
    2120:	0021883a 	mov	r16,zero
    2124:	102ad0fa 	srli	r21,r2,3
    2128:	9900004c 	andi	r4,r19,1
    212c:	0005883a 	mov	r2,zero
    2130:	ac6ab03a 	or	r21,r21,r17
    2134:	003e0706 	br	1954 <__alt_data_end+0xfffe1954>
    2138:	1007883a 	mov	r3,r2
    213c:	0023883a 	mov	r17,zero
    2140:	8820927a 	slli	r16,r17,9
    2144:	1805883a 	mov	r2,r3
    2148:	8822977a 	slli	r17,r17,29
    214c:	8020d33a 	srli	r16,r16,12
    2150:	003ff406 	br	2124 <__alt_data_end+0xfffe2124>
    2154:	10c003cc 	andi	r3,r2,15
    2158:	01000104 	movi	r4,4
    215c:	193ff626 	beq	r3,r4,2138 <__alt_data_end+0xfffe2138>
    2160:	0023883a 	mov	r17,zero
    2164:	003fc806 	br	2088 <__alt_data_end+0xfffe2088>
    2168:	a8bfd136 	bltu	r21,r2,20b0 <__alt_data_end+0xfffe20b0>
    216c:	2823883a 	mov	r17,r5
    2170:	003fa606 	br	200c <__alt_data_end+0xfffe200c>
    2174:	d9800017 	ldw	r6,0(sp)
    2178:	30bfd436 	bltu	r6,r2,20cc <__alt_data_end+0xfffe20cc>
    217c:	2829883a 	mov	r20,r5
    2180:	003f6406 	br	1f14 <__alt_data_end+0xfffe1f14>
    2184:	0021883a 	mov	r16,zero
    2188:	003fe006 	br	210c <__alt_data_end+0xfffe210c>
    218c:	00800434 	movhi	r2,16
    2190:	8c000234 	orhi	r16,r17,8
    2194:	10bfffc4 	addi	r2,r2,-1
    2198:	e009883a 	mov	r4,fp
    219c:	80a0703a 	and	r16,r16,r2
    21a0:	a02b883a 	mov	r21,r20
    21a4:	003e4e06 	br	1ae0 <__alt_data_end+0xfffe1ae0>

000021a8 <__gedf2>:
    21a8:	2804d53a 	srli	r2,r5,20
    21ac:	3806d53a 	srli	r3,r7,20
    21b0:	02000434 	movhi	r8,16
    21b4:	423fffc4 	addi	r8,r8,-1
    21b8:	1081ffcc 	andi	r2,r2,2047
    21bc:	0241ffc4 	movi	r9,2047
    21c0:	2a14703a 	and	r10,r5,r8
    21c4:	18c1ffcc 	andi	r3,r3,2047
    21c8:	3a10703a 	and	r8,r7,r8
    21cc:	280ad7fa 	srli	r5,r5,31
    21d0:	380ed7fa 	srli	r7,r7,31
    21d4:	12401d26 	beq	r2,r9,224c <__gedf2+0xa4>
    21d8:	0241ffc4 	movi	r9,2047
    21dc:	1a401226 	beq	r3,r9,2228 <__gedf2+0x80>
    21e0:	1000081e 	bne	r2,zero,2204 <__gedf2+0x5c>
    21e4:	2296b03a 	or	r11,r4,r10
    21e8:	5813003a 	cmpeq	r9,r11,zero
    21ec:	1800091e 	bne	r3,zero,2214 <__gedf2+0x6c>
    21f0:	3218b03a 	or	r12,r6,r8
    21f4:	6000071e 	bne	r12,zero,2214 <__gedf2+0x6c>
    21f8:	0005883a 	mov	r2,zero
    21fc:	5800101e 	bne	r11,zero,2240 <__gedf2+0x98>
    2200:	f800283a 	ret
    2204:	18000c1e 	bne	r3,zero,2238 <__gedf2+0x90>
    2208:	3212b03a 	or	r9,r6,r8
    220c:	48000c26 	beq	r9,zero,2240 <__gedf2+0x98>
    2210:	0013883a 	mov	r9,zero
    2214:	39c03fcc 	andi	r7,r7,255
    2218:	48000826 	beq	r9,zero,223c <__gedf2+0x94>
    221c:	38000926 	beq	r7,zero,2244 <__gedf2+0x9c>
    2220:	00800044 	movi	r2,1
    2224:	f800283a 	ret
    2228:	3212b03a 	or	r9,r6,r8
    222c:	483fec26 	beq	r9,zero,21e0 <__alt_data_end+0xfffe21e0>
    2230:	00bfff84 	movi	r2,-2
    2234:	f800283a 	ret
    2238:	39c03fcc 	andi	r7,r7,255
    223c:	29c00626 	beq	r5,r7,2258 <__gedf2+0xb0>
    2240:	283ff726 	beq	r5,zero,2220 <__alt_data_end+0xfffe2220>
    2244:	00bfffc4 	movi	r2,-1
    2248:	f800283a 	ret
    224c:	2292b03a 	or	r9,r4,r10
    2250:	483fe126 	beq	r9,zero,21d8 <__alt_data_end+0xfffe21d8>
    2254:	003ff606 	br	2230 <__alt_data_end+0xfffe2230>
    2258:	18bff916 	blt	r3,r2,2240 <__alt_data_end+0xfffe2240>
    225c:	10c00316 	blt	r2,r3,226c <__gedf2+0xc4>
    2260:	42bff736 	bltu	r8,r10,2240 <__alt_data_end+0xfffe2240>
    2264:	52000326 	beq	r10,r8,2274 <__gedf2+0xcc>
    2268:	5200042e 	bgeu	r10,r8,227c <__gedf2+0xd4>
    226c:	283fec1e 	bne	r5,zero,2220 <__alt_data_end+0xfffe2220>
    2270:	003ff406 	br	2244 <__alt_data_end+0xfffe2244>
    2274:	313ff236 	bltu	r6,r4,2240 <__alt_data_end+0xfffe2240>
    2278:	21bffc36 	bltu	r4,r6,226c <__alt_data_end+0xfffe226c>
    227c:	0005883a 	mov	r2,zero
    2280:	f800283a 	ret

00002284 <__muldf3>:
    2284:	deffee04 	addi	sp,sp,-72
    2288:	dd000c15 	stw	r20,48(sp)
    228c:	2828d53a 	srli	r20,r5,20
    2290:	ddc00f15 	stw	r23,60(sp)
    2294:	282ed7fa 	srli	r23,r5,31
    2298:	dc000815 	stw	r16,32(sp)
    229c:	04000434 	movhi	r16,16
    22a0:	dcc00b15 	stw	r19,44(sp)
    22a4:	843fffc4 	addi	r16,r16,-1
    22a8:	dfc01115 	stw	ra,68(sp)
    22ac:	df001015 	stw	fp,64(sp)
    22b0:	dd800e15 	stw	r22,56(sp)
    22b4:	dd400d15 	stw	r21,52(sp)
    22b8:	dc800a15 	stw	r18,40(sp)
    22bc:	dc400915 	stw	r17,36(sp)
    22c0:	a501ffcc 	andi	r20,r20,2047
    22c4:	2c20703a 	and	r16,r5,r16
    22c8:	b827883a 	mov	r19,r23
    22cc:	ba403fcc 	andi	r9,r23,255
    22d0:	a0006026 	beq	r20,zero,2454 <__muldf3+0x1d0>
    22d4:	0081ffc4 	movi	r2,2047
    22d8:	202d883a 	mov	r22,r4
    22dc:	a0803626 	beq	r20,r2,23b8 <__muldf3+0x134>
    22e0:	84000434 	orhi	r16,r16,16
    22e4:	200ad77a 	srli	r5,r4,29
    22e8:	800490fa 	slli	r2,r16,3
    22ec:	202c90fa 	slli	r22,r4,3
    22f0:	a53f0044 	addi	r20,r20,-1023
    22f4:	28a0b03a 	or	r16,r5,r2
    22f8:	002b883a 	mov	r21,zero
    22fc:	000b883a 	mov	r5,zero
    2300:	3804d53a 	srli	r2,r7,20
    2304:	3838d7fa 	srli	fp,r7,31
    2308:	04400434 	movhi	r17,16
    230c:	8c7fffc4 	addi	r17,r17,-1
    2310:	1081ffcc 	andi	r2,r2,2047
    2314:	3025883a 	mov	r18,r6
    2318:	3c62703a 	and	r17,r7,r17
    231c:	e2803fcc 	andi	r10,fp,255
    2320:	10006d26 	beq	r2,zero,24d8 <__muldf3+0x254>
    2324:	00c1ffc4 	movi	r3,2047
    2328:	10c06526 	beq	r2,r3,24c0 <__muldf3+0x23c>
    232c:	8c400434 	orhi	r17,r17,16
    2330:	300ed77a 	srli	r7,r6,29
    2334:	880690fa 	slli	r3,r17,3
    2338:	302490fa 	slli	r18,r6,3
    233c:	10bf0044 	addi	r2,r2,-1023
    2340:	38e2b03a 	or	r17,r7,r3
    2344:	000f883a 	mov	r7,zero
    2348:	a087883a 	add	r3,r20,r2
    234c:	010003c4 	movi	r4,15
    2350:	3d44b03a 	or	r2,r7,r21
    2354:	e5ccf03a 	xor	r6,fp,r23
    2358:	1a000044 	addi	r8,r3,1
    235c:	20809b36 	bltu	r4,r2,25cc <__muldf3+0x348>
    2360:	100490ba 	slli	r2,r2,2
    2364:	01000034 	movhi	r4,0
    2368:	2108de04 	addi	r4,r4,9080
    236c:	1105883a 	add	r2,r2,r4
    2370:	10800017 	ldw	r2,0(r2)
    2374:	1000683a 	jmp	r2
    2378:	000025cc 	andi	zero,zero,151
    237c:	000023d8 	cmpnei	zero,zero,143
    2380:	000023d8 	cmpnei	zero,zero,143
    2384:	000023d4 	movui	zero,143
    2388:	000025a8 	cmpgeui	zero,zero,150
    238c:	000025a8 	cmpgeui	zero,zero,150
    2390:	00002590 	cmplti	zero,zero,150
    2394:	000023d4 	movui	zero,143
    2398:	000025a8 	cmpgeui	zero,zero,150
    239c:	00002590 	cmplti	zero,zero,150
    23a0:	000025a8 	cmpgeui	zero,zero,150
    23a4:	000023d4 	movui	zero,143
    23a8:	000025b8 	rdprs	zero,zero,150
    23ac:	000025b8 	rdprs	zero,zero,150
    23b0:	000025b8 	rdprs	zero,zero,150
    23b4:	00002918 	cmpnei	zero,zero,164
    23b8:	2404b03a 	or	r2,r4,r16
    23bc:	1000711e 	bne	r2,zero,2584 <__muldf3+0x300>
    23c0:	05400204 	movi	r21,8
    23c4:	0021883a 	mov	r16,zero
    23c8:	002d883a 	mov	r22,zero
    23cc:	01400084 	movi	r5,2
    23d0:	003fcb06 	br	2300 <__alt_data_end+0xfffe2300>
    23d4:	500d883a 	mov	r6,r10
    23d8:	00800084 	movi	r2,2
    23dc:	38805926 	beq	r7,r2,2544 <__muldf3+0x2c0>
    23e0:	008000c4 	movi	r2,3
    23e4:	3881bb26 	beq	r7,r2,2ad4 <__muldf3+0x850>
    23e8:	00800044 	movi	r2,1
    23ec:	3881961e 	bne	r7,r2,2a48 <__muldf3+0x7c4>
    23f0:	3027883a 	mov	r19,r6
    23f4:	0005883a 	mov	r2,zero
    23f8:	0021883a 	mov	r16,zero
    23fc:	002d883a 	mov	r22,zero
    2400:	1004953a 	slli	r2,r2,20
    2404:	98c03fcc 	andi	r3,r19,255
    2408:	04400434 	movhi	r17,16
    240c:	8c7fffc4 	addi	r17,r17,-1
    2410:	180697fa 	slli	r3,r3,31
    2414:	8460703a 	and	r16,r16,r17
    2418:	80a0b03a 	or	r16,r16,r2
    241c:	80c6b03a 	or	r3,r16,r3
    2420:	b005883a 	mov	r2,r22
    2424:	dfc01117 	ldw	ra,68(sp)
    2428:	df001017 	ldw	fp,64(sp)
    242c:	ddc00f17 	ldw	r23,60(sp)
    2430:	dd800e17 	ldw	r22,56(sp)
    2434:	dd400d17 	ldw	r21,52(sp)
    2438:	dd000c17 	ldw	r20,48(sp)
    243c:	dcc00b17 	ldw	r19,44(sp)
    2440:	dc800a17 	ldw	r18,40(sp)
    2444:	dc400917 	ldw	r17,36(sp)
    2448:	dc000817 	ldw	r16,32(sp)
    244c:	dec01204 	addi	sp,sp,72
    2450:	f800283a 	ret
    2454:	2404b03a 	or	r2,r4,r16
    2458:	202b883a 	mov	r21,r4
    245c:	10004426 	beq	r2,zero,2570 <__muldf3+0x2ec>
    2460:	80015126 	beq	r16,zero,29a8 <__muldf3+0x724>
    2464:	8009883a 	mov	r4,r16
    2468:	d9800715 	stw	r6,28(sp)
    246c:	d9c00215 	stw	r7,8(sp)
    2470:	da400415 	stw	r9,16(sp)
    2474:	00034c80 	call	34c8 <__clzsi2>
    2478:	d9800717 	ldw	r6,28(sp)
    247c:	d9c00217 	ldw	r7,8(sp)
    2480:	da400417 	ldw	r9,16(sp)
    2484:	113ffd44 	addi	r4,r2,-11
    2488:	00c00704 	movi	r3,28
    248c:	19014216 	blt	r3,r4,2998 <__muldf3+0x714>
    2490:	00c00744 	movi	r3,29
    2494:	15bffe04 	addi	r22,r2,-8
    2498:	1907c83a 	sub	r3,r3,r4
    249c:	85a0983a 	sll	r16,r16,r22
    24a0:	a8c6d83a 	srl	r3,r21,r3
    24a4:	adac983a 	sll	r22,r21,r22
    24a8:	1c20b03a 	or	r16,r3,r16
    24ac:	1080fcc4 	addi	r2,r2,1011
    24b0:	00a9c83a 	sub	r20,zero,r2
    24b4:	002b883a 	mov	r21,zero
    24b8:	000b883a 	mov	r5,zero
    24bc:	003f9006 	br	2300 <__alt_data_end+0xfffe2300>
    24c0:	3446b03a 	or	r3,r6,r17
    24c4:	1800281e 	bne	r3,zero,2568 <__muldf3+0x2e4>
    24c8:	0023883a 	mov	r17,zero
    24cc:	0025883a 	mov	r18,zero
    24d0:	01c00084 	movi	r7,2
    24d4:	003f9c06 	br	2348 <__alt_data_end+0xfffe2348>
    24d8:	3446b03a 	or	r3,r6,r17
    24dc:	18001e26 	beq	r3,zero,2558 <__muldf3+0x2d4>
    24e0:	88012126 	beq	r17,zero,2968 <__muldf3+0x6e4>
    24e4:	8809883a 	mov	r4,r17
    24e8:	d9400215 	stw	r5,8(sp)
    24ec:	d9800715 	stw	r6,28(sp)
    24f0:	da400415 	stw	r9,16(sp)
    24f4:	da800315 	stw	r10,12(sp)
    24f8:	00034c80 	call	34c8 <__clzsi2>
    24fc:	d9400217 	ldw	r5,8(sp)
    2500:	d9800717 	ldw	r6,28(sp)
    2504:	da400417 	ldw	r9,16(sp)
    2508:	da800317 	ldw	r10,12(sp)
    250c:	113ffd44 	addi	r4,r2,-11
    2510:	00c00704 	movi	r3,28
    2514:	19011016 	blt	r3,r4,2958 <__muldf3+0x6d4>
    2518:	00c00744 	movi	r3,29
    251c:	14bffe04 	addi	r18,r2,-8
    2520:	1907c83a 	sub	r3,r3,r4
    2524:	8ca2983a 	sll	r17,r17,r18
    2528:	30c6d83a 	srl	r3,r6,r3
    252c:	34a4983a 	sll	r18,r6,r18
    2530:	1c62b03a 	or	r17,r3,r17
    2534:	1080fcc4 	addi	r2,r2,1011
    2538:	0085c83a 	sub	r2,zero,r2
    253c:	000f883a 	mov	r7,zero
    2540:	003f8106 	br	2348 <__alt_data_end+0xfffe2348>
    2544:	3027883a 	mov	r19,r6
    2548:	0081ffc4 	movi	r2,2047
    254c:	0021883a 	mov	r16,zero
    2550:	002d883a 	mov	r22,zero
    2554:	003faa06 	br	2400 <__alt_data_end+0xfffe2400>
    2558:	0023883a 	mov	r17,zero
    255c:	0025883a 	mov	r18,zero
    2560:	01c00044 	movi	r7,1
    2564:	003f7806 	br	2348 <__alt_data_end+0xfffe2348>
    2568:	01c000c4 	movi	r7,3
    256c:	003f7606 	br	2348 <__alt_data_end+0xfffe2348>
    2570:	05400104 	movi	r21,4
    2574:	0021883a 	mov	r16,zero
    2578:	002d883a 	mov	r22,zero
    257c:	01400044 	movi	r5,1
    2580:	003f5f06 	br	2300 <__alt_data_end+0xfffe2300>
    2584:	05400304 	movi	r21,12
    2588:	014000c4 	movi	r5,3
    258c:	003f5c06 	br	2300 <__alt_data_end+0xfffe2300>
    2590:	04000434 	movhi	r16,16
    2594:	0027883a 	mov	r19,zero
    2598:	843fffc4 	addi	r16,r16,-1
    259c:	05bfffc4 	movi	r22,-1
    25a0:	0081ffc4 	movi	r2,2047
    25a4:	003f9606 	br	2400 <__alt_data_end+0xfffe2400>
    25a8:	8023883a 	mov	r17,r16
    25ac:	b025883a 	mov	r18,r22
    25b0:	280f883a 	mov	r7,r5
    25b4:	003f8806 	br	23d8 <__alt_data_end+0xfffe23d8>
    25b8:	8023883a 	mov	r17,r16
    25bc:	b025883a 	mov	r18,r22
    25c0:	480d883a 	mov	r6,r9
    25c4:	280f883a 	mov	r7,r5
    25c8:	003f8306 	br	23d8 <__alt_data_end+0xfffe23d8>
    25cc:	b026d43a 	srli	r19,r22,16
    25d0:	902ed43a 	srli	r23,r18,16
    25d4:	b5bfffcc 	andi	r22,r22,65535
    25d8:	94bfffcc 	andi	r18,r18,65535
    25dc:	b00b883a 	mov	r5,r22
    25e0:	9009883a 	mov	r4,r18
    25e4:	d8c00515 	stw	r3,20(sp)
    25e8:	d9800715 	stw	r6,28(sp)
    25ec:	da000615 	stw	r8,24(sp)
    25f0:	0000f040 	call	f04 <__mulsi3>
    25f4:	980b883a 	mov	r5,r19
    25f8:	9009883a 	mov	r4,r18
    25fc:	1029883a 	mov	r20,r2
    2600:	0000f040 	call	f04 <__mulsi3>
    2604:	b80b883a 	mov	r5,r23
    2608:	9809883a 	mov	r4,r19
    260c:	102b883a 	mov	r21,r2
    2610:	0000f040 	call	f04 <__mulsi3>
    2614:	b809883a 	mov	r4,r23
    2618:	b00b883a 	mov	r5,r22
    261c:	1039883a 	mov	fp,r2
    2620:	0000f040 	call	f04 <__mulsi3>
    2624:	a008d43a 	srli	r4,r20,16
    2628:	1545883a 	add	r2,r2,r21
    262c:	d8c00517 	ldw	r3,20(sp)
    2630:	2085883a 	add	r2,r4,r2
    2634:	d9800717 	ldw	r6,28(sp)
    2638:	da000617 	ldw	r8,24(sp)
    263c:	1540022e 	bgeu	r2,r21,2648 <__muldf3+0x3c4>
    2640:	01000074 	movhi	r4,1
    2644:	e139883a 	add	fp,fp,r4
    2648:	100e943a 	slli	r7,r2,16
    264c:	1004d43a 	srli	r2,r2,16
    2650:	882ad43a 	srli	r21,r17,16
    2654:	a53fffcc 	andi	r20,r20,65535
    2658:	8c7fffcc 	andi	r17,r17,65535
    265c:	3d29883a 	add	r20,r7,r20
    2660:	b00b883a 	mov	r5,r22
    2664:	8809883a 	mov	r4,r17
    2668:	d8c00515 	stw	r3,20(sp)
    266c:	d9800715 	stw	r6,28(sp)
    2670:	da000615 	stw	r8,24(sp)
    2674:	dd000115 	stw	r20,4(sp)
    2678:	d8800015 	stw	r2,0(sp)
    267c:	0000f040 	call	f04 <__mulsi3>
    2680:	980b883a 	mov	r5,r19
    2684:	8809883a 	mov	r4,r17
    2688:	d8800215 	stw	r2,8(sp)
    268c:	0000f040 	call	f04 <__mulsi3>
    2690:	9809883a 	mov	r4,r19
    2694:	a80b883a 	mov	r5,r21
    2698:	1029883a 	mov	r20,r2
    269c:	0000f040 	call	f04 <__mulsi3>
    26a0:	b00b883a 	mov	r5,r22
    26a4:	a809883a 	mov	r4,r21
    26a8:	d8800415 	stw	r2,16(sp)
    26ac:	0000f040 	call	f04 <__mulsi3>
    26b0:	d9c00217 	ldw	r7,8(sp)
    26b4:	1505883a 	add	r2,r2,r20
    26b8:	d8c00517 	ldw	r3,20(sp)
    26bc:	3826d43a 	srli	r19,r7,16
    26c0:	d9800717 	ldw	r6,28(sp)
    26c4:	da000617 	ldw	r8,24(sp)
    26c8:	9885883a 	add	r2,r19,r2
    26cc:	da400417 	ldw	r9,16(sp)
    26d0:	1500022e 	bgeu	r2,r20,26dc <__muldf3+0x458>
    26d4:	01000074 	movhi	r4,1
    26d8:	4913883a 	add	r9,r9,r4
    26dc:	1028d43a 	srli	r20,r2,16
    26e0:	1004943a 	slli	r2,r2,16
    26e4:	802cd43a 	srli	r22,r16,16
    26e8:	843fffcc 	andi	r16,r16,65535
    26ec:	3cffffcc 	andi	r19,r7,65535
    26f0:	9009883a 	mov	r4,r18
    26f4:	800b883a 	mov	r5,r16
    26f8:	a269883a 	add	r20,r20,r9
    26fc:	d8c00515 	stw	r3,20(sp)
    2700:	d9800715 	stw	r6,28(sp)
    2704:	da000615 	stw	r8,24(sp)
    2708:	14e7883a 	add	r19,r2,r19
    270c:	0000f040 	call	f04 <__mulsi3>
    2710:	9009883a 	mov	r4,r18
    2714:	b00b883a 	mov	r5,r22
    2718:	d8800315 	stw	r2,12(sp)
    271c:	0000f040 	call	f04 <__mulsi3>
    2720:	b809883a 	mov	r4,r23
    2724:	b00b883a 	mov	r5,r22
    2728:	d8800215 	stw	r2,8(sp)
    272c:	0000f040 	call	f04 <__mulsi3>
    2730:	b80b883a 	mov	r5,r23
    2734:	8009883a 	mov	r4,r16
    2738:	d8800415 	stw	r2,16(sp)
    273c:	0000f040 	call	f04 <__mulsi3>
    2740:	da800317 	ldw	r10,12(sp)
    2744:	d9c00217 	ldw	r7,8(sp)
    2748:	d9000017 	ldw	r4,0(sp)
    274c:	502ed43a 	srli	r23,r10,16
    2750:	11c5883a 	add	r2,r2,r7
    2754:	24e5883a 	add	r18,r4,r19
    2758:	b885883a 	add	r2,r23,r2
    275c:	d8c00517 	ldw	r3,20(sp)
    2760:	d9800717 	ldw	r6,28(sp)
    2764:	da000617 	ldw	r8,24(sp)
    2768:	da400417 	ldw	r9,16(sp)
    276c:	11c0022e 	bgeu	r2,r7,2778 <__muldf3+0x4f4>
    2770:	01000074 	movhi	r4,1
    2774:	4913883a 	add	r9,r9,r4
    2778:	100ed43a 	srli	r7,r2,16
    277c:	1004943a 	slli	r2,r2,16
    2780:	55ffffcc 	andi	r23,r10,65535
    2784:	3a53883a 	add	r9,r7,r9
    2788:	8809883a 	mov	r4,r17
    278c:	800b883a 	mov	r5,r16
    2790:	d8c00515 	stw	r3,20(sp)
    2794:	d9800715 	stw	r6,28(sp)
    2798:	da000615 	stw	r8,24(sp)
    279c:	da400415 	stw	r9,16(sp)
    27a0:	15ef883a 	add	r23,r2,r23
    27a4:	0000f040 	call	f04 <__mulsi3>
    27a8:	8809883a 	mov	r4,r17
    27ac:	b00b883a 	mov	r5,r22
    27b0:	d8800215 	stw	r2,8(sp)
    27b4:	0000f040 	call	f04 <__mulsi3>
    27b8:	b00b883a 	mov	r5,r22
    27bc:	a809883a 	mov	r4,r21
    27c0:	d8800315 	stw	r2,12(sp)
    27c4:	0000f040 	call	f04 <__mulsi3>
    27c8:	8009883a 	mov	r4,r16
    27cc:	a80b883a 	mov	r5,r21
    27d0:	1023883a 	mov	r17,r2
    27d4:	0000f040 	call	f04 <__mulsi3>
    27d8:	d9c00217 	ldw	r7,8(sp)
    27dc:	da800317 	ldw	r10,12(sp)
    27e0:	d8c00517 	ldw	r3,20(sp)
    27e4:	3808d43a 	srli	r4,r7,16
    27e8:	1285883a 	add	r2,r2,r10
    27ec:	d9800717 	ldw	r6,28(sp)
    27f0:	2085883a 	add	r2,r4,r2
    27f4:	da000617 	ldw	r8,24(sp)
    27f8:	da400417 	ldw	r9,16(sp)
    27fc:	1280022e 	bgeu	r2,r10,2808 <__muldf3+0x584>
    2800:	01000074 	movhi	r4,1
    2804:	8923883a 	add	r17,r17,r4
    2808:	1008943a 	slli	r4,r2,16
    280c:	39ffffcc 	andi	r7,r7,65535
    2810:	e4b9883a 	add	fp,fp,r18
    2814:	21cf883a 	add	r7,r4,r7
    2818:	e4e7803a 	cmpltu	r19,fp,r19
    281c:	3d0f883a 	add	r7,r7,r20
    2820:	bf39883a 	add	fp,r23,fp
    2824:	99c9883a 	add	r4,r19,r7
    2828:	e5ef803a 	cmpltu	r23,fp,r23
    282c:	490b883a 	add	r5,r9,r4
    2830:	1004d43a 	srli	r2,r2,16
    2834:	b965883a 	add	r18,r23,r5
    2838:	24c9803a 	cmpltu	r4,r4,r19
    283c:	3d29803a 	cmpltu	r20,r7,r20
    2840:	a128b03a 	or	r20,r20,r4
    2844:	95ef803a 	cmpltu	r23,r18,r23
    2848:	2a53803a 	cmpltu	r9,r5,r9
    284c:	a0a9883a 	add	r20,r20,r2
    2850:	4deeb03a 	or	r23,r9,r23
    2854:	a5ef883a 	add	r23,r20,r23
    2858:	bc63883a 	add	r17,r23,r17
    285c:	e004927a 	slli	r2,fp,9
    2860:	d9000117 	ldw	r4,4(sp)
    2864:	882e927a 	slli	r23,r17,9
    2868:	9022d5fa 	srli	r17,r18,23
    286c:	e038d5fa 	srli	fp,fp,23
    2870:	1104b03a 	or	r2,r2,r4
    2874:	9024927a 	slli	r18,r18,9
    2878:	1004c03a 	cmpne	r2,r2,zero
    287c:	bc62b03a 	or	r17,r23,r17
    2880:	1738b03a 	or	fp,r2,fp
    2884:	8880402c 	andhi	r2,r17,256
    2888:	e4a4b03a 	or	r18,fp,r18
    288c:	10000726 	beq	r2,zero,28ac <__muldf3+0x628>
    2890:	9006d07a 	srli	r3,r18,1
    2894:	880497fa 	slli	r2,r17,31
    2898:	9480004c 	andi	r18,r18,1
    289c:	8822d07a 	srli	r17,r17,1
    28a0:	1ca4b03a 	or	r18,r3,r18
    28a4:	14a4b03a 	or	r18,r2,r18
    28a8:	4007883a 	mov	r3,r8
    28ac:	1880ffc4 	addi	r2,r3,1023
    28b0:	0080460e 	bge	zero,r2,29cc <__muldf3+0x748>
    28b4:	910001cc 	andi	r4,r18,7
    28b8:	20000726 	beq	r4,zero,28d8 <__muldf3+0x654>
    28bc:	910003cc 	andi	r4,r18,15
    28c0:	01400104 	movi	r5,4
    28c4:	21400426 	beq	r4,r5,28d8 <__muldf3+0x654>
    28c8:	9149883a 	add	r4,r18,r5
    28cc:	24a5803a 	cmpltu	r18,r4,r18
    28d0:	8ca3883a 	add	r17,r17,r18
    28d4:	2025883a 	mov	r18,r4
    28d8:	8900402c 	andhi	r4,r17,256
    28dc:	20000426 	beq	r4,zero,28f0 <__muldf3+0x66c>
    28e0:	18810004 	addi	r2,r3,1024
    28e4:	00ffc034 	movhi	r3,65280
    28e8:	18ffffc4 	addi	r3,r3,-1
    28ec:	88e2703a 	and	r17,r17,r3
    28f0:	00c1ff84 	movi	r3,2046
    28f4:	18bf1316 	blt	r3,r2,2544 <__alt_data_end+0xfffe2544>
    28f8:	882c977a 	slli	r22,r17,29
    28fc:	9024d0fa 	srli	r18,r18,3
    2900:	8822927a 	slli	r17,r17,9
    2904:	1081ffcc 	andi	r2,r2,2047
    2908:	b4acb03a 	or	r22,r22,r18
    290c:	8820d33a 	srli	r16,r17,12
    2910:	3027883a 	mov	r19,r6
    2914:	003eba06 	br	2400 <__alt_data_end+0xfffe2400>
    2918:	8080022c 	andhi	r2,r16,8
    291c:	10000926 	beq	r2,zero,2944 <__muldf3+0x6c0>
    2920:	8880022c 	andhi	r2,r17,8
    2924:	1000071e 	bne	r2,zero,2944 <__muldf3+0x6c0>
    2928:	00800434 	movhi	r2,16
    292c:	8c000234 	orhi	r16,r17,8
    2930:	10bfffc4 	addi	r2,r2,-1
    2934:	e027883a 	mov	r19,fp
    2938:	80a0703a 	and	r16,r16,r2
    293c:	902d883a 	mov	r22,r18
    2940:	003f1706 	br	25a0 <__alt_data_end+0xfffe25a0>
    2944:	00800434 	movhi	r2,16
    2948:	84000234 	orhi	r16,r16,8
    294c:	10bfffc4 	addi	r2,r2,-1
    2950:	80a0703a 	and	r16,r16,r2
    2954:	003f1206 	br	25a0 <__alt_data_end+0xfffe25a0>
    2958:	147ff604 	addi	r17,r2,-40
    295c:	3462983a 	sll	r17,r6,r17
    2960:	0025883a 	mov	r18,zero
    2964:	003ef306 	br	2534 <__alt_data_end+0xfffe2534>
    2968:	3009883a 	mov	r4,r6
    296c:	d9400215 	stw	r5,8(sp)
    2970:	d9800715 	stw	r6,28(sp)
    2974:	da400415 	stw	r9,16(sp)
    2978:	da800315 	stw	r10,12(sp)
    297c:	00034c80 	call	34c8 <__clzsi2>
    2980:	10800804 	addi	r2,r2,32
    2984:	da800317 	ldw	r10,12(sp)
    2988:	da400417 	ldw	r9,16(sp)
    298c:	d9800717 	ldw	r6,28(sp)
    2990:	d9400217 	ldw	r5,8(sp)
    2994:	003edd06 	br	250c <__alt_data_end+0xfffe250c>
    2998:	143ff604 	addi	r16,r2,-40
    299c:	ac20983a 	sll	r16,r21,r16
    29a0:	002d883a 	mov	r22,zero
    29a4:	003ec106 	br	24ac <__alt_data_end+0xfffe24ac>
    29a8:	d9800715 	stw	r6,28(sp)
    29ac:	d9c00215 	stw	r7,8(sp)
    29b0:	da400415 	stw	r9,16(sp)
    29b4:	00034c80 	call	34c8 <__clzsi2>
    29b8:	10800804 	addi	r2,r2,32
    29bc:	da400417 	ldw	r9,16(sp)
    29c0:	d9c00217 	ldw	r7,8(sp)
    29c4:	d9800717 	ldw	r6,28(sp)
    29c8:	003eae06 	br	2484 <__alt_data_end+0xfffe2484>
    29cc:	00c00044 	movi	r3,1
    29d0:	1887c83a 	sub	r3,r3,r2
    29d4:	01000e04 	movi	r4,56
    29d8:	20fe8516 	blt	r4,r3,23f0 <__alt_data_end+0xfffe23f0>
    29dc:	010007c4 	movi	r4,31
    29e0:	20c01b16 	blt	r4,r3,2a50 <__muldf3+0x7cc>
    29e4:	00800804 	movi	r2,32
    29e8:	10c5c83a 	sub	r2,r2,r3
    29ec:	888a983a 	sll	r5,r17,r2
    29f0:	90c8d83a 	srl	r4,r18,r3
    29f4:	9084983a 	sll	r2,r18,r2
    29f8:	88e2d83a 	srl	r17,r17,r3
    29fc:	2906b03a 	or	r3,r5,r4
    2a00:	1004c03a 	cmpne	r2,r2,zero
    2a04:	1886b03a 	or	r3,r3,r2
    2a08:	188001cc 	andi	r2,r3,7
    2a0c:	10000726 	beq	r2,zero,2a2c <__muldf3+0x7a8>
    2a10:	188003cc 	andi	r2,r3,15
    2a14:	01000104 	movi	r4,4
    2a18:	11000426 	beq	r2,r4,2a2c <__muldf3+0x7a8>
    2a1c:	1805883a 	mov	r2,r3
    2a20:	10c00104 	addi	r3,r2,4
    2a24:	1885803a 	cmpltu	r2,r3,r2
    2a28:	88a3883a 	add	r17,r17,r2
    2a2c:	8880202c 	andhi	r2,r17,128
    2a30:	10001c26 	beq	r2,zero,2aa4 <__muldf3+0x820>
    2a34:	3027883a 	mov	r19,r6
    2a38:	00800044 	movi	r2,1
    2a3c:	0021883a 	mov	r16,zero
    2a40:	002d883a 	mov	r22,zero
    2a44:	003e6e06 	br	2400 <__alt_data_end+0xfffe2400>
    2a48:	4007883a 	mov	r3,r8
    2a4c:	003f9706 	br	28ac <__alt_data_end+0xfffe28ac>
    2a50:	017ff844 	movi	r5,-31
    2a54:	2885c83a 	sub	r2,r5,r2
    2a58:	888ad83a 	srl	r5,r17,r2
    2a5c:	00800804 	movi	r2,32
    2a60:	18801a26 	beq	r3,r2,2acc <__muldf3+0x848>
    2a64:	01001004 	movi	r4,64
    2a68:	20c7c83a 	sub	r3,r4,r3
    2a6c:	88e2983a 	sll	r17,r17,r3
    2a70:	8ca4b03a 	or	r18,r17,r18
    2a74:	9004c03a 	cmpne	r2,r18,zero
    2a78:	2884b03a 	or	r2,r5,r2
    2a7c:	144001cc 	andi	r17,r2,7
    2a80:	88000d1e 	bne	r17,zero,2ab8 <__muldf3+0x834>
    2a84:	0021883a 	mov	r16,zero
    2a88:	102cd0fa 	srli	r22,r2,3
    2a8c:	3027883a 	mov	r19,r6
    2a90:	0005883a 	mov	r2,zero
    2a94:	b46cb03a 	or	r22,r22,r17
    2a98:	003e5906 	br	2400 <__alt_data_end+0xfffe2400>
    2a9c:	1007883a 	mov	r3,r2
    2aa0:	0023883a 	mov	r17,zero
    2aa4:	8820927a 	slli	r16,r17,9
    2aa8:	1805883a 	mov	r2,r3
    2aac:	8822977a 	slli	r17,r17,29
    2ab0:	8020d33a 	srli	r16,r16,12
    2ab4:	003ff406 	br	2a88 <__alt_data_end+0xfffe2a88>
    2ab8:	10c003cc 	andi	r3,r2,15
    2abc:	01000104 	movi	r4,4
    2ac0:	193ff626 	beq	r3,r4,2a9c <__alt_data_end+0xfffe2a9c>
    2ac4:	0023883a 	mov	r17,zero
    2ac8:	003fd506 	br	2a20 <__alt_data_end+0xfffe2a20>
    2acc:	0023883a 	mov	r17,zero
    2ad0:	003fe706 	br	2a70 <__alt_data_end+0xfffe2a70>
    2ad4:	00800434 	movhi	r2,16
    2ad8:	8c000234 	orhi	r16,r17,8
    2adc:	10bfffc4 	addi	r2,r2,-1
    2ae0:	3027883a 	mov	r19,r6
    2ae4:	80a0703a 	and	r16,r16,r2
    2ae8:	902d883a 	mov	r22,r18
    2aec:	003eac06 	br	25a0 <__alt_data_end+0xfffe25a0>

00002af0 <__subdf3>:
    2af0:	02000434 	movhi	r8,16
    2af4:	423fffc4 	addi	r8,r8,-1
    2af8:	defffb04 	addi	sp,sp,-20
    2afc:	2a14703a 	and	r10,r5,r8
    2b00:	3812d53a 	srli	r9,r7,20
    2b04:	3a10703a 	and	r8,r7,r8
    2b08:	2006d77a 	srli	r3,r4,29
    2b0c:	3004d77a 	srli	r2,r6,29
    2b10:	dc000015 	stw	r16,0(sp)
    2b14:	501490fa 	slli	r10,r10,3
    2b18:	2820d53a 	srli	r16,r5,20
    2b1c:	401090fa 	slli	r8,r8,3
    2b20:	dc800215 	stw	r18,8(sp)
    2b24:	dc400115 	stw	r17,4(sp)
    2b28:	dfc00415 	stw	ra,16(sp)
    2b2c:	202290fa 	slli	r17,r4,3
    2b30:	dcc00315 	stw	r19,12(sp)
    2b34:	4a41ffcc 	andi	r9,r9,2047
    2b38:	0101ffc4 	movi	r4,2047
    2b3c:	2824d7fa 	srli	r18,r5,31
    2b40:	8401ffcc 	andi	r16,r16,2047
    2b44:	50c6b03a 	or	r3,r10,r3
    2b48:	380ed7fa 	srli	r7,r7,31
    2b4c:	408ab03a 	or	r5,r8,r2
    2b50:	300c90fa 	slli	r6,r6,3
    2b54:	49009626 	beq	r9,r4,2db0 <__subdf3+0x2c0>
    2b58:	39c0005c 	xori	r7,r7,1
    2b5c:	8245c83a 	sub	r2,r16,r9
    2b60:	3c807426 	beq	r7,r18,2d34 <__subdf3+0x244>
    2b64:	0080af0e 	bge	zero,r2,2e24 <__subdf3+0x334>
    2b68:	48002a1e 	bne	r9,zero,2c14 <__subdf3+0x124>
    2b6c:	2988b03a 	or	r4,r5,r6
    2b70:	20009a1e 	bne	r4,zero,2ddc <__subdf3+0x2ec>
    2b74:	888001cc 	andi	r2,r17,7
    2b78:	10000726 	beq	r2,zero,2b98 <__subdf3+0xa8>
    2b7c:	888003cc 	andi	r2,r17,15
    2b80:	01000104 	movi	r4,4
    2b84:	11000426 	beq	r2,r4,2b98 <__subdf3+0xa8>
    2b88:	890b883a 	add	r5,r17,r4
    2b8c:	2c63803a 	cmpltu	r17,r5,r17
    2b90:	1c47883a 	add	r3,r3,r17
    2b94:	2823883a 	mov	r17,r5
    2b98:	1880202c 	andhi	r2,r3,128
    2b9c:	10005926 	beq	r2,zero,2d04 <__subdf3+0x214>
    2ba0:	84000044 	addi	r16,r16,1
    2ba4:	0081ffc4 	movi	r2,2047
    2ba8:	8080be26 	beq	r16,r2,2ea4 <__subdf3+0x3b4>
    2bac:	017fe034 	movhi	r5,65408
    2bb0:	297fffc4 	addi	r5,r5,-1
    2bb4:	1946703a 	and	r3,r3,r5
    2bb8:	1804977a 	slli	r2,r3,29
    2bbc:	1806927a 	slli	r3,r3,9
    2bc0:	8822d0fa 	srli	r17,r17,3
    2bc4:	8401ffcc 	andi	r16,r16,2047
    2bc8:	180ad33a 	srli	r5,r3,12
    2bcc:	9100004c 	andi	r4,r18,1
    2bd0:	1444b03a 	or	r2,r2,r17
    2bd4:	80c1ffcc 	andi	r3,r16,2047
    2bd8:	1820953a 	slli	r16,r3,20
    2bdc:	20c03fcc 	andi	r3,r4,255
    2be0:	180897fa 	slli	r4,r3,31
    2be4:	00c00434 	movhi	r3,16
    2be8:	18ffffc4 	addi	r3,r3,-1
    2bec:	28c6703a 	and	r3,r5,r3
    2bf0:	1c06b03a 	or	r3,r3,r16
    2bf4:	1906b03a 	or	r3,r3,r4
    2bf8:	dfc00417 	ldw	ra,16(sp)
    2bfc:	dcc00317 	ldw	r19,12(sp)
    2c00:	dc800217 	ldw	r18,8(sp)
    2c04:	dc400117 	ldw	r17,4(sp)
    2c08:	dc000017 	ldw	r16,0(sp)
    2c0c:	dec00504 	addi	sp,sp,20
    2c10:	f800283a 	ret
    2c14:	0101ffc4 	movi	r4,2047
    2c18:	813fd626 	beq	r16,r4,2b74 <__alt_data_end+0xfffe2b74>
    2c1c:	29402034 	orhi	r5,r5,128
    2c20:	01000e04 	movi	r4,56
    2c24:	2080a316 	blt	r4,r2,2eb4 <__subdf3+0x3c4>
    2c28:	010007c4 	movi	r4,31
    2c2c:	2080c616 	blt	r4,r2,2f48 <__subdf3+0x458>
    2c30:	01000804 	movi	r4,32
    2c34:	2089c83a 	sub	r4,r4,r2
    2c38:	2910983a 	sll	r8,r5,r4
    2c3c:	308ed83a 	srl	r7,r6,r2
    2c40:	3108983a 	sll	r4,r6,r4
    2c44:	2884d83a 	srl	r2,r5,r2
    2c48:	41ccb03a 	or	r6,r8,r7
    2c4c:	2008c03a 	cmpne	r4,r4,zero
    2c50:	310cb03a 	or	r6,r6,r4
    2c54:	898dc83a 	sub	r6,r17,r6
    2c58:	89a3803a 	cmpltu	r17,r17,r6
    2c5c:	1887c83a 	sub	r3,r3,r2
    2c60:	1c47c83a 	sub	r3,r3,r17
    2c64:	3023883a 	mov	r17,r6
    2c68:	1880202c 	andhi	r2,r3,128
    2c6c:	10002326 	beq	r2,zero,2cfc <__subdf3+0x20c>
    2c70:	04c02034 	movhi	r19,128
    2c74:	9cffffc4 	addi	r19,r19,-1
    2c78:	1ce6703a 	and	r19,r3,r19
    2c7c:	98007a26 	beq	r19,zero,2e68 <__subdf3+0x378>
    2c80:	9809883a 	mov	r4,r19
    2c84:	00034c80 	call	34c8 <__clzsi2>
    2c88:	113ffe04 	addi	r4,r2,-8
    2c8c:	00c007c4 	movi	r3,31
    2c90:	19007b16 	blt	r3,r4,2e80 <__subdf3+0x390>
    2c94:	00800804 	movi	r2,32
    2c98:	1105c83a 	sub	r2,r2,r4
    2c9c:	8884d83a 	srl	r2,r17,r2
    2ca0:	9906983a 	sll	r3,r19,r4
    2ca4:	8922983a 	sll	r17,r17,r4
    2ca8:	10c4b03a 	or	r2,r2,r3
    2cac:	24007816 	blt	r4,r16,2e90 <__subdf3+0x3a0>
    2cb0:	2421c83a 	sub	r16,r4,r16
    2cb4:	80c00044 	addi	r3,r16,1
    2cb8:	010007c4 	movi	r4,31
    2cbc:	20c09516 	blt	r4,r3,2f14 <__subdf3+0x424>
    2cc0:	01400804 	movi	r5,32
    2cc4:	28cbc83a 	sub	r5,r5,r3
    2cc8:	88c8d83a 	srl	r4,r17,r3
    2ccc:	8962983a 	sll	r17,r17,r5
    2cd0:	114a983a 	sll	r5,r2,r5
    2cd4:	10c6d83a 	srl	r3,r2,r3
    2cd8:	8804c03a 	cmpne	r2,r17,zero
    2cdc:	290ab03a 	or	r5,r5,r4
    2ce0:	28a2b03a 	or	r17,r5,r2
    2ce4:	0021883a 	mov	r16,zero
    2ce8:	003fa206 	br	2b74 <__alt_data_end+0xfffe2b74>
    2cec:	2090b03a 	or	r8,r4,r2
    2cf0:	40018e26 	beq	r8,zero,332c <__subdf3+0x83c>
    2cf4:	1007883a 	mov	r3,r2
    2cf8:	2023883a 	mov	r17,r4
    2cfc:	888001cc 	andi	r2,r17,7
    2d00:	103f9e1e 	bne	r2,zero,2b7c <__alt_data_end+0xfffe2b7c>
    2d04:	1804977a 	slli	r2,r3,29
    2d08:	8822d0fa 	srli	r17,r17,3
    2d0c:	1810d0fa 	srli	r8,r3,3
    2d10:	9100004c 	andi	r4,r18,1
    2d14:	1444b03a 	or	r2,r2,r17
    2d18:	00c1ffc4 	movi	r3,2047
    2d1c:	80c02826 	beq	r16,r3,2dc0 <__subdf3+0x2d0>
    2d20:	01400434 	movhi	r5,16
    2d24:	297fffc4 	addi	r5,r5,-1
    2d28:	80e0703a 	and	r16,r16,r3
    2d2c:	414a703a 	and	r5,r8,r5
    2d30:	003fa806 	br	2bd4 <__alt_data_end+0xfffe2bd4>
    2d34:	0080630e 	bge	zero,r2,2ec4 <__subdf3+0x3d4>
    2d38:	48003026 	beq	r9,zero,2dfc <__subdf3+0x30c>
    2d3c:	0101ffc4 	movi	r4,2047
    2d40:	813f8c26 	beq	r16,r4,2b74 <__alt_data_end+0xfffe2b74>
    2d44:	29402034 	orhi	r5,r5,128
    2d48:	01000e04 	movi	r4,56
    2d4c:	2080a90e 	bge	r4,r2,2ff4 <__subdf3+0x504>
    2d50:	298cb03a 	or	r6,r5,r6
    2d54:	3012c03a 	cmpne	r9,r6,zero
    2d58:	0005883a 	mov	r2,zero
    2d5c:	4c53883a 	add	r9,r9,r17
    2d60:	4c63803a 	cmpltu	r17,r9,r17
    2d64:	10c7883a 	add	r3,r2,r3
    2d68:	88c7883a 	add	r3,r17,r3
    2d6c:	4823883a 	mov	r17,r9
    2d70:	1880202c 	andhi	r2,r3,128
    2d74:	1000d026 	beq	r2,zero,30b8 <__subdf3+0x5c8>
    2d78:	84000044 	addi	r16,r16,1
    2d7c:	0081ffc4 	movi	r2,2047
    2d80:	8080fe26 	beq	r16,r2,317c <__subdf3+0x68c>
    2d84:	00bfe034 	movhi	r2,65408
    2d88:	10bfffc4 	addi	r2,r2,-1
    2d8c:	1886703a 	and	r3,r3,r2
    2d90:	880ad07a 	srli	r5,r17,1
    2d94:	180497fa 	slli	r2,r3,31
    2d98:	8900004c 	andi	r4,r17,1
    2d9c:	2922b03a 	or	r17,r5,r4
    2da0:	1806d07a 	srli	r3,r3,1
    2da4:	1462b03a 	or	r17,r2,r17
    2da8:	3825883a 	mov	r18,r7
    2dac:	003f7106 	br	2b74 <__alt_data_end+0xfffe2b74>
    2db0:	2984b03a 	or	r2,r5,r6
    2db4:	103f6826 	beq	r2,zero,2b58 <__alt_data_end+0xfffe2b58>
    2db8:	39c03fcc 	andi	r7,r7,255
    2dbc:	003f6706 	br	2b5c <__alt_data_end+0xfffe2b5c>
    2dc0:	4086b03a 	or	r3,r8,r2
    2dc4:	18015226 	beq	r3,zero,3310 <__subdf3+0x820>
    2dc8:	00c00434 	movhi	r3,16
    2dcc:	41400234 	orhi	r5,r8,8
    2dd0:	18ffffc4 	addi	r3,r3,-1
    2dd4:	28ca703a 	and	r5,r5,r3
    2dd8:	003f7e06 	br	2bd4 <__alt_data_end+0xfffe2bd4>
    2ddc:	10bfffc4 	addi	r2,r2,-1
    2de0:	1000491e 	bne	r2,zero,2f08 <__subdf3+0x418>
    2de4:	898fc83a 	sub	r7,r17,r6
    2de8:	89e3803a 	cmpltu	r17,r17,r7
    2dec:	1947c83a 	sub	r3,r3,r5
    2df0:	1c47c83a 	sub	r3,r3,r17
    2df4:	3823883a 	mov	r17,r7
    2df8:	003f9b06 	br	2c68 <__alt_data_end+0xfffe2c68>
    2dfc:	2988b03a 	or	r4,r5,r6
    2e00:	203f5c26 	beq	r4,zero,2b74 <__alt_data_end+0xfffe2b74>
    2e04:	10bfffc4 	addi	r2,r2,-1
    2e08:	1000931e 	bne	r2,zero,3058 <__subdf3+0x568>
    2e0c:	898d883a 	add	r6,r17,r6
    2e10:	3463803a 	cmpltu	r17,r6,r17
    2e14:	1947883a 	add	r3,r3,r5
    2e18:	88c7883a 	add	r3,r17,r3
    2e1c:	3023883a 	mov	r17,r6
    2e20:	003fd306 	br	2d70 <__alt_data_end+0xfffe2d70>
    2e24:	1000541e 	bne	r2,zero,2f78 <__subdf3+0x488>
    2e28:	80800044 	addi	r2,r16,1
    2e2c:	1081ffcc 	andi	r2,r2,2047
    2e30:	01000044 	movi	r4,1
    2e34:	2080a20e 	bge	r4,r2,30c0 <__subdf3+0x5d0>
    2e38:	8989c83a 	sub	r4,r17,r6
    2e3c:	8905803a 	cmpltu	r2,r17,r4
    2e40:	1967c83a 	sub	r19,r3,r5
    2e44:	98a7c83a 	sub	r19,r19,r2
    2e48:	9880202c 	andhi	r2,r19,128
    2e4c:	10006326 	beq	r2,zero,2fdc <__subdf3+0x4ec>
    2e50:	3463c83a 	sub	r17,r6,r17
    2e54:	28c7c83a 	sub	r3,r5,r3
    2e58:	344d803a 	cmpltu	r6,r6,r17
    2e5c:	19a7c83a 	sub	r19,r3,r6
    2e60:	3825883a 	mov	r18,r7
    2e64:	983f861e 	bne	r19,zero,2c80 <__alt_data_end+0xfffe2c80>
    2e68:	8809883a 	mov	r4,r17
    2e6c:	00034c80 	call	34c8 <__clzsi2>
    2e70:	10800804 	addi	r2,r2,32
    2e74:	113ffe04 	addi	r4,r2,-8
    2e78:	00c007c4 	movi	r3,31
    2e7c:	193f850e 	bge	r3,r4,2c94 <__alt_data_end+0xfffe2c94>
    2e80:	10bff604 	addi	r2,r2,-40
    2e84:	8884983a 	sll	r2,r17,r2
    2e88:	0023883a 	mov	r17,zero
    2e8c:	243f880e 	bge	r4,r16,2cb0 <__alt_data_end+0xfffe2cb0>
    2e90:	00ffe034 	movhi	r3,65408
    2e94:	18ffffc4 	addi	r3,r3,-1
    2e98:	8121c83a 	sub	r16,r16,r4
    2e9c:	10c6703a 	and	r3,r2,r3
    2ea0:	003f3406 	br	2b74 <__alt_data_end+0xfffe2b74>
    2ea4:	9100004c 	andi	r4,r18,1
    2ea8:	000b883a 	mov	r5,zero
    2eac:	0005883a 	mov	r2,zero
    2eb0:	003f4806 	br	2bd4 <__alt_data_end+0xfffe2bd4>
    2eb4:	298cb03a 	or	r6,r5,r6
    2eb8:	300cc03a 	cmpne	r6,r6,zero
    2ebc:	0005883a 	mov	r2,zero
    2ec0:	003f6406 	br	2c54 <__alt_data_end+0xfffe2c54>
    2ec4:	10009a1e 	bne	r2,zero,3130 <__subdf3+0x640>
    2ec8:	82400044 	addi	r9,r16,1
    2ecc:	4881ffcc 	andi	r2,r9,2047
    2ed0:	02800044 	movi	r10,1
    2ed4:	5080670e 	bge	r10,r2,3074 <__subdf3+0x584>
    2ed8:	0081ffc4 	movi	r2,2047
    2edc:	4880af26 	beq	r9,r2,319c <__subdf3+0x6ac>
    2ee0:	898d883a 	add	r6,r17,r6
    2ee4:	1945883a 	add	r2,r3,r5
    2ee8:	3447803a 	cmpltu	r3,r6,r17
    2eec:	1887883a 	add	r3,r3,r2
    2ef0:	182297fa 	slli	r17,r3,31
    2ef4:	300cd07a 	srli	r6,r6,1
    2ef8:	1806d07a 	srli	r3,r3,1
    2efc:	4821883a 	mov	r16,r9
    2f00:	89a2b03a 	or	r17,r17,r6
    2f04:	003f1b06 	br	2b74 <__alt_data_end+0xfffe2b74>
    2f08:	0101ffc4 	movi	r4,2047
    2f0c:	813f441e 	bne	r16,r4,2c20 <__alt_data_end+0xfffe2c20>
    2f10:	003f1806 	br	2b74 <__alt_data_end+0xfffe2b74>
    2f14:	843ff844 	addi	r16,r16,-31
    2f18:	01400804 	movi	r5,32
    2f1c:	1408d83a 	srl	r4,r2,r16
    2f20:	19405026 	beq	r3,r5,3064 <__subdf3+0x574>
    2f24:	01401004 	movi	r5,64
    2f28:	28c7c83a 	sub	r3,r5,r3
    2f2c:	10c4983a 	sll	r2,r2,r3
    2f30:	88a2b03a 	or	r17,r17,r2
    2f34:	8822c03a 	cmpne	r17,r17,zero
    2f38:	2462b03a 	or	r17,r4,r17
    2f3c:	0007883a 	mov	r3,zero
    2f40:	0021883a 	mov	r16,zero
    2f44:	003f6d06 	br	2cfc <__alt_data_end+0xfffe2cfc>
    2f48:	11fff804 	addi	r7,r2,-32
    2f4c:	01000804 	movi	r4,32
    2f50:	29ced83a 	srl	r7,r5,r7
    2f54:	11004526 	beq	r2,r4,306c <__subdf3+0x57c>
    2f58:	01001004 	movi	r4,64
    2f5c:	2089c83a 	sub	r4,r4,r2
    2f60:	2904983a 	sll	r2,r5,r4
    2f64:	118cb03a 	or	r6,r2,r6
    2f68:	300cc03a 	cmpne	r6,r6,zero
    2f6c:	398cb03a 	or	r6,r7,r6
    2f70:	0005883a 	mov	r2,zero
    2f74:	003f3706 	br	2c54 <__alt_data_end+0xfffe2c54>
    2f78:	80002a26 	beq	r16,zero,3024 <__subdf3+0x534>
    2f7c:	0101ffc4 	movi	r4,2047
    2f80:	49006626 	beq	r9,r4,311c <__subdf3+0x62c>
    2f84:	0085c83a 	sub	r2,zero,r2
    2f88:	18c02034 	orhi	r3,r3,128
    2f8c:	01000e04 	movi	r4,56
    2f90:	20807e16 	blt	r4,r2,318c <__subdf3+0x69c>
    2f94:	010007c4 	movi	r4,31
    2f98:	2080e716 	blt	r4,r2,3338 <__subdf3+0x848>
    2f9c:	01000804 	movi	r4,32
    2fa0:	2089c83a 	sub	r4,r4,r2
    2fa4:	1914983a 	sll	r10,r3,r4
    2fa8:	8890d83a 	srl	r8,r17,r2
    2fac:	8908983a 	sll	r4,r17,r4
    2fb0:	1884d83a 	srl	r2,r3,r2
    2fb4:	5222b03a 	or	r17,r10,r8
    2fb8:	2006c03a 	cmpne	r3,r4,zero
    2fbc:	88e2b03a 	or	r17,r17,r3
    2fc0:	3463c83a 	sub	r17,r6,r17
    2fc4:	2885c83a 	sub	r2,r5,r2
    2fc8:	344d803a 	cmpltu	r6,r6,r17
    2fcc:	1187c83a 	sub	r3,r2,r6
    2fd0:	4821883a 	mov	r16,r9
    2fd4:	3825883a 	mov	r18,r7
    2fd8:	003f2306 	br	2c68 <__alt_data_end+0xfffe2c68>
    2fdc:	24d0b03a 	or	r8,r4,r19
    2fe0:	40001b1e 	bne	r8,zero,3050 <__subdf3+0x560>
    2fe4:	0005883a 	mov	r2,zero
    2fe8:	0009883a 	mov	r4,zero
    2fec:	0021883a 	mov	r16,zero
    2ff0:	003f4906 	br	2d18 <__alt_data_end+0xfffe2d18>
    2ff4:	010007c4 	movi	r4,31
    2ff8:	20803a16 	blt	r4,r2,30e4 <__subdf3+0x5f4>
    2ffc:	01000804 	movi	r4,32
    3000:	2089c83a 	sub	r4,r4,r2
    3004:	2912983a 	sll	r9,r5,r4
    3008:	3090d83a 	srl	r8,r6,r2
    300c:	3108983a 	sll	r4,r6,r4
    3010:	2884d83a 	srl	r2,r5,r2
    3014:	4a12b03a 	or	r9,r9,r8
    3018:	2008c03a 	cmpne	r4,r4,zero
    301c:	4912b03a 	or	r9,r9,r4
    3020:	003f4e06 	br	2d5c <__alt_data_end+0xfffe2d5c>
    3024:	1c48b03a 	or	r4,r3,r17
    3028:	20003c26 	beq	r4,zero,311c <__subdf3+0x62c>
    302c:	0084303a 	nor	r2,zero,r2
    3030:	1000381e 	bne	r2,zero,3114 <__subdf3+0x624>
    3034:	3463c83a 	sub	r17,r6,r17
    3038:	28c5c83a 	sub	r2,r5,r3
    303c:	344d803a 	cmpltu	r6,r6,r17
    3040:	1187c83a 	sub	r3,r2,r6
    3044:	4821883a 	mov	r16,r9
    3048:	3825883a 	mov	r18,r7
    304c:	003f0606 	br	2c68 <__alt_data_end+0xfffe2c68>
    3050:	2023883a 	mov	r17,r4
    3054:	003f0906 	br	2c7c <__alt_data_end+0xfffe2c7c>
    3058:	0101ffc4 	movi	r4,2047
    305c:	813f3a1e 	bne	r16,r4,2d48 <__alt_data_end+0xfffe2d48>
    3060:	003ec406 	br	2b74 <__alt_data_end+0xfffe2b74>
    3064:	0005883a 	mov	r2,zero
    3068:	003fb106 	br	2f30 <__alt_data_end+0xfffe2f30>
    306c:	0005883a 	mov	r2,zero
    3070:	003fbc06 	br	2f64 <__alt_data_end+0xfffe2f64>
    3074:	1c44b03a 	or	r2,r3,r17
    3078:	80008e1e 	bne	r16,zero,32b4 <__subdf3+0x7c4>
    307c:	1000c826 	beq	r2,zero,33a0 <__subdf3+0x8b0>
    3080:	2984b03a 	or	r2,r5,r6
    3084:	103ebb26 	beq	r2,zero,2b74 <__alt_data_end+0xfffe2b74>
    3088:	8989883a 	add	r4,r17,r6
    308c:	1945883a 	add	r2,r3,r5
    3090:	2447803a 	cmpltu	r3,r4,r17
    3094:	1887883a 	add	r3,r3,r2
    3098:	1880202c 	andhi	r2,r3,128
    309c:	2023883a 	mov	r17,r4
    30a0:	103f1626 	beq	r2,zero,2cfc <__alt_data_end+0xfffe2cfc>
    30a4:	00bfe034 	movhi	r2,65408
    30a8:	10bfffc4 	addi	r2,r2,-1
    30ac:	5021883a 	mov	r16,r10
    30b0:	1886703a 	and	r3,r3,r2
    30b4:	003eaf06 	br	2b74 <__alt_data_end+0xfffe2b74>
    30b8:	3825883a 	mov	r18,r7
    30bc:	003f0f06 	br	2cfc <__alt_data_end+0xfffe2cfc>
    30c0:	1c44b03a 	or	r2,r3,r17
    30c4:	8000251e 	bne	r16,zero,315c <__subdf3+0x66c>
    30c8:	1000661e 	bne	r2,zero,3264 <__subdf3+0x774>
    30cc:	2990b03a 	or	r8,r5,r6
    30d0:	40009626 	beq	r8,zero,332c <__subdf3+0x83c>
    30d4:	2807883a 	mov	r3,r5
    30d8:	3023883a 	mov	r17,r6
    30dc:	3825883a 	mov	r18,r7
    30e0:	003ea406 	br	2b74 <__alt_data_end+0xfffe2b74>
    30e4:	127ff804 	addi	r9,r2,-32
    30e8:	01000804 	movi	r4,32
    30ec:	2a52d83a 	srl	r9,r5,r9
    30f0:	11008c26 	beq	r2,r4,3324 <__subdf3+0x834>
    30f4:	01001004 	movi	r4,64
    30f8:	2085c83a 	sub	r2,r4,r2
    30fc:	2884983a 	sll	r2,r5,r2
    3100:	118cb03a 	or	r6,r2,r6
    3104:	300cc03a 	cmpne	r6,r6,zero
    3108:	4992b03a 	or	r9,r9,r6
    310c:	0005883a 	mov	r2,zero
    3110:	003f1206 	br	2d5c <__alt_data_end+0xfffe2d5c>
    3114:	0101ffc4 	movi	r4,2047
    3118:	493f9c1e 	bne	r9,r4,2f8c <__alt_data_end+0xfffe2f8c>
    311c:	2807883a 	mov	r3,r5
    3120:	3023883a 	mov	r17,r6
    3124:	4821883a 	mov	r16,r9
    3128:	3825883a 	mov	r18,r7
    312c:	003e9106 	br	2b74 <__alt_data_end+0xfffe2b74>
    3130:	80001f1e 	bne	r16,zero,31b0 <__subdf3+0x6c0>
    3134:	1c48b03a 	or	r4,r3,r17
    3138:	20005a26 	beq	r4,zero,32a4 <__subdf3+0x7b4>
    313c:	0084303a 	nor	r2,zero,r2
    3140:	1000561e 	bne	r2,zero,329c <__subdf3+0x7ac>
    3144:	89a3883a 	add	r17,r17,r6
    3148:	1945883a 	add	r2,r3,r5
    314c:	898d803a 	cmpltu	r6,r17,r6
    3150:	3087883a 	add	r3,r6,r2
    3154:	4821883a 	mov	r16,r9
    3158:	003f0506 	br	2d70 <__alt_data_end+0xfffe2d70>
    315c:	10002b1e 	bne	r2,zero,320c <__subdf3+0x71c>
    3160:	2984b03a 	or	r2,r5,r6
    3164:	10008026 	beq	r2,zero,3368 <__subdf3+0x878>
    3168:	2807883a 	mov	r3,r5
    316c:	3023883a 	mov	r17,r6
    3170:	3825883a 	mov	r18,r7
    3174:	0401ffc4 	movi	r16,2047
    3178:	003e7e06 	br	2b74 <__alt_data_end+0xfffe2b74>
    317c:	3809883a 	mov	r4,r7
    3180:	0011883a 	mov	r8,zero
    3184:	0005883a 	mov	r2,zero
    3188:	003ee306 	br	2d18 <__alt_data_end+0xfffe2d18>
    318c:	1c62b03a 	or	r17,r3,r17
    3190:	8822c03a 	cmpne	r17,r17,zero
    3194:	0005883a 	mov	r2,zero
    3198:	003f8906 	br	2fc0 <__alt_data_end+0xfffe2fc0>
    319c:	3809883a 	mov	r4,r7
    31a0:	4821883a 	mov	r16,r9
    31a4:	0011883a 	mov	r8,zero
    31a8:	0005883a 	mov	r2,zero
    31ac:	003eda06 	br	2d18 <__alt_data_end+0xfffe2d18>
    31b0:	0101ffc4 	movi	r4,2047
    31b4:	49003b26 	beq	r9,r4,32a4 <__subdf3+0x7b4>
    31b8:	0085c83a 	sub	r2,zero,r2
    31bc:	18c02034 	orhi	r3,r3,128
    31c0:	01000e04 	movi	r4,56
    31c4:	20806e16 	blt	r4,r2,3380 <__subdf3+0x890>
    31c8:	010007c4 	movi	r4,31
    31cc:	20807716 	blt	r4,r2,33ac <__subdf3+0x8bc>
    31d0:	01000804 	movi	r4,32
    31d4:	2089c83a 	sub	r4,r4,r2
    31d8:	1914983a 	sll	r10,r3,r4
    31dc:	8890d83a 	srl	r8,r17,r2
    31e0:	8908983a 	sll	r4,r17,r4
    31e4:	1884d83a 	srl	r2,r3,r2
    31e8:	5222b03a 	or	r17,r10,r8
    31ec:	2006c03a 	cmpne	r3,r4,zero
    31f0:	88e2b03a 	or	r17,r17,r3
    31f4:	89a3883a 	add	r17,r17,r6
    31f8:	1145883a 	add	r2,r2,r5
    31fc:	898d803a 	cmpltu	r6,r17,r6
    3200:	3087883a 	add	r3,r6,r2
    3204:	4821883a 	mov	r16,r9
    3208:	003ed906 	br	2d70 <__alt_data_end+0xfffe2d70>
    320c:	2984b03a 	or	r2,r5,r6
    3210:	10004226 	beq	r2,zero,331c <__subdf3+0x82c>
    3214:	1808d0fa 	srli	r4,r3,3
    3218:	8822d0fa 	srli	r17,r17,3
    321c:	1806977a 	slli	r3,r3,29
    3220:	2080022c 	andhi	r2,r4,8
    3224:	1c62b03a 	or	r17,r3,r17
    3228:	10000826 	beq	r2,zero,324c <__subdf3+0x75c>
    322c:	2812d0fa 	srli	r9,r5,3
    3230:	4880022c 	andhi	r2,r9,8
    3234:	1000051e 	bne	r2,zero,324c <__subdf3+0x75c>
    3238:	300cd0fa 	srli	r6,r6,3
    323c:	2804977a 	slli	r2,r5,29
    3240:	4809883a 	mov	r4,r9
    3244:	3825883a 	mov	r18,r7
    3248:	11a2b03a 	or	r17,r2,r6
    324c:	8806d77a 	srli	r3,r17,29
    3250:	200890fa 	slli	r4,r4,3
    3254:	882290fa 	slli	r17,r17,3
    3258:	0401ffc4 	movi	r16,2047
    325c:	1906b03a 	or	r3,r3,r4
    3260:	003e4406 	br	2b74 <__alt_data_end+0xfffe2b74>
    3264:	2984b03a 	or	r2,r5,r6
    3268:	103e4226 	beq	r2,zero,2b74 <__alt_data_end+0xfffe2b74>
    326c:	8989c83a 	sub	r4,r17,r6
    3270:	8911803a 	cmpltu	r8,r17,r4
    3274:	1945c83a 	sub	r2,r3,r5
    3278:	1205c83a 	sub	r2,r2,r8
    327c:	1200202c 	andhi	r8,r2,128
    3280:	403e9a26 	beq	r8,zero,2cec <__alt_data_end+0xfffe2cec>
    3284:	3463c83a 	sub	r17,r6,r17
    3288:	28c5c83a 	sub	r2,r5,r3
    328c:	344d803a 	cmpltu	r6,r6,r17
    3290:	1187c83a 	sub	r3,r2,r6
    3294:	3825883a 	mov	r18,r7
    3298:	003e3606 	br	2b74 <__alt_data_end+0xfffe2b74>
    329c:	0101ffc4 	movi	r4,2047
    32a0:	493fc71e 	bne	r9,r4,31c0 <__alt_data_end+0xfffe31c0>
    32a4:	2807883a 	mov	r3,r5
    32a8:	3023883a 	mov	r17,r6
    32ac:	4821883a 	mov	r16,r9
    32b0:	003e3006 	br	2b74 <__alt_data_end+0xfffe2b74>
    32b4:	10003626 	beq	r2,zero,3390 <__subdf3+0x8a0>
    32b8:	2984b03a 	or	r2,r5,r6
    32bc:	10001726 	beq	r2,zero,331c <__subdf3+0x82c>
    32c0:	1808d0fa 	srli	r4,r3,3
    32c4:	8822d0fa 	srli	r17,r17,3
    32c8:	1806977a 	slli	r3,r3,29
    32cc:	2080022c 	andhi	r2,r4,8
    32d0:	1c62b03a 	or	r17,r3,r17
    32d4:	10000726 	beq	r2,zero,32f4 <__subdf3+0x804>
    32d8:	2812d0fa 	srli	r9,r5,3
    32dc:	4880022c 	andhi	r2,r9,8
    32e0:	1000041e 	bne	r2,zero,32f4 <__subdf3+0x804>
    32e4:	300cd0fa 	srli	r6,r6,3
    32e8:	2804977a 	slli	r2,r5,29
    32ec:	4809883a 	mov	r4,r9
    32f0:	11a2b03a 	or	r17,r2,r6
    32f4:	8806d77a 	srli	r3,r17,29
    32f8:	200890fa 	slli	r4,r4,3
    32fc:	882290fa 	slli	r17,r17,3
    3300:	3825883a 	mov	r18,r7
    3304:	1906b03a 	or	r3,r3,r4
    3308:	0401ffc4 	movi	r16,2047
    330c:	003e1906 	br	2b74 <__alt_data_end+0xfffe2b74>
    3310:	000b883a 	mov	r5,zero
    3314:	0005883a 	mov	r2,zero
    3318:	003e2e06 	br	2bd4 <__alt_data_end+0xfffe2bd4>
    331c:	0401ffc4 	movi	r16,2047
    3320:	003e1406 	br	2b74 <__alt_data_end+0xfffe2b74>
    3324:	0005883a 	mov	r2,zero
    3328:	003f7506 	br	3100 <__alt_data_end+0xfffe3100>
    332c:	0005883a 	mov	r2,zero
    3330:	0009883a 	mov	r4,zero
    3334:	003e7806 	br	2d18 <__alt_data_end+0xfffe2d18>
    3338:	123ff804 	addi	r8,r2,-32
    333c:	01000804 	movi	r4,32
    3340:	1a10d83a 	srl	r8,r3,r8
    3344:	11002526 	beq	r2,r4,33dc <__subdf3+0x8ec>
    3348:	01001004 	movi	r4,64
    334c:	2085c83a 	sub	r2,r4,r2
    3350:	1884983a 	sll	r2,r3,r2
    3354:	1444b03a 	or	r2,r2,r17
    3358:	1004c03a 	cmpne	r2,r2,zero
    335c:	40a2b03a 	or	r17,r8,r2
    3360:	0005883a 	mov	r2,zero
    3364:	003f1606 	br	2fc0 <__alt_data_end+0xfffe2fc0>
    3368:	02000434 	movhi	r8,16
    336c:	0009883a 	mov	r4,zero
    3370:	423fffc4 	addi	r8,r8,-1
    3374:	00bfffc4 	movi	r2,-1
    3378:	0401ffc4 	movi	r16,2047
    337c:	003e6606 	br	2d18 <__alt_data_end+0xfffe2d18>
    3380:	1c62b03a 	or	r17,r3,r17
    3384:	8822c03a 	cmpne	r17,r17,zero
    3388:	0005883a 	mov	r2,zero
    338c:	003f9906 	br	31f4 <__alt_data_end+0xfffe31f4>
    3390:	2807883a 	mov	r3,r5
    3394:	3023883a 	mov	r17,r6
    3398:	0401ffc4 	movi	r16,2047
    339c:	003df506 	br	2b74 <__alt_data_end+0xfffe2b74>
    33a0:	2807883a 	mov	r3,r5
    33a4:	3023883a 	mov	r17,r6
    33a8:	003df206 	br	2b74 <__alt_data_end+0xfffe2b74>
    33ac:	123ff804 	addi	r8,r2,-32
    33b0:	01000804 	movi	r4,32
    33b4:	1a10d83a 	srl	r8,r3,r8
    33b8:	11000a26 	beq	r2,r4,33e4 <__subdf3+0x8f4>
    33bc:	01001004 	movi	r4,64
    33c0:	2085c83a 	sub	r2,r4,r2
    33c4:	1884983a 	sll	r2,r3,r2
    33c8:	1444b03a 	or	r2,r2,r17
    33cc:	1004c03a 	cmpne	r2,r2,zero
    33d0:	40a2b03a 	or	r17,r8,r2
    33d4:	0005883a 	mov	r2,zero
    33d8:	003f8606 	br	31f4 <__alt_data_end+0xfffe31f4>
    33dc:	0005883a 	mov	r2,zero
    33e0:	003fdc06 	br	3354 <__alt_data_end+0xfffe3354>
    33e4:	0005883a 	mov	r2,zero
    33e8:	003ff706 	br	33c8 <__alt_data_end+0xfffe33c8>

000033ec <__floatsidf>:
    33ec:	defffd04 	addi	sp,sp,-12
    33f0:	dfc00215 	stw	ra,8(sp)
    33f4:	dc400115 	stw	r17,4(sp)
    33f8:	dc000015 	stw	r16,0(sp)
    33fc:	20002b26 	beq	r4,zero,34ac <__floatsidf+0xc0>
    3400:	2023883a 	mov	r17,r4
    3404:	2020d7fa 	srli	r16,r4,31
    3408:	20002d16 	blt	r4,zero,34c0 <__floatsidf+0xd4>
    340c:	8809883a 	mov	r4,r17
    3410:	00034c80 	call	34c8 <__clzsi2>
    3414:	01410784 	movi	r5,1054
    3418:	288bc83a 	sub	r5,r5,r2
    341c:	01010cc4 	movi	r4,1075
    3420:	2149c83a 	sub	r4,r4,r5
    3424:	00c007c4 	movi	r3,31
    3428:	1900160e 	bge	r3,r4,3484 <__floatsidf+0x98>
    342c:	00c104c4 	movi	r3,1043
    3430:	1947c83a 	sub	r3,r3,r5
    3434:	88c6983a 	sll	r3,r17,r3
    3438:	00800434 	movhi	r2,16
    343c:	10bfffc4 	addi	r2,r2,-1
    3440:	1886703a 	and	r3,r3,r2
    3444:	2941ffcc 	andi	r5,r5,2047
    3448:	800d883a 	mov	r6,r16
    344c:	0005883a 	mov	r2,zero
    3450:	280a953a 	slli	r5,r5,20
    3454:	31803fcc 	andi	r6,r6,255
    3458:	01000434 	movhi	r4,16
    345c:	300c97fa 	slli	r6,r6,31
    3460:	213fffc4 	addi	r4,r4,-1
    3464:	1906703a 	and	r3,r3,r4
    3468:	1946b03a 	or	r3,r3,r5
    346c:	1986b03a 	or	r3,r3,r6
    3470:	dfc00217 	ldw	ra,8(sp)
    3474:	dc400117 	ldw	r17,4(sp)
    3478:	dc000017 	ldw	r16,0(sp)
    347c:	dec00304 	addi	sp,sp,12
    3480:	f800283a 	ret
    3484:	00c002c4 	movi	r3,11
    3488:	1887c83a 	sub	r3,r3,r2
    348c:	88c6d83a 	srl	r3,r17,r3
    3490:	8904983a 	sll	r2,r17,r4
    3494:	01000434 	movhi	r4,16
    3498:	213fffc4 	addi	r4,r4,-1
    349c:	2941ffcc 	andi	r5,r5,2047
    34a0:	1906703a 	and	r3,r3,r4
    34a4:	800d883a 	mov	r6,r16
    34a8:	003fe906 	br	3450 <__alt_data_end+0xfffe3450>
    34ac:	000d883a 	mov	r6,zero
    34b0:	000b883a 	mov	r5,zero
    34b4:	0007883a 	mov	r3,zero
    34b8:	0005883a 	mov	r2,zero
    34bc:	003fe406 	br	3450 <__alt_data_end+0xfffe3450>
    34c0:	0123c83a 	sub	r17,zero,r4
    34c4:	003fd106 	br	340c <__alt_data_end+0xfffe340c>

000034c8 <__clzsi2>:
    34c8:	00bfffd4 	movui	r2,65535
    34cc:	11000536 	bltu	r2,r4,34e4 <__clzsi2+0x1c>
    34d0:	00803fc4 	movi	r2,255
    34d4:	11000f36 	bltu	r2,r4,3514 <__clzsi2+0x4c>
    34d8:	00800804 	movi	r2,32
    34dc:	0007883a 	mov	r3,zero
    34e0:	00000506 	br	34f8 <__clzsi2+0x30>
    34e4:	00804034 	movhi	r2,256
    34e8:	10bfffc4 	addi	r2,r2,-1
    34ec:	11000c2e 	bgeu	r2,r4,3520 <__clzsi2+0x58>
    34f0:	00800204 	movi	r2,8
    34f4:	00c00604 	movi	r3,24
    34f8:	20c8d83a 	srl	r4,r4,r3
    34fc:	00c00074 	movhi	r3,1
    3500:	18c478c4 	addi	r3,r3,4579
    3504:	1909883a 	add	r4,r3,r4
    3508:	20c00003 	ldbu	r3,0(r4)
    350c:	10c5c83a 	sub	r2,r2,r3
    3510:	f800283a 	ret
    3514:	00800604 	movi	r2,24
    3518:	00c00204 	movi	r3,8
    351c:	003ff606 	br	34f8 <__alt_data_end+0xfffe34f8>
    3520:	00800404 	movi	r2,16
    3524:	1007883a 	mov	r3,r2
    3528:	003ff306 	br	34f8 <__alt_data_end+0xfffe34f8>

0000352c <__divsi3>:
    352c:	20001b16 	blt	r4,zero,359c <__divsi3+0x70>
    3530:	000f883a 	mov	r7,zero
    3534:	28001616 	blt	r5,zero,3590 <__divsi3+0x64>
    3538:	200d883a 	mov	r6,r4
    353c:	29001a2e 	bgeu	r5,r4,35a8 <__divsi3+0x7c>
    3540:	00800804 	movi	r2,32
    3544:	00c00044 	movi	r3,1
    3548:	00000106 	br	3550 <__divsi3+0x24>
    354c:	10000d26 	beq	r2,zero,3584 <__divsi3+0x58>
    3550:	294b883a 	add	r5,r5,r5
    3554:	10bfffc4 	addi	r2,r2,-1
    3558:	18c7883a 	add	r3,r3,r3
    355c:	293ffb36 	bltu	r5,r4,354c <__alt_data_end+0xfffe354c>
    3560:	0005883a 	mov	r2,zero
    3564:	18000726 	beq	r3,zero,3584 <__divsi3+0x58>
    3568:	0005883a 	mov	r2,zero
    356c:	31400236 	bltu	r6,r5,3578 <__divsi3+0x4c>
    3570:	314dc83a 	sub	r6,r6,r5
    3574:	10c4b03a 	or	r2,r2,r3
    3578:	1806d07a 	srli	r3,r3,1
    357c:	280ad07a 	srli	r5,r5,1
    3580:	183ffa1e 	bne	r3,zero,356c <__alt_data_end+0xfffe356c>
    3584:	38000126 	beq	r7,zero,358c <__divsi3+0x60>
    3588:	0085c83a 	sub	r2,zero,r2
    358c:	f800283a 	ret
    3590:	014bc83a 	sub	r5,zero,r5
    3594:	39c0005c 	xori	r7,r7,1
    3598:	003fe706 	br	3538 <__alt_data_end+0xfffe3538>
    359c:	0109c83a 	sub	r4,zero,r4
    35a0:	01c00044 	movi	r7,1
    35a4:	003fe306 	br	3534 <__alt_data_end+0xfffe3534>
    35a8:	00c00044 	movi	r3,1
    35ac:	003fee06 	br	3568 <__alt_data_end+0xfffe3568>

000035b0 <__modsi3>:
    35b0:	20001716 	blt	r4,zero,3610 <__modsi3+0x60>
    35b4:	000f883a 	mov	r7,zero
    35b8:	2005883a 	mov	r2,r4
    35bc:	28001216 	blt	r5,zero,3608 <__modsi3+0x58>
    35c0:	2900162e 	bgeu	r5,r4,361c <__modsi3+0x6c>
    35c4:	01800804 	movi	r6,32
    35c8:	00c00044 	movi	r3,1
    35cc:	00000106 	br	35d4 <__modsi3+0x24>
    35d0:	30000a26 	beq	r6,zero,35fc <__modsi3+0x4c>
    35d4:	294b883a 	add	r5,r5,r5
    35d8:	31bfffc4 	addi	r6,r6,-1
    35dc:	18c7883a 	add	r3,r3,r3
    35e0:	293ffb36 	bltu	r5,r4,35d0 <__alt_data_end+0xfffe35d0>
    35e4:	18000526 	beq	r3,zero,35fc <__modsi3+0x4c>
    35e8:	1806d07a 	srli	r3,r3,1
    35ec:	11400136 	bltu	r2,r5,35f4 <__modsi3+0x44>
    35f0:	1145c83a 	sub	r2,r2,r5
    35f4:	280ad07a 	srli	r5,r5,1
    35f8:	183ffb1e 	bne	r3,zero,35e8 <__alt_data_end+0xfffe35e8>
    35fc:	38000126 	beq	r7,zero,3604 <__modsi3+0x54>
    3600:	0085c83a 	sub	r2,zero,r2
    3604:	f800283a 	ret
    3608:	014bc83a 	sub	r5,zero,r5
    360c:	003fec06 	br	35c0 <__alt_data_end+0xfffe35c0>
    3610:	0109c83a 	sub	r4,zero,r4
    3614:	01c00044 	movi	r7,1
    3618:	003fe706 	br	35b8 <__alt_data_end+0xfffe35b8>
    361c:	00c00044 	movi	r3,1
    3620:	003ff106 	br	35e8 <__alt_data_end+0xfffe35e8>

00003624 <__udivsi3>:
    3624:	200d883a 	mov	r6,r4
    3628:	2900152e 	bgeu	r5,r4,3680 <__udivsi3+0x5c>
    362c:	28001416 	blt	r5,zero,3680 <__udivsi3+0x5c>
    3630:	00800804 	movi	r2,32
    3634:	00c00044 	movi	r3,1
    3638:	00000206 	br	3644 <__udivsi3+0x20>
    363c:	10000e26 	beq	r2,zero,3678 <__udivsi3+0x54>
    3640:	28000516 	blt	r5,zero,3658 <__udivsi3+0x34>
    3644:	294b883a 	add	r5,r5,r5
    3648:	10bfffc4 	addi	r2,r2,-1
    364c:	18c7883a 	add	r3,r3,r3
    3650:	293ffa36 	bltu	r5,r4,363c <__alt_data_end+0xfffe363c>
    3654:	18000826 	beq	r3,zero,3678 <__udivsi3+0x54>
    3658:	0005883a 	mov	r2,zero
    365c:	31400236 	bltu	r6,r5,3668 <__udivsi3+0x44>
    3660:	314dc83a 	sub	r6,r6,r5
    3664:	10c4b03a 	or	r2,r2,r3
    3668:	1806d07a 	srli	r3,r3,1
    366c:	280ad07a 	srli	r5,r5,1
    3670:	183ffa1e 	bne	r3,zero,365c <__alt_data_end+0xfffe365c>
    3674:	f800283a 	ret
    3678:	0005883a 	mov	r2,zero
    367c:	f800283a 	ret
    3680:	00c00044 	movi	r3,1
    3684:	003ff406 	br	3658 <__alt_data_end+0xfffe3658>

00003688 <__umodsi3>:
    3688:	2005883a 	mov	r2,r4
    368c:	2900122e 	bgeu	r5,r4,36d8 <__umodsi3+0x50>
    3690:	28001116 	blt	r5,zero,36d8 <__umodsi3+0x50>
    3694:	01800804 	movi	r6,32
    3698:	00c00044 	movi	r3,1
    369c:	00000206 	br	36a8 <__umodsi3+0x20>
    36a0:	30000c26 	beq	r6,zero,36d4 <__umodsi3+0x4c>
    36a4:	28000516 	blt	r5,zero,36bc <__umodsi3+0x34>
    36a8:	294b883a 	add	r5,r5,r5
    36ac:	31bfffc4 	addi	r6,r6,-1
    36b0:	18c7883a 	add	r3,r3,r3
    36b4:	293ffa36 	bltu	r5,r4,36a0 <__alt_data_end+0xfffe36a0>
    36b8:	18000626 	beq	r3,zero,36d4 <__umodsi3+0x4c>
    36bc:	1806d07a 	srli	r3,r3,1
    36c0:	11400136 	bltu	r2,r5,36c8 <__umodsi3+0x40>
    36c4:	1145c83a 	sub	r2,r2,r5
    36c8:	280ad07a 	srli	r5,r5,1
    36cc:	183ffb1e 	bne	r3,zero,36bc <__alt_data_end+0xfffe36bc>
    36d0:	f800283a 	ret
    36d4:	f800283a 	ret
    36d8:	00c00044 	movi	r3,1
    36dc:	003ff706 	br	36bc <__alt_data_end+0xfffe36bc>

000036e0 <exit>:
    36e0:	defffe04 	addi	sp,sp,-8
    36e4:	000b883a 	mov	r5,zero
    36e8:	dc000015 	stw	r16,0(sp)
    36ec:	dfc00115 	stw	ra,4(sp)
    36f0:	2021883a 	mov	r16,r4
    36f4:	00084340 	call	8434 <__call_exitprocs>
    36f8:	00800074 	movhi	r2,1
    36fc:	108be404 	addi	r2,r2,12176
    3700:	11000017 	ldw	r4,0(r2)
    3704:	20800f17 	ldw	r2,60(r4)
    3708:	10000126 	beq	r2,zero,3710 <exit+0x30>
    370c:	103ee83a 	callr	r2
    3710:	8009883a 	mov	r4,r16
    3714:	000ec340 	call	ec34 <_exit>

00003718 <_fclose_r>:
    3718:	28003926 	beq	r5,zero,3800 <_fclose_r+0xe8>
    371c:	defffc04 	addi	sp,sp,-16
    3720:	dc400115 	stw	r17,4(sp)
    3724:	dc000015 	stw	r16,0(sp)
    3728:	dfc00315 	stw	ra,12(sp)
    372c:	dc800215 	stw	r18,8(sp)
    3730:	2023883a 	mov	r17,r4
    3734:	2821883a 	mov	r16,r5
    3738:	20000226 	beq	r4,zero,3744 <_fclose_r+0x2c>
    373c:	20800e17 	ldw	r2,56(r4)
    3740:	10002726 	beq	r2,zero,37e0 <_fclose_r+0xc8>
    3744:	8080030f 	ldh	r2,12(r16)
    3748:	1000071e 	bne	r2,zero,3768 <_fclose_r+0x50>
    374c:	0005883a 	mov	r2,zero
    3750:	dfc00317 	ldw	ra,12(sp)
    3754:	dc800217 	ldw	r18,8(sp)
    3758:	dc400117 	ldw	r17,4(sp)
    375c:	dc000017 	ldw	r16,0(sp)
    3760:	dec00404 	addi	sp,sp,16
    3764:	f800283a 	ret
    3768:	800b883a 	mov	r5,r16
    376c:	8809883a 	mov	r4,r17
    3770:	000381c0 	call	381c <__sflush_r>
    3774:	1025883a 	mov	r18,r2
    3778:	80800b17 	ldw	r2,44(r16)
    377c:	10000426 	beq	r2,zero,3790 <_fclose_r+0x78>
    3780:	81400717 	ldw	r5,28(r16)
    3784:	8809883a 	mov	r4,r17
    3788:	103ee83a 	callr	r2
    378c:	10001616 	blt	r2,zero,37e8 <_fclose_r+0xd0>
    3790:	8080030b 	ldhu	r2,12(r16)
    3794:	1080200c 	andi	r2,r2,128
    3798:	1000151e 	bne	r2,zero,37f0 <_fclose_r+0xd8>
    379c:	81400c17 	ldw	r5,48(r16)
    37a0:	28000526 	beq	r5,zero,37b8 <_fclose_r+0xa0>
    37a4:	80801004 	addi	r2,r16,64
    37a8:	28800226 	beq	r5,r2,37b4 <_fclose_r+0x9c>
    37ac:	8809883a 	mov	r4,r17
    37b0:	00043140 	call	4314 <_free_r>
    37b4:	80000c15 	stw	zero,48(r16)
    37b8:	81401117 	ldw	r5,68(r16)
    37bc:	28000326 	beq	r5,zero,37cc <_fclose_r+0xb4>
    37c0:	8809883a 	mov	r4,r17
    37c4:	00043140 	call	4314 <_free_r>
    37c8:	80001115 	stw	zero,68(r16)
    37cc:	0003e340 	call	3e34 <__sfp_lock_acquire>
    37d0:	8000030d 	sth	zero,12(r16)
    37d4:	0003e380 	call	3e38 <__sfp_lock_release>
    37d8:	9005883a 	mov	r2,r18
    37dc:	003fdc06 	br	3750 <__alt_data_end+0xfffe3750>
    37e0:	0003e240 	call	3e24 <__sinit>
    37e4:	003fd706 	br	3744 <__alt_data_end+0xfffe3744>
    37e8:	04bfffc4 	movi	r18,-1
    37ec:	003fe806 	br	3790 <__alt_data_end+0xfffe3790>
    37f0:	81400417 	ldw	r5,16(r16)
    37f4:	8809883a 	mov	r4,r17
    37f8:	00043140 	call	4314 <_free_r>
    37fc:	003fe706 	br	379c <__alt_data_end+0xfffe379c>
    3800:	0005883a 	mov	r2,zero
    3804:	f800283a 	ret

00003808 <fclose>:
    3808:	00800074 	movhi	r2,1
    380c:	108be504 	addi	r2,r2,12180
    3810:	200b883a 	mov	r5,r4
    3814:	11000017 	ldw	r4,0(r2)
    3818:	00037181 	jmpi	3718 <_fclose_r>

0000381c <__sflush_r>:
    381c:	2880030b 	ldhu	r2,12(r5)
    3820:	defffb04 	addi	sp,sp,-20
    3824:	dcc00315 	stw	r19,12(sp)
    3828:	dc400115 	stw	r17,4(sp)
    382c:	dfc00415 	stw	ra,16(sp)
    3830:	dc800215 	stw	r18,8(sp)
    3834:	dc000015 	stw	r16,0(sp)
    3838:	10c0020c 	andi	r3,r2,8
    383c:	2823883a 	mov	r17,r5
    3840:	2027883a 	mov	r19,r4
    3844:	1800311e 	bne	r3,zero,390c <__sflush_r+0xf0>
    3848:	28c00117 	ldw	r3,4(r5)
    384c:	10820014 	ori	r2,r2,2048
    3850:	2880030d 	sth	r2,12(r5)
    3854:	00c04b0e 	bge	zero,r3,3984 <__sflush_r+0x168>
    3858:	8a000a17 	ldw	r8,40(r17)
    385c:	40002326 	beq	r8,zero,38ec <__sflush_r+0xd0>
    3860:	9c000017 	ldw	r16,0(r19)
    3864:	10c4000c 	andi	r3,r2,4096
    3868:	98000015 	stw	zero,0(r19)
    386c:	18004826 	beq	r3,zero,3990 <__sflush_r+0x174>
    3870:	89801417 	ldw	r6,80(r17)
    3874:	10c0010c 	andi	r3,r2,4
    3878:	18000626 	beq	r3,zero,3894 <__sflush_r+0x78>
    387c:	88c00117 	ldw	r3,4(r17)
    3880:	88800c17 	ldw	r2,48(r17)
    3884:	30cdc83a 	sub	r6,r6,r3
    3888:	10000226 	beq	r2,zero,3894 <__sflush_r+0x78>
    388c:	88800f17 	ldw	r2,60(r17)
    3890:	308dc83a 	sub	r6,r6,r2
    3894:	89400717 	ldw	r5,28(r17)
    3898:	000f883a 	mov	r7,zero
    389c:	9809883a 	mov	r4,r19
    38a0:	403ee83a 	callr	r8
    38a4:	00ffffc4 	movi	r3,-1
    38a8:	10c04426 	beq	r2,r3,39bc <__sflush_r+0x1a0>
    38ac:	88c0030b 	ldhu	r3,12(r17)
    38b0:	89000417 	ldw	r4,16(r17)
    38b4:	88000115 	stw	zero,4(r17)
    38b8:	197dffcc 	andi	r5,r3,63487
    38bc:	8940030d 	sth	r5,12(r17)
    38c0:	89000015 	stw	r4,0(r17)
    38c4:	18c4000c 	andi	r3,r3,4096
    38c8:	18002c1e 	bne	r3,zero,397c <__sflush_r+0x160>
    38cc:	89400c17 	ldw	r5,48(r17)
    38d0:	9c000015 	stw	r16,0(r19)
    38d4:	28000526 	beq	r5,zero,38ec <__sflush_r+0xd0>
    38d8:	88801004 	addi	r2,r17,64
    38dc:	28800226 	beq	r5,r2,38e8 <__sflush_r+0xcc>
    38e0:	9809883a 	mov	r4,r19
    38e4:	00043140 	call	4314 <_free_r>
    38e8:	88000c15 	stw	zero,48(r17)
    38ec:	0005883a 	mov	r2,zero
    38f0:	dfc00417 	ldw	ra,16(sp)
    38f4:	dcc00317 	ldw	r19,12(sp)
    38f8:	dc800217 	ldw	r18,8(sp)
    38fc:	dc400117 	ldw	r17,4(sp)
    3900:	dc000017 	ldw	r16,0(sp)
    3904:	dec00504 	addi	sp,sp,20
    3908:	f800283a 	ret
    390c:	2c800417 	ldw	r18,16(r5)
    3910:	903ff626 	beq	r18,zero,38ec <__alt_data_end+0xfffe38ec>
    3914:	2c000017 	ldw	r16,0(r5)
    3918:	108000cc 	andi	r2,r2,3
    391c:	2c800015 	stw	r18,0(r5)
    3920:	84a1c83a 	sub	r16,r16,r18
    3924:	1000131e 	bne	r2,zero,3974 <__sflush_r+0x158>
    3928:	28800517 	ldw	r2,20(r5)
    392c:	88800215 	stw	r2,8(r17)
    3930:	04000316 	blt	zero,r16,3940 <__sflush_r+0x124>
    3934:	003fed06 	br	38ec <__alt_data_end+0xfffe38ec>
    3938:	90a5883a 	add	r18,r18,r2
    393c:	043feb0e 	bge	zero,r16,38ec <__alt_data_end+0xfffe38ec>
    3940:	88800917 	ldw	r2,36(r17)
    3944:	89400717 	ldw	r5,28(r17)
    3948:	800f883a 	mov	r7,r16
    394c:	900d883a 	mov	r6,r18
    3950:	9809883a 	mov	r4,r19
    3954:	103ee83a 	callr	r2
    3958:	80a1c83a 	sub	r16,r16,r2
    395c:	00bff616 	blt	zero,r2,3938 <__alt_data_end+0xfffe3938>
    3960:	88c0030b 	ldhu	r3,12(r17)
    3964:	00bfffc4 	movi	r2,-1
    3968:	18c01014 	ori	r3,r3,64
    396c:	88c0030d 	sth	r3,12(r17)
    3970:	003fdf06 	br	38f0 <__alt_data_end+0xfffe38f0>
    3974:	0005883a 	mov	r2,zero
    3978:	003fec06 	br	392c <__alt_data_end+0xfffe392c>
    397c:	88801415 	stw	r2,80(r17)
    3980:	003fd206 	br	38cc <__alt_data_end+0xfffe38cc>
    3984:	28c00f17 	ldw	r3,60(r5)
    3988:	00ffb316 	blt	zero,r3,3858 <__alt_data_end+0xfffe3858>
    398c:	003fd706 	br	38ec <__alt_data_end+0xfffe38ec>
    3990:	89400717 	ldw	r5,28(r17)
    3994:	000d883a 	mov	r6,zero
    3998:	01c00044 	movi	r7,1
    399c:	9809883a 	mov	r4,r19
    39a0:	403ee83a 	callr	r8
    39a4:	100d883a 	mov	r6,r2
    39a8:	00bfffc4 	movi	r2,-1
    39ac:	30801426 	beq	r6,r2,3a00 <__sflush_r+0x1e4>
    39b0:	8880030b 	ldhu	r2,12(r17)
    39b4:	8a000a17 	ldw	r8,40(r17)
    39b8:	003fae06 	br	3874 <__alt_data_end+0xfffe3874>
    39bc:	98c00017 	ldw	r3,0(r19)
    39c0:	183fba26 	beq	r3,zero,38ac <__alt_data_end+0xfffe38ac>
    39c4:	01000744 	movi	r4,29
    39c8:	19000626 	beq	r3,r4,39e4 <__sflush_r+0x1c8>
    39cc:	01000584 	movi	r4,22
    39d0:	19000426 	beq	r3,r4,39e4 <__sflush_r+0x1c8>
    39d4:	88c0030b 	ldhu	r3,12(r17)
    39d8:	18c01014 	ori	r3,r3,64
    39dc:	88c0030d 	sth	r3,12(r17)
    39e0:	003fc306 	br	38f0 <__alt_data_end+0xfffe38f0>
    39e4:	8880030b 	ldhu	r2,12(r17)
    39e8:	88c00417 	ldw	r3,16(r17)
    39ec:	88000115 	stw	zero,4(r17)
    39f0:	10bdffcc 	andi	r2,r2,63487
    39f4:	8880030d 	sth	r2,12(r17)
    39f8:	88c00015 	stw	r3,0(r17)
    39fc:	003fb306 	br	38cc <__alt_data_end+0xfffe38cc>
    3a00:	98800017 	ldw	r2,0(r19)
    3a04:	103fea26 	beq	r2,zero,39b0 <__alt_data_end+0xfffe39b0>
    3a08:	00c00744 	movi	r3,29
    3a0c:	10c00226 	beq	r2,r3,3a18 <__sflush_r+0x1fc>
    3a10:	00c00584 	movi	r3,22
    3a14:	10c0031e 	bne	r2,r3,3a24 <__sflush_r+0x208>
    3a18:	9c000015 	stw	r16,0(r19)
    3a1c:	0005883a 	mov	r2,zero
    3a20:	003fb306 	br	38f0 <__alt_data_end+0xfffe38f0>
    3a24:	88c0030b 	ldhu	r3,12(r17)
    3a28:	3005883a 	mov	r2,r6
    3a2c:	18c01014 	ori	r3,r3,64
    3a30:	88c0030d 	sth	r3,12(r17)
    3a34:	003fae06 	br	38f0 <__alt_data_end+0xfffe38f0>

00003a38 <_fflush_r>:
    3a38:	defffd04 	addi	sp,sp,-12
    3a3c:	dc000115 	stw	r16,4(sp)
    3a40:	dfc00215 	stw	ra,8(sp)
    3a44:	2021883a 	mov	r16,r4
    3a48:	20000226 	beq	r4,zero,3a54 <_fflush_r+0x1c>
    3a4c:	20800e17 	ldw	r2,56(r4)
    3a50:	10000c26 	beq	r2,zero,3a84 <_fflush_r+0x4c>
    3a54:	2880030f 	ldh	r2,12(r5)
    3a58:	1000051e 	bne	r2,zero,3a70 <_fflush_r+0x38>
    3a5c:	0005883a 	mov	r2,zero
    3a60:	dfc00217 	ldw	ra,8(sp)
    3a64:	dc000117 	ldw	r16,4(sp)
    3a68:	dec00304 	addi	sp,sp,12
    3a6c:	f800283a 	ret
    3a70:	8009883a 	mov	r4,r16
    3a74:	dfc00217 	ldw	ra,8(sp)
    3a78:	dc000117 	ldw	r16,4(sp)
    3a7c:	dec00304 	addi	sp,sp,12
    3a80:	000381c1 	jmpi	381c <__sflush_r>
    3a84:	d9400015 	stw	r5,0(sp)
    3a88:	0003e240 	call	3e24 <__sinit>
    3a8c:	d9400017 	ldw	r5,0(sp)
    3a90:	003ff006 	br	3a54 <__alt_data_end+0xfffe3a54>

00003a94 <fflush>:
    3a94:	20000526 	beq	r4,zero,3aac <fflush+0x18>
    3a98:	00800074 	movhi	r2,1
    3a9c:	108be504 	addi	r2,r2,12180
    3aa0:	200b883a 	mov	r5,r4
    3aa4:	11000017 	ldw	r4,0(r2)
    3aa8:	0003a381 	jmpi	3a38 <_fflush_r>
    3aac:	00800074 	movhi	r2,1
    3ab0:	108be404 	addi	r2,r2,12176
    3ab4:	11000017 	ldw	r4,0(r2)
    3ab8:	01400034 	movhi	r5,0
    3abc:	294e8e04 	addi	r5,r5,14904
    3ac0:	0004bc41 	jmpi	4bc4 <_fwalk_reent>

00003ac4 <__fp_unlock>:
    3ac4:	0005883a 	mov	r2,zero
    3ac8:	f800283a 	ret

00003acc <_cleanup_r>:
    3acc:	01400034 	movhi	r5,0
    3ad0:	294dc604 	addi	r5,r5,14104
    3ad4:	0004bc41 	jmpi	4bc4 <_fwalk_reent>

00003ad8 <__sinit.part.1>:
    3ad8:	defff704 	addi	sp,sp,-36
    3adc:	00c00034 	movhi	r3,0
    3ae0:	dfc00815 	stw	ra,32(sp)
    3ae4:	ddc00715 	stw	r23,28(sp)
    3ae8:	dd800615 	stw	r22,24(sp)
    3aec:	dd400515 	stw	r21,20(sp)
    3af0:	dd000415 	stw	r20,16(sp)
    3af4:	dcc00315 	stw	r19,12(sp)
    3af8:	dc800215 	stw	r18,8(sp)
    3afc:	dc400115 	stw	r17,4(sp)
    3b00:	dc000015 	stw	r16,0(sp)
    3b04:	18ceb304 	addi	r3,r3,15052
    3b08:	24000117 	ldw	r16,4(r4)
    3b0c:	20c00f15 	stw	r3,60(r4)
    3b10:	2080bb04 	addi	r2,r4,748
    3b14:	00c000c4 	movi	r3,3
    3b18:	20c0b915 	stw	r3,740(r4)
    3b1c:	2080ba15 	stw	r2,744(r4)
    3b20:	2000b815 	stw	zero,736(r4)
    3b24:	05c00204 	movi	r23,8
    3b28:	00800104 	movi	r2,4
    3b2c:	2025883a 	mov	r18,r4
    3b30:	b80d883a 	mov	r6,r23
    3b34:	81001704 	addi	r4,r16,92
    3b38:	000b883a 	mov	r5,zero
    3b3c:	80000015 	stw	zero,0(r16)
    3b40:	80000115 	stw	zero,4(r16)
    3b44:	80000215 	stw	zero,8(r16)
    3b48:	8080030d 	sth	r2,12(r16)
    3b4c:	80001915 	stw	zero,100(r16)
    3b50:	8000038d 	sth	zero,14(r16)
    3b54:	80000415 	stw	zero,16(r16)
    3b58:	80000515 	stw	zero,20(r16)
    3b5c:	80000615 	stw	zero,24(r16)
    3b60:	00057980 	call	5798 <memset>
    3b64:	05800034 	movhi	r22,0
    3b68:	94400217 	ldw	r17,8(r18)
    3b6c:	05400034 	movhi	r21,0
    3b70:	05000034 	movhi	r20,0
    3b74:	04c00034 	movhi	r19,0
    3b78:	b5972904 	addi	r22,r22,23716
    3b7c:	ad574004 	addi	r21,r21,23808
    3b80:	a5175f04 	addi	r20,r20,23932
    3b84:	9cd77604 	addi	r19,r19,24024
    3b88:	85800815 	stw	r22,32(r16)
    3b8c:	85400915 	stw	r21,36(r16)
    3b90:	85000a15 	stw	r20,40(r16)
    3b94:	84c00b15 	stw	r19,44(r16)
    3b98:	84000715 	stw	r16,28(r16)
    3b9c:	00800284 	movi	r2,10
    3ba0:	8880030d 	sth	r2,12(r17)
    3ba4:	00800044 	movi	r2,1
    3ba8:	b80d883a 	mov	r6,r23
    3bac:	89001704 	addi	r4,r17,92
    3bb0:	000b883a 	mov	r5,zero
    3bb4:	88000015 	stw	zero,0(r17)
    3bb8:	88000115 	stw	zero,4(r17)
    3bbc:	88000215 	stw	zero,8(r17)
    3bc0:	88001915 	stw	zero,100(r17)
    3bc4:	8880038d 	sth	r2,14(r17)
    3bc8:	88000415 	stw	zero,16(r17)
    3bcc:	88000515 	stw	zero,20(r17)
    3bd0:	88000615 	stw	zero,24(r17)
    3bd4:	00057980 	call	5798 <memset>
    3bd8:	94000317 	ldw	r16,12(r18)
    3bdc:	00800484 	movi	r2,18
    3be0:	8c400715 	stw	r17,28(r17)
    3be4:	8d800815 	stw	r22,32(r17)
    3be8:	8d400915 	stw	r21,36(r17)
    3bec:	8d000a15 	stw	r20,40(r17)
    3bf0:	8cc00b15 	stw	r19,44(r17)
    3bf4:	8080030d 	sth	r2,12(r16)
    3bf8:	00800084 	movi	r2,2
    3bfc:	80000015 	stw	zero,0(r16)
    3c00:	80000115 	stw	zero,4(r16)
    3c04:	80000215 	stw	zero,8(r16)
    3c08:	80001915 	stw	zero,100(r16)
    3c0c:	8080038d 	sth	r2,14(r16)
    3c10:	80000415 	stw	zero,16(r16)
    3c14:	80000515 	stw	zero,20(r16)
    3c18:	80000615 	stw	zero,24(r16)
    3c1c:	b80d883a 	mov	r6,r23
    3c20:	000b883a 	mov	r5,zero
    3c24:	81001704 	addi	r4,r16,92
    3c28:	00057980 	call	5798 <memset>
    3c2c:	00800044 	movi	r2,1
    3c30:	84000715 	stw	r16,28(r16)
    3c34:	85800815 	stw	r22,32(r16)
    3c38:	85400915 	stw	r21,36(r16)
    3c3c:	85000a15 	stw	r20,40(r16)
    3c40:	84c00b15 	stw	r19,44(r16)
    3c44:	90800e15 	stw	r2,56(r18)
    3c48:	dfc00817 	ldw	ra,32(sp)
    3c4c:	ddc00717 	ldw	r23,28(sp)
    3c50:	dd800617 	ldw	r22,24(sp)
    3c54:	dd400517 	ldw	r21,20(sp)
    3c58:	dd000417 	ldw	r20,16(sp)
    3c5c:	dcc00317 	ldw	r19,12(sp)
    3c60:	dc800217 	ldw	r18,8(sp)
    3c64:	dc400117 	ldw	r17,4(sp)
    3c68:	dc000017 	ldw	r16,0(sp)
    3c6c:	dec00904 	addi	sp,sp,36
    3c70:	f800283a 	ret

00003c74 <__fp_lock>:
    3c74:	0005883a 	mov	r2,zero
    3c78:	f800283a 	ret

00003c7c <__sfmoreglue>:
    3c7c:	defffc04 	addi	sp,sp,-16
    3c80:	dc800215 	stw	r18,8(sp)
    3c84:	2825883a 	mov	r18,r5
    3c88:	dc000015 	stw	r16,0(sp)
    3c8c:	01401a04 	movi	r5,104
    3c90:	2021883a 	mov	r16,r4
    3c94:	913fffc4 	addi	r4,r18,-1
    3c98:	dfc00315 	stw	ra,12(sp)
    3c9c:	dc400115 	stw	r17,4(sp)
    3ca0:	0000f040 	call	f04 <__mulsi3>
    3ca4:	8009883a 	mov	r4,r16
    3ca8:	11401d04 	addi	r5,r2,116
    3cac:	1023883a 	mov	r17,r2
    3cb0:	0004e440 	call	4e44 <_malloc_r>
    3cb4:	1021883a 	mov	r16,r2
    3cb8:	10000726 	beq	r2,zero,3cd8 <__sfmoreglue+0x5c>
    3cbc:	11000304 	addi	r4,r2,12
    3cc0:	10000015 	stw	zero,0(r2)
    3cc4:	14800115 	stw	r18,4(r2)
    3cc8:	11000215 	stw	r4,8(r2)
    3ccc:	89801a04 	addi	r6,r17,104
    3cd0:	000b883a 	mov	r5,zero
    3cd4:	00057980 	call	5798 <memset>
    3cd8:	8005883a 	mov	r2,r16
    3cdc:	dfc00317 	ldw	ra,12(sp)
    3ce0:	dc800217 	ldw	r18,8(sp)
    3ce4:	dc400117 	ldw	r17,4(sp)
    3ce8:	dc000017 	ldw	r16,0(sp)
    3cec:	dec00404 	addi	sp,sp,16
    3cf0:	f800283a 	ret

00003cf4 <__sfp>:
    3cf4:	defffb04 	addi	sp,sp,-20
    3cf8:	dc000015 	stw	r16,0(sp)
    3cfc:	04000074 	movhi	r16,1
    3d00:	840be404 	addi	r16,r16,12176
    3d04:	dcc00315 	stw	r19,12(sp)
    3d08:	2027883a 	mov	r19,r4
    3d0c:	81000017 	ldw	r4,0(r16)
    3d10:	dfc00415 	stw	ra,16(sp)
    3d14:	dc800215 	stw	r18,8(sp)
    3d18:	20800e17 	ldw	r2,56(r4)
    3d1c:	dc400115 	stw	r17,4(sp)
    3d20:	1000021e 	bne	r2,zero,3d2c <__sfp+0x38>
    3d24:	0003ad80 	call	3ad8 <__sinit.part.1>
    3d28:	81000017 	ldw	r4,0(r16)
    3d2c:	2480b804 	addi	r18,r4,736
    3d30:	047fffc4 	movi	r17,-1
    3d34:	91000117 	ldw	r4,4(r18)
    3d38:	94000217 	ldw	r16,8(r18)
    3d3c:	213fffc4 	addi	r4,r4,-1
    3d40:	20000a16 	blt	r4,zero,3d6c <__sfp+0x78>
    3d44:	8080030f 	ldh	r2,12(r16)
    3d48:	10000c26 	beq	r2,zero,3d7c <__sfp+0x88>
    3d4c:	80c01d04 	addi	r3,r16,116
    3d50:	00000206 	br	3d5c <__sfp+0x68>
    3d54:	18bfe60f 	ldh	r2,-104(r3)
    3d58:	10000826 	beq	r2,zero,3d7c <__sfp+0x88>
    3d5c:	213fffc4 	addi	r4,r4,-1
    3d60:	1c3ffd04 	addi	r16,r3,-12
    3d64:	18c01a04 	addi	r3,r3,104
    3d68:	247ffa1e 	bne	r4,r17,3d54 <__alt_data_end+0xfffe3d54>
    3d6c:	90800017 	ldw	r2,0(r18)
    3d70:	10001d26 	beq	r2,zero,3de8 <__sfp+0xf4>
    3d74:	1025883a 	mov	r18,r2
    3d78:	003fee06 	br	3d34 <__alt_data_end+0xfffe3d34>
    3d7c:	00bfffc4 	movi	r2,-1
    3d80:	8080038d 	sth	r2,14(r16)
    3d84:	00800044 	movi	r2,1
    3d88:	8080030d 	sth	r2,12(r16)
    3d8c:	80001915 	stw	zero,100(r16)
    3d90:	80000015 	stw	zero,0(r16)
    3d94:	80000215 	stw	zero,8(r16)
    3d98:	80000115 	stw	zero,4(r16)
    3d9c:	80000415 	stw	zero,16(r16)
    3da0:	80000515 	stw	zero,20(r16)
    3da4:	80000615 	stw	zero,24(r16)
    3da8:	01800204 	movi	r6,8
    3dac:	000b883a 	mov	r5,zero
    3db0:	81001704 	addi	r4,r16,92
    3db4:	00057980 	call	5798 <memset>
    3db8:	8005883a 	mov	r2,r16
    3dbc:	80000c15 	stw	zero,48(r16)
    3dc0:	80000d15 	stw	zero,52(r16)
    3dc4:	80001115 	stw	zero,68(r16)
    3dc8:	80001215 	stw	zero,72(r16)
    3dcc:	dfc00417 	ldw	ra,16(sp)
    3dd0:	dcc00317 	ldw	r19,12(sp)
    3dd4:	dc800217 	ldw	r18,8(sp)
    3dd8:	dc400117 	ldw	r17,4(sp)
    3ddc:	dc000017 	ldw	r16,0(sp)
    3de0:	dec00504 	addi	sp,sp,20
    3de4:	f800283a 	ret
    3de8:	01400104 	movi	r5,4
    3dec:	9809883a 	mov	r4,r19
    3df0:	0003c7c0 	call	3c7c <__sfmoreglue>
    3df4:	90800015 	stw	r2,0(r18)
    3df8:	103fde1e 	bne	r2,zero,3d74 <__alt_data_end+0xfffe3d74>
    3dfc:	00800304 	movi	r2,12
    3e00:	98800015 	stw	r2,0(r19)
    3e04:	0005883a 	mov	r2,zero
    3e08:	003ff006 	br	3dcc <__alt_data_end+0xfffe3dcc>

00003e0c <_cleanup>:
    3e0c:	00800074 	movhi	r2,1
    3e10:	108be404 	addi	r2,r2,12176
    3e14:	11000017 	ldw	r4,0(r2)
    3e18:	01400034 	movhi	r5,0
    3e1c:	294dc604 	addi	r5,r5,14104
    3e20:	0004bc41 	jmpi	4bc4 <_fwalk_reent>

00003e24 <__sinit>:
    3e24:	20800e17 	ldw	r2,56(r4)
    3e28:	10000126 	beq	r2,zero,3e30 <__sinit+0xc>
    3e2c:	f800283a 	ret
    3e30:	0003ad81 	jmpi	3ad8 <__sinit.part.1>

00003e34 <__sfp_lock_acquire>:
    3e34:	f800283a 	ret

00003e38 <__sfp_lock_release>:
    3e38:	f800283a 	ret

00003e3c <__sinit_lock_acquire>:
    3e3c:	f800283a 	ret

00003e40 <__sinit_lock_release>:
    3e40:	f800283a 	ret

00003e44 <__fp_lock_all>:
    3e44:	00800074 	movhi	r2,1
    3e48:	108be504 	addi	r2,r2,12180
    3e4c:	11000017 	ldw	r4,0(r2)
    3e50:	01400034 	movhi	r5,0
    3e54:	294f1d04 	addi	r5,r5,15476
    3e58:	0004b001 	jmpi	4b00 <_fwalk>

00003e5c <__fp_unlock_all>:
    3e5c:	00800074 	movhi	r2,1
    3e60:	108be504 	addi	r2,r2,12180
    3e64:	11000017 	ldw	r4,0(r2)
    3e68:	01400034 	movhi	r5,0
    3e6c:	294eb104 	addi	r5,r5,15044
    3e70:	0004b001 	jmpi	4b00 <_fwalk>

00003e74 <_fopen_r>:
    3e74:	defffa04 	addi	sp,sp,-24
    3e78:	3005883a 	mov	r2,r6
    3e7c:	dcc00415 	stw	r19,16(sp)
    3e80:	d80d883a 	mov	r6,sp
    3e84:	2827883a 	mov	r19,r5
    3e88:	100b883a 	mov	r5,r2
    3e8c:	dc800315 	stw	r18,12(sp)
    3e90:	dfc00515 	stw	ra,20(sp)
    3e94:	dc400215 	stw	r17,8(sp)
    3e98:	dc000115 	stw	r16,4(sp)
    3e9c:	2025883a 	mov	r18,r4
    3ea0:	0009e640 	call	9e64 <__sflags>
    3ea4:	10002726 	beq	r2,zero,3f44 <_fopen_r+0xd0>
    3ea8:	9009883a 	mov	r4,r18
    3eac:	1023883a 	mov	r17,r2
    3eb0:	0003cf40 	call	3cf4 <__sfp>
    3eb4:	1021883a 	mov	r16,r2
    3eb8:	10002226 	beq	r2,zero,3f44 <_fopen_r+0xd0>
    3ebc:	d9800017 	ldw	r6,0(sp)
    3ec0:	01c06d84 	movi	r7,438
    3ec4:	980b883a 	mov	r5,r19
    3ec8:	9009883a 	mov	r4,r18
    3ecc:	00058c00 	call	58c0 <_open_r>
    3ed0:	10001916 	blt	r2,zero,3f38 <_fopen_r+0xc4>
    3ed4:	8080038d 	sth	r2,14(r16)
    3ed8:	00800034 	movhi	r2,0
    3edc:	10972904 	addi	r2,r2,23716
    3ee0:	80800815 	stw	r2,32(r16)
    3ee4:	00800034 	movhi	r2,0
    3ee8:	10974004 	addi	r2,r2,23808
    3eec:	80800915 	stw	r2,36(r16)
    3ef0:	00800034 	movhi	r2,0
    3ef4:	10975f04 	addi	r2,r2,23932
    3ef8:	80800a15 	stw	r2,40(r16)
    3efc:	00800034 	movhi	r2,0
    3f00:	10977604 	addi	r2,r2,24024
    3f04:	8440030d 	sth	r17,12(r16)
    3f08:	84000715 	stw	r16,28(r16)
    3f0c:	80800b15 	stw	r2,44(r16)
    3f10:	8c40400c 	andi	r17,r17,256
    3f14:	88000d1e 	bne	r17,zero,3f4c <_fopen_r+0xd8>
    3f18:	8005883a 	mov	r2,r16
    3f1c:	dfc00517 	ldw	ra,20(sp)
    3f20:	dcc00417 	ldw	r19,16(sp)
    3f24:	dc800317 	ldw	r18,12(sp)
    3f28:	dc400217 	ldw	r17,8(sp)
    3f2c:	dc000117 	ldw	r16,4(sp)
    3f30:	dec00604 	addi	sp,sp,24
    3f34:	f800283a 	ret
    3f38:	0003e340 	call	3e34 <__sfp_lock_acquire>
    3f3c:	8000030d 	sth	zero,12(r16)
    3f40:	0003e380 	call	3e38 <__sfp_lock_release>
    3f44:	0005883a 	mov	r2,zero
    3f48:	003ff406 	br	3f1c <__alt_data_end+0xfffe3f1c>
    3f4c:	01c00084 	movi	r7,2
    3f50:	000d883a 	mov	r6,zero
    3f54:	800b883a 	mov	r5,r16
    3f58:	9009883a 	mov	r4,r18
    3f5c:	00046240 	call	4624 <_fseek_r>
    3f60:	8005883a 	mov	r2,r16
    3f64:	003fed06 	br	3f1c <__alt_data_end+0xfffe3f1c>

00003f68 <fopen>:
    3f68:	00800074 	movhi	r2,1
    3f6c:	108be504 	addi	r2,r2,12180
    3f70:	280d883a 	mov	r6,r5
    3f74:	200b883a 	mov	r5,r4
    3f78:	11000017 	ldw	r4,0(r2)
    3f7c:	0003e741 	jmpi	3e74 <_fopen_r>

00003f80 <_fread_r>:
    3f80:	defff404 	addi	sp,sp,-48
    3f84:	dd000615 	stw	r20,24(sp)
    3f88:	dcc00515 	stw	r19,20(sp)
    3f8c:	2029883a 	mov	r20,r4
    3f90:	2827883a 	mov	r19,r5
    3f94:	3809883a 	mov	r4,r7
    3f98:	300b883a 	mov	r5,r6
    3f9c:	ddc00915 	stw	r23,36(sp)
    3fa0:	dd400715 	stw	r21,28(sp)
    3fa4:	dc000215 	stw	r16,8(sp)
    3fa8:	dfc00b15 	stw	ra,44(sp)
    3fac:	df000a15 	stw	fp,40(sp)
    3fb0:	dd800815 	stw	r22,32(sp)
    3fb4:	dc800415 	stw	r18,16(sp)
    3fb8:	dc400315 	stw	r17,12(sp)
    3fbc:	302f883a 	mov	r23,r6
    3fc0:	382b883a 	mov	r21,r7
    3fc4:	0000f040 	call	f04 <__mulsi3>
    3fc8:	dc000c17 	ldw	r16,48(sp)
    3fcc:	10003826 	beq	r2,zero,40b0 <_fread_r+0x130>
    3fd0:	102d883a 	mov	r22,r2
    3fd4:	a0000226 	beq	r20,zero,3fe0 <_fread_r+0x60>
    3fd8:	a0800e17 	ldw	r2,56(r20)
    3fdc:	10006e26 	beq	r2,zero,4198 <_fread_r+0x218>
    3fe0:	8080030b 	ldhu	r2,12(r16)
    3fe4:	10c8000c 	andi	r3,r2,8192
    3fe8:	1800061e 	bne	r3,zero,4004 <_fread_r+0x84>
    3fec:	81001917 	ldw	r4,100(r16)
    3ff0:	00f7ffc4 	movi	r3,-8193
    3ff4:	10880014 	ori	r2,r2,8192
    3ff8:	20c6703a 	and	r3,r4,r3
    3ffc:	8080030d 	sth	r2,12(r16)
    4000:	80c01915 	stw	r3,100(r16)
    4004:	84400117 	ldw	r17,4(r16)
    4008:	88005f16 	blt	r17,zero,4188 <_fread_r+0x208>
    400c:	8809883a 	mov	r4,r17
    4010:	1080008c 	andi	r2,r2,2
    4014:	1000281e 	bne	r2,zero,40b8 <_fread_r+0x138>
    4018:	b025883a 	mov	r18,r22
    401c:	00000b06 	br	404c <_fread_r+0xcc>
    4020:	00056500 	call	5650 <memcpy>
    4024:	80800017 	ldw	r2,0(r16)
    4028:	9c67883a 	add	r19,r19,r17
    402c:	9465c83a 	sub	r18,r18,r17
    4030:	1463883a 	add	r17,r2,r17
    4034:	800b883a 	mov	r5,r16
    4038:	a009883a 	mov	r4,r20
    403c:	84400015 	stw	r17,0(r16)
    4040:	0005a7c0 	call	5a7c <__srefill_r>
    4044:	10004c1e 	bne	r2,zero,4178 <_fread_r+0x1f8>
    4048:	84400117 	ldw	r17,4(r16)
    404c:	880d883a 	mov	r6,r17
    4050:	9809883a 	mov	r4,r19
    4054:	81400017 	ldw	r5,0(r16)
    4058:	8cbff136 	bltu	r17,r18,4020 <__alt_data_end+0xfffe4020>
    405c:	900d883a 	mov	r6,r18
    4060:	00056500 	call	5650 <memcpy>
    4064:	80c00117 	ldw	r3,4(r16)
    4068:	81000017 	ldw	r4,0(r16)
    406c:	a805883a 	mov	r2,r21
    4070:	1c87c83a 	sub	r3,r3,r18
    4074:	24a5883a 	add	r18,r4,r18
    4078:	80c00115 	stw	r3,4(r16)
    407c:	84800015 	stw	r18,0(r16)
    4080:	dfc00b17 	ldw	ra,44(sp)
    4084:	df000a17 	ldw	fp,40(sp)
    4088:	ddc00917 	ldw	r23,36(sp)
    408c:	dd800817 	ldw	r22,32(sp)
    4090:	dd400717 	ldw	r21,28(sp)
    4094:	dd000617 	ldw	r20,24(sp)
    4098:	dcc00517 	ldw	r19,20(sp)
    409c:	dc800417 	ldw	r18,16(sp)
    40a0:	dc400317 	ldw	r17,12(sp)
    40a4:	dc000217 	ldw	r16,8(sp)
    40a8:	dec00c04 	addi	sp,sp,48
    40ac:	f800283a 	ret
    40b0:	0005883a 	mov	r2,zero
    40b4:	003ff206 	br	4080 <__alt_data_end+0xfffe4080>
    40b8:	b007883a 	mov	r3,r22
    40bc:	2580012e 	bgeu	r4,r22,40c4 <_fread_r+0x144>
    40c0:	2007883a 	mov	r3,r4
    40c4:	81400017 	ldw	r5,0(r16)
    40c8:	180d883a 	mov	r6,r3
    40cc:	9809883a 	mov	r4,r19
    40d0:	d8c00115 	stw	r3,4(sp)
    40d4:	00056500 	call	5650 <memcpy>
    40d8:	d8c00117 	ldw	r3,4(sp)
    40dc:	84400017 	ldw	r17,0(r16)
    40e0:	80800117 	ldw	r2,4(r16)
    40e4:	81400c17 	ldw	r5,48(r16)
    40e8:	88e3883a 	add	r17,r17,r3
    40ec:	10c5c83a 	sub	r2,r2,r3
    40f0:	84400015 	stw	r17,0(r16)
    40f4:	80800115 	stw	r2,4(r16)
    40f8:	b0e5c83a 	sub	r18,r22,r3
    40fc:	28002c26 	beq	r5,zero,41b0 <_fread_r+0x230>
    4100:	90002c26 	beq	r18,zero,41b4 <_fread_r+0x234>
    4104:	80801004 	addi	r2,r16,64
    4108:	28800526 	beq	r5,r2,4120 <_fread_r+0x1a0>
    410c:	a009883a 	mov	r4,r20
    4110:	d8c00115 	stw	r3,4(sp)
    4114:	00043140 	call	4314 <_free_r>
    4118:	d8c00117 	ldw	r3,4(sp)
    411c:	84400017 	ldw	r17,0(r16)
    4120:	80000c15 	stw	zero,48(r16)
    4124:	80800517 	ldw	r2,20(r16)
    4128:	87000417 	ldw	fp,16(r16)
    412c:	98e7883a 	add	r19,r19,r3
    4130:	d8800015 	stw	r2,0(sp)
    4134:	00000106 	br	413c <_fread_r+0x1bc>
    4138:	90001e26 	beq	r18,zero,41b4 <_fread_r+0x234>
    413c:	84c00415 	stw	r19,16(r16)
    4140:	84800515 	stw	r18,20(r16)
    4144:	84c00015 	stw	r19,0(r16)
    4148:	a009883a 	mov	r4,r20
    414c:	800b883a 	mov	r5,r16
    4150:	0005a7c0 	call	5a7c <__srefill_r>
    4154:	d9000017 	ldw	r4,0(sp)
    4158:	80c00117 	ldw	r3,4(r16)
    415c:	87000415 	stw	fp,16(r16)
    4160:	81000515 	stw	r4,20(r16)
    4164:	84400015 	stw	r17,0(r16)
    4168:	80000115 	stw	zero,4(r16)
    416c:	90e5c83a 	sub	r18,r18,r3
    4170:	98e7883a 	add	r19,r19,r3
    4174:	103ff026 	beq	r2,zero,4138 <__alt_data_end+0xfffe4138>
    4178:	b80b883a 	mov	r5,r23
    417c:	b489c83a 	sub	r4,r22,r18
    4180:	00036240 	call	3624 <__udivsi3>
    4184:	003fbe06 	br	4080 <__alt_data_end+0xfffe4080>
    4188:	80000115 	stw	zero,4(r16)
    418c:	0009883a 	mov	r4,zero
    4190:	0023883a 	mov	r17,zero
    4194:	003f9e06 	br	4010 <__alt_data_end+0xfffe4010>
    4198:	a009883a 	mov	r4,r20
    419c:	0003e240 	call	3e24 <__sinit>
    41a0:	8080030b 	ldhu	r2,12(r16)
    41a4:	10c8000c 	andi	r3,r2,8192
    41a8:	183f961e 	bne	r3,zero,4004 <__alt_data_end+0xfffe4004>
    41ac:	003f8f06 	br	3fec <__alt_data_end+0xfffe3fec>
    41b0:	903fdc1e 	bne	r18,zero,4124 <__alt_data_end+0xfffe4124>
    41b4:	a805883a 	mov	r2,r21
    41b8:	003fb106 	br	4080 <__alt_data_end+0xfffe4080>

000041bc <fread>:
    41bc:	defffe04 	addi	sp,sp,-8
    41c0:	00800074 	movhi	r2,1
    41c4:	d9c00015 	stw	r7,0(sp)
    41c8:	108be504 	addi	r2,r2,12180
    41cc:	300f883a 	mov	r7,r6
    41d0:	280d883a 	mov	r6,r5
    41d4:	200b883a 	mov	r5,r4
    41d8:	11000017 	ldw	r4,0(r2)
    41dc:	dfc00115 	stw	ra,4(sp)
    41e0:	0003f800 	call	3f80 <_fread_r>
    41e4:	dfc00117 	ldw	ra,4(sp)
    41e8:	dec00204 	addi	sp,sp,8
    41ec:	f800283a 	ret

000041f0 <_malloc_trim_r>:
    41f0:	defffb04 	addi	sp,sp,-20
    41f4:	dcc00315 	stw	r19,12(sp)
    41f8:	04c00074 	movhi	r19,1
    41fc:	dc800215 	stw	r18,8(sp)
    4200:	dc400115 	stw	r17,4(sp)
    4204:	dc000015 	stw	r16,0(sp)
    4208:	dfc00415 	stw	ra,16(sp)
    420c:	2821883a 	mov	r16,r5
    4210:	9cc64204 	addi	r19,r19,6408
    4214:	2025883a 	mov	r18,r4
    4218:	000f0c40 	call	f0c4 <__malloc_lock>
    421c:	98800217 	ldw	r2,8(r19)
    4220:	14400117 	ldw	r17,4(r2)
    4224:	00bfff04 	movi	r2,-4
    4228:	88a2703a 	and	r17,r17,r2
    422c:	8c21c83a 	sub	r16,r17,r16
    4230:	8403fbc4 	addi	r16,r16,4079
    4234:	8020d33a 	srli	r16,r16,12
    4238:	0083ffc4 	movi	r2,4095
    423c:	843fffc4 	addi	r16,r16,-1
    4240:	8020933a 	slli	r16,r16,12
    4244:	1400060e 	bge	r2,r16,4260 <_malloc_trim_r+0x70>
    4248:	000b883a 	mov	r5,zero
    424c:	9009883a 	mov	r4,r18
    4250:	0005c500 	call	5c50 <_sbrk_r>
    4254:	98c00217 	ldw	r3,8(r19)
    4258:	1c47883a 	add	r3,r3,r17
    425c:	10c00a26 	beq	r2,r3,4288 <_malloc_trim_r+0x98>
    4260:	9009883a 	mov	r4,r18
    4264:	000f0e80 	call	f0e8 <__malloc_unlock>
    4268:	0005883a 	mov	r2,zero
    426c:	dfc00417 	ldw	ra,16(sp)
    4270:	dcc00317 	ldw	r19,12(sp)
    4274:	dc800217 	ldw	r18,8(sp)
    4278:	dc400117 	ldw	r17,4(sp)
    427c:	dc000017 	ldw	r16,0(sp)
    4280:	dec00504 	addi	sp,sp,20
    4284:	f800283a 	ret
    4288:	040bc83a 	sub	r5,zero,r16
    428c:	9009883a 	mov	r4,r18
    4290:	0005c500 	call	5c50 <_sbrk_r>
    4294:	00ffffc4 	movi	r3,-1
    4298:	10c00d26 	beq	r2,r3,42d0 <_malloc_trim_r+0xe0>
    429c:	00c00074 	movhi	r3,1
    42a0:	18d2bd04 	addi	r3,r3,19188
    42a4:	18800017 	ldw	r2,0(r3)
    42a8:	99000217 	ldw	r4,8(r19)
    42ac:	8c23c83a 	sub	r17,r17,r16
    42b0:	8c400054 	ori	r17,r17,1
    42b4:	1421c83a 	sub	r16,r2,r16
    42b8:	24400115 	stw	r17,4(r4)
    42bc:	9009883a 	mov	r4,r18
    42c0:	1c000015 	stw	r16,0(r3)
    42c4:	000f0e80 	call	f0e8 <__malloc_unlock>
    42c8:	00800044 	movi	r2,1
    42cc:	003fe706 	br	426c <__alt_data_end+0xfffe426c>
    42d0:	000b883a 	mov	r5,zero
    42d4:	9009883a 	mov	r4,r18
    42d8:	0005c500 	call	5c50 <_sbrk_r>
    42dc:	99000217 	ldw	r4,8(r19)
    42e0:	014003c4 	movi	r5,15
    42e4:	1107c83a 	sub	r3,r2,r4
    42e8:	28ffdd0e 	bge	r5,r3,4260 <__alt_data_end+0xfffe4260>
    42ec:	01400074 	movhi	r5,1
    42f0:	294be604 	addi	r5,r5,12184
    42f4:	29400017 	ldw	r5,0(r5)
    42f8:	18c00054 	ori	r3,r3,1
    42fc:	20c00115 	stw	r3,4(r4)
    4300:	00c00074 	movhi	r3,1
    4304:	1145c83a 	sub	r2,r2,r5
    4308:	18d2bd04 	addi	r3,r3,19188
    430c:	18800015 	stw	r2,0(r3)
    4310:	003fd306 	br	4260 <__alt_data_end+0xfffe4260>

00004314 <_free_r>:
    4314:	28004126 	beq	r5,zero,441c <_free_r+0x108>
    4318:	defffd04 	addi	sp,sp,-12
    431c:	dc400115 	stw	r17,4(sp)
    4320:	dc000015 	stw	r16,0(sp)
    4324:	2023883a 	mov	r17,r4
    4328:	2821883a 	mov	r16,r5
    432c:	dfc00215 	stw	ra,8(sp)
    4330:	000f0c40 	call	f0c4 <__malloc_lock>
    4334:	81ffff17 	ldw	r7,-4(r16)
    4338:	00bfff84 	movi	r2,-2
    433c:	01000074 	movhi	r4,1
    4340:	81bffe04 	addi	r6,r16,-8
    4344:	3884703a 	and	r2,r7,r2
    4348:	21064204 	addi	r4,r4,6408
    434c:	308b883a 	add	r5,r6,r2
    4350:	2a400117 	ldw	r9,4(r5)
    4354:	22000217 	ldw	r8,8(r4)
    4358:	00ffff04 	movi	r3,-4
    435c:	48c6703a 	and	r3,r9,r3
    4360:	2a005726 	beq	r5,r8,44c0 <_free_r+0x1ac>
    4364:	28c00115 	stw	r3,4(r5)
    4368:	39c0004c 	andi	r7,r7,1
    436c:	3800091e 	bne	r7,zero,4394 <_free_r+0x80>
    4370:	823ffe17 	ldw	r8,-8(r16)
    4374:	22400204 	addi	r9,r4,8
    4378:	320dc83a 	sub	r6,r6,r8
    437c:	31c00217 	ldw	r7,8(r6)
    4380:	1205883a 	add	r2,r2,r8
    4384:	3a406526 	beq	r7,r9,451c <_free_r+0x208>
    4388:	32000317 	ldw	r8,12(r6)
    438c:	3a000315 	stw	r8,12(r7)
    4390:	41c00215 	stw	r7,8(r8)
    4394:	28cf883a 	add	r7,r5,r3
    4398:	39c00117 	ldw	r7,4(r7)
    439c:	39c0004c 	andi	r7,r7,1
    43a0:	38003a26 	beq	r7,zero,448c <_free_r+0x178>
    43a4:	10c00054 	ori	r3,r2,1
    43a8:	30c00115 	stw	r3,4(r6)
    43ac:	3087883a 	add	r3,r6,r2
    43b0:	18800015 	stw	r2,0(r3)
    43b4:	00c07fc4 	movi	r3,511
    43b8:	18801936 	bltu	r3,r2,4420 <_free_r+0x10c>
    43bc:	1004d0fa 	srli	r2,r2,3
    43c0:	01c00044 	movi	r7,1
    43c4:	21400117 	ldw	r5,4(r4)
    43c8:	10c00044 	addi	r3,r2,1
    43cc:	18c7883a 	add	r3,r3,r3
    43d0:	1005d0ba 	srai	r2,r2,2
    43d4:	18c7883a 	add	r3,r3,r3
    43d8:	18c7883a 	add	r3,r3,r3
    43dc:	1907883a 	add	r3,r3,r4
    43e0:	3884983a 	sll	r2,r7,r2
    43e4:	19c00017 	ldw	r7,0(r3)
    43e8:	1a3ffe04 	addi	r8,r3,-8
    43ec:	1144b03a 	or	r2,r2,r5
    43f0:	32000315 	stw	r8,12(r6)
    43f4:	31c00215 	stw	r7,8(r6)
    43f8:	20800115 	stw	r2,4(r4)
    43fc:	19800015 	stw	r6,0(r3)
    4400:	39800315 	stw	r6,12(r7)
    4404:	8809883a 	mov	r4,r17
    4408:	dfc00217 	ldw	ra,8(sp)
    440c:	dc400117 	ldw	r17,4(sp)
    4410:	dc000017 	ldw	r16,0(sp)
    4414:	dec00304 	addi	sp,sp,12
    4418:	000f0e81 	jmpi	f0e8 <__malloc_unlock>
    441c:	f800283a 	ret
    4420:	100ad27a 	srli	r5,r2,9
    4424:	00c00104 	movi	r3,4
    4428:	19404a36 	bltu	r3,r5,4554 <_free_r+0x240>
    442c:	100ad1ba 	srli	r5,r2,6
    4430:	28c00e44 	addi	r3,r5,57
    4434:	18c7883a 	add	r3,r3,r3
    4438:	29400e04 	addi	r5,r5,56
    443c:	18c7883a 	add	r3,r3,r3
    4440:	18c7883a 	add	r3,r3,r3
    4444:	1909883a 	add	r4,r3,r4
    4448:	20c00017 	ldw	r3,0(r4)
    444c:	01c00074 	movhi	r7,1
    4450:	213ffe04 	addi	r4,r4,-8
    4454:	39c64204 	addi	r7,r7,6408
    4458:	20c04426 	beq	r4,r3,456c <_free_r+0x258>
    445c:	01ffff04 	movi	r7,-4
    4460:	19400117 	ldw	r5,4(r3)
    4464:	29ca703a 	and	r5,r5,r7
    4468:	1140022e 	bgeu	r2,r5,4474 <_free_r+0x160>
    446c:	18c00217 	ldw	r3,8(r3)
    4470:	20fffb1e 	bne	r4,r3,4460 <__alt_data_end+0xfffe4460>
    4474:	19000317 	ldw	r4,12(r3)
    4478:	31000315 	stw	r4,12(r6)
    447c:	30c00215 	stw	r3,8(r6)
    4480:	21800215 	stw	r6,8(r4)
    4484:	19800315 	stw	r6,12(r3)
    4488:	003fde06 	br	4404 <__alt_data_end+0xfffe4404>
    448c:	29c00217 	ldw	r7,8(r5)
    4490:	10c5883a 	add	r2,r2,r3
    4494:	00c00074 	movhi	r3,1
    4498:	18c64404 	addi	r3,r3,6416
    449c:	38c03b26 	beq	r7,r3,458c <_free_r+0x278>
    44a0:	2a000317 	ldw	r8,12(r5)
    44a4:	11400054 	ori	r5,r2,1
    44a8:	3087883a 	add	r3,r6,r2
    44ac:	3a000315 	stw	r8,12(r7)
    44b0:	41c00215 	stw	r7,8(r8)
    44b4:	31400115 	stw	r5,4(r6)
    44b8:	18800015 	stw	r2,0(r3)
    44bc:	003fbd06 	br	43b4 <__alt_data_end+0xfffe43b4>
    44c0:	39c0004c 	andi	r7,r7,1
    44c4:	10c5883a 	add	r2,r2,r3
    44c8:	3800071e 	bne	r7,zero,44e8 <_free_r+0x1d4>
    44cc:	81fffe17 	ldw	r7,-8(r16)
    44d0:	31cdc83a 	sub	r6,r6,r7
    44d4:	30c00317 	ldw	r3,12(r6)
    44d8:	31400217 	ldw	r5,8(r6)
    44dc:	11c5883a 	add	r2,r2,r7
    44e0:	28c00315 	stw	r3,12(r5)
    44e4:	19400215 	stw	r5,8(r3)
    44e8:	10c00054 	ori	r3,r2,1
    44ec:	30c00115 	stw	r3,4(r6)
    44f0:	00c00074 	movhi	r3,1
    44f4:	18cbe704 	addi	r3,r3,12188
    44f8:	18c00017 	ldw	r3,0(r3)
    44fc:	21800215 	stw	r6,8(r4)
    4500:	10ffc036 	bltu	r2,r3,4404 <__alt_data_end+0xfffe4404>
    4504:	00800074 	movhi	r2,1
    4508:	1092b204 	addi	r2,r2,19144
    450c:	11400017 	ldw	r5,0(r2)
    4510:	8809883a 	mov	r4,r17
    4514:	00041f00 	call	41f0 <_malloc_trim_r>
    4518:	003fba06 	br	4404 <__alt_data_end+0xfffe4404>
    451c:	28c9883a 	add	r4,r5,r3
    4520:	21000117 	ldw	r4,4(r4)
    4524:	2100004c 	andi	r4,r4,1
    4528:	2000391e 	bne	r4,zero,4610 <_free_r+0x2fc>
    452c:	29c00217 	ldw	r7,8(r5)
    4530:	29000317 	ldw	r4,12(r5)
    4534:	1885883a 	add	r2,r3,r2
    4538:	10c00054 	ori	r3,r2,1
    453c:	39000315 	stw	r4,12(r7)
    4540:	21c00215 	stw	r7,8(r4)
    4544:	30c00115 	stw	r3,4(r6)
    4548:	308d883a 	add	r6,r6,r2
    454c:	30800015 	stw	r2,0(r6)
    4550:	003fac06 	br	4404 <__alt_data_end+0xfffe4404>
    4554:	00c00504 	movi	r3,20
    4558:	19401536 	bltu	r3,r5,45b0 <_free_r+0x29c>
    455c:	28c01704 	addi	r3,r5,92
    4560:	18c7883a 	add	r3,r3,r3
    4564:	294016c4 	addi	r5,r5,91
    4568:	003fb406 	br	443c <__alt_data_end+0xfffe443c>
    456c:	280bd0ba 	srai	r5,r5,2
    4570:	00c00044 	movi	r3,1
    4574:	38800117 	ldw	r2,4(r7)
    4578:	194a983a 	sll	r5,r3,r5
    457c:	2007883a 	mov	r3,r4
    4580:	2884b03a 	or	r2,r5,r2
    4584:	38800115 	stw	r2,4(r7)
    4588:	003fbb06 	br	4478 <__alt_data_end+0xfffe4478>
    458c:	21800515 	stw	r6,20(r4)
    4590:	21800415 	stw	r6,16(r4)
    4594:	10c00054 	ori	r3,r2,1
    4598:	31c00315 	stw	r7,12(r6)
    459c:	31c00215 	stw	r7,8(r6)
    45a0:	30c00115 	stw	r3,4(r6)
    45a4:	308d883a 	add	r6,r6,r2
    45a8:	30800015 	stw	r2,0(r6)
    45ac:	003f9506 	br	4404 <__alt_data_end+0xfffe4404>
    45b0:	00c01504 	movi	r3,84
    45b4:	19400536 	bltu	r3,r5,45cc <_free_r+0x2b8>
    45b8:	100ad33a 	srli	r5,r2,12
    45bc:	28c01bc4 	addi	r3,r5,111
    45c0:	18c7883a 	add	r3,r3,r3
    45c4:	29401b84 	addi	r5,r5,110
    45c8:	003f9c06 	br	443c <__alt_data_end+0xfffe443c>
    45cc:	00c05504 	movi	r3,340
    45d0:	19400536 	bltu	r3,r5,45e8 <_free_r+0x2d4>
    45d4:	100ad3fa 	srli	r5,r2,15
    45d8:	28c01e04 	addi	r3,r5,120
    45dc:	18c7883a 	add	r3,r3,r3
    45e0:	29401dc4 	addi	r5,r5,119
    45e4:	003f9506 	br	443c <__alt_data_end+0xfffe443c>
    45e8:	00c15504 	movi	r3,1364
    45ec:	19400536 	bltu	r3,r5,4604 <_free_r+0x2f0>
    45f0:	100ad4ba 	srli	r5,r2,18
    45f4:	28c01f44 	addi	r3,r5,125
    45f8:	18c7883a 	add	r3,r3,r3
    45fc:	29401f04 	addi	r5,r5,124
    4600:	003f8e06 	br	443c <__alt_data_end+0xfffe443c>
    4604:	00c03f84 	movi	r3,254
    4608:	01401f84 	movi	r5,126
    460c:	003f8b06 	br	443c <__alt_data_end+0xfffe443c>
    4610:	10c00054 	ori	r3,r2,1
    4614:	30c00115 	stw	r3,4(r6)
    4618:	308d883a 	add	r6,r6,r2
    461c:	30800015 	stw	r2,0(r6)
    4620:	003f7806 	br	4404 <__alt_data_end+0xfffe4404>

00004624 <_fseek_r>:
    4624:	00046441 	jmpi	4644 <_fseeko_r>

00004628 <fseek>:
    4628:	00800074 	movhi	r2,1
    462c:	108be504 	addi	r2,r2,12180
    4630:	300f883a 	mov	r7,r6
    4634:	280d883a 	mov	r6,r5
    4638:	200b883a 	mov	r5,r4
    463c:	11000017 	ldw	r4,0(r2)
    4640:	00046441 	jmpi	4644 <_fseeko_r>

00004644 <_fseeko_r>:
    4644:	deffe804 	addi	sp,sp,-96
    4648:	dd401415 	stw	r21,80(sp)
    464c:	dc801115 	stw	r18,68(sp)
    4650:	dc401015 	stw	r17,64(sp)
    4654:	dc000f15 	stw	r16,60(sp)
    4658:	dfc01715 	stw	ra,92(sp)
    465c:	ddc01615 	stw	r23,88(sp)
    4660:	dd801515 	stw	r22,84(sp)
    4664:	dd001315 	stw	r20,76(sp)
    4668:	dcc01215 	stw	r19,72(sp)
    466c:	2023883a 	mov	r17,r4
    4670:	2821883a 	mov	r16,r5
    4674:	302b883a 	mov	r21,r6
    4678:	3825883a 	mov	r18,r7
    467c:	20000226 	beq	r4,zero,4688 <_fseeko_r+0x44>
    4680:	20800e17 	ldw	r2,56(r4)
    4684:	10005a26 	beq	r2,zero,47f0 <_fseeko_r+0x1ac>
    4688:	8080030b 	ldhu	r2,12(r16)
    468c:	00c04204 	movi	r3,264
    4690:	1080420c 	andi	r2,r2,264
    4694:	10c05b26 	beq	r2,r3,4804 <_fseeko_r+0x1c0>
    4698:	85000a17 	ldw	r20,40(r16)
    469c:	a000f626 	beq	r20,zero,4a78 <_fseeko_r+0x434>
    46a0:	00800044 	movi	r2,1
    46a4:	90803e26 	beq	r18,r2,47a0 <_fseeko_r+0x15c>
    46a8:	00800084 	movi	r2,2
    46ac:	90801026 	beq	r18,r2,46f0 <_fseeko_r+0xac>
    46b0:	90000f26 	beq	r18,zero,46f0 <_fseeko_r+0xac>
    46b4:	00800584 	movi	r2,22
    46b8:	88800015 	stw	r2,0(r17)
    46bc:	04ffffc4 	movi	r19,-1
    46c0:	9805883a 	mov	r2,r19
    46c4:	dfc01717 	ldw	ra,92(sp)
    46c8:	ddc01617 	ldw	r23,88(sp)
    46cc:	dd801517 	ldw	r22,84(sp)
    46d0:	dd401417 	ldw	r21,80(sp)
    46d4:	dd001317 	ldw	r20,76(sp)
    46d8:	dcc01217 	ldw	r19,72(sp)
    46dc:	dc801117 	ldw	r18,68(sp)
    46e0:	dc401017 	ldw	r17,64(sp)
    46e4:	dc000f17 	ldw	r16,60(sp)
    46e8:	dec01804 	addi	sp,sp,96
    46ec:	f800283a 	ret
    46f0:	80800417 	ldw	r2,16(r16)
    46f4:	002f883a 	mov	r23,zero
    46f8:	0027883a 	mov	r19,zero
    46fc:	1000cb26 	beq	r2,zero,4a2c <_fseeko_r+0x3e8>
    4700:	8080030b 	ldhu	r2,12(r16)
    4704:	10c2068c 	andi	r3,r2,2074
    4708:	1800071e 	bne	r3,zero,4728 <_fseeko_r+0xe4>
    470c:	10c1000c 	andi	r3,r2,1024
    4710:	1800451e 	bne	r3,zero,4828 <_fseeko_r+0x1e4>
    4714:	00c00034 	movhi	r3,0
    4718:	18d75f04 	addi	r3,r3,23932
    471c:	a0c0b726 	beq	r20,r3,49fc <_fseeko_r+0x3b8>
    4720:	10820014 	ori	r2,r2,2048
    4724:	8080030d 	sth	r2,12(r16)
    4728:	800b883a 	mov	r5,r16
    472c:	8809883a 	mov	r4,r17
    4730:	0003a380 	call	3a38 <_fflush_r>
    4734:	1027883a 	mov	r19,r2
    4738:	103fe01e 	bne	r2,zero,46bc <__alt_data_end+0xfffe46bc>
    473c:	81400717 	ldw	r5,28(r16)
    4740:	900f883a 	mov	r7,r18
    4744:	a80d883a 	mov	r6,r21
    4748:	8809883a 	mov	r4,r17
    474c:	a03ee83a 	callr	r20
    4750:	00ffffc4 	movi	r3,-1
    4754:	10ffd926 	beq	r2,r3,46bc <__alt_data_end+0xfffe46bc>
    4758:	81400c17 	ldw	r5,48(r16)
    475c:	28000526 	beq	r5,zero,4774 <_fseeko_r+0x130>
    4760:	80801004 	addi	r2,r16,64
    4764:	28800226 	beq	r5,r2,4770 <_fseeko_r+0x12c>
    4768:	8809883a 	mov	r4,r17
    476c:	00043140 	call	4314 <_free_r>
    4770:	80000c15 	stw	zero,48(r16)
    4774:	8080030b 	ldhu	r2,12(r16)
    4778:	80c00417 	ldw	r3,16(r16)
    477c:	80000115 	stw	zero,4(r16)
    4780:	10bdf7cc 	andi	r2,r2,63455
    4784:	80c00015 	stw	r3,0(r16)
    4788:	8080030d 	sth	r2,12(r16)
    478c:	01800204 	movi	r6,8
    4790:	000b883a 	mov	r5,zero
    4794:	81001704 	addi	r4,r16,92
    4798:	00057980 	call	5798 <memset>
    479c:	003fc806 	br	46c0 <__alt_data_end+0xfffe46c0>
    47a0:	800b883a 	mov	r5,r16
    47a4:	8809883a 	mov	r4,r17
    47a8:	0003a380 	call	3a38 <_fflush_r>
    47ac:	8080030b 	ldhu	r2,12(r16)
    47b0:	10c4000c 	andi	r3,r2,4096
    47b4:	18008726 	beq	r3,zero,49d4 <_fseeko_r+0x390>
    47b8:	84c01417 	ldw	r19,80(r16)
    47bc:	10c0010c 	andi	r3,r2,4
    47c0:	1800431e 	bne	r3,zero,48d0 <_fseeko_r+0x28c>
    47c4:	1080020c 	andi	r2,r2,8
    47c8:	10008026 	beq	r2,zero,49cc <_fseeko_r+0x388>
    47cc:	80c00017 	ldw	r3,0(r16)
    47d0:	80800417 	ldw	r2,16(r16)
    47d4:	18000226 	beq	r3,zero,47e0 <_fseeko_r+0x19c>
    47d8:	1887c83a 	sub	r3,r3,r2
    47dc:	98e7883a 	add	r19,r19,r3
    47e0:	aceb883a 	add	r21,r21,r19
    47e4:	05c00044 	movi	r23,1
    47e8:	0025883a 	mov	r18,zero
    47ec:	003fc306 	br	46fc <__alt_data_end+0xfffe46fc>
    47f0:	0003e240 	call	3e24 <__sinit>
    47f4:	8080030b 	ldhu	r2,12(r16)
    47f8:	00c04204 	movi	r3,264
    47fc:	1080420c 	andi	r2,r2,264
    4800:	10ffa51e 	bne	r2,r3,4698 <__alt_data_end+0xfffe4698>
    4804:	800b883a 	mov	r5,r16
    4808:	8809883a 	mov	r4,r17
    480c:	0003a380 	call	3a38 <_fflush_r>
    4810:	003fa106 	br	4698 <__alt_data_end+0xfffe4698>
    4814:	8080030b 	ldhu	r2,12(r16)
    4818:	00c10004 	movi	r3,1024
    481c:	80c01315 	stw	r3,76(r16)
    4820:	10c4b03a 	or	r2,r2,r3
    4824:	8080030d 	sth	r2,12(r16)
    4828:	9000311e 	bne	r18,zero,48f0 <_fseeko_r+0x2ac>
    482c:	a82d883a 	mov	r22,r21
    4830:	b800371e 	bne	r23,zero,4910 <_fseeko_r+0x2cc>
    4834:	8080030b 	ldhu	r2,12(r16)
    4838:	1084000c 	andi	r2,r2,4096
    483c:	10007f26 	beq	r2,zero,4a3c <_fseeko_r+0x3f8>
    4840:	80801417 	ldw	r2,80(r16)
    4844:	81800117 	ldw	r6,4(r16)
    4848:	81400c17 	ldw	r5,48(r16)
    484c:	11a7c83a 	sub	r19,r2,r6
    4850:	28008226 	beq	r5,zero,4a5c <_fseeko_r+0x418>
    4854:	81c00f17 	ldw	r7,60(r16)
    4858:	99e7c83a 	sub	r19,r19,r7
    485c:	81000e17 	ldw	r4,56(r16)
    4860:	80800417 	ldw	r2,16(r16)
    4864:	99a7883a 	add	r19,r19,r6
    4868:	2087c83a 	sub	r3,r4,r2
    486c:	98e7c83a 	sub	r19,r19,r3
    4870:	38c7883a 	add	r3,r7,r3
    4874:	b4c02b16 	blt	r22,r19,4924 <_fseeko_r+0x2e0>
    4878:	98c9883a 	add	r4,r19,r3
    487c:	b100292e 	bgeu	r22,r4,4924 <_fseeko_r+0x2e0>
    4880:	b4e7c83a 	sub	r19,r22,r19
    4884:	14c5883a 	add	r2,r2,r19
    4888:	1ce7c83a 	sub	r19,r3,r19
    488c:	80800015 	stw	r2,0(r16)
    4890:	84c00115 	stw	r19,4(r16)
    4894:	28000526 	beq	r5,zero,48ac <_fseeko_r+0x268>
    4898:	80801004 	addi	r2,r16,64
    489c:	28800226 	beq	r5,r2,48a8 <_fseeko_r+0x264>
    48a0:	8809883a 	mov	r4,r17
    48a4:	00043140 	call	4314 <_free_r>
    48a8:	80000c15 	stw	zero,48(r16)
    48ac:	8080030b 	ldhu	r2,12(r16)
    48b0:	01800204 	movi	r6,8
    48b4:	000b883a 	mov	r5,zero
    48b8:	10bff7cc 	andi	r2,r2,65503
    48bc:	8080030d 	sth	r2,12(r16)
    48c0:	81001704 	addi	r4,r16,92
    48c4:	00057980 	call	5798 <memset>
    48c8:	0027883a 	mov	r19,zero
    48cc:	003f7c06 	br	46c0 <__alt_data_end+0xfffe46c0>
    48d0:	80c00117 	ldw	r3,4(r16)
    48d4:	80800c17 	ldw	r2,48(r16)
    48d8:	98e7c83a 	sub	r19,r19,r3
    48dc:	10003b26 	beq	r2,zero,49cc <_fseeko_r+0x388>
    48e0:	80c00f17 	ldw	r3,60(r16)
    48e4:	80800417 	ldw	r2,16(r16)
    48e8:	98e7c83a 	sub	r19,r19,r3
    48ec:	003fbc06 	br	47e0 <__alt_data_end+0xfffe47e0>
    48f0:	8140038f 	ldh	r5,14(r16)
    48f4:	d80d883a 	mov	r6,sp
    48f8:	8809883a 	mov	r4,r17
    48fc:	0004aa40 	call	4aa4 <_fstat_r>
    4900:	103f891e 	bne	r2,zero,4728 <__alt_data_end+0xfffe4728>
    4904:	dd800417 	ldw	r22,16(sp)
    4908:	adad883a 	add	r22,r21,r22
    490c:	b83fc926 	beq	r23,zero,4834 <__alt_data_end+0xfffe4834>
    4910:	81400c17 	ldw	r5,48(r16)
    4914:	81800117 	ldw	r6,4(r16)
    4918:	28005026 	beq	r5,zero,4a5c <_fseeko_r+0x418>
    491c:	81c00f17 	ldw	r7,60(r16)
    4920:	003fce06 	br	485c <__alt_data_end+0xfffe485c>
    4924:	84c01317 	ldw	r19,76(r16)
    4928:	81400717 	ldw	r5,28(r16)
    492c:	000f883a 	mov	r7,zero
    4930:	04e7c83a 	sub	r19,zero,r19
    4934:	9da6703a 	and	r19,r19,r22
    4938:	980d883a 	mov	r6,r19
    493c:	8809883a 	mov	r4,r17
    4940:	a03ee83a 	callr	r20
    4944:	00ffffc4 	movi	r3,-1
    4948:	10ff7726 	beq	r2,r3,4728 <__alt_data_end+0xfffe4728>
    494c:	80800417 	ldw	r2,16(r16)
    4950:	81400c17 	ldw	r5,48(r16)
    4954:	80000115 	stw	zero,4(r16)
    4958:	80800015 	stw	r2,0(r16)
    495c:	28000526 	beq	r5,zero,4974 <_fseeko_r+0x330>
    4960:	80801004 	addi	r2,r16,64
    4964:	28800226 	beq	r5,r2,4970 <_fseeko_r+0x32c>
    4968:	8809883a 	mov	r4,r17
    496c:	00043140 	call	4314 <_free_r>
    4970:	80000c15 	stw	zero,48(r16)
    4974:	8080030b 	ldhu	r2,12(r16)
    4978:	b4e7c83a 	sub	r19,r22,r19
    497c:	10bff7cc 	andi	r2,r2,65503
    4980:	8080030d 	sth	r2,12(r16)
    4984:	98000b26 	beq	r19,zero,49b4 <_fseeko_r+0x370>
    4988:	800b883a 	mov	r5,r16
    498c:	8809883a 	mov	r4,r17
    4990:	0005a7c0 	call	5a7c <__srefill_r>
    4994:	103f641e 	bne	r2,zero,4728 <__alt_data_end+0xfffe4728>
    4998:	80800117 	ldw	r2,4(r16)
    499c:	14ff6236 	bltu	r2,r19,4728 <__alt_data_end+0xfffe4728>
    49a0:	80c00017 	ldw	r3,0(r16)
    49a4:	14c5c83a 	sub	r2,r2,r19
    49a8:	80800115 	stw	r2,4(r16)
    49ac:	1ce7883a 	add	r19,r3,r19
    49b0:	84c00015 	stw	r19,0(r16)
    49b4:	01800204 	movi	r6,8
    49b8:	000b883a 	mov	r5,zero
    49bc:	81001704 	addi	r4,r16,92
    49c0:	00057980 	call	5798 <memset>
    49c4:	0027883a 	mov	r19,zero
    49c8:	003f3d06 	br	46c0 <__alt_data_end+0xfffe46c0>
    49cc:	80800417 	ldw	r2,16(r16)
    49d0:	003f8306 	br	47e0 <__alt_data_end+0xfffe47e0>
    49d4:	81400717 	ldw	r5,28(r16)
    49d8:	900f883a 	mov	r7,r18
    49dc:	000d883a 	mov	r6,zero
    49e0:	8809883a 	mov	r4,r17
    49e4:	a03ee83a 	callr	r20
    49e8:	1027883a 	mov	r19,r2
    49ec:	00bfffc4 	movi	r2,-1
    49f0:	98bf3226 	beq	r19,r2,46bc <__alt_data_end+0xfffe46bc>
    49f4:	8080030b 	ldhu	r2,12(r16)
    49f8:	003f7006 	br	47bc <__alt_data_end+0xfffe47bc>
    49fc:	8140038f 	ldh	r5,14(r16)
    4a00:	283f4716 	blt	r5,zero,4720 <__alt_data_end+0xfffe4720>
    4a04:	d80d883a 	mov	r6,sp
    4a08:	8809883a 	mov	r4,r17
    4a0c:	0004aa40 	call	4aa4 <_fstat_r>
    4a10:	1000041e 	bne	r2,zero,4a24 <_fseeko_r+0x3e0>
    4a14:	d8800117 	ldw	r2,4(sp)
    4a18:	00e00014 	movui	r3,32768
    4a1c:	10bc000c 	andi	r2,r2,61440
    4a20:	10ff7c26 	beq	r2,r3,4814 <__alt_data_end+0xfffe4814>
    4a24:	8080030b 	ldhu	r2,12(r16)
    4a28:	003f3d06 	br	4720 <__alt_data_end+0xfffe4720>
    4a2c:	800b883a 	mov	r5,r16
    4a30:	8809883a 	mov	r4,r17
    4a34:	0004c880 	call	4c88 <__smakebuf_r>
    4a38:	003f3106 	br	4700 <__alt_data_end+0xfffe4700>
    4a3c:	81400717 	ldw	r5,28(r16)
    4a40:	01c00044 	movi	r7,1
    4a44:	000d883a 	mov	r6,zero
    4a48:	8809883a 	mov	r4,r17
    4a4c:	a03ee83a 	callr	r20
    4a50:	00ffffc4 	movi	r3,-1
    4a54:	10ff7b1e 	bne	r2,r3,4844 <__alt_data_end+0xfffe4844>
    4a58:	003f3306 	br	4728 <__alt_data_end+0xfffe4728>
    4a5c:	80c00017 	ldw	r3,0(r16)
    4a60:	80800417 	ldw	r2,16(r16)
    4a64:	000b883a 	mov	r5,zero
    4a68:	1887c83a 	sub	r3,r3,r2
    4a6c:	98e7c83a 	sub	r19,r19,r3
    4a70:	30c7883a 	add	r3,r6,r3
    4a74:	003f7f06 	br	4874 <__alt_data_end+0xfffe4874>
    4a78:	00800744 	movi	r2,29
    4a7c:	88800015 	stw	r2,0(r17)
    4a80:	04ffffc4 	movi	r19,-1
    4a84:	003f0e06 	br	46c0 <__alt_data_end+0xfffe46c0>

00004a88 <fseeko>:
    4a88:	00800074 	movhi	r2,1
    4a8c:	108be504 	addi	r2,r2,12180
    4a90:	300f883a 	mov	r7,r6
    4a94:	280d883a 	mov	r6,r5
    4a98:	200b883a 	mov	r5,r4
    4a9c:	11000017 	ldw	r4,0(r2)
    4aa0:	00046441 	jmpi	4644 <_fseeko_r>

00004aa4 <_fstat_r>:
    4aa4:	defffd04 	addi	sp,sp,-12
    4aa8:	2805883a 	mov	r2,r5
    4aac:	dc000015 	stw	r16,0(sp)
    4ab0:	04000074 	movhi	r16,1
    4ab4:	dc400115 	stw	r17,4(sp)
    4ab8:	8412af04 	addi	r16,r16,19132
    4abc:	2023883a 	mov	r17,r4
    4ac0:	300b883a 	mov	r5,r6
    4ac4:	1009883a 	mov	r4,r2
    4ac8:	dfc00215 	stw	ra,8(sp)
    4acc:	80000015 	stw	zero,0(r16)
    4ad0:	000eca40 	call	eca4 <fstat>
    4ad4:	00ffffc4 	movi	r3,-1
    4ad8:	10c00526 	beq	r2,r3,4af0 <_fstat_r+0x4c>
    4adc:	dfc00217 	ldw	ra,8(sp)
    4ae0:	dc400117 	ldw	r17,4(sp)
    4ae4:	dc000017 	ldw	r16,0(sp)
    4ae8:	dec00304 	addi	sp,sp,12
    4aec:	f800283a 	ret
    4af0:	80c00017 	ldw	r3,0(r16)
    4af4:	183ff926 	beq	r3,zero,4adc <__alt_data_end+0xfffe4adc>
    4af8:	88c00015 	stw	r3,0(r17)
    4afc:	003ff706 	br	4adc <__alt_data_end+0xfffe4adc>

00004b00 <_fwalk>:
    4b00:	defff704 	addi	sp,sp,-36
    4b04:	dd000415 	stw	r20,16(sp)
    4b08:	dfc00815 	stw	ra,32(sp)
    4b0c:	ddc00715 	stw	r23,28(sp)
    4b10:	dd800615 	stw	r22,24(sp)
    4b14:	dd400515 	stw	r21,20(sp)
    4b18:	dcc00315 	stw	r19,12(sp)
    4b1c:	dc800215 	stw	r18,8(sp)
    4b20:	dc400115 	stw	r17,4(sp)
    4b24:	dc000015 	stw	r16,0(sp)
    4b28:	2500b804 	addi	r20,r4,736
    4b2c:	a0002326 	beq	r20,zero,4bbc <_fwalk+0xbc>
    4b30:	282b883a 	mov	r21,r5
    4b34:	002f883a 	mov	r23,zero
    4b38:	05800044 	movi	r22,1
    4b3c:	04ffffc4 	movi	r19,-1
    4b40:	a4400117 	ldw	r17,4(r20)
    4b44:	a4800217 	ldw	r18,8(r20)
    4b48:	8c7fffc4 	addi	r17,r17,-1
    4b4c:	88000d16 	blt	r17,zero,4b84 <_fwalk+0x84>
    4b50:	94000304 	addi	r16,r18,12
    4b54:	94800384 	addi	r18,r18,14
    4b58:	8080000b 	ldhu	r2,0(r16)
    4b5c:	8c7fffc4 	addi	r17,r17,-1
    4b60:	813ffd04 	addi	r4,r16,-12
    4b64:	b080042e 	bgeu	r22,r2,4b78 <_fwalk+0x78>
    4b68:	9080000f 	ldh	r2,0(r18)
    4b6c:	14c00226 	beq	r2,r19,4b78 <_fwalk+0x78>
    4b70:	a83ee83a 	callr	r21
    4b74:	b8aeb03a 	or	r23,r23,r2
    4b78:	84001a04 	addi	r16,r16,104
    4b7c:	94801a04 	addi	r18,r18,104
    4b80:	8cfff51e 	bne	r17,r19,4b58 <__alt_data_end+0xfffe4b58>
    4b84:	a5000017 	ldw	r20,0(r20)
    4b88:	a03fed1e 	bne	r20,zero,4b40 <__alt_data_end+0xfffe4b40>
    4b8c:	b805883a 	mov	r2,r23
    4b90:	dfc00817 	ldw	ra,32(sp)
    4b94:	ddc00717 	ldw	r23,28(sp)
    4b98:	dd800617 	ldw	r22,24(sp)
    4b9c:	dd400517 	ldw	r21,20(sp)
    4ba0:	dd000417 	ldw	r20,16(sp)
    4ba4:	dcc00317 	ldw	r19,12(sp)
    4ba8:	dc800217 	ldw	r18,8(sp)
    4bac:	dc400117 	ldw	r17,4(sp)
    4bb0:	dc000017 	ldw	r16,0(sp)
    4bb4:	dec00904 	addi	sp,sp,36
    4bb8:	f800283a 	ret
    4bbc:	002f883a 	mov	r23,zero
    4bc0:	003ff206 	br	4b8c <__alt_data_end+0xfffe4b8c>

00004bc4 <_fwalk_reent>:
    4bc4:	defff704 	addi	sp,sp,-36
    4bc8:	dd000415 	stw	r20,16(sp)
    4bcc:	dfc00815 	stw	ra,32(sp)
    4bd0:	ddc00715 	stw	r23,28(sp)
    4bd4:	dd800615 	stw	r22,24(sp)
    4bd8:	dd400515 	stw	r21,20(sp)
    4bdc:	dcc00315 	stw	r19,12(sp)
    4be0:	dc800215 	stw	r18,8(sp)
    4be4:	dc400115 	stw	r17,4(sp)
    4be8:	dc000015 	stw	r16,0(sp)
    4bec:	2500b804 	addi	r20,r4,736
    4bf0:	a0002326 	beq	r20,zero,4c80 <_fwalk_reent+0xbc>
    4bf4:	282b883a 	mov	r21,r5
    4bf8:	2027883a 	mov	r19,r4
    4bfc:	002f883a 	mov	r23,zero
    4c00:	05800044 	movi	r22,1
    4c04:	04bfffc4 	movi	r18,-1
    4c08:	a4400117 	ldw	r17,4(r20)
    4c0c:	a4000217 	ldw	r16,8(r20)
    4c10:	8c7fffc4 	addi	r17,r17,-1
    4c14:	88000c16 	blt	r17,zero,4c48 <_fwalk_reent+0x84>
    4c18:	84000304 	addi	r16,r16,12
    4c1c:	8080000b 	ldhu	r2,0(r16)
    4c20:	8c7fffc4 	addi	r17,r17,-1
    4c24:	817ffd04 	addi	r5,r16,-12
    4c28:	b080052e 	bgeu	r22,r2,4c40 <_fwalk_reent+0x7c>
    4c2c:	8080008f 	ldh	r2,2(r16)
    4c30:	9809883a 	mov	r4,r19
    4c34:	14800226 	beq	r2,r18,4c40 <_fwalk_reent+0x7c>
    4c38:	a83ee83a 	callr	r21
    4c3c:	b8aeb03a 	or	r23,r23,r2
    4c40:	84001a04 	addi	r16,r16,104
    4c44:	8cbff51e 	bne	r17,r18,4c1c <__alt_data_end+0xfffe4c1c>
    4c48:	a5000017 	ldw	r20,0(r20)
    4c4c:	a03fee1e 	bne	r20,zero,4c08 <__alt_data_end+0xfffe4c08>
    4c50:	b805883a 	mov	r2,r23
    4c54:	dfc00817 	ldw	ra,32(sp)
    4c58:	ddc00717 	ldw	r23,28(sp)
    4c5c:	dd800617 	ldw	r22,24(sp)
    4c60:	dd400517 	ldw	r21,20(sp)
    4c64:	dd000417 	ldw	r20,16(sp)
    4c68:	dcc00317 	ldw	r19,12(sp)
    4c6c:	dc800217 	ldw	r18,8(sp)
    4c70:	dc400117 	ldw	r17,4(sp)
    4c74:	dc000017 	ldw	r16,0(sp)
    4c78:	dec00904 	addi	sp,sp,36
    4c7c:	f800283a 	ret
    4c80:	002f883a 	mov	r23,zero
    4c84:	003ff206 	br	4c50 <__alt_data_end+0xfffe4c50>

00004c88 <__smakebuf_r>:
    4c88:	2880030b 	ldhu	r2,12(r5)
    4c8c:	10c0008c 	andi	r3,r2,2
    4c90:	1800411e 	bne	r3,zero,4d98 <__smakebuf_r+0x110>
    4c94:	deffec04 	addi	sp,sp,-80
    4c98:	dc000f15 	stw	r16,60(sp)
    4c9c:	2821883a 	mov	r16,r5
    4ca0:	2940038f 	ldh	r5,14(r5)
    4ca4:	dc401015 	stw	r17,64(sp)
    4ca8:	dfc01315 	stw	ra,76(sp)
    4cac:	dcc01215 	stw	r19,72(sp)
    4cb0:	dc801115 	stw	r18,68(sp)
    4cb4:	2023883a 	mov	r17,r4
    4cb8:	28001c16 	blt	r5,zero,4d2c <__smakebuf_r+0xa4>
    4cbc:	d80d883a 	mov	r6,sp
    4cc0:	0004aa40 	call	4aa4 <_fstat_r>
    4cc4:	10001816 	blt	r2,zero,4d28 <__smakebuf_r+0xa0>
    4cc8:	d8800117 	ldw	r2,4(sp)
    4ccc:	00e00014 	movui	r3,32768
    4cd0:	10bc000c 	andi	r2,r2,61440
    4cd4:	14c80020 	cmpeqi	r19,r2,8192
    4cd8:	10c03726 	beq	r2,r3,4db8 <__smakebuf_r+0x130>
    4cdc:	80c0030b 	ldhu	r3,12(r16)
    4ce0:	18c20014 	ori	r3,r3,2048
    4ce4:	80c0030d 	sth	r3,12(r16)
    4ce8:	00c80004 	movi	r3,8192
    4cec:	10c0521e 	bne	r2,r3,4e38 <__smakebuf_r+0x1b0>
    4cf0:	8140038f 	ldh	r5,14(r16)
    4cf4:	8809883a 	mov	r4,r17
    4cf8:	000a3d80 	call	a3d8 <_isatty_r>
    4cfc:	10004c26 	beq	r2,zero,4e30 <__smakebuf_r+0x1a8>
    4d00:	8080030b 	ldhu	r2,12(r16)
    4d04:	80c010c4 	addi	r3,r16,67
    4d08:	80c00015 	stw	r3,0(r16)
    4d0c:	10800054 	ori	r2,r2,1
    4d10:	8080030d 	sth	r2,12(r16)
    4d14:	00800044 	movi	r2,1
    4d18:	80c00415 	stw	r3,16(r16)
    4d1c:	80800515 	stw	r2,20(r16)
    4d20:	04810004 	movi	r18,1024
    4d24:	00000706 	br	4d44 <__smakebuf_r+0xbc>
    4d28:	8080030b 	ldhu	r2,12(r16)
    4d2c:	10c0200c 	andi	r3,r2,128
    4d30:	18001f1e 	bne	r3,zero,4db0 <__smakebuf_r+0x128>
    4d34:	04810004 	movi	r18,1024
    4d38:	10820014 	ori	r2,r2,2048
    4d3c:	8080030d 	sth	r2,12(r16)
    4d40:	0027883a 	mov	r19,zero
    4d44:	900b883a 	mov	r5,r18
    4d48:	8809883a 	mov	r4,r17
    4d4c:	0004e440 	call	4e44 <_malloc_r>
    4d50:	10002c26 	beq	r2,zero,4e04 <__smakebuf_r+0x17c>
    4d54:	80c0030b 	ldhu	r3,12(r16)
    4d58:	01000034 	movhi	r4,0
    4d5c:	210eb304 	addi	r4,r4,15052
    4d60:	89000f15 	stw	r4,60(r17)
    4d64:	18c02014 	ori	r3,r3,128
    4d68:	80c0030d 	sth	r3,12(r16)
    4d6c:	80800015 	stw	r2,0(r16)
    4d70:	80800415 	stw	r2,16(r16)
    4d74:	84800515 	stw	r18,20(r16)
    4d78:	98001a1e 	bne	r19,zero,4de4 <__smakebuf_r+0x15c>
    4d7c:	dfc01317 	ldw	ra,76(sp)
    4d80:	dcc01217 	ldw	r19,72(sp)
    4d84:	dc801117 	ldw	r18,68(sp)
    4d88:	dc401017 	ldw	r17,64(sp)
    4d8c:	dc000f17 	ldw	r16,60(sp)
    4d90:	dec01404 	addi	sp,sp,80
    4d94:	f800283a 	ret
    4d98:	288010c4 	addi	r2,r5,67
    4d9c:	28800015 	stw	r2,0(r5)
    4da0:	28800415 	stw	r2,16(r5)
    4da4:	00800044 	movi	r2,1
    4da8:	28800515 	stw	r2,20(r5)
    4dac:	f800283a 	ret
    4db0:	04801004 	movi	r18,64
    4db4:	003fe006 	br	4d38 <__alt_data_end+0xfffe4d38>
    4db8:	81000a17 	ldw	r4,40(r16)
    4dbc:	00c00034 	movhi	r3,0
    4dc0:	18d75f04 	addi	r3,r3,23932
    4dc4:	20ffc51e 	bne	r4,r3,4cdc <__alt_data_end+0xfffe4cdc>
    4dc8:	8080030b 	ldhu	r2,12(r16)
    4dcc:	04810004 	movi	r18,1024
    4dd0:	84801315 	stw	r18,76(r16)
    4dd4:	1484b03a 	or	r2,r2,r18
    4dd8:	8080030d 	sth	r2,12(r16)
    4ddc:	0027883a 	mov	r19,zero
    4de0:	003fd806 	br	4d44 <__alt_data_end+0xfffe4d44>
    4de4:	8140038f 	ldh	r5,14(r16)
    4de8:	8809883a 	mov	r4,r17
    4dec:	000a3d80 	call	a3d8 <_isatty_r>
    4df0:	103fe226 	beq	r2,zero,4d7c <__alt_data_end+0xfffe4d7c>
    4df4:	8080030b 	ldhu	r2,12(r16)
    4df8:	10800054 	ori	r2,r2,1
    4dfc:	8080030d 	sth	r2,12(r16)
    4e00:	003fde06 	br	4d7c <__alt_data_end+0xfffe4d7c>
    4e04:	8080030b 	ldhu	r2,12(r16)
    4e08:	10c0800c 	andi	r3,r2,512
    4e0c:	183fdb1e 	bne	r3,zero,4d7c <__alt_data_end+0xfffe4d7c>
    4e10:	10800094 	ori	r2,r2,2
    4e14:	80c010c4 	addi	r3,r16,67
    4e18:	8080030d 	sth	r2,12(r16)
    4e1c:	00800044 	movi	r2,1
    4e20:	80c00015 	stw	r3,0(r16)
    4e24:	80c00415 	stw	r3,16(r16)
    4e28:	80800515 	stw	r2,20(r16)
    4e2c:	003fd306 	br	4d7c <__alt_data_end+0xfffe4d7c>
    4e30:	04810004 	movi	r18,1024
    4e34:	003fc306 	br	4d44 <__alt_data_end+0xfffe4d44>
    4e38:	0027883a 	mov	r19,zero
    4e3c:	04810004 	movi	r18,1024
    4e40:	003fc006 	br	4d44 <__alt_data_end+0xfffe4d44>

00004e44 <_malloc_r>:
    4e44:	defff504 	addi	sp,sp,-44
    4e48:	dc800315 	stw	r18,12(sp)
    4e4c:	dfc00a15 	stw	ra,40(sp)
    4e50:	df000915 	stw	fp,36(sp)
    4e54:	ddc00815 	stw	r23,32(sp)
    4e58:	dd800715 	stw	r22,28(sp)
    4e5c:	dd400615 	stw	r21,24(sp)
    4e60:	dd000515 	stw	r20,20(sp)
    4e64:	dcc00415 	stw	r19,16(sp)
    4e68:	dc400215 	stw	r17,8(sp)
    4e6c:	dc000115 	stw	r16,4(sp)
    4e70:	288002c4 	addi	r2,r5,11
    4e74:	00c00584 	movi	r3,22
    4e78:	2025883a 	mov	r18,r4
    4e7c:	18807f2e 	bgeu	r3,r2,507c <_malloc_r+0x238>
    4e80:	047ffe04 	movi	r17,-8
    4e84:	1462703a 	and	r17,r2,r17
    4e88:	8800a316 	blt	r17,zero,5118 <_malloc_r+0x2d4>
    4e8c:	8940a236 	bltu	r17,r5,5118 <_malloc_r+0x2d4>
    4e90:	000f0c40 	call	f0c4 <__malloc_lock>
    4e94:	00807dc4 	movi	r2,503
    4e98:	1441e92e 	bgeu	r2,r17,5640 <_malloc_r+0x7fc>
    4e9c:	8804d27a 	srli	r2,r17,9
    4ea0:	1000a126 	beq	r2,zero,5128 <_malloc_r+0x2e4>
    4ea4:	00c00104 	movi	r3,4
    4ea8:	18811e36 	bltu	r3,r2,5324 <_malloc_r+0x4e0>
    4eac:	8804d1ba 	srli	r2,r17,6
    4eb0:	12000e44 	addi	r8,r2,57
    4eb4:	11c00e04 	addi	r7,r2,56
    4eb8:	4209883a 	add	r4,r8,r8
    4ebc:	04c00074 	movhi	r19,1
    4ec0:	2109883a 	add	r4,r4,r4
    4ec4:	9cc64204 	addi	r19,r19,6408
    4ec8:	2109883a 	add	r4,r4,r4
    4ecc:	9909883a 	add	r4,r19,r4
    4ed0:	24000117 	ldw	r16,4(r4)
    4ed4:	213ffe04 	addi	r4,r4,-8
    4ed8:	24009726 	beq	r4,r16,5138 <_malloc_r+0x2f4>
    4edc:	80800117 	ldw	r2,4(r16)
    4ee0:	01bfff04 	movi	r6,-4
    4ee4:	014003c4 	movi	r5,15
    4ee8:	1184703a 	and	r2,r2,r6
    4eec:	1447c83a 	sub	r3,r2,r17
    4ef0:	28c00716 	blt	r5,r3,4f10 <_malloc_r+0xcc>
    4ef4:	1800920e 	bge	r3,zero,5140 <_malloc_r+0x2fc>
    4ef8:	84000317 	ldw	r16,12(r16)
    4efc:	24008e26 	beq	r4,r16,5138 <_malloc_r+0x2f4>
    4f00:	80800117 	ldw	r2,4(r16)
    4f04:	1184703a 	and	r2,r2,r6
    4f08:	1447c83a 	sub	r3,r2,r17
    4f0c:	28fff90e 	bge	r5,r3,4ef4 <__alt_data_end+0xfffe4ef4>
    4f10:	3809883a 	mov	r4,r7
    4f14:	01800074 	movhi	r6,1
    4f18:	9c000417 	ldw	r16,16(r19)
    4f1c:	31864204 	addi	r6,r6,6408
    4f20:	32000204 	addi	r8,r6,8
    4f24:	82013426 	beq	r16,r8,53f8 <_malloc_r+0x5b4>
    4f28:	80c00117 	ldw	r3,4(r16)
    4f2c:	00bfff04 	movi	r2,-4
    4f30:	188e703a 	and	r7,r3,r2
    4f34:	3c45c83a 	sub	r2,r7,r17
    4f38:	00c003c4 	movi	r3,15
    4f3c:	18811f16 	blt	r3,r2,53bc <_malloc_r+0x578>
    4f40:	32000515 	stw	r8,20(r6)
    4f44:	32000415 	stw	r8,16(r6)
    4f48:	10007f0e 	bge	r2,zero,5148 <_malloc_r+0x304>
    4f4c:	00807fc4 	movi	r2,511
    4f50:	11c0fd36 	bltu	r2,r7,5348 <_malloc_r+0x504>
    4f54:	3806d0fa 	srli	r3,r7,3
    4f58:	01c00044 	movi	r7,1
    4f5c:	30800117 	ldw	r2,4(r6)
    4f60:	19400044 	addi	r5,r3,1
    4f64:	294b883a 	add	r5,r5,r5
    4f68:	1807d0ba 	srai	r3,r3,2
    4f6c:	294b883a 	add	r5,r5,r5
    4f70:	294b883a 	add	r5,r5,r5
    4f74:	298b883a 	add	r5,r5,r6
    4f78:	38c6983a 	sll	r3,r7,r3
    4f7c:	29c00017 	ldw	r7,0(r5)
    4f80:	2a7ffe04 	addi	r9,r5,-8
    4f84:	1886b03a 	or	r3,r3,r2
    4f88:	82400315 	stw	r9,12(r16)
    4f8c:	81c00215 	stw	r7,8(r16)
    4f90:	30c00115 	stw	r3,4(r6)
    4f94:	2c000015 	stw	r16,0(r5)
    4f98:	3c000315 	stw	r16,12(r7)
    4f9c:	2005d0ba 	srai	r2,r4,2
    4fa0:	01400044 	movi	r5,1
    4fa4:	288a983a 	sll	r5,r5,r2
    4fa8:	19406f36 	bltu	r3,r5,5168 <_malloc_r+0x324>
    4fac:	28c4703a 	and	r2,r5,r3
    4fb0:	10000a1e 	bne	r2,zero,4fdc <_malloc_r+0x198>
    4fb4:	00bfff04 	movi	r2,-4
    4fb8:	294b883a 	add	r5,r5,r5
    4fbc:	2088703a 	and	r4,r4,r2
    4fc0:	28c4703a 	and	r2,r5,r3
    4fc4:	21000104 	addi	r4,r4,4
    4fc8:	1000041e 	bne	r2,zero,4fdc <_malloc_r+0x198>
    4fcc:	294b883a 	add	r5,r5,r5
    4fd0:	28c4703a 	and	r2,r5,r3
    4fd4:	21000104 	addi	r4,r4,4
    4fd8:	103ffc26 	beq	r2,zero,4fcc <__alt_data_end+0xfffe4fcc>
    4fdc:	02bfff04 	movi	r10,-4
    4fe0:	024003c4 	movi	r9,15
    4fe4:	21800044 	addi	r6,r4,1
    4fe8:	318d883a 	add	r6,r6,r6
    4fec:	318d883a 	add	r6,r6,r6
    4ff0:	318d883a 	add	r6,r6,r6
    4ff4:	998d883a 	add	r6,r19,r6
    4ff8:	333ffe04 	addi	r12,r6,-8
    4ffc:	2017883a 	mov	r11,r4
    5000:	31800104 	addi	r6,r6,4
    5004:	34000017 	ldw	r16,0(r6)
    5008:	31fffd04 	addi	r7,r6,-12
    500c:	81c0041e 	bne	r16,r7,5020 <_malloc_r+0x1dc>
    5010:	0000fb06 	br	5400 <_malloc_r+0x5bc>
    5014:	1801030e 	bge	r3,zero,5424 <_malloc_r+0x5e0>
    5018:	84000317 	ldw	r16,12(r16)
    501c:	81c0f826 	beq	r16,r7,5400 <_malloc_r+0x5bc>
    5020:	80800117 	ldw	r2,4(r16)
    5024:	1284703a 	and	r2,r2,r10
    5028:	1447c83a 	sub	r3,r2,r17
    502c:	48fff90e 	bge	r9,r3,5014 <__alt_data_end+0xfffe5014>
    5030:	80800317 	ldw	r2,12(r16)
    5034:	81000217 	ldw	r4,8(r16)
    5038:	89400054 	ori	r5,r17,1
    503c:	81400115 	stw	r5,4(r16)
    5040:	20800315 	stw	r2,12(r4)
    5044:	11000215 	stw	r4,8(r2)
    5048:	8463883a 	add	r17,r16,r17
    504c:	9c400515 	stw	r17,20(r19)
    5050:	9c400415 	stw	r17,16(r19)
    5054:	18800054 	ori	r2,r3,1
    5058:	88800115 	stw	r2,4(r17)
    505c:	8a000315 	stw	r8,12(r17)
    5060:	8a000215 	stw	r8,8(r17)
    5064:	88e3883a 	add	r17,r17,r3
    5068:	88c00015 	stw	r3,0(r17)
    506c:	9009883a 	mov	r4,r18
    5070:	000f0e80 	call	f0e8 <__malloc_unlock>
    5074:	80800204 	addi	r2,r16,8
    5078:	00001b06 	br	50e8 <_malloc_r+0x2a4>
    507c:	04400404 	movi	r17,16
    5080:	89402536 	bltu	r17,r5,5118 <_malloc_r+0x2d4>
    5084:	000f0c40 	call	f0c4 <__malloc_lock>
    5088:	00800184 	movi	r2,6
    508c:	01000084 	movi	r4,2
    5090:	04c00074 	movhi	r19,1
    5094:	1085883a 	add	r2,r2,r2
    5098:	9cc64204 	addi	r19,r19,6408
    509c:	1085883a 	add	r2,r2,r2
    50a0:	9885883a 	add	r2,r19,r2
    50a4:	14000117 	ldw	r16,4(r2)
    50a8:	10fffe04 	addi	r3,r2,-8
    50ac:	80c0d926 	beq	r16,r3,5414 <_malloc_r+0x5d0>
    50b0:	80c00117 	ldw	r3,4(r16)
    50b4:	81000317 	ldw	r4,12(r16)
    50b8:	00bfff04 	movi	r2,-4
    50bc:	1884703a 	and	r2,r3,r2
    50c0:	81400217 	ldw	r5,8(r16)
    50c4:	8085883a 	add	r2,r16,r2
    50c8:	10c00117 	ldw	r3,4(r2)
    50cc:	29000315 	stw	r4,12(r5)
    50d0:	21400215 	stw	r5,8(r4)
    50d4:	18c00054 	ori	r3,r3,1
    50d8:	10c00115 	stw	r3,4(r2)
    50dc:	9009883a 	mov	r4,r18
    50e0:	000f0e80 	call	f0e8 <__malloc_unlock>
    50e4:	80800204 	addi	r2,r16,8
    50e8:	dfc00a17 	ldw	ra,40(sp)
    50ec:	df000917 	ldw	fp,36(sp)
    50f0:	ddc00817 	ldw	r23,32(sp)
    50f4:	dd800717 	ldw	r22,28(sp)
    50f8:	dd400617 	ldw	r21,24(sp)
    50fc:	dd000517 	ldw	r20,20(sp)
    5100:	dcc00417 	ldw	r19,16(sp)
    5104:	dc800317 	ldw	r18,12(sp)
    5108:	dc400217 	ldw	r17,8(sp)
    510c:	dc000117 	ldw	r16,4(sp)
    5110:	dec00b04 	addi	sp,sp,44
    5114:	f800283a 	ret
    5118:	00800304 	movi	r2,12
    511c:	90800015 	stw	r2,0(r18)
    5120:	0005883a 	mov	r2,zero
    5124:	003ff006 	br	50e8 <__alt_data_end+0xfffe50e8>
    5128:	01002004 	movi	r4,128
    512c:	02001004 	movi	r8,64
    5130:	01c00fc4 	movi	r7,63
    5134:	003f6106 	br	4ebc <__alt_data_end+0xfffe4ebc>
    5138:	4009883a 	mov	r4,r8
    513c:	003f7506 	br	4f14 <__alt_data_end+0xfffe4f14>
    5140:	81000317 	ldw	r4,12(r16)
    5144:	003fde06 	br	50c0 <__alt_data_end+0xfffe50c0>
    5148:	81c5883a 	add	r2,r16,r7
    514c:	11400117 	ldw	r5,4(r2)
    5150:	9009883a 	mov	r4,r18
    5154:	29400054 	ori	r5,r5,1
    5158:	11400115 	stw	r5,4(r2)
    515c:	000f0e80 	call	f0e8 <__malloc_unlock>
    5160:	80800204 	addi	r2,r16,8
    5164:	003fe006 	br	50e8 <__alt_data_end+0xfffe50e8>
    5168:	9c000217 	ldw	r16,8(r19)
    516c:	00bfff04 	movi	r2,-4
    5170:	85800117 	ldw	r22,4(r16)
    5174:	b0ac703a 	and	r22,r22,r2
    5178:	b4400336 	bltu	r22,r17,5188 <_malloc_r+0x344>
    517c:	b445c83a 	sub	r2,r22,r17
    5180:	00c003c4 	movi	r3,15
    5184:	18805d16 	blt	r3,r2,52fc <_malloc_r+0x4b8>
    5188:	05c00074 	movhi	r23,1
    518c:	00800074 	movhi	r2,1
    5190:	1092b204 	addi	r2,r2,19144
    5194:	bdcbe604 	addi	r23,r23,12184
    5198:	15400017 	ldw	r21,0(r2)
    519c:	b8c00017 	ldw	r3,0(r23)
    51a0:	00bfffc4 	movi	r2,-1
    51a4:	858d883a 	add	r6,r16,r22
    51a8:	8d6b883a 	add	r21,r17,r21
    51ac:	1880ea26 	beq	r3,r2,5558 <_malloc_r+0x714>
    51b0:	ad4403c4 	addi	r21,r21,4111
    51b4:	00bc0004 	movi	r2,-4096
    51b8:	a8aa703a 	and	r21,r21,r2
    51bc:	a80b883a 	mov	r5,r21
    51c0:	9009883a 	mov	r4,r18
    51c4:	d9800015 	stw	r6,0(sp)
    51c8:	0005c500 	call	5c50 <_sbrk_r>
    51cc:	1029883a 	mov	r20,r2
    51d0:	00bfffc4 	movi	r2,-1
    51d4:	d9800017 	ldw	r6,0(sp)
    51d8:	a080e826 	beq	r20,r2,557c <_malloc_r+0x738>
    51dc:	a180a636 	bltu	r20,r6,5478 <_malloc_r+0x634>
    51e0:	07000074 	movhi	fp,1
    51e4:	e712bd04 	addi	fp,fp,19188
    51e8:	e0800017 	ldw	r2,0(fp)
    51ec:	a887883a 	add	r3,r21,r2
    51f0:	e0c00015 	stw	r3,0(fp)
    51f4:	3500e626 	beq	r6,r20,5590 <_malloc_r+0x74c>
    51f8:	b9000017 	ldw	r4,0(r23)
    51fc:	00bfffc4 	movi	r2,-1
    5200:	2080ee26 	beq	r4,r2,55bc <_malloc_r+0x778>
    5204:	a185c83a 	sub	r2,r20,r6
    5208:	10c5883a 	add	r2,r2,r3
    520c:	e0800015 	stw	r2,0(fp)
    5210:	a0c001cc 	andi	r3,r20,7
    5214:	1800bc26 	beq	r3,zero,5508 <_malloc_r+0x6c4>
    5218:	a0e9c83a 	sub	r20,r20,r3
    521c:	00840204 	movi	r2,4104
    5220:	a5000204 	addi	r20,r20,8
    5224:	10c7c83a 	sub	r3,r2,r3
    5228:	a545883a 	add	r2,r20,r21
    522c:	1083ffcc 	andi	r2,r2,4095
    5230:	18abc83a 	sub	r21,r3,r2
    5234:	a80b883a 	mov	r5,r21
    5238:	9009883a 	mov	r4,r18
    523c:	0005c500 	call	5c50 <_sbrk_r>
    5240:	00ffffc4 	movi	r3,-1
    5244:	10c0e126 	beq	r2,r3,55cc <_malloc_r+0x788>
    5248:	1505c83a 	sub	r2,r2,r20
    524c:	1545883a 	add	r2,r2,r21
    5250:	10800054 	ori	r2,r2,1
    5254:	e0c00017 	ldw	r3,0(fp)
    5258:	9d000215 	stw	r20,8(r19)
    525c:	a0800115 	stw	r2,4(r20)
    5260:	a8c7883a 	add	r3,r21,r3
    5264:	e0c00015 	stw	r3,0(fp)
    5268:	84c00e26 	beq	r16,r19,52a4 <_malloc_r+0x460>
    526c:	018003c4 	movi	r6,15
    5270:	3580a72e 	bgeu	r6,r22,5510 <_malloc_r+0x6cc>
    5274:	81400117 	ldw	r5,4(r16)
    5278:	013ffe04 	movi	r4,-8
    527c:	b0bffd04 	addi	r2,r22,-12
    5280:	1104703a 	and	r2,r2,r4
    5284:	2900004c 	andi	r4,r5,1
    5288:	2088b03a 	or	r4,r4,r2
    528c:	81000115 	stw	r4,4(r16)
    5290:	01400144 	movi	r5,5
    5294:	8089883a 	add	r4,r16,r2
    5298:	21400115 	stw	r5,4(r4)
    529c:	21400215 	stw	r5,8(r4)
    52a0:	3080cd36 	bltu	r6,r2,55d8 <_malloc_r+0x794>
    52a4:	00800074 	movhi	r2,1
    52a8:	1092b104 	addi	r2,r2,19140
    52ac:	11000017 	ldw	r4,0(r2)
    52b0:	20c0012e 	bgeu	r4,r3,52b8 <_malloc_r+0x474>
    52b4:	10c00015 	stw	r3,0(r2)
    52b8:	00800074 	movhi	r2,1
    52bc:	1092b004 	addi	r2,r2,19136
    52c0:	11000017 	ldw	r4,0(r2)
    52c4:	9c000217 	ldw	r16,8(r19)
    52c8:	20c0012e 	bgeu	r4,r3,52d0 <_malloc_r+0x48c>
    52cc:	10c00015 	stw	r3,0(r2)
    52d0:	80c00117 	ldw	r3,4(r16)
    52d4:	00bfff04 	movi	r2,-4
    52d8:	1886703a 	and	r3,r3,r2
    52dc:	1c45c83a 	sub	r2,r3,r17
    52e0:	1c400236 	bltu	r3,r17,52ec <_malloc_r+0x4a8>
    52e4:	00c003c4 	movi	r3,15
    52e8:	18800416 	blt	r3,r2,52fc <_malloc_r+0x4b8>
    52ec:	9009883a 	mov	r4,r18
    52f0:	000f0e80 	call	f0e8 <__malloc_unlock>
    52f4:	0005883a 	mov	r2,zero
    52f8:	003f7b06 	br	50e8 <__alt_data_end+0xfffe50e8>
    52fc:	88c00054 	ori	r3,r17,1
    5300:	80c00115 	stw	r3,4(r16)
    5304:	8463883a 	add	r17,r16,r17
    5308:	10800054 	ori	r2,r2,1
    530c:	9c400215 	stw	r17,8(r19)
    5310:	88800115 	stw	r2,4(r17)
    5314:	9009883a 	mov	r4,r18
    5318:	000f0e80 	call	f0e8 <__malloc_unlock>
    531c:	80800204 	addi	r2,r16,8
    5320:	003f7106 	br	50e8 <__alt_data_end+0xfffe50e8>
    5324:	00c00504 	movi	r3,20
    5328:	18804a2e 	bgeu	r3,r2,5454 <_malloc_r+0x610>
    532c:	00c01504 	movi	r3,84
    5330:	18806e36 	bltu	r3,r2,54ec <_malloc_r+0x6a8>
    5334:	8804d33a 	srli	r2,r17,12
    5338:	12001bc4 	addi	r8,r2,111
    533c:	11c01b84 	addi	r7,r2,110
    5340:	4209883a 	add	r4,r8,r8
    5344:	003edd06 	br	4ebc <__alt_data_end+0xfffe4ebc>
    5348:	3804d27a 	srli	r2,r7,9
    534c:	00c00104 	movi	r3,4
    5350:	1880442e 	bgeu	r3,r2,5464 <_malloc_r+0x620>
    5354:	00c00504 	movi	r3,20
    5358:	18808136 	bltu	r3,r2,5560 <_malloc_r+0x71c>
    535c:	11401704 	addi	r5,r2,92
    5360:	10c016c4 	addi	r3,r2,91
    5364:	294b883a 	add	r5,r5,r5
    5368:	294b883a 	add	r5,r5,r5
    536c:	294b883a 	add	r5,r5,r5
    5370:	994b883a 	add	r5,r19,r5
    5374:	28800017 	ldw	r2,0(r5)
    5378:	01800074 	movhi	r6,1
    537c:	297ffe04 	addi	r5,r5,-8
    5380:	31864204 	addi	r6,r6,6408
    5384:	28806526 	beq	r5,r2,551c <_malloc_r+0x6d8>
    5388:	01bfff04 	movi	r6,-4
    538c:	10c00117 	ldw	r3,4(r2)
    5390:	1986703a 	and	r3,r3,r6
    5394:	38c0022e 	bgeu	r7,r3,53a0 <_malloc_r+0x55c>
    5398:	10800217 	ldw	r2,8(r2)
    539c:	28bffb1e 	bne	r5,r2,538c <__alt_data_end+0xfffe538c>
    53a0:	11400317 	ldw	r5,12(r2)
    53a4:	98c00117 	ldw	r3,4(r19)
    53a8:	81400315 	stw	r5,12(r16)
    53ac:	80800215 	stw	r2,8(r16)
    53b0:	2c000215 	stw	r16,8(r5)
    53b4:	14000315 	stw	r16,12(r2)
    53b8:	003ef806 	br	4f9c <__alt_data_end+0xfffe4f9c>
    53bc:	88c00054 	ori	r3,r17,1
    53c0:	80c00115 	stw	r3,4(r16)
    53c4:	8463883a 	add	r17,r16,r17
    53c8:	34400515 	stw	r17,20(r6)
    53cc:	34400415 	stw	r17,16(r6)
    53d0:	10c00054 	ori	r3,r2,1
    53d4:	8a000315 	stw	r8,12(r17)
    53d8:	8a000215 	stw	r8,8(r17)
    53dc:	88c00115 	stw	r3,4(r17)
    53e0:	88a3883a 	add	r17,r17,r2
    53e4:	88800015 	stw	r2,0(r17)
    53e8:	9009883a 	mov	r4,r18
    53ec:	000f0e80 	call	f0e8 <__malloc_unlock>
    53f0:	80800204 	addi	r2,r16,8
    53f4:	003f3c06 	br	50e8 <__alt_data_end+0xfffe50e8>
    53f8:	30c00117 	ldw	r3,4(r6)
    53fc:	003ee706 	br	4f9c <__alt_data_end+0xfffe4f9c>
    5400:	5ac00044 	addi	r11,r11,1
    5404:	588000cc 	andi	r2,r11,3
    5408:	31800204 	addi	r6,r6,8
    540c:	103efd1e 	bne	r2,zero,5004 <__alt_data_end+0xfffe5004>
    5410:	00002406 	br	54a4 <_malloc_r+0x660>
    5414:	14000317 	ldw	r16,12(r2)
    5418:	143f251e 	bne	r2,r16,50b0 <__alt_data_end+0xfffe50b0>
    541c:	21000084 	addi	r4,r4,2
    5420:	003ebc06 	br	4f14 <__alt_data_end+0xfffe4f14>
    5424:	8085883a 	add	r2,r16,r2
    5428:	10c00117 	ldw	r3,4(r2)
    542c:	81000317 	ldw	r4,12(r16)
    5430:	81400217 	ldw	r5,8(r16)
    5434:	18c00054 	ori	r3,r3,1
    5438:	10c00115 	stw	r3,4(r2)
    543c:	29000315 	stw	r4,12(r5)
    5440:	21400215 	stw	r5,8(r4)
    5444:	9009883a 	mov	r4,r18
    5448:	000f0e80 	call	f0e8 <__malloc_unlock>
    544c:	80800204 	addi	r2,r16,8
    5450:	003f2506 	br	50e8 <__alt_data_end+0xfffe50e8>
    5454:	12001704 	addi	r8,r2,92
    5458:	11c016c4 	addi	r7,r2,91
    545c:	4209883a 	add	r4,r8,r8
    5460:	003e9606 	br	4ebc <__alt_data_end+0xfffe4ebc>
    5464:	3804d1ba 	srli	r2,r7,6
    5468:	11400e44 	addi	r5,r2,57
    546c:	10c00e04 	addi	r3,r2,56
    5470:	294b883a 	add	r5,r5,r5
    5474:	003fbc06 	br	5368 <__alt_data_end+0xfffe5368>
    5478:	84ff5926 	beq	r16,r19,51e0 <__alt_data_end+0xfffe51e0>
    547c:	00800074 	movhi	r2,1
    5480:	10864204 	addi	r2,r2,6408
    5484:	14000217 	ldw	r16,8(r2)
    5488:	00bfff04 	movi	r2,-4
    548c:	80c00117 	ldw	r3,4(r16)
    5490:	1886703a 	and	r3,r3,r2
    5494:	003f9106 	br	52dc <__alt_data_end+0xfffe52dc>
    5498:	60800217 	ldw	r2,8(r12)
    549c:	213fffc4 	addi	r4,r4,-1
    54a0:	1300651e 	bne	r2,r12,5638 <_malloc_r+0x7f4>
    54a4:	208000cc 	andi	r2,r4,3
    54a8:	633ffe04 	addi	r12,r12,-8
    54ac:	103ffa1e 	bne	r2,zero,5498 <__alt_data_end+0xfffe5498>
    54b0:	98800117 	ldw	r2,4(r19)
    54b4:	0146303a 	nor	r3,zero,r5
    54b8:	1884703a 	and	r2,r3,r2
    54bc:	98800115 	stw	r2,4(r19)
    54c0:	294b883a 	add	r5,r5,r5
    54c4:	117f2836 	bltu	r2,r5,5168 <__alt_data_end+0xfffe5168>
    54c8:	283f2726 	beq	r5,zero,5168 <__alt_data_end+0xfffe5168>
    54cc:	2886703a 	and	r3,r5,r2
    54d0:	5809883a 	mov	r4,r11
    54d4:	183ec31e 	bne	r3,zero,4fe4 <__alt_data_end+0xfffe4fe4>
    54d8:	294b883a 	add	r5,r5,r5
    54dc:	2886703a 	and	r3,r5,r2
    54e0:	21000104 	addi	r4,r4,4
    54e4:	183ffc26 	beq	r3,zero,54d8 <__alt_data_end+0xfffe54d8>
    54e8:	003ebe06 	br	4fe4 <__alt_data_end+0xfffe4fe4>
    54ec:	00c05504 	movi	r3,340
    54f0:	18801236 	bltu	r3,r2,553c <_malloc_r+0x6f8>
    54f4:	8804d3fa 	srli	r2,r17,15
    54f8:	12001e04 	addi	r8,r2,120
    54fc:	11c01dc4 	addi	r7,r2,119
    5500:	4209883a 	add	r4,r8,r8
    5504:	003e6d06 	br	4ebc <__alt_data_end+0xfffe4ebc>
    5508:	00c40004 	movi	r3,4096
    550c:	003f4606 	br	5228 <__alt_data_end+0xfffe5228>
    5510:	00800044 	movi	r2,1
    5514:	a0800115 	stw	r2,4(r20)
    5518:	003f7406 	br	52ec <__alt_data_end+0xfffe52ec>
    551c:	1805d0ba 	srai	r2,r3,2
    5520:	01c00044 	movi	r7,1
    5524:	30c00117 	ldw	r3,4(r6)
    5528:	388e983a 	sll	r7,r7,r2
    552c:	2805883a 	mov	r2,r5
    5530:	38c6b03a 	or	r3,r7,r3
    5534:	30c00115 	stw	r3,4(r6)
    5538:	003f9b06 	br	53a8 <__alt_data_end+0xfffe53a8>
    553c:	00c15504 	movi	r3,1364
    5540:	18801a36 	bltu	r3,r2,55ac <_malloc_r+0x768>
    5544:	8804d4ba 	srli	r2,r17,18
    5548:	12001f44 	addi	r8,r2,125
    554c:	11c01f04 	addi	r7,r2,124
    5550:	4209883a 	add	r4,r8,r8
    5554:	003e5906 	br	4ebc <__alt_data_end+0xfffe4ebc>
    5558:	ad400404 	addi	r21,r21,16
    555c:	003f1706 	br	51bc <__alt_data_end+0xfffe51bc>
    5560:	00c01504 	movi	r3,84
    5564:	18802336 	bltu	r3,r2,55f4 <_malloc_r+0x7b0>
    5568:	3804d33a 	srli	r2,r7,12
    556c:	11401bc4 	addi	r5,r2,111
    5570:	10c01b84 	addi	r3,r2,110
    5574:	294b883a 	add	r5,r5,r5
    5578:	003f7b06 	br	5368 <__alt_data_end+0xfffe5368>
    557c:	9c000217 	ldw	r16,8(r19)
    5580:	00bfff04 	movi	r2,-4
    5584:	80c00117 	ldw	r3,4(r16)
    5588:	1886703a 	and	r3,r3,r2
    558c:	003f5306 	br	52dc <__alt_data_end+0xfffe52dc>
    5590:	3083ffcc 	andi	r2,r6,4095
    5594:	103f181e 	bne	r2,zero,51f8 <__alt_data_end+0xfffe51f8>
    5598:	99000217 	ldw	r4,8(r19)
    559c:	b545883a 	add	r2,r22,r21
    55a0:	10800054 	ori	r2,r2,1
    55a4:	20800115 	stw	r2,4(r4)
    55a8:	003f3e06 	br	52a4 <__alt_data_end+0xfffe52a4>
    55ac:	01003f84 	movi	r4,254
    55b0:	02001fc4 	movi	r8,127
    55b4:	01c01f84 	movi	r7,126
    55b8:	003e4006 	br	4ebc <__alt_data_end+0xfffe4ebc>
    55bc:	00800074 	movhi	r2,1
    55c0:	108be604 	addi	r2,r2,12184
    55c4:	15000015 	stw	r20,0(r2)
    55c8:	003f1106 	br	5210 <__alt_data_end+0xfffe5210>
    55cc:	00800044 	movi	r2,1
    55d0:	002b883a 	mov	r21,zero
    55d4:	003f1f06 	br	5254 <__alt_data_end+0xfffe5254>
    55d8:	81400204 	addi	r5,r16,8
    55dc:	9009883a 	mov	r4,r18
    55e0:	00043140 	call	4314 <_free_r>
    55e4:	00800074 	movhi	r2,1
    55e8:	1092bd04 	addi	r2,r2,19188
    55ec:	10c00017 	ldw	r3,0(r2)
    55f0:	003f2c06 	br	52a4 <__alt_data_end+0xfffe52a4>
    55f4:	00c05504 	movi	r3,340
    55f8:	18800536 	bltu	r3,r2,5610 <_malloc_r+0x7cc>
    55fc:	3804d3fa 	srli	r2,r7,15
    5600:	11401e04 	addi	r5,r2,120
    5604:	10c01dc4 	addi	r3,r2,119
    5608:	294b883a 	add	r5,r5,r5
    560c:	003f5606 	br	5368 <__alt_data_end+0xfffe5368>
    5610:	00c15504 	movi	r3,1364
    5614:	18800536 	bltu	r3,r2,562c <_malloc_r+0x7e8>
    5618:	3804d4ba 	srli	r2,r7,18
    561c:	11401f44 	addi	r5,r2,125
    5620:	10c01f04 	addi	r3,r2,124
    5624:	294b883a 	add	r5,r5,r5
    5628:	003f4f06 	br	5368 <__alt_data_end+0xfffe5368>
    562c:	01403f84 	movi	r5,254
    5630:	00c01f84 	movi	r3,126
    5634:	003f4c06 	br	5368 <__alt_data_end+0xfffe5368>
    5638:	98800117 	ldw	r2,4(r19)
    563c:	003fa006 	br	54c0 <__alt_data_end+0xfffe54c0>
    5640:	8808d0fa 	srli	r4,r17,3
    5644:	20800044 	addi	r2,r4,1
    5648:	1085883a 	add	r2,r2,r2
    564c:	003e9006 	br	5090 <__alt_data_end+0xfffe5090>

00005650 <memcpy>:
    5650:	defffd04 	addi	sp,sp,-12
    5654:	dfc00215 	stw	ra,8(sp)
    5658:	dc400115 	stw	r17,4(sp)
    565c:	dc000015 	stw	r16,0(sp)
    5660:	00c003c4 	movi	r3,15
    5664:	2005883a 	mov	r2,r4
    5668:	1980452e 	bgeu	r3,r6,5780 <memcpy+0x130>
    566c:	2906b03a 	or	r3,r5,r4
    5670:	18c000cc 	andi	r3,r3,3
    5674:	1800441e 	bne	r3,zero,5788 <memcpy+0x138>
    5678:	347ffc04 	addi	r17,r6,-16
    567c:	8822d13a 	srli	r17,r17,4
    5680:	28c00104 	addi	r3,r5,4
    5684:	23400104 	addi	r13,r4,4
    5688:	8820913a 	slli	r16,r17,4
    568c:	2b000204 	addi	r12,r5,8
    5690:	22c00204 	addi	r11,r4,8
    5694:	84000504 	addi	r16,r16,20
    5698:	2a800304 	addi	r10,r5,12
    569c:	22400304 	addi	r9,r4,12
    56a0:	2c21883a 	add	r16,r5,r16
    56a4:	2811883a 	mov	r8,r5
    56a8:	200f883a 	mov	r7,r4
    56ac:	41000017 	ldw	r4,0(r8)
    56b0:	1fc00017 	ldw	ra,0(r3)
    56b4:	63c00017 	ldw	r15,0(r12)
    56b8:	39000015 	stw	r4,0(r7)
    56bc:	53800017 	ldw	r14,0(r10)
    56c0:	6fc00015 	stw	ra,0(r13)
    56c4:	5bc00015 	stw	r15,0(r11)
    56c8:	4b800015 	stw	r14,0(r9)
    56cc:	18c00404 	addi	r3,r3,16
    56d0:	39c00404 	addi	r7,r7,16
    56d4:	42000404 	addi	r8,r8,16
    56d8:	6b400404 	addi	r13,r13,16
    56dc:	63000404 	addi	r12,r12,16
    56e0:	5ac00404 	addi	r11,r11,16
    56e4:	52800404 	addi	r10,r10,16
    56e8:	4a400404 	addi	r9,r9,16
    56ec:	1c3fef1e 	bne	r3,r16,56ac <__alt_data_end+0xfffe56ac>
    56f0:	89c00044 	addi	r7,r17,1
    56f4:	380e913a 	slli	r7,r7,4
    56f8:	310003cc 	andi	r4,r6,15
    56fc:	02c000c4 	movi	r11,3
    5700:	11c7883a 	add	r3,r2,r7
    5704:	29cb883a 	add	r5,r5,r7
    5708:	5900212e 	bgeu	r11,r4,5790 <memcpy+0x140>
    570c:	1813883a 	mov	r9,r3
    5710:	2811883a 	mov	r8,r5
    5714:	200f883a 	mov	r7,r4
    5718:	42800017 	ldw	r10,0(r8)
    571c:	4a400104 	addi	r9,r9,4
    5720:	39ffff04 	addi	r7,r7,-4
    5724:	4abfff15 	stw	r10,-4(r9)
    5728:	42000104 	addi	r8,r8,4
    572c:	59fffa36 	bltu	r11,r7,5718 <__alt_data_end+0xfffe5718>
    5730:	213fff04 	addi	r4,r4,-4
    5734:	2008d0ba 	srli	r4,r4,2
    5738:	318000cc 	andi	r6,r6,3
    573c:	21000044 	addi	r4,r4,1
    5740:	2109883a 	add	r4,r4,r4
    5744:	2109883a 	add	r4,r4,r4
    5748:	1907883a 	add	r3,r3,r4
    574c:	290b883a 	add	r5,r5,r4
    5750:	30000626 	beq	r6,zero,576c <memcpy+0x11c>
    5754:	198d883a 	add	r6,r3,r6
    5758:	29c00003 	ldbu	r7,0(r5)
    575c:	18c00044 	addi	r3,r3,1
    5760:	29400044 	addi	r5,r5,1
    5764:	19ffffc5 	stb	r7,-1(r3)
    5768:	19bffb1e 	bne	r3,r6,5758 <__alt_data_end+0xfffe5758>
    576c:	dfc00217 	ldw	ra,8(sp)
    5770:	dc400117 	ldw	r17,4(sp)
    5774:	dc000017 	ldw	r16,0(sp)
    5778:	dec00304 	addi	sp,sp,12
    577c:	f800283a 	ret
    5780:	2007883a 	mov	r3,r4
    5784:	003ff206 	br	5750 <__alt_data_end+0xfffe5750>
    5788:	2007883a 	mov	r3,r4
    578c:	003ff106 	br	5754 <__alt_data_end+0xfffe5754>
    5790:	200d883a 	mov	r6,r4
    5794:	003fee06 	br	5750 <__alt_data_end+0xfffe5750>

00005798 <memset>:
    5798:	20c000cc 	andi	r3,r4,3
    579c:	2005883a 	mov	r2,r4
    57a0:	18004426 	beq	r3,zero,58b4 <memset+0x11c>
    57a4:	31ffffc4 	addi	r7,r6,-1
    57a8:	30004026 	beq	r6,zero,58ac <memset+0x114>
    57ac:	2813883a 	mov	r9,r5
    57b0:	200d883a 	mov	r6,r4
    57b4:	2007883a 	mov	r3,r4
    57b8:	00000406 	br	57cc <memset+0x34>
    57bc:	3a3fffc4 	addi	r8,r7,-1
    57c0:	31800044 	addi	r6,r6,1
    57c4:	38003926 	beq	r7,zero,58ac <memset+0x114>
    57c8:	400f883a 	mov	r7,r8
    57cc:	18c00044 	addi	r3,r3,1
    57d0:	32400005 	stb	r9,0(r6)
    57d4:	1a0000cc 	andi	r8,r3,3
    57d8:	403ff81e 	bne	r8,zero,57bc <__alt_data_end+0xfffe57bc>
    57dc:	010000c4 	movi	r4,3
    57e0:	21c02d2e 	bgeu	r4,r7,5898 <memset+0x100>
    57e4:	29003fcc 	andi	r4,r5,255
    57e8:	200c923a 	slli	r6,r4,8
    57ec:	3108b03a 	or	r4,r6,r4
    57f0:	200c943a 	slli	r6,r4,16
    57f4:	218cb03a 	or	r6,r4,r6
    57f8:	010003c4 	movi	r4,15
    57fc:	21c0182e 	bgeu	r4,r7,5860 <memset+0xc8>
    5800:	3b3ffc04 	addi	r12,r7,-16
    5804:	6018d13a 	srli	r12,r12,4
    5808:	1a000104 	addi	r8,r3,4
    580c:	1ac00204 	addi	r11,r3,8
    5810:	6008913a 	slli	r4,r12,4
    5814:	1a800304 	addi	r10,r3,12
    5818:	1813883a 	mov	r9,r3
    581c:	21000504 	addi	r4,r4,20
    5820:	1909883a 	add	r4,r3,r4
    5824:	49800015 	stw	r6,0(r9)
    5828:	41800015 	stw	r6,0(r8)
    582c:	59800015 	stw	r6,0(r11)
    5830:	51800015 	stw	r6,0(r10)
    5834:	42000404 	addi	r8,r8,16
    5838:	4a400404 	addi	r9,r9,16
    583c:	5ac00404 	addi	r11,r11,16
    5840:	52800404 	addi	r10,r10,16
    5844:	413ff71e 	bne	r8,r4,5824 <__alt_data_end+0xfffe5824>
    5848:	63000044 	addi	r12,r12,1
    584c:	6018913a 	slli	r12,r12,4
    5850:	39c003cc 	andi	r7,r7,15
    5854:	010000c4 	movi	r4,3
    5858:	1b07883a 	add	r3,r3,r12
    585c:	21c00e2e 	bgeu	r4,r7,5898 <memset+0x100>
    5860:	1813883a 	mov	r9,r3
    5864:	3811883a 	mov	r8,r7
    5868:	010000c4 	movi	r4,3
    586c:	49800015 	stw	r6,0(r9)
    5870:	423fff04 	addi	r8,r8,-4
    5874:	4a400104 	addi	r9,r9,4
    5878:	223ffc36 	bltu	r4,r8,586c <__alt_data_end+0xfffe586c>
    587c:	393fff04 	addi	r4,r7,-4
    5880:	2008d0ba 	srli	r4,r4,2
    5884:	39c000cc 	andi	r7,r7,3
    5888:	21000044 	addi	r4,r4,1
    588c:	2109883a 	add	r4,r4,r4
    5890:	2109883a 	add	r4,r4,r4
    5894:	1907883a 	add	r3,r3,r4
    5898:	38000526 	beq	r7,zero,58b0 <memset+0x118>
    589c:	19cf883a 	add	r7,r3,r7
    58a0:	19400005 	stb	r5,0(r3)
    58a4:	18c00044 	addi	r3,r3,1
    58a8:	38fffd1e 	bne	r7,r3,58a0 <__alt_data_end+0xfffe58a0>
    58ac:	f800283a 	ret
    58b0:	f800283a 	ret
    58b4:	2007883a 	mov	r3,r4
    58b8:	300f883a 	mov	r7,r6
    58bc:	003fc706 	br	57dc <__alt_data_end+0xfffe57dc>

000058c0 <_open_r>:
    58c0:	defffd04 	addi	sp,sp,-12
    58c4:	2805883a 	mov	r2,r5
    58c8:	dc000015 	stw	r16,0(sp)
    58cc:	04000074 	movhi	r16,1
    58d0:	dc400115 	stw	r17,4(sp)
    58d4:	300b883a 	mov	r5,r6
    58d8:	8412af04 	addi	r16,r16,19132
    58dc:	2023883a 	mov	r17,r4
    58e0:	380d883a 	mov	r6,r7
    58e4:	1009883a 	mov	r4,r2
    58e8:	dfc00215 	stw	ra,8(sp)
    58ec:	80000015 	stw	zero,0(r16)
    58f0:	000f2340 	call	f234 <open>
    58f4:	00ffffc4 	movi	r3,-1
    58f8:	10c00526 	beq	r2,r3,5910 <_open_r+0x50>
    58fc:	dfc00217 	ldw	ra,8(sp)
    5900:	dc400117 	ldw	r17,4(sp)
    5904:	dc000017 	ldw	r16,0(sp)
    5908:	dec00304 	addi	sp,sp,12
    590c:	f800283a 	ret
    5910:	80c00017 	ldw	r3,0(r16)
    5914:	183ff926 	beq	r3,zero,58fc <__alt_data_end+0xfffe58fc>
    5918:	88c00015 	stw	r3,0(r17)
    591c:	003ff706 	br	58fc <__alt_data_end+0xfffe58fc>

00005920 <_printf_r>:
    5920:	defffd04 	addi	sp,sp,-12
    5924:	2805883a 	mov	r2,r5
    5928:	dfc00015 	stw	ra,0(sp)
    592c:	d9800115 	stw	r6,4(sp)
    5930:	d9c00215 	stw	r7,8(sp)
    5934:	21400217 	ldw	r5,8(r4)
    5938:	d9c00104 	addi	r7,sp,4
    593c:	100d883a 	mov	r6,r2
    5940:	0005e780 	call	5e78 <___vfprintf_internal_r>
    5944:	dfc00017 	ldw	ra,0(sp)
    5948:	dec00304 	addi	sp,sp,12
    594c:	f800283a 	ret

00005950 <printf>:
    5950:	defffc04 	addi	sp,sp,-16
    5954:	dfc00015 	stw	ra,0(sp)
    5958:	d9400115 	stw	r5,4(sp)
    595c:	d9800215 	stw	r6,8(sp)
    5960:	d9c00315 	stw	r7,12(sp)
    5964:	00800074 	movhi	r2,1
    5968:	108be504 	addi	r2,r2,12180
    596c:	10800017 	ldw	r2,0(r2)
    5970:	200b883a 	mov	r5,r4
    5974:	d9800104 	addi	r6,sp,4
    5978:	11000217 	ldw	r4,8(r2)
    597c:	00081540 	call	8154 <__vfprintf_internal>
    5980:	dfc00017 	ldw	ra,0(sp)
    5984:	dec00404 	addi	sp,sp,16
    5988:	f800283a 	ret

0000598c <_puts_r>:
    598c:	defff604 	addi	sp,sp,-40
    5990:	dc000715 	stw	r16,28(sp)
    5994:	2021883a 	mov	r16,r4
    5998:	2809883a 	mov	r4,r5
    599c:	dc400815 	stw	r17,32(sp)
    59a0:	dfc00915 	stw	ra,36(sp)
    59a4:	2823883a 	mov	r17,r5
    59a8:	0005de00 	call	5de0 <strlen>
    59ac:	10c00044 	addi	r3,r2,1
    59b0:	d8800115 	stw	r2,4(sp)
    59b4:	00800074 	movhi	r2,1
    59b8:	1084ba04 	addi	r2,r2,4840
    59bc:	d8800215 	stw	r2,8(sp)
    59c0:	00800044 	movi	r2,1
    59c4:	d8800315 	stw	r2,12(sp)
    59c8:	00800084 	movi	r2,2
    59cc:	dc400015 	stw	r17,0(sp)
    59d0:	d8c00615 	stw	r3,24(sp)
    59d4:	dec00415 	stw	sp,16(sp)
    59d8:	d8800515 	stw	r2,20(sp)
    59dc:	80000226 	beq	r16,zero,59e8 <_puts_r+0x5c>
    59e0:	80800e17 	ldw	r2,56(r16)
    59e4:	10001426 	beq	r2,zero,5a38 <_puts_r+0xac>
    59e8:	81400217 	ldw	r5,8(r16)
    59ec:	2880030b 	ldhu	r2,12(r5)
    59f0:	10c8000c 	andi	r3,r2,8192
    59f4:	1800061e 	bne	r3,zero,5a10 <_puts_r+0x84>
    59f8:	29001917 	ldw	r4,100(r5)
    59fc:	00f7ffc4 	movi	r3,-8193
    5a00:	10880014 	ori	r2,r2,8192
    5a04:	20c6703a 	and	r3,r4,r3
    5a08:	2880030d 	sth	r2,12(r5)
    5a0c:	28c01915 	stw	r3,100(r5)
    5a10:	d9800404 	addi	r6,sp,16
    5a14:	8009883a 	mov	r4,r16
    5a18:	0009f100 	call	9f10 <__sfvwrite_r>
    5a1c:	1000091e 	bne	r2,zero,5a44 <_puts_r+0xb8>
    5a20:	00800284 	movi	r2,10
    5a24:	dfc00917 	ldw	ra,36(sp)
    5a28:	dc400817 	ldw	r17,32(sp)
    5a2c:	dc000717 	ldw	r16,28(sp)
    5a30:	dec00a04 	addi	sp,sp,40
    5a34:	f800283a 	ret
    5a38:	8009883a 	mov	r4,r16
    5a3c:	0003e240 	call	3e24 <__sinit>
    5a40:	003fe906 	br	59e8 <__alt_data_end+0xfffe59e8>
    5a44:	00bfffc4 	movi	r2,-1
    5a48:	003ff606 	br	5a24 <__alt_data_end+0xfffe5a24>

00005a4c <puts>:
    5a4c:	00800074 	movhi	r2,1
    5a50:	108be504 	addi	r2,r2,12180
    5a54:	200b883a 	mov	r5,r4
    5a58:	11000017 	ldw	r4,0(r2)
    5a5c:	000598c1 	jmpi	598c <_puts_r>

00005a60 <lflush>:
    5a60:	2080030b 	ldhu	r2,12(r4)
    5a64:	00c00244 	movi	r3,9
    5a68:	1080024c 	andi	r2,r2,9
    5a6c:	10c00226 	beq	r2,r3,5a78 <lflush+0x18>
    5a70:	0005883a 	mov	r2,zero
    5a74:	f800283a 	ret
    5a78:	0003a941 	jmpi	3a94 <fflush>

00005a7c <__srefill_r>:
    5a7c:	defffc04 	addi	sp,sp,-16
    5a80:	dc400115 	stw	r17,4(sp)
    5a84:	dc000015 	stw	r16,0(sp)
    5a88:	dfc00315 	stw	ra,12(sp)
    5a8c:	dc800215 	stw	r18,8(sp)
    5a90:	2023883a 	mov	r17,r4
    5a94:	2821883a 	mov	r16,r5
    5a98:	20000226 	beq	r4,zero,5aa4 <__srefill_r+0x28>
    5a9c:	20800e17 	ldw	r2,56(r4)
    5aa0:	10003c26 	beq	r2,zero,5b94 <__srefill_r+0x118>
    5aa4:	80c0030b 	ldhu	r3,12(r16)
    5aa8:	1908000c 	andi	r4,r3,8192
    5aac:	1805883a 	mov	r2,r3
    5ab0:	2000071e 	bne	r4,zero,5ad0 <__srefill_r+0x54>
    5ab4:	81001917 	ldw	r4,100(r16)
    5ab8:	18880014 	ori	r2,r3,8192
    5abc:	00f7ffc4 	movi	r3,-8193
    5ac0:	20c8703a 	and	r4,r4,r3
    5ac4:	8080030d 	sth	r2,12(r16)
    5ac8:	1007883a 	mov	r3,r2
    5acc:	81001915 	stw	r4,100(r16)
    5ad0:	80000115 	stw	zero,4(r16)
    5ad4:	1100080c 	andi	r4,r2,32
    5ad8:	2000571e 	bne	r4,zero,5c38 <__srefill_r+0x1bc>
    5adc:	1100010c 	andi	r4,r2,4
    5ae0:	20001f26 	beq	r4,zero,5b60 <__srefill_r+0xe4>
    5ae4:	81400c17 	ldw	r5,48(r16)
    5ae8:	28000826 	beq	r5,zero,5b0c <__srefill_r+0x90>
    5aec:	80801004 	addi	r2,r16,64
    5af0:	28800226 	beq	r5,r2,5afc <__srefill_r+0x80>
    5af4:	8809883a 	mov	r4,r17
    5af8:	00043140 	call	4314 <_free_r>
    5afc:	80800f17 	ldw	r2,60(r16)
    5b00:	80000c15 	stw	zero,48(r16)
    5b04:	80800115 	stw	r2,4(r16)
    5b08:	1000391e 	bne	r2,zero,5bf0 <__srefill_r+0x174>
    5b0c:	80800417 	ldw	r2,16(r16)
    5b10:	10004b26 	beq	r2,zero,5c40 <__srefill_r+0x1c4>
    5b14:	8480030b 	ldhu	r18,12(r16)
    5b18:	908000cc 	andi	r2,r18,3
    5b1c:	10001f1e 	bne	r2,zero,5b9c <__srefill_r+0x120>
    5b20:	81800417 	ldw	r6,16(r16)
    5b24:	80800817 	ldw	r2,32(r16)
    5b28:	81c00517 	ldw	r7,20(r16)
    5b2c:	81400717 	ldw	r5,28(r16)
    5b30:	81800015 	stw	r6,0(r16)
    5b34:	8809883a 	mov	r4,r17
    5b38:	103ee83a 	callr	r2
    5b3c:	80800115 	stw	r2,4(r16)
    5b40:	00800e0e 	bge	zero,r2,5b7c <__srefill_r+0x100>
    5b44:	0005883a 	mov	r2,zero
    5b48:	dfc00317 	ldw	ra,12(sp)
    5b4c:	dc800217 	ldw	r18,8(sp)
    5b50:	dc400117 	ldw	r17,4(sp)
    5b54:	dc000017 	ldw	r16,0(sp)
    5b58:	dec00404 	addi	sp,sp,16
    5b5c:	f800283a 	ret
    5b60:	1100040c 	andi	r4,r2,16
    5b64:	20003026 	beq	r4,zero,5c28 <__srefill_r+0x1ac>
    5b68:	1080020c 	andi	r2,r2,8
    5b6c:	1000241e 	bne	r2,zero,5c00 <__srefill_r+0x184>
    5b70:	18c00114 	ori	r3,r3,4
    5b74:	80c0030d 	sth	r3,12(r16)
    5b78:	003fe406 	br	5b0c <__alt_data_end+0xfffe5b0c>
    5b7c:	80c0030b 	ldhu	r3,12(r16)
    5b80:	1000161e 	bne	r2,zero,5bdc <__srefill_r+0x160>
    5b84:	18c00814 	ori	r3,r3,32
    5b88:	00bfffc4 	movi	r2,-1
    5b8c:	80c0030d 	sth	r3,12(r16)
    5b90:	003fed06 	br	5b48 <__alt_data_end+0xfffe5b48>
    5b94:	0003e240 	call	3e24 <__sinit>
    5b98:	003fc206 	br	5aa4 <__alt_data_end+0xfffe5aa4>
    5b9c:	00800074 	movhi	r2,1
    5ba0:	108be404 	addi	r2,r2,12176
    5ba4:	11000017 	ldw	r4,0(r2)
    5ba8:	01400034 	movhi	r5,0
    5bac:	00800044 	movi	r2,1
    5bb0:	29569804 	addi	r5,r5,23136
    5bb4:	8080030d 	sth	r2,12(r16)
    5bb8:	0004b000 	call	4b00 <_fwalk>
    5bbc:	00800244 	movi	r2,9
    5bc0:	8480030d 	sth	r18,12(r16)
    5bc4:	9480024c 	andi	r18,r18,9
    5bc8:	90bfd51e 	bne	r18,r2,5b20 <__alt_data_end+0xfffe5b20>
    5bcc:	800b883a 	mov	r5,r16
    5bd0:	8809883a 	mov	r4,r17
    5bd4:	000381c0 	call	381c <__sflush_r>
    5bd8:	003fd106 	br	5b20 <__alt_data_end+0xfffe5b20>
    5bdc:	18c01014 	ori	r3,r3,64
    5be0:	80000115 	stw	zero,4(r16)
    5be4:	00bfffc4 	movi	r2,-1
    5be8:	80c0030d 	sth	r3,12(r16)
    5bec:	003fd606 	br	5b48 <__alt_data_end+0xfffe5b48>
    5bf0:	80c00e17 	ldw	r3,56(r16)
    5bf4:	0005883a 	mov	r2,zero
    5bf8:	80c00015 	stw	r3,0(r16)
    5bfc:	003fd206 	br	5b48 <__alt_data_end+0xfffe5b48>
    5c00:	800b883a 	mov	r5,r16
    5c04:	8809883a 	mov	r4,r17
    5c08:	0003a380 	call	3a38 <_fflush_r>
    5c0c:	10000a1e 	bne	r2,zero,5c38 <__srefill_r+0x1bc>
    5c10:	8080030b 	ldhu	r2,12(r16)
    5c14:	00fffdc4 	movi	r3,-9
    5c18:	80000215 	stw	zero,8(r16)
    5c1c:	1886703a 	and	r3,r3,r2
    5c20:	80000615 	stw	zero,24(r16)
    5c24:	003fd206 	br	5b70 <__alt_data_end+0xfffe5b70>
    5c28:	00800244 	movi	r2,9
    5c2c:	88800015 	stw	r2,0(r17)
    5c30:	18c01014 	ori	r3,r3,64
    5c34:	80c0030d 	sth	r3,12(r16)
    5c38:	00bfffc4 	movi	r2,-1
    5c3c:	003fc206 	br	5b48 <__alt_data_end+0xfffe5b48>
    5c40:	800b883a 	mov	r5,r16
    5c44:	8809883a 	mov	r4,r17
    5c48:	0004c880 	call	4c88 <__smakebuf_r>
    5c4c:	003fb106 	br	5b14 <__alt_data_end+0xfffe5b14>

00005c50 <_sbrk_r>:
    5c50:	defffd04 	addi	sp,sp,-12
    5c54:	dc000015 	stw	r16,0(sp)
    5c58:	04000074 	movhi	r16,1
    5c5c:	dc400115 	stw	r17,4(sp)
    5c60:	8412af04 	addi	r16,r16,19132
    5c64:	2023883a 	mov	r17,r4
    5c68:	2809883a 	mov	r4,r5
    5c6c:	dfc00215 	stw	ra,8(sp)
    5c70:	80000015 	stw	zero,0(r16)
    5c74:	000f5540 	call	f554 <sbrk>
    5c78:	00ffffc4 	movi	r3,-1
    5c7c:	10c00526 	beq	r2,r3,5c94 <_sbrk_r+0x44>
    5c80:	dfc00217 	ldw	ra,8(sp)
    5c84:	dc400117 	ldw	r17,4(sp)
    5c88:	dc000017 	ldw	r16,0(sp)
    5c8c:	dec00304 	addi	sp,sp,12
    5c90:	f800283a 	ret
    5c94:	80c00017 	ldw	r3,0(r16)
    5c98:	183ff926 	beq	r3,zero,5c80 <__alt_data_end+0xfffe5c80>
    5c9c:	88c00015 	stw	r3,0(r17)
    5ca0:	003ff706 	br	5c80 <__alt_data_end+0xfffe5c80>

00005ca4 <__sread>:
    5ca4:	defffe04 	addi	sp,sp,-8
    5ca8:	dc000015 	stw	r16,0(sp)
    5cac:	2821883a 	mov	r16,r5
    5cb0:	2940038f 	ldh	r5,14(r5)
    5cb4:	dfc00115 	stw	ra,4(sp)
    5cb8:	000b8600 	call	b860 <_read_r>
    5cbc:	10000716 	blt	r2,zero,5cdc <__sread+0x38>
    5cc0:	80c01417 	ldw	r3,80(r16)
    5cc4:	1887883a 	add	r3,r3,r2
    5cc8:	80c01415 	stw	r3,80(r16)
    5ccc:	dfc00117 	ldw	ra,4(sp)
    5cd0:	dc000017 	ldw	r16,0(sp)
    5cd4:	dec00204 	addi	sp,sp,8
    5cd8:	f800283a 	ret
    5cdc:	80c0030b 	ldhu	r3,12(r16)
    5ce0:	18fbffcc 	andi	r3,r3,61439
    5ce4:	80c0030d 	sth	r3,12(r16)
    5ce8:	dfc00117 	ldw	ra,4(sp)
    5cec:	dc000017 	ldw	r16,0(sp)
    5cf0:	dec00204 	addi	sp,sp,8
    5cf4:	f800283a 	ret

00005cf8 <__seofread>:
    5cf8:	0005883a 	mov	r2,zero
    5cfc:	f800283a 	ret

00005d00 <__swrite>:
    5d00:	2880030b 	ldhu	r2,12(r5)
    5d04:	defffb04 	addi	sp,sp,-20
    5d08:	dcc00315 	stw	r19,12(sp)
    5d0c:	dc800215 	stw	r18,8(sp)
    5d10:	dc400115 	stw	r17,4(sp)
    5d14:	dc000015 	stw	r16,0(sp)
    5d18:	dfc00415 	stw	ra,16(sp)
    5d1c:	10c0400c 	andi	r3,r2,256
    5d20:	2821883a 	mov	r16,r5
    5d24:	2023883a 	mov	r17,r4
    5d28:	3025883a 	mov	r18,r6
    5d2c:	3827883a 	mov	r19,r7
    5d30:	18000526 	beq	r3,zero,5d48 <__swrite+0x48>
    5d34:	2940038f 	ldh	r5,14(r5)
    5d38:	01c00084 	movi	r7,2
    5d3c:	000d883a 	mov	r6,zero
    5d40:	000a5080 	call	a508 <_lseek_r>
    5d44:	8080030b 	ldhu	r2,12(r16)
    5d48:	8140038f 	ldh	r5,14(r16)
    5d4c:	10bbffcc 	andi	r2,r2,61439
    5d50:	980f883a 	mov	r7,r19
    5d54:	900d883a 	mov	r6,r18
    5d58:	8809883a 	mov	r4,r17
    5d5c:	8080030d 	sth	r2,12(r16)
    5d60:	dfc00417 	ldw	ra,16(sp)
    5d64:	dcc00317 	ldw	r19,12(sp)
    5d68:	dc800217 	ldw	r18,8(sp)
    5d6c:	dc400117 	ldw	r17,4(sp)
    5d70:	dc000017 	ldw	r16,0(sp)
    5d74:	dec00504 	addi	sp,sp,20
    5d78:	000822c1 	jmpi	822c <_write_r>

00005d7c <__sseek>:
    5d7c:	defffe04 	addi	sp,sp,-8
    5d80:	dc000015 	stw	r16,0(sp)
    5d84:	2821883a 	mov	r16,r5
    5d88:	2940038f 	ldh	r5,14(r5)
    5d8c:	dfc00115 	stw	ra,4(sp)
    5d90:	000a5080 	call	a508 <_lseek_r>
    5d94:	00ffffc4 	movi	r3,-1
    5d98:	10c00826 	beq	r2,r3,5dbc <__sseek+0x40>
    5d9c:	80c0030b 	ldhu	r3,12(r16)
    5da0:	80801415 	stw	r2,80(r16)
    5da4:	18c40014 	ori	r3,r3,4096
    5da8:	80c0030d 	sth	r3,12(r16)
    5dac:	dfc00117 	ldw	ra,4(sp)
    5db0:	dc000017 	ldw	r16,0(sp)
    5db4:	dec00204 	addi	sp,sp,8
    5db8:	f800283a 	ret
    5dbc:	80c0030b 	ldhu	r3,12(r16)
    5dc0:	18fbffcc 	andi	r3,r3,61439
    5dc4:	80c0030d 	sth	r3,12(r16)
    5dc8:	dfc00117 	ldw	ra,4(sp)
    5dcc:	dc000017 	ldw	r16,0(sp)
    5dd0:	dec00204 	addi	sp,sp,8
    5dd4:	f800283a 	ret

00005dd8 <__sclose>:
    5dd8:	2940038f 	ldh	r5,14(r5)
    5ddc:	00083e01 	jmpi	83e0 <_close_r>

00005de0 <strlen>:
    5de0:	208000cc 	andi	r2,r4,3
    5de4:	10002026 	beq	r2,zero,5e68 <strlen+0x88>
    5de8:	20800007 	ldb	r2,0(r4)
    5dec:	10002026 	beq	r2,zero,5e70 <strlen+0x90>
    5df0:	2005883a 	mov	r2,r4
    5df4:	00000206 	br	5e00 <strlen+0x20>
    5df8:	10c00007 	ldb	r3,0(r2)
    5dfc:	18001826 	beq	r3,zero,5e60 <strlen+0x80>
    5e00:	10800044 	addi	r2,r2,1
    5e04:	10c000cc 	andi	r3,r2,3
    5e08:	183ffb1e 	bne	r3,zero,5df8 <__alt_data_end+0xfffe5df8>
    5e0c:	10c00017 	ldw	r3,0(r2)
    5e10:	01ffbff4 	movhi	r7,65279
    5e14:	39ffbfc4 	addi	r7,r7,-257
    5e18:	00ca303a 	nor	r5,zero,r3
    5e1c:	01a02074 	movhi	r6,32897
    5e20:	19c7883a 	add	r3,r3,r7
    5e24:	31a02004 	addi	r6,r6,-32640
    5e28:	1946703a 	and	r3,r3,r5
    5e2c:	1986703a 	and	r3,r3,r6
    5e30:	1800091e 	bne	r3,zero,5e58 <strlen+0x78>
    5e34:	10800104 	addi	r2,r2,4
    5e38:	10c00017 	ldw	r3,0(r2)
    5e3c:	19cb883a 	add	r5,r3,r7
    5e40:	00c6303a 	nor	r3,zero,r3
    5e44:	28c6703a 	and	r3,r5,r3
    5e48:	1986703a 	and	r3,r3,r6
    5e4c:	183ff926 	beq	r3,zero,5e34 <__alt_data_end+0xfffe5e34>
    5e50:	00000106 	br	5e58 <strlen+0x78>
    5e54:	10800044 	addi	r2,r2,1
    5e58:	10c00007 	ldb	r3,0(r2)
    5e5c:	183ffd1e 	bne	r3,zero,5e54 <__alt_data_end+0xfffe5e54>
    5e60:	1105c83a 	sub	r2,r2,r4
    5e64:	f800283a 	ret
    5e68:	2005883a 	mov	r2,r4
    5e6c:	003fe706 	br	5e0c <__alt_data_end+0xfffe5e0c>
    5e70:	0005883a 	mov	r2,zero
    5e74:	f800283a 	ret

00005e78 <___vfprintf_internal_r>:
    5e78:	deffb804 	addi	sp,sp,-288
    5e7c:	dfc04715 	stw	ra,284(sp)
    5e80:	ddc04515 	stw	r23,276(sp)
    5e84:	dd404315 	stw	r21,268(sp)
    5e88:	d9002d15 	stw	r4,180(sp)
    5e8c:	282f883a 	mov	r23,r5
    5e90:	302b883a 	mov	r21,r6
    5e94:	d9c02e15 	stw	r7,184(sp)
    5e98:	df004615 	stw	fp,280(sp)
    5e9c:	dd804415 	stw	r22,272(sp)
    5ea0:	dd004215 	stw	r20,264(sp)
    5ea4:	dcc04115 	stw	r19,260(sp)
    5ea8:	dc804015 	stw	r18,256(sp)
    5eac:	dc403f15 	stw	r17,252(sp)
    5eb0:	dc003e15 	stw	r16,248(sp)
    5eb4:	000a4d80 	call	a4d8 <_localeconv_r>
    5eb8:	10800017 	ldw	r2,0(r2)
    5ebc:	1009883a 	mov	r4,r2
    5ec0:	d8803415 	stw	r2,208(sp)
    5ec4:	0005de00 	call	5de0 <strlen>
    5ec8:	d8803715 	stw	r2,220(sp)
    5ecc:	d8802d17 	ldw	r2,180(sp)
    5ed0:	10000226 	beq	r2,zero,5edc <___vfprintf_internal_r+0x64>
    5ed4:	10800e17 	ldw	r2,56(r2)
    5ed8:	1000fb26 	beq	r2,zero,62c8 <___vfprintf_internal_r+0x450>
    5edc:	b880030b 	ldhu	r2,12(r23)
    5ee0:	10c8000c 	andi	r3,r2,8192
    5ee4:	1800061e 	bne	r3,zero,5f00 <___vfprintf_internal_r+0x88>
    5ee8:	b9001917 	ldw	r4,100(r23)
    5eec:	00f7ffc4 	movi	r3,-8193
    5ef0:	10880014 	ori	r2,r2,8192
    5ef4:	20c6703a 	and	r3,r4,r3
    5ef8:	b880030d 	sth	r2,12(r23)
    5efc:	b8c01915 	stw	r3,100(r23)
    5f00:	10c0020c 	andi	r3,r2,8
    5f04:	1800c326 	beq	r3,zero,6214 <___vfprintf_internal_r+0x39c>
    5f08:	b8c00417 	ldw	r3,16(r23)
    5f0c:	1800c126 	beq	r3,zero,6214 <___vfprintf_internal_r+0x39c>
    5f10:	1080068c 	andi	r2,r2,26
    5f14:	00c00284 	movi	r3,10
    5f18:	10c0c626 	beq	r2,r3,6234 <___vfprintf_internal_r+0x3bc>
    5f1c:	d8c00404 	addi	r3,sp,16
    5f20:	05000074 	movhi	r20,1
    5f24:	d9001e04 	addi	r4,sp,120
    5f28:	a504cb84 	addi	r20,r20,4910
    5f2c:	d8c01e15 	stw	r3,120(sp)
    5f30:	d8002015 	stw	zero,128(sp)
    5f34:	d8001f15 	stw	zero,124(sp)
    5f38:	d8003315 	stw	zero,204(sp)
    5f3c:	d8003615 	stw	zero,216(sp)
    5f40:	d8003815 	stw	zero,224(sp)
    5f44:	1811883a 	mov	r8,r3
    5f48:	d8003915 	stw	zero,228(sp)
    5f4c:	d8003a15 	stw	zero,232(sp)
    5f50:	d8002f15 	stw	zero,188(sp)
    5f54:	d9002815 	stw	r4,160(sp)
    5f58:	a8800007 	ldb	r2,0(r21)
    5f5c:	10028b26 	beq	r2,zero,698c <___vfprintf_internal_r+0xb14>
    5f60:	00c00944 	movi	r3,37
    5f64:	a823883a 	mov	r17,r21
    5f68:	10c0021e 	bne	r2,r3,5f74 <___vfprintf_internal_r+0xfc>
    5f6c:	00001406 	br	5fc0 <___vfprintf_internal_r+0x148>
    5f70:	10c00326 	beq	r2,r3,5f80 <___vfprintf_internal_r+0x108>
    5f74:	8c400044 	addi	r17,r17,1
    5f78:	88800007 	ldb	r2,0(r17)
    5f7c:	103ffc1e 	bne	r2,zero,5f70 <__alt_data_end+0xfffe5f70>
    5f80:	8d61c83a 	sub	r16,r17,r21
    5f84:	80000e26 	beq	r16,zero,5fc0 <___vfprintf_internal_r+0x148>
    5f88:	d8c02017 	ldw	r3,128(sp)
    5f8c:	d8801f17 	ldw	r2,124(sp)
    5f90:	45400015 	stw	r21,0(r8)
    5f94:	1c07883a 	add	r3,r3,r16
    5f98:	10800044 	addi	r2,r2,1
    5f9c:	d8c02015 	stw	r3,128(sp)
    5fa0:	44000115 	stw	r16,4(r8)
    5fa4:	d8801f15 	stw	r2,124(sp)
    5fa8:	00c001c4 	movi	r3,7
    5fac:	1880a916 	blt	r3,r2,6254 <___vfprintf_internal_r+0x3dc>
    5fb0:	42000204 	addi	r8,r8,8
    5fb4:	d9402f17 	ldw	r5,188(sp)
    5fb8:	2c0b883a 	add	r5,r5,r16
    5fbc:	d9402f15 	stw	r5,188(sp)
    5fc0:	88800007 	ldb	r2,0(r17)
    5fc4:	1000aa26 	beq	r2,zero,6270 <___vfprintf_internal_r+0x3f8>
    5fc8:	8d400044 	addi	r21,r17,1
    5fcc:	8c400047 	ldb	r17,1(r17)
    5fd0:	0021883a 	mov	r16,zero
    5fd4:	00bfffc4 	movi	r2,-1
    5fd8:	0025883a 	mov	r18,zero
    5fdc:	dc002905 	stb	r16,164(sp)
    5fe0:	d8002785 	stb	zero,158(sp)
    5fe4:	d8002b05 	stb	zero,172(sp)
    5fe8:	d8802a15 	stw	r2,168(sp)
    5fec:	d8003115 	stw	zero,196(sp)
    5ff0:	04c01604 	movi	r19,88
    5ff4:	05800244 	movi	r22,9
    5ff8:	9021883a 	mov	r16,r18
    5ffc:	4039883a 	mov	fp,r8
    6000:	ad400044 	addi	r21,r21,1
    6004:	88bff804 	addi	r2,r17,-32
    6008:	98833236 	bltu	r19,r2,6cd4 <___vfprintf_internal_r+0xe5c>
    600c:	100490ba 	slli	r2,r2,2
    6010:	00c00034 	movhi	r3,0
    6014:	18d80904 	addi	r3,r3,24612
    6018:	10c5883a 	add	r2,r2,r3
    601c:	10800017 	ldw	r2,0(r2)
    6020:	1000683a 	jmp	r2
    6024:	00006bcc 	andi	zero,zero,431
    6028:	00006cd4 	movui	zero,435
    602c:	00006cd4 	movui	zero,435
    6030:	00006bec 	andhi	zero,zero,431
    6034:	00006cd4 	movui	zero,435
    6038:	00006cd4 	movui	zero,435
    603c:	00006cd4 	movui	zero,435
    6040:	00006cd4 	movui	zero,435
    6044:	00006cd4 	movui	zero,435
    6048:	00006cd4 	movui	zero,435
    604c:	000062d4 	movui	zero,395
    6050:	00006adc 	xori	zero,zero,427
    6054:	00006cd4 	movui	zero,435
    6058:	00006198 	cmpnei	zero,zero,390
    605c:	000062f8 	rdprs	zero,zero,395
    6060:	00006cd4 	movui	zero,435
    6064:	00006348 	cmpgei	zero,zero,397
    6068:	00006354 	movui	zero,397
    606c:	00006354 	movui	zero,397
    6070:	00006354 	movui	zero,397
    6074:	00006354 	movui	zero,397
    6078:	00006354 	movui	zero,397
    607c:	00006354 	movui	zero,397
    6080:	00006354 	movui	zero,397
    6084:	00006354 	movui	zero,397
    6088:	00006354 	movui	zero,397
    608c:	00006cd4 	movui	zero,435
    6090:	00006cd4 	movui	zero,435
    6094:	00006cd4 	movui	zero,435
    6098:	00006cd4 	movui	zero,435
    609c:	00006cd4 	movui	zero,435
    60a0:	00006cd4 	movui	zero,435
    60a4:	00006cd4 	movui	zero,435
    60a8:	00006cd4 	movui	zero,435
    60ac:	00006cd4 	movui	zero,435
    60b0:	00006cd4 	movui	zero,435
    60b4:	00006390 	cmplti	zero,zero,398
    60b8:	00006458 	cmpnei	zero,zero,401
    60bc:	00006cd4 	movui	zero,435
    60c0:	00006458 	cmpnei	zero,zero,401
    60c4:	00006cd4 	movui	zero,435
    60c8:	00006cd4 	movui	zero,435
    60cc:	00006cd4 	movui	zero,435
    60d0:	00006cd4 	movui	zero,435
    60d4:	00006504 	movi	zero,404
    60d8:	00006cd4 	movui	zero,435
    60dc:	00006cd4 	movui	zero,435
    60e0:	00006510 	cmplti	zero,zero,404
    60e4:	00006cd4 	movui	zero,435
    60e8:	00006cd4 	movui	zero,435
    60ec:	00006cd4 	movui	zero,435
    60f0:	00006cd4 	movui	zero,435
    60f4:	00006cd4 	movui	zero,435
    60f8:	00006994 	movui	zero,422
    60fc:	00006cd4 	movui	zero,435
    6100:	00006cd4 	movui	zero,435
    6104:	00006a00 	call	6a0 <calcCellOutput+0xbc>
    6108:	00006cd4 	movui	zero,435
    610c:	00006cd4 	movui	zero,435
    6110:	00006cd4 	movui	zero,435
    6114:	00006cd4 	movui	zero,435
    6118:	00006cd4 	movui	zero,435
    611c:	00006cd4 	movui	zero,435
    6120:	00006cd4 	movui	zero,435
    6124:	00006cd4 	movui	zero,435
    6128:	00006cd4 	movui	zero,435
    612c:	00006cd4 	movui	zero,435
    6130:	00006c78 	rdprs	zero,zero,433
    6134:	00006bf8 	rdprs	zero,zero,431
    6138:	00006458 	cmpnei	zero,zero,401
    613c:	00006458 	cmpnei	zero,zero,401
    6140:	00006458 	cmpnei	zero,zero,401
    6144:	00006c18 	cmpnei	zero,zero,432
    6148:	00006bf8 	rdprs	zero,zero,431
    614c:	00006cd4 	movui	zero,435
    6150:	00006cd4 	movui	zero,435
    6154:	00006c24 	muli	zero,zero,432
    6158:	00006cd4 	movui	zero,435
    615c:	00006c38 	rdprs	zero,zero,432
    6160:	00006abc 	xorhi	zero,zero,426
    6164:	000061a4 	muli	zero,zero,390
    6168:	00006af4 	movhi	zero,427
    616c:	00006cd4 	movui	zero,435
    6170:	00006b00 	call	6b0 <calcCellOutput+0xcc>
    6174:	00006cd4 	movui	zero,435
    6178:	00006b64 	muli	zero,zero,429
    617c:	00006cd4 	movui	zero,435
    6180:	00006cd4 	movui	zero,435
    6184:	00006b84 	movi	zero,430
    6188:	d8c03117 	ldw	r3,196(sp)
    618c:	d8802e15 	stw	r2,184(sp)
    6190:	00c7c83a 	sub	r3,zero,r3
    6194:	d8c03115 	stw	r3,196(sp)
    6198:	84000114 	ori	r16,r16,4
    619c:	ac400007 	ldb	r17,0(r21)
    61a0:	003f9706 	br	6000 <__alt_data_end+0xfffe6000>
    61a4:	00800c04 	movi	r2,48
    61a8:	d8802705 	stb	r2,156(sp)
    61ac:	00801e04 	movi	r2,120
    61b0:	d8802745 	stb	r2,157(sp)
    61b4:	d9002a17 	ldw	r4,168(sp)
    61b8:	d8802e17 	ldw	r2,184(sp)
    61bc:	d8002785 	stb	zero,158(sp)
    61c0:	e011883a 	mov	r8,fp
    61c4:	10c00104 	addi	r3,r2,4
    61c8:	14c00017 	ldw	r19,0(r2)
    61cc:	002d883a 	mov	r22,zero
    61d0:	80800094 	ori	r2,r16,2
    61d4:	2002ca16 	blt	r4,zero,6d00 <___vfprintf_internal_r+0xe88>
    61d8:	00bfdfc4 	movi	r2,-129
    61dc:	80a4703a 	and	r18,r16,r2
    61e0:	d8c02e15 	stw	r3,184(sp)
    61e4:	94800094 	ori	r18,r18,2
    61e8:	9802b41e 	bne	r19,zero,6cbc <___vfprintf_internal_r+0xe44>
    61ec:	01400074 	movhi	r5,1
    61f0:	2944c404 	addi	r5,r5,4880
    61f4:	d9403915 	stw	r5,228(sp)
    61f8:	04401e04 	movi	r17,120
    61fc:	d8802a17 	ldw	r2,168(sp)
    6200:	0039883a 	mov	fp,zero
    6204:	1001fa26 	beq	r2,zero,69f0 <___vfprintf_internal_r+0xb78>
    6208:	0027883a 	mov	r19,zero
    620c:	002d883a 	mov	r22,zero
    6210:	00021906 	br	6a78 <___vfprintf_internal_r+0xc00>
    6214:	d9002d17 	ldw	r4,180(sp)
    6218:	b80b883a 	mov	r5,r23
    621c:	000828c0 	call	828c <__swsetup_r>
    6220:	1005dc1e 	bne	r2,zero,7994 <___vfprintf_internal_r+0x1b1c>
    6224:	b880030b 	ldhu	r2,12(r23)
    6228:	00c00284 	movi	r3,10
    622c:	1080068c 	andi	r2,r2,26
    6230:	10ff3a1e 	bne	r2,r3,5f1c <__alt_data_end+0xfffe5f1c>
    6234:	b880038f 	ldh	r2,14(r23)
    6238:	103f3816 	blt	r2,zero,5f1c <__alt_data_end+0xfffe5f1c>
    623c:	d9c02e17 	ldw	r7,184(sp)
    6240:	d9002d17 	ldw	r4,180(sp)
    6244:	a80d883a 	mov	r6,r21
    6248:	b80b883a 	mov	r5,r23
    624c:	00081700 	call	8170 <__sbprintf>
    6250:	00001106 	br	6298 <___vfprintf_internal_r+0x420>
    6254:	d9002d17 	ldw	r4,180(sp)
    6258:	d9801e04 	addi	r6,sp,120
    625c:	b80b883a 	mov	r5,r23
    6260:	000c0700 	call	c070 <__sprint_r>
    6264:	1000081e 	bne	r2,zero,6288 <___vfprintf_internal_r+0x410>
    6268:	da000404 	addi	r8,sp,16
    626c:	003f5106 	br	5fb4 <__alt_data_end+0xfffe5fb4>
    6270:	d8802017 	ldw	r2,128(sp)
    6274:	10000426 	beq	r2,zero,6288 <___vfprintf_internal_r+0x410>
    6278:	d9002d17 	ldw	r4,180(sp)
    627c:	d9801e04 	addi	r6,sp,120
    6280:	b80b883a 	mov	r5,r23
    6284:	000c0700 	call	c070 <__sprint_r>
    6288:	b880030b 	ldhu	r2,12(r23)
    628c:	1080100c 	andi	r2,r2,64
    6290:	1005c01e 	bne	r2,zero,7994 <___vfprintf_internal_r+0x1b1c>
    6294:	d8802f17 	ldw	r2,188(sp)
    6298:	dfc04717 	ldw	ra,284(sp)
    629c:	df004617 	ldw	fp,280(sp)
    62a0:	ddc04517 	ldw	r23,276(sp)
    62a4:	dd804417 	ldw	r22,272(sp)
    62a8:	dd404317 	ldw	r21,268(sp)
    62ac:	dd004217 	ldw	r20,264(sp)
    62b0:	dcc04117 	ldw	r19,260(sp)
    62b4:	dc804017 	ldw	r18,256(sp)
    62b8:	dc403f17 	ldw	r17,252(sp)
    62bc:	dc003e17 	ldw	r16,248(sp)
    62c0:	dec04804 	addi	sp,sp,288
    62c4:	f800283a 	ret
    62c8:	d9002d17 	ldw	r4,180(sp)
    62cc:	0003e240 	call	3e24 <__sinit>
    62d0:	003f0206 	br	5edc <__alt_data_end+0xfffe5edc>
    62d4:	d9002e17 	ldw	r4,184(sp)
    62d8:	d9402e17 	ldw	r5,184(sp)
    62dc:	21000017 	ldw	r4,0(r4)
    62e0:	28800104 	addi	r2,r5,4
    62e4:	d9003115 	stw	r4,196(sp)
    62e8:	203fa716 	blt	r4,zero,6188 <__alt_data_end+0xfffe6188>
    62ec:	d8802e15 	stw	r2,184(sp)
    62f0:	ac400007 	ldb	r17,0(r21)
    62f4:	003f4206 	br	6000 <__alt_data_end+0xfffe6000>
    62f8:	ac400007 	ldb	r17,0(r21)
    62fc:	01000a84 	movi	r4,42
    6300:	a8c00044 	addi	r3,r21,1
    6304:	89075826 	beq	r17,r4,8068 <___vfprintf_internal_r+0x21f0>
    6308:	8cbff404 	addi	r18,r17,-48
    630c:	b486ae36 	bltu	r22,r18,7dc8 <___vfprintf_internal_r+0x1f50>
    6310:	0009883a 	mov	r4,zero
    6314:	1823883a 	mov	r17,r3
    6318:	01400284 	movi	r5,10
    631c:	0000f040 	call	f04 <__mulsi3>
    6320:	88c00007 	ldb	r3,0(r17)
    6324:	1489883a 	add	r4,r2,r18
    6328:	8d400044 	addi	r21,r17,1
    632c:	1cbff404 	addi	r18,r3,-48
    6330:	a823883a 	mov	r17,r21
    6334:	b4bff82e 	bgeu	r22,r18,6318 <__alt_data_end+0xfffe6318>
    6338:	1823883a 	mov	r17,r3
    633c:	2005f616 	blt	r4,zero,7b18 <___vfprintf_internal_r+0x1ca0>
    6340:	d9002a15 	stw	r4,168(sp)
    6344:	003f2f06 	br	6004 <__alt_data_end+0xfffe6004>
    6348:	84002014 	ori	r16,r16,128
    634c:	ac400007 	ldb	r17,0(r21)
    6350:	003f2b06 	br	6000 <__alt_data_end+0xfffe6000>
    6354:	8cbff404 	addi	r18,r17,-48
    6358:	d8003115 	stw	zero,196(sp)
    635c:	0009883a 	mov	r4,zero
    6360:	a823883a 	mov	r17,r21
    6364:	01400284 	movi	r5,10
    6368:	0000f040 	call	f04 <__mulsi3>
    636c:	88c00007 	ldb	r3,0(r17)
    6370:	9089883a 	add	r4,r18,r2
    6374:	ad400044 	addi	r21,r21,1
    6378:	1cbff404 	addi	r18,r3,-48
    637c:	a823883a 	mov	r17,r21
    6380:	b4bff82e 	bgeu	r22,r18,6364 <__alt_data_end+0xfffe6364>
    6384:	1823883a 	mov	r17,r3
    6388:	d9003115 	stw	r4,196(sp)
    638c:	003f1d06 	br	6004 <__alt_data_end+0xfffe6004>
    6390:	8025883a 	mov	r18,r16
    6394:	dc002903 	ldbu	r16,164(sp)
    6398:	e011883a 	mov	r8,fp
    639c:	84003fcc 	andi	r16,r16,255
    63a0:	8007531e 	bne	r16,zero,80f0 <___vfprintf_internal_r+0x2278>
    63a4:	94800414 	ori	r18,r18,16
    63a8:	9080080c 	andi	r2,r18,32
    63ac:	1003a326 	beq	r2,zero,723c <___vfprintf_internal_r+0x13c4>
    63b0:	d9002e17 	ldw	r4,184(sp)
    63b4:	20800117 	ldw	r2,4(r4)
    63b8:	24c00017 	ldw	r19,0(r4)
    63bc:	21000204 	addi	r4,r4,8
    63c0:	d9002e15 	stw	r4,184(sp)
    63c4:	102d883a 	mov	r22,r2
    63c8:	10047316 	blt	r2,zero,7598 <___vfprintf_internal_r+0x1720>
    63cc:	d9002a17 	ldw	r4,168(sp)
    63d0:	df002783 	ldbu	fp,158(sp)
    63d4:	2003e416 	blt	r4,zero,7368 <___vfprintf_internal_r+0x14f0>
    63d8:	00ffdfc4 	movi	r3,-129
    63dc:	9d84b03a 	or	r2,r19,r22
    63e0:	90e4703a 	and	r18,r18,r3
    63e4:	10018026 	beq	r2,zero,69e8 <___vfprintf_internal_r+0xb70>
    63e8:	b003ab26 	beq	r22,zero,7298 <___vfprintf_internal_r+0x1420>
    63ec:	dc402915 	stw	r17,164(sp)
    63f0:	dc001e04 	addi	r16,sp,120
    63f4:	b023883a 	mov	r17,r22
    63f8:	402d883a 	mov	r22,r8
    63fc:	9809883a 	mov	r4,r19
    6400:	880b883a 	mov	r5,r17
    6404:	01800284 	movi	r6,10
    6408:	000f883a 	mov	r7,zero
    640c:	000e28c0 	call	e28c <__umoddi3>
    6410:	10800c04 	addi	r2,r2,48
    6414:	843fffc4 	addi	r16,r16,-1
    6418:	9809883a 	mov	r4,r19
    641c:	880b883a 	mov	r5,r17
    6420:	80800005 	stb	r2,0(r16)
    6424:	01800284 	movi	r6,10
    6428:	000f883a 	mov	r7,zero
    642c:	000dc900 	call	dc90 <__udivdi3>
    6430:	1027883a 	mov	r19,r2
    6434:	10c4b03a 	or	r2,r2,r3
    6438:	1823883a 	mov	r17,r3
    643c:	103fef1e 	bne	r2,zero,63fc <__alt_data_end+0xfffe63fc>
    6440:	d8c02817 	ldw	r3,160(sp)
    6444:	dc402917 	ldw	r17,164(sp)
    6448:	b011883a 	mov	r8,r22
    644c:	1c07c83a 	sub	r3,r3,r16
    6450:	d8c02b15 	stw	r3,172(sp)
    6454:	00005f06 	br	65d4 <___vfprintf_internal_r+0x75c>
    6458:	8025883a 	mov	r18,r16
    645c:	dc002903 	ldbu	r16,164(sp)
    6460:	e011883a 	mov	r8,fp
    6464:	84003fcc 	andi	r16,r16,255
    6468:	80071e1e 	bne	r16,zero,80e4 <___vfprintf_internal_r+0x226c>
    646c:	9080020c 	andi	r2,r18,8
    6470:	1004af26 	beq	r2,zero,7730 <___vfprintf_internal_r+0x18b8>
    6474:	d9002e17 	ldw	r4,184(sp)
    6478:	d9402e17 	ldw	r5,184(sp)
    647c:	d8802e17 	ldw	r2,184(sp)
    6480:	21000017 	ldw	r4,0(r4)
    6484:	29400117 	ldw	r5,4(r5)
    6488:	10800204 	addi	r2,r2,8
    648c:	d9003615 	stw	r4,216(sp)
    6490:	d9403815 	stw	r5,224(sp)
    6494:	d8802e15 	stw	r2,184(sp)
    6498:	d9003617 	ldw	r4,216(sp)
    649c:	d9403817 	ldw	r5,224(sp)
    64a0:	da003d15 	stw	r8,244(sp)
    64a4:	04000044 	movi	r16,1
    64a8:	000be240 	call	be24 <__fpclassifyd>
    64ac:	da003d17 	ldw	r8,244(sp)
    64b0:	1404441e 	bne	r2,r16,75c4 <___vfprintf_internal_r+0x174c>
    64b4:	d9003617 	ldw	r4,216(sp)
    64b8:	d9403817 	ldw	r5,224(sp)
    64bc:	000d883a 	mov	r6,zero
    64c0:	000f883a 	mov	r7,zero
    64c4:	000e8d80 	call	e8d8 <__ledf2>
    64c8:	da003d17 	ldw	r8,244(sp)
    64cc:	1005e316 	blt	r2,zero,7c5c <___vfprintf_internal_r+0x1de4>
    64d0:	df002783 	ldbu	fp,158(sp)
    64d4:	008011c4 	movi	r2,71
    64d8:	1445580e 	bge	r2,r17,7a3c <___vfprintf_internal_r+0x1bc4>
    64dc:	04000074 	movhi	r16,1
    64e0:	8404bc04 	addi	r16,r16,4848
    64e4:	00c000c4 	movi	r3,3
    64e8:	00bfdfc4 	movi	r2,-129
    64ec:	d8c02915 	stw	r3,164(sp)
    64f0:	90a4703a 	and	r18,r18,r2
    64f4:	d8c02b15 	stw	r3,172(sp)
    64f8:	d8002a15 	stw	zero,168(sp)
    64fc:	d8003215 	stw	zero,200(sp)
    6500:	00003a06 	br	65ec <___vfprintf_internal_r+0x774>
    6504:	84000214 	ori	r16,r16,8
    6508:	ac400007 	ldb	r17,0(r21)
    650c:	003ebc06 	br	6000 <__alt_data_end+0xfffe6000>
    6510:	8025883a 	mov	r18,r16
    6514:	dc002903 	ldbu	r16,164(sp)
    6518:	e011883a 	mov	r8,fp
    651c:	84003fcc 	andi	r16,r16,255
    6520:	8007001e 	bne	r16,zero,8124 <___vfprintf_internal_r+0x22ac>
    6524:	94800414 	ori	r18,r18,16
    6528:	9080080c 	andi	r2,r18,32
    652c:	1002fa26 	beq	r2,zero,7118 <___vfprintf_internal_r+0x12a0>
    6530:	d9002e17 	ldw	r4,184(sp)
    6534:	d9402a17 	ldw	r5,168(sp)
    6538:	d8002785 	stb	zero,158(sp)
    653c:	20800204 	addi	r2,r4,8
    6540:	24c00017 	ldw	r19,0(r4)
    6544:	25800117 	ldw	r22,4(r4)
    6548:	2804b116 	blt	r5,zero,7810 <___vfprintf_internal_r+0x1998>
    654c:	013fdfc4 	movi	r4,-129
    6550:	9d86b03a 	or	r3,r19,r22
    6554:	d8802e15 	stw	r2,184(sp)
    6558:	9124703a 	and	r18,r18,r4
    655c:	1802fb1e 	bne	r3,zero,714c <___vfprintf_internal_r+0x12d4>
    6560:	d8c02a17 	ldw	r3,168(sp)
    6564:	0039883a 	mov	fp,zero
    6568:	1805e526 	beq	r3,zero,7d00 <___vfprintf_internal_r+0x1e88>
    656c:	0027883a 	mov	r19,zero
    6570:	002d883a 	mov	r22,zero
    6574:	dc001e04 	addi	r16,sp,120
    6578:	9806d0fa 	srli	r3,r19,3
    657c:	b008977a 	slli	r4,r22,29
    6580:	b02cd0fa 	srli	r22,r22,3
    6584:	9cc001cc 	andi	r19,r19,7
    6588:	98800c04 	addi	r2,r19,48
    658c:	843fffc4 	addi	r16,r16,-1
    6590:	20e6b03a 	or	r19,r4,r3
    6594:	80800005 	stb	r2,0(r16)
    6598:	9d86b03a 	or	r3,r19,r22
    659c:	183ff61e 	bne	r3,zero,6578 <__alt_data_end+0xfffe6578>
    65a0:	90c0004c 	andi	r3,r18,1
    65a4:	18014126 	beq	r3,zero,6aac <___vfprintf_internal_r+0xc34>
    65a8:	10803fcc 	andi	r2,r2,255
    65ac:	1080201c 	xori	r2,r2,128
    65b0:	10bfe004 	addi	r2,r2,-128
    65b4:	00c00c04 	movi	r3,48
    65b8:	10c13c26 	beq	r2,r3,6aac <___vfprintf_internal_r+0xc34>
    65bc:	80ffffc5 	stb	r3,-1(r16)
    65c0:	d8c02817 	ldw	r3,160(sp)
    65c4:	80bfffc4 	addi	r2,r16,-1
    65c8:	1021883a 	mov	r16,r2
    65cc:	1887c83a 	sub	r3,r3,r2
    65d0:	d8c02b15 	stw	r3,172(sp)
    65d4:	d8802b17 	ldw	r2,172(sp)
    65d8:	d9002a17 	ldw	r4,168(sp)
    65dc:	1100010e 	bge	r2,r4,65e4 <___vfprintf_internal_r+0x76c>
    65e0:	2005883a 	mov	r2,r4
    65e4:	d8802915 	stw	r2,164(sp)
    65e8:	d8003215 	stw	zero,200(sp)
    65ec:	e7003fcc 	andi	fp,fp,255
    65f0:	e700201c 	xori	fp,fp,128
    65f4:	e73fe004 	addi	fp,fp,-128
    65f8:	e0000326 	beq	fp,zero,6608 <___vfprintf_internal_r+0x790>
    65fc:	d8c02917 	ldw	r3,164(sp)
    6600:	18c00044 	addi	r3,r3,1
    6604:	d8c02915 	stw	r3,164(sp)
    6608:	90c0008c 	andi	r3,r18,2
    660c:	d8c02c15 	stw	r3,176(sp)
    6610:	18000326 	beq	r3,zero,6620 <___vfprintf_internal_r+0x7a8>
    6614:	d8c02917 	ldw	r3,164(sp)
    6618:	18c00084 	addi	r3,r3,2
    661c:	d8c02915 	stw	r3,164(sp)
    6620:	90c0210c 	andi	r3,r18,132
    6624:	d8c03015 	stw	r3,192(sp)
    6628:	1801c51e 	bne	r3,zero,6d40 <___vfprintf_internal_r+0xec8>
    662c:	d9003117 	ldw	r4,196(sp)
    6630:	d8c02917 	ldw	r3,164(sp)
    6634:	20e7c83a 	sub	r19,r4,r3
    6638:	04c1c10e 	bge	zero,r19,6d40 <___vfprintf_internal_r+0xec8>
    663c:	02400404 	movi	r9,16
    6640:	d8c02017 	ldw	r3,128(sp)
    6644:	d8801f17 	ldw	r2,124(sp)
    6648:	4cc52f0e 	bge	r9,r19,7b08 <___vfprintf_internal_r+0x1c90>
    664c:	01400074 	movhi	r5,1
    6650:	2944cf84 	addi	r5,r5,4926
    6654:	dc403b15 	stw	r17,236(sp)
    6658:	d9403515 	stw	r5,212(sp)
    665c:	9823883a 	mov	r17,r19
    6660:	482d883a 	mov	r22,r9
    6664:	9027883a 	mov	r19,r18
    6668:	070001c4 	movi	fp,7
    666c:	8025883a 	mov	r18,r16
    6670:	dc002d17 	ldw	r16,180(sp)
    6674:	00000306 	br	6684 <___vfprintf_internal_r+0x80c>
    6678:	8c7ffc04 	addi	r17,r17,-16
    667c:	42000204 	addi	r8,r8,8
    6680:	b440130e 	bge	r22,r17,66d0 <___vfprintf_internal_r+0x858>
    6684:	01000074 	movhi	r4,1
    6688:	18c00404 	addi	r3,r3,16
    668c:	10800044 	addi	r2,r2,1
    6690:	2104cf84 	addi	r4,r4,4926
    6694:	41000015 	stw	r4,0(r8)
    6698:	45800115 	stw	r22,4(r8)
    669c:	d8c02015 	stw	r3,128(sp)
    66a0:	d8801f15 	stw	r2,124(sp)
    66a4:	e0bff40e 	bge	fp,r2,6678 <__alt_data_end+0xfffe6678>
    66a8:	d9801e04 	addi	r6,sp,120
    66ac:	b80b883a 	mov	r5,r23
    66b0:	8009883a 	mov	r4,r16
    66b4:	000c0700 	call	c070 <__sprint_r>
    66b8:	103ef31e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    66bc:	8c7ffc04 	addi	r17,r17,-16
    66c0:	d8c02017 	ldw	r3,128(sp)
    66c4:	d8801f17 	ldw	r2,124(sp)
    66c8:	da000404 	addi	r8,sp,16
    66cc:	b47fed16 	blt	r22,r17,6684 <__alt_data_end+0xfffe6684>
    66d0:	9021883a 	mov	r16,r18
    66d4:	9825883a 	mov	r18,r19
    66d8:	8827883a 	mov	r19,r17
    66dc:	dc403b17 	ldw	r17,236(sp)
    66e0:	d9403517 	ldw	r5,212(sp)
    66e4:	98c7883a 	add	r3,r19,r3
    66e8:	10800044 	addi	r2,r2,1
    66ec:	41400015 	stw	r5,0(r8)
    66f0:	44c00115 	stw	r19,4(r8)
    66f4:	d8c02015 	stw	r3,128(sp)
    66f8:	d8801f15 	stw	r2,124(sp)
    66fc:	010001c4 	movi	r4,7
    6700:	2082c516 	blt	r4,r2,7218 <___vfprintf_internal_r+0x13a0>
    6704:	df002787 	ldb	fp,158(sp)
    6708:	42000204 	addi	r8,r8,8
    670c:	e0000c26 	beq	fp,zero,6740 <___vfprintf_internal_r+0x8c8>
    6710:	d8801f17 	ldw	r2,124(sp)
    6714:	d9002784 	addi	r4,sp,158
    6718:	18c00044 	addi	r3,r3,1
    671c:	10800044 	addi	r2,r2,1
    6720:	41000015 	stw	r4,0(r8)
    6724:	01000044 	movi	r4,1
    6728:	41000115 	stw	r4,4(r8)
    672c:	d8c02015 	stw	r3,128(sp)
    6730:	d8801f15 	stw	r2,124(sp)
    6734:	010001c4 	movi	r4,7
    6738:	20825e16 	blt	r4,r2,70b4 <___vfprintf_internal_r+0x123c>
    673c:	42000204 	addi	r8,r8,8
    6740:	d8802c17 	ldw	r2,176(sp)
    6744:	10000c26 	beq	r2,zero,6778 <___vfprintf_internal_r+0x900>
    6748:	d8801f17 	ldw	r2,124(sp)
    674c:	d9002704 	addi	r4,sp,156
    6750:	18c00084 	addi	r3,r3,2
    6754:	10800044 	addi	r2,r2,1
    6758:	41000015 	stw	r4,0(r8)
    675c:	01000084 	movi	r4,2
    6760:	41000115 	stw	r4,4(r8)
    6764:	d8c02015 	stw	r3,128(sp)
    6768:	d8801f15 	stw	r2,124(sp)
    676c:	010001c4 	movi	r4,7
    6770:	20825816 	blt	r4,r2,70d4 <___vfprintf_internal_r+0x125c>
    6774:	42000204 	addi	r8,r8,8
    6778:	d9003017 	ldw	r4,192(sp)
    677c:	00802004 	movi	r2,128
    6780:	2081bb26 	beq	r4,r2,6e70 <___vfprintf_internal_r+0xff8>
    6784:	d9402a17 	ldw	r5,168(sp)
    6788:	d8802b17 	ldw	r2,172(sp)
    678c:	28adc83a 	sub	r22,r5,r2
    6790:	0580310e 	bge	zero,r22,6858 <___vfprintf_internal_r+0x9e0>
    6794:	07000404 	movi	fp,16
    6798:	d8801f17 	ldw	r2,124(sp)
    679c:	e584360e 	bge	fp,r22,7878 <___vfprintf_internal_r+0x1a00>
    67a0:	01400074 	movhi	r5,1
    67a4:	2944cb84 	addi	r5,r5,4910
    67a8:	dc402a15 	stw	r17,168(sp)
    67ac:	d9402c15 	stw	r5,176(sp)
    67b0:	b023883a 	mov	r17,r22
    67b4:	04c001c4 	movi	r19,7
    67b8:	a82d883a 	mov	r22,r21
    67bc:	902b883a 	mov	r21,r18
    67c0:	8025883a 	mov	r18,r16
    67c4:	dc002d17 	ldw	r16,180(sp)
    67c8:	00000306 	br	67d8 <___vfprintf_internal_r+0x960>
    67cc:	8c7ffc04 	addi	r17,r17,-16
    67d0:	42000204 	addi	r8,r8,8
    67d4:	e440110e 	bge	fp,r17,681c <___vfprintf_internal_r+0x9a4>
    67d8:	18c00404 	addi	r3,r3,16
    67dc:	10800044 	addi	r2,r2,1
    67e0:	45000015 	stw	r20,0(r8)
    67e4:	47000115 	stw	fp,4(r8)
    67e8:	d8c02015 	stw	r3,128(sp)
    67ec:	d8801f15 	stw	r2,124(sp)
    67f0:	98bff60e 	bge	r19,r2,67cc <__alt_data_end+0xfffe67cc>
    67f4:	d9801e04 	addi	r6,sp,120
    67f8:	b80b883a 	mov	r5,r23
    67fc:	8009883a 	mov	r4,r16
    6800:	000c0700 	call	c070 <__sprint_r>
    6804:	103ea01e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    6808:	8c7ffc04 	addi	r17,r17,-16
    680c:	d8c02017 	ldw	r3,128(sp)
    6810:	d8801f17 	ldw	r2,124(sp)
    6814:	da000404 	addi	r8,sp,16
    6818:	e47fef16 	blt	fp,r17,67d8 <__alt_data_end+0xfffe67d8>
    681c:	9021883a 	mov	r16,r18
    6820:	a825883a 	mov	r18,r21
    6824:	b02b883a 	mov	r21,r22
    6828:	882d883a 	mov	r22,r17
    682c:	dc402a17 	ldw	r17,168(sp)
    6830:	d9002c17 	ldw	r4,176(sp)
    6834:	1d87883a 	add	r3,r3,r22
    6838:	10800044 	addi	r2,r2,1
    683c:	41000015 	stw	r4,0(r8)
    6840:	45800115 	stw	r22,4(r8)
    6844:	d8c02015 	stw	r3,128(sp)
    6848:	d8801f15 	stw	r2,124(sp)
    684c:	010001c4 	movi	r4,7
    6850:	20821016 	blt	r4,r2,7094 <___vfprintf_internal_r+0x121c>
    6854:	42000204 	addi	r8,r8,8
    6858:	9080400c 	andi	r2,r18,256
    685c:	10013a1e 	bne	r2,zero,6d48 <___vfprintf_internal_r+0xed0>
    6860:	d9402b17 	ldw	r5,172(sp)
    6864:	d8801f17 	ldw	r2,124(sp)
    6868:	44000015 	stw	r16,0(r8)
    686c:	1947883a 	add	r3,r3,r5
    6870:	10800044 	addi	r2,r2,1
    6874:	41400115 	stw	r5,4(r8)
    6878:	d8c02015 	stw	r3,128(sp)
    687c:	d8801f15 	stw	r2,124(sp)
    6880:	010001c4 	movi	r4,7
    6884:	2081f516 	blt	r4,r2,705c <___vfprintf_internal_r+0x11e4>
    6888:	42000204 	addi	r8,r8,8
    688c:	9480010c 	andi	r18,r18,4
    6890:	90003226 	beq	r18,zero,695c <___vfprintf_internal_r+0xae4>
    6894:	d9403117 	ldw	r5,196(sp)
    6898:	d8802917 	ldw	r2,164(sp)
    689c:	28a1c83a 	sub	r16,r5,r2
    68a0:	04002e0e 	bge	zero,r16,695c <___vfprintf_internal_r+0xae4>
    68a4:	04400404 	movi	r17,16
    68a8:	d8801f17 	ldw	r2,124(sp)
    68ac:	8c04c40e 	bge	r17,r16,7bc0 <___vfprintf_internal_r+0x1d48>
    68b0:	01400074 	movhi	r5,1
    68b4:	2944cf84 	addi	r5,r5,4926
    68b8:	d9403515 	stw	r5,212(sp)
    68bc:	048001c4 	movi	r18,7
    68c0:	dcc02d17 	ldw	r19,180(sp)
    68c4:	00000306 	br	68d4 <___vfprintf_internal_r+0xa5c>
    68c8:	843ffc04 	addi	r16,r16,-16
    68cc:	42000204 	addi	r8,r8,8
    68d0:	8c00130e 	bge	r17,r16,6920 <___vfprintf_internal_r+0xaa8>
    68d4:	01000074 	movhi	r4,1
    68d8:	18c00404 	addi	r3,r3,16
    68dc:	10800044 	addi	r2,r2,1
    68e0:	2104cf84 	addi	r4,r4,4926
    68e4:	41000015 	stw	r4,0(r8)
    68e8:	44400115 	stw	r17,4(r8)
    68ec:	d8c02015 	stw	r3,128(sp)
    68f0:	d8801f15 	stw	r2,124(sp)
    68f4:	90bff40e 	bge	r18,r2,68c8 <__alt_data_end+0xfffe68c8>
    68f8:	d9801e04 	addi	r6,sp,120
    68fc:	b80b883a 	mov	r5,r23
    6900:	9809883a 	mov	r4,r19
    6904:	000c0700 	call	c070 <__sprint_r>
    6908:	103e5f1e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    690c:	843ffc04 	addi	r16,r16,-16
    6910:	d8c02017 	ldw	r3,128(sp)
    6914:	d8801f17 	ldw	r2,124(sp)
    6918:	da000404 	addi	r8,sp,16
    691c:	8c3fed16 	blt	r17,r16,68d4 <__alt_data_end+0xfffe68d4>
    6920:	d9403517 	ldw	r5,212(sp)
    6924:	1c07883a 	add	r3,r3,r16
    6928:	10800044 	addi	r2,r2,1
    692c:	41400015 	stw	r5,0(r8)
    6930:	44000115 	stw	r16,4(r8)
    6934:	d8c02015 	stw	r3,128(sp)
    6938:	d8801f15 	stw	r2,124(sp)
    693c:	010001c4 	movi	r4,7
    6940:	2080060e 	bge	r4,r2,695c <___vfprintf_internal_r+0xae4>
    6944:	d9002d17 	ldw	r4,180(sp)
    6948:	d9801e04 	addi	r6,sp,120
    694c:	b80b883a 	mov	r5,r23
    6950:	000c0700 	call	c070 <__sprint_r>
    6954:	103e4c1e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    6958:	d8c02017 	ldw	r3,128(sp)
    695c:	d8803117 	ldw	r2,196(sp)
    6960:	d9002917 	ldw	r4,164(sp)
    6964:	1100010e 	bge	r2,r4,696c <___vfprintf_internal_r+0xaf4>
    6968:	2005883a 	mov	r2,r4
    696c:	d9402f17 	ldw	r5,188(sp)
    6970:	288b883a 	add	r5,r5,r2
    6974:	d9402f15 	stw	r5,188(sp)
    6978:	1801c01e 	bne	r3,zero,707c <___vfprintf_internal_r+0x1204>
    697c:	a8800007 	ldb	r2,0(r21)
    6980:	d8001f15 	stw	zero,124(sp)
    6984:	da000404 	addi	r8,sp,16
    6988:	103d751e 	bne	r2,zero,5f60 <__alt_data_end+0xfffe5f60>
    698c:	a823883a 	mov	r17,r21
    6990:	003d8b06 	br	5fc0 <__alt_data_end+0xfffe5fc0>
    6994:	8025883a 	mov	r18,r16
    6998:	dc002903 	ldbu	r16,164(sp)
    699c:	e011883a 	mov	r8,fp
    69a0:	84003fcc 	andi	r16,r16,255
    69a4:	8005e51e 	bne	r16,zero,813c <___vfprintf_internal_r+0x22c4>
    69a8:	94800414 	ori	r18,r18,16
    69ac:	9080080c 	andi	r2,r18,32
    69b0:	10022b26 	beq	r2,zero,7260 <___vfprintf_internal_r+0x13e8>
    69b4:	d9002e17 	ldw	r4,184(sp)
    69b8:	d9402a17 	ldw	r5,168(sp)
    69bc:	d8002785 	stb	zero,158(sp)
    69c0:	20c00204 	addi	r3,r4,8
    69c4:	24c00017 	ldw	r19,0(r4)
    69c8:	25800117 	ldw	r22,4(r4)
    69cc:	28042e16 	blt	r5,zero,7a88 <___vfprintf_internal_r+0x1c10>
    69d0:	013fdfc4 	movi	r4,-129
    69d4:	9d84b03a 	or	r2,r19,r22
    69d8:	d8c02e15 	stw	r3,184(sp)
    69dc:	9124703a 	and	r18,r18,r4
    69e0:	0039883a 	mov	fp,zero
    69e4:	103e801e 	bne	r2,zero,63e8 <__alt_data_end+0xfffe63e8>
    69e8:	d9002a17 	ldw	r4,168(sp)
    69ec:	2002e01e 	bne	r4,zero,7570 <___vfprintf_internal_r+0x16f8>
    69f0:	d8002a15 	stw	zero,168(sp)
    69f4:	d8002b15 	stw	zero,172(sp)
    69f8:	dc001e04 	addi	r16,sp,120
    69fc:	003ef506 	br	65d4 <__alt_data_end+0xfffe65d4>
    6a00:	8025883a 	mov	r18,r16
    6a04:	dc002903 	ldbu	r16,164(sp)
    6a08:	e011883a 	mov	r8,fp
    6a0c:	84003fcc 	andi	r16,r16,255
    6a10:	8005ba1e 	bne	r16,zero,80fc <___vfprintf_internal_r+0x2284>
    6a14:	01000074 	movhi	r4,1
    6a18:	2104bf04 	addi	r4,r4,4860
    6a1c:	d9003915 	stw	r4,228(sp)
    6a20:	9080080c 	andi	r2,r18,32
    6a24:	10006126 	beq	r2,zero,6bac <___vfprintf_internal_r+0xd34>
    6a28:	d9402e17 	ldw	r5,184(sp)
    6a2c:	2cc00017 	ldw	r19,0(r5)
    6a30:	2d800117 	ldw	r22,4(r5)
    6a34:	29400204 	addi	r5,r5,8
    6a38:	d9402e15 	stw	r5,184(sp)
    6a3c:	9080004c 	andi	r2,r18,1
    6a40:	1001ac26 	beq	r2,zero,70f4 <___vfprintf_internal_r+0x127c>
    6a44:	9d84b03a 	or	r2,r19,r22
    6a48:	10038526 	beq	r2,zero,7860 <___vfprintf_internal_r+0x19e8>
    6a4c:	d8c02a17 	ldw	r3,168(sp)
    6a50:	00800c04 	movi	r2,48
    6a54:	d8802705 	stb	r2,156(sp)
    6a58:	dc402745 	stb	r17,157(sp)
    6a5c:	d8002785 	stb	zero,158(sp)
    6a60:	90800094 	ori	r2,r18,2
    6a64:	18047916 	blt	r3,zero,7c4c <___vfprintf_internal_r+0x1dd4>
    6a68:	00bfdfc4 	movi	r2,-129
    6a6c:	90a4703a 	and	r18,r18,r2
    6a70:	94800094 	ori	r18,r18,2
    6a74:	0039883a 	mov	fp,zero
    6a78:	d9003917 	ldw	r4,228(sp)
    6a7c:	dc001e04 	addi	r16,sp,120
    6a80:	988003cc 	andi	r2,r19,15
    6a84:	b006973a 	slli	r3,r22,28
    6a88:	2085883a 	add	r2,r4,r2
    6a8c:	9826d13a 	srli	r19,r19,4
    6a90:	10800003 	ldbu	r2,0(r2)
    6a94:	b02cd13a 	srli	r22,r22,4
    6a98:	843fffc4 	addi	r16,r16,-1
    6a9c:	1ce6b03a 	or	r19,r3,r19
    6aa0:	80800005 	stb	r2,0(r16)
    6aa4:	9d84b03a 	or	r2,r19,r22
    6aa8:	103ff51e 	bne	r2,zero,6a80 <__alt_data_end+0xfffe6a80>
    6aac:	d8c02817 	ldw	r3,160(sp)
    6ab0:	1c07c83a 	sub	r3,r3,r16
    6ab4:	d8c02b15 	stw	r3,172(sp)
    6ab8:	003ec606 	br	65d4 <__alt_data_end+0xfffe65d4>
    6abc:	8025883a 	mov	r18,r16
    6ac0:	dc002903 	ldbu	r16,164(sp)
    6ac4:	e011883a 	mov	r8,fp
    6ac8:	84003fcc 	andi	r16,r16,255
    6acc:	803e9626 	beq	r16,zero,6528 <__alt_data_end+0xfffe6528>
    6ad0:	d8c02b03 	ldbu	r3,172(sp)
    6ad4:	d8c02785 	stb	r3,158(sp)
    6ad8:	003e9306 	br	6528 <__alt_data_end+0xfffe6528>
    6adc:	00c00044 	movi	r3,1
    6ae0:	d8c02905 	stb	r3,164(sp)
    6ae4:	00c00ac4 	movi	r3,43
    6ae8:	d8c02b05 	stb	r3,172(sp)
    6aec:	ac400007 	ldb	r17,0(r21)
    6af0:	003d4306 	br	6000 <__alt_data_end+0xfffe6000>
    6af4:	84000814 	ori	r16,r16,32
    6af8:	ac400007 	ldb	r17,0(r21)
    6afc:	003d4006 	br	6000 <__alt_data_end+0xfffe6000>
    6b00:	d8802e17 	ldw	r2,184(sp)
    6b04:	8025883a 	mov	r18,r16
    6b08:	d8002785 	stb	zero,158(sp)
    6b0c:	14000017 	ldw	r16,0(r2)
    6b10:	e011883a 	mov	r8,fp
    6b14:	14c00104 	addi	r19,r2,4
    6b18:	80042d26 	beq	r16,zero,7bd0 <___vfprintf_internal_r+0x1d58>
    6b1c:	d8c02a17 	ldw	r3,168(sp)
    6b20:	1803e416 	blt	r3,zero,7ab4 <___vfprintf_internal_r+0x1c3c>
    6b24:	180d883a 	mov	r6,r3
    6b28:	000b883a 	mov	r5,zero
    6b2c:	8009883a 	mov	r4,r16
    6b30:	df003d15 	stw	fp,244(sp)
    6b34:	000a5680 	call	a568 <memchr>
    6b38:	da003d17 	ldw	r8,244(sp)
    6b3c:	10046826 	beq	r2,zero,7ce0 <___vfprintf_internal_r+0x1e68>
    6b40:	1405c83a 	sub	r2,r2,r16
    6b44:	d8802b15 	stw	r2,172(sp)
    6b48:	1003e016 	blt	r2,zero,7acc <___vfprintf_internal_r+0x1c54>
    6b4c:	df002783 	ldbu	fp,158(sp)
    6b50:	d8802915 	stw	r2,164(sp)
    6b54:	dcc02e15 	stw	r19,184(sp)
    6b58:	d8002a15 	stw	zero,168(sp)
    6b5c:	d8003215 	stw	zero,200(sp)
    6b60:	003ea206 	br	65ec <__alt_data_end+0xfffe65ec>
    6b64:	8025883a 	mov	r18,r16
    6b68:	dc002903 	ldbu	r16,164(sp)
    6b6c:	e011883a 	mov	r8,fp
    6b70:	84003fcc 	andi	r16,r16,255
    6b74:	803f8d26 	beq	r16,zero,69ac <__alt_data_end+0xfffe69ac>
    6b78:	d8c02b03 	ldbu	r3,172(sp)
    6b7c:	d8c02785 	stb	r3,158(sp)
    6b80:	003f8a06 	br	69ac <__alt_data_end+0xfffe69ac>
    6b84:	8025883a 	mov	r18,r16
    6b88:	dc002903 	ldbu	r16,164(sp)
    6b8c:	e011883a 	mov	r8,fp
    6b90:	84003fcc 	andi	r16,r16,255
    6b94:	8005661e 	bne	r16,zero,8130 <___vfprintf_internal_r+0x22b8>
    6b98:	01000074 	movhi	r4,1
    6b9c:	2104c404 	addi	r4,r4,4880
    6ba0:	d9003915 	stw	r4,228(sp)
    6ba4:	9080080c 	andi	r2,r18,32
    6ba8:	103f9f1e 	bne	r2,zero,6a28 <__alt_data_end+0xfffe6a28>
    6bac:	9080040c 	andi	r2,r18,16
    6bb0:	1002eb26 	beq	r2,zero,7760 <___vfprintf_internal_r+0x18e8>
    6bb4:	d8802e17 	ldw	r2,184(sp)
    6bb8:	002d883a 	mov	r22,zero
    6bbc:	14c00017 	ldw	r19,0(r2)
    6bc0:	10800104 	addi	r2,r2,4
    6bc4:	d8802e15 	stw	r2,184(sp)
    6bc8:	003f9c06 	br	6a3c <__alt_data_end+0xfffe6a3c>
    6bcc:	d8802b07 	ldb	r2,172(sp)
    6bd0:	1002e11e 	bne	r2,zero,7758 <___vfprintf_internal_r+0x18e0>
    6bd4:	00c00044 	movi	r3,1
    6bd8:	d8c02905 	stb	r3,164(sp)
    6bdc:	00c00804 	movi	r3,32
    6be0:	d8c02b05 	stb	r3,172(sp)
    6be4:	ac400007 	ldb	r17,0(r21)
    6be8:	003d0506 	br	6000 <__alt_data_end+0xfffe6000>
    6bec:	84000054 	ori	r16,r16,1
    6bf0:	ac400007 	ldb	r17,0(r21)
    6bf4:	003d0206 	br	6000 <__alt_data_end+0xfffe6000>
    6bf8:	8025883a 	mov	r18,r16
    6bfc:	dc002903 	ldbu	r16,164(sp)
    6c00:	e011883a 	mov	r8,fp
    6c04:	84003fcc 	andi	r16,r16,255
    6c08:	803de726 	beq	r16,zero,63a8 <__alt_data_end+0xfffe63a8>
    6c0c:	d8c02b03 	ldbu	r3,172(sp)
    6c10:	d8c02785 	stb	r3,158(sp)
    6c14:	003de406 	br	63a8 <__alt_data_end+0xfffe63a8>
    6c18:	84001014 	ori	r16,r16,64
    6c1c:	ac400007 	ldb	r17,0(r21)
    6c20:	003cf706 	br	6000 <__alt_data_end+0xfffe6000>
    6c24:	ac400007 	ldb	r17,0(r21)
    6c28:	00801b04 	movi	r2,108
    6c2c:	88838f26 	beq	r17,r2,7a6c <___vfprintf_internal_r+0x1bf4>
    6c30:	84000414 	ori	r16,r16,16
    6c34:	003cf206 	br	6000 <__alt_data_end+0xfffe6000>
    6c38:	8025883a 	mov	r18,r16
    6c3c:	dc002903 	ldbu	r16,164(sp)
    6c40:	e011883a 	mov	r8,fp
    6c44:	84003fcc 	andi	r16,r16,255
    6c48:	80053f1e 	bne	r16,zero,8148 <___vfprintf_internal_r+0x22d0>
    6c4c:	9080080c 	andi	r2,r18,32
    6c50:	1002d226 	beq	r2,zero,779c <___vfprintf_internal_r+0x1924>
    6c54:	d9002e17 	ldw	r4,184(sp)
    6c58:	d9402f17 	ldw	r5,188(sp)
    6c5c:	20800017 	ldw	r2,0(r4)
    6c60:	2807d7fa 	srai	r3,r5,31
    6c64:	21000104 	addi	r4,r4,4
    6c68:	d9002e15 	stw	r4,184(sp)
    6c6c:	11400015 	stw	r5,0(r2)
    6c70:	10c00115 	stw	r3,4(r2)
    6c74:	003cb806 	br	5f58 <__alt_data_end+0xfffe5f58>
    6c78:	d8c02e17 	ldw	r3,184(sp)
    6c7c:	d9002e17 	ldw	r4,184(sp)
    6c80:	8025883a 	mov	r18,r16
    6c84:	18800017 	ldw	r2,0(r3)
    6c88:	21000104 	addi	r4,r4,4
    6c8c:	00c00044 	movi	r3,1
    6c90:	e011883a 	mov	r8,fp
    6c94:	d8c02915 	stw	r3,164(sp)
    6c98:	d8002785 	stb	zero,158(sp)
    6c9c:	d8801405 	stb	r2,80(sp)
    6ca0:	d9002e15 	stw	r4,184(sp)
    6ca4:	d8c02b15 	stw	r3,172(sp)
    6ca8:	d8002a15 	stw	zero,168(sp)
    6cac:	d8003215 	stw	zero,200(sp)
    6cb0:	dc001404 	addi	r16,sp,80
    6cb4:	0039883a 	mov	fp,zero
    6cb8:	003e5306 	br	6608 <__alt_data_end+0xfffe6608>
    6cbc:	01000074 	movhi	r4,1
    6cc0:	2104c404 	addi	r4,r4,4880
    6cc4:	0039883a 	mov	fp,zero
    6cc8:	d9003915 	stw	r4,228(sp)
    6ccc:	04401e04 	movi	r17,120
    6cd0:	003f6906 	br	6a78 <__alt_data_end+0xfffe6a78>
    6cd4:	8025883a 	mov	r18,r16
    6cd8:	dc002903 	ldbu	r16,164(sp)
    6cdc:	e011883a 	mov	r8,fp
    6ce0:	84003fcc 	andi	r16,r16,255
    6ce4:	8005081e 	bne	r16,zero,8108 <___vfprintf_internal_r+0x2290>
    6ce8:	883d6126 	beq	r17,zero,6270 <__alt_data_end+0xfffe6270>
    6cec:	00c00044 	movi	r3,1
    6cf0:	d8c02915 	stw	r3,164(sp)
    6cf4:	dc401405 	stb	r17,80(sp)
    6cf8:	d8002785 	stb	zero,158(sp)
    6cfc:	003fe906 	br	6ca4 <__alt_data_end+0xfffe6ca4>
    6d00:	01400074 	movhi	r5,1
    6d04:	2944c404 	addi	r5,r5,4880
    6d08:	d9403915 	stw	r5,228(sp)
    6d0c:	d8c02e15 	stw	r3,184(sp)
    6d10:	1025883a 	mov	r18,r2
    6d14:	04401e04 	movi	r17,120
    6d18:	9d84b03a 	or	r2,r19,r22
    6d1c:	1000fc1e 	bne	r2,zero,7110 <___vfprintf_internal_r+0x1298>
    6d20:	0039883a 	mov	fp,zero
    6d24:	00800084 	movi	r2,2
    6d28:	10803fcc 	andi	r2,r2,255
    6d2c:	00c00044 	movi	r3,1
    6d30:	10c20f26 	beq	r2,r3,7570 <___vfprintf_internal_r+0x16f8>
    6d34:	00c00084 	movi	r3,2
    6d38:	10fd3326 	beq	r2,r3,6208 <__alt_data_end+0xfffe6208>
    6d3c:	003e0b06 	br	656c <__alt_data_end+0xfffe656c>
    6d40:	d8c02017 	ldw	r3,128(sp)
    6d44:	003e7106 	br	670c <__alt_data_end+0xfffe670c>
    6d48:	00801944 	movi	r2,101
    6d4c:	14407e0e 	bge	r2,r17,6f48 <___vfprintf_internal_r+0x10d0>
    6d50:	d9003617 	ldw	r4,216(sp)
    6d54:	d9403817 	ldw	r5,224(sp)
    6d58:	000d883a 	mov	r6,zero
    6d5c:	000f883a 	mov	r7,zero
    6d60:	d8c03c15 	stw	r3,240(sp)
    6d64:	da003d15 	stw	r8,244(sp)
    6d68:	000e8500 	call	e850 <__eqdf2>
    6d6c:	d8c03c17 	ldw	r3,240(sp)
    6d70:	da003d17 	ldw	r8,244(sp)
    6d74:	1000f71e 	bne	r2,zero,7154 <___vfprintf_internal_r+0x12dc>
    6d78:	d8801f17 	ldw	r2,124(sp)
    6d7c:	01000074 	movhi	r4,1
    6d80:	2104cb04 	addi	r4,r4,4908
    6d84:	18c00044 	addi	r3,r3,1
    6d88:	10800044 	addi	r2,r2,1
    6d8c:	41000015 	stw	r4,0(r8)
    6d90:	01000044 	movi	r4,1
    6d94:	41000115 	stw	r4,4(r8)
    6d98:	d8c02015 	stw	r3,128(sp)
    6d9c:	d8801f15 	stw	r2,124(sp)
    6da0:	010001c4 	movi	r4,7
    6da4:	2082b816 	blt	r4,r2,7888 <___vfprintf_internal_r+0x1a10>
    6da8:	42000204 	addi	r8,r8,8
    6dac:	d8802617 	ldw	r2,152(sp)
    6db0:	d9403317 	ldw	r5,204(sp)
    6db4:	11400216 	blt	r2,r5,6dc0 <___vfprintf_internal_r+0xf48>
    6db8:	9080004c 	andi	r2,r18,1
    6dbc:	103eb326 	beq	r2,zero,688c <__alt_data_end+0xfffe688c>
    6dc0:	d8803717 	ldw	r2,220(sp)
    6dc4:	d9003417 	ldw	r4,208(sp)
    6dc8:	d9403717 	ldw	r5,220(sp)
    6dcc:	1887883a 	add	r3,r3,r2
    6dd0:	d8801f17 	ldw	r2,124(sp)
    6dd4:	41000015 	stw	r4,0(r8)
    6dd8:	41400115 	stw	r5,4(r8)
    6ddc:	10800044 	addi	r2,r2,1
    6de0:	d8c02015 	stw	r3,128(sp)
    6de4:	d8801f15 	stw	r2,124(sp)
    6de8:	010001c4 	movi	r4,7
    6dec:	20832916 	blt	r4,r2,7a94 <___vfprintf_internal_r+0x1c1c>
    6df0:	42000204 	addi	r8,r8,8
    6df4:	d8803317 	ldw	r2,204(sp)
    6df8:	143fffc4 	addi	r16,r2,-1
    6dfc:	043ea30e 	bge	zero,r16,688c <__alt_data_end+0xfffe688c>
    6e00:	04400404 	movi	r17,16
    6e04:	d8801f17 	ldw	r2,124(sp)
    6e08:	8c00880e 	bge	r17,r16,702c <___vfprintf_internal_r+0x11b4>
    6e0c:	01400074 	movhi	r5,1
    6e10:	2944cb84 	addi	r5,r5,4910
    6e14:	d9402c15 	stw	r5,176(sp)
    6e18:	058001c4 	movi	r22,7
    6e1c:	dcc02d17 	ldw	r19,180(sp)
    6e20:	00000306 	br	6e30 <___vfprintf_internal_r+0xfb8>
    6e24:	42000204 	addi	r8,r8,8
    6e28:	843ffc04 	addi	r16,r16,-16
    6e2c:	8c00820e 	bge	r17,r16,7038 <___vfprintf_internal_r+0x11c0>
    6e30:	18c00404 	addi	r3,r3,16
    6e34:	10800044 	addi	r2,r2,1
    6e38:	45000015 	stw	r20,0(r8)
    6e3c:	44400115 	stw	r17,4(r8)
    6e40:	d8c02015 	stw	r3,128(sp)
    6e44:	d8801f15 	stw	r2,124(sp)
    6e48:	b0bff60e 	bge	r22,r2,6e24 <__alt_data_end+0xfffe6e24>
    6e4c:	d9801e04 	addi	r6,sp,120
    6e50:	b80b883a 	mov	r5,r23
    6e54:	9809883a 	mov	r4,r19
    6e58:	000c0700 	call	c070 <__sprint_r>
    6e5c:	103d0a1e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    6e60:	d8c02017 	ldw	r3,128(sp)
    6e64:	d8801f17 	ldw	r2,124(sp)
    6e68:	da000404 	addi	r8,sp,16
    6e6c:	003fee06 	br	6e28 <__alt_data_end+0xfffe6e28>
    6e70:	d9403117 	ldw	r5,196(sp)
    6e74:	d8802917 	ldw	r2,164(sp)
    6e78:	28adc83a 	sub	r22,r5,r2
    6e7c:	05be410e 	bge	zero,r22,6784 <__alt_data_end+0xfffe6784>
    6e80:	07000404 	movi	fp,16
    6e84:	d8801f17 	ldw	r2,124(sp)
    6e88:	e5838f0e 	bge	fp,r22,7cc8 <___vfprintf_internal_r+0x1e50>
    6e8c:	01400074 	movhi	r5,1
    6e90:	2944cb84 	addi	r5,r5,4910
    6e94:	dc403015 	stw	r17,192(sp)
    6e98:	d9402c15 	stw	r5,176(sp)
    6e9c:	b023883a 	mov	r17,r22
    6ea0:	04c001c4 	movi	r19,7
    6ea4:	a82d883a 	mov	r22,r21
    6ea8:	902b883a 	mov	r21,r18
    6eac:	8025883a 	mov	r18,r16
    6eb0:	dc002d17 	ldw	r16,180(sp)
    6eb4:	00000306 	br	6ec4 <___vfprintf_internal_r+0x104c>
    6eb8:	8c7ffc04 	addi	r17,r17,-16
    6ebc:	42000204 	addi	r8,r8,8
    6ec0:	e440110e 	bge	fp,r17,6f08 <___vfprintf_internal_r+0x1090>
    6ec4:	18c00404 	addi	r3,r3,16
    6ec8:	10800044 	addi	r2,r2,1
    6ecc:	45000015 	stw	r20,0(r8)
    6ed0:	47000115 	stw	fp,4(r8)
    6ed4:	d8c02015 	stw	r3,128(sp)
    6ed8:	d8801f15 	stw	r2,124(sp)
    6edc:	98bff60e 	bge	r19,r2,6eb8 <__alt_data_end+0xfffe6eb8>
    6ee0:	d9801e04 	addi	r6,sp,120
    6ee4:	b80b883a 	mov	r5,r23
    6ee8:	8009883a 	mov	r4,r16
    6eec:	000c0700 	call	c070 <__sprint_r>
    6ef0:	103ce51e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    6ef4:	8c7ffc04 	addi	r17,r17,-16
    6ef8:	d8c02017 	ldw	r3,128(sp)
    6efc:	d8801f17 	ldw	r2,124(sp)
    6f00:	da000404 	addi	r8,sp,16
    6f04:	e47fef16 	blt	fp,r17,6ec4 <__alt_data_end+0xfffe6ec4>
    6f08:	9021883a 	mov	r16,r18
    6f0c:	a825883a 	mov	r18,r21
    6f10:	b02b883a 	mov	r21,r22
    6f14:	882d883a 	mov	r22,r17
    6f18:	dc403017 	ldw	r17,192(sp)
    6f1c:	d9002c17 	ldw	r4,176(sp)
    6f20:	1d87883a 	add	r3,r3,r22
    6f24:	10800044 	addi	r2,r2,1
    6f28:	41000015 	stw	r4,0(r8)
    6f2c:	45800115 	stw	r22,4(r8)
    6f30:	d8c02015 	stw	r3,128(sp)
    6f34:	d8801f15 	stw	r2,124(sp)
    6f38:	010001c4 	movi	r4,7
    6f3c:	20818e16 	blt	r4,r2,7578 <___vfprintf_internal_r+0x1700>
    6f40:	42000204 	addi	r8,r8,8
    6f44:	003e0f06 	br	6784 <__alt_data_end+0xfffe6784>
    6f48:	d9403317 	ldw	r5,204(sp)
    6f4c:	00800044 	movi	r2,1
    6f50:	18c00044 	addi	r3,r3,1
    6f54:	1141530e 	bge	r2,r5,74a4 <___vfprintf_internal_r+0x162c>
    6f58:	dc401f17 	ldw	r17,124(sp)
    6f5c:	00800044 	movi	r2,1
    6f60:	40800115 	stw	r2,4(r8)
    6f64:	8c400044 	addi	r17,r17,1
    6f68:	44000015 	stw	r16,0(r8)
    6f6c:	d8c02015 	stw	r3,128(sp)
    6f70:	dc401f15 	stw	r17,124(sp)
    6f74:	008001c4 	movi	r2,7
    6f78:	14416b16 	blt	r2,r17,7528 <___vfprintf_internal_r+0x16b0>
    6f7c:	42000204 	addi	r8,r8,8
    6f80:	d8803717 	ldw	r2,220(sp)
    6f84:	d9003417 	ldw	r4,208(sp)
    6f88:	8c400044 	addi	r17,r17,1
    6f8c:	10c7883a 	add	r3,r2,r3
    6f90:	40800115 	stw	r2,4(r8)
    6f94:	41000015 	stw	r4,0(r8)
    6f98:	d8c02015 	stw	r3,128(sp)
    6f9c:	dc401f15 	stw	r17,124(sp)
    6fa0:	008001c4 	movi	r2,7
    6fa4:	14416916 	blt	r2,r17,754c <___vfprintf_internal_r+0x16d4>
    6fa8:	45800204 	addi	r22,r8,8
    6fac:	d9003617 	ldw	r4,216(sp)
    6fb0:	d9403817 	ldw	r5,224(sp)
    6fb4:	000d883a 	mov	r6,zero
    6fb8:	000f883a 	mov	r7,zero
    6fbc:	d8c03c15 	stw	r3,240(sp)
    6fc0:	000e8500 	call	e850 <__eqdf2>
    6fc4:	d8c03c17 	ldw	r3,240(sp)
    6fc8:	1000bc26 	beq	r2,zero,72bc <___vfprintf_internal_r+0x1444>
    6fcc:	d9403317 	ldw	r5,204(sp)
    6fd0:	84000044 	addi	r16,r16,1
    6fd4:	8c400044 	addi	r17,r17,1
    6fd8:	28bfffc4 	addi	r2,r5,-1
    6fdc:	1887883a 	add	r3,r3,r2
    6fe0:	b0800115 	stw	r2,4(r22)
    6fe4:	b4000015 	stw	r16,0(r22)
    6fe8:	d8c02015 	stw	r3,128(sp)
    6fec:	dc401f15 	stw	r17,124(sp)
    6ff0:	008001c4 	movi	r2,7
    6ff4:	14414316 	blt	r2,r17,7504 <___vfprintf_internal_r+0x168c>
    6ff8:	b5800204 	addi	r22,r22,8
    6ffc:	d9003a17 	ldw	r4,232(sp)
    7000:	df0022c4 	addi	fp,sp,139
    7004:	8c400044 	addi	r17,r17,1
    7008:	20c7883a 	add	r3,r4,r3
    700c:	b7000015 	stw	fp,0(r22)
    7010:	b1000115 	stw	r4,4(r22)
    7014:	d8c02015 	stw	r3,128(sp)
    7018:	dc401f15 	stw	r17,124(sp)
    701c:	008001c4 	movi	r2,7
    7020:	14400e16 	blt	r2,r17,705c <___vfprintf_internal_r+0x11e4>
    7024:	b2000204 	addi	r8,r22,8
    7028:	003e1806 	br	688c <__alt_data_end+0xfffe688c>
    702c:	01000074 	movhi	r4,1
    7030:	2104cb84 	addi	r4,r4,4910
    7034:	d9002c15 	stw	r4,176(sp)
    7038:	d9002c17 	ldw	r4,176(sp)
    703c:	1c07883a 	add	r3,r3,r16
    7040:	44000115 	stw	r16,4(r8)
    7044:	41000015 	stw	r4,0(r8)
    7048:	10800044 	addi	r2,r2,1
    704c:	d8c02015 	stw	r3,128(sp)
    7050:	d8801f15 	stw	r2,124(sp)
    7054:	010001c4 	movi	r4,7
    7058:	20be0b0e 	bge	r4,r2,6888 <__alt_data_end+0xfffe6888>
    705c:	d9002d17 	ldw	r4,180(sp)
    7060:	d9801e04 	addi	r6,sp,120
    7064:	b80b883a 	mov	r5,r23
    7068:	000c0700 	call	c070 <__sprint_r>
    706c:	103c861e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    7070:	d8c02017 	ldw	r3,128(sp)
    7074:	da000404 	addi	r8,sp,16
    7078:	003e0406 	br	688c <__alt_data_end+0xfffe688c>
    707c:	d9002d17 	ldw	r4,180(sp)
    7080:	d9801e04 	addi	r6,sp,120
    7084:	b80b883a 	mov	r5,r23
    7088:	000c0700 	call	c070 <__sprint_r>
    708c:	103e3b26 	beq	r2,zero,697c <__alt_data_end+0xfffe697c>
    7090:	003c7d06 	br	6288 <__alt_data_end+0xfffe6288>
    7094:	d9002d17 	ldw	r4,180(sp)
    7098:	d9801e04 	addi	r6,sp,120
    709c:	b80b883a 	mov	r5,r23
    70a0:	000c0700 	call	c070 <__sprint_r>
    70a4:	103c781e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    70a8:	d8c02017 	ldw	r3,128(sp)
    70ac:	da000404 	addi	r8,sp,16
    70b0:	003de906 	br	6858 <__alt_data_end+0xfffe6858>
    70b4:	d9002d17 	ldw	r4,180(sp)
    70b8:	d9801e04 	addi	r6,sp,120
    70bc:	b80b883a 	mov	r5,r23
    70c0:	000c0700 	call	c070 <__sprint_r>
    70c4:	103c701e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    70c8:	d8c02017 	ldw	r3,128(sp)
    70cc:	da000404 	addi	r8,sp,16
    70d0:	003d9b06 	br	6740 <__alt_data_end+0xfffe6740>
    70d4:	d9002d17 	ldw	r4,180(sp)
    70d8:	d9801e04 	addi	r6,sp,120
    70dc:	b80b883a 	mov	r5,r23
    70e0:	000c0700 	call	c070 <__sprint_r>
    70e4:	103c681e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    70e8:	d8c02017 	ldw	r3,128(sp)
    70ec:	da000404 	addi	r8,sp,16
    70f0:	003da106 	br	6778 <__alt_data_end+0xfffe6778>
    70f4:	d9402a17 	ldw	r5,168(sp)
    70f8:	d8002785 	stb	zero,158(sp)
    70fc:	283f0616 	blt	r5,zero,6d18 <__alt_data_end+0xfffe6d18>
    7100:	00ffdfc4 	movi	r3,-129
    7104:	9d84b03a 	or	r2,r19,r22
    7108:	90e4703a 	and	r18,r18,r3
    710c:	103c3b26 	beq	r2,zero,61fc <__alt_data_end+0xfffe61fc>
    7110:	0039883a 	mov	fp,zero
    7114:	003e5806 	br	6a78 <__alt_data_end+0xfffe6a78>
    7118:	9080040c 	andi	r2,r18,16
    711c:	1001b326 	beq	r2,zero,77ec <___vfprintf_internal_r+0x1974>
    7120:	d8c02e17 	ldw	r3,184(sp)
    7124:	d9002a17 	ldw	r4,168(sp)
    7128:	d8002785 	stb	zero,158(sp)
    712c:	18800104 	addi	r2,r3,4
    7130:	1cc00017 	ldw	r19,0(r3)
    7134:	002d883a 	mov	r22,zero
    7138:	2001b516 	blt	r4,zero,7810 <___vfprintf_internal_r+0x1998>
    713c:	00ffdfc4 	movi	r3,-129
    7140:	d8802e15 	stw	r2,184(sp)
    7144:	90e4703a 	and	r18,r18,r3
    7148:	983d0526 	beq	r19,zero,6560 <__alt_data_end+0xfffe6560>
    714c:	0039883a 	mov	fp,zero
    7150:	003d0806 	br	6574 <__alt_data_end+0xfffe6574>
    7154:	dc402617 	ldw	r17,152(sp)
    7158:	0441d30e 	bge	zero,r17,78a8 <___vfprintf_internal_r+0x1a30>
    715c:	dc403217 	ldw	r17,200(sp)
    7160:	d8803317 	ldw	r2,204(sp)
    7164:	1440010e 	bge	r2,r17,716c <___vfprintf_internal_r+0x12f4>
    7168:	1023883a 	mov	r17,r2
    716c:	04400a0e 	bge	zero,r17,7198 <___vfprintf_internal_r+0x1320>
    7170:	d8801f17 	ldw	r2,124(sp)
    7174:	1c47883a 	add	r3,r3,r17
    7178:	44000015 	stw	r16,0(r8)
    717c:	10800044 	addi	r2,r2,1
    7180:	44400115 	stw	r17,4(r8)
    7184:	d8c02015 	stw	r3,128(sp)
    7188:	d8801f15 	stw	r2,124(sp)
    718c:	010001c4 	movi	r4,7
    7190:	20826516 	blt	r4,r2,7b28 <___vfprintf_internal_r+0x1cb0>
    7194:	42000204 	addi	r8,r8,8
    7198:	88026116 	blt	r17,zero,7b20 <___vfprintf_internal_r+0x1ca8>
    719c:	d9003217 	ldw	r4,200(sp)
    71a0:	2463c83a 	sub	r17,r4,r17
    71a4:	04407b0e 	bge	zero,r17,7394 <___vfprintf_internal_r+0x151c>
    71a8:	05800404 	movi	r22,16
    71ac:	d8801f17 	ldw	r2,124(sp)
    71b0:	b4419d0e 	bge	r22,r17,7828 <___vfprintf_internal_r+0x19b0>
    71b4:	01000074 	movhi	r4,1
    71b8:	2104cb84 	addi	r4,r4,4910
    71bc:	d9002c15 	stw	r4,176(sp)
    71c0:	070001c4 	movi	fp,7
    71c4:	dcc02d17 	ldw	r19,180(sp)
    71c8:	00000306 	br	71d8 <___vfprintf_internal_r+0x1360>
    71cc:	42000204 	addi	r8,r8,8
    71d0:	8c7ffc04 	addi	r17,r17,-16
    71d4:	b441970e 	bge	r22,r17,7834 <___vfprintf_internal_r+0x19bc>
    71d8:	18c00404 	addi	r3,r3,16
    71dc:	10800044 	addi	r2,r2,1
    71e0:	45000015 	stw	r20,0(r8)
    71e4:	45800115 	stw	r22,4(r8)
    71e8:	d8c02015 	stw	r3,128(sp)
    71ec:	d8801f15 	stw	r2,124(sp)
    71f0:	e0bff60e 	bge	fp,r2,71cc <__alt_data_end+0xfffe71cc>
    71f4:	d9801e04 	addi	r6,sp,120
    71f8:	b80b883a 	mov	r5,r23
    71fc:	9809883a 	mov	r4,r19
    7200:	000c0700 	call	c070 <__sprint_r>
    7204:	103c201e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    7208:	d8c02017 	ldw	r3,128(sp)
    720c:	d8801f17 	ldw	r2,124(sp)
    7210:	da000404 	addi	r8,sp,16
    7214:	003fee06 	br	71d0 <__alt_data_end+0xfffe71d0>
    7218:	d9002d17 	ldw	r4,180(sp)
    721c:	d9801e04 	addi	r6,sp,120
    7220:	b80b883a 	mov	r5,r23
    7224:	000c0700 	call	c070 <__sprint_r>
    7228:	103c171e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    722c:	d8c02017 	ldw	r3,128(sp)
    7230:	df002787 	ldb	fp,158(sp)
    7234:	da000404 	addi	r8,sp,16
    7238:	003d3406 	br	670c <__alt_data_end+0xfffe670c>
    723c:	9080040c 	andi	r2,r18,16
    7240:	10016126 	beq	r2,zero,77c8 <___vfprintf_internal_r+0x1950>
    7244:	d9402e17 	ldw	r5,184(sp)
    7248:	2cc00017 	ldw	r19,0(r5)
    724c:	29400104 	addi	r5,r5,4
    7250:	d9402e15 	stw	r5,184(sp)
    7254:	982dd7fa 	srai	r22,r19,31
    7258:	b005883a 	mov	r2,r22
    725c:	003c5a06 	br	63c8 <__alt_data_end+0xfffe63c8>
    7260:	9080040c 	andi	r2,r18,16
    7264:	10003526 	beq	r2,zero,733c <___vfprintf_internal_r+0x14c4>
    7268:	d8c02e17 	ldw	r3,184(sp)
    726c:	d9002a17 	ldw	r4,168(sp)
    7270:	d8002785 	stb	zero,158(sp)
    7274:	18800104 	addi	r2,r3,4
    7278:	1cc00017 	ldw	r19,0(r3)
    727c:	002d883a 	mov	r22,zero
    7280:	20003716 	blt	r4,zero,7360 <___vfprintf_internal_r+0x14e8>
    7284:	00ffdfc4 	movi	r3,-129
    7288:	d8802e15 	stw	r2,184(sp)
    728c:	90e4703a 	and	r18,r18,r3
    7290:	0039883a 	mov	fp,zero
    7294:	983dd426 	beq	r19,zero,69e8 <__alt_data_end+0xfffe69e8>
    7298:	00800244 	movi	r2,9
    729c:	14fc5336 	bltu	r2,r19,63ec <__alt_data_end+0xfffe63ec>
    72a0:	d8c02817 	ldw	r3,160(sp)
    72a4:	dc001dc4 	addi	r16,sp,119
    72a8:	9cc00c04 	addi	r19,r19,48
    72ac:	1c07c83a 	sub	r3,r3,r16
    72b0:	dcc01dc5 	stb	r19,119(sp)
    72b4:	d8c02b15 	stw	r3,172(sp)
    72b8:	003cc606 	br	65d4 <__alt_data_end+0xfffe65d4>
    72bc:	d8803317 	ldw	r2,204(sp)
    72c0:	143fffc4 	addi	r16,r2,-1
    72c4:	043f4d0e 	bge	zero,r16,6ffc <__alt_data_end+0xfffe6ffc>
    72c8:	07000404 	movi	fp,16
    72cc:	e400810e 	bge	fp,r16,74d4 <___vfprintf_internal_r+0x165c>
    72d0:	01400074 	movhi	r5,1
    72d4:	2944cb84 	addi	r5,r5,4910
    72d8:	d9402c15 	stw	r5,176(sp)
    72dc:	01c001c4 	movi	r7,7
    72e0:	dcc02d17 	ldw	r19,180(sp)
    72e4:	00000306 	br	72f4 <___vfprintf_internal_r+0x147c>
    72e8:	b5800204 	addi	r22,r22,8
    72ec:	843ffc04 	addi	r16,r16,-16
    72f0:	e4007b0e 	bge	fp,r16,74e0 <___vfprintf_internal_r+0x1668>
    72f4:	18c00404 	addi	r3,r3,16
    72f8:	8c400044 	addi	r17,r17,1
    72fc:	b5000015 	stw	r20,0(r22)
    7300:	b7000115 	stw	fp,4(r22)
    7304:	d8c02015 	stw	r3,128(sp)
    7308:	dc401f15 	stw	r17,124(sp)
    730c:	3c7ff60e 	bge	r7,r17,72e8 <__alt_data_end+0xfffe72e8>
    7310:	d9801e04 	addi	r6,sp,120
    7314:	b80b883a 	mov	r5,r23
    7318:	9809883a 	mov	r4,r19
    731c:	d9c03c15 	stw	r7,240(sp)
    7320:	000c0700 	call	c070 <__sprint_r>
    7324:	d9c03c17 	ldw	r7,240(sp)
    7328:	103bd71e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    732c:	d8c02017 	ldw	r3,128(sp)
    7330:	dc401f17 	ldw	r17,124(sp)
    7334:	dd800404 	addi	r22,sp,16
    7338:	003fec06 	br	72ec <__alt_data_end+0xfffe72ec>
    733c:	9080100c 	andi	r2,r18,64
    7340:	d8002785 	stb	zero,158(sp)
    7344:	10010e26 	beq	r2,zero,7780 <___vfprintf_internal_r+0x1908>
    7348:	d9402e17 	ldw	r5,184(sp)
    734c:	d8c02a17 	ldw	r3,168(sp)
    7350:	002d883a 	mov	r22,zero
    7354:	28800104 	addi	r2,r5,4
    7358:	2cc0000b 	ldhu	r19,0(r5)
    735c:	183fc90e 	bge	r3,zero,7284 <__alt_data_end+0xfffe7284>
    7360:	d8802e15 	stw	r2,184(sp)
    7364:	0039883a 	mov	fp,zero
    7368:	9d84b03a 	or	r2,r19,r22
    736c:	103c1e1e 	bne	r2,zero,63e8 <__alt_data_end+0xfffe63e8>
    7370:	00800044 	movi	r2,1
    7374:	003e6c06 	br	6d28 <__alt_data_end+0xfffe6d28>
    7378:	d9002d17 	ldw	r4,180(sp)
    737c:	d9801e04 	addi	r6,sp,120
    7380:	b80b883a 	mov	r5,r23
    7384:	000c0700 	call	c070 <__sprint_r>
    7388:	103bbf1e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    738c:	d8c02017 	ldw	r3,128(sp)
    7390:	da000404 	addi	r8,sp,16
    7394:	d9003217 	ldw	r4,200(sp)
    7398:	d8802617 	ldw	r2,152(sp)
    739c:	d9403317 	ldw	r5,204(sp)
    73a0:	8123883a 	add	r17,r16,r4
    73a4:	11400216 	blt	r2,r5,73b0 <___vfprintf_internal_r+0x1538>
    73a8:	9100004c 	andi	r4,r18,1
    73ac:	20000d26 	beq	r4,zero,73e4 <___vfprintf_internal_r+0x156c>
    73b0:	d9003717 	ldw	r4,220(sp)
    73b4:	d9403417 	ldw	r5,208(sp)
    73b8:	1907883a 	add	r3,r3,r4
    73bc:	d9001f17 	ldw	r4,124(sp)
    73c0:	41400015 	stw	r5,0(r8)
    73c4:	d9403717 	ldw	r5,220(sp)
    73c8:	21000044 	addi	r4,r4,1
    73cc:	d8c02015 	stw	r3,128(sp)
    73d0:	41400115 	stw	r5,4(r8)
    73d4:	d9001f15 	stw	r4,124(sp)
    73d8:	014001c4 	movi	r5,7
    73dc:	2901e816 	blt	r5,r4,7b80 <___vfprintf_internal_r+0x1d08>
    73e0:	42000204 	addi	r8,r8,8
    73e4:	d9003317 	ldw	r4,204(sp)
    73e8:	8121883a 	add	r16,r16,r4
    73ec:	2085c83a 	sub	r2,r4,r2
    73f0:	8461c83a 	sub	r16,r16,r17
    73f4:	1400010e 	bge	r2,r16,73fc <___vfprintf_internal_r+0x1584>
    73f8:	1021883a 	mov	r16,r2
    73fc:	04000a0e 	bge	zero,r16,7428 <___vfprintf_internal_r+0x15b0>
    7400:	d9001f17 	ldw	r4,124(sp)
    7404:	1c07883a 	add	r3,r3,r16
    7408:	44400015 	stw	r17,0(r8)
    740c:	21000044 	addi	r4,r4,1
    7410:	44000115 	stw	r16,4(r8)
    7414:	d8c02015 	stw	r3,128(sp)
    7418:	d9001f15 	stw	r4,124(sp)
    741c:	014001c4 	movi	r5,7
    7420:	2901fb16 	blt	r5,r4,7c10 <___vfprintf_internal_r+0x1d98>
    7424:	42000204 	addi	r8,r8,8
    7428:	8001f716 	blt	r16,zero,7c08 <___vfprintf_internal_r+0x1d90>
    742c:	1421c83a 	sub	r16,r2,r16
    7430:	043d160e 	bge	zero,r16,688c <__alt_data_end+0xfffe688c>
    7434:	04400404 	movi	r17,16
    7438:	d8801f17 	ldw	r2,124(sp)
    743c:	8c3efb0e 	bge	r17,r16,702c <__alt_data_end+0xfffe702c>
    7440:	01400074 	movhi	r5,1
    7444:	2944cb84 	addi	r5,r5,4910
    7448:	d9402c15 	stw	r5,176(sp)
    744c:	058001c4 	movi	r22,7
    7450:	dcc02d17 	ldw	r19,180(sp)
    7454:	00000306 	br	7464 <___vfprintf_internal_r+0x15ec>
    7458:	42000204 	addi	r8,r8,8
    745c:	843ffc04 	addi	r16,r16,-16
    7460:	8c3ef50e 	bge	r17,r16,7038 <__alt_data_end+0xfffe7038>
    7464:	18c00404 	addi	r3,r3,16
    7468:	10800044 	addi	r2,r2,1
    746c:	45000015 	stw	r20,0(r8)
    7470:	44400115 	stw	r17,4(r8)
    7474:	d8c02015 	stw	r3,128(sp)
    7478:	d8801f15 	stw	r2,124(sp)
    747c:	b0bff60e 	bge	r22,r2,7458 <__alt_data_end+0xfffe7458>
    7480:	d9801e04 	addi	r6,sp,120
    7484:	b80b883a 	mov	r5,r23
    7488:	9809883a 	mov	r4,r19
    748c:	000c0700 	call	c070 <__sprint_r>
    7490:	103b7d1e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    7494:	d8c02017 	ldw	r3,128(sp)
    7498:	d8801f17 	ldw	r2,124(sp)
    749c:	da000404 	addi	r8,sp,16
    74a0:	003fee06 	br	745c <__alt_data_end+0xfffe745c>
    74a4:	9088703a 	and	r4,r18,r2
    74a8:	203eab1e 	bne	r4,zero,6f58 <__alt_data_end+0xfffe6f58>
    74ac:	dc401f17 	ldw	r17,124(sp)
    74b0:	40800115 	stw	r2,4(r8)
    74b4:	44000015 	stw	r16,0(r8)
    74b8:	8c400044 	addi	r17,r17,1
    74bc:	d8c02015 	stw	r3,128(sp)
    74c0:	dc401f15 	stw	r17,124(sp)
    74c4:	008001c4 	movi	r2,7
    74c8:	14400e16 	blt	r2,r17,7504 <___vfprintf_internal_r+0x168c>
    74cc:	45800204 	addi	r22,r8,8
    74d0:	003eca06 	br	6ffc <__alt_data_end+0xfffe6ffc>
    74d4:	01000074 	movhi	r4,1
    74d8:	2104cb84 	addi	r4,r4,4910
    74dc:	d9002c15 	stw	r4,176(sp)
    74e0:	d8802c17 	ldw	r2,176(sp)
    74e4:	1c07883a 	add	r3,r3,r16
    74e8:	8c400044 	addi	r17,r17,1
    74ec:	b0800015 	stw	r2,0(r22)
    74f0:	b4000115 	stw	r16,4(r22)
    74f4:	d8c02015 	stw	r3,128(sp)
    74f8:	dc401f15 	stw	r17,124(sp)
    74fc:	008001c4 	movi	r2,7
    7500:	147ebd0e 	bge	r2,r17,6ff8 <__alt_data_end+0xfffe6ff8>
    7504:	d9002d17 	ldw	r4,180(sp)
    7508:	d9801e04 	addi	r6,sp,120
    750c:	b80b883a 	mov	r5,r23
    7510:	000c0700 	call	c070 <__sprint_r>
    7514:	103b5c1e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    7518:	d8c02017 	ldw	r3,128(sp)
    751c:	dc401f17 	ldw	r17,124(sp)
    7520:	dd800404 	addi	r22,sp,16
    7524:	003eb506 	br	6ffc <__alt_data_end+0xfffe6ffc>
    7528:	d9002d17 	ldw	r4,180(sp)
    752c:	d9801e04 	addi	r6,sp,120
    7530:	b80b883a 	mov	r5,r23
    7534:	000c0700 	call	c070 <__sprint_r>
    7538:	103b531e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    753c:	d8c02017 	ldw	r3,128(sp)
    7540:	dc401f17 	ldw	r17,124(sp)
    7544:	da000404 	addi	r8,sp,16
    7548:	003e8d06 	br	6f80 <__alt_data_end+0xfffe6f80>
    754c:	d9002d17 	ldw	r4,180(sp)
    7550:	d9801e04 	addi	r6,sp,120
    7554:	b80b883a 	mov	r5,r23
    7558:	000c0700 	call	c070 <__sprint_r>
    755c:	103b4a1e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    7560:	d8c02017 	ldw	r3,128(sp)
    7564:	dc401f17 	ldw	r17,124(sp)
    7568:	dd800404 	addi	r22,sp,16
    756c:	003e8f06 	br	6fac <__alt_data_end+0xfffe6fac>
    7570:	0027883a 	mov	r19,zero
    7574:	003f4a06 	br	72a0 <__alt_data_end+0xfffe72a0>
    7578:	d9002d17 	ldw	r4,180(sp)
    757c:	d9801e04 	addi	r6,sp,120
    7580:	b80b883a 	mov	r5,r23
    7584:	000c0700 	call	c070 <__sprint_r>
    7588:	103b3f1e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    758c:	d8c02017 	ldw	r3,128(sp)
    7590:	da000404 	addi	r8,sp,16
    7594:	003c7b06 	br	6784 <__alt_data_end+0xfffe6784>
    7598:	d9402a17 	ldw	r5,168(sp)
    759c:	04e7c83a 	sub	r19,zero,r19
    75a0:	07000b44 	movi	fp,45
    75a4:	9804c03a 	cmpne	r2,r19,zero
    75a8:	05adc83a 	sub	r22,zero,r22
    75ac:	df002785 	stb	fp,158(sp)
    75b0:	b0adc83a 	sub	r22,r22,r2
    75b4:	28017b16 	blt	r5,zero,7ba4 <___vfprintf_internal_r+0x1d2c>
    75b8:	00bfdfc4 	movi	r2,-129
    75bc:	90a4703a 	and	r18,r18,r2
    75c0:	003b8906 	br	63e8 <__alt_data_end+0xfffe63e8>
    75c4:	d9003617 	ldw	r4,216(sp)
    75c8:	d9403817 	ldw	r5,224(sp)
    75cc:	da003d15 	stw	r8,244(sp)
    75d0:	000be240 	call	be24 <__fpclassifyd>
    75d4:	da003d17 	ldw	r8,244(sp)
    75d8:	1000f026 	beq	r2,zero,799c <___vfprintf_internal_r+0x1b24>
    75dc:	d9002a17 	ldw	r4,168(sp)
    75e0:	05bff7c4 	movi	r22,-33
    75e4:	00bfffc4 	movi	r2,-1
    75e8:	8dac703a 	and	r22,r17,r22
    75ec:	20820026 	beq	r4,r2,7df0 <___vfprintf_internal_r+0x1f78>
    75f0:	008011c4 	movi	r2,71
    75f4:	b081f726 	beq	r22,r2,7dd4 <___vfprintf_internal_r+0x1f5c>
    75f8:	d9003817 	ldw	r4,224(sp)
    75fc:	90c04014 	ori	r3,r18,256
    7600:	d8c02c15 	stw	r3,176(sp)
    7604:	20021516 	blt	r4,zero,7e5c <___vfprintf_internal_r+0x1fe4>
    7608:	dcc03817 	ldw	r19,224(sp)
    760c:	d8002905 	stb	zero,164(sp)
    7610:	00801984 	movi	r2,102
    7614:	8881f926 	beq	r17,r2,7dfc <___vfprintf_internal_r+0x1f84>
    7618:	00801184 	movi	r2,70
    761c:	88821c26 	beq	r17,r2,7e90 <___vfprintf_internal_r+0x2018>
    7620:	00801144 	movi	r2,69
    7624:	b081ef26 	beq	r22,r2,7de4 <___vfprintf_internal_r+0x1f6c>
    7628:	d8c02a17 	ldw	r3,168(sp)
    762c:	d8802104 	addi	r2,sp,132
    7630:	d8800315 	stw	r2,12(sp)
    7634:	d9403617 	ldw	r5,216(sp)
    7638:	d8802504 	addi	r2,sp,148
    763c:	d9002d17 	ldw	r4,180(sp)
    7640:	d8800215 	stw	r2,8(sp)
    7644:	d8802604 	addi	r2,sp,152
    7648:	d8c00015 	stw	r3,0(sp)
    764c:	d8800115 	stw	r2,4(sp)
    7650:	01c00084 	movi	r7,2
    7654:	980d883a 	mov	r6,r19
    7658:	d8c03c15 	stw	r3,240(sp)
    765c:	da003d15 	stw	r8,244(sp)
    7660:	00087dc0 	call	87dc <_dtoa_r>
    7664:	1021883a 	mov	r16,r2
    7668:	008019c4 	movi	r2,103
    766c:	d8c03c17 	ldw	r3,240(sp)
    7670:	da003d17 	ldw	r8,244(sp)
    7674:	88817126 	beq	r17,r2,7c3c <___vfprintf_internal_r+0x1dc4>
    7678:	008011c4 	movi	r2,71
    767c:	88829126 	beq	r17,r2,80c4 <___vfprintf_internal_r+0x224c>
    7680:	80f9883a 	add	fp,r16,r3
    7684:	d9003617 	ldw	r4,216(sp)
    7688:	000d883a 	mov	r6,zero
    768c:	000f883a 	mov	r7,zero
    7690:	980b883a 	mov	r5,r19
    7694:	da003d15 	stw	r8,244(sp)
    7698:	000e8500 	call	e850 <__eqdf2>
    769c:	da003d17 	ldw	r8,244(sp)
    76a0:	10018d26 	beq	r2,zero,7cd8 <___vfprintf_internal_r+0x1e60>
    76a4:	d8802117 	ldw	r2,132(sp)
    76a8:	1700062e 	bgeu	r2,fp,76c4 <___vfprintf_internal_r+0x184c>
    76ac:	01000c04 	movi	r4,48
    76b0:	10c00044 	addi	r3,r2,1
    76b4:	d8c02115 	stw	r3,132(sp)
    76b8:	11000005 	stb	r4,0(r2)
    76bc:	d8802117 	ldw	r2,132(sp)
    76c0:	173ffb36 	bltu	r2,fp,76b0 <__alt_data_end+0xfffe76b0>
    76c4:	1405c83a 	sub	r2,r2,r16
    76c8:	d8803315 	stw	r2,204(sp)
    76cc:	008011c4 	movi	r2,71
    76d0:	b0817626 	beq	r22,r2,7cac <___vfprintf_internal_r+0x1e34>
    76d4:	00801944 	movi	r2,101
    76d8:	1442800e 	bge	r2,r17,80dc <___vfprintf_internal_r+0x2264>
    76dc:	d8c02617 	ldw	r3,152(sp)
    76e0:	00801984 	movi	r2,102
    76e4:	d8c03215 	stw	r3,200(sp)
    76e8:	8881fe26 	beq	r17,r2,7ee4 <___vfprintf_internal_r+0x206c>
    76ec:	d8c03217 	ldw	r3,200(sp)
    76f0:	d9003317 	ldw	r4,204(sp)
    76f4:	1901dd16 	blt	r3,r4,7e6c <___vfprintf_internal_r+0x1ff4>
    76f8:	9480004c 	andi	r18,r18,1
    76fc:	90022b1e 	bne	r18,zero,7fac <___vfprintf_internal_r+0x2134>
    7700:	1805883a 	mov	r2,r3
    7704:	18028316 	blt	r3,zero,8114 <___vfprintf_internal_r+0x229c>
    7708:	d8c03217 	ldw	r3,200(sp)
    770c:	044019c4 	movi	r17,103
    7710:	d8c02b15 	stw	r3,172(sp)
    7714:	df002907 	ldb	fp,164(sp)
    7718:	e001531e 	bne	fp,zero,7c68 <___vfprintf_internal_r+0x1df0>
    771c:	df002783 	ldbu	fp,158(sp)
    7720:	d8802915 	stw	r2,164(sp)
    7724:	dc802c17 	ldw	r18,176(sp)
    7728:	d8002a15 	stw	zero,168(sp)
    772c:	003baf06 	br	65ec <__alt_data_end+0xfffe65ec>
    7730:	d8c02e17 	ldw	r3,184(sp)
    7734:	d9002e17 	ldw	r4,184(sp)
    7738:	d9402e17 	ldw	r5,184(sp)
    773c:	18c00017 	ldw	r3,0(r3)
    7740:	21000117 	ldw	r4,4(r4)
    7744:	29400204 	addi	r5,r5,8
    7748:	d8c03615 	stw	r3,216(sp)
    774c:	d9003815 	stw	r4,224(sp)
    7750:	d9402e15 	stw	r5,184(sp)
    7754:	003b5006 	br	6498 <__alt_data_end+0xfffe6498>
    7758:	ac400007 	ldb	r17,0(r21)
    775c:	003a2806 	br	6000 <__alt_data_end+0xfffe6000>
    7760:	9080100c 	andi	r2,r18,64
    7764:	1000a826 	beq	r2,zero,7a08 <___vfprintf_internal_r+0x1b90>
    7768:	d8c02e17 	ldw	r3,184(sp)
    776c:	002d883a 	mov	r22,zero
    7770:	1cc0000b 	ldhu	r19,0(r3)
    7774:	18c00104 	addi	r3,r3,4
    7778:	d8c02e15 	stw	r3,184(sp)
    777c:	003caf06 	br	6a3c <__alt_data_end+0xfffe6a3c>
    7780:	d9002e17 	ldw	r4,184(sp)
    7784:	d9402a17 	ldw	r5,168(sp)
    7788:	002d883a 	mov	r22,zero
    778c:	20800104 	addi	r2,r4,4
    7790:	24c00017 	ldw	r19,0(r4)
    7794:	283ebb0e 	bge	r5,zero,7284 <__alt_data_end+0xfffe7284>
    7798:	003ef106 	br	7360 <__alt_data_end+0xfffe7360>
    779c:	9080040c 	andi	r2,r18,16
    77a0:	1000921e 	bne	r2,zero,79ec <___vfprintf_internal_r+0x1b74>
    77a4:	9480100c 	andi	r18,r18,64
    77a8:	90013926 	beq	r18,zero,7c90 <___vfprintf_internal_r+0x1e18>
    77ac:	d9402e17 	ldw	r5,184(sp)
    77b0:	d8c02f17 	ldw	r3,188(sp)
    77b4:	28800017 	ldw	r2,0(r5)
    77b8:	29400104 	addi	r5,r5,4
    77bc:	d9402e15 	stw	r5,184(sp)
    77c0:	10c0000d 	sth	r3,0(r2)
    77c4:	0039e406 	br	5f58 <__alt_data_end+0xfffe5f58>
    77c8:	9080100c 	andi	r2,r18,64
    77cc:	10008026 	beq	r2,zero,79d0 <___vfprintf_internal_r+0x1b58>
    77d0:	d8802e17 	ldw	r2,184(sp)
    77d4:	14c0000f 	ldh	r19,0(r2)
    77d8:	10800104 	addi	r2,r2,4
    77dc:	d8802e15 	stw	r2,184(sp)
    77e0:	982dd7fa 	srai	r22,r19,31
    77e4:	b005883a 	mov	r2,r22
    77e8:	003af706 	br	63c8 <__alt_data_end+0xfffe63c8>
    77ec:	9080100c 	andi	r2,r18,64
    77f0:	d8002785 	stb	zero,158(sp)
    77f4:	10008a1e 	bne	r2,zero,7a20 <___vfprintf_internal_r+0x1ba8>
    77f8:	d9002e17 	ldw	r4,184(sp)
    77fc:	d9402a17 	ldw	r5,168(sp)
    7800:	002d883a 	mov	r22,zero
    7804:	20800104 	addi	r2,r4,4
    7808:	24c00017 	ldw	r19,0(r4)
    780c:	283e4b0e 	bge	r5,zero,713c <__alt_data_end+0xfffe713c>
    7810:	9d86b03a 	or	r3,r19,r22
    7814:	d8802e15 	stw	r2,184(sp)
    7818:	183e4c1e 	bne	r3,zero,714c <__alt_data_end+0xfffe714c>
    781c:	0039883a 	mov	fp,zero
    7820:	0005883a 	mov	r2,zero
    7824:	003d4006 	br	6d28 <__alt_data_end+0xfffe6d28>
    7828:	01400074 	movhi	r5,1
    782c:	2944cb84 	addi	r5,r5,4910
    7830:	d9402c15 	stw	r5,176(sp)
    7834:	d9402c17 	ldw	r5,176(sp)
    7838:	1c47883a 	add	r3,r3,r17
    783c:	10800044 	addi	r2,r2,1
    7840:	41400015 	stw	r5,0(r8)
    7844:	44400115 	stw	r17,4(r8)
    7848:	d8c02015 	stw	r3,128(sp)
    784c:	d8801f15 	stw	r2,124(sp)
    7850:	010001c4 	movi	r4,7
    7854:	20bec816 	blt	r4,r2,7378 <__alt_data_end+0xfffe7378>
    7858:	42000204 	addi	r8,r8,8
    785c:	003ecd06 	br	7394 <__alt_data_end+0xfffe7394>
    7860:	d9002a17 	ldw	r4,168(sp)
    7864:	d8002785 	stb	zero,158(sp)
    7868:	203d2d16 	blt	r4,zero,6d20 <__alt_data_end+0xfffe6d20>
    786c:	00bfdfc4 	movi	r2,-129
    7870:	90a4703a 	and	r18,r18,r2
    7874:	003a6106 	br	61fc <__alt_data_end+0xfffe61fc>
    7878:	01000074 	movhi	r4,1
    787c:	2104cb84 	addi	r4,r4,4910
    7880:	d9002c15 	stw	r4,176(sp)
    7884:	003bea06 	br	6830 <__alt_data_end+0xfffe6830>
    7888:	d9002d17 	ldw	r4,180(sp)
    788c:	d9801e04 	addi	r6,sp,120
    7890:	b80b883a 	mov	r5,r23
    7894:	000c0700 	call	c070 <__sprint_r>
    7898:	103a7b1e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    789c:	d8c02017 	ldw	r3,128(sp)
    78a0:	da000404 	addi	r8,sp,16
    78a4:	003d4106 	br	6dac <__alt_data_end+0xfffe6dac>
    78a8:	d8801f17 	ldw	r2,124(sp)
    78ac:	01400074 	movhi	r5,1
    78b0:	01000044 	movi	r4,1
    78b4:	18c00044 	addi	r3,r3,1
    78b8:	10800044 	addi	r2,r2,1
    78bc:	2944cb04 	addi	r5,r5,4908
    78c0:	41000115 	stw	r4,4(r8)
    78c4:	41400015 	stw	r5,0(r8)
    78c8:	d8c02015 	stw	r3,128(sp)
    78cc:	d8801f15 	stw	r2,124(sp)
    78d0:	010001c4 	movi	r4,7
    78d4:	20805c16 	blt	r4,r2,7a48 <___vfprintf_internal_r+0x1bd0>
    78d8:	42000204 	addi	r8,r8,8
    78dc:	8800041e 	bne	r17,zero,78f0 <___vfprintf_internal_r+0x1a78>
    78e0:	d8803317 	ldw	r2,204(sp)
    78e4:	1000021e 	bne	r2,zero,78f0 <___vfprintf_internal_r+0x1a78>
    78e8:	9080004c 	andi	r2,r18,1
    78ec:	103be726 	beq	r2,zero,688c <__alt_data_end+0xfffe688c>
    78f0:	d9003717 	ldw	r4,220(sp)
    78f4:	d8801f17 	ldw	r2,124(sp)
    78f8:	d9403417 	ldw	r5,208(sp)
    78fc:	20c7883a 	add	r3,r4,r3
    7900:	10800044 	addi	r2,r2,1
    7904:	41000115 	stw	r4,4(r8)
    7908:	41400015 	stw	r5,0(r8)
    790c:	d8c02015 	stw	r3,128(sp)
    7910:	d8801f15 	stw	r2,124(sp)
    7914:	010001c4 	movi	r4,7
    7918:	20812116 	blt	r4,r2,7da0 <___vfprintf_internal_r+0x1f28>
    791c:	42000204 	addi	r8,r8,8
    7920:	0463c83a 	sub	r17,zero,r17
    7924:	0440730e 	bge	zero,r17,7af4 <___vfprintf_internal_r+0x1c7c>
    7928:	05800404 	movi	r22,16
    792c:	b440860e 	bge	r22,r17,7b48 <___vfprintf_internal_r+0x1cd0>
    7930:	01400074 	movhi	r5,1
    7934:	2944cb84 	addi	r5,r5,4910
    7938:	d9402c15 	stw	r5,176(sp)
    793c:	070001c4 	movi	fp,7
    7940:	dcc02d17 	ldw	r19,180(sp)
    7944:	00000306 	br	7954 <___vfprintf_internal_r+0x1adc>
    7948:	42000204 	addi	r8,r8,8
    794c:	8c7ffc04 	addi	r17,r17,-16
    7950:	b440800e 	bge	r22,r17,7b54 <___vfprintf_internal_r+0x1cdc>
    7954:	18c00404 	addi	r3,r3,16
    7958:	10800044 	addi	r2,r2,1
    795c:	45000015 	stw	r20,0(r8)
    7960:	45800115 	stw	r22,4(r8)
    7964:	d8c02015 	stw	r3,128(sp)
    7968:	d8801f15 	stw	r2,124(sp)
    796c:	e0bff60e 	bge	fp,r2,7948 <__alt_data_end+0xfffe7948>
    7970:	d9801e04 	addi	r6,sp,120
    7974:	b80b883a 	mov	r5,r23
    7978:	9809883a 	mov	r4,r19
    797c:	000c0700 	call	c070 <__sprint_r>
    7980:	103a411e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    7984:	d8c02017 	ldw	r3,128(sp)
    7988:	d8801f17 	ldw	r2,124(sp)
    798c:	da000404 	addi	r8,sp,16
    7990:	003fee06 	br	794c <__alt_data_end+0xfffe794c>
    7994:	00bfffc4 	movi	r2,-1
    7998:	003a3f06 	br	6298 <__alt_data_end+0xfffe6298>
    799c:	008011c4 	movi	r2,71
    79a0:	1440b816 	blt	r2,r17,7c84 <___vfprintf_internal_r+0x1e0c>
    79a4:	04000074 	movhi	r16,1
    79a8:	8404bd04 	addi	r16,r16,4852
    79ac:	00c000c4 	movi	r3,3
    79b0:	00bfdfc4 	movi	r2,-129
    79b4:	d8c02915 	stw	r3,164(sp)
    79b8:	90a4703a 	and	r18,r18,r2
    79bc:	df002783 	ldbu	fp,158(sp)
    79c0:	d8c02b15 	stw	r3,172(sp)
    79c4:	d8002a15 	stw	zero,168(sp)
    79c8:	d8003215 	stw	zero,200(sp)
    79cc:	003b0706 	br	65ec <__alt_data_end+0xfffe65ec>
    79d0:	d8c02e17 	ldw	r3,184(sp)
    79d4:	1cc00017 	ldw	r19,0(r3)
    79d8:	18c00104 	addi	r3,r3,4
    79dc:	d8c02e15 	stw	r3,184(sp)
    79e0:	982dd7fa 	srai	r22,r19,31
    79e4:	b005883a 	mov	r2,r22
    79e8:	003a7706 	br	63c8 <__alt_data_end+0xfffe63c8>
    79ec:	d8c02e17 	ldw	r3,184(sp)
    79f0:	d9002f17 	ldw	r4,188(sp)
    79f4:	18800017 	ldw	r2,0(r3)
    79f8:	18c00104 	addi	r3,r3,4
    79fc:	d8c02e15 	stw	r3,184(sp)
    7a00:	11000015 	stw	r4,0(r2)
    7a04:	00395406 	br	5f58 <__alt_data_end+0xfffe5f58>
    7a08:	d9002e17 	ldw	r4,184(sp)
    7a0c:	002d883a 	mov	r22,zero
    7a10:	24c00017 	ldw	r19,0(r4)
    7a14:	21000104 	addi	r4,r4,4
    7a18:	d9002e15 	stw	r4,184(sp)
    7a1c:	003c0706 	br	6a3c <__alt_data_end+0xfffe6a3c>
    7a20:	d9402e17 	ldw	r5,184(sp)
    7a24:	d8c02a17 	ldw	r3,168(sp)
    7a28:	002d883a 	mov	r22,zero
    7a2c:	28800104 	addi	r2,r5,4
    7a30:	2cc0000b 	ldhu	r19,0(r5)
    7a34:	183dc10e 	bge	r3,zero,713c <__alt_data_end+0xfffe713c>
    7a38:	003f7506 	br	7810 <__alt_data_end+0xfffe7810>
    7a3c:	04000074 	movhi	r16,1
    7a40:	8404bb04 	addi	r16,r16,4844
    7a44:	003aa706 	br	64e4 <__alt_data_end+0xfffe64e4>
    7a48:	d9002d17 	ldw	r4,180(sp)
    7a4c:	d9801e04 	addi	r6,sp,120
    7a50:	b80b883a 	mov	r5,r23
    7a54:	000c0700 	call	c070 <__sprint_r>
    7a58:	103a0b1e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    7a5c:	dc402617 	ldw	r17,152(sp)
    7a60:	d8c02017 	ldw	r3,128(sp)
    7a64:	da000404 	addi	r8,sp,16
    7a68:	003f9c06 	br	78dc <__alt_data_end+0xfffe78dc>
    7a6c:	ac400043 	ldbu	r17,1(r21)
    7a70:	84000814 	ori	r16,r16,32
    7a74:	ad400044 	addi	r21,r21,1
    7a78:	8c403fcc 	andi	r17,r17,255
    7a7c:	8c40201c 	xori	r17,r17,128
    7a80:	8c7fe004 	addi	r17,r17,-128
    7a84:	00395e06 	br	6000 <__alt_data_end+0xfffe6000>
    7a88:	d8c02e15 	stw	r3,184(sp)
    7a8c:	0039883a 	mov	fp,zero
    7a90:	003e3506 	br	7368 <__alt_data_end+0xfffe7368>
    7a94:	d9002d17 	ldw	r4,180(sp)
    7a98:	d9801e04 	addi	r6,sp,120
    7a9c:	b80b883a 	mov	r5,r23
    7aa0:	000c0700 	call	c070 <__sprint_r>
    7aa4:	1039f81e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    7aa8:	d8c02017 	ldw	r3,128(sp)
    7aac:	da000404 	addi	r8,sp,16
    7ab0:	003cd006 	br	6df4 <__alt_data_end+0xfffe6df4>
    7ab4:	8009883a 	mov	r4,r16
    7ab8:	df003d15 	stw	fp,244(sp)
    7abc:	0005de00 	call	5de0 <strlen>
    7ac0:	d8802b15 	stw	r2,172(sp)
    7ac4:	da003d17 	ldw	r8,244(sp)
    7ac8:	103c200e 	bge	r2,zero,6b4c <__alt_data_end+0xfffe6b4c>
    7acc:	0005883a 	mov	r2,zero
    7ad0:	003c1e06 	br	6b4c <__alt_data_end+0xfffe6b4c>
    7ad4:	d9002d17 	ldw	r4,180(sp)
    7ad8:	d9801e04 	addi	r6,sp,120
    7adc:	b80b883a 	mov	r5,r23
    7ae0:	000c0700 	call	c070 <__sprint_r>
    7ae4:	1039e81e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    7ae8:	d8c02017 	ldw	r3,128(sp)
    7aec:	d8801f17 	ldw	r2,124(sp)
    7af0:	da000404 	addi	r8,sp,16
    7af4:	d9403317 	ldw	r5,204(sp)
    7af8:	10800044 	addi	r2,r2,1
    7afc:	44000015 	stw	r16,0(r8)
    7b00:	28c7883a 	add	r3,r5,r3
    7b04:	003b5b06 	br	6874 <__alt_data_end+0xfffe6874>
    7b08:	01000074 	movhi	r4,1
    7b0c:	2104cf84 	addi	r4,r4,4926
    7b10:	d9003515 	stw	r4,212(sp)
    7b14:	003af206 	br	66e0 <__alt_data_end+0xfffe66e0>
    7b18:	013fffc4 	movi	r4,-1
    7b1c:	003a0806 	br	6340 <__alt_data_end+0xfffe6340>
    7b20:	0023883a 	mov	r17,zero
    7b24:	003d9d06 	br	719c <__alt_data_end+0xfffe719c>
    7b28:	d9002d17 	ldw	r4,180(sp)
    7b2c:	d9801e04 	addi	r6,sp,120
    7b30:	b80b883a 	mov	r5,r23
    7b34:	000c0700 	call	c070 <__sprint_r>
    7b38:	1039d31e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    7b3c:	d8c02017 	ldw	r3,128(sp)
    7b40:	da000404 	addi	r8,sp,16
    7b44:	003d9406 	br	7198 <__alt_data_end+0xfffe7198>
    7b48:	01000074 	movhi	r4,1
    7b4c:	2104cb84 	addi	r4,r4,4910
    7b50:	d9002c15 	stw	r4,176(sp)
    7b54:	d9002c17 	ldw	r4,176(sp)
    7b58:	1c47883a 	add	r3,r3,r17
    7b5c:	10800044 	addi	r2,r2,1
    7b60:	41000015 	stw	r4,0(r8)
    7b64:	44400115 	stw	r17,4(r8)
    7b68:	d8c02015 	stw	r3,128(sp)
    7b6c:	d8801f15 	stw	r2,124(sp)
    7b70:	010001c4 	movi	r4,7
    7b74:	20bfd716 	blt	r4,r2,7ad4 <__alt_data_end+0xfffe7ad4>
    7b78:	42000204 	addi	r8,r8,8
    7b7c:	003fdd06 	br	7af4 <__alt_data_end+0xfffe7af4>
    7b80:	d9002d17 	ldw	r4,180(sp)
    7b84:	d9801e04 	addi	r6,sp,120
    7b88:	b80b883a 	mov	r5,r23
    7b8c:	000c0700 	call	c070 <__sprint_r>
    7b90:	1039bd1e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    7b94:	d8802617 	ldw	r2,152(sp)
    7b98:	d8c02017 	ldw	r3,128(sp)
    7b9c:	da000404 	addi	r8,sp,16
    7ba0:	003e1006 	br	73e4 <__alt_data_end+0xfffe73e4>
    7ba4:	00800044 	movi	r2,1
    7ba8:	10803fcc 	andi	r2,r2,255
    7bac:	00c00044 	movi	r3,1
    7bb0:	10fa0d26 	beq	r2,r3,63e8 <__alt_data_end+0xfffe63e8>
    7bb4:	00c00084 	movi	r3,2
    7bb8:	10fbaf26 	beq	r2,r3,6a78 <__alt_data_end+0xfffe6a78>
    7bbc:	003a6d06 	br	6574 <__alt_data_end+0xfffe6574>
    7bc0:	01000074 	movhi	r4,1
    7bc4:	2104cf84 	addi	r4,r4,4926
    7bc8:	d9003515 	stw	r4,212(sp)
    7bcc:	003b5406 	br	6920 <__alt_data_end+0xfffe6920>
    7bd0:	d8802a17 	ldw	r2,168(sp)
    7bd4:	00c00184 	movi	r3,6
    7bd8:	1880012e 	bgeu	r3,r2,7be0 <___vfprintf_internal_r+0x1d68>
    7bdc:	1805883a 	mov	r2,r3
    7be0:	d8802b15 	stw	r2,172(sp)
    7be4:	1000ef16 	blt	r2,zero,7fa4 <___vfprintf_internal_r+0x212c>
    7be8:	04000074 	movhi	r16,1
    7bec:	d8802915 	stw	r2,164(sp)
    7bf0:	dcc02e15 	stw	r19,184(sp)
    7bf4:	d8002a15 	stw	zero,168(sp)
    7bf8:	d8003215 	stw	zero,200(sp)
    7bfc:	8404c904 	addi	r16,r16,4900
    7c00:	0039883a 	mov	fp,zero
    7c04:	003a8006 	br	6608 <__alt_data_end+0xfffe6608>
    7c08:	0021883a 	mov	r16,zero
    7c0c:	003e0706 	br	742c <__alt_data_end+0xfffe742c>
    7c10:	d9002d17 	ldw	r4,180(sp)
    7c14:	d9801e04 	addi	r6,sp,120
    7c18:	b80b883a 	mov	r5,r23
    7c1c:	000c0700 	call	c070 <__sprint_r>
    7c20:	1039991e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    7c24:	d8802617 	ldw	r2,152(sp)
    7c28:	d9403317 	ldw	r5,204(sp)
    7c2c:	d8c02017 	ldw	r3,128(sp)
    7c30:	da000404 	addi	r8,sp,16
    7c34:	2885c83a 	sub	r2,r5,r2
    7c38:	003dfb06 	br	7428 <__alt_data_end+0xfffe7428>
    7c3c:	9080004c 	andi	r2,r18,1
    7c40:	103e8f1e 	bne	r2,zero,7680 <__alt_data_end+0xfffe7680>
    7c44:	d8802117 	ldw	r2,132(sp)
    7c48:	003e9e06 	br	76c4 <__alt_data_end+0xfffe76c4>
    7c4c:	1025883a 	mov	r18,r2
    7c50:	0039883a 	mov	fp,zero
    7c54:	00800084 	movi	r2,2
    7c58:	003fd306 	br	7ba8 <__alt_data_end+0xfffe7ba8>
    7c5c:	07000b44 	movi	fp,45
    7c60:	df002785 	stb	fp,158(sp)
    7c64:	003a1b06 	br	64d4 <__alt_data_end+0xfffe64d4>
    7c68:	00c00b44 	movi	r3,45
    7c6c:	d8c02785 	stb	r3,158(sp)
    7c70:	d8802915 	stw	r2,164(sp)
    7c74:	dc802c17 	ldw	r18,176(sp)
    7c78:	d8002a15 	stw	zero,168(sp)
    7c7c:	07000b44 	movi	fp,45
    7c80:	003a5e06 	br	65fc <__alt_data_end+0xfffe65fc>
    7c84:	04000074 	movhi	r16,1
    7c88:	8404be04 	addi	r16,r16,4856
    7c8c:	003f4706 	br	79ac <__alt_data_end+0xfffe79ac>
    7c90:	d9002e17 	ldw	r4,184(sp)
    7c94:	d9402f17 	ldw	r5,188(sp)
    7c98:	20800017 	ldw	r2,0(r4)
    7c9c:	21000104 	addi	r4,r4,4
    7ca0:	d9002e15 	stw	r4,184(sp)
    7ca4:	11400015 	stw	r5,0(r2)
    7ca8:	0038ab06 	br	5f58 <__alt_data_end+0xfffe5f58>
    7cac:	dd802617 	ldw	r22,152(sp)
    7cb0:	00bfff44 	movi	r2,-3
    7cb4:	b0801c16 	blt	r22,r2,7d28 <___vfprintf_internal_r+0x1eb0>
    7cb8:	d9402a17 	ldw	r5,168(sp)
    7cbc:	2d801a16 	blt	r5,r22,7d28 <___vfprintf_internal_r+0x1eb0>
    7cc0:	dd803215 	stw	r22,200(sp)
    7cc4:	003e8906 	br	76ec <__alt_data_end+0xfffe76ec>
    7cc8:	01000074 	movhi	r4,1
    7ccc:	2104cb84 	addi	r4,r4,4910
    7cd0:	d9002c15 	stw	r4,176(sp)
    7cd4:	003c9106 	br	6f1c <__alt_data_end+0xfffe6f1c>
    7cd8:	e005883a 	mov	r2,fp
    7cdc:	003e7906 	br	76c4 <__alt_data_end+0xfffe76c4>
    7ce0:	d9002a17 	ldw	r4,168(sp)
    7ce4:	df002783 	ldbu	fp,158(sp)
    7ce8:	dcc02e15 	stw	r19,184(sp)
    7cec:	d9002915 	stw	r4,164(sp)
    7cf0:	d9002b15 	stw	r4,172(sp)
    7cf4:	d8002a15 	stw	zero,168(sp)
    7cf8:	d8003215 	stw	zero,200(sp)
    7cfc:	003a3b06 	br	65ec <__alt_data_end+0xfffe65ec>
    7d00:	9080004c 	andi	r2,r18,1
    7d04:	0039883a 	mov	fp,zero
    7d08:	10000426 	beq	r2,zero,7d1c <___vfprintf_internal_r+0x1ea4>
    7d0c:	00800c04 	movi	r2,48
    7d10:	dc001dc4 	addi	r16,sp,119
    7d14:	d8801dc5 	stb	r2,119(sp)
    7d18:	003b6406 	br	6aac <__alt_data_end+0xfffe6aac>
    7d1c:	d8002b15 	stw	zero,172(sp)
    7d20:	dc001e04 	addi	r16,sp,120
    7d24:	003a2b06 	br	65d4 <__alt_data_end+0xfffe65d4>
    7d28:	8c7fff84 	addi	r17,r17,-2
    7d2c:	b5bfffc4 	addi	r22,r22,-1
    7d30:	dd802615 	stw	r22,152(sp)
    7d34:	dc4022c5 	stb	r17,139(sp)
    7d38:	b000bf16 	blt	r22,zero,8038 <___vfprintf_internal_r+0x21c0>
    7d3c:	00800ac4 	movi	r2,43
    7d40:	d8802305 	stb	r2,140(sp)
    7d44:	00800244 	movi	r2,9
    7d48:	15807016 	blt	r2,r22,7f0c <___vfprintf_internal_r+0x2094>
    7d4c:	00800c04 	movi	r2,48
    7d50:	b5800c04 	addi	r22,r22,48
    7d54:	d8802345 	stb	r2,141(sp)
    7d58:	dd802385 	stb	r22,142(sp)
    7d5c:	d88023c4 	addi	r2,sp,143
    7d60:	df0022c4 	addi	fp,sp,139
    7d64:	d8c03317 	ldw	r3,204(sp)
    7d68:	1739c83a 	sub	fp,r2,fp
    7d6c:	d9003317 	ldw	r4,204(sp)
    7d70:	e0c7883a 	add	r3,fp,r3
    7d74:	df003a15 	stw	fp,232(sp)
    7d78:	d8c02b15 	stw	r3,172(sp)
    7d7c:	00800044 	movi	r2,1
    7d80:	1100b30e 	bge	r2,r4,8050 <___vfprintf_internal_r+0x21d8>
    7d84:	d8c02b17 	ldw	r3,172(sp)
    7d88:	18c00044 	addi	r3,r3,1
    7d8c:	d8c02b15 	stw	r3,172(sp)
    7d90:	1805883a 	mov	r2,r3
    7d94:	1800ac16 	blt	r3,zero,8048 <___vfprintf_internal_r+0x21d0>
    7d98:	d8003215 	stw	zero,200(sp)
    7d9c:	003e5d06 	br	7714 <__alt_data_end+0xfffe7714>
    7da0:	d9002d17 	ldw	r4,180(sp)
    7da4:	d9801e04 	addi	r6,sp,120
    7da8:	b80b883a 	mov	r5,r23
    7dac:	000c0700 	call	c070 <__sprint_r>
    7db0:	1039351e 	bne	r2,zero,6288 <__alt_data_end+0xfffe6288>
    7db4:	dc402617 	ldw	r17,152(sp)
    7db8:	d8c02017 	ldw	r3,128(sp)
    7dbc:	d8801f17 	ldw	r2,124(sp)
    7dc0:	da000404 	addi	r8,sp,16
    7dc4:	003ed606 	br	7920 <__alt_data_end+0xfffe7920>
    7dc8:	182b883a 	mov	r21,r3
    7dcc:	d8002a15 	stw	zero,168(sp)
    7dd0:	00388c06 	br	6004 <__alt_data_end+0xfffe6004>
    7dd4:	d8802a17 	ldw	r2,168(sp)
    7dd8:	103e071e 	bne	r2,zero,75f8 <__alt_data_end+0xfffe75f8>
    7ddc:	dc002a15 	stw	r16,168(sp)
    7de0:	003e0506 	br	75f8 <__alt_data_end+0xfffe75f8>
    7de4:	d9002a17 	ldw	r4,168(sp)
    7de8:	20c00044 	addi	r3,r4,1
    7dec:	003e0f06 	br	762c <__alt_data_end+0xfffe762c>
    7df0:	01400184 	movi	r5,6
    7df4:	d9402a15 	stw	r5,168(sp)
    7df8:	003dff06 	br	75f8 <__alt_data_end+0xfffe75f8>
    7dfc:	d8802104 	addi	r2,sp,132
    7e00:	d8800315 	stw	r2,12(sp)
    7e04:	d8802504 	addi	r2,sp,148
    7e08:	d8800215 	stw	r2,8(sp)
    7e0c:	d8802604 	addi	r2,sp,152
    7e10:	d8800115 	stw	r2,4(sp)
    7e14:	d8802a17 	ldw	r2,168(sp)
    7e18:	d9403617 	ldw	r5,216(sp)
    7e1c:	d9002d17 	ldw	r4,180(sp)
    7e20:	d8800015 	stw	r2,0(sp)
    7e24:	01c000c4 	movi	r7,3
    7e28:	980d883a 	mov	r6,r19
    7e2c:	da003d15 	stw	r8,244(sp)
    7e30:	00087dc0 	call	87dc <_dtoa_r>
    7e34:	d8c02a17 	ldw	r3,168(sp)
    7e38:	da003d17 	ldw	r8,244(sp)
    7e3c:	1021883a 	mov	r16,r2
    7e40:	10f9883a 	add	fp,r2,r3
    7e44:	81000007 	ldb	r4,0(r16)
    7e48:	00800c04 	movi	r2,48
    7e4c:	20805e26 	beq	r4,r2,7fc8 <___vfprintf_internal_r+0x2150>
    7e50:	d8c02617 	ldw	r3,152(sp)
    7e54:	e0f9883a 	add	fp,fp,r3
    7e58:	003e0a06 	br	7684 <__alt_data_end+0xfffe7684>
    7e5c:	00c00b44 	movi	r3,45
    7e60:	24e0003c 	xorhi	r19,r4,32768
    7e64:	d8c02905 	stb	r3,164(sp)
    7e68:	003de906 	br	7610 <__alt_data_end+0xfffe7610>
    7e6c:	d8c03217 	ldw	r3,200(sp)
    7e70:	00c07a0e 	bge	zero,r3,805c <___vfprintf_internal_r+0x21e4>
    7e74:	00800044 	movi	r2,1
    7e78:	d9003317 	ldw	r4,204(sp)
    7e7c:	1105883a 	add	r2,r2,r4
    7e80:	d8802b15 	stw	r2,172(sp)
    7e84:	10004e16 	blt	r2,zero,7fc0 <___vfprintf_internal_r+0x2148>
    7e88:	044019c4 	movi	r17,103
    7e8c:	003e2106 	br	7714 <__alt_data_end+0xfffe7714>
    7e90:	d9002a17 	ldw	r4,168(sp)
    7e94:	d8802104 	addi	r2,sp,132
    7e98:	d8800315 	stw	r2,12(sp)
    7e9c:	d9000015 	stw	r4,0(sp)
    7ea0:	d8802504 	addi	r2,sp,148
    7ea4:	d9403617 	ldw	r5,216(sp)
    7ea8:	d9002d17 	ldw	r4,180(sp)
    7eac:	d8800215 	stw	r2,8(sp)
    7eb0:	d8802604 	addi	r2,sp,152
    7eb4:	d8800115 	stw	r2,4(sp)
    7eb8:	01c000c4 	movi	r7,3
    7ebc:	980d883a 	mov	r6,r19
    7ec0:	da003d15 	stw	r8,244(sp)
    7ec4:	00087dc0 	call	87dc <_dtoa_r>
    7ec8:	d8c02a17 	ldw	r3,168(sp)
    7ecc:	da003d17 	ldw	r8,244(sp)
    7ed0:	1021883a 	mov	r16,r2
    7ed4:	00801184 	movi	r2,70
    7ed8:	80f9883a 	add	fp,r16,r3
    7edc:	88bfd926 	beq	r17,r2,7e44 <__alt_data_end+0xfffe7e44>
    7ee0:	003de806 	br	7684 <__alt_data_end+0xfffe7684>
    7ee4:	d9002a17 	ldw	r4,168(sp)
    7ee8:	00c04d0e 	bge	zero,r3,8020 <___vfprintf_internal_r+0x21a8>
    7eec:	2000441e 	bne	r4,zero,8000 <___vfprintf_internal_r+0x2188>
    7ef0:	9480004c 	andi	r18,r18,1
    7ef4:	9000421e 	bne	r18,zero,8000 <___vfprintf_internal_r+0x2188>
    7ef8:	1805883a 	mov	r2,r3
    7efc:	18006f16 	blt	r3,zero,80bc <___vfprintf_internal_r+0x2244>
    7f00:	d8c03217 	ldw	r3,200(sp)
    7f04:	d8c02b15 	stw	r3,172(sp)
    7f08:	003e0206 	br	7714 <__alt_data_end+0xfffe7714>
    7f0c:	df0022c4 	addi	fp,sp,139
    7f10:	dc002a15 	stw	r16,168(sp)
    7f14:	4027883a 	mov	r19,r8
    7f18:	e021883a 	mov	r16,fp
    7f1c:	b009883a 	mov	r4,r22
    7f20:	01400284 	movi	r5,10
    7f24:	00035b00 	call	35b0 <__modsi3>
    7f28:	10800c04 	addi	r2,r2,48
    7f2c:	843fffc4 	addi	r16,r16,-1
    7f30:	b009883a 	mov	r4,r22
    7f34:	01400284 	movi	r5,10
    7f38:	80800005 	stb	r2,0(r16)
    7f3c:	000352c0 	call	352c <__divsi3>
    7f40:	102d883a 	mov	r22,r2
    7f44:	00800244 	movi	r2,9
    7f48:	15bff416 	blt	r2,r22,7f1c <__alt_data_end+0xfffe7f1c>
    7f4c:	9811883a 	mov	r8,r19
    7f50:	b0800c04 	addi	r2,r22,48
    7f54:	8027883a 	mov	r19,r16
    7f58:	997fffc4 	addi	r5,r19,-1
    7f5c:	98bfffc5 	stb	r2,-1(r19)
    7f60:	dc002a17 	ldw	r16,168(sp)
    7f64:	2f006d2e 	bgeu	r5,fp,811c <___vfprintf_internal_r+0x22a4>
    7f68:	d9c02384 	addi	r7,sp,142
    7f6c:	3ccfc83a 	sub	r7,r7,r19
    7f70:	d9002344 	addi	r4,sp,141
    7f74:	e1cf883a 	add	r7,fp,r7
    7f78:	00000106 	br	7f80 <___vfprintf_internal_r+0x2108>
    7f7c:	28800003 	ldbu	r2,0(r5)
    7f80:	20800005 	stb	r2,0(r4)
    7f84:	21000044 	addi	r4,r4,1
    7f88:	29400044 	addi	r5,r5,1
    7f8c:	393ffb1e 	bne	r7,r4,7f7c <__alt_data_end+0xfffe7f7c>
    7f90:	d8802304 	addi	r2,sp,140
    7f94:	14c5c83a 	sub	r2,r2,r19
    7f98:	d8c02344 	addi	r3,sp,141
    7f9c:	1885883a 	add	r2,r3,r2
    7fa0:	003f7006 	br	7d64 <__alt_data_end+0xfffe7d64>
    7fa4:	0005883a 	mov	r2,zero
    7fa8:	003f0f06 	br	7be8 <__alt_data_end+0xfffe7be8>
    7fac:	d8c03217 	ldw	r3,200(sp)
    7fb0:	18c00044 	addi	r3,r3,1
    7fb4:	d8c02b15 	stw	r3,172(sp)
    7fb8:	1805883a 	mov	r2,r3
    7fbc:	183fb20e 	bge	r3,zero,7e88 <__alt_data_end+0xfffe7e88>
    7fc0:	0005883a 	mov	r2,zero
    7fc4:	003fb006 	br	7e88 <__alt_data_end+0xfffe7e88>
    7fc8:	d9003617 	ldw	r4,216(sp)
    7fcc:	000d883a 	mov	r6,zero
    7fd0:	000f883a 	mov	r7,zero
    7fd4:	980b883a 	mov	r5,r19
    7fd8:	d8c03c15 	stw	r3,240(sp)
    7fdc:	da003d15 	stw	r8,244(sp)
    7fe0:	000e8500 	call	e850 <__eqdf2>
    7fe4:	d8c03c17 	ldw	r3,240(sp)
    7fe8:	da003d17 	ldw	r8,244(sp)
    7fec:	103f9826 	beq	r2,zero,7e50 <__alt_data_end+0xfffe7e50>
    7ff0:	00800044 	movi	r2,1
    7ff4:	10c7c83a 	sub	r3,r2,r3
    7ff8:	d8c02615 	stw	r3,152(sp)
    7ffc:	003f9506 	br	7e54 <__alt_data_end+0xfffe7e54>
    8000:	d9002a17 	ldw	r4,168(sp)
    8004:	d8c03217 	ldw	r3,200(sp)
    8008:	20800044 	addi	r2,r4,1
    800c:	1885883a 	add	r2,r3,r2
    8010:	d8802b15 	stw	r2,172(sp)
    8014:	103dbf0e 	bge	r2,zero,7714 <__alt_data_end+0xfffe7714>
    8018:	0005883a 	mov	r2,zero
    801c:	003dbd06 	br	7714 <__alt_data_end+0xfffe7714>
    8020:	2000201e 	bne	r4,zero,80a4 <___vfprintf_internal_r+0x222c>
    8024:	9480004c 	andi	r18,r18,1
    8028:	90001e1e 	bne	r18,zero,80a4 <___vfprintf_internal_r+0x222c>
    802c:	00800044 	movi	r2,1
    8030:	d8802b15 	stw	r2,172(sp)
    8034:	003db706 	br	7714 <__alt_data_end+0xfffe7714>
    8038:	00800b44 	movi	r2,45
    803c:	05adc83a 	sub	r22,zero,r22
    8040:	d8802305 	stb	r2,140(sp)
    8044:	003f3f06 	br	7d44 <__alt_data_end+0xfffe7d44>
    8048:	0005883a 	mov	r2,zero
    804c:	003f5206 	br	7d98 <__alt_data_end+0xfffe7d98>
    8050:	90a4703a 	and	r18,r18,r2
    8054:	903f4e26 	beq	r18,zero,7d90 <__alt_data_end+0xfffe7d90>
    8058:	003f4a06 	br	7d84 <__alt_data_end+0xfffe7d84>
    805c:	00800084 	movi	r2,2
    8060:	10c5c83a 	sub	r2,r2,r3
    8064:	003f8406 	br	7e78 <__alt_data_end+0xfffe7e78>
    8068:	d9402e17 	ldw	r5,184(sp)
    806c:	d9002e17 	ldw	r4,184(sp)
    8070:	ac400043 	ldbu	r17,1(r21)
    8074:	29400017 	ldw	r5,0(r5)
    8078:	20800104 	addi	r2,r4,4
    807c:	d8802e15 	stw	r2,184(sp)
    8080:	d9402a15 	stw	r5,168(sp)
    8084:	182b883a 	mov	r21,r3
    8088:	283e7b0e 	bge	r5,zero,7a78 <__alt_data_end+0xfffe7a78>
    808c:	8c403fcc 	andi	r17,r17,255
    8090:	017fffc4 	movi	r5,-1
    8094:	8c40201c 	xori	r17,r17,128
    8098:	d9402a15 	stw	r5,168(sp)
    809c:	8c7fe004 	addi	r17,r17,-128
    80a0:	0037d706 	br	6000 <__alt_data_end+0xfffe6000>
    80a4:	d8c02a17 	ldw	r3,168(sp)
    80a8:	18c00084 	addi	r3,r3,2
    80ac:	d8c02b15 	stw	r3,172(sp)
    80b0:	1805883a 	mov	r2,r3
    80b4:	183d970e 	bge	r3,zero,7714 <__alt_data_end+0xfffe7714>
    80b8:	003fd706 	br	8018 <__alt_data_end+0xfffe8018>
    80bc:	0005883a 	mov	r2,zero
    80c0:	003f8f06 	br	7f00 <__alt_data_end+0xfffe7f00>
    80c4:	9080004c 	andi	r2,r18,1
    80c8:	103f821e 	bne	r2,zero,7ed4 <__alt_data_end+0xfffe7ed4>
    80cc:	d8802117 	ldw	r2,132(sp)
    80d0:	1405c83a 	sub	r2,r2,r16
    80d4:	d8803315 	stw	r2,204(sp)
    80d8:	b47ef426 	beq	r22,r17,7cac <__alt_data_end+0xfffe7cac>
    80dc:	dd802617 	ldw	r22,152(sp)
    80e0:	003f1206 	br	7d2c <__alt_data_end+0xfffe7d2c>
    80e4:	d8c02b03 	ldbu	r3,172(sp)
    80e8:	d8c02785 	stb	r3,158(sp)
    80ec:	0038df06 	br	646c <__alt_data_end+0xfffe646c>
    80f0:	d8c02b03 	ldbu	r3,172(sp)
    80f4:	d8c02785 	stb	r3,158(sp)
    80f8:	0038aa06 	br	63a4 <__alt_data_end+0xfffe63a4>
    80fc:	d8c02b03 	ldbu	r3,172(sp)
    8100:	d8c02785 	stb	r3,158(sp)
    8104:	003a4306 	br	6a14 <__alt_data_end+0xfffe6a14>
    8108:	d8c02b03 	ldbu	r3,172(sp)
    810c:	d8c02785 	stb	r3,158(sp)
    8110:	003af506 	br	6ce8 <__alt_data_end+0xfffe6ce8>
    8114:	0005883a 	mov	r2,zero
    8118:	003d7b06 	br	7708 <__alt_data_end+0xfffe7708>
    811c:	d8802344 	addi	r2,sp,141
    8120:	003f1006 	br	7d64 <__alt_data_end+0xfffe7d64>
    8124:	d8c02b03 	ldbu	r3,172(sp)
    8128:	d8c02785 	stb	r3,158(sp)
    812c:	0038fd06 	br	6524 <__alt_data_end+0xfffe6524>
    8130:	d8c02b03 	ldbu	r3,172(sp)
    8134:	d8c02785 	stb	r3,158(sp)
    8138:	003a9706 	br	6b98 <__alt_data_end+0xfffe6b98>
    813c:	d8c02b03 	ldbu	r3,172(sp)
    8140:	d8c02785 	stb	r3,158(sp)
    8144:	003a1806 	br	69a8 <__alt_data_end+0xfffe69a8>
    8148:	d8c02b03 	ldbu	r3,172(sp)
    814c:	d8c02785 	stb	r3,158(sp)
    8150:	003abe06 	br	6c4c <__alt_data_end+0xfffe6c4c>

00008154 <__vfprintf_internal>:
    8154:	00800074 	movhi	r2,1
    8158:	108be504 	addi	r2,r2,12180
    815c:	300f883a 	mov	r7,r6
    8160:	280d883a 	mov	r6,r5
    8164:	200b883a 	mov	r5,r4
    8168:	11000017 	ldw	r4,0(r2)
    816c:	0005e781 	jmpi	5e78 <___vfprintf_internal_r>

00008170 <__sbprintf>:
    8170:	2880030b 	ldhu	r2,12(r5)
    8174:	2ac01917 	ldw	r11,100(r5)
    8178:	2a80038b 	ldhu	r10,14(r5)
    817c:	2a400717 	ldw	r9,28(r5)
    8180:	2a000917 	ldw	r8,36(r5)
    8184:	defee204 	addi	sp,sp,-1144
    8188:	00c10004 	movi	r3,1024
    818c:	dc011a15 	stw	r16,1128(sp)
    8190:	10bfff4c 	andi	r2,r2,65533
    8194:	2821883a 	mov	r16,r5
    8198:	d8cb883a 	add	r5,sp,r3
    819c:	dc811c15 	stw	r18,1136(sp)
    81a0:	dc411b15 	stw	r17,1132(sp)
    81a4:	dfc11d15 	stw	ra,1140(sp)
    81a8:	2025883a 	mov	r18,r4
    81ac:	d881030d 	sth	r2,1036(sp)
    81b0:	dac11915 	stw	r11,1124(sp)
    81b4:	da81038d 	sth	r10,1038(sp)
    81b8:	da410715 	stw	r9,1052(sp)
    81bc:	da010915 	stw	r8,1060(sp)
    81c0:	dec10015 	stw	sp,1024(sp)
    81c4:	dec10415 	stw	sp,1040(sp)
    81c8:	d8c10215 	stw	r3,1032(sp)
    81cc:	d8c10515 	stw	r3,1044(sp)
    81d0:	d8010615 	stw	zero,1048(sp)
    81d4:	0005e780 	call	5e78 <___vfprintf_internal_r>
    81d8:	1023883a 	mov	r17,r2
    81dc:	10000416 	blt	r2,zero,81f0 <__sbprintf+0x80>
    81e0:	d9410004 	addi	r5,sp,1024
    81e4:	9009883a 	mov	r4,r18
    81e8:	0003a380 	call	3a38 <_fflush_r>
    81ec:	10000d1e 	bne	r2,zero,8224 <__sbprintf+0xb4>
    81f0:	d881030b 	ldhu	r2,1036(sp)
    81f4:	1080100c 	andi	r2,r2,64
    81f8:	10000326 	beq	r2,zero,8208 <__sbprintf+0x98>
    81fc:	8080030b 	ldhu	r2,12(r16)
    8200:	10801014 	ori	r2,r2,64
    8204:	8080030d 	sth	r2,12(r16)
    8208:	8805883a 	mov	r2,r17
    820c:	dfc11d17 	ldw	ra,1140(sp)
    8210:	dc811c17 	ldw	r18,1136(sp)
    8214:	dc411b17 	ldw	r17,1132(sp)
    8218:	dc011a17 	ldw	r16,1128(sp)
    821c:	dec11e04 	addi	sp,sp,1144
    8220:	f800283a 	ret
    8224:	047fffc4 	movi	r17,-1
    8228:	003ff106 	br	81f0 <__alt_data_end+0xfffe81f0>

0000822c <_write_r>:
    822c:	defffd04 	addi	sp,sp,-12
    8230:	2805883a 	mov	r2,r5
    8234:	dc000015 	stw	r16,0(sp)
    8238:	04000074 	movhi	r16,1
    823c:	dc400115 	stw	r17,4(sp)
    8240:	300b883a 	mov	r5,r6
    8244:	8412af04 	addi	r16,r16,19132
    8248:	2023883a 	mov	r17,r4
    824c:	380d883a 	mov	r6,r7
    8250:	1009883a 	mov	r4,r2
    8254:	dfc00215 	stw	ra,8(sp)
    8258:	80000015 	stw	zero,0(r16)
    825c:	000f6400 	call	f640 <write>
    8260:	00ffffc4 	movi	r3,-1
    8264:	10c00526 	beq	r2,r3,827c <_write_r+0x50>
    8268:	dfc00217 	ldw	ra,8(sp)
    826c:	dc400117 	ldw	r17,4(sp)
    8270:	dc000017 	ldw	r16,0(sp)
    8274:	dec00304 	addi	sp,sp,12
    8278:	f800283a 	ret
    827c:	80c00017 	ldw	r3,0(r16)
    8280:	183ff926 	beq	r3,zero,8268 <__alt_data_end+0xfffe8268>
    8284:	88c00015 	stw	r3,0(r17)
    8288:	003ff706 	br	8268 <__alt_data_end+0xfffe8268>

0000828c <__swsetup_r>:
    828c:	00800074 	movhi	r2,1
    8290:	defffd04 	addi	sp,sp,-12
    8294:	108be504 	addi	r2,r2,12180
    8298:	dc400115 	stw	r17,4(sp)
    829c:	2023883a 	mov	r17,r4
    82a0:	11000017 	ldw	r4,0(r2)
    82a4:	dc000015 	stw	r16,0(sp)
    82a8:	dfc00215 	stw	ra,8(sp)
    82ac:	2821883a 	mov	r16,r5
    82b0:	20000226 	beq	r4,zero,82bc <__swsetup_r+0x30>
    82b4:	20800e17 	ldw	r2,56(r4)
    82b8:	10003126 	beq	r2,zero,8380 <__swsetup_r+0xf4>
    82bc:	8080030b 	ldhu	r2,12(r16)
    82c0:	10c0020c 	andi	r3,r2,8
    82c4:	1009883a 	mov	r4,r2
    82c8:	18000f26 	beq	r3,zero,8308 <__swsetup_r+0x7c>
    82cc:	80c00417 	ldw	r3,16(r16)
    82d0:	18001526 	beq	r3,zero,8328 <__swsetup_r+0x9c>
    82d4:	1100004c 	andi	r4,r2,1
    82d8:	20001c1e 	bne	r4,zero,834c <__swsetup_r+0xc0>
    82dc:	1080008c 	andi	r2,r2,2
    82e0:	1000291e 	bne	r2,zero,8388 <__swsetup_r+0xfc>
    82e4:	80800517 	ldw	r2,20(r16)
    82e8:	80800215 	stw	r2,8(r16)
    82ec:	18001c26 	beq	r3,zero,8360 <__swsetup_r+0xd4>
    82f0:	0005883a 	mov	r2,zero
    82f4:	dfc00217 	ldw	ra,8(sp)
    82f8:	dc400117 	ldw	r17,4(sp)
    82fc:	dc000017 	ldw	r16,0(sp)
    8300:	dec00304 	addi	sp,sp,12
    8304:	f800283a 	ret
    8308:	2080040c 	andi	r2,r4,16
    830c:	10002e26 	beq	r2,zero,83c8 <__swsetup_r+0x13c>
    8310:	2080010c 	andi	r2,r4,4
    8314:	10001e1e 	bne	r2,zero,8390 <__swsetup_r+0x104>
    8318:	80c00417 	ldw	r3,16(r16)
    831c:	20800214 	ori	r2,r4,8
    8320:	8080030d 	sth	r2,12(r16)
    8324:	183feb1e 	bne	r3,zero,82d4 <__alt_data_end+0xfffe82d4>
    8328:	1100a00c 	andi	r4,r2,640
    832c:	01408004 	movi	r5,512
    8330:	217fe826 	beq	r4,r5,82d4 <__alt_data_end+0xfffe82d4>
    8334:	800b883a 	mov	r5,r16
    8338:	8809883a 	mov	r4,r17
    833c:	0004c880 	call	4c88 <__smakebuf_r>
    8340:	8080030b 	ldhu	r2,12(r16)
    8344:	80c00417 	ldw	r3,16(r16)
    8348:	003fe206 	br	82d4 <__alt_data_end+0xfffe82d4>
    834c:	80800517 	ldw	r2,20(r16)
    8350:	80000215 	stw	zero,8(r16)
    8354:	0085c83a 	sub	r2,zero,r2
    8358:	80800615 	stw	r2,24(r16)
    835c:	183fe41e 	bne	r3,zero,82f0 <__alt_data_end+0xfffe82f0>
    8360:	80c0030b 	ldhu	r3,12(r16)
    8364:	0005883a 	mov	r2,zero
    8368:	1900200c 	andi	r4,r3,128
    836c:	203fe126 	beq	r4,zero,82f4 <__alt_data_end+0xfffe82f4>
    8370:	18c01014 	ori	r3,r3,64
    8374:	80c0030d 	sth	r3,12(r16)
    8378:	00bfffc4 	movi	r2,-1
    837c:	003fdd06 	br	82f4 <__alt_data_end+0xfffe82f4>
    8380:	0003e240 	call	3e24 <__sinit>
    8384:	003fcd06 	br	82bc <__alt_data_end+0xfffe82bc>
    8388:	0005883a 	mov	r2,zero
    838c:	003fd606 	br	82e8 <__alt_data_end+0xfffe82e8>
    8390:	81400c17 	ldw	r5,48(r16)
    8394:	28000626 	beq	r5,zero,83b0 <__swsetup_r+0x124>
    8398:	80801004 	addi	r2,r16,64
    839c:	28800326 	beq	r5,r2,83ac <__swsetup_r+0x120>
    83a0:	8809883a 	mov	r4,r17
    83a4:	00043140 	call	4314 <_free_r>
    83a8:	8100030b 	ldhu	r4,12(r16)
    83ac:	80000c15 	stw	zero,48(r16)
    83b0:	80c00417 	ldw	r3,16(r16)
    83b4:	00bff6c4 	movi	r2,-37
    83b8:	1108703a 	and	r4,r2,r4
    83bc:	80000115 	stw	zero,4(r16)
    83c0:	80c00015 	stw	r3,0(r16)
    83c4:	003fd506 	br	831c <__alt_data_end+0xfffe831c>
    83c8:	00800244 	movi	r2,9
    83cc:	88800015 	stw	r2,0(r17)
    83d0:	20801014 	ori	r2,r4,64
    83d4:	8080030d 	sth	r2,12(r16)
    83d8:	00bfffc4 	movi	r2,-1
    83dc:	003fc506 	br	82f4 <__alt_data_end+0xfffe82f4>

000083e0 <_close_r>:
    83e0:	defffd04 	addi	sp,sp,-12
    83e4:	dc000015 	stw	r16,0(sp)
    83e8:	04000074 	movhi	r16,1
    83ec:	dc400115 	stw	r17,4(sp)
    83f0:	8412af04 	addi	r16,r16,19132
    83f4:	2023883a 	mov	r17,r4
    83f8:	2809883a 	mov	r4,r5
    83fc:	dfc00215 	stw	ra,8(sp)
    8400:	80000015 	stw	zero,0(r16)
    8404:	000eb300 	call	eb30 <close>
    8408:	00ffffc4 	movi	r3,-1
    840c:	10c00526 	beq	r2,r3,8424 <_close_r+0x44>
    8410:	dfc00217 	ldw	ra,8(sp)
    8414:	dc400117 	ldw	r17,4(sp)
    8418:	dc000017 	ldw	r16,0(sp)
    841c:	dec00304 	addi	sp,sp,12
    8420:	f800283a 	ret
    8424:	80c00017 	ldw	r3,0(r16)
    8428:	183ff926 	beq	r3,zero,8410 <__alt_data_end+0xfffe8410>
    842c:	88c00015 	stw	r3,0(r17)
    8430:	003ff706 	br	8410 <__alt_data_end+0xfffe8410>

00008434 <__call_exitprocs>:
    8434:	defff504 	addi	sp,sp,-44
    8438:	df000915 	stw	fp,36(sp)
    843c:	dd400615 	stw	r21,24(sp)
    8440:	dc800315 	stw	r18,12(sp)
    8444:	dfc00a15 	stw	ra,40(sp)
    8448:	ddc00815 	stw	r23,32(sp)
    844c:	dd800715 	stw	r22,28(sp)
    8450:	dd000515 	stw	r20,20(sp)
    8454:	dcc00415 	stw	r19,16(sp)
    8458:	dc400215 	stw	r17,8(sp)
    845c:	dc000115 	stw	r16,4(sp)
    8460:	d9000015 	stw	r4,0(sp)
    8464:	2839883a 	mov	fp,r5
    8468:	04800044 	movi	r18,1
    846c:	057fffc4 	movi	r21,-1
    8470:	00800074 	movhi	r2,1
    8474:	108be404 	addi	r2,r2,12176
    8478:	12000017 	ldw	r8,0(r2)
    847c:	45005217 	ldw	r20,328(r8)
    8480:	44c05204 	addi	r19,r8,328
    8484:	a0001c26 	beq	r20,zero,84f8 <__call_exitprocs+0xc4>
    8488:	a0800117 	ldw	r2,4(r20)
    848c:	15ffffc4 	addi	r23,r2,-1
    8490:	b8000d16 	blt	r23,zero,84c8 <__call_exitprocs+0x94>
    8494:	14000044 	addi	r16,r2,1
    8498:	8421883a 	add	r16,r16,r16
    849c:	8421883a 	add	r16,r16,r16
    84a0:	84402004 	addi	r17,r16,128
    84a4:	a463883a 	add	r17,r20,r17
    84a8:	a421883a 	add	r16,r20,r16
    84ac:	e0001e26 	beq	fp,zero,8528 <__call_exitprocs+0xf4>
    84b0:	80804017 	ldw	r2,256(r16)
    84b4:	e0801c26 	beq	fp,r2,8528 <__call_exitprocs+0xf4>
    84b8:	bdffffc4 	addi	r23,r23,-1
    84bc:	843fff04 	addi	r16,r16,-4
    84c0:	8c7fff04 	addi	r17,r17,-4
    84c4:	bd7ff91e 	bne	r23,r21,84ac <__alt_data_end+0xfffe84ac>
    84c8:	00800034 	movhi	r2,0
    84cc:	10800004 	addi	r2,r2,0
    84d0:	10000926 	beq	r2,zero,84f8 <__call_exitprocs+0xc4>
    84d4:	a0800117 	ldw	r2,4(r20)
    84d8:	1000301e 	bne	r2,zero,859c <__call_exitprocs+0x168>
    84dc:	a0800017 	ldw	r2,0(r20)
    84e0:	10003226 	beq	r2,zero,85ac <__call_exitprocs+0x178>
    84e4:	a009883a 	mov	r4,r20
    84e8:	98800015 	stw	r2,0(r19)
    84ec:	00000000 	call	0 <__reset>
    84f0:	9d000017 	ldw	r20,0(r19)
    84f4:	a03fe41e 	bne	r20,zero,8488 <__alt_data_end+0xfffe8488>
    84f8:	dfc00a17 	ldw	ra,40(sp)
    84fc:	df000917 	ldw	fp,36(sp)
    8500:	ddc00817 	ldw	r23,32(sp)
    8504:	dd800717 	ldw	r22,28(sp)
    8508:	dd400617 	ldw	r21,24(sp)
    850c:	dd000517 	ldw	r20,20(sp)
    8510:	dcc00417 	ldw	r19,16(sp)
    8514:	dc800317 	ldw	r18,12(sp)
    8518:	dc400217 	ldw	r17,8(sp)
    851c:	dc000117 	ldw	r16,4(sp)
    8520:	dec00b04 	addi	sp,sp,44
    8524:	f800283a 	ret
    8528:	a0800117 	ldw	r2,4(r20)
    852c:	80c00017 	ldw	r3,0(r16)
    8530:	10bfffc4 	addi	r2,r2,-1
    8534:	15c01426 	beq	r2,r23,8588 <__call_exitprocs+0x154>
    8538:	80000015 	stw	zero,0(r16)
    853c:	183fde26 	beq	r3,zero,84b8 <__alt_data_end+0xfffe84b8>
    8540:	95c8983a 	sll	r4,r18,r23
    8544:	a0806217 	ldw	r2,392(r20)
    8548:	a5800117 	ldw	r22,4(r20)
    854c:	2084703a 	and	r2,r4,r2
    8550:	10000b26 	beq	r2,zero,8580 <__call_exitprocs+0x14c>
    8554:	a0806317 	ldw	r2,396(r20)
    8558:	2088703a 	and	r4,r4,r2
    855c:	20000c1e 	bne	r4,zero,8590 <__call_exitprocs+0x15c>
    8560:	89400017 	ldw	r5,0(r17)
    8564:	d9000017 	ldw	r4,0(sp)
    8568:	183ee83a 	callr	r3
    856c:	a0800117 	ldw	r2,4(r20)
    8570:	15bfbf1e 	bne	r2,r22,8470 <__alt_data_end+0xfffe8470>
    8574:	98800017 	ldw	r2,0(r19)
    8578:	153fcf26 	beq	r2,r20,84b8 <__alt_data_end+0xfffe84b8>
    857c:	003fbc06 	br	8470 <__alt_data_end+0xfffe8470>
    8580:	183ee83a 	callr	r3
    8584:	003ff906 	br	856c <__alt_data_end+0xfffe856c>
    8588:	a5c00115 	stw	r23,4(r20)
    858c:	003feb06 	br	853c <__alt_data_end+0xfffe853c>
    8590:	89000017 	ldw	r4,0(r17)
    8594:	183ee83a 	callr	r3
    8598:	003ff406 	br	856c <__alt_data_end+0xfffe856c>
    859c:	a0800017 	ldw	r2,0(r20)
    85a0:	a027883a 	mov	r19,r20
    85a4:	1029883a 	mov	r20,r2
    85a8:	003fb606 	br	8484 <__alt_data_end+0xfffe8484>
    85ac:	0005883a 	mov	r2,zero
    85b0:	003ffb06 	br	85a0 <__alt_data_end+0xfffe85a0>

000085b4 <quorem>:
    85b4:	defff204 	addi	sp,sp,-56
    85b8:	ddc00b15 	stw	r23,44(sp)
    85bc:	20800417 	ldw	r2,16(r4)
    85c0:	2dc00417 	ldw	r23,16(r5)
    85c4:	dfc00d15 	stw	ra,52(sp)
    85c8:	df000c15 	stw	fp,48(sp)
    85cc:	dd800a15 	stw	r22,40(sp)
    85d0:	dd400915 	stw	r21,36(sp)
    85d4:	dd000815 	stw	r20,32(sp)
    85d8:	dcc00715 	stw	r19,28(sp)
    85dc:	dc800615 	stw	r18,24(sp)
    85e0:	dc400515 	stw	r17,20(sp)
    85e4:	dc000415 	stw	r16,16(sp)
    85e8:	15c07a16 	blt	r2,r23,87d4 <quorem+0x220>
    85ec:	bdffffc4 	addi	r23,r23,-1
    85f0:	bde9883a 	add	r20,r23,r23
    85f4:	28c00504 	addi	r3,r5,20
    85f8:	a529883a 	add	r20,r20,r20
    85fc:	1d39883a 	add	fp,r3,r20
    8600:	24c00504 	addi	r19,r4,20
    8604:	d9400215 	stw	r5,8(sp)
    8608:	9d29883a 	add	r20,r19,r20
    860c:	e1400017 	ldw	r5,0(fp)
    8610:	d9000015 	stw	r4,0(sp)
    8614:	a1000017 	ldw	r4,0(r20)
    8618:	29400044 	addi	r5,r5,1
    861c:	d8c00115 	stw	r3,4(sp)
    8620:	dd000315 	stw	r20,12(sp)
    8624:	00036240 	call	3624 <__udivsi3>
    8628:	1025883a 	mov	r18,r2
    862c:	10003026 	beq	r2,zero,86f0 <quorem+0x13c>
    8630:	dc400117 	ldw	r17,4(sp)
    8634:	9829883a 	mov	r20,r19
    8638:	002d883a 	mov	r22,zero
    863c:	0021883a 	mov	r16,zero
    8640:	8d400017 	ldw	r21,0(r17)
    8644:	900b883a 	mov	r5,r18
    8648:	8c400104 	addi	r17,r17,4
    864c:	a93fffcc 	andi	r4,r21,65535
    8650:	0000f040 	call	f04 <__mulsi3>
    8654:	a808d43a 	srli	r4,r21,16
    8658:	900b883a 	mov	r5,r18
    865c:	15ad883a 	add	r22,r2,r22
    8660:	0000f040 	call	f04 <__mulsi3>
    8664:	a1000017 	ldw	r4,0(r20)
    8668:	b00cd43a 	srli	r6,r22,16
    866c:	b0ffffcc 	andi	r3,r22,65535
    8670:	217fffcc 	andi	r5,r4,65535
    8674:	2c21883a 	add	r16,r5,r16
    8678:	80c7c83a 	sub	r3,r16,r3
    867c:	2008d43a 	srli	r4,r4,16
    8680:	1185883a 	add	r2,r2,r6
    8684:	1821d43a 	srai	r16,r3,16
    8688:	117fffcc 	andi	r5,r2,65535
    868c:	2149c83a 	sub	r4,r4,r5
    8690:	2421883a 	add	r16,r4,r16
    8694:	8008943a 	slli	r4,r16,16
    8698:	18ffffcc 	andi	r3,r3,65535
    869c:	102cd43a 	srli	r22,r2,16
    86a0:	20c8b03a 	or	r4,r4,r3
    86a4:	a1000015 	stw	r4,0(r20)
    86a8:	8021d43a 	srai	r16,r16,16
    86ac:	a5000104 	addi	r20,r20,4
    86b0:	e47fe32e 	bgeu	fp,r17,8640 <__alt_data_end+0xfffe8640>
    86b4:	d8c00317 	ldw	r3,12(sp)
    86b8:	18800017 	ldw	r2,0(r3)
    86bc:	10000c1e 	bne	r2,zero,86f0 <quorem+0x13c>
    86c0:	18bfff04 	addi	r2,r3,-4
    86c4:	9880082e 	bgeu	r19,r2,86e8 <quorem+0x134>
    86c8:	18ffff17 	ldw	r3,-4(r3)
    86cc:	18000326 	beq	r3,zero,86dc <quorem+0x128>
    86d0:	00000506 	br	86e8 <quorem+0x134>
    86d4:	10c00017 	ldw	r3,0(r2)
    86d8:	1800031e 	bne	r3,zero,86e8 <quorem+0x134>
    86dc:	10bfff04 	addi	r2,r2,-4
    86e0:	bdffffc4 	addi	r23,r23,-1
    86e4:	98bffb36 	bltu	r19,r2,86d4 <__alt_data_end+0xfffe86d4>
    86e8:	d8c00017 	ldw	r3,0(sp)
    86ec:	1dc00415 	stw	r23,16(r3)
    86f0:	d9400217 	ldw	r5,8(sp)
    86f4:	d9000017 	ldw	r4,0(sp)
    86f8:	000b12c0 	call	b12c <__mcmp>
    86fc:	10002816 	blt	r2,zero,87a0 <quorem+0x1ec>
    8700:	dc400117 	ldw	r17,4(sp)
    8704:	94800044 	addi	r18,r18,1
    8708:	980d883a 	mov	r6,r19
    870c:	0007883a 	mov	r3,zero
    8710:	31000017 	ldw	r4,0(r6)
    8714:	89400017 	ldw	r5,0(r17)
    8718:	31800104 	addi	r6,r6,4
    871c:	20bfffcc 	andi	r2,r4,65535
    8720:	10c7883a 	add	r3,r2,r3
    8724:	28bfffcc 	andi	r2,r5,65535
    8728:	1885c83a 	sub	r2,r3,r2
    872c:	280ad43a 	srli	r5,r5,16
    8730:	2008d43a 	srli	r4,r4,16
    8734:	1007d43a 	srai	r3,r2,16
    8738:	10bfffcc 	andi	r2,r2,65535
    873c:	2149c83a 	sub	r4,r4,r5
    8740:	20c9883a 	add	r4,r4,r3
    8744:	200a943a 	slli	r5,r4,16
    8748:	8c400104 	addi	r17,r17,4
    874c:	2007d43a 	srai	r3,r4,16
    8750:	2884b03a 	or	r2,r5,r2
    8754:	30bfff15 	stw	r2,-4(r6)
    8758:	e47fed2e 	bgeu	fp,r17,8710 <__alt_data_end+0xfffe8710>
    875c:	bdc5883a 	add	r2,r23,r23
    8760:	1085883a 	add	r2,r2,r2
    8764:	9887883a 	add	r3,r19,r2
    8768:	18800017 	ldw	r2,0(r3)
    876c:	10000c1e 	bne	r2,zero,87a0 <quorem+0x1ec>
    8770:	18bfff04 	addi	r2,r3,-4
    8774:	9880082e 	bgeu	r19,r2,8798 <quorem+0x1e4>
    8778:	18ffff17 	ldw	r3,-4(r3)
    877c:	18000326 	beq	r3,zero,878c <quorem+0x1d8>
    8780:	00000506 	br	8798 <quorem+0x1e4>
    8784:	10c00017 	ldw	r3,0(r2)
    8788:	1800031e 	bne	r3,zero,8798 <quorem+0x1e4>
    878c:	10bfff04 	addi	r2,r2,-4
    8790:	bdffffc4 	addi	r23,r23,-1
    8794:	98bffb36 	bltu	r19,r2,8784 <__alt_data_end+0xfffe8784>
    8798:	d8c00017 	ldw	r3,0(sp)
    879c:	1dc00415 	stw	r23,16(r3)
    87a0:	9005883a 	mov	r2,r18
    87a4:	dfc00d17 	ldw	ra,52(sp)
    87a8:	df000c17 	ldw	fp,48(sp)
    87ac:	ddc00b17 	ldw	r23,44(sp)
    87b0:	dd800a17 	ldw	r22,40(sp)
    87b4:	dd400917 	ldw	r21,36(sp)
    87b8:	dd000817 	ldw	r20,32(sp)
    87bc:	dcc00717 	ldw	r19,28(sp)
    87c0:	dc800617 	ldw	r18,24(sp)
    87c4:	dc400517 	ldw	r17,20(sp)
    87c8:	dc000417 	ldw	r16,16(sp)
    87cc:	dec00e04 	addi	sp,sp,56
    87d0:	f800283a 	ret
    87d4:	0005883a 	mov	r2,zero
    87d8:	003ff206 	br	87a4 <__alt_data_end+0xfffe87a4>

000087dc <_dtoa_r>:
    87dc:	20801017 	ldw	r2,64(r4)
    87e0:	deffde04 	addi	sp,sp,-136
    87e4:	df002015 	stw	fp,128(sp)
    87e8:	dcc01b15 	stw	r19,108(sp)
    87ec:	dc801a15 	stw	r18,104(sp)
    87f0:	dc401915 	stw	r17,100(sp)
    87f4:	dc001815 	stw	r16,96(sp)
    87f8:	dfc02115 	stw	ra,132(sp)
    87fc:	ddc01f15 	stw	r23,124(sp)
    8800:	dd801e15 	stw	r22,120(sp)
    8804:	dd401d15 	stw	r21,116(sp)
    8808:	dd001c15 	stw	r20,112(sp)
    880c:	d9c00315 	stw	r7,12(sp)
    8810:	2039883a 	mov	fp,r4
    8814:	3023883a 	mov	r17,r6
    8818:	2825883a 	mov	r18,r5
    881c:	dc002417 	ldw	r16,144(sp)
    8820:	3027883a 	mov	r19,r6
    8824:	10000826 	beq	r2,zero,8848 <_dtoa_r+0x6c>
    8828:	21801117 	ldw	r6,68(r4)
    882c:	00c00044 	movi	r3,1
    8830:	100b883a 	mov	r5,r2
    8834:	1986983a 	sll	r3,r3,r6
    8838:	11800115 	stw	r6,4(r2)
    883c:	10c00215 	stw	r3,8(r2)
    8840:	000a8500 	call	a850 <_Bfree>
    8844:	e0001015 	stw	zero,64(fp)
    8848:	88002e16 	blt	r17,zero,8904 <_dtoa_r+0x128>
    884c:	80000015 	stw	zero,0(r16)
    8850:	889ffc2c 	andhi	r2,r17,32752
    8854:	00dffc34 	movhi	r3,32752
    8858:	10c01c26 	beq	r2,r3,88cc <_dtoa_r+0xf0>
    885c:	000d883a 	mov	r6,zero
    8860:	000f883a 	mov	r7,zero
    8864:	9009883a 	mov	r4,r18
    8868:	980b883a 	mov	r5,r19
    886c:	000e8500 	call	e850 <__eqdf2>
    8870:	10002b1e 	bne	r2,zero,8920 <_dtoa_r+0x144>
    8874:	d9c02317 	ldw	r7,140(sp)
    8878:	00800044 	movi	r2,1
    887c:	38800015 	stw	r2,0(r7)
    8880:	d8802517 	ldw	r2,148(sp)
    8884:	10019e26 	beq	r2,zero,8f00 <_dtoa_r+0x724>
    8888:	d8c02517 	ldw	r3,148(sp)
    888c:	00800074 	movhi	r2,1
    8890:	1084cb44 	addi	r2,r2,4909
    8894:	18800015 	stw	r2,0(r3)
    8898:	10bfffc4 	addi	r2,r2,-1
    889c:	dfc02117 	ldw	ra,132(sp)
    88a0:	df002017 	ldw	fp,128(sp)
    88a4:	ddc01f17 	ldw	r23,124(sp)
    88a8:	dd801e17 	ldw	r22,120(sp)
    88ac:	dd401d17 	ldw	r21,116(sp)
    88b0:	dd001c17 	ldw	r20,112(sp)
    88b4:	dcc01b17 	ldw	r19,108(sp)
    88b8:	dc801a17 	ldw	r18,104(sp)
    88bc:	dc401917 	ldw	r17,100(sp)
    88c0:	dc001817 	ldw	r16,96(sp)
    88c4:	dec02204 	addi	sp,sp,136
    88c8:	f800283a 	ret
    88cc:	d8c02317 	ldw	r3,140(sp)
    88d0:	0089c3c4 	movi	r2,9999
    88d4:	18800015 	stw	r2,0(r3)
    88d8:	90017726 	beq	r18,zero,8eb8 <_dtoa_r+0x6dc>
    88dc:	00800074 	movhi	r2,1
    88e0:	1084d704 	addi	r2,r2,4956
    88e4:	d9002517 	ldw	r4,148(sp)
    88e8:	203fec26 	beq	r4,zero,889c <__alt_data_end+0xfffe889c>
    88ec:	10c000c7 	ldb	r3,3(r2)
    88f0:	1801781e 	bne	r3,zero,8ed4 <_dtoa_r+0x6f8>
    88f4:	10c000c4 	addi	r3,r2,3
    88f8:	d9802517 	ldw	r6,148(sp)
    88fc:	30c00015 	stw	r3,0(r6)
    8900:	003fe606 	br	889c <__alt_data_end+0xfffe889c>
    8904:	04e00034 	movhi	r19,32768
    8908:	9cffffc4 	addi	r19,r19,-1
    890c:	00800044 	movi	r2,1
    8910:	8ce6703a 	and	r19,r17,r19
    8914:	80800015 	stw	r2,0(r16)
    8918:	9823883a 	mov	r17,r19
    891c:	003fcc06 	br	8850 <__alt_data_end+0xfffe8850>
    8920:	d8800204 	addi	r2,sp,8
    8924:	d8800015 	stw	r2,0(sp)
    8928:	d9c00104 	addi	r7,sp,4
    892c:	900b883a 	mov	r5,r18
    8930:	980d883a 	mov	r6,r19
    8934:	e009883a 	mov	r4,fp
    8938:	8820d53a 	srli	r16,r17,20
    893c:	000b4f80 	call	b4f8 <__d2b>
    8940:	d8800915 	stw	r2,36(sp)
    8944:	8001651e 	bne	r16,zero,8edc <_dtoa_r+0x700>
    8948:	dd800217 	ldw	r22,8(sp)
    894c:	dc000117 	ldw	r16,4(sp)
    8950:	00800804 	movi	r2,32
    8954:	b421883a 	add	r16,r22,r16
    8958:	80c10c84 	addi	r3,r16,1074
    895c:	10c2d10e 	bge	r2,r3,94a4 <_dtoa_r+0xcc8>
    8960:	00801004 	movi	r2,64
    8964:	81010484 	addi	r4,r16,1042
    8968:	10c7c83a 	sub	r3,r2,r3
    896c:	9108d83a 	srl	r4,r18,r4
    8970:	88e2983a 	sll	r17,r17,r3
    8974:	2448b03a 	or	r4,r4,r17
    8978:	000ea4c0 	call	ea4c <__floatunsidf>
    897c:	017f8434 	movhi	r5,65040
    8980:	01800044 	movi	r6,1
    8984:	1009883a 	mov	r4,r2
    8988:	194b883a 	add	r5,r3,r5
    898c:	843fffc4 	addi	r16,r16,-1
    8990:	d9801115 	stw	r6,68(sp)
    8994:	000d883a 	mov	r6,zero
    8998:	01cffe34 	movhi	r7,16376
    899c:	0002af00 	call	2af0 <__subdf3>
    89a0:	0198dbf4 	movhi	r6,25455
    89a4:	01cff4f4 	movhi	r7,16339
    89a8:	3190d844 	addi	r6,r6,17249
    89ac:	39e1e9c4 	addi	r7,r7,-30809
    89b0:	1009883a 	mov	r4,r2
    89b4:	180b883a 	mov	r5,r3
    89b8:	00022840 	call	2284 <__muldf3>
    89bc:	01a2d874 	movhi	r6,35681
    89c0:	01cff1f4 	movhi	r7,16327
    89c4:	31b22cc4 	addi	r6,r6,-14157
    89c8:	39e28a04 	addi	r7,r7,-30168
    89cc:	180b883a 	mov	r5,r3
    89d0:	1009883a 	mov	r4,r2
    89d4:	0000f2c0 	call	f2c <__adddf3>
    89d8:	8009883a 	mov	r4,r16
    89dc:	1029883a 	mov	r20,r2
    89e0:	1823883a 	mov	r17,r3
    89e4:	00033ec0 	call	33ec <__floatsidf>
    89e8:	019427f4 	movhi	r6,20639
    89ec:	01cff4f4 	movhi	r7,16339
    89f0:	319e7ec4 	addi	r6,r6,31227
    89f4:	39d104c4 	addi	r7,r7,17427
    89f8:	1009883a 	mov	r4,r2
    89fc:	180b883a 	mov	r5,r3
    8a00:	00022840 	call	2284 <__muldf3>
    8a04:	100d883a 	mov	r6,r2
    8a08:	180f883a 	mov	r7,r3
    8a0c:	a009883a 	mov	r4,r20
    8a10:	880b883a 	mov	r5,r17
    8a14:	0000f2c0 	call	f2c <__adddf3>
    8a18:	1009883a 	mov	r4,r2
    8a1c:	180b883a 	mov	r5,r3
    8a20:	1029883a 	mov	r20,r2
    8a24:	1823883a 	mov	r17,r3
    8a28:	000e9cc0 	call	e9cc <__fixdfsi>
    8a2c:	000d883a 	mov	r6,zero
    8a30:	000f883a 	mov	r7,zero
    8a34:	a009883a 	mov	r4,r20
    8a38:	880b883a 	mov	r5,r17
    8a3c:	d8800515 	stw	r2,20(sp)
    8a40:	000e8d80 	call	e8d8 <__ledf2>
    8a44:	10028716 	blt	r2,zero,9464 <_dtoa_r+0xc88>
    8a48:	d8c00517 	ldw	r3,20(sp)
    8a4c:	00800584 	movi	r2,22
    8a50:	10c27536 	bltu	r2,r3,9428 <_dtoa_r+0xc4c>
    8a54:	180490fa 	slli	r2,r3,3
    8a58:	00c00074 	movhi	r3,1
    8a5c:	18c4f204 	addi	r3,r3,5064
    8a60:	1885883a 	add	r2,r3,r2
    8a64:	11000017 	ldw	r4,0(r2)
    8a68:	11400117 	ldw	r5,4(r2)
    8a6c:	900d883a 	mov	r6,r18
    8a70:	980f883a 	mov	r7,r19
    8a74:	00021a80 	call	21a8 <__gedf2>
    8a78:	00828d0e 	bge	zero,r2,94b0 <_dtoa_r+0xcd4>
    8a7c:	d9000517 	ldw	r4,20(sp)
    8a80:	d8000e15 	stw	zero,56(sp)
    8a84:	213fffc4 	addi	r4,r4,-1
    8a88:	d9000515 	stw	r4,20(sp)
    8a8c:	b42dc83a 	sub	r22,r22,r16
    8a90:	b5bfffc4 	addi	r22,r22,-1
    8a94:	b0026f16 	blt	r22,zero,9454 <_dtoa_r+0xc78>
    8a98:	d8000815 	stw	zero,32(sp)
    8a9c:	d9c00517 	ldw	r7,20(sp)
    8aa0:	38026416 	blt	r7,zero,9434 <_dtoa_r+0xc58>
    8aa4:	b1ed883a 	add	r22,r22,r7
    8aa8:	d9c00d15 	stw	r7,52(sp)
    8aac:	d8000a15 	stw	zero,40(sp)
    8ab0:	d9800317 	ldw	r6,12(sp)
    8ab4:	00800244 	movi	r2,9
    8ab8:	11811436 	bltu	r2,r6,8f0c <_dtoa_r+0x730>
    8abc:	00800144 	movi	r2,5
    8ac0:	1184e10e 	bge	r2,r6,9e48 <_dtoa_r+0x166c>
    8ac4:	31bfff04 	addi	r6,r6,-4
    8ac8:	d9800315 	stw	r6,12(sp)
    8acc:	0023883a 	mov	r17,zero
    8ad0:	d9800317 	ldw	r6,12(sp)
    8ad4:	008000c4 	movi	r2,3
    8ad8:	30836726 	beq	r6,r2,9878 <_dtoa_r+0x109c>
    8adc:	1183410e 	bge	r2,r6,97e4 <_dtoa_r+0x1008>
    8ae0:	d9c00317 	ldw	r7,12(sp)
    8ae4:	00800104 	movi	r2,4
    8ae8:	38827c26 	beq	r7,r2,94dc <_dtoa_r+0xd00>
    8aec:	00800144 	movi	r2,5
    8af0:	3884c41e 	bne	r7,r2,9e04 <_dtoa_r+0x1628>
    8af4:	00800044 	movi	r2,1
    8af8:	d8800b15 	stw	r2,44(sp)
    8afc:	d8c00517 	ldw	r3,20(sp)
    8b00:	d9002217 	ldw	r4,136(sp)
    8b04:	1907883a 	add	r3,r3,r4
    8b08:	19800044 	addi	r6,r3,1
    8b0c:	d8c00c15 	stw	r3,48(sp)
    8b10:	d9800615 	stw	r6,24(sp)
    8b14:	0183a40e 	bge	zero,r6,99a8 <_dtoa_r+0x11cc>
    8b18:	d9800617 	ldw	r6,24(sp)
    8b1c:	3021883a 	mov	r16,r6
    8b20:	e0001115 	stw	zero,68(fp)
    8b24:	008005c4 	movi	r2,23
    8b28:	1184c92e 	bgeu	r2,r6,9e50 <_dtoa_r+0x1674>
    8b2c:	00c00044 	movi	r3,1
    8b30:	00800104 	movi	r2,4
    8b34:	1085883a 	add	r2,r2,r2
    8b38:	11000504 	addi	r4,r2,20
    8b3c:	180b883a 	mov	r5,r3
    8b40:	18c00044 	addi	r3,r3,1
    8b44:	313ffb2e 	bgeu	r6,r4,8b34 <__alt_data_end+0xfffe8b34>
    8b48:	e1401115 	stw	r5,68(fp)
    8b4c:	e009883a 	mov	r4,fp
    8b50:	000a7a80 	call	a7a8 <_Balloc>
    8b54:	d8800715 	stw	r2,28(sp)
    8b58:	e0801015 	stw	r2,64(fp)
    8b5c:	00800384 	movi	r2,14
    8b60:	1400f736 	bltu	r2,r16,8f40 <_dtoa_r+0x764>
    8b64:	8800f626 	beq	r17,zero,8f40 <_dtoa_r+0x764>
    8b68:	d9c00517 	ldw	r7,20(sp)
    8b6c:	01c39a0e 	bge	zero,r7,99d8 <_dtoa_r+0x11fc>
    8b70:	388003cc 	andi	r2,r7,15
    8b74:	100490fa 	slli	r2,r2,3
    8b78:	382bd13a 	srai	r21,r7,4
    8b7c:	00c00074 	movhi	r3,1
    8b80:	18c4f204 	addi	r3,r3,5064
    8b84:	1885883a 	add	r2,r3,r2
    8b88:	a8c0040c 	andi	r3,r21,16
    8b8c:	12400017 	ldw	r9,0(r2)
    8b90:	12000117 	ldw	r8,4(r2)
    8b94:	18037926 	beq	r3,zero,997c <_dtoa_r+0x11a0>
    8b98:	00800074 	movhi	r2,1
    8b9c:	1084e804 	addi	r2,r2,5024
    8ba0:	11800817 	ldw	r6,32(r2)
    8ba4:	11c00917 	ldw	r7,36(r2)
    8ba8:	9009883a 	mov	r4,r18
    8bac:	980b883a 	mov	r5,r19
    8bb0:	da001715 	stw	r8,92(sp)
    8bb4:	da401615 	stw	r9,88(sp)
    8bb8:	00017d80 	call	17d8 <__divdf3>
    8bbc:	da001717 	ldw	r8,92(sp)
    8bc0:	da401617 	ldw	r9,88(sp)
    8bc4:	ad4003cc 	andi	r21,r21,15
    8bc8:	040000c4 	movi	r16,3
    8bcc:	1023883a 	mov	r17,r2
    8bd0:	1829883a 	mov	r20,r3
    8bd4:	a8001126 	beq	r21,zero,8c1c <_dtoa_r+0x440>
    8bd8:	05c00074 	movhi	r23,1
    8bdc:	bdc4e804 	addi	r23,r23,5024
    8be0:	4805883a 	mov	r2,r9
    8be4:	4007883a 	mov	r3,r8
    8be8:	a980004c 	andi	r6,r21,1
    8bec:	1009883a 	mov	r4,r2
    8bf0:	a82bd07a 	srai	r21,r21,1
    8bf4:	180b883a 	mov	r5,r3
    8bf8:	30000426 	beq	r6,zero,8c0c <_dtoa_r+0x430>
    8bfc:	b9800017 	ldw	r6,0(r23)
    8c00:	b9c00117 	ldw	r7,4(r23)
    8c04:	84000044 	addi	r16,r16,1
    8c08:	00022840 	call	2284 <__muldf3>
    8c0c:	bdc00204 	addi	r23,r23,8
    8c10:	a83ff51e 	bne	r21,zero,8be8 <__alt_data_end+0xfffe8be8>
    8c14:	1013883a 	mov	r9,r2
    8c18:	1811883a 	mov	r8,r3
    8c1c:	480d883a 	mov	r6,r9
    8c20:	400f883a 	mov	r7,r8
    8c24:	8809883a 	mov	r4,r17
    8c28:	a00b883a 	mov	r5,r20
    8c2c:	00017d80 	call	17d8 <__divdf3>
    8c30:	d8800f15 	stw	r2,60(sp)
    8c34:	d8c01015 	stw	r3,64(sp)
    8c38:	d8c00e17 	ldw	r3,56(sp)
    8c3c:	18000626 	beq	r3,zero,8c58 <_dtoa_r+0x47c>
    8c40:	d9000f17 	ldw	r4,60(sp)
    8c44:	d9401017 	ldw	r5,64(sp)
    8c48:	000d883a 	mov	r6,zero
    8c4c:	01cffc34 	movhi	r7,16368
    8c50:	000e8d80 	call	e8d8 <__ledf2>
    8c54:	10040b16 	blt	r2,zero,9c84 <_dtoa_r+0x14a8>
    8c58:	8009883a 	mov	r4,r16
    8c5c:	00033ec0 	call	33ec <__floatsidf>
    8c60:	d9800f17 	ldw	r6,60(sp)
    8c64:	d9c01017 	ldw	r7,64(sp)
    8c68:	1009883a 	mov	r4,r2
    8c6c:	180b883a 	mov	r5,r3
    8c70:	00022840 	call	2284 <__muldf3>
    8c74:	000d883a 	mov	r6,zero
    8c78:	01d00734 	movhi	r7,16412
    8c7c:	1009883a 	mov	r4,r2
    8c80:	180b883a 	mov	r5,r3
    8c84:	0000f2c0 	call	f2c <__adddf3>
    8c88:	1021883a 	mov	r16,r2
    8c8c:	d8800617 	ldw	r2,24(sp)
    8c90:	047f3034 	movhi	r17,64704
    8c94:	1c63883a 	add	r17,r3,r17
    8c98:	10031826 	beq	r2,zero,98fc <_dtoa_r+0x1120>
    8c9c:	d8c00517 	ldw	r3,20(sp)
    8ca0:	db000617 	ldw	r12,24(sp)
    8ca4:	d8c01315 	stw	r3,76(sp)
    8ca8:	d9000b17 	ldw	r4,44(sp)
    8cac:	20038f26 	beq	r4,zero,9aec <_dtoa_r+0x1310>
    8cb0:	60bfffc4 	addi	r2,r12,-1
    8cb4:	100490fa 	slli	r2,r2,3
    8cb8:	00c00074 	movhi	r3,1
    8cbc:	18c4f204 	addi	r3,r3,5064
    8cc0:	1885883a 	add	r2,r3,r2
    8cc4:	11800017 	ldw	r6,0(r2)
    8cc8:	11c00117 	ldw	r7,4(r2)
    8ccc:	d8800717 	ldw	r2,28(sp)
    8cd0:	0009883a 	mov	r4,zero
    8cd4:	014ff834 	movhi	r5,16352
    8cd8:	db001615 	stw	r12,88(sp)
    8cdc:	15c00044 	addi	r23,r2,1
    8ce0:	00017d80 	call	17d8 <__divdf3>
    8ce4:	800d883a 	mov	r6,r16
    8ce8:	880f883a 	mov	r7,r17
    8cec:	1009883a 	mov	r4,r2
    8cf0:	180b883a 	mov	r5,r3
    8cf4:	0002af00 	call	2af0 <__subdf3>
    8cf8:	d9401017 	ldw	r5,64(sp)
    8cfc:	d9000f17 	ldw	r4,60(sp)
    8d00:	102b883a 	mov	r21,r2
    8d04:	d8c01215 	stw	r3,72(sp)
    8d08:	000e9cc0 	call	e9cc <__fixdfsi>
    8d0c:	1009883a 	mov	r4,r2
    8d10:	1029883a 	mov	r20,r2
    8d14:	00033ec0 	call	33ec <__floatsidf>
    8d18:	d9000f17 	ldw	r4,60(sp)
    8d1c:	d9401017 	ldw	r5,64(sp)
    8d20:	100d883a 	mov	r6,r2
    8d24:	180f883a 	mov	r7,r3
    8d28:	0002af00 	call	2af0 <__subdf3>
    8d2c:	1823883a 	mov	r17,r3
    8d30:	d8c00717 	ldw	r3,28(sp)
    8d34:	d9401217 	ldw	r5,72(sp)
    8d38:	a2000c04 	addi	r8,r20,48
    8d3c:	1021883a 	mov	r16,r2
    8d40:	1a000005 	stb	r8,0(r3)
    8d44:	800d883a 	mov	r6,r16
    8d48:	880f883a 	mov	r7,r17
    8d4c:	a809883a 	mov	r4,r21
    8d50:	4029883a 	mov	r20,r8
    8d54:	00021a80 	call	21a8 <__gedf2>
    8d58:	00841d16 	blt	zero,r2,9dd0 <_dtoa_r+0x15f4>
    8d5c:	800d883a 	mov	r6,r16
    8d60:	880f883a 	mov	r7,r17
    8d64:	0009883a 	mov	r4,zero
    8d68:	014ffc34 	movhi	r5,16368
    8d6c:	0002af00 	call	2af0 <__subdf3>
    8d70:	d9401217 	ldw	r5,72(sp)
    8d74:	100d883a 	mov	r6,r2
    8d78:	180f883a 	mov	r7,r3
    8d7c:	a809883a 	mov	r4,r21
    8d80:	00021a80 	call	21a8 <__gedf2>
    8d84:	db001617 	ldw	r12,88(sp)
    8d88:	00840e16 	blt	zero,r2,9dc4 <_dtoa_r+0x15e8>
    8d8c:	00800044 	movi	r2,1
    8d90:	13006b0e 	bge	r2,r12,8f40 <_dtoa_r+0x764>
    8d94:	d9000717 	ldw	r4,28(sp)
    8d98:	dd800f15 	stw	r22,60(sp)
    8d9c:	dcc01015 	stw	r19,64(sp)
    8da0:	2319883a 	add	r12,r4,r12
    8da4:	dcc01217 	ldw	r19,72(sp)
    8da8:	602d883a 	mov	r22,r12
    8dac:	dc801215 	stw	r18,72(sp)
    8db0:	b825883a 	mov	r18,r23
    8db4:	00000906 	br	8ddc <_dtoa_r+0x600>
    8db8:	0002af00 	call	2af0 <__subdf3>
    8dbc:	a80d883a 	mov	r6,r21
    8dc0:	980f883a 	mov	r7,r19
    8dc4:	1009883a 	mov	r4,r2
    8dc8:	180b883a 	mov	r5,r3
    8dcc:	000e8d80 	call	e8d8 <__ledf2>
    8dd0:	1003e816 	blt	r2,zero,9d74 <_dtoa_r+0x1598>
    8dd4:	b825883a 	mov	r18,r23
    8dd8:	bd83e926 	beq	r23,r22,9d80 <_dtoa_r+0x15a4>
    8ddc:	a809883a 	mov	r4,r21
    8de0:	980b883a 	mov	r5,r19
    8de4:	000d883a 	mov	r6,zero
    8de8:	01d00934 	movhi	r7,16420
    8dec:	00022840 	call	2284 <__muldf3>
    8df0:	000d883a 	mov	r6,zero
    8df4:	01d00934 	movhi	r7,16420
    8df8:	8009883a 	mov	r4,r16
    8dfc:	880b883a 	mov	r5,r17
    8e00:	102b883a 	mov	r21,r2
    8e04:	1827883a 	mov	r19,r3
    8e08:	00022840 	call	2284 <__muldf3>
    8e0c:	180b883a 	mov	r5,r3
    8e10:	1009883a 	mov	r4,r2
    8e14:	1821883a 	mov	r16,r3
    8e18:	1023883a 	mov	r17,r2
    8e1c:	000e9cc0 	call	e9cc <__fixdfsi>
    8e20:	1009883a 	mov	r4,r2
    8e24:	1029883a 	mov	r20,r2
    8e28:	00033ec0 	call	33ec <__floatsidf>
    8e2c:	8809883a 	mov	r4,r17
    8e30:	800b883a 	mov	r5,r16
    8e34:	100d883a 	mov	r6,r2
    8e38:	180f883a 	mov	r7,r3
    8e3c:	0002af00 	call	2af0 <__subdf3>
    8e40:	a5000c04 	addi	r20,r20,48
    8e44:	a80d883a 	mov	r6,r21
    8e48:	980f883a 	mov	r7,r19
    8e4c:	1009883a 	mov	r4,r2
    8e50:	180b883a 	mov	r5,r3
    8e54:	95000005 	stb	r20,0(r18)
    8e58:	1021883a 	mov	r16,r2
    8e5c:	1823883a 	mov	r17,r3
    8e60:	000e8d80 	call	e8d8 <__ledf2>
    8e64:	bdc00044 	addi	r23,r23,1
    8e68:	800d883a 	mov	r6,r16
    8e6c:	880f883a 	mov	r7,r17
    8e70:	0009883a 	mov	r4,zero
    8e74:	014ffc34 	movhi	r5,16368
    8e78:	103fcf0e 	bge	r2,zero,8db8 <__alt_data_end+0xfffe8db8>
    8e7c:	d8c01317 	ldw	r3,76(sp)
    8e80:	d8c00515 	stw	r3,20(sp)
    8e84:	d9400917 	ldw	r5,36(sp)
    8e88:	e009883a 	mov	r4,fp
    8e8c:	000a8500 	call	a850 <_Bfree>
    8e90:	d9000517 	ldw	r4,20(sp)
    8e94:	d9802317 	ldw	r6,140(sp)
    8e98:	d9c02517 	ldw	r7,148(sp)
    8e9c:	b8000005 	stb	zero,0(r23)
    8ea0:	20800044 	addi	r2,r4,1
    8ea4:	30800015 	stw	r2,0(r6)
    8ea8:	3802aa26 	beq	r7,zero,9954 <_dtoa_r+0x1178>
    8eac:	3dc00015 	stw	r23,0(r7)
    8eb0:	d8800717 	ldw	r2,28(sp)
    8eb4:	003e7906 	br	889c <__alt_data_end+0xfffe889c>
    8eb8:	00800434 	movhi	r2,16
    8ebc:	10bfffc4 	addi	r2,r2,-1
    8ec0:	88a2703a 	and	r17,r17,r2
    8ec4:	883e851e 	bne	r17,zero,88dc <__alt_data_end+0xfffe88dc>
    8ec8:	00800074 	movhi	r2,1
    8ecc:	1084d404 	addi	r2,r2,4944
    8ed0:	003e8406 	br	88e4 <__alt_data_end+0xfffe88e4>
    8ed4:	10c00204 	addi	r3,r2,8
    8ed8:	003e8706 	br	88f8 <__alt_data_end+0xfffe88f8>
    8edc:	01400434 	movhi	r5,16
    8ee0:	297fffc4 	addi	r5,r5,-1
    8ee4:	994a703a 	and	r5,r19,r5
    8ee8:	9009883a 	mov	r4,r18
    8eec:	843f0044 	addi	r16,r16,-1023
    8ef0:	294ffc34 	orhi	r5,r5,16368
    8ef4:	dd800217 	ldw	r22,8(sp)
    8ef8:	d8001115 	stw	zero,68(sp)
    8efc:	003ea506 	br	8994 <__alt_data_end+0xfffe8994>
    8f00:	00800074 	movhi	r2,1
    8f04:	1084cb04 	addi	r2,r2,4908
    8f08:	003e6406 	br	889c <__alt_data_end+0xfffe889c>
    8f0c:	e0001115 	stw	zero,68(fp)
    8f10:	000b883a 	mov	r5,zero
    8f14:	e009883a 	mov	r4,fp
    8f18:	000a7a80 	call	a7a8 <_Balloc>
    8f1c:	01bfffc4 	movi	r6,-1
    8f20:	01c00044 	movi	r7,1
    8f24:	d8800715 	stw	r2,28(sp)
    8f28:	d9800c15 	stw	r6,48(sp)
    8f2c:	e0801015 	stw	r2,64(fp)
    8f30:	d8000315 	stw	zero,12(sp)
    8f34:	d9c00b15 	stw	r7,44(sp)
    8f38:	d9800615 	stw	r6,24(sp)
    8f3c:	d8002215 	stw	zero,136(sp)
    8f40:	d8800117 	ldw	r2,4(sp)
    8f44:	10008916 	blt	r2,zero,916c <_dtoa_r+0x990>
    8f48:	d9000517 	ldw	r4,20(sp)
    8f4c:	00c00384 	movi	r3,14
    8f50:	19008616 	blt	r3,r4,916c <_dtoa_r+0x990>
    8f54:	200490fa 	slli	r2,r4,3
    8f58:	00c00074 	movhi	r3,1
    8f5c:	d9802217 	ldw	r6,136(sp)
    8f60:	18c4f204 	addi	r3,r3,5064
    8f64:	1885883a 	add	r2,r3,r2
    8f68:	14000017 	ldw	r16,0(r2)
    8f6c:	14400117 	ldw	r17,4(r2)
    8f70:	30016316 	blt	r6,zero,9500 <_dtoa_r+0xd24>
    8f74:	800d883a 	mov	r6,r16
    8f78:	880f883a 	mov	r7,r17
    8f7c:	9009883a 	mov	r4,r18
    8f80:	980b883a 	mov	r5,r19
    8f84:	00017d80 	call	17d8 <__divdf3>
    8f88:	180b883a 	mov	r5,r3
    8f8c:	1009883a 	mov	r4,r2
    8f90:	000e9cc0 	call	e9cc <__fixdfsi>
    8f94:	1009883a 	mov	r4,r2
    8f98:	102b883a 	mov	r21,r2
    8f9c:	00033ec0 	call	33ec <__floatsidf>
    8fa0:	800d883a 	mov	r6,r16
    8fa4:	880f883a 	mov	r7,r17
    8fa8:	1009883a 	mov	r4,r2
    8fac:	180b883a 	mov	r5,r3
    8fb0:	00022840 	call	2284 <__muldf3>
    8fb4:	100d883a 	mov	r6,r2
    8fb8:	180f883a 	mov	r7,r3
    8fbc:	9009883a 	mov	r4,r18
    8fc0:	980b883a 	mov	r5,r19
    8fc4:	0002af00 	call	2af0 <__subdf3>
    8fc8:	d9c00717 	ldw	r7,28(sp)
    8fcc:	1009883a 	mov	r4,r2
    8fd0:	a8800c04 	addi	r2,r21,48
    8fd4:	38800005 	stb	r2,0(r7)
    8fd8:	3dc00044 	addi	r23,r7,1
    8fdc:	d9c00617 	ldw	r7,24(sp)
    8fe0:	01800044 	movi	r6,1
    8fe4:	180b883a 	mov	r5,r3
    8fe8:	2005883a 	mov	r2,r4
    8fec:	39803826 	beq	r7,r6,90d0 <_dtoa_r+0x8f4>
    8ff0:	000d883a 	mov	r6,zero
    8ff4:	01d00934 	movhi	r7,16420
    8ff8:	00022840 	call	2284 <__muldf3>
    8ffc:	000d883a 	mov	r6,zero
    9000:	000f883a 	mov	r7,zero
    9004:	1009883a 	mov	r4,r2
    9008:	180b883a 	mov	r5,r3
    900c:	1025883a 	mov	r18,r2
    9010:	1827883a 	mov	r19,r3
    9014:	000e8500 	call	e850 <__eqdf2>
    9018:	103f9a26 	beq	r2,zero,8e84 <__alt_data_end+0xfffe8e84>
    901c:	d9c00617 	ldw	r7,24(sp)
    9020:	d8c00717 	ldw	r3,28(sp)
    9024:	b829883a 	mov	r20,r23
    9028:	38bfffc4 	addi	r2,r7,-1
    902c:	18ad883a 	add	r22,r3,r2
    9030:	00000a06 	br	905c <_dtoa_r+0x880>
    9034:	00022840 	call	2284 <__muldf3>
    9038:	000d883a 	mov	r6,zero
    903c:	000f883a 	mov	r7,zero
    9040:	1009883a 	mov	r4,r2
    9044:	180b883a 	mov	r5,r3
    9048:	1025883a 	mov	r18,r2
    904c:	1827883a 	mov	r19,r3
    9050:	b829883a 	mov	r20,r23
    9054:	000e8500 	call	e850 <__eqdf2>
    9058:	103f8a26 	beq	r2,zero,8e84 <__alt_data_end+0xfffe8e84>
    905c:	800d883a 	mov	r6,r16
    9060:	880f883a 	mov	r7,r17
    9064:	9009883a 	mov	r4,r18
    9068:	980b883a 	mov	r5,r19
    906c:	00017d80 	call	17d8 <__divdf3>
    9070:	180b883a 	mov	r5,r3
    9074:	1009883a 	mov	r4,r2
    9078:	000e9cc0 	call	e9cc <__fixdfsi>
    907c:	1009883a 	mov	r4,r2
    9080:	102b883a 	mov	r21,r2
    9084:	00033ec0 	call	33ec <__floatsidf>
    9088:	800d883a 	mov	r6,r16
    908c:	880f883a 	mov	r7,r17
    9090:	1009883a 	mov	r4,r2
    9094:	180b883a 	mov	r5,r3
    9098:	00022840 	call	2284 <__muldf3>
    909c:	100d883a 	mov	r6,r2
    90a0:	180f883a 	mov	r7,r3
    90a4:	9009883a 	mov	r4,r18
    90a8:	980b883a 	mov	r5,r19
    90ac:	0002af00 	call	2af0 <__subdf3>
    90b0:	aa000c04 	addi	r8,r21,48
    90b4:	a2000005 	stb	r8,0(r20)
    90b8:	000d883a 	mov	r6,zero
    90bc:	01d00934 	movhi	r7,16420
    90c0:	1009883a 	mov	r4,r2
    90c4:	180b883a 	mov	r5,r3
    90c8:	a5c00044 	addi	r23,r20,1
    90cc:	b53fd91e 	bne	r22,r20,9034 <__alt_data_end+0xfffe9034>
    90d0:	100d883a 	mov	r6,r2
    90d4:	180f883a 	mov	r7,r3
    90d8:	1009883a 	mov	r4,r2
    90dc:	180b883a 	mov	r5,r3
    90e0:	0000f2c0 	call	f2c <__adddf3>
    90e4:	100d883a 	mov	r6,r2
    90e8:	180f883a 	mov	r7,r3
    90ec:	8009883a 	mov	r4,r16
    90f0:	880b883a 	mov	r5,r17
    90f4:	1027883a 	mov	r19,r2
    90f8:	1825883a 	mov	r18,r3
    90fc:	000e8d80 	call	e8d8 <__ledf2>
    9100:	10000816 	blt	r2,zero,9124 <_dtoa_r+0x948>
    9104:	980d883a 	mov	r6,r19
    9108:	900f883a 	mov	r7,r18
    910c:	8009883a 	mov	r4,r16
    9110:	880b883a 	mov	r5,r17
    9114:	000e8500 	call	e850 <__eqdf2>
    9118:	103f5a1e 	bne	r2,zero,8e84 <__alt_data_end+0xfffe8e84>
    911c:	ad40004c 	andi	r21,r21,1
    9120:	a83f5826 	beq	r21,zero,8e84 <__alt_data_end+0xfffe8e84>
    9124:	bd3fffc3 	ldbu	r20,-1(r23)
    9128:	b8bfffc4 	addi	r2,r23,-1
    912c:	1007883a 	mov	r3,r2
    9130:	01400e44 	movi	r5,57
    9134:	d9800717 	ldw	r6,28(sp)
    9138:	00000506 	br	9150 <_dtoa_r+0x974>
    913c:	18ffffc4 	addi	r3,r3,-1
    9140:	11824726 	beq	r2,r6,9a60 <_dtoa_r+0x1284>
    9144:	1d000003 	ldbu	r20,0(r3)
    9148:	102f883a 	mov	r23,r2
    914c:	10bfffc4 	addi	r2,r2,-1
    9150:	a1003fcc 	andi	r4,r20,255
    9154:	2100201c 	xori	r4,r4,128
    9158:	213fe004 	addi	r4,r4,-128
    915c:	217ff726 	beq	r4,r5,913c <__alt_data_end+0xfffe913c>
    9160:	a2000044 	addi	r8,r20,1
    9164:	12000005 	stb	r8,0(r2)
    9168:	003f4606 	br	8e84 <__alt_data_end+0xfffe8e84>
    916c:	d9000b17 	ldw	r4,44(sp)
    9170:	2000c826 	beq	r4,zero,9494 <_dtoa_r+0xcb8>
    9174:	d9800317 	ldw	r6,12(sp)
    9178:	00c00044 	movi	r3,1
    917c:	1980f90e 	bge	r3,r6,9564 <_dtoa_r+0xd88>
    9180:	d8800617 	ldw	r2,24(sp)
    9184:	d8c00a17 	ldw	r3,40(sp)
    9188:	157fffc4 	addi	r21,r2,-1
    918c:	1d41f316 	blt	r3,r21,995c <_dtoa_r+0x1180>
    9190:	1d6bc83a 	sub	r21,r3,r21
    9194:	d9c00617 	ldw	r7,24(sp)
    9198:	3802aa16 	blt	r7,zero,9c44 <_dtoa_r+0x1468>
    919c:	dd000817 	ldw	r20,32(sp)
    91a0:	d8800617 	ldw	r2,24(sp)
    91a4:	d8c00817 	ldw	r3,32(sp)
    91a8:	01400044 	movi	r5,1
    91ac:	e009883a 	mov	r4,fp
    91b0:	1887883a 	add	r3,r3,r2
    91b4:	d8c00815 	stw	r3,32(sp)
    91b8:	b0ad883a 	add	r22,r22,r2
    91bc:	000abdc0 	call	abdc <__i2b>
    91c0:	1023883a 	mov	r17,r2
    91c4:	a0000826 	beq	r20,zero,91e8 <_dtoa_r+0xa0c>
    91c8:	0580070e 	bge	zero,r22,91e8 <_dtoa_r+0xa0c>
    91cc:	a005883a 	mov	r2,r20
    91d0:	b500b916 	blt	r22,r20,94b8 <_dtoa_r+0xcdc>
    91d4:	d9000817 	ldw	r4,32(sp)
    91d8:	a0a9c83a 	sub	r20,r20,r2
    91dc:	b0adc83a 	sub	r22,r22,r2
    91e0:	2089c83a 	sub	r4,r4,r2
    91e4:	d9000815 	stw	r4,32(sp)
    91e8:	d9800a17 	ldw	r6,40(sp)
    91ec:	0181810e 	bge	zero,r6,97f4 <_dtoa_r+0x1018>
    91f0:	d9c00b17 	ldw	r7,44(sp)
    91f4:	3800b326 	beq	r7,zero,94c4 <_dtoa_r+0xce8>
    91f8:	a800b226 	beq	r21,zero,94c4 <_dtoa_r+0xce8>
    91fc:	880b883a 	mov	r5,r17
    9200:	a80d883a 	mov	r6,r21
    9204:	e009883a 	mov	r4,fp
    9208:	000aea40 	call	aea4 <__pow5mult>
    920c:	d9800917 	ldw	r6,36(sp)
    9210:	100b883a 	mov	r5,r2
    9214:	e009883a 	mov	r4,fp
    9218:	1023883a 	mov	r17,r2
    921c:	000ac180 	call	ac18 <__multiply>
    9220:	1021883a 	mov	r16,r2
    9224:	d8800a17 	ldw	r2,40(sp)
    9228:	d9400917 	ldw	r5,36(sp)
    922c:	e009883a 	mov	r4,fp
    9230:	1545c83a 	sub	r2,r2,r21
    9234:	d8800a15 	stw	r2,40(sp)
    9238:	000a8500 	call	a850 <_Bfree>
    923c:	d8c00a17 	ldw	r3,40(sp)
    9240:	18009f1e 	bne	r3,zero,94c0 <_dtoa_r+0xce4>
    9244:	05c00044 	movi	r23,1
    9248:	e009883a 	mov	r4,fp
    924c:	b80b883a 	mov	r5,r23
    9250:	000abdc0 	call	abdc <__i2b>
    9254:	d9000d17 	ldw	r4,52(sp)
    9258:	102b883a 	mov	r21,r2
    925c:	2000ce26 	beq	r4,zero,9598 <_dtoa_r+0xdbc>
    9260:	200d883a 	mov	r6,r4
    9264:	100b883a 	mov	r5,r2
    9268:	e009883a 	mov	r4,fp
    926c:	000aea40 	call	aea4 <__pow5mult>
    9270:	d9800317 	ldw	r6,12(sp)
    9274:	102b883a 	mov	r21,r2
    9278:	b981810e 	bge	r23,r6,9880 <_dtoa_r+0x10a4>
    927c:	0027883a 	mov	r19,zero
    9280:	a8800417 	ldw	r2,16(r21)
    9284:	05c00804 	movi	r23,32
    9288:	10800104 	addi	r2,r2,4
    928c:	1085883a 	add	r2,r2,r2
    9290:	1085883a 	add	r2,r2,r2
    9294:	a885883a 	add	r2,r21,r2
    9298:	11000017 	ldw	r4,0(r2)
    929c:	000aac40 	call	aac4 <__hi0bits>
    92a0:	b885c83a 	sub	r2,r23,r2
    92a4:	1585883a 	add	r2,r2,r22
    92a8:	108007cc 	andi	r2,r2,31
    92ac:	1000b326 	beq	r2,zero,957c <_dtoa_r+0xda0>
    92b0:	00c00804 	movi	r3,32
    92b4:	1887c83a 	sub	r3,r3,r2
    92b8:	01000104 	movi	r4,4
    92bc:	20c2cd0e 	bge	r4,r3,9df4 <_dtoa_r+0x1618>
    92c0:	00c00704 	movi	r3,28
    92c4:	1885c83a 	sub	r2,r3,r2
    92c8:	d8c00817 	ldw	r3,32(sp)
    92cc:	a0a9883a 	add	r20,r20,r2
    92d0:	b0ad883a 	add	r22,r22,r2
    92d4:	1887883a 	add	r3,r3,r2
    92d8:	d8c00815 	stw	r3,32(sp)
    92dc:	d9800817 	ldw	r6,32(sp)
    92e0:	0180040e 	bge	zero,r6,92f4 <_dtoa_r+0xb18>
    92e4:	800b883a 	mov	r5,r16
    92e8:	e009883a 	mov	r4,fp
    92ec:	000afe40 	call	afe4 <__lshift>
    92f0:	1021883a 	mov	r16,r2
    92f4:	0580050e 	bge	zero,r22,930c <_dtoa_r+0xb30>
    92f8:	a80b883a 	mov	r5,r21
    92fc:	b00d883a 	mov	r6,r22
    9300:	e009883a 	mov	r4,fp
    9304:	000afe40 	call	afe4 <__lshift>
    9308:	102b883a 	mov	r21,r2
    930c:	d9c00e17 	ldw	r7,56(sp)
    9310:	3801211e 	bne	r7,zero,9798 <_dtoa_r+0xfbc>
    9314:	d9800617 	ldw	r6,24(sp)
    9318:	0181380e 	bge	zero,r6,97fc <_dtoa_r+0x1020>
    931c:	d8c00b17 	ldw	r3,44(sp)
    9320:	1800ab1e 	bne	r3,zero,95d0 <_dtoa_r+0xdf4>
    9324:	dc800717 	ldw	r18,28(sp)
    9328:	dcc00617 	ldw	r19,24(sp)
    932c:	9029883a 	mov	r20,r18
    9330:	00000206 	br	933c <_dtoa_r+0xb60>
    9334:	000a8780 	call	a878 <__multadd>
    9338:	1021883a 	mov	r16,r2
    933c:	a80b883a 	mov	r5,r21
    9340:	8009883a 	mov	r4,r16
    9344:	00085b40 	call	85b4 <quorem>
    9348:	10800c04 	addi	r2,r2,48
    934c:	90800005 	stb	r2,0(r18)
    9350:	94800044 	addi	r18,r18,1
    9354:	9507c83a 	sub	r3,r18,r20
    9358:	000f883a 	mov	r7,zero
    935c:	01800284 	movi	r6,10
    9360:	800b883a 	mov	r5,r16
    9364:	e009883a 	mov	r4,fp
    9368:	1cfff216 	blt	r3,r19,9334 <__alt_data_end+0xfffe9334>
    936c:	1011883a 	mov	r8,r2
    9370:	d8800617 	ldw	r2,24(sp)
    9374:	0082370e 	bge	zero,r2,9c54 <_dtoa_r+0x1478>
    9378:	d9000717 	ldw	r4,28(sp)
    937c:	0025883a 	mov	r18,zero
    9380:	20af883a 	add	r23,r4,r2
    9384:	01800044 	movi	r6,1
    9388:	800b883a 	mov	r5,r16
    938c:	e009883a 	mov	r4,fp
    9390:	da001715 	stw	r8,92(sp)
    9394:	000afe40 	call	afe4 <__lshift>
    9398:	a80b883a 	mov	r5,r21
    939c:	1009883a 	mov	r4,r2
    93a0:	d8800915 	stw	r2,36(sp)
    93a4:	000b12c0 	call	b12c <__mcmp>
    93a8:	da001717 	ldw	r8,92(sp)
    93ac:	0081800e 	bge	zero,r2,99b0 <_dtoa_r+0x11d4>
    93b0:	b93fffc3 	ldbu	r4,-1(r23)
    93b4:	b8bfffc4 	addi	r2,r23,-1
    93b8:	1007883a 	mov	r3,r2
    93bc:	01800e44 	movi	r6,57
    93c0:	d9c00717 	ldw	r7,28(sp)
    93c4:	00000506 	br	93dc <_dtoa_r+0xc00>
    93c8:	18ffffc4 	addi	r3,r3,-1
    93cc:	11c12326 	beq	r2,r7,985c <_dtoa_r+0x1080>
    93d0:	19000003 	ldbu	r4,0(r3)
    93d4:	102f883a 	mov	r23,r2
    93d8:	10bfffc4 	addi	r2,r2,-1
    93dc:	21403fcc 	andi	r5,r4,255
    93e0:	2940201c 	xori	r5,r5,128
    93e4:	297fe004 	addi	r5,r5,-128
    93e8:	29bff726 	beq	r5,r6,93c8 <__alt_data_end+0xfffe93c8>
    93ec:	21000044 	addi	r4,r4,1
    93f0:	11000005 	stb	r4,0(r2)
    93f4:	a80b883a 	mov	r5,r21
    93f8:	e009883a 	mov	r4,fp
    93fc:	000a8500 	call	a850 <_Bfree>
    9400:	883ea026 	beq	r17,zero,8e84 <__alt_data_end+0xfffe8e84>
    9404:	90000426 	beq	r18,zero,9418 <_dtoa_r+0xc3c>
    9408:	94400326 	beq	r18,r17,9418 <_dtoa_r+0xc3c>
    940c:	900b883a 	mov	r5,r18
    9410:	e009883a 	mov	r4,fp
    9414:	000a8500 	call	a850 <_Bfree>
    9418:	880b883a 	mov	r5,r17
    941c:	e009883a 	mov	r4,fp
    9420:	000a8500 	call	a850 <_Bfree>
    9424:	003e9706 	br	8e84 <__alt_data_end+0xfffe8e84>
    9428:	01800044 	movi	r6,1
    942c:	d9800e15 	stw	r6,56(sp)
    9430:	003d9606 	br	8a8c <__alt_data_end+0xfffe8a8c>
    9434:	d8800817 	ldw	r2,32(sp)
    9438:	d8c00517 	ldw	r3,20(sp)
    943c:	d8000d15 	stw	zero,52(sp)
    9440:	10c5c83a 	sub	r2,r2,r3
    9444:	00c9c83a 	sub	r4,zero,r3
    9448:	d8800815 	stw	r2,32(sp)
    944c:	d9000a15 	stw	r4,40(sp)
    9450:	003d9706 	br	8ab0 <__alt_data_end+0xfffe8ab0>
    9454:	05adc83a 	sub	r22,zero,r22
    9458:	dd800815 	stw	r22,32(sp)
    945c:	002d883a 	mov	r22,zero
    9460:	003d8e06 	br	8a9c <__alt_data_end+0xfffe8a9c>
    9464:	d9000517 	ldw	r4,20(sp)
    9468:	00033ec0 	call	33ec <__floatsidf>
    946c:	100d883a 	mov	r6,r2
    9470:	180f883a 	mov	r7,r3
    9474:	a009883a 	mov	r4,r20
    9478:	880b883a 	mov	r5,r17
    947c:	000e8500 	call	e850 <__eqdf2>
    9480:	103d7126 	beq	r2,zero,8a48 <__alt_data_end+0xfffe8a48>
    9484:	d9c00517 	ldw	r7,20(sp)
    9488:	39ffffc4 	addi	r7,r7,-1
    948c:	d9c00515 	stw	r7,20(sp)
    9490:	003d6d06 	br	8a48 <__alt_data_end+0xfffe8a48>
    9494:	dd400a17 	ldw	r21,40(sp)
    9498:	dd000817 	ldw	r20,32(sp)
    949c:	0023883a 	mov	r17,zero
    94a0:	003f4806 	br	91c4 <__alt_data_end+0xfffe91c4>
    94a4:	10e3c83a 	sub	r17,r2,r3
    94a8:	9448983a 	sll	r4,r18,r17
    94ac:	003d3206 	br	8978 <__alt_data_end+0xfffe8978>
    94b0:	d8000e15 	stw	zero,56(sp)
    94b4:	003d7506 	br	8a8c <__alt_data_end+0xfffe8a8c>
    94b8:	b005883a 	mov	r2,r22
    94bc:	003f4506 	br	91d4 <__alt_data_end+0xfffe91d4>
    94c0:	dc000915 	stw	r16,36(sp)
    94c4:	d9800a17 	ldw	r6,40(sp)
    94c8:	d9400917 	ldw	r5,36(sp)
    94cc:	e009883a 	mov	r4,fp
    94d0:	000aea40 	call	aea4 <__pow5mult>
    94d4:	1021883a 	mov	r16,r2
    94d8:	003f5a06 	br	9244 <__alt_data_end+0xfffe9244>
    94dc:	01c00044 	movi	r7,1
    94e0:	d9c00b15 	stw	r7,44(sp)
    94e4:	d8802217 	ldw	r2,136(sp)
    94e8:	0081280e 	bge	zero,r2,998c <_dtoa_r+0x11b0>
    94ec:	100d883a 	mov	r6,r2
    94f0:	1021883a 	mov	r16,r2
    94f4:	d8800c15 	stw	r2,48(sp)
    94f8:	d8800615 	stw	r2,24(sp)
    94fc:	003d8806 	br	8b20 <__alt_data_end+0xfffe8b20>
    9500:	d8800617 	ldw	r2,24(sp)
    9504:	00be9b16 	blt	zero,r2,8f74 <__alt_data_end+0xfffe8f74>
    9508:	10010f1e 	bne	r2,zero,9948 <_dtoa_r+0x116c>
    950c:	880b883a 	mov	r5,r17
    9510:	000d883a 	mov	r6,zero
    9514:	01d00534 	movhi	r7,16404
    9518:	8009883a 	mov	r4,r16
    951c:	00022840 	call	2284 <__muldf3>
    9520:	900d883a 	mov	r6,r18
    9524:	980f883a 	mov	r7,r19
    9528:	1009883a 	mov	r4,r2
    952c:	180b883a 	mov	r5,r3
    9530:	00021a80 	call	21a8 <__gedf2>
    9534:	002b883a 	mov	r21,zero
    9538:	0023883a 	mov	r17,zero
    953c:	1000bf16 	blt	r2,zero,983c <_dtoa_r+0x1060>
    9540:	d9802217 	ldw	r6,136(sp)
    9544:	ddc00717 	ldw	r23,28(sp)
    9548:	018c303a 	nor	r6,zero,r6
    954c:	d9800515 	stw	r6,20(sp)
    9550:	a80b883a 	mov	r5,r21
    9554:	e009883a 	mov	r4,fp
    9558:	000a8500 	call	a850 <_Bfree>
    955c:	883e4926 	beq	r17,zero,8e84 <__alt_data_end+0xfffe8e84>
    9560:	003fad06 	br	9418 <__alt_data_end+0xfffe9418>
    9564:	d9c01117 	ldw	r7,68(sp)
    9568:	3801bc26 	beq	r7,zero,9c5c <_dtoa_r+0x1480>
    956c:	10810cc4 	addi	r2,r2,1075
    9570:	dd400a17 	ldw	r21,40(sp)
    9574:	dd000817 	ldw	r20,32(sp)
    9578:	003f0a06 	br	91a4 <__alt_data_end+0xfffe91a4>
    957c:	00800704 	movi	r2,28
    9580:	d9000817 	ldw	r4,32(sp)
    9584:	a0a9883a 	add	r20,r20,r2
    9588:	b0ad883a 	add	r22,r22,r2
    958c:	2089883a 	add	r4,r4,r2
    9590:	d9000815 	stw	r4,32(sp)
    9594:	003f5106 	br	92dc <__alt_data_end+0xfffe92dc>
    9598:	d8c00317 	ldw	r3,12(sp)
    959c:	b8c1fc0e 	bge	r23,r3,9d90 <_dtoa_r+0x15b4>
    95a0:	0027883a 	mov	r19,zero
    95a4:	b805883a 	mov	r2,r23
    95a8:	003f3e06 	br	92a4 <__alt_data_end+0xfffe92a4>
    95ac:	880b883a 	mov	r5,r17
    95b0:	e009883a 	mov	r4,fp
    95b4:	000f883a 	mov	r7,zero
    95b8:	01800284 	movi	r6,10
    95bc:	000a8780 	call	a878 <__multadd>
    95c0:	d9000c17 	ldw	r4,48(sp)
    95c4:	1023883a 	mov	r17,r2
    95c8:	0102040e 	bge	zero,r4,9ddc <_dtoa_r+0x1600>
    95cc:	d9000615 	stw	r4,24(sp)
    95d0:	0500050e 	bge	zero,r20,95e8 <_dtoa_r+0xe0c>
    95d4:	880b883a 	mov	r5,r17
    95d8:	a00d883a 	mov	r6,r20
    95dc:	e009883a 	mov	r4,fp
    95e0:	000afe40 	call	afe4 <__lshift>
    95e4:	1023883a 	mov	r17,r2
    95e8:	9801241e 	bne	r19,zero,9a7c <_dtoa_r+0x12a0>
    95ec:	8829883a 	mov	r20,r17
    95f0:	d9000617 	ldw	r4,24(sp)
    95f4:	dcc00717 	ldw	r19,28(sp)
    95f8:	9480004c 	andi	r18,r18,1
    95fc:	20bfffc4 	addi	r2,r4,-1
    9600:	9885883a 	add	r2,r19,r2
    9604:	d8800415 	stw	r2,16(sp)
    9608:	dc800615 	stw	r18,24(sp)
    960c:	a80b883a 	mov	r5,r21
    9610:	8009883a 	mov	r4,r16
    9614:	00085b40 	call	85b4 <quorem>
    9618:	880b883a 	mov	r5,r17
    961c:	8009883a 	mov	r4,r16
    9620:	102f883a 	mov	r23,r2
    9624:	000b12c0 	call	b12c <__mcmp>
    9628:	a80b883a 	mov	r5,r21
    962c:	a00d883a 	mov	r6,r20
    9630:	e009883a 	mov	r4,fp
    9634:	102d883a 	mov	r22,r2
    9638:	000b18c0 	call	b18c <__mdiff>
    963c:	1007883a 	mov	r3,r2
    9640:	10800317 	ldw	r2,12(r2)
    9644:	bc800c04 	addi	r18,r23,48
    9648:	180b883a 	mov	r5,r3
    964c:	10004e1e 	bne	r2,zero,9788 <_dtoa_r+0xfac>
    9650:	8009883a 	mov	r4,r16
    9654:	d8c01615 	stw	r3,88(sp)
    9658:	000b12c0 	call	b12c <__mcmp>
    965c:	d8c01617 	ldw	r3,88(sp)
    9660:	e009883a 	mov	r4,fp
    9664:	d8801615 	stw	r2,88(sp)
    9668:	180b883a 	mov	r5,r3
    966c:	000a8500 	call	a850 <_Bfree>
    9670:	d8801617 	ldw	r2,88(sp)
    9674:	1000041e 	bne	r2,zero,9688 <_dtoa_r+0xeac>
    9678:	d9800317 	ldw	r6,12(sp)
    967c:	3000021e 	bne	r6,zero,9688 <_dtoa_r+0xeac>
    9680:	d8c00617 	ldw	r3,24(sp)
    9684:	18003726 	beq	r3,zero,9764 <_dtoa_r+0xf88>
    9688:	b0002016 	blt	r22,zero,970c <_dtoa_r+0xf30>
    968c:	b000041e 	bne	r22,zero,96a0 <_dtoa_r+0xec4>
    9690:	d9000317 	ldw	r4,12(sp)
    9694:	2000021e 	bne	r4,zero,96a0 <_dtoa_r+0xec4>
    9698:	d8c00617 	ldw	r3,24(sp)
    969c:	18001b26 	beq	r3,zero,970c <_dtoa_r+0xf30>
    96a0:	00810716 	blt	zero,r2,9ac0 <_dtoa_r+0x12e4>
    96a4:	d8c00417 	ldw	r3,16(sp)
    96a8:	9d800044 	addi	r22,r19,1
    96ac:	9c800005 	stb	r18,0(r19)
    96b0:	b02f883a 	mov	r23,r22
    96b4:	98c10626 	beq	r19,r3,9ad0 <_dtoa_r+0x12f4>
    96b8:	800b883a 	mov	r5,r16
    96bc:	000f883a 	mov	r7,zero
    96c0:	01800284 	movi	r6,10
    96c4:	e009883a 	mov	r4,fp
    96c8:	000a8780 	call	a878 <__multadd>
    96cc:	1021883a 	mov	r16,r2
    96d0:	000f883a 	mov	r7,zero
    96d4:	01800284 	movi	r6,10
    96d8:	880b883a 	mov	r5,r17
    96dc:	e009883a 	mov	r4,fp
    96e0:	8d002526 	beq	r17,r20,9778 <_dtoa_r+0xf9c>
    96e4:	000a8780 	call	a878 <__multadd>
    96e8:	a00b883a 	mov	r5,r20
    96ec:	000f883a 	mov	r7,zero
    96f0:	01800284 	movi	r6,10
    96f4:	e009883a 	mov	r4,fp
    96f8:	1023883a 	mov	r17,r2
    96fc:	000a8780 	call	a878 <__multadd>
    9700:	1029883a 	mov	r20,r2
    9704:	b027883a 	mov	r19,r22
    9708:	003fc006 	br	960c <__alt_data_end+0xfffe960c>
    970c:	9011883a 	mov	r8,r18
    9710:	00800e0e 	bge	zero,r2,974c <_dtoa_r+0xf70>
    9714:	800b883a 	mov	r5,r16
    9718:	01800044 	movi	r6,1
    971c:	e009883a 	mov	r4,fp
    9720:	da001715 	stw	r8,92(sp)
    9724:	000afe40 	call	afe4 <__lshift>
    9728:	a80b883a 	mov	r5,r21
    972c:	1009883a 	mov	r4,r2
    9730:	1021883a 	mov	r16,r2
    9734:	000b12c0 	call	b12c <__mcmp>
    9738:	da001717 	ldw	r8,92(sp)
    973c:	0081960e 	bge	zero,r2,9d98 <_dtoa_r+0x15bc>
    9740:	00800e44 	movi	r2,57
    9744:	40817026 	beq	r8,r2,9d08 <_dtoa_r+0x152c>
    9748:	ba000c44 	addi	r8,r23,49
    974c:	8825883a 	mov	r18,r17
    9750:	9dc00044 	addi	r23,r19,1
    9754:	9a000005 	stb	r8,0(r19)
    9758:	a023883a 	mov	r17,r20
    975c:	dc000915 	stw	r16,36(sp)
    9760:	003f2406 	br	93f4 <__alt_data_end+0xfffe93f4>
    9764:	00800e44 	movi	r2,57
    9768:	9011883a 	mov	r8,r18
    976c:	90816626 	beq	r18,r2,9d08 <_dtoa_r+0x152c>
    9770:	05bff516 	blt	zero,r22,9748 <__alt_data_end+0xfffe9748>
    9774:	003ff506 	br	974c <__alt_data_end+0xfffe974c>
    9778:	000a8780 	call	a878 <__multadd>
    977c:	1023883a 	mov	r17,r2
    9780:	1029883a 	mov	r20,r2
    9784:	003fdf06 	br	9704 <__alt_data_end+0xfffe9704>
    9788:	e009883a 	mov	r4,fp
    978c:	000a8500 	call	a850 <_Bfree>
    9790:	00800044 	movi	r2,1
    9794:	003fbc06 	br	9688 <__alt_data_end+0xfffe9688>
    9798:	a80b883a 	mov	r5,r21
    979c:	8009883a 	mov	r4,r16
    97a0:	000b12c0 	call	b12c <__mcmp>
    97a4:	103edb0e 	bge	r2,zero,9314 <__alt_data_end+0xfffe9314>
    97a8:	800b883a 	mov	r5,r16
    97ac:	000f883a 	mov	r7,zero
    97b0:	01800284 	movi	r6,10
    97b4:	e009883a 	mov	r4,fp
    97b8:	000a8780 	call	a878 <__multadd>
    97bc:	1021883a 	mov	r16,r2
    97c0:	d8800517 	ldw	r2,20(sp)
    97c4:	d8c00b17 	ldw	r3,44(sp)
    97c8:	10bfffc4 	addi	r2,r2,-1
    97cc:	d8800515 	stw	r2,20(sp)
    97d0:	183f761e 	bne	r3,zero,95ac <__alt_data_end+0xfffe95ac>
    97d4:	d9000c17 	ldw	r4,48(sp)
    97d8:	0101730e 	bge	zero,r4,9da8 <_dtoa_r+0x15cc>
    97dc:	d9000615 	stw	r4,24(sp)
    97e0:	003ed006 	br	9324 <__alt_data_end+0xfffe9324>
    97e4:	00800084 	movi	r2,2
    97e8:	3081861e 	bne	r6,r2,9e04 <_dtoa_r+0x1628>
    97ec:	d8000b15 	stw	zero,44(sp)
    97f0:	003f3c06 	br	94e4 <__alt_data_end+0xfffe94e4>
    97f4:	dc000917 	ldw	r16,36(sp)
    97f8:	003e9206 	br	9244 <__alt_data_end+0xfffe9244>
    97fc:	d9c00317 	ldw	r7,12(sp)
    9800:	00800084 	movi	r2,2
    9804:	11fec50e 	bge	r2,r7,931c <__alt_data_end+0xfffe931c>
    9808:	d9000617 	ldw	r4,24(sp)
    980c:	20013c1e 	bne	r4,zero,9d00 <_dtoa_r+0x1524>
    9810:	a80b883a 	mov	r5,r21
    9814:	000f883a 	mov	r7,zero
    9818:	01800144 	movi	r6,5
    981c:	e009883a 	mov	r4,fp
    9820:	000a8780 	call	a878 <__multadd>
    9824:	100b883a 	mov	r5,r2
    9828:	8009883a 	mov	r4,r16
    982c:	102b883a 	mov	r21,r2
    9830:	000b12c0 	call	b12c <__mcmp>
    9834:	dc000915 	stw	r16,36(sp)
    9838:	00bf410e 	bge	zero,r2,9540 <__alt_data_end+0xfffe9540>
    983c:	d9c00717 	ldw	r7,28(sp)
    9840:	00800c44 	movi	r2,49
    9844:	38800005 	stb	r2,0(r7)
    9848:	d8800517 	ldw	r2,20(sp)
    984c:	3dc00044 	addi	r23,r7,1
    9850:	10800044 	addi	r2,r2,1
    9854:	d8800515 	stw	r2,20(sp)
    9858:	003f3d06 	br	9550 <__alt_data_end+0xfffe9550>
    985c:	d9800517 	ldw	r6,20(sp)
    9860:	d9c00717 	ldw	r7,28(sp)
    9864:	00800c44 	movi	r2,49
    9868:	31800044 	addi	r6,r6,1
    986c:	d9800515 	stw	r6,20(sp)
    9870:	38800005 	stb	r2,0(r7)
    9874:	003edf06 	br	93f4 <__alt_data_end+0xfffe93f4>
    9878:	d8000b15 	stw	zero,44(sp)
    987c:	003c9f06 	br	8afc <__alt_data_end+0xfffe8afc>
    9880:	903e7e1e 	bne	r18,zero,927c <__alt_data_end+0xfffe927c>
    9884:	00800434 	movhi	r2,16
    9888:	10bfffc4 	addi	r2,r2,-1
    988c:	9884703a 	and	r2,r19,r2
    9890:	1000ea1e 	bne	r2,zero,9c3c <_dtoa_r+0x1460>
    9894:	9cdffc2c 	andhi	r19,r19,32752
    9898:	9800e826 	beq	r19,zero,9c3c <_dtoa_r+0x1460>
    989c:	d9c00817 	ldw	r7,32(sp)
    98a0:	b5800044 	addi	r22,r22,1
    98a4:	04c00044 	movi	r19,1
    98a8:	39c00044 	addi	r7,r7,1
    98ac:	d9c00815 	stw	r7,32(sp)
    98b0:	d8800d17 	ldw	r2,52(sp)
    98b4:	103e721e 	bne	r2,zero,9280 <__alt_data_end+0xfffe9280>
    98b8:	00800044 	movi	r2,1
    98bc:	003e7906 	br	92a4 <__alt_data_end+0xfffe92a4>
    98c0:	8009883a 	mov	r4,r16
    98c4:	00033ec0 	call	33ec <__floatsidf>
    98c8:	d9800f17 	ldw	r6,60(sp)
    98cc:	d9c01017 	ldw	r7,64(sp)
    98d0:	1009883a 	mov	r4,r2
    98d4:	180b883a 	mov	r5,r3
    98d8:	00022840 	call	2284 <__muldf3>
    98dc:	000d883a 	mov	r6,zero
    98e0:	01d00734 	movhi	r7,16412
    98e4:	1009883a 	mov	r4,r2
    98e8:	180b883a 	mov	r5,r3
    98ec:	0000f2c0 	call	f2c <__adddf3>
    98f0:	047f3034 	movhi	r17,64704
    98f4:	1021883a 	mov	r16,r2
    98f8:	1c63883a 	add	r17,r3,r17
    98fc:	d9000f17 	ldw	r4,60(sp)
    9900:	d9401017 	ldw	r5,64(sp)
    9904:	000d883a 	mov	r6,zero
    9908:	01d00534 	movhi	r7,16404
    990c:	0002af00 	call	2af0 <__subdf3>
    9910:	800d883a 	mov	r6,r16
    9914:	880f883a 	mov	r7,r17
    9918:	1009883a 	mov	r4,r2
    991c:	180b883a 	mov	r5,r3
    9920:	102b883a 	mov	r21,r2
    9924:	1829883a 	mov	r20,r3
    9928:	00021a80 	call	21a8 <__gedf2>
    992c:	00806c16 	blt	zero,r2,9ae0 <_dtoa_r+0x1304>
    9930:	89e0003c 	xorhi	r7,r17,32768
    9934:	800d883a 	mov	r6,r16
    9938:	a809883a 	mov	r4,r21
    993c:	a00b883a 	mov	r5,r20
    9940:	000e8d80 	call	e8d8 <__ledf2>
    9944:	103d7e0e 	bge	r2,zero,8f40 <__alt_data_end+0xfffe8f40>
    9948:	002b883a 	mov	r21,zero
    994c:	0023883a 	mov	r17,zero
    9950:	003efb06 	br	9540 <__alt_data_end+0xfffe9540>
    9954:	d8800717 	ldw	r2,28(sp)
    9958:	003bd006 	br	889c <__alt_data_end+0xfffe889c>
    995c:	d9000a17 	ldw	r4,40(sp)
    9960:	d9800d17 	ldw	r6,52(sp)
    9964:	dd400a15 	stw	r21,40(sp)
    9968:	a905c83a 	sub	r2,r21,r4
    996c:	308d883a 	add	r6,r6,r2
    9970:	d9800d15 	stw	r6,52(sp)
    9974:	002b883a 	mov	r21,zero
    9978:	003e0606 	br	9194 <__alt_data_end+0xfffe9194>
    997c:	9023883a 	mov	r17,r18
    9980:	9829883a 	mov	r20,r19
    9984:	04000084 	movi	r16,2
    9988:	003c9206 	br	8bd4 <__alt_data_end+0xfffe8bd4>
    998c:	04000044 	movi	r16,1
    9990:	dc000c15 	stw	r16,48(sp)
    9994:	dc000615 	stw	r16,24(sp)
    9998:	dc002215 	stw	r16,136(sp)
    999c:	e0001115 	stw	zero,68(fp)
    99a0:	000b883a 	mov	r5,zero
    99a4:	003c6906 	br	8b4c <__alt_data_end+0xfffe8b4c>
    99a8:	3021883a 	mov	r16,r6
    99ac:	003ffb06 	br	999c <__alt_data_end+0xfffe999c>
    99b0:	1000021e 	bne	r2,zero,99bc <_dtoa_r+0x11e0>
    99b4:	4200004c 	andi	r8,r8,1
    99b8:	403e7d1e 	bne	r8,zero,93b0 <__alt_data_end+0xfffe93b0>
    99bc:	01000c04 	movi	r4,48
    99c0:	00000106 	br	99c8 <_dtoa_r+0x11ec>
    99c4:	102f883a 	mov	r23,r2
    99c8:	b8bfffc4 	addi	r2,r23,-1
    99cc:	10c00007 	ldb	r3,0(r2)
    99d0:	193ffc26 	beq	r3,r4,99c4 <__alt_data_end+0xfffe99c4>
    99d4:	003e8706 	br	93f4 <__alt_data_end+0xfffe93f4>
    99d8:	d8800517 	ldw	r2,20(sp)
    99dc:	00a3c83a 	sub	r17,zero,r2
    99e0:	8800a426 	beq	r17,zero,9c74 <_dtoa_r+0x1498>
    99e4:	888003cc 	andi	r2,r17,15
    99e8:	100490fa 	slli	r2,r2,3
    99ec:	00c00074 	movhi	r3,1
    99f0:	18c4f204 	addi	r3,r3,5064
    99f4:	1885883a 	add	r2,r3,r2
    99f8:	11800017 	ldw	r6,0(r2)
    99fc:	11c00117 	ldw	r7,4(r2)
    9a00:	9009883a 	mov	r4,r18
    9a04:	980b883a 	mov	r5,r19
    9a08:	8823d13a 	srai	r17,r17,4
    9a0c:	00022840 	call	2284 <__muldf3>
    9a10:	d8800f15 	stw	r2,60(sp)
    9a14:	d8c01015 	stw	r3,64(sp)
    9a18:	8800e826 	beq	r17,zero,9dbc <_dtoa_r+0x15e0>
    9a1c:	05000074 	movhi	r20,1
    9a20:	a504e804 	addi	r20,r20,5024
    9a24:	04000084 	movi	r16,2
    9a28:	8980004c 	andi	r6,r17,1
    9a2c:	1009883a 	mov	r4,r2
    9a30:	8823d07a 	srai	r17,r17,1
    9a34:	180b883a 	mov	r5,r3
    9a38:	30000426 	beq	r6,zero,9a4c <_dtoa_r+0x1270>
    9a3c:	a1800017 	ldw	r6,0(r20)
    9a40:	a1c00117 	ldw	r7,4(r20)
    9a44:	84000044 	addi	r16,r16,1
    9a48:	00022840 	call	2284 <__muldf3>
    9a4c:	a5000204 	addi	r20,r20,8
    9a50:	883ff51e 	bne	r17,zero,9a28 <__alt_data_end+0xfffe9a28>
    9a54:	d8800f15 	stw	r2,60(sp)
    9a58:	d8c01015 	stw	r3,64(sp)
    9a5c:	003c7606 	br	8c38 <__alt_data_end+0xfffe8c38>
    9a60:	00c00c04 	movi	r3,48
    9a64:	10c00005 	stb	r3,0(r2)
    9a68:	d8c00517 	ldw	r3,20(sp)
    9a6c:	bd3fffc3 	ldbu	r20,-1(r23)
    9a70:	18c00044 	addi	r3,r3,1
    9a74:	d8c00515 	stw	r3,20(sp)
    9a78:	003db906 	br	9160 <__alt_data_end+0xfffe9160>
    9a7c:	89400117 	ldw	r5,4(r17)
    9a80:	e009883a 	mov	r4,fp
    9a84:	000a7a80 	call	a7a8 <_Balloc>
    9a88:	89800417 	ldw	r6,16(r17)
    9a8c:	89400304 	addi	r5,r17,12
    9a90:	11000304 	addi	r4,r2,12
    9a94:	31800084 	addi	r6,r6,2
    9a98:	318d883a 	add	r6,r6,r6
    9a9c:	318d883a 	add	r6,r6,r6
    9aa0:	1027883a 	mov	r19,r2
    9aa4:	00056500 	call	5650 <memcpy>
    9aa8:	01800044 	movi	r6,1
    9aac:	980b883a 	mov	r5,r19
    9ab0:	e009883a 	mov	r4,fp
    9ab4:	000afe40 	call	afe4 <__lshift>
    9ab8:	1029883a 	mov	r20,r2
    9abc:	003ecc06 	br	95f0 <__alt_data_end+0xfffe95f0>
    9ac0:	00800e44 	movi	r2,57
    9ac4:	90809026 	beq	r18,r2,9d08 <_dtoa_r+0x152c>
    9ac8:	92000044 	addi	r8,r18,1
    9acc:	003f1f06 	br	974c <__alt_data_end+0xfffe974c>
    9ad0:	9011883a 	mov	r8,r18
    9ad4:	8825883a 	mov	r18,r17
    9ad8:	a023883a 	mov	r17,r20
    9adc:	003e2906 	br	9384 <__alt_data_end+0xfffe9384>
    9ae0:	002b883a 	mov	r21,zero
    9ae4:	0023883a 	mov	r17,zero
    9ae8:	003f5406 	br	983c <__alt_data_end+0xfffe983c>
    9aec:	61bfffc4 	addi	r6,r12,-1
    9af0:	300490fa 	slli	r2,r6,3
    9af4:	00c00074 	movhi	r3,1
    9af8:	18c4f204 	addi	r3,r3,5064
    9afc:	1885883a 	add	r2,r3,r2
    9b00:	11000017 	ldw	r4,0(r2)
    9b04:	11400117 	ldw	r5,4(r2)
    9b08:	d8800717 	ldw	r2,28(sp)
    9b0c:	880f883a 	mov	r7,r17
    9b10:	d9801215 	stw	r6,72(sp)
    9b14:	800d883a 	mov	r6,r16
    9b18:	db001615 	stw	r12,88(sp)
    9b1c:	15c00044 	addi	r23,r2,1
    9b20:	00022840 	call	2284 <__muldf3>
    9b24:	d9401017 	ldw	r5,64(sp)
    9b28:	d9000f17 	ldw	r4,60(sp)
    9b2c:	d8c01515 	stw	r3,84(sp)
    9b30:	d8801415 	stw	r2,80(sp)
    9b34:	000e9cc0 	call	e9cc <__fixdfsi>
    9b38:	1009883a 	mov	r4,r2
    9b3c:	1021883a 	mov	r16,r2
    9b40:	00033ec0 	call	33ec <__floatsidf>
    9b44:	d9000f17 	ldw	r4,60(sp)
    9b48:	d9401017 	ldw	r5,64(sp)
    9b4c:	100d883a 	mov	r6,r2
    9b50:	180f883a 	mov	r7,r3
    9b54:	0002af00 	call	2af0 <__subdf3>
    9b58:	1829883a 	mov	r20,r3
    9b5c:	d8c00717 	ldw	r3,28(sp)
    9b60:	84000c04 	addi	r16,r16,48
    9b64:	1023883a 	mov	r17,r2
    9b68:	1c000005 	stb	r16,0(r3)
    9b6c:	db001617 	ldw	r12,88(sp)
    9b70:	00800044 	movi	r2,1
    9b74:	60802226 	beq	r12,r2,9c00 <_dtoa_r+0x1424>
    9b78:	d9c00717 	ldw	r7,28(sp)
    9b7c:	8805883a 	mov	r2,r17
    9b80:	b82b883a 	mov	r21,r23
    9b84:	3b19883a 	add	r12,r7,r12
    9b88:	6023883a 	mov	r17,r12
    9b8c:	a007883a 	mov	r3,r20
    9b90:	dc800f15 	stw	r18,60(sp)
    9b94:	000d883a 	mov	r6,zero
    9b98:	01d00934 	movhi	r7,16420
    9b9c:	1009883a 	mov	r4,r2
    9ba0:	180b883a 	mov	r5,r3
    9ba4:	00022840 	call	2284 <__muldf3>
    9ba8:	180b883a 	mov	r5,r3
    9bac:	1009883a 	mov	r4,r2
    9bb0:	1829883a 	mov	r20,r3
    9bb4:	1025883a 	mov	r18,r2
    9bb8:	000e9cc0 	call	e9cc <__fixdfsi>
    9bbc:	1009883a 	mov	r4,r2
    9bc0:	1021883a 	mov	r16,r2
    9bc4:	00033ec0 	call	33ec <__floatsidf>
    9bc8:	100d883a 	mov	r6,r2
    9bcc:	180f883a 	mov	r7,r3
    9bd0:	9009883a 	mov	r4,r18
    9bd4:	a00b883a 	mov	r5,r20
    9bd8:	84000c04 	addi	r16,r16,48
    9bdc:	0002af00 	call	2af0 <__subdf3>
    9be0:	ad400044 	addi	r21,r21,1
    9be4:	ac3fffc5 	stb	r16,-1(r21)
    9be8:	ac7fea1e 	bne	r21,r17,9b94 <__alt_data_end+0xfffe9b94>
    9bec:	1023883a 	mov	r17,r2
    9bf0:	d8801217 	ldw	r2,72(sp)
    9bf4:	dc800f17 	ldw	r18,60(sp)
    9bf8:	1829883a 	mov	r20,r3
    9bfc:	b8af883a 	add	r23,r23,r2
    9c00:	d9001417 	ldw	r4,80(sp)
    9c04:	d9401517 	ldw	r5,84(sp)
    9c08:	000d883a 	mov	r6,zero
    9c0c:	01cff834 	movhi	r7,16352
    9c10:	0000f2c0 	call	f2c <__adddf3>
    9c14:	880d883a 	mov	r6,r17
    9c18:	a00f883a 	mov	r7,r20
    9c1c:	1009883a 	mov	r4,r2
    9c20:	180b883a 	mov	r5,r3
    9c24:	000e8d80 	call	e8d8 <__ledf2>
    9c28:	10003e0e 	bge	r2,zero,9d24 <_dtoa_r+0x1548>
    9c2c:	d9001317 	ldw	r4,76(sp)
    9c30:	bd3fffc3 	ldbu	r20,-1(r23)
    9c34:	d9000515 	stw	r4,20(sp)
    9c38:	003d3b06 	br	9128 <__alt_data_end+0xfffe9128>
    9c3c:	0027883a 	mov	r19,zero
    9c40:	003f1b06 	br	98b0 <__alt_data_end+0xfffe98b0>
    9c44:	d8800817 	ldw	r2,32(sp)
    9c48:	11e9c83a 	sub	r20,r2,r7
    9c4c:	0005883a 	mov	r2,zero
    9c50:	003d5406 	br	91a4 <__alt_data_end+0xfffe91a4>
    9c54:	00800044 	movi	r2,1
    9c58:	003dc706 	br	9378 <__alt_data_end+0xfffe9378>
    9c5c:	d8c00217 	ldw	r3,8(sp)
    9c60:	00800d84 	movi	r2,54
    9c64:	dd400a17 	ldw	r21,40(sp)
    9c68:	10c5c83a 	sub	r2,r2,r3
    9c6c:	dd000817 	ldw	r20,32(sp)
    9c70:	003d4c06 	br	91a4 <__alt_data_end+0xfffe91a4>
    9c74:	dc800f15 	stw	r18,60(sp)
    9c78:	dcc01015 	stw	r19,64(sp)
    9c7c:	04000084 	movi	r16,2
    9c80:	003bed06 	br	8c38 <__alt_data_end+0xfffe8c38>
    9c84:	d9000617 	ldw	r4,24(sp)
    9c88:	203f0d26 	beq	r4,zero,98c0 <__alt_data_end+0xfffe98c0>
    9c8c:	d9800c17 	ldw	r6,48(sp)
    9c90:	01bcab0e 	bge	zero,r6,8f40 <__alt_data_end+0xfffe8f40>
    9c94:	d9401017 	ldw	r5,64(sp)
    9c98:	d9000f17 	ldw	r4,60(sp)
    9c9c:	000d883a 	mov	r6,zero
    9ca0:	01d00934 	movhi	r7,16420
    9ca4:	00022840 	call	2284 <__muldf3>
    9ca8:	81000044 	addi	r4,r16,1
    9cac:	d8800f15 	stw	r2,60(sp)
    9cb0:	d8c01015 	stw	r3,64(sp)
    9cb4:	00033ec0 	call	33ec <__floatsidf>
    9cb8:	d9800f17 	ldw	r6,60(sp)
    9cbc:	d9c01017 	ldw	r7,64(sp)
    9cc0:	1009883a 	mov	r4,r2
    9cc4:	180b883a 	mov	r5,r3
    9cc8:	00022840 	call	2284 <__muldf3>
    9ccc:	01d00734 	movhi	r7,16412
    9cd0:	000d883a 	mov	r6,zero
    9cd4:	1009883a 	mov	r4,r2
    9cd8:	180b883a 	mov	r5,r3
    9cdc:	0000f2c0 	call	f2c <__adddf3>
    9ce0:	d9c00517 	ldw	r7,20(sp)
    9ce4:	047f3034 	movhi	r17,64704
    9ce8:	1021883a 	mov	r16,r2
    9cec:	39ffffc4 	addi	r7,r7,-1
    9cf0:	d9c01315 	stw	r7,76(sp)
    9cf4:	1c63883a 	add	r17,r3,r17
    9cf8:	db000c17 	ldw	r12,48(sp)
    9cfc:	003bea06 	br	8ca8 <__alt_data_end+0xfffe8ca8>
    9d00:	dc000915 	stw	r16,36(sp)
    9d04:	003e0e06 	br	9540 <__alt_data_end+0xfffe9540>
    9d08:	01000e44 	movi	r4,57
    9d0c:	8825883a 	mov	r18,r17
    9d10:	9dc00044 	addi	r23,r19,1
    9d14:	99000005 	stb	r4,0(r19)
    9d18:	a023883a 	mov	r17,r20
    9d1c:	dc000915 	stw	r16,36(sp)
    9d20:	003da406 	br	93b4 <__alt_data_end+0xfffe93b4>
    9d24:	d9801417 	ldw	r6,80(sp)
    9d28:	d9c01517 	ldw	r7,84(sp)
    9d2c:	0009883a 	mov	r4,zero
    9d30:	014ff834 	movhi	r5,16352
    9d34:	0002af00 	call	2af0 <__subdf3>
    9d38:	880d883a 	mov	r6,r17
    9d3c:	a00f883a 	mov	r7,r20
    9d40:	1009883a 	mov	r4,r2
    9d44:	180b883a 	mov	r5,r3
    9d48:	00021a80 	call	21a8 <__gedf2>
    9d4c:	00bc7c0e 	bge	zero,r2,8f40 <__alt_data_end+0xfffe8f40>
    9d50:	01000c04 	movi	r4,48
    9d54:	00000106 	br	9d5c <_dtoa_r+0x1580>
    9d58:	102f883a 	mov	r23,r2
    9d5c:	b8bfffc4 	addi	r2,r23,-1
    9d60:	10c00007 	ldb	r3,0(r2)
    9d64:	193ffc26 	beq	r3,r4,9d58 <__alt_data_end+0xfffe9d58>
    9d68:	d9801317 	ldw	r6,76(sp)
    9d6c:	d9800515 	stw	r6,20(sp)
    9d70:	003c4406 	br	8e84 <__alt_data_end+0xfffe8e84>
    9d74:	d9801317 	ldw	r6,76(sp)
    9d78:	d9800515 	stw	r6,20(sp)
    9d7c:	003cea06 	br	9128 <__alt_data_end+0xfffe9128>
    9d80:	dd800f17 	ldw	r22,60(sp)
    9d84:	dcc01017 	ldw	r19,64(sp)
    9d88:	dc801217 	ldw	r18,72(sp)
    9d8c:	003c6c06 	br	8f40 <__alt_data_end+0xfffe8f40>
    9d90:	903e031e 	bne	r18,zero,95a0 <__alt_data_end+0xfffe95a0>
    9d94:	003ebb06 	br	9884 <__alt_data_end+0xfffe9884>
    9d98:	103e6c1e 	bne	r2,zero,974c <__alt_data_end+0xfffe974c>
    9d9c:	4080004c 	andi	r2,r8,1
    9da0:	103e6a26 	beq	r2,zero,974c <__alt_data_end+0xfffe974c>
    9da4:	003e6606 	br	9740 <__alt_data_end+0xfffe9740>
    9da8:	d8c00317 	ldw	r3,12(sp)
    9dac:	00800084 	movi	r2,2
    9db0:	10c02916 	blt	r2,r3,9e58 <_dtoa_r+0x167c>
    9db4:	d9000c17 	ldw	r4,48(sp)
    9db8:	003e8806 	br	97dc <__alt_data_end+0xfffe97dc>
    9dbc:	04000084 	movi	r16,2
    9dc0:	003b9d06 	br	8c38 <__alt_data_end+0xfffe8c38>
    9dc4:	d9001317 	ldw	r4,76(sp)
    9dc8:	d9000515 	stw	r4,20(sp)
    9dcc:	003cd606 	br	9128 <__alt_data_end+0xfffe9128>
    9dd0:	d8801317 	ldw	r2,76(sp)
    9dd4:	d8800515 	stw	r2,20(sp)
    9dd8:	003c2a06 	br	8e84 <__alt_data_end+0xfffe8e84>
    9ddc:	d9800317 	ldw	r6,12(sp)
    9de0:	00800084 	movi	r2,2
    9de4:	11801516 	blt	r2,r6,9e3c <_dtoa_r+0x1660>
    9de8:	d9c00c17 	ldw	r7,48(sp)
    9dec:	d9c00615 	stw	r7,24(sp)
    9df0:	003df706 	br	95d0 <__alt_data_end+0xfffe95d0>
    9df4:	193d3926 	beq	r3,r4,92dc <__alt_data_end+0xfffe92dc>
    9df8:	00c00f04 	movi	r3,60
    9dfc:	1885c83a 	sub	r2,r3,r2
    9e00:	003ddf06 	br	9580 <__alt_data_end+0xfffe9580>
    9e04:	e009883a 	mov	r4,fp
    9e08:	e0001115 	stw	zero,68(fp)
    9e0c:	000b883a 	mov	r5,zero
    9e10:	000a7a80 	call	a7a8 <_Balloc>
    9e14:	d8800715 	stw	r2,28(sp)
    9e18:	d8c00717 	ldw	r3,28(sp)
    9e1c:	00bfffc4 	movi	r2,-1
    9e20:	01000044 	movi	r4,1
    9e24:	d8800c15 	stw	r2,48(sp)
    9e28:	e0c01015 	stw	r3,64(fp)
    9e2c:	d9000b15 	stw	r4,44(sp)
    9e30:	d8800615 	stw	r2,24(sp)
    9e34:	d8002215 	stw	zero,136(sp)
    9e38:	003c4106 	br	8f40 <__alt_data_end+0xfffe8f40>
    9e3c:	d8c00c17 	ldw	r3,48(sp)
    9e40:	d8c00615 	stw	r3,24(sp)
    9e44:	003e7006 	br	9808 <__alt_data_end+0xfffe9808>
    9e48:	04400044 	movi	r17,1
    9e4c:	003b2006 	br	8ad0 <__alt_data_end+0xfffe8ad0>
    9e50:	000b883a 	mov	r5,zero
    9e54:	003b3d06 	br	8b4c <__alt_data_end+0xfffe8b4c>
    9e58:	d8800c17 	ldw	r2,48(sp)
    9e5c:	d8800615 	stw	r2,24(sp)
    9e60:	003e6906 	br	9808 <__alt_data_end+0xfffe9808>

00009e64 <__sflags>:
    9e64:	28800007 	ldb	r2,0(r5)
    9e68:	00c01c84 	movi	r3,114
    9e6c:	10c02426 	beq	r2,r3,9f00 <__sflags+0x9c>
    9e70:	00c01dc4 	movi	r3,119
    9e74:	10c01e26 	beq	r2,r3,9ef0 <__sflags+0x8c>
    9e78:	00c01844 	movi	r3,97
    9e7c:	10c00426 	beq	r2,r3,9e90 <__sflags+0x2c>
    9e80:	00800584 	movi	r2,22
    9e84:	20800015 	stw	r2,0(r4)
    9e88:	0005883a 	mov	r2,zero
    9e8c:	f800283a 	ret
    9e90:	02c08204 	movi	r11,520
    9e94:	01000044 	movi	r4,1
    9e98:	00804204 	movi	r2,264
    9e9c:	01c00ac4 	movi	r7,43
    9ea0:	02bff8c4 	movi	r10,-29
    9ea4:	027fff04 	movi	r9,-4
    9ea8:	02001e04 	movi	r8,120
    9eac:	29400044 	addi	r5,r5,1
    9eb0:	28c00007 	ldb	r3,0(r5)
    9eb4:	18000626 	beq	r3,zero,9ed0 <__sflags+0x6c>
    9eb8:	19c00826 	beq	r3,r7,9edc <__sflags+0x78>
    9ebc:	1a3ffb1e 	bne	r3,r8,9eac <__alt_data_end+0xfffe9eac>
    9ec0:	29400044 	addi	r5,r5,1
    9ec4:	28c00007 	ldb	r3,0(r5)
    9ec8:	21020014 	ori	r4,r4,2048
    9ecc:	183ffa1e 	bne	r3,zero,9eb8 <__alt_data_end+0xfffe9eb8>
    9ed0:	22c8b03a 	or	r4,r4,r11
    9ed4:	31000015 	stw	r4,0(r6)
    9ed8:	f800283a 	ret
    9edc:	1284703a 	and	r2,r2,r10
    9ee0:	2248703a 	and	r4,r4,r9
    9ee4:	10800414 	ori	r2,r2,16
    9ee8:	21000094 	ori	r4,r4,2
    9eec:	003fef06 	br	9eac <__alt_data_end+0xfffe9eac>
    9ef0:	02c18004 	movi	r11,1536
    9ef4:	01000044 	movi	r4,1
    9ef8:	00800204 	movi	r2,8
    9efc:	003fe706 	br	9e9c <__alt_data_end+0xfffe9e9c>
    9f00:	0017883a 	mov	r11,zero
    9f04:	0009883a 	mov	r4,zero
    9f08:	00800104 	movi	r2,4
    9f0c:	003fe306 	br	9e9c <__alt_data_end+0xfffe9e9c>

00009f10 <__sfvwrite_r>:
    9f10:	30800217 	ldw	r2,8(r6)
    9f14:	10006726 	beq	r2,zero,a0b4 <__sfvwrite_r+0x1a4>
    9f18:	28c0030b 	ldhu	r3,12(r5)
    9f1c:	defff404 	addi	sp,sp,-48
    9f20:	dd400715 	stw	r21,28(sp)
    9f24:	dd000615 	stw	r20,24(sp)
    9f28:	dc000215 	stw	r16,8(sp)
    9f2c:	dfc00b15 	stw	ra,44(sp)
    9f30:	df000a15 	stw	fp,40(sp)
    9f34:	ddc00915 	stw	r23,36(sp)
    9f38:	dd800815 	stw	r22,32(sp)
    9f3c:	dcc00515 	stw	r19,20(sp)
    9f40:	dc800415 	stw	r18,16(sp)
    9f44:	dc400315 	stw	r17,12(sp)
    9f48:	1880020c 	andi	r2,r3,8
    9f4c:	2821883a 	mov	r16,r5
    9f50:	202b883a 	mov	r21,r4
    9f54:	3029883a 	mov	r20,r6
    9f58:	10002726 	beq	r2,zero,9ff8 <__sfvwrite_r+0xe8>
    9f5c:	28800417 	ldw	r2,16(r5)
    9f60:	10002526 	beq	r2,zero,9ff8 <__sfvwrite_r+0xe8>
    9f64:	1880008c 	andi	r2,r3,2
    9f68:	a4400017 	ldw	r17,0(r20)
    9f6c:	10002a26 	beq	r2,zero,a018 <__sfvwrite_r+0x108>
    9f70:	05a00034 	movhi	r22,32768
    9f74:	0027883a 	mov	r19,zero
    9f78:	0025883a 	mov	r18,zero
    9f7c:	b5bf0004 	addi	r22,r22,-1024
    9f80:	980d883a 	mov	r6,r19
    9f84:	a809883a 	mov	r4,r21
    9f88:	90004626 	beq	r18,zero,a0a4 <__sfvwrite_r+0x194>
    9f8c:	900f883a 	mov	r7,r18
    9f90:	b480022e 	bgeu	r22,r18,9f9c <__sfvwrite_r+0x8c>
    9f94:	01e00034 	movhi	r7,32768
    9f98:	39ff0004 	addi	r7,r7,-1024
    9f9c:	80800917 	ldw	r2,36(r16)
    9fa0:	81400717 	ldw	r5,28(r16)
    9fa4:	103ee83a 	callr	r2
    9fa8:	00805a0e 	bge	zero,r2,a114 <__sfvwrite_r+0x204>
    9fac:	a0c00217 	ldw	r3,8(r20)
    9fb0:	98a7883a 	add	r19,r19,r2
    9fb4:	90a5c83a 	sub	r18,r18,r2
    9fb8:	1885c83a 	sub	r2,r3,r2
    9fbc:	a0800215 	stw	r2,8(r20)
    9fc0:	103fef1e 	bne	r2,zero,9f80 <__alt_data_end+0xfffe9f80>
    9fc4:	0005883a 	mov	r2,zero
    9fc8:	dfc00b17 	ldw	ra,44(sp)
    9fcc:	df000a17 	ldw	fp,40(sp)
    9fd0:	ddc00917 	ldw	r23,36(sp)
    9fd4:	dd800817 	ldw	r22,32(sp)
    9fd8:	dd400717 	ldw	r21,28(sp)
    9fdc:	dd000617 	ldw	r20,24(sp)
    9fe0:	dcc00517 	ldw	r19,20(sp)
    9fe4:	dc800417 	ldw	r18,16(sp)
    9fe8:	dc400317 	ldw	r17,12(sp)
    9fec:	dc000217 	ldw	r16,8(sp)
    9ff0:	dec00c04 	addi	sp,sp,48
    9ff4:	f800283a 	ret
    9ff8:	800b883a 	mov	r5,r16
    9ffc:	a809883a 	mov	r4,r21
    a000:	000828c0 	call	828c <__swsetup_r>
    a004:	1000ee1e 	bne	r2,zero,a3c0 <__sfvwrite_r+0x4b0>
    a008:	80c0030b 	ldhu	r3,12(r16)
    a00c:	a4400017 	ldw	r17,0(r20)
    a010:	1880008c 	andi	r2,r3,2
    a014:	103fd61e 	bne	r2,zero,9f70 <__alt_data_end+0xfffe9f70>
    a018:	1880004c 	andi	r2,r3,1
    a01c:	1000421e 	bne	r2,zero,a128 <__sfvwrite_r+0x218>
    a020:	0039883a 	mov	fp,zero
    a024:	0025883a 	mov	r18,zero
    a028:	90001a26 	beq	r18,zero,a094 <__sfvwrite_r+0x184>
    a02c:	1880800c 	andi	r2,r3,512
    a030:	84c00217 	ldw	r19,8(r16)
    a034:	10002126 	beq	r2,zero,a0bc <__sfvwrite_r+0x1ac>
    a038:	982f883a 	mov	r23,r19
    a03c:	94c09636 	bltu	r18,r19,a298 <__sfvwrite_r+0x388>
    a040:	1881200c 	andi	r2,r3,1152
    a044:	1000a11e 	bne	r2,zero,a2cc <__sfvwrite_r+0x3bc>
    a048:	81000017 	ldw	r4,0(r16)
    a04c:	b80d883a 	mov	r6,r23
    a050:	e00b883a 	mov	r5,fp
    a054:	000a64c0 	call	a64c <memmove>
    a058:	80c00217 	ldw	r3,8(r16)
    a05c:	81000017 	ldw	r4,0(r16)
    a060:	9005883a 	mov	r2,r18
    a064:	1ce7c83a 	sub	r19,r3,r19
    a068:	25cf883a 	add	r7,r4,r23
    a06c:	84c00215 	stw	r19,8(r16)
    a070:	81c00015 	stw	r7,0(r16)
    a074:	a0c00217 	ldw	r3,8(r20)
    a078:	e0b9883a 	add	fp,fp,r2
    a07c:	90a5c83a 	sub	r18,r18,r2
    a080:	18a7c83a 	sub	r19,r3,r2
    a084:	a4c00215 	stw	r19,8(r20)
    a088:	983fce26 	beq	r19,zero,9fc4 <__alt_data_end+0xfffe9fc4>
    a08c:	80c0030b 	ldhu	r3,12(r16)
    a090:	903fe61e 	bne	r18,zero,a02c <__alt_data_end+0xfffea02c>
    a094:	8f000017 	ldw	fp,0(r17)
    a098:	8c800117 	ldw	r18,4(r17)
    a09c:	8c400204 	addi	r17,r17,8
    a0a0:	003fe106 	br	a028 <__alt_data_end+0xfffea028>
    a0a4:	8cc00017 	ldw	r19,0(r17)
    a0a8:	8c800117 	ldw	r18,4(r17)
    a0ac:	8c400204 	addi	r17,r17,8
    a0b0:	003fb306 	br	9f80 <__alt_data_end+0xfffe9f80>
    a0b4:	0005883a 	mov	r2,zero
    a0b8:	f800283a 	ret
    a0bc:	81000017 	ldw	r4,0(r16)
    a0c0:	80800417 	ldw	r2,16(r16)
    a0c4:	11005a36 	bltu	r2,r4,a230 <__sfvwrite_r+0x320>
    a0c8:	85c00517 	ldw	r23,20(r16)
    a0cc:	95c05836 	bltu	r18,r23,a230 <__sfvwrite_r+0x320>
    a0d0:	00a00034 	movhi	r2,32768
    a0d4:	10bfffc4 	addi	r2,r2,-1
    a0d8:	9009883a 	mov	r4,r18
    a0dc:	1480012e 	bgeu	r2,r18,a0e4 <__sfvwrite_r+0x1d4>
    a0e0:	1009883a 	mov	r4,r2
    a0e4:	b80b883a 	mov	r5,r23
    a0e8:	000352c0 	call	352c <__divsi3>
    a0ec:	b80b883a 	mov	r5,r23
    a0f0:	1009883a 	mov	r4,r2
    a0f4:	0000f040 	call	f04 <__mulsi3>
    a0f8:	81400717 	ldw	r5,28(r16)
    a0fc:	80c00917 	ldw	r3,36(r16)
    a100:	100f883a 	mov	r7,r2
    a104:	e00d883a 	mov	r6,fp
    a108:	a809883a 	mov	r4,r21
    a10c:	183ee83a 	callr	r3
    a110:	00bfd816 	blt	zero,r2,a074 <__alt_data_end+0xfffea074>
    a114:	8080030b 	ldhu	r2,12(r16)
    a118:	10801014 	ori	r2,r2,64
    a11c:	8080030d 	sth	r2,12(r16)
    a120:	00bfffc4 	movi	r2,-1
    a124:	003fa806 	br	9fc8 <__alt_data_end+0xfffe9fc8>
    a128:	0027883a 	mov	r19,zero
    a12c:	0011883a 	mov	r8,zero
    a130:	0039883a 	mov	fp,zero
    a134:	0025883a 	mov	r18,zero
    a138:	90001f26 	beq	r18,zero,a1b8 <__sfvwrite_r+0x2a8>
    a13c:	40005a26 	beq	r8,zero,a2a8 <__sfvwrite_r+0x398>
    a140:	982d883a 	mov	r22,r19
    a144:	94c0012e 	bgeu	r18,r19,a14c <__sfvwrite_r+0x23c>
    a148:	902d883a 	mov	r22,r18
    a14c:	81000017 	ldw	r4,0(r16)
    a150:	80800417 	ldw	r2,16(r16)
    a154:	b02f883a 	mov	r23,r22
    a158:	81c00517 	ldw	r7,20(r16)
    a15c:	1100032e 	bgeu	r2,r4,a16c <__sfvwrite_r+0x25c>
    a160:	80c00217 	ldw	r3,8(r16)
    a164:	38c7883a 	add	r3,r7,r3
    a168:	1d801816 	blt	r3,r22,a1cc <__sfvwrite_r+0x2bc>
    a16c:	b1c03e16 	blt	r22,r7,a268 <__sfvwrite_r+0x358>
    a170:	80800917 	ldw	r2,36(r16)
    a174:	81400717 	ldw	r5,28(r16)
    a178:	e00d883a 	mov	r6,fp
    a17c:	da000115 	stw	r8,4(sp)
    a180:	a809883a 	mov	r4,r21
    a184:	103ee83a 	callr	r2
    a188:	102f883a 	mov	r23,r2
    a18c:	da000117 	ldw	r8,4(sp)
    a190:	00bfe00e 	bge	zero,r2,a114 <__alt_data_end+0xfffea114>
    a194:	9de7c83a 	sub	r19,r19,r23
    a198:	98001f26 	beq	r19,zero,a218 <__sfvwrite_r+0x308>
    a19c:	a0800217 	ldw	r2,8(r20)
    a1a0:	e5f9883a 	add	fp,fp,r23
    a1a4:	95e5c83a 	sub	r18,r18,r23
    a1a8:	15efc83a 	sub	r23,r2,r23
    a1ac:	a5c00215 	stw	r23,8(r20)
    a1b0:	b83f8426 	beq	r23,zero,9fc4 <__alt_data_end+0xfffe9fc4>
    a1b4:	903fe11e 	bne	r18,zero,a13c <__alt_data_end+0xfffea13c>
    a1b8:	8f000017 	ldw	fp,0(r17)
    a1bc:	8c800117 	ldw	r18,4(r17)
    a1c0:	0011883a 	mov	r8,zero
    a1c4:	8c400204 	addi	r17,r17,8
    a1c8:	003fdb06 	br	a138 <__alt_data_end+0xfffea138>
    a1cc:	180d883a 	mov	r6,r3
    a1d0:	e00b883a 	mov	r5,fp
    a1d4:	da000115 	stw	r8,4(sp)
    a1d8:	d8c00015 	stw	r3,0(sp)
    a1dc:	000a64c0 	call	a64c <memmove>
    a1e0:	d8c00017 	ldw	r3,0(sp)
    a1e4:	80800017 	ldw	r2,0(r16)
    a1e8:	800b883a 	mov	r5,r16
    a1ec:	a809883a 	mov	r4,r21
    a1f0:	10c5883a 	add	r2,r2,r3
    a1f4:	80800015 	stw	r2,0(r16)
    a1f8:	d8c00015 	stw	r3,0(sp)
    a1fc:	0003a380 	call	3a38 <_fflush_r>
    a200:	d8c00017 	ldw	r3,0(sp)
    a204:	da000117 	ldw	r8,4(sp)
    a208:	103fc21e 	bne	r2,zero,a114 <__alt_data_end+0xfffea114>
    a20c:	182f883a 	mov	r23,r3
    a210:	9de7c83a 	sub	r19,r19,r23
    a214:	983fe11e 	bne	r19,zero,a19c <__alt_data_end+0xfffea19c>
    a218:	800b883a 	mov	r5,r16
    a21c:	a809883a 	mov	r4,r21
    a220:	0003a380 	call	3a38 <_fflush_r>
    a224:	103fbb1e 	bne	r2,zero,a114 <__alt_data_end+0xfffea114>
    a228:	0011883a 	mov	r8,zero
    a22c:	003fdb06 	br	a19c <__alt_data_end+0xfffea19c>
    a230:	94c0012e 	bgeu	r18,r19,a238 <__sfvwrite_r+0x328>
    a234:	9027883a 	mov	r19,r18
    a238:	980d883a 	mov	r6,r19
    a23c:	e00b883a 	mov	r5,fp
    a240:	000a64c0 	call	a64c <memmove>
    a244:	80800217 	ldw	r2,8(r16)
    a248:	80c00017 	ldw	r3,0(r16)
    a24c:	14c5c83a 	sub	r2,r2,r19
    a250:	1cc7883a 	add	r3,r3,r19
    a254:	80800215 	stw	r2,8(r16)
    a258:	80c00015 	stw	r3,0(r16)
    a25c:	10004326 	beq	r2,zero,a36c <__sfvwrite_r+0x45c>
    a260:	9805883a 	mov	r2,r19
    a264:	003f8306 	br	a074 <__alt_data_end+0xfffea074>
    a268:	b00d883a 	mov	r6,r22
    a26c:	e00b883a 	mov	r5,fp
    a270:	da000115 	stw	r8,4(sp)
    a274:	000a64c0 	call	a64c <memmove>
    a278:	80800217 	ldw	r2,8(r16)
    a27c:	80c00017 	ldw	r3,0(r16)
    a280:	da000117 	ldw	r8,4(sp)
    a284:	1585c83a 	sub	r2,r2,r22
    a288:	1dad883a 	add	r22,r3,r22
    a28c:	80800215 	stw	r2,8(r16)
    a290:	85800015 	stw	r22,0(r16)
    a294:	003fbf06 	br	a194 <__alt_data_end+0xfffea194>
    a298:	81000017 	ldw	r4,0(r16)
    a29c:	9027883a 	mov	r19,r18
    a2a0:	902f883a 	mov	r23,r18
    a2a4:	003f6906 	br	a04c <__alt_data_end+0xfffea04c>
    a2a8:	900d883a 	mov	r6,r18
    a2ac:	01400284 	movi	r5,10
    a2b0:	e009883a 	mov	r4,fp
    a2b4:	000a5680 	call	a568 <memchr>
    a2b8:	10003e26 	beq	r2,zero,a3b4 <__sfvwrite_r+0x4a4>
    a2bc:	10800044 	addi	r2,r2,1
    a2c0:	1727c83a 	sub	r19,r2,fp
    a2c4:	02000044 	movi	r8,1
    a2c8:	003f9d06 	br	a140 <__alt_data_end+0xfffea140>
    a2cc:	80800517 	ldw	r2,20(r16)
    a2d0:	81400417 	ldw	r5,16(r16)
    a2d4:	81c00017 	ldw	r7,0(r16)
    a2d8:	10a7883a 	add	r19,r2,r2
    a2dc:	9885883a 	add	r2,r19,r2
    a2e0:	1026d7fa 	srli	r19,r2,31
    a2e4:	396dc83a 	sub	r22,r7,r5
    a2e8:	b1000044 	addi	r4,r22,1
    a2ec:	9885883a 	add	r2,r19,r2
    a2f0:	1027d07a 	srai	r19,r2,1
    a2f4:	2485883a 	add	r2,r4,r18
    a2f8:	980d883a 	mov	r6,r19
    a2fc:	9880022e 	bgeu	r19,r2,a308 <__sfvwrite_r+0x3f8>
    a300:	1027883a 	mov	r19,r2
    a304:	100d883a 	mov	r6,r2
    a308:	18c1000c 	andi	r3,r3,1024
    a30c:	18001c26 	beq	r3,zero,a380 <__sfvwrite_r+0x470>
    a310:	300b883a 	mov	r5,r6
    a314:	a809883a 	mov	r4,r21
    a318:	0004e440 	call	4e44 <_malloc_r>
    a31c:	102f883a 	mov	r23,r2
    a320:	10002926 	beq	r2,zero,a3c8 <__sfvwrite_r+0x4b8>
    a324:	81400417 	ldw	r5,16(r16)
    a328:	b00d883a 	mov	r6,r22
    a32c:	1009883a 	mov	r4,r2
    a330:	00056500 	call	5650 <memcpy>
    a334:	8080030b 	ldhu	r2,12(r16)
    a338:	00fedfc4 	movi	r3,-1153
    a33c:	10c4703a 	and	r2,r2,r3
    a340:	10802014 	ori	r2,r2,128
    a344:	8080030d 	sth	r2,12(r16)
    a348:	bd89883a 	add	r4,r23,r22
    a34c:	9d8fc83a 	sub	r7,r19,r22
    a350:	85c00415 	stw	r23,16(r16)
    a354:	84c00515 	stw	r19,20(r16)
    a358:	81000015 	stw	r4,0(r16)
    a35c:	9027883a 	mov	r19,r18
    a360:	81c00215 	stw	r7,8(r16)
    a364:	902f883a 	mov	r23,r18
    a368:	003f3806 	br	a04c <__alt_data_end+0xfffea04c>
    a36c:	800b883a 	mov	r5,r16
    a370:	a809883a 	mov	r4,r21
    a374:	0003a380 	call	3a38 <_fflush_r>
    a378:	103fb926 	beq	r2,zero,a260 <__alt_data_end+0xfffea260>
    a37c:	003f6506 	br	a114 <__alt_data_end+0xfffea114>
    a380:	a809883a 	mov	r4,r21
    a384:	000b8c00 	call	b8c0 <_realloc_r>
    a388:	102f883a 	mov	r23,r2
    a38c:	103fee1e 	bne	r2,zero,a348 <__alt_data_end+0xfffea348>
    a390:	81400417 	ldw	r5,16(r16)
    a394:	a809883a 	mov	r4,r21
    a398:	00043140 	call	4314 <_free_r>
    a39c:	8080030b 	ldhu	r2,12(r16)
    a3a0:	00ffdfc4 	movi	r3,-129
    a3a4:	1884703a 	and	r2,r3,r2
    a3a8:	00c00304 	movi	r3,12
    a3ac:	a8c00015 	stw	r3,0(r21)
    a3b0:	003f5906 	br	a118 <__alt_data_end+0xfffea118>
    a3b4:	94c00044 	addi	r19,r18,1
    a3b8:	02000044 	movi	r8,1
    a3bc:	003f6006 	br	a140 <__alt_data_end+0xfffea140>
    a3c0:	00bfffc4 	movi	r2,-1
    a3c4:	003f0006 	br	9fc8 <__alt_data_end+0xfffe9fc8>
    a3c8:	00800304 	movi	r2,12
    a3cc:	a8800015 	stw	r2,0(r21)
    a3d0:	8080030b 	ldhu	r2,12(r16)
    a3d4:	003f5006 	br	a118 <__alt_data_end+0xfffea118>

0000a3d8 <_isatty_r>:
    a3d8:	defffd04 	addi	sp,sp,-12
    a3dc:	dc000015 	stw	r16,0(sp)
    a3e0:	04000074 	movhi	r16,1
    a3e4:	dc400115 	stw	r17,4(sp)
    a3e8:	8412af04 	addi	r16,r16,19132
    a3ec:	2023883a 	mov	r17,r4
    a3f0:	2809883a 	mov	r4,r5
    a3f4:	dfc00215 	stw	ra,8(sp)
    a3f8:	80000015 	stw	zero,0(r16)
    a3fc:	000ed980 	call	ed98 <isatty>
    a400:	00ffffc4 	movi	r3,-1
    a404:	10c00526 	beq	r2,r3,a41c <_isatty_r+0x44>
    a408:	dfc00217 	ldw	ra,8(sp)
    a40c:	dc400117 	ldw	r17,4(sp)
    a410:	dc000017 	ldw	r16,0(sp)
    a414:	dec00304 	addi	sp,sp,12
    a418:	f800283a 	ret
    a41c:	80c00017 	ldw	r3,0(r16)
    a420:	183ff926 	beq	r3,zero,a408 <__alt_data_end+0xfffea408>
    a424:	88c00015 	stw	r3,0(r17)
    a428:	003ff706 	br	a408 <__alt_data_end+0xfffea408>

0000a42c <_setlocale_r>:
    a42c:	30001b26 	beq	r6,zero,a49c <_setlocale_r+0x70>
    a430:	01400074 	movhi	r5,1
    a434:	defffe04 	addi	sp,sp,-8
    a438:	2944d804 	addi	r5,r5,4960
    a43c:	3009883a 	mov	r4,r6
    a440:	dc000015 	stw	r16,0(sp)
    a444:	dfc00115 	stw	ra,4(sp)
    a448:	3021883a 	mov	r16,r6
    a44c:	000be980 	call	be98 <strcmp>
    a450:	1000061e 	bne	r2,zero,a46c <_setlocale_r+0x40>
    a454:	00800074 	movhi	r2,1
    a458:	1084b904 	addi	r2,r2,4836
    a45c:	dfc00117 	ldw	ra,4(sp)
    a460:	dc000017 	ldw	r16,0(sp)
    a464:	dec00204 	addi	sp,sp,8
    a468:	f800283a 	ret
    a46c:	01400074 	movhi	r5,1
    a470:	2944b904 	addi	r5,r5,4836
    a474:	8009883a 	mov	r4,r16
    a478:	000be980 	call	be98 <strcmp>
    a47c:	103ff526 	beq	r2,zero,a454 <__alt_data_end+0xfffea454>
    a480:	01400074 	movhi	r5,1
    a484:	2944c304 	addi	r5,r5,4876
    a488:	8009883a 	mov	r4,r16
    a48c:	000be980 	call	be98 <strcmp>
    a490:	103ff026 	beq	r2,zero,a454 <__alt_data_end+0xfffea454>
    a494:	0005883a 	mov	r2,zero
    a498:	003ff006 	br	a45c <__alt_data_end+0xfffea45c>
    a49c:	00800074 	movhi	r2,1
    a4a0:	1084b904 	addi	r2,r2,4836
    a4a4:	f800283a 	ret

0000a4a8 <__locale_charset>:
    a4a8:	00800074 	movhi	r2,1
    a4ac:	10874c04 	addi	r2,r2,7472
    a4b0:	f800283a 	ret

0000a4b4 <__locale_mb_cur_max>:
    a4b4:	00800074 	movhi	r2,1
    a4b8:	108be804 	addi	r2,r2,12192
    a4bc:	10800017 	ldw	r2,0(r2)
    a4c0:	f800283a 	ret

0000a4c4 <__locale_msgcharset>:
    a4c4:	00800074 	movhi	r2,1
    a4c8:	10874404 	addi	r2,r2,7440
    a4cc:	f800283a 	ret

0000a4d0 <__locale_cjk_lang>:
    a4d0:	0005883a 	mov	r2,zero
    a4d4:	f800283a 	ret

0000a4d8 <_localeconv_r>:
    a4d8:	00800074 	movhi	r2,1
    a4dc:	10875404 	addi	r2,r2,7504
    a4e0:	f800283a 	ret

0000a4e4 <setlocale>:
    a4e4:	00800074 	movhi	r2,1
    a4e8:	108be504 	addi	r2,r2,12180
    a4ec:	280d883a 	mov	r6,r5
    a4f0:	200b883a 	mov	r5,r4
    a4f4:	11000017 	ldw	r4,0(r2)
    a4f8:	000a42c1 	jmpi	a42c <_setlocale_r>

0000a4fc <localeconv>:
    a4fc:	00800074 	movhi	r2,1
    a500:	10875404 	addi	r2,r2,7504
    a504:	f800283a 	ret

0000a508 <_lseek_r>:
    a508:	defffd04 	addi	sp,sp,-12
    a50c:	2805883a 	mov	r2,r5
    a510:	dc000015 	stw	r16,0(sp)
    a514:	04000074 	movhi	r16,1
    a518:	dc400115 	stw	r17,4(sp)
    a51c:	300b883a 	mov	r5,r6
    a520:	8412af04 	addi	r16,r16,19132
    a524:	2023883a 	mov	r17,r4
    a528:	380d883a 	mov	r6,r7
    a52c:	1009883a 	mov	r4,r2
    a530:	dfc00215 	stw	ra,8(sp)
    a534:	80000015 	stw	zero,0(r16)
    a538:	000ef6c0 	call	ef6c <lseek>
    a53c:	00ffffc4 	movi	r3,-1
    a540:	10c00526 	beq	r2,r3,a558 <_lseek_r+0x50>
    a544:	dfc00217 	ldw	ra,8(sp)
    a548:	dc400117 	ldw	r17,4(sp)
    a54c:	dc000017 	ldw	r16,0(sp)
    a550:	dec00304 	addi	sp,sp,12
    a554:	f800283a 	ret
    a558:	80c00017 	ldw	r3,0(r16)
    a55c:	183ff926 	beq	r3,zero,a544 <__alt_data_end+0xfffea544>
    a560:	88c00015 	stw	r3,0(r17)
    a564:	003ff706 	br	a544 <__alt_data_end+0xfffea544>

0000a568 <memchr>:
    a568:	208000cc 	andi	r2,r4,3
    a56c:	280f883a 	mov	r7,r5
    a570:	10003426 	beq	r2,zero,a644 <memchr+0xdc>
    a574:	30bfffc4 	addi	r2,r6,-1
    a578:	30001a26 	beq	r6,zero,a5e4 <memchr+0x7c>
    a57c:	20c00003 	ldbu	r3,0(r4)
    a580:	29803fcc 	andi	r6,r5,255
    a584:	30c0051e 	bne	r6,r3,a59c <memchr+0x34>
    a588:	00001806 	br	a5ec <memchr+0x84>
    a58c:	10001526 	beq	r2,zero,a5e4 <memchr+0x7c>
    a590:	20c00003 	ldbu	r3,0(r4)
    a594:	10bfffc4 	addi	r2,r2,-1
    a598:	30c01426 	beq	r6,r3,a5ec <memchr+0x84>
    a59c:	21000044 	addi	r4,r4,1
    a5a0:	20c000cc 	andi	r3,r4,3
    a5a4:	183ff91e 	bne	r3,zero,a58c <__alt_data_end+0xfffea58c>
    a5a8:	020000c4 	movi	r8,3
    a5ac:	40801136 	bltu	r8,r2,a5f4 <memchr+0x8c>
    a5b0:	10000c26 	beq	r2,zero,a5e4 <memchr+0x7c>
    a5b4:	20c00003 	ldbu	r3,0(r4)
    a5b8:	29403fcc 	andi	r5,r5,255
    a5bc:	28c00b26 	beq	r5,r3,a5ec <memchr+0x84>
    a5c0:	20c00044 	addi	r3,r4,1
    a5c4:	39803fcc 	andi	r6,r7,255
    a5c8:	2089883a 	add	r4,r4,r2
    a5cc:	00000306 	br	a5dc <memchr+0x74>
    a5d0:	18c00044 	addi	r3,r3,1
    a5d4:	197fffc3 	ldbu	r5,-1(r3)
    a5d8:	31400526 	beq	r6,r5,a5f0 <memchr+0x88>
    a5dc:	1805883a 	mov	r2,r3
    a5e0:	20fffb1e 	bne	r4,r3,a5d0 <__alt_data_end+0xfffea5d0>
    a5e4:	0005883a 	mov	r2,zero
    a5e8:	f800283a 	ret
    a5ec:	2005883a 	mov	r2,r4
    a5f0:	f800283a 	ret
    a5f4:	28c03fcc 	andi	r3,r5,255
    a5f8:	1812923a 	slli	r9,r3,8
    a5fc:	02ffbff4 	movhi	r11,65279
    a600:	02a02074 	movhi	r10,32897
    a604:	48d2b03a 	or	r9,r9,r3
    a608:	4806943a 	slli	r3,r9,16
    a60c:	5affbfc4 	addi	r11,r11,-257
    a610:	52a02004 	addi	r10,r10,-32640
    a614:	48d2b03a 	or	r9,r9,r3
    a618:	20c00017 	ldw	r3,0(r4)
    a61c:	48c6f03a 	xor	r3,r9,r3
    a620:	1acd883a 	add	r6,r3,r11
    a624:	00c6303a 	nor	r3,zero,r3
    a628:	30c6703a 	and	r3,r6,r3
    a62c:	1a86703a 	and	r3,r3,r10
    a630:	183fe01e 	bne	r3,zero,a5b4 <__alt_data_end+0xfffea5b4>
    a634:	10bfff04 	addi	r2,r2,-4
    a638:	21000104 	addi	r4,r4,4
    a63c:	40bff636 	bltu	r8,r2,a618 <__alt_data_end+0xfffea618>
    a640:	003fdb06 	br	a5b0 <__alt_data_end+0xfffea5b0>
    a644:	3005883a 	mov	r2,r6
    a648:	003fd706 	br	a5a8 <__alt_data_end+0xfffea5a8>

0000a64c <memmove>:
    a64c:	2005883a 	mov	r2,r4
    a650:	29000b2e 	bgeu	r5,r4,a680 <memmove+0x34>
    a654:	298f883a 	add	r7,r5,r6
    a658:	21c0092e 	bgeu	r4,r7,a680 <memmove+0x34>
    a65c:	2187883a 	add	r3,r4,r6
    a660:	198bc83a 	sub	r5,r3,r6
    a664:	30004826 	beq	r6,zero,a788 <memmove+0x13c>
    a668:	39ffffc4 	addi	r7,r7,-1
    a66c:	39000003 	ldbu	r4,0(r7)
    a670:	18ffffc4 	addi	r3,r3,-1
    a674:	19000005 	stb	r4,0(r3)
    a678:	28fffb1e 	bne	r5,r3,a668 <__alt_data_end+0xfffea668>
    a67c:	f800283a 	ret
    a680:	00c003c4 	movi	r3,15
    a684:	1980412e 	bgeu	r3,r6,a78c <memmove+0x140>
    a688:	2886b03a 	or	r3,r5,r2
    a68c:	18c000cc 	andi	r3,r3,3
    a690:	1800401e 	bne	r3,zero,a794 <memmove+0x148>
    a694:	33fffc04 	addi	r15,r6,-16
    a698:	781ed13a 	srli	r15,r15,4
    a69c:	28c00104 	addi	r3,r5,4
    a6a0:	13400104 	addi	r13,r2,4
    a6a4:	781c913a 	slli	r14,r15,4
    a6a8:	2b000204 	addi	r12,r5,8
    a6ac:	12c00204 	addi	r11,r2,8
    a6b0:	73800504 	addi	r14,r14,20
    a6b4:	2a800304 	addi	r10,r5,12
    a6b8:	12400304 	addi	r9,r2,12
    a6bc:	2b9d883a 	add	r14,r5,r14
    a6c0:	2811883a 	mov	r8,r5
    a6c4:	100f883a 	mov	r7,r2
    a6c8:	41000017 	ldw	r4,0(r8)
    a6cc:	39c00404 	addi	r7,r7,16
    a6d0:	18c00404 	addi	r3,r3,16
    a6d4:	393ffc15 	stw	r4,-16(r7)
    a6d8:	193ffc17 	ldw	r4,-16(r3)
    a6dc:	6b400404 	addi	r13,r13,16
    a6e0:	5ac00404 	addi	r11,r11,16
    a6e4:	693ffc15 	stw	r4,-16(r13)
    a6e8:	61000017 	ldw	r4,0(r12)
    a6ec:	4a400404 	addi	r9,r9,16
    a6f0:	42000404 	addi	r8,r8,16
    a6f4:	593ffc15 	stw	r4,-16(r11)
    a6f8:	51000017 	ldw	r4,0(r10)
    a6fc:	63000404 	addi	r12,r12,16
    a700:	52800404 	addi	r10,r10,16
    a704:	493ffc15 	stw	r4,-16(r9)
    a708:	1bbfef1e 	bne	r3,r14,a6c8 <__alt_data_end+0xfffea6c8>
    a70c:	79000044 	addi	r4,r15,1
    a710:	2008913a 	slli	r4,r4,4
    a714:	328003cc 	andi	r10,r6,15
    a718:	02c000c4 	movi	r11,3
    a71c:	1107883a 	add	r3,r2,r4
    a720:	290b883a 	add	r5,r5,r4
    a724:	5a801e2e 	bgeu	r11,r10,a7a0 <memmove+0x154>
    a728:	1813883a 	mov	r9,r3
    a72c:	2811883a 	mov	r8,r5
    a730:	500f883a 	mov	r7,r10
    a734:	41000017 	ldw	r4,0(r8)
    a738:	4a400104 	addi	r9,r9,4
    a73c:	39ffff04 	addi	r7,r7,-4
    a740:	493fff15 	stw	r4,-4(r9)
    a744:	42000104 	addi	r8,r8,4
    a748:	59fffa36 	bltu	r11,r7,a734 <__alt_data_end+0xfffea734>
    a74c:	513fff04 	addi	r4,r10,-4
    a750:	2008d0ba 	srli	r4,r4,2
    a754:	318000cc 	andi	r6,r6,3
    a758:	21000044 	addi	r4,r4,1
    a75c:	2109883a 	add	r4,r4,r4
    a760:	2109883a 	add	r4,r4,r4
    a764:	1907883a 	add	r3,r3,r4
    a768:	290b883a 	add	r5,r5,r4
    a76c:	30000b26 	beq	r6,zero,a79c <memmove+0x150>
    a770:	198d883a 	add	r6,r3,r6
    a774:	29c00003 	ldbu	r7,0(r5)
    a778:	18c00044 	addi	r3,r3,1
    a77c:	29400044 	addi	r5,r5,1
    a780:	19ffffc5 	stb	r7,-1(r3)
    a784:	19bffb1e 	bne	r3,r6,a774 <__alt_data_end+0xfffea774>
    a788:	f800283a 	ret
    a78c:	1007883a 	mov	r3,r2
    a790:	003ff606 	br	a76c <__alt_data_end+0xfffea76c>
    a794:	1007883a 	mov	r3,r2
    a798:	003ff506 	br	a770 <__alt_data_end+0xfffea770>
    a79c:	f800283a 	ret
    a7a0:	500d883a 	mov	r6,r10
    a7a4:	003ff106 	br	a76c <__alt_data_end+0xfffea76c>

0000a7a8 <_Balloc>:
    a7a8:	20801317 	ldw	r2,76(r4)
    a7ac:	defffc04 	addi	sp,sp,-16
    a7b0:	dc400115 	stw	r17,4(sp)
    a7b4:	dc000015 	stw	r16,0(sp)
    a7b8:	dfc00315 	stw	ra,12(sp)
    a7bc:	dc800215 	stw	r18,8(sp)
    a7c0:	2023883a 	mov	r17,r4
    a7c4:	2821883a 	mov	r16,r5
    a7c8:	10000f26 	beq	r2,zero,a808 <_Balloc+0x60>
    a7cc:	8407883a 	add	r3,r16,r16
    a7d0:	18c7883a 	add	r3,r3,r3
    a7d4:	10c7883a 	add	r3,r2,r3
    a7d8:	18800017 	ldw	r2,0(r3)
    a7dc:	10001126 	beq	r2,zero,a824 <_Balloc+0x7c>
    a7e0:	11000017 	ldw	r4,0(r2)
    a7e4:	19000015 	stw	r4,0(r3)
    a7e8:	10000415 	stw	zero,16(r2)
    a7ec:	10000315 	stw	zero,12(r2)
    a7f0:	dfc00317 	ldw	ra,12(sp)
    a7f4:	dc800217 	ldw	r18,8(sp)
    a7f8:	dc400117 	ldw	r17,4(sp)
    a7fc:	dc000017 	ldw	r16,0(sp)
    a800:	dec00404 	addi	sp,sp,16
    a804:	f800283a 	ret
    a808:	01800844 	movi	r6,33
    a80c:	01400104 	movi	r5,4
    a810:	000d66c0 	call	d66c <_calloc_r>
    a814:	88801315 	stw	r2,76(r17)
    a818:	103fec1e 	bne	r2,zero,a7cc <__alt_data_end+0xfffea7cc>
    a81c:	0005883a 	mov	r2,zero
    a820:	003ff306 	br	a7f0 <__alt_data_end+0xfffea7f0>
    a824:	01400044 	movi	r5,1
    a828:	2c24983a 	sll	r18,r5,r16
    a82c:	8809883a 	mov	r4,r17
    a830:	91800144 	addi	r6,r18,5
    a834:	318d883a 	add	r6,r6,r6
    a838:	318d883a 	add	r6,r6,r6
    a83c:	000d66c0 	call	d66c <_calloc_r>
    a840:	103ff626 	beq	r2,zero,a81c <__alt_data_end+0xfffea81c>
    a844:	14000115 	stw	r16,4(r2)
    a848:	14800215 	stw	r18,8(r2)
    a84c:	003fe606 	br	a7e8 <__alt_data_end+0xfffea7e8>

0000a850 <_Bfree>:
    a850:	28000826 	beq	r5,zero,a874 <_Bfree+0x24>
    a854:	28c00117 	ldw	r3,4(r5)
    a858:	20801317 	ldw	r2,76(r4)
    a85c:	18c7883a 	add	r3,r3,r3
    a860:	18c7883a 	add	r3,r3,r3
    a864:	10c5883a 	add	r2,r2,r3
    a868:	10c00017 	ldw	r3,0(r2)
    a86c:	28c00015 	stw	r3,0(r5)
    a870:	11400015 	stw	r5,0(r2)
    a874:	f800283a 	ret

0000a878 <__multadd>:
    a878:	defff704 	addi	sp,sp,-36
    a87c:	dc800215 	stw	r18,8(sp)
    a880:	2c800417 	ldw	r18,16(r5)
    a884:	dd800615 	stw	r22,24(sp)
    a888:	dd400515 	stw	r21,20(sp)
    a88c:	dd000415 	stw	r20,16(sp)
    a890:	dcc00315 	stw	r19,12(sp)
    a894:	dc400115 	stw	r17,4(sp)
    a898:	dc000015 	stw	r16,0(sp)
    a89c:	dfc00815 	stw	ra,32(sp)
    a8a0:	ddc00715 	stw	r23,28(sp)
    a8a4:	2827883a 	mov	r19,r5
    a8a8:	2029883a 	mov	r20,r4
    a8ac:	3023883a 	mov	r17,r6
    a8b0:	3821883a 	mov	r16,r7
    a8b4:	2d400504 	addi	r21,r5,20
    a8b8:	002d883a 	mov	r22,zero
    a8bc:	adc00017 	ldw	r23,0(r21)
    a8c0:	880b883a 	mov	r5,r17
    a8c4:	ad400104 	addi	r21,r21,4
    a8c8:	b93fffcc 	andi	r4,r23,65535
    a8cc:	0000f040 	call	f04 <__mulsi3>
    a8d0:	b808d43a 	srli	r4,r23,16
    a8d4:	880b883a 	mov	r5,r17
    a8d8:	1421883a 	add	r16,r2,r16
    a8dc:	0000f040 	call	f04 <__mulsi3>
    a8e0:	800ed43a 	srli	r7,r16,16
    a8e4:	80ffffcc 	andi	r3,r16,65535
    a8e8:	b5800044 	addi	r22,r22,1
    a8ec:	11c5883a 	add	r2,r2,r7
    a8f0:	100e943a 	slli	r7,r2,16
    a8f4:	1020d43a 	srli	r16,r2,16
    a8f8:	38c7883a 	add	r3,r7,r3
    a8fc:	a8ffff15 	stw	r3,-4(r21)
    a900:	b4bfee16 	blt	r22,r18,a8bc <__alt_data_end+0xfffea8bc>
    a904:	80000926 	beq	r16,zero,a92c <__multadd+0xb4>
    a908:	98800217 	ldw	r2,8(r19)
    a90c:	9080130e 	bge	r18,r2,a95c <__multadd+0xe4>
    a910:	90800144 	addi	r2,r18,5
    a914:	1085883a 	add	r2,r2,r2
    a918:	1085883a 	add	r2,r2,r2
    a91c:	9885883a 	add	r2,r19,r2
    a920:	14000015 	stw	r16,0(r2)
    a924:	94800044 	addi	r18,r18,1
    a928:	9c800415 	stw	r18,16(r19)
    a92c:	9805883a 	mov	r2,r19
    a930:	dfc00817 	ldw	ra,32(sp)
    a934:	ddc00717 	ldw	r23,28(sp)
    a938:	dd800617 	ldw	r22,24(sp)
    a93c:	dd400517 	ldw	r21,20(sp)
    a940:	dd000417 	ldw	r20,16(sp)
    a944:	dcc00317 	ldw	r19,12(sp)
    a948:	dc800217 	ldw	r18,8(sp)
    a94c:	dc400117 	ldw	r17,4(sp)
    a950:	dc000017 	ldw	r16,0(sp)
    a954:	dec00904 	addi	sp,sp,36
    a958:	f800283a 	ret
    a95c:	99400117 	ldw	r5,4(r19)
    a960:	a009883a 	mov	r4,r20
    a964:	29400044 	addi	r5,r5,1
    a968:	000a7a80 	call	a7a8 <_Balloc>
    a96c:	99800417 	ldw	r6,16(r19)
    a970:	99400304 	addi	r5,r19,12
    a974:	11000304 	addi	r4,r2,12
    a978:	31800084 	addi	r6,r6,2
    a97c:	318d883a 	add	r6,r6,r6
    a980:	318d883a 	add	r6,r6,r6
    a984:	1023883a 	mov	r17,r2
    a988:	00056500 	call	5650 <memcpy>
    a98c:	98000a26 	beq	r19,zero,a9b8 <__multadd+0x140>
    a990:	98c00117 	ldw	r3,4(r19)
    a994:	a0801317 	ldw	r2,76(r20)
    a998:	18c7883a 	add	r3,r3,r3
    a99c:	18c7883a 	add	r3,r3,r3
    a9a0:	10c5883a 	add	r2,r2,r3
    a9a4:	10c00017 	ldw	r3,0(r2)
    a9a8:	98c00015 	stw	r3,0(r19)
    a9ac:	14c00015 	stw	r19,0(r2)
    a9b0:	8827883a 	mov	r19,r17
    a9b4:	003fd606 	br	a910 <__alt_data_end+0xfffea910>
    a9b8:	8827883a 	mov	r19,r17
    a9bc:	003fd406 	br	a910 <__alt_data_end+0xfffea910>

0000a9c0 <__s2b>:
    a9c0:	defff904 	addi	sp,sp,-28
    a9c4:	dc400115 	stw	r17,4(sp)
    a9c8:	dc000015 	stw	r16,0(sp)
    a9cc:	2023883a 	mov	r17,r4
    a9d0:	2821883a 	mov	r16,r5
    a9d4:	39000204 	addi	r4,r7,8
    a9d8:	01400244 	movi	r5,9
    a9dc:	dcc00315 	stw	r19,12(sp)
    a9e0:	dc800215 	stw	r18,8(sp)
    a9e4:	dfc00615 	stw	ra,24(sp)
    a9e8:	dd400515 	stw	r21,20(sp)
    a9ec:	dd000415 	stw	r20,16(sp)
    a9f0:	3825883a 	mov	r18,r7
    a9f4:	3027883a 	mov	r19,r6
    a9f8:	000352c0 	call	352c <__divsi3>
    a9fc:	00c00044 	movi	r3,1
    aa00:	000b883a 	mov	r5,zero
    aa04:	1880030e 	bge	r3,r2,aa14 <__s2b+0x54>
    aa08:	18c7883a 	add	r3,r3,r3
    aa0c:	29400044 	addi	r5,r5,1
    aa10:	18bffd16 	blt	r3,r2,aa08 <__alt_data_end+0xfffeaa08>
    aa14:	8809883a 	mov	r4,r17
    aa18:	000a7a80 	call	a7a8 <_Balloc>
    aa1c:	d8c00717 	ldw	r3,28(sp)
    aa20:	10c00515 	stw	r3,20(r2)
    aa24:	00c00044 	movi	r3,1
    aa28:	10c00415 	stw	r3,16(r2)
    aa2c:	00c00244 	movi	r3,9
    aa30:	1cc0210e 	bge	r3,r19,aab8 <__s2b+0xf8>
    aa34:	80eb883a 	add	r21,r16,r3
    aa38:	a829883a 	mov	r20,r21
    aa3c:	84e1883a 	add	r16,r16,r19
    aa40:	a1c00007 	ldb	r7,0(r20)
    aa44:	01800284 	movi	r6,10
    aa48:	a5000044 	addi	r20,r20,1
    aa4c:	100b883a 	mov	r5,r2
    aa50:	39fff404 	addi	r7,r7,-48
    aa54:	8809883a 	mov	r4,r17
    aa58:	000a8780 	call	a878 <__multadd>
    aa5c:	a43ff81e 	bne	r20,r16,aa40 <__alt_data_end+0xfffeaa40>
    aa60:	ace1883a 	add	r16,r21,r19
    aa64:	843ffe04 	addi	r16,r16,-8
    aa68:	9c800a0e 	bge	r19,r18,aa94 <__s2b+0xd4>
    aa6c:	94e5c83a 	sub	r18,r18,r19
    aa70:	84a5883a 	add	r18,r16,r18
    aa74:	81c00007 	ldb	r7,0(r16)
    aa78:	01800284 	movi	r6,10
    aa7c:	84000044 	addi	r16,r16,1
    aa80:	100b883a 	mov	r5,r2
    aa84:	39fff404 	addi	r7,r7,-48
    aa88:	8809883a 	mov	r4,r17
    aa8c:	000a8780 	call	a878 <__multadd>
    aa90:	84bff81e 	bne	r16,r18,aa74 <__alt_data_end+0xfffeaa74>
    aa94:	dfc00617 	ldw	ra,24(sp)
    aa98:	dd400517 	ldw	r21,20(sp)
    aa9c:	dd000417 	ldw	r20,16(sp)
    aaa0:	dcc00317 	ldw	r19,12(sp)
    aaa4:	dc800217 	ldw	r18,8(sp)
    aaa8:	dc400117 	ldw	r17,4(sp)
    aaac:	dc000017 	ldw	r16,0(sp)
    aab0:	dec00704 	addi	sp,sp,28
    aab4:	f800283a 	ret
    aab8:	84000284 	addi	r16,r16,10
    aabc:	1827883a 	mov	r19,r3
    aac0:	003fe906 	br	aa68 <__alt_data_end+0xfffeaa68>

0000aac4 <__hi0bits>:
    aac4:	20bfffec 	andhi	r2,r4,65535
    aac8:	1000141e 	bne	r2,zero,ab1c <__hi0bits+0x58>
    aacc:	2008943a 	slli	r4,r4,16
    aad0:	00800404 	movi	r2,16
    aad4:	20ffc02c 	andhi	r3,r4,65280
    aad8:	1800021e 	bne	r3,zero,aae4 <__hi0bits+0x20>
    aadc:	2008923a 	slli	r4,r4,8
    aae0:	10800204 	addi	r2,r2,8
    aae4:	20fc002c 	andhi	r3,r4,61440
    aae8:	1800021e 	bne	r3,zero,aaf4 <__hi0bits+0x30>
    aaec:	2008913a 	slli	r4,r4,4
    aaf0:	10800104 	addi	r2,r2,4
    aaf4:	20f0002c 	andhi	r3,r4,49152
    aaf8:	1800031e 	bne	r3,zero,ab08 <__hi0bits+0x44>
    aafc:	2109883a 	add	r4,r4,r4
    ab00:	10800084 	addi	r2,r2,2
    ab04:	2109883a 	add	r4,r4,r4
    ab08:	20000316 	blt	r4,zero,ab18 <__hi0bits+0x54>
    ab0c:	2110002c 	andhi	r4,r4,16384
    ab10:	2000041e 	bne	r4,zero,ab24 <__hi0bits+0x60>
    ab14:	00800804 	movi	r2,32
    ab18:	f800283a 	ret
    ab1c:	0005883a 	mov	r2,zero
    ab20:	003fec06 	br	aad4 <__alt_data_end+0xfffeaad4>
    ab24:	10800044 	addi	r2,r2,1
    ab28:	f800283a 	ret

0000ab2c <__lo0bits>:
    ab2c:	20c00017 	ldw	r3,0(r4)
    ab30:	188001cc 	andi	r2,r3,7
    ab34:	10000826 	beq	r2,zero,ab58 <__lo0bits+0x2c>
    ab38:	1880004c 	andi	r2,r3,1
    ab3c:	1000211e 	bne	r2,zero,abc4 <__lo0bits+0x98>
    ab40:	1880008c 	andi	r2,r3,2
    ab44:	1000211e 	bne	r2,zero,abcc <__lo0bits+0xa0>
    ab48:	1806d0ba 	srli	r3,r3,2
    ab4c:	00800084 	movi	r2,2
    ab50:	20c00015 	stw	r3,0(r4)
    ab54:	f800283a 	ret
    ab58:	18bfffcc 	andi	r2,r3,65535
    ab5c:	10001326 	beq	r2,zero,abac <__lo0bits+0x80>
    ab60:	0005883a 	mov	r2,zero
    ab64:	19403fcc 	andi	r5,r3,255
    ab68:	2800021e 	bne	r5,zero,ab74 <__lo0bits+0x48>
    ab6c:	1806d23a 	srli	r3,r3,8
    ab70:	10800204 	addi	r2,r2,8
    ab74:	194003cc 	andi	r5,r3,15
    ab78:	2800021e 	bne	r5,zero,ab84 <__lo0bits+0x58>
    ab7c:	1806d13a 	srli	r3,r3,4
    ab80:	10800104 	addi	r2,r2,4
    ab84:	194000cc 	andi	r5,r3,3
    ab88:	2800021e 	bne	r5,zero,ab94 <__lo0bits+0x68>
    ab8c:	1806d0ba 	srli	r3,r3,2
    ab90:	10800084 	addi	r2,r2,2
    ab94:	1940004c 	andi	r5,r3,1
    ab98:	2800081e 	bne	r5,zero,abbc <__lo0bits+0x90>
    ab9c:	1806d07a 	srli	r3,r3,1
    aba0:	1800051e 	bne	r3,zero,abb8 <__lo0bits+0x8c>
    aba4:	00800804 	movi	r2,32
    aba8:	f800283a 	ret
    abac:	1806d43a 	srli	r3,r3,16
    abb0:	00800404 	movi	r2,16
    abb4:	003feb06 	br	ab64 <__alt_data_end+0xfffeab64>
    abb8:	10800044 	addi	r2,r2,1
    abbc:	20c00015 	stw	r3,0(r4)
    abc0:	f800283a 	ret
    abc4:	0005883a 	mov	r2,zero
    abc8:	f800283a 	ret
    abcc:	1806d07a 	srli	r3,r3,1
    abd0:	00800044 	movi	r2,1
    abd4:	20c00015 	stw	r3,0(r4)
    abd8:	f800283a 	ret

0000abdc <__i2b>:
    abdc:	defffd04 	addi	sp,sp,-12
    abe0:	dc000015 	stw	r16,0(sp)
    abe4:	04000044 	movi	r16,1
    abe8:	dc400115 	stw	r17,4(sp)
    abec:	2823883a 	mov	r17,r5
    abf0:	800b883a 	mov	r5,r16
    abf4:	dfc00215 	stw	ra,8(sp)
    abf8:	000a7a80 	call	a7a8 <_Balloc>
    abfc:	14400515 	stw	r17,20(r2)
    ac00:	14000415 	stw	r16,16(r2)
    ac04:	dfc00217 	ldw	ra,8(sp)
    ac08:	dc400117 	ldw	r17,4(sp)
    ac0c:	dc000017 	ldw	r16,0(sp)
    ac10:	dec00304 	addi	sp,sp,12
    ac14:	f800283a 	ret

0000ac18 <__multiply>:
    ac18:	deffef04 	addi	sp,sp,-68
    ac1c:	dc400815 	stw	r17,32(sp)
    ac20:	dc000715 	stw	r16,28(sp)
    ac24:	34400417 	ldw	r17,16(r6)
    ac28:	2c000417 	ldw	r16,16(r5)
    ac2c:	dd800d15 	stw	r22,52(sp)
    ac30:	dc800915 	stw	r18,36(sp)
    ac34:	dfc01015 	stw	ra,64(sp)
    ac38:	df000f15 	stw	fp,60(sp)
    ac3c:	ddc00e15 	stw	r23,56(sp)
    ac40:	dd400c15 	stw	r21,48(sp)
    ac44:	dd000b15 	stw	r20,44(sp)
    ac48:	dcc00a15 	stw	r19,40(sp)
    ac4c:	2825883a 	mov	r18,r5
    ac50:	302d883a 	mov	r22,r6
    ac54:	8440050e 	bge	r16,r17,ac6c <__multiply+0x54>
    ac58:	8007883a 	mov	r3,r16
    ac5c:	3025883a 	mov	r18,r6
    ac60:	8821883a 	mov	r16,r17
    ac64:	282d883a 	mov	r22,r5
    ac68:	1823883a 	mov	r17,r3
    ac6c:	90800217 	ldw	r2,8(r18)
    ac70:	8447883a 	add	r3,r16,r17
    ac74:	d8c00215 	stw	r3,8(sp)
    ac78:	91400117 	ldw	r5,4(r18)
    ac7c:	10c0010e 	bge	r2,r3,ac84 <__multiply+0x6c>
    ac80:	29400044 	addi	r5,r5,1
    ac84:	000a7a80 	call	a7a8 <_Balloc>
    ac88:	d8c00217 	ldw	r3,8(sp)
    ac8c:	d8800615 	stw	r2,24(sp)
    ac90:	18eb883a 	add	r21,r3,r3
    ac94:	ad6b883a 	add	r21,r21,r21
    ac98:	10c00504 	addi	r3,r2,20
    ac9c:	1d6b883a 	add	r21,r3,r21
    aca0:	d8c00115 	stw	r3,4(sp)
    aca4:	dd400315 	stw	r21,12(sp)
    aca8:	1805883a 	mov	r2,r3
    acac:	1d40042e 	bgeu	r3,r21,acc0 <__multiply+0xa8>
    acb0:	d8c00317 	ldw	r3,12(sp)
    acb4:	10000015 	stw	zero,0(r2)
    acb8:	10800104 	addi	r2,r2,4
    acbc:	10fffc36 	bltu	r2,r3,acb0 <__alt_data_end+0xfffeacb0>
    acc0:	8c63883a 	add	r17,r17,r17
    acc4:	b5800504 	addi	r22,r22,20
    acc8:	8c63883a 	add	r17,r17,r17
    accc:	94800504 	addi	r18,r18,20
    acd0:	8421883a 	add	r16,r16,r16
    acd4:	b463883a 	add	r17,r22,r17
    acd8:	8421883a 	add	r16,r16,r16
    acdc:	dd800015 	stw	r22,0(sp)
    ace0:	dc800415 	stw	r18,16(sp)
    ace4:	dc400515 	stw	r17,20(sp)
    ace8:	9429883a 	add	r20,r18,r16
    acec:	b4404f2e 	bgeu	r22,r17,ae2c <__multiply+0x214>
    acf0:	d8c00017 	ldw	r3,0(sp)
    acf4:	1c800017 	ldw	r18,0(r3)
    acf8:	947fffcc 	andi	r17,r18,65535
    acfc:	88001e26 	beq	r17,zero,ad78 <__multiply+0x160>
    ad00:	dd800117 	ldw	r22,4(sp)
    ad04:	dd400417 	ldw	r21,16(sp)
    ad08:	0027883a 	mov	r19,zero
    ad0c:	ac800017 	ldw	r18,0(r21)
    ad10:	b4000017 	ldw	r16,0(r22)
    ad14:	880b883a 	mov	r5,r17
    ad18:	913fffcc 	andi	r4,r18,65535
    ad1c:	0000f040 	call	f04 <__mulsi3>
    ad20:	9008d43a 	srli	r4,r18,16
    ad24:	84bfffcc 	andi	r18,r16,65535
    ad28:	1485883a 	add	r2,r2,r18
    ad2c:	14e5883a 	add	r18,r2,r19
    ad30:	8020d43a 	srli	r16,r16,16
    ad34:	9026d43a 	srli	r19,r18,16
    ad38:	880b883a 	mov	r5,r17
    ad3c:	0000f040 	call	f04 <__mulsi3>
    ad40:	1405883a 	add	r2,r2,r16
    ad44:	14e1883a 	add	r16,r2,r19
    ad48:	90ffffcc 	andi	r3,r18,65535
    ad4c:	8024943a 	slli	r18,r16,16
    ad50:	ad400104 	addi	r21,r21,4
    ad54:	b005883a 	mov	r2,r22
    ad58:	90c6b03a 	or	r3,r18,r3
    ad5c:	b0c00015 	stw	r3,0(r22)
    ad60:	8026d43a 	srli	r19,r16,16
    ad64:	b5800104 	addi	r22,r22,4
    ad68:	ad3fe836 	bltu	r21,r20,ad0c <__alt_data_end+0xfffead0c>
    ad6c:	d8c00017 	ldw	r3,0(sp)
    ad70:	14c00115 	stw	r19,4(r2)
    ad74:	1c800017 	ldw	r18,0(r3)
    ad78:	9024d43a 	srli	r18,r18,16
    ad7c:	90002226 	beq	r18,zero,ae08 <__multiply+0x1f0>
    ad80:	d8c00117 	ldw	r3,4(sp)
    ad84:	dd800417 	ldw	r22,16(sp)
    ad88:	002f883a 	mov	r23,zero
    ad8c:	1f000017 	ldw	fp,0(r3)
    ad90:	1823883a 	mov	r17,r3
    ad94:	182b883a 	mov	r21,r3
    ad98:	e021883a 	mov	r16,fp
    ad9c:	00000106 	br	ada4 <__multiply+0x18c>
    ada0:	982b883a 	mov	r21,r19
    ada4:	b100000b 	ldhu	r4,0(r22)
    ada8:	8020d43a 	srli	r16,r16,16
    adac:	900b883a 	mov	r5,r18
    adb0:	0000f040 	call	f04 <__mulsi3>
    adb4:	1405883a 	add	r2,r2,r16
    adb8:	15ef883a 	add	r23,r2,r23
    adbc:	b804943a 	slli	r2,r23,16
    adc0:	e0ffffcc 	andi	r3,fp,65535
    adc4:	8c400104 	addi	r17,r17,4
    adc8:	10c6b03a 	or	r3,r2,r3
    adcc:	88ffff15 	stw	r3,-4(r17)
    add0:	b5800104 	addi	r22,r22,4
    add4:	b13fff17 	ldw	r4,-4(r22)
    add8:	acc00104 	addi	r19,r21,4
    addc:	900b883a 	mov	r5,r18
    ade0:	2008d43a 	srli	r4,r4,16
    ade4:	9c000017 	ldw	r16,0(r19)
    ade8:	0000f040 	call	f04 <__mulsi3>
    adec:	b806d43a 	srli	r3,r23,16
    adf0:	813fffcc 	andi	r4,r16,65535
    adf4:	1105883a 	add	r2,r2,r4
    adf8:	10f9883a 	add	fp,r2,r3
    adfc:	e02ed43a 	srli	r23,fp,16
    ae00:	b53fe736 	bltu	r22,r20,ada0 <__alt_data_end+0xfffeada0>
    ae04:	af000115 	stw	fp,4(r21)
    ae08:	d8c00017 	ldw	r3,0(sp)
    ae0c:	d9000517 	ldw	r4,20(sp)
    ae10:	18c00104 	addi	r3,r3,4
    ae14:	d8c00015 	stw	r3,0(sp)
    ae18:	d8c00117 	ldw	r3,4(sp)
    ae1c:	18c00104 	addi	r3,r3,4
    ae20:	d8c00115 	stw	r3,4(sp)
    ae24:	d8c00017 	ldw	r3,0(sp)
    ae28:	193fb136 	bltu	r3,r4,acf0 <__alt_data_end+0xfffeacf0>
    ae2c:	d8c00217 	ldw	r3,8(sp)
    ae30:	00c00c0e 	bge	zero,r3,ae64 <__multiply+0x24c>
    ae34:	d8c00317 	ldw	r3,12(sp)
    ae38:	18bfff17 	ldw	r2,-4(r3)
    ae3c:	1d7fff04 	addi	r21,r3,-4
    ae40:	10000326 	beq	r2,zero,ae50 <__multiply+0x238>
    ae44:	00000706 	br	ae64 <__multiply+0x24c>
    ae48:	a8800017 	ldw	r2,0(r21)
    ae4c:	1000051e 	bne	r2,zero,ae64 <__multiply+0x24c>
    ae50:	d8c00217 	ldw	r3,8(sp)
    ae54:	ad7fff04 	addi	r21,r21,-4
    ae58:	18ffffc4 	addi	r3,r3,-1
    ae5c:	d8c00215 	stw	r3,8(sp)
    ae60:	183ff91e 	bne	r3,zero,ae48 <__alt_data_end+0xfffeae48>
    ae64:	d8c00617 	ldw	r3,24(sp)
    ae68:	d9000217 	ldw	r4,8(sp)
    ae6c:	1805883a 	mov	r2,r3
    ae70:	19000415 	stw	r4,16(r3)
    ae74:	dfc01017 	ldw	ra,64(sp)
    ae78:	df000f17 	ldw	fp,60(sp)
    ae7c:	ddc00e17 	ldw	r23,56(sp)
    ae80:	dd800d17 	ldw	r22,52(sp)
    ae84:	dd400c17 	ldw	r21,48(sp)
    ae88:	dd000b17 	ldw	r20,44(sp)
    ae8c:	dcc00a17 	ldw	r19,40(sp)
    ae90:	dc800917 	ldw	r18,36(sp)
    ae94:	dc400817 	ldw	r17,32(sp)
    ae98:	dc000717 	ldw	r16,28(sp)
    ae9c:	dec01104 	addi	sp,sp,68
    aea0:	f800283a 	ret

0000aea4 <__pow5mult>:
    aea4:	defffa04 	addi	sp,sp,-24
    aea8:	dcc00315 	stw	r19,12(sp)
    aeac:	dc000015 	stw	r16,0(sp)
    aeb0:	dfc00515 	stw	ra,20(sp)
    aeb4:	dd000415 	stw	r20,16(sp)
    aeb8:	dc800215 	stw	r18,8(sp)
    aebc:	dc400115 	stw	r17,4(sp)
    aec0:	308000cc 	andi	r2,r6,3
    aec4:	3021883a 	mov	r16,r6
    aec8:	2027883a 	mov	r19,r4
    aecc:	10002f1e 	bne	r2,zero,af8c <__pow5mult+0xe8>
    aed0:	2825883a 	mov	r18,r5
    aed4:	8021d0ba 	srai	r16,r16,2
    aed8:	80001a26 	beq	r16,zero,af44 <__pow5mult+0xa0>
    aedc:	9c401217 	ldw	r17,72(r19)
    aee0:	8800061e 	bne	r17,zero,aefc <__pow5mult+0x58>
    aee4:	00003406 	br	afb8 <__pow5mult+0x114>
    aee8:	8021d07a 	srai	r16,r16,1
    aeec:	80001526 	beq	r16,zero,af44 <__pow5mult+0xa0>
    aef0:	88800017 	ldw	r2,0(r17)
    aef4:	10001c26 	beq	r2,zero,af68 <__pow5mult+0xc4>
    aef8:	1023883a 	mov	r17,r2
    aefc:	8080004c 	andi	r2,r16,1
    af00:	103ff926 	beq	r2,zero,aee8 <__alt_data_end+0xfffeaee8>
    af04:	880d883a 	mov	r6,r17
    af08:	900b883a 	mov	r5,r18
    af0c:	9809883a 	mov	r4,r19
    af10:	000ac180 	call	ac18 <__multiply>
    af14:	90001b26 	beq	r18,zero,af84 <__pow5mult+0xe0>
    af18:	91000117 	ldw	r4,4(r18)
    af1c:	98c01317 	ldw	r3,76(r19)
    af20:	8021d07a 	srai	r16,r16,1
    af24:	2109883a 	add	r4,r4,r4
    af28:	2109883a 	add	r4,r4,r4
    af2c:	1907883a 	add	r3,r3,r4
    af30:	19000017 	ldw	r4,0(r3)
    af34:	91000015 	stw	r4,0(r18)
    af38:	1c800015 	stw	r18,0(r3)
    af3c:	1025883a 	mov	r18,r2
    af40:	803feb1e 	bne	r16,zero,aef0 <__alt_data_end+0xfffeaef0>
    af44:	9005883a 	mov	r2,r18
    af48:	dfc00517 	ldw	ra,20(sp)
    af4c:	dd000417 	ldw	r20,16(sp)
    af50:	dcc00317 	ldw	r19,12(sp)
    af54:	dc800217 	ldw	r18,8(sp)
    af58:	dc400117 	ldw	r17,4(sp)
    af5c:	dc000017 	ldw	r16,0(sp)
    af60:	dec00604 	addi	sp,sp,24
    af64:	f800283a 	ret
    af68:	880d883a 	mov	r6,r17
    af6c:	880b883a 	mov	r5,r17
    af70:	9809883a 	mov	r4,r19
    af74:	000ac180 	call	ac18 <__multiply>
    af78:	88800015 	stw	r2,0(r17)
    af7c:	10000015 	stw	zero,0(r2)
    af80:	003fdd06 	br	aef8 <__alt_data_end+0xfffeaef8>
    af84:	1025883a 	mov	r18,r2
    af88:	003fd706 	br	aee8 <__alt_data_end+0xfffeaee8>
    af8c:	10bfffc4 	addi	r2,r2,-1
    af90:	1085883a 	add	r2,r2,r2
    af94:	00c00074 	movhi	r3,1
    af98:	18c4db04 	addi	r3,r3,4972
    af9c:	1085883a 	add	r2,r2,r2
    afa0:	1885883a 	add	r2,r3,r2
    afa4:	11800017 	ldw	r6,0(r2)
    afa8:	000f883a 	mov	r7,zero
    afac:	000a8780 	call	a878 <__multadd>
    afb0:	1025883a 	mov	r18,r2
    afb4:	003fc706 	br	aed4 <__alt_data_end+0xfffeaed4>
    afb8:	05000044 	movi	r20,1
    afbc:	a00b883a 	mov	r5,r20
    afc0:	9809883a 	mov	r4,r19
    afc4:	000a7a80 	call	a7a8 <_Balloc>
    afc8:	1023883a 	mov	r17,r2
    afcc:	00809c44 	movi	r2,625
    afd0:	88800515 	stw	r2,20(r17)
    afd4:	8d000415 	stw	r20,16(r17)
    afd8:	9c401215 	stw	r17,72(r19)
    afdc:	88000015 	stw	zero,0(r17)
    afe0:	003fc606 	br	aefc <__alt_data_end+0xfffeaefc>

0000afe4 <__lshift>:
    afe4:	defff904 	addi	sp,sp,-28
    afe8:	dd400515 	stw	r21,20(sp)
    afec:	dcc00315 	stw	r19,12(sp)
    aff0:	302bd17a 	srai	r21,r6,5
    aff4:	2cc00417 	ldw	r19,16(r5)
    aff8:	28800217 	ldw	r2,8(r5)
    affc:	dd000415 	stw	r20,16(sp)
    b000:	ace7883a 	add	r19,r21,r19
    b004:	dc800215 	stw	r18,8(sp)
    b008:	dc400115 	stw	r17,4(sp)
    b00c:	dc000015 	stw	r16,0(sp)
    b010:	dfc00615 	stw	ra,24(sp)
    b014:	9c000044 	addi	r16,r19,1
    b018:	2823883a 	mov	r17,r5
    b01c:	3029883a 	mov	r20,r6
    b020:	2025883a 	mov	r18,r4
    b024:	29400117 	ldw	r5,4(r5)
    b028:	1400030e 	bge	r2,r16,b038 <__lshift+0x54>
    b02c:	1085883a 	add	r2,r2,r2
    b030:	29400044 	addi	r5,r5,1
    b034:	143ffd16 	blt	r2,r16,b02c <__alt_data_end+0xfffeb02c>
    b038:	9009883a 	mov	r4,r18
    b03c:	000a7a80 	call	a7a8 <_Balloc>
    b040:	10c00504 	addi	r3,r2,20
    b044:	0540070e 	bge	zero,r21,b064 <__lshift+0x80>
    b048:	ad6b883a 	add	r21,r21,r21
    b04c:	ad6b883a 	add	r21,r21,r21
    b050:	1809883a 	mov	r4,r3
    b054:	1d47883a 	add	r3,r3,r21
    b058:	20000015 	stw	zero,0(r4)
    b05c:	21000104 	addi	r4,r4,4
    b060:	193ffd1e 	bne	r3,r4,b058 <__alt_data_end+0xfffeb058>
    b064:	8a000417 	ldw	r8,16(r17)
    b068:	89000504 	addi	r4,r17,20
    b06c:	a18007cc 	andi	r6,r20,31
    b070:	4211883a 	add	r8,r8,r8
    b074:	4211883a 	add	r8,r8,r8
    b078:	2211883a 	add	r8,r4,r8
    b07c:	30002326 	beq	r6,zero,b10c <__lshift+0x128>
    b080:	02400804 	movi	r9,32
    b084:	4993c83a 	sub	r9,r9,r6
    b088:	000b883a 	mov	r5,zero
    b08c:	21c00017 	ldw	r7,0(r4)
    b090:	1815883a 	mov	r10,r3
    b094:	18c00104 	addi	r3,r3,4
    b098:	398e983a 	sll	r7,r7,r6
    b09c:	21000104 	addi	r4,r4,4
    b0a0:	394ab03a 	or	r5,r7,r5
    b0a4:	197fff15 	stw	r5,-4(r3)
    b0a8:	217fff17 	ldw	r5,-4(r4)
    b0ac:	2a4ad83a 	srl	r5,r5,r9
    b0b0:	223ff636 	bltu	r4,r8,b08c <__alt_data_end+0xfffeb08c>
    b0b4:	51400115 	stw	r5,4(r10)
    b0b8:	28001a1e 	bne	r5,zero,b124 <__lshift+0x140>
    b0bc:	843fffc4 	addi	r16,r16,-1
    b0c0:	14000415 	stw	r16,16(r2)
    b0c4:	88000826 	beq	r17,zero,b0e8 <__lshift+0x104>
    b0c8:	89000117 	ldw	r4,4(r17)
    b0cc:	90c01317 	ldw	r3,76(r18)
    b0d0:	2109883a 	add	r4,r4,r4
    b0d4:	2109883a 	add	r4,r4,r4
    b0d8:	1907883a 	add	r3,r3,r4
    b0dc:	19000017 	ldw	r4,0(r3)
    b0e0:	89000015 	stw	r4,0(r17)
    b0e4:	1c400015 	stw	r17,0(r3)
    b0e8:	dfc00617 	ldw	ra,24(sp)
    b0ec:	dd400517 	ldw	r21,20(sp)
    b0f0:	dd000417 	ldw	r20,16(sp)
    b0f4:	dcc00317 	ldw	r19,12(sp)
    b0f8:	dc800217 	ldw	r18,8(sp)
    b0fc:	dc400117 	ldw	r17,4(sp)
    b100:	dc000017 	ldw	r16,0(sp)
    b104:	dec00704 	addi	sp,sp,28
    b108:	f800283a 	ret
    b10c:	21400017 	ldw	r5,0(r4)
    b110:	18c00104 	addi	r3,r3,4
    b114:	21000104 	addi	r4,r4,4
    b118:	197fff15 	stw	r5,-4(r3)
    b11c:	223ffb36 	bltu	r4,r8,b10c <__alt_data_end+0xfffeb10c>
    b120:	003fe606 	br	b0bc <__alt_data_end+0xfffeb0bc>
    b124:	9c000084 	addi	r16,r19,2
    b128:	003fe406 	br	b0bc <__alt_data_end+0xfffeb0bc>

0000b12c <__mcmp>:
    b12c:	20800417 	ldw	r2,16(r4)
    b130:	28c00417 	ldw	r3,16(r5)
    b134:	10c5c83a 	sub	r2,r2,r3
    b138:	1000111e 	bne	r2,zero,b180 <__mcmp+0x54>
    b13c:	18c7883a 	add	r3,r3,r3
    b140:	18c7883a 	add	r3,r3,r3
    b144:	21000504 	addi	r4,r4,20
    b148:	29400504 	addi	r5,r5,20
    b14c:	20c5883a 	add	r2,r4,r3
    b150:	28cb883a 	add	r5,r5,r3
    b154:	00000106 	br	b15c <__mcmp+0x30>
    b158:	20800a2e 	bgeu	r4,r2,b184 <__mcmp+0x58>
    b15c:	10bfff04 	addi	r2,r2,-4
    b160:	297fff04 	addi	r5,r5,-4
    b164:	11800017 	ldw	r6,0(r2)
    b168:	28c00017 	ldw	r3,0(r5)
    b16c:	30fffa26 	beq	r6,r3,b158 <__alt_data_end+0xfffeb158>
    b170:	30c00236 	bltu	r6,r3,b17c <__mcmp+0x50>
    b174:	00800044 	movi	r2,1
    b178:	f800283a 	ret
    b17c:	00bfffc4 	movi	r2,-1
    b180:	f800283a 	ret
    b184:	0005883a 	mov	r2,zero
    b188:	f800283a 	ret

0000b18c <__mdiff>:
    b18c:	28c00417 	ldw	r3,16(r5)
    b190:	30800417 	ldw	r2,16(r6)
    b194:	defffa04 	addi	sp,sp,-24
    b198:	dcc00315 	stw	r19,12(sp)
    b19c:	dc800215 	stw	r18,8(sp)
    b1a0:	dfc00515 	stw	ra,20(sp)
    b1a4:	dd000415 	stw	r20,16(sp)
    b1a8:	dc400115 	stw	r17,4(sp)
    b1ac:	dc000015 	stw	r16,0(sp)
    b1b0:	1887c83a 	sub	r3,r3,r2
    b1b4:	2825883a 	mov	r18,r5
    b1b8:	3027883a 	mov	r19,r6
    b1bc:	1800141e 	bne	r3,zero,b210 <__mdiff+0x84>
    b1c0:	1085883a 	add	r2,r2,r2
    b1c4:	1085883a 	add	r2,r2,r2
    b1c8:	2a000504 	addi	r8,r5,20
    b1cc:	34000504 	addi	r16,r6,20
    b1d0:	4087883a 	add	r3,r8,r2
    b1d4:	8085883a 	add	r2,r16,r2
    b1d8:	00000106 	br	b1e0 <__mdiff+0x54>
    b1dc:	40c0592e 	bgeu	r8,r3,b344 <__mdiff+0x1b8>
    b1e0:	18ffff04 	addi	r3,r3,-4
    b1e4:	10bfff04 	addi	r2,r2,-4
    b1e8:	19c00017 	ldw	r7,0(r3)
    b1ec:	11400017 	ldw	r5,0(r2)
    b1f0:	397ffa26 	beq	r7,r5,b1dc <__alt_data_end+0xfffeb1dc>
    b1f4:	3940592e 	bgeu	r7,r5,b35c <__mdiff+0x1d0>
    b1f8:	9005883a 	mov	r2,r18
    b1fc:	4023883a 	mov	r17,r8
    b200:	9825883a 	mov	r18,r19
    b204:	05000044 	movi	r20,1
    b208:	1027883a 	mov	r19,r2
    b20c:	00000406 	br	b220 <__mdiff+0x94>
    b210:	18005616 	blt	r3,zero,b36c <__mdiff+0x1e0>
    b214:	34400504 	addi	r17,r6,20
    b218:	2c000504 	addi	r16,r5,20
    b21c:	0029883a 	mov	r20,zero
    b220:	91400117 	ldw	r5,4(r18)
    b224:	000a7a80 	call	a7a8 <_Balloc>
    b228:	92400417 	ldw	r9,16(r18)
    b22c:	9b000417 	ldw	r12,16(r19)
    b230:	12c00504 	addi	r11,r2,20
    b234:	4a51883a 	add	r8,r9,r9
    b238:	6319883a 	add	r12,r12,r12
    b23c:	4211883a 	add	r8,r8,r8
    b240:	6319883a 	add	r12,r12,r12
    b244:	15000315 	stw	r20,12(r2)
    b248:	8211883a 	add	r8,r16,r8
    b24c:	8b19883a 	add	r12,r17,r12
    b250:	0007883a 	mov	r3,zero
    b254:	81400017 	ldw	r5,0(r16)
    b258:	89c00017 	ldw	r7,0(r17)
    b25c:	59800104 	addi	r6,r11,4
    b260:	293fffcc 	andi	r4,r5,65535
    b264:	20c7883a 	add	r3,r4,r3
    b268:	393fffcc 	andi	r4,r7,65535
    b26c:	1909c83a 	sub	r4,r3,r4
    b270:	280ad43a 	srli	r5,r5,16
    b274:	380ed43a 	srli	r7,r7,16
    b278:	2007d43a 	srai	r3,r4,16
    b27c:	213fffcc 	andi	r4,r4,65535
    b280:	29cbc83a 	sub	r5,r5,r7
    b284:	28c7883a 	add	r3,r5,r3
    b288:	180a943a 	slli	r5,r3,16
    b28c:	8c400104 	addi	r17,r17,4
    b290:	84000104 	addi	r16,r16,4
    b294:	2908b03a 	or	r4,r5,r4
    b298:	59000015 	stw	r4,0(r11)
    b29c:	1807d43a 	srai	r3,r3,16
    b2a0:	3015883a 	mov	r10,r6
    b2a4:	3017883a 	mov	r11,r6
    b2a8:	8b3fea36 	bltu	r17,r12,b254 <__alt_data_end+0xfffeb254>
    b2ac:	8200162e 	bgeu	r16,r8,b308 <__mdiff+0x17c>
    b2b0:	8017883a 	mov	r11,r16
    b2b4:	59400017 	ldw	r5,0(r11)
    b2b8:	31800104 	addi	r6,r6,4
    b2bc:	5ac00104 	addi	r11,r11,4
    b2c0:	293fffcc 	andi	r4,r5,65535
    b2c4:	20c7883a 	add	r3,r4,r3
    b2c8:	280ed43a 	srli	r7,r5,16
    b2cc:	180bd43a 	srai	r5,r3,16
    b2d0:	193fffcc 	andi	r4,r3,65535
    b2d4:	3947883a 	add	r3,r7,r5
    b2d8:	180a943a 	slli	r5,r3,16
    b2dc:	1807d43a 	srai	r3,r3,16
    b2e0:	2908b03a 	or	r4,r5,r4
    b2e4:	313fff15 	stw	r4,-4(r6)
    b2e8:	5a3ff236 	bltu	r11,r8,b2b4 <__alt_data_end+0xfffeb2b4>
    b2ec:	0406303a 	nor	r3,zero,r16
    b2f0:	1a07883a 	add	r3,r3,r8
    b2f4:	1806d0ba 	srli	r3,r3,2
    b2f8:	18c00044 	addi	r3,r3,1
    b2fc:	18c7883a 	add	r3,r3,r3
    b300:	18c7883a 	add	r3,r3,r3
    b304:	50d5883a 	add	r10,r10,r3
    b308:	50ffff04 	addi	r3,r10,-4
    b30c:	2000041e 	bne	r4,zero,b320 <__mdiff+0x194>
    b310:	18ffff04 	addi	r3,r3,-4
    b314:	19000017 	ldw	r4,0(r3)
    b318:	4a7fffc4 	addi	r9,r9,-1
    b31c:	203ffc26 	beq	r4,zero,b310 <__alt_data_end+0xfffeb310>
    b320:	12400415 	stw	r9,16(r2)
    b324:	dfc00517 	ldw	ra,20(sp)
    b328:	dd000417 	ldw	r20,16(sp)
    b32c:	dcc00317 	ldw	r19,12(sp)
    b330:	dc800217 	ldw	r18,8(sp)
    b334:	dc400117 	ldw	r17,4(sp)
    b338:	dc000017 	ldw	r16,0(sp)
    b33c:	dec00604 	addi	sp,sp,24
    b340:	f800283a 	ret
    b344:	000b883a 	mov	r5,zero
    b348:	000a7a80 	call	a7a8 <_Balloc>
    b34c:	00c00044 	movi	r3,1
    b350:	10c00415 	stw	r3,16(r2)
    b354:	10000515 	stw	zero,20(r2)
    b358:	003ff206 	br	b324 <__alt_data_end+0xfffeb324>
    b35c:	8023883a 	mov	r17,r16
    b360:	0029883a 	mov	r20,zero
    b364:	4021883a 	mov	r16,r8
    b368:	003fad06 	br	b220 <__alt_data_end+0xfffeb220>
    b36c:	9005883a 	mov	r2,r18
    b370:	94400504 	addi	r17,r18,20
    b374:	9c000504 	addi	r16,r19,20
    b378:	9825883a 	mov	r18,r19
    b37c:	05000044 	movi	r20,1
    b380:	1027883a 	mov	r19,r2
    b384:	003fa606 	br	b220 <__alt_data_end+0xfffeb220>

0000b388 <__ulp>:
    b388:	295ffc2c 	andhi	r5,r5,32752
    b38c:	00bf3034 	movhi	r2,64704
    b390:	2887883a 	add	r3,r5,r2
    b394:	00c0020e 	bge	zero,r3,b3a0 <__ulp+0x18>
    b398:	0005883a 	mov	r2,zero
    b39c:	f800283a 	ret
    b3a0:	00c7c83a 	sub	r3,zero,r3
    b3a4:	1807d53a 	srai	r3,r3,20
    b3a8:	008004c4 	movi	r2,19
    b3ac:	10c00b0e 	bge	r2,r3,b3dc <__ulp+0x54>
    b3b0:	18bffb04 	addi	r2,r3,-20
    b3b4:	01000784 	movi	r4,30
    b3b8:	0007883a 	mov	r3,zero
    b3bc:	20800516 	blt	r4,r2,b3d4 <__ulp+0x4c>
    b3c0:	010007c4 	movi	r4,31
    b3c4:	2089c83a 	sub	r4,r4,r2
    b3c8:	00800044 	movi	r2,1
    b3cc:	1104983a 	sll	r2,r2,r4
    b3d0:	f800283a 	ret
    b3d4:	00800044 	movi	r2,1
    b3d8:	f800283a 	ret
    b3dc:	01400234 	movhi	r5,8
    b3e0:	28c7d83a 	sra	r3,r5,r3
    b3e4:	0005883a 	mov	r2,zero
    b3e8:	f800283a 	ret

0000b3ec <__b2d>:
    b3ec:	defffa04 	addi	sp,sp,-24
    b3f0:	dc000015 	stw	r16,0(sp)
    b3f4:	24000417 	ldw	r16,16(r4)
    b3f8:	dc400115 	stw	r17,4(sp)
    b3fc:	24400504 	addi	r17,r4,20
    b400:	8421883a 	add	r16,r16,r16
    b404:	8421883a 	add	r16,r16,r16
    b408:	8c21883a 	add	r16,r17,r16
    b40c:	dc800215 	stw	r18,8(sp)
    b410:	84bfff17 	ldw	r18,-4(r16)
    b414:	dd000415 	stw	r20,16(sp)
    b418:	dcc00315 	stw	r19,12(sp)
    b41c:	9009883a 	mov	r4,r18
    b420:	2829883a 	mov	r20,r5
    b424:	dfc00515 	stw	ra,20(sp)
    b428:	000aac40 	call	aac4 <__hi0bits>
    b42c:	00c00804 	movi	r3,32
    b430:	1889c83a 	sub	r4,r3,r2
    b434:	a1000015 	stw	r4,0(r20)
    b438:	01000284 	movi	r4,10
    b43c:	84ffff04 	addi	r19,r16,-4
    b440:	20801216 	blt	r4,r2,b48c <__b2d+0xa0>
    b444:	018002c4 	movi	r6,11
    b448:	308dc83a 	sub	r6,r6,r2
    b44c:	9186d83a 	srl	r3,r18,r6
    b450:	18cffc34 	orhi	r3,r3,16368
    b454:	8cc0212e 	bgeu	r17,r19,b4dc <__b2d+0xf0>
    b458:	813ffe17 	ldw	r4,-8(r16)
    b45c:	218cd83a 	srl	r6,r4,r6
    b460:	10800544 	addi	r2,r2,21
    b464:	9084983a 	sll	r2,r18,r2
    b468:	1184b03a 	or	r2,r2,r6
    b46c:	dfc00517 	ldw	ra,20(sp)
    b470:	dd000417 	ldw	r20,16(sp)
    b474:	dcc00317 	ldw	r19,12(sp)
    b478:	dc800217 	ldw	r18,8(sp)
    b47c:	dc400117 	ldw	r17,4(sp)
    b480:	dc000017 	ldw	r16,0(sp)
    b484:	dec00604 	addi	sp,sp,24
    b488:	f800283a 	ret
    b48c:	8cc00f2e 	bgeu	r17,r19,b4cc <__b2d+0xe0>
    b490:	117ffd44 	addi	r5,r2,-11
    b494:	80bffe17 	ldw	r2,-8(r16)
    b498:	28000e26 	beq	r5,zero,b4d4 <__b2d+0xe8>
    b49c:	1949c83a 	sub	r4,r3,r5
    b4a0:	9164983a 	sll	r18,r18,r5
    b4a4:	1106d83a 	srl	r3,r2,r4
    b4a8:	81bffe04 	addi	r6,r16,-8
    b4ac:	948ffc34 	orhi	r18,r18,16368
    b4b0:	90c6b03a 	or	r3,r18,r3
    b4b4:	89800e2e 	bgeu	r17,r6,b4f0 <__b2d+0x104>
    b4b8:	81bffd17 	ldw	r6,-12(r16)
    b4bc:	1144983a 	sll	r2,r2,r5
    b4c0:	310ad83a 	srl	r5,r6,r4
    b4c4:	2884b03a 	or	r2,r5,r2
    b4c8:	003fe806 	br	b46c <__alt_data_end+0xfffeb46c>
    b4cc:	10bffd44 	addi	r2,r2,-11
    b4d0:	1000041e 	bne	r2,zero,b4e4 <__b2d+0xf8>
    b4d4:	90cffc34 	orhi	r3,r18,16368
    b4d8:	003fe406 	br	b46c <__alt_data_end+0xfffeb46c>
    b4dc:	000d883a 	mov	r6,zero
    b4e0:	003fdf06 	br	b460 <__alt_data_end+0xfffeb460>
    b4e4:	90a4983a 	sll	r18,r18,r2
    b4e8:	0005883a 	mov	r2,zero
    b4ec:	003ff906 	br	b4d4 <__alt_data_end+0xfffeb4d4>
    b4f0:	1144983a 	sll	r2,r2,r5
    b4f4:	003fdd06 	br	b46c <__alt_data_end+0xfffeb46c>

0000b4f8 <__d2b>:
    b4f8:	defff804 	addi	sp,sp,-32
    b4fc:	dc000215 	stw	r16,8(sp)
    b500:	3021883a 	mov	r16,r6
    b504:	dc400315 	stw	r17,12(sp)
    b508:	8022907a 	slli	r17,r16,1
    b50c:	dd000615 	stw	r20,24(sp)
    b510:	2829883a 	mov	r20,r5
    b514:	01400044 	movi	r5,1
    b518:	dcc00515 	stw	r19,20(sp)
    b51c:	dc800415 	stw	r18,16(sp)
    b520:	dfc00715 	stw	ra,28(sp)
    b524:	3825883a 	mov	r18,r7
    b528:	8822d57a 	srli	r17,r17,21
    b52c:	000a7a80 	call	a7a8 <_Balloc>
    b530:	1027883a 	mov	r19,r2
    b534:	00800434 	movhi	r2,16
    b538:	10bfffc4 	addi	r2,r2,-1
    b53c:	808c703a 	and	r6,r16,r2
    b540:	88000126 	beq	r17,zero,b548 <__d2b+0x50>
    b544:	31800434 	orhi	r6,r6,16
    b548:	d9800015 	stw	r6,0(sp)
    b54c:	a0002426 	beq	r20,zero,b5e0 <__d2b+0xe8>
    b550:	d9000104 	addi	r4,sp,4
    b554:	dd000115 	stw	r20,4(sp)
    b558:	000ab2c0 	call	ab2c <__lo0bits>
    b55c:	d8c00017 	ldw	r3,0(sp)
    b560:	10002f1e 	bne	r2,zero,b620 <__d2b+0x128>
    b564:	d9000117 	ldw	r4,4(sp)
    b568:	99000515 	stw	r4,20(r19)
    b56c:	1821003a 	cmpeq	r16,r3,zero
    b570:	01000084 	movi	r4,2
    b574:	2421c83a 	sub	r16,r4,r16
    b578:	98c00615 	stw	r3,24(r19)
    b57c:	9c000415 	stw	r16,16(r19)
    b580:	88001f1e 	bne	r17,zero,b600 <__d2b+0x108>
    b584:	10bef384 	addi	r2,r2,-1074
    b588:	90800015 	stw	r2,0(r18)
    b58c:	00900034 	movhi	r2,16384
    b590:	10bfffc4 	addi	r2,r2,-1
    b594:	8085883a 	add	r2,r16,r2
    b598:	1085883a 	add	r2,r2,r2
    b59c:	1085883a 	add	r2,r2,r2
    b5a0:	9885883a 	add	r2,r19,r2
    b5a4:	11000517 	ldw	r4,20(r2)
    b5a8:	8020917a 	slli	r16,r16,5
    b5ac:	000aac40 	call	aac4 <__hi0bits>
    b5b0:	d8c00817 	ldw	r3,32(sp)
    b5b4:	8085c83a 	sub	r2,r16,r2
    b5b8:	18800015 	stw	r2,0(r3)
    b5bc:	9805883a 	mov	r2,r19
    b5c0:	dfc00717 	ldw	ra,28(sp)
    b5c4:	dd000617 	ldw	r20,24(sp)
    b5c8:	dcc00517 	ldw	r19,20(sp)
    b5cc:	dc800417 	ldw	r18,16(sp)
    b5d0:	dc400317 	ldw	r17,12(sp)
    b5d4:	dc000217 	ldw	r16,8(sp)
    b5d8:	dec00804 	addi	sp,sp,32
    b5dc:	f800283a 	ret
    b5e0:	d809883a 	mov	r4,sp
    b5e4:	000ab2c0 	call	ab2c <__lo0bits>
    b5e8:	d8c00017 	ldw	r3,0(sp)
    b5ec:	04000044 	movi	r16,1
    b5f0:	9c000415 	stw	r16,16(r19)
    b5f4:	98c00515 	stw	r3,20(r19)
    b5f8:	10800804 	addi	r2,r2,32
    b5fc:	883fe126 	beq	r17,zero,b584 <__alt_data_end+0xfffeb584>
    b600:	00c00d44 	movi	r3,53
    b604:	8c7ef344 	addi	r17,r17,-1075
    b608:	88a3883a 	add	r17,r17,r2
    b60c:	1885c83a 	sub	r2,r3,r2
    b610:	d8c00817 	ldw	r3,32(sp)
    b614:	94400015 	stw	r17,0(r18)
    b618:	18800015 	stw	r2,0(r3)
    b61c:	003fe706 	br	b5bc <__alt_data_end+0xfffeb5bc>
    b620:	01000804 	movi	r4,32
    b624:	2089c83a 	sub	r4,r4,r2
    b628:	1908983a 	sll	r4,r3,r4
    b62c:	d9400117 	ldw	r5,4(sp)
    b630:	1886d83a 	srl	r3,r3,r2
    b634:	2148b03a 	or	r4,r4,r5
    b638:	99000515 	stw	r4,20(r19)
    b63c:	d8c00015 	stw	r3,0(sp)
    b640:	003fca06 	br	b56c <__alt_data_end+0xfffeb56c>

0000b644 <__ratio>:
    b644:	defff904 	addi	sp,sp,-28
    b648:	dc400315 	stw	r17,12(sp)
    b64c:	2823883a 	mov	r17,r5
    b650:	d9400104 	addi	r5,sp,4
    b654:	dfc00615 	stw	ra,24(sp)
    b658:	dcc00515 	stw	r19,20(sp)
    b65c:	dc800415 	stw	r18,16(sp)
    b660:	2027883a 	mov	r19,r4
    b664:	dc000215 	stw	r16,8(sp)
    b668:	000b3ec0 	call	b3ec <__b2d>
    b66c:	d80b883a 	mov	r5,sp
    b670:	8809883a 	mov	r4,r17
    b674:	1025883a 	mov	r18,r2
    b678:	1821883a 	mov	r16,r3
    b67c:	000b3ec0 	call	b3ec <__b2d>
    b680:	8a000417 	ldw	r8,16(r17)
    b684:	99000417 	ldw	r4,16(r19)
    b688:	d9400117 	ldw	r5,4(sp)
    b68c:	2209c83a 	sub	r4,r4,r8
    b690:	2010917a 	slli	r8,r4,5
    b694:	d9000017 	ldw	r4,0(sp)
    b698:	2909c83a 	sub	r4,r5,r4
    b69c:	4109883a 	add	r4,r8,r4
    b6a0:	01000e0e 	bge	zero,r4,b6dc <__ratio+0x98>
    b6a4:	2008953a 	slli	r4,r4,20
    b6a8:	2421883a 	add	r16,r4,r16
    b6ac:	100d883a 	mov	r6,r2
    b6b0:	180f883a 	mov	r7,r3
    b6b4:	9009883a 	mov	r4,r18
    b6b8:	800b883a 	mov	r5,r16
    b6bc:	00017d80 	call	17d8 <__divdf3>
    b6c0:	dfc00617 	ldw	ra,24(sp)
    b6c4:	dcc00517 	ldw	r19,20(sp)
    b6c8:	dc800417 	ldw	r18,16(sp)
    b6cc:	dc400317 	ldw	r17,12(sp)
    b6d0:	dc000217 	ldw	r16,8(sp)
    b6d4:	dec00704 	addi	sp,sp,28
    b6d8:	f800283a 	ret
    b6dc:	2008953a 	slli	r4,r4,20
    b6e0:	1907c83a 	sub	r3,r3,r4
    b6e4:	003ff106 	br	b6ac <__alt_data_end+0xfffeb6ac>

0000b6e8 <_mprec_log10>:
    b6e8:	defffe04 	addi	sp,sp,-8
    b6ec:	dc000015 	stw	r16,0(sp)
    b6f0:	dfc00115 	stw	ra,4(sp)
    b6f4:	008005c4 	movi	r2,23
    b6f8:	2021883a 	mov	r16,r4
    b6fc:	11000d0e 	bge	r2,r4,b734 <_mprec_log10+0x4c>
    b700:	0005883a 	mov	r2,zero
    b704:	00cffc34 	movhi	r3,16368
    b708:	843fffc4 	addi	r16,r16,-1
    b70c:	000d883a 	mov	r6,zero
    b710:	01d00934 	movhi	r7,16420
    b714:	1009883a 	mov	r4,r2
    b718:	180b883a 	mov	r5,r3
    b71c:	00022840 	call	2284 <__muldf3>
    b720:	803ff91e 	bne	r16,zero,b708 <__alt_data_end+0xfffeb708>
    b724:	dfc00117 	ldw	ra,4(sp)
    b728:	dc000017 	ldw	r16,0(sp)
    b72c:	dec00204 	addi	sp,sp,8
    b730:	f800283a 	ret
    b734:	202090fa 	slli	r16,r4,3
    b738:	00800074 	movhi	r2,1
    b73c:	1084f204 	addi	r2,r2,5064
    b740:	1421883a 	add	r16,r2,r16
    b744:	80800017 	ldw	r2,0(r16)
    b748:	80c00117 	ldw	r3,4(r16)
    b74c:	dfc00117 	ldw	ra,4(sp)
    b750:	dc000017 	ldw	r16,0(sp)
    b754:	dec00204 	addi	sp,sp,8
    b758:	f800283a 	ret

0000b75c <__copybits>:
    b75c:	297fffc4 	addi	r5,r5,-1
    b760:	280fd17a 	srai	r7,r5,5
    b764:	30c00417 	ldw	r3,16(r6)
    b768:	30800504 	addi	r2,r6,20
    b76c:	39c00044 	addi	r7,r7,1
    b770:	18c7883a 	add	r3,r3,r3
    b774:	39cf883a 	add	r7,r7,r7
    b778:	18c7883a 	add	r3,r3,r3
    b77c:	39cf883a 	add	r7,r7,r7
    b780:	10c7883a 	add	r3,r2,r3
    b784:	21cf883a 	add	r7,r4,r7
    b788:	10c00d2e 	bgeu	r2,r3,b7c0 <__copybits+0x64>
    b78c:	200b883a 	mov	r5,r4
    b790:	12000017 	ldw	r8,0(r2)
    b794:	29400104 	addi	r5,r5,4
    b798:	10800104 	addi	r2,r2,4
    b79c:	2a3fff15 	stw	r8,-4(r5)
    b7a0:	10fffb36 	bltu	r2,r3,b790 <__alt_data_end+0xfffeb790>
    b7a4:	1985c83a 	sub	r2,r3,r6
    b7a8:	10bffac4 	addi	r2,r2,-21
    b7ac:	1004d0ba 	srli	r2,r2,2
    b7b0:	10800044 	addi	r2,r2,1
    b7b4:	1085883a 	add	r2,r2,r2
    b7b8:	1085883a 	add	r2,r2,r2
    b7bc:	2089883a 	add	r4,r4,r2
    b7c0:	21c0032e 	bgeu	r4,r7,b7d0 <__copybits+0x74>
    b7c4:	20000015 	stw	zero,0(r4)
    b7c8:	21000104 	addi	r4,r4,4
    b7cc:	21fffd36 	bltu	r4,r7,b7c4 <__alt_data_end+0xfffeb7c4>
    b7d0:	f800283a 	ret

0000b7d4 <__any_on>:
    b7d4:	20c00417 	ldw	r3,16(r4)
    b7d8:	2805d17a 	srai	r2,r5,5
    b7dc:	21000504 	addi	r4,r4,20
    b7e0:	18800d0e 	bge	r3,r2,b818 <__any_on+0x44>
    b7e4:	18c7883a 	add	r3,r3,r3
    b7e8:	18c7883a 	add	r3,r3,r3
    b7ec:	20c7883a 	add	r3,r4,r3
    b7f0:	20c0192e 	bgeu	r4,r3,b858 <__any_on+0x84>
    b7f4:	18bfff17 	ldw	r2,-4(r3)
    b7f8:	18ffff04 	addi	r3,r3,-4
    b7fc:	1000041e 	bne	r2,zero,b810 <__any_on+0x3c>
    b800:	20c0142e 	bgeu	r4,r3,b854 <__any_on+0x80>
    b804:	18ffff04 	addi	r3,r3,-4
    b808:	19400017 	ldw	r5,0(r3)
    b80c:	283ffc26 	beq	r5,zero,b800 <__alt_data_end+0xfffeb800>
    b810:	00800044 	movi	r2,1
    b814:	f800283a 	ret
    b818:	10c00a0e 	bge	r2,r3,b844 <__any_on+0x70>
    b81c:	1085883a 	add	r2,r2,r2
    b820:	1085883a 	add	r2,r2,r2
    b824:	294007cc 	andi	r5,r5,31
    b828:	2087883a 	add	r3,r4,r2
    b82c:	283ff026 	beq	r5,zero,b7f0 <__alt_data_end+0xfffeb7f0>
    b830:	19800017 	ldw	r6,0(r3)
    b834:	3144d83a 	srl	r2,r6,r5
    b838:	114a983a 	sll	r5,r2,r5
    b83c:	317ff41e 	bne	r6,r5,b810 <__alt_data_end+0xfffeb810>
    b840:	003feb06 	br	b7f0 <__alt_data_end+0xfffeb7f0>
    b844:	1085883a 	add	r2,r2,r2
    b848:	1085883a 	add	r2,r2,r2
    b84c:	2087883a 	add	r3,r4,r2
    b850:	003fe706 	br	b7f0 <__alt_data_end+0xfffeb7f0>
    b854:	f800283a 	ret
    b858:	0005883a 	mov	r2,zero
    b85c:	f800283a 	ret

0000b860 <_read_r>:
    b860:	defffd04 	addi	sp,sp,-12
    b864:	2805883a 	mov	r2,r5
    b868:	dc000015 	stw	r16,0(sp)
    b86c:	04000074 	movhi	r16,1
    b870:	dc400115 	stw	r17,4(sp)
    b874:	300b883a 	mov	r5,r6
    b878:	8412af04 	addi	r16,r16,19132
    b87c:	2023883a 	mov	r17,r4
    b880:	380d883a 	mov	r6,r7
    b884:	1009883a 	mov	r4,r2
    b888:	dfc00215 	stw	ra,8(sp)
    b88c:	80000015 	stw	zero,0(r16)
    b890:	000f3cc0 	call	f3cc <read>
    b894:	00ffffc4 	movi	r3,-1
    b898:	10c00526 	beq	r2,r3,b8b0 <_read_r+0x50>
    b89c:	dfc00217 	ldw	ra,8(sp)
    b8a0:	dc400117 	ldw	r17,4(sp)
    b8a4:	dc000017 	ldw	r16,0(sp)
    b8a8:	dec00304 	addi	sp,sp,12
    b8ac:	f800283a 	ret
    b8b0:	80c00017 	ldw	r3,0(r16)
    b8b4:	183ff926 	beq	r3,zero,b89c <__alt_data_end+0xfffeb89c>
    b8b8:	88c00015 	stw	r3,0(r17)
    b8bc:	003ff706 	br	b89c <__alt_data_end+0xfffeb89c>

0000b8c0 <_realloc_r>:
    b8c0:	defff604 	addi	sp,sp,-40
    b8c4:	dc800215 	stw	r18,8(sp)
    b8c8:	dfc00915 	stw	ra,36(sp)
    b8cc:	df000815 	stw	fp,32(sp)
    b8d0:	ddc00715 	stw	r23,28(sp)
    b8d4:	dd800615 	stw	r22,24(sp)
    b8d8:	dd400515 	stw	r21,20(sp)
    b8dc:	dd000415 	stw	r20,16(sp)
    b8e0:	dcc00315 	stw	r19,12(sp)
    b8e4:	dc400115 	stw	r17,4(sp)
    b8e8:	dc000015 	stw	r16,0(sp)
    b8ec:	3025883a 	mov	r18,r6
    b8f0:	2800b726 	beq	r5,zero,bbd0 <_realloc_r+0x310>
    b8f4:	282b883a 	mov	r21,r5
    b8f8:	2029883a 	mov	r20,r4
    b8fc:	000f0c40 	call	f0c4 <__malloc_lock>
    b900:	a8bfff17 	ldw	r2,-4(r21)
    b904:	043fff04 	movi	r16,-4
    b908:	90c002c4 	addi	r3,r18,11
    b90c:	01000584 	movi	r4,22
    b910:	acfffe04 	addi	r19,r21,-8
    b914:	1420703a 	and	r16,r2,r16
    b918:	20c0332e 	bgeu	r4,r3,b9e8 <_realloc_r+0x128>
    b91c:	047ffe04 	movi	r17,-8
    b920:	1c62703a 	and	r17,r3,r17
    b924:	8807883a 	mov	r3,r17
    b928:	88005816 	blt	r17,zero,ba8c <_realloc_r+0x1cc>
    b92c:	8c805736 	bltu	r17,r18,ba8c <_realloc_r+0x1cc>
    b930:	80c0300e 	bge	r16,r3,b9f4 <_realloc_r+0x134>
    b934:	07000074 	movhi	fp,1
    b938:	e7064204 	addi	fp,fp,6408
    b93c:	e1c00217 	ldw	r7,8(fp)
    b940:	9c09883a 	add	r4,r19,r16
    b944:	22000117 	ldw	r8,4(r4)
    b948:	21c06326 	beq	r4,r7,bad8 <_realloc_r+0x218>
    b94c:	017fff84 	movi	r5,-2
    b950:	414a703a 	and	r5,r8,r5
    b954:	214b883a 	add	r5,r4,r5
    b958:	29800117 	ldw	r6,4(r5)
    b95c:	3180004c 	andi	r6,r6,1
    b960:	30003f26 	beq	r6,zero,ba60 <_realloc_r+0x1a0>
    b964:	1080004c 	andi	r2,r2,1
    b968:	10008326 	beq	r2,zero,bb78 <_realloc_r+0x2b8>
    b96c:	900b883a 	mov	r5,r18
    b970:	a009883a 	mov	r4,r20
    b974:	0004e440 	call	4e44 <_malloc_r>
    b978:	1025883a 	mov	r18,r2
    b97c:	10011e26 	beq	r2,zero,bdf8 <_realloc_r+0x538>
    b980:	a93fff17 	ldw	r4,-4(r21)
    b984:	10fffe04 	addi	r3,r2,-8
    b988:	00bfff84 	movi	r2,-2
    b98c:	2084703a 	and	r2,r4,r2
    b990:	9885883a 	add	r2,r19,r2
    b994:	1880ee26 	beq	r3,r2,bd50 <_realloc_r+0x490>
    b998:	81bfff04 	addi	r6,r16,-4
    b99c:	00800904 	movi	r2,36
    b9a0:	1180b836 	bltu	r2,r6,bc84 <_realloc_r+0x3c4>
    b9a4:	00c004c4 	movi	r3,19
    b9a8:	19809636 	bltu	r3,r6,bc04 <_realloc_r+0x344>
    b9ac:	9005883a 	mov	r2,r18
    b9b0:	a807883a 	mov	r3,r21
    b9b4:	19000017 	ldw	r4,0(r3)
    b9b8:	11000015 	stw	r4,0(r2)
    b9bc:	19000117 	ldw	r4,4(r3)
    b9c0:	11000115 	stw	r4,4(r2)
    b9c4:	18c00217 	ldw	r3,8(r3)
    b9c8:	10c00215 	stw	r3,8(r2)
    b9cc:	a80b883a 	mov	r5,r21
    b9d0:	a009883a 	mov	r4,r20
    b9d4:	00043140 	call	4314 <_free_r>
    b9d8:	a009883a 	mov	r4,r20
    b9dc:	000f0e80 	call	f0e8 <__malloc_unlock>
    b9e0:	9005883a 	mov	r2,r18
    b9e4:	00001206 	br	ba30 <_realloc_r+0x170>
    b9e8:	00c00404 	movi	r3,16
    b9ec:	1823883a 	mov	r17,r3
    b9f0:	003fce06 	br	b92c <__alt_data_end+0xfffeb92c>
    b9f4:	a825883a 	mov	r18,r21
    b9f8:	8445c83a 	sub	r2,r16,r17
    b9fc:	00c003c4 	movi	r3,15
    ba00:	18802636 	bltu	r3,r2,ba9c <_realloc_r+0x1dc>
    ba04:	99800117 	ldw	r6,4(r19)
    ba08:	9c07883a 	add	r3,r19,r16
    ba0c:	3180004c 	andi	r6,r6,1
    ba10:	3420b03a 	or	r16,r6,r16
    ba14:	9c000115 	stw	r16,4(r19)
    ba18:	18800117 	ldw	r2,4(r3)
    ba1c:	10800054 	ori	r2,r2,1
    ba20:	18800115 	stw	r2,4(r3)
    ba24:	a009883a 	mov	r4,r20
    ba28:	000f0e80 	call	f0e8 <__malloc_unlock>
    ba2c:	9005883a 	mov	r2,r18
    ba30:	dfc00917 	ldw	ra,36(sp)
    ba34:	df000817 	ldw	fp,32(sp)
    ba38:	ddc00717 	ldw	r23,28(sp)
    ba3c:	dd800617 	ldw	r22,24(sp)
    ba40:	dd400517 	ldw	r21,20(sp)
    ba44:	dd000417 	ldw	r20,16(sp)
    ba48:	dcc00317 	ldw	r19,12(sp)
    ba4c:	dc800217 	ldw	r18,8(sp)
    ba50:	dc400117 	ldw	r17,4(sp)
    ba54:	dc000017 	ldw	r16,0(sp)
    ba58:	dec00a04 	addi	sp,sp,40
    ba5c:	f800283a 	ret
    ba60:	017fff04 	movi	r5,-4
    ba64:	414a703a 	and	r5,r8,r5
    ba68:	814d883a 	add	r6,r16,r5
    ba6c:	30c01f16 	blt	r6,r3,baec <_realloc_r+0x22c>
    ba70:	20800317 	ldw	r2,12(r4)
    ba74:	20c00217 	ldw	r3,8(r4)
    ba78:	a825883a 	mov	r18,r21
    ba7c:	3021883a 	mov	r16,r6
    ba80:	18800315 	stw	r2,12(r3)
    ba84:	10c00215 	stw	r3,8(r2)
    ba88:	003fdb06 	br	b9f8 <__alt_data_end+0xfffeb9f8>
    ba8c:	00800304 	movi	r2,12
    ba90:	a0800015 	stw	r2,0(r20)
    ba94:	0005883a 	mov	r2,zero
    ba98:	003fe506 	br	ba30 <__alt_data_end+0xfffeba30>
    ba9c:	98c00117 	ldw	r3,4(r19)
    baa0:	9c4b883a 	add	r5,r19,r17
    baa4:	11000054 	ori	r4,r2,1
    baa8:	18c0004c 	andi	r3,r3,1
    baac:	1c62b03a 	or	r17,r3,r17
    bab0:	9c400115 	stw	r17,4(r19)
    bab4:	29000115 	stw	r4,4(r5)
    bab8:	2885883a 	add	r2,r5,r2
    babc:	10c00117 	ldw	r3,4(r2)
    bac0:	29400204 	addi	r5,r5,8
    bac4:	a009883a 	mov	r4,r20
    bac8:	18c00054 	ori	r3,r3,1
    bacc:	10c00115 	stw	r3,4(r2)
    bad0:	00043140 	call	4314 <_free_r>
    bad4:	003fd306 	br	ba24 <__alt_data_end+0xfffeba24>
    bad8:	017fff04 	movi	r5,-4
    badc:	414a703a 	and	r5,r8,r5
    bae0:	89800404 	addi	r6,r17,16
    bae4:	8151883a 	add	r8,r16,r5
    bae8:	4180590e 	bge	r8,r6,bc50 <_realloc_r+0x390>
    baec:	1080004c 	andi	r2,r2,1
    baf0:	103f9e1e 	bne	r2,zero,b96c <__alt_data_end+0xfffeb96c>
    baf4:	adbffe17 	ldw	r22,-8(r21)
    baf8:	00bfff04 	movi	r2,-4
    bafc:	9dadc83a 	sub	r22,r19,r22
    bb00:	b1800117 	ldw	r6,4(r22)
    bb04:	3084703a 	and	r2,r6,r2
    bb08:	20002026 	beq	r4,zero,bb8c <_realloc_r+0x2cc>
    bb0c:	80af883a 	add	r23,r16,r2
    bb10:	b96f883a 	add	r23,r23,r5
    bb14:	21c05f26 	beq	r4,r7,bc94 <_realloc_r+0x3d4>
    bb18:	b8c01c16 	blt	r23,r3,bb8c <_realloc_r+0x2cc>
    bb1c:	20800317 	ldw	r2,12(r4)
    bb20:	20c00217 	ldw	r3,8(r4)
    bb24:	81bfff04 	addi	r6,r16,-4
    bb28:	01000904 	movi	r4,36
    bb2c:	18800315 	stw	r2,12(r3)
    bb30:	10c00215 	stw	r3,8(r2)
    bb34:	b0c00217 	ldw	r3,8(r22)
    bb38:	b0800317 	ldw	r2,12(r22)
    bb3c:	b4800204 	addi	r18,r22,8
    bb40:	18800315 	stw	r2,12(r3)
    bb44:	10c00215 	stw	r3,8(r2)
    bb48:	21801b36 	bltu	r4,r6,bbb8 <_realloc_r+0x2f8>
    bb4c:	008004c4 	movi	r2,19
    bb50:	1180352e 	bgeu	r2,r6,bc28 <_realloc_r+0x368>
    bb54:	a8800017 	ldw	r2,0(r21)
    bb58:	b0800215 	stw	r2,8(r22)
    bb5c:	a8800117 	ldw	r2,4(r21)
    bb60:	b0800315 	stw	r2,12(r22)
    bb64:	008006c4 	movi	r2,27
    bb68:	11807f36 	bltu	r2,r6,bd68 <_realloc_r+0x4a8>
    bb6c:	b0800404 	addi	r2,r22,16
    bb70:	ad400204 	addi	r21,r21,8
    bb74:	00002d06 	br	bc2c <_realloc_r+0x36c>
    bb78:	adbffe17 	ldw	r22,-8(r21)
    bb7c:	00bfff04 	movi	r2,-4
    bb80:	9dadc83a 	sub	r22,r19,r22
    bb84:	b1000117 	ldw	r4,4(r22)
    bb88:	2084703a 	and	r2,r4,r2
    bb8c:	b03f7726 	beq	r22,zero,b96c <__alt_data_end+0xfffeb96c>
    bb90:	80af883a 	add	r23,r16,r2
    bb94:	b8ff7516 	blt	r23,r3,b96c <__alt_data_end+0xfffeb96c>
    bb98:	b0800317 	ldw	r2,12(r22)
    bb9c:	b0c00217 	ldw	r3,8(r22)
    bba0:	81bfff04 	addi	r6,r16,-4
    bba4:	01000904 	movi	r4,36
    bba8:	18800315 	stw	r2,12(r3)
    bbac:	10c00215 	stw	r3,8(r2)
    bbb0:	b4800204 	addi	r18,r22,8
    bbb4:	21bfe52e 	bgeu	r4,r6,bb4c <__alt_data_end+0xfffebb4c>
    bbb8:	a80b883a 	mov	r5,r21
    bbbc:	9009883a 	mov	r4,r18
    bbc0:	000a64c0 	call	a64c <memmove>
    bbc4:	b821883a 	mov	r16,r23
    bbc8:	b027883a 	mov	r19,r22
    bbcc:	003f8a06 	br	b9f8 <__alt_data_end+0xfffeb9f8>
    bbd0:	300b883a 	mov	r5,r6
    bbd4:	dfc00917 	ldw	ra,36(sp)
    bbd8:	df000817 	ldw	fp,32(sp)
    bbdc:	ddc00717 	ldw	r23,28(sp)
    bbe0:	dd800617 	ldw	r22,24(sp)
    bbe4:	dd400517 	ldw	r21,20(sp)
    bbe8:	dd000417 	ldw	r20,16(sp)
    bbec:	dcc00317 	ldw	r19,12(sp)
    bbf0:	dc800217 	ldw	r18,8(sp)
    bbf4:	dc400117 	ldw	r17,4(sp)
    bbf8:	dc000017 	ldw	r16,0(sp)
    bbfc:	dec00a04 	addi	sp,sp,40
    bc00:	0004e441 	jmpi	4e44 <_malloc_r>
    bc04:	a8c00017 	ldw	r3,0(r21)
    bc08:	90c00015 	stw	r3,0(r18)
    bc0c:	a8c00117 	ldw	r3,4(r21)
    bc10:	90c00115 	stw	r3,4(r18)
    bc14:	00c006c4 	movi	r3,27
    bc18:	19804536 	bltu	r3,r6,bd30 <_realloc_r+0x470>
    bc1c:	90800204 	addi	r2,r18,8
    bc20:	a8c00204 	addi	r3,r21,8
    bc24:	003f6306 	br	b9b4 <__alt_data_end+0xfffeb9b4>
    bc28:	9005883a 	mov	r2,r18
    bc2c:	a8c00017 	ldw	r3,0(r21)
    bc30:	b821883a 	mov	r16,r23
    bc34:	b027883a 	mov	r19,r22
    bc38:	10c00015 	stw	r3,0(r2)
    bc3c:	a8c00117 	ldw	r3,4(r21)
    bc40:	10c00115 	stw	r3,4(r2)
    bc44:	a8c00217 	ldw	r3,8(r21)
    bc48:	10c00215 	stw	r3,8(r2)
    bc4c:	003f6a06 	br	b9f8 <__alt_data_end+0xfffeb9f8>
    bc50:	9c67883a 	add	r19,r19,r17
    bc54:	4445c83a 	sub	r2,r8,r17
    bc58:	e4c00215 	stw	r19,8(fp)
    bc5c:	10800054 	ori	r2,r2,1
    bc60:	98800115 	stw	r2,4(r19)
    bc64:	a8bfff17 	ldw	r2,-4(r21)
    bc68:	a009883a 	mov	r4,r20
    bc6c:	1080004c 	andi	r2,r2,1
    bc70:	1462b03a 	or	r17,r2,r17
    bc74:	ac7fff15 	stw	r17,-4(r21)
    bc78:	000f0e80 	call	f0e8 <__malloc_unlock>
    bc7c:	a805883a 	mov	r2,r21
    bc80:	003f6b06 	br	ba30 <__alt_data_end+0xfffeba30>
    bc84:	a80b883a 	mov	r5,r21
    bc88:	9009883a 	mov	r4,r18
    bc8c:	000a64c0 	call	a64c <memmove>
    bc90:	003f4e06 	br	b9cc <__alt_data_end+0xfffeb9cc>
    bc94:	89000404 	addi	r4,r17,16
    bc98:	b93fbc16 	blt	r23,r4,bb8c <__alt_data_end+0xfffebb8c>
    bc9c:	b0800317 	ldw	r2,12(r22)
    bca0:	b0c00217 	ldw	r3,8(r22)
    bca4:	81bfff04 	addi	r6,r16,-4
    bca8:	01000904 	movi	r4,36
    bcac:	18800315 	stw	r2,12(r3)
    bcb0:	10c00215 	stw	r3,8(r2)
    bcb4:	b4800204 	addi	r18,r22,8
    bcb8:	21804336 	bltu	r4,r6,bdc8 <_realloc_r+0x508>
    bcbc:	008004c4 	movi	r2,19
    bcc0:	11803f2e 	bgeu	r2,r6,bdc0 <_realloc_r+0x500>
    bcc4:	a8800017 	ldw	r2,0(r21)
    bcc8:	b0800215 	stw	r2,8(r22)
    bccc:	a8800117 	ldw	r2,4(r21)
    bcd0:	b0800315 	stw	r2,12(r22)
    bcd4:	008006c4 	movi	r2,27
    bcd8:	11803f36 	bltu	r2,r6,bdd8 <_realloc_r+0x518>
    bcdc:	b0800404 	addi	r2,r22,16
    bce0:	ad400204 	addi	r21,r21,8
    bce4:	a8c00017 	ldw	r3,0(r21)
    bce8:	10c00015 	stw	r3,0(r2)
    bcec:	a8c00117 	ldw	r3,4(r21)
    bcf0:	10c00115 	stw	r3,4(r2)
    bcf4:	a8c00217 	ldw	r3,8(r21)
    bcf8:	10c00215 	stw	r3,8(r2)
    bcfc:	b447883a 	add	r3,r22,r17
    bd00:	bc45c83a 	sub	r2,r23,r17
    bd04:	e0c00215 	stw	r3,8(fp)
    bd08:	10800054 	ori	r2,r2,1
    bd0c:	18800115 	stw	r2,4(r3)
    bd10:	b0800117 	ldw	r2,4(r22)
    bd14:	a009883a 	mov	r4,r20
    bd18:	1080004c 	andi	r2,r2,1
    bd1c:	1462b03a 	or	r17,r2,r17
    bd20:	b4400115 	stw	r17,4(r22)
    bd24:	000f0e80 	call	f0e8 <__malloc_unlock>
    bd28:	9005883a 	mov	r2,r18
    bd2c:	003f4006 	br	ba30 <__alt_data_end+0xfffeba30>
    bd30:	a8c00217 	ldw	r3,8(r21)
    bd34:	90c00215 	stw	r3,8(r18)
    bd38:	a8c00317 	ldw	r3,12(r21)
    bd3c:	90c00315 	stw	r3,12(r18)
    bd40:	30801126 	beq	r6,r2,bd88 <_realloc_r+0x4c8>
    bd44:	90800404 	addi	r2,r18,16
    bd48:	a8c00404 	addi	r3,r21,16
    bd4c:	003f1906 	br	b9b4 <__alt_data_end+0xfffeb9b4>
    bd50:	90ffff17 	ldw	r3,-4(r18)
    bd54:	00bfff04 	movi	r2,-4
    bd58:	a825883a 	mov	r18,r21
    bd5c:	1884703a 	and	r2,r3,r2
    bd60:	80a1883a 	add	r16,r16,r2
    bd64:	003f2406 	br	b9f8 <__alt_data_end+0xfffeb9f8>
    bd68:	a8800217 	ldw	r2,8(r21)
    bd6c:	b0800415 	stw	r2,16(r22)
    bd70:	a8800317 	ldw	r2,12(r21)
    bd74:	b0800515 	stw	r2,20(r22)
    bd78:	31000a26 	beq	r6,r4,bda4 <_realloc_r+0x4e4>
    bd7c:	b0800604 	addi	r2,r22,24
    bd80:	ad400404 	addi	r21,r21,16
    bd84:	003fa906 	br	bc2c <__alt_data_end+0xfffebc2c>
    bd88:	a9000417 	ldw	r4,16(r21)
    bd8c:	90800604 	addi	r2,r18,24
    bd90:	a8c00604 	addi	r3,r21,24
    bd94:	91000415 	stw	r4,16(r18)
    bd98:	a9000517 	ldw	r4,20(r21)
    bd9c:	91000515 	stw	r4,20(r18)
    bda0:	003f0406 	br	b9b4 <__alt_data_end+0xfffeb9b4>
    bda4:	a8c00417 	ldw	r3,16(r21)
    bda8:	ad400604 	addi	r21,r21,24
    bdac:	b0800804 	addi	r2,r22,32
    bdb0:	b0c00615 	stw	r3,24(r22)
    bdb4:	a8ffff17 	ldw	r3,-4(r21)
    bdb8:	b0c00715 	stw	r3,28(r22)
    bdbc:	003f9b06 	br	bc2c <__alt_data_end+0xfffebc2c>
    bdc0:	9005883a 	mov	r2,r18
    bdc4:	003fc706 	br	bce4 <__alt_data_end+0xfffebce4>
    bdc8:	a80b883a 	mov	r5,r21
    bdcc:	9009883a 	mov	r4,r18
    bdd0:	000a64c0 	call	a64c <memmove>
    bdd4:	003fc906 	br	bcfc <__alt_data_end+0xfffebcfc>
    bdd8:	a8800217 	ldw	r2,8(r21)
    bddc:	b0800415 	stw	r2,16(r22)
    bde0:	a8800317 	ldw	r2,12(r21)
    bde4:	b0800515 	stw	r2,20(r22)
    bde8:	31000726 	beq	r6,r4,be08 <_realloc_r+0x548>
    bdec:	b0800604 	addi	r2,r22,24
    bdf0:	ad400404 	addi	r21,r21,16
    bdf4:	003fbb06 	br	bce4 <__alt_data_end+0xfffebce4>
    bdf8:	a009883a 	mov	r4,r20
    bdfc:	000f0e80 	call	f0e8 <__malloc_unlock>
    be00:	0005883a 	mov	r2,zero
    be04:	003f0a06 	br	ba30 <__alt_data_end+0xfffeba30>
    be08:	a8c00417 	ldw	r3,16(r21)
    be0c:	ad400604 	addi	r21,r21,24
    be10:	b0800804 	addi	r2,r22,32
    be14:	b0c00615 	stw	r3,24(r22)
    be18:	a8ffff17 	ldw	r3,-4(r21)
    be1c:	b0c00715 	stw	r3,28(r22)
    be20:	003fb006 	br	bce4 <__alt_data_end+0xfffebce4>

0000be24 <__fpclassifyd>:
    be24:	00a00034 	movhi	r2,32768
    be28:	10bfffc4 	addi	r2,r2,-1
    be2c:	2884703a 	and	r2,r5,r2
    be30:	10000726 	beq	r2,zero,be50 <__fpclassifyd+0x2c>
    be34:	00fffc34 	movhi	r3,65520
    be38:	019ff834 	movhi	r6,32736
    be3c:	28c7883a 	add	r3,r5,r3
    be40:	31bfffc4 	addi	r6,r6,-1
    be44:	30c00536 	bltu	r6,r3,be5c <__fpclassifyd+0x38>
    be48:	00800104 	movi	r2,4
    be4c:	f800283a 	ret
    be50:	2000021e 	bne	r4,zero,be5c <__fpclassifyd+0x38>
    be54:	00800084 	movi	r2,2
    be58:	f800283a 	ret
    be5c:	00dffc34 	movhi	r3,32752
    be60:	019ff834 	movhi	r6,32736
    be64:	28cb883a 	add	r5,r5,r3
    be68:	31bfffc4 	addi	r6,r6,-1
    be6c:	317ff62e 	bgeu	r6,r5,be48 <__alt_data_end+0xfffebe48>
    be70:	01400434 	movhi	r5,16
    be74:	297fffc4 	addi	r5,r5,-1
    be78:	28800236 	bltu	r5,r2,be84 <__fpclassifyd+0x60>
    be7c:	008000c4 	movi	r2,3
    be80:	f800283a 	ret
    be84:	10c00226 	beq	r2,r3,be90 <__fpclassifyd+0x6c>
    be88:	0005883a 	mov	r2,zero
    be8c:	f800283a 	ret
    be90:	2005003a 	cmpeq	r2,r4,zero
    be94:	f800283a 	ret

0000be98 <strcmp>:
    be98:	2144b03a 	or	r2,r4,r5
    be9c:	108000cc 	andi	r2,r2,3
    bea0:	1000171e 	bne	r2,zero,bf00 <strcmp+0x68>
    bea4:	20800017 	ldw	r2,0(r4)
    bea8:	28c00017 	ldw	r3,0(r5)
    beac:	10c0141e 	bne	r2,r3,bf00 <strcmp+0x68>
    beb0:	027fbff4 	movhi	r9,65279
    beb4:	4a7fbfc4 	addi	r9,r9,-257
    beb8:	0086303a 	nor	r3,zero,r2
    bebc:	02202074 	movhi	r8,32897
    bec0:	1245883a 	add	r2,r2,r9
    bec4:	42202004 	addi	r8,r8,-32640
    bec8:	10c4703a 	and	r2,r2,r3
    becc:	1204703a 	and	r2,r2,r8
    bed0:	10000226 	beq	r2,zero,bedc <strcmp+0x44>
    bed4:	00002306 	br	bf64 <strcmp+0xcc>
    bed8:	1000221e 	bne	r2,zero,bf64 <strcmp+0xcc>
    bedc:	21000104 	addi	r4,r4,4
    bee0:	20c00017 	ldw	r3,0(r4)
    bee4:	29400104 	addi	r5,r5,4
    bee8:	29800017 	ldw	r6,0(r5)
    beec:	1a4f883a 	add	r7,r3,r9
    bef0:	00c4303a 	nor	r2,zero,r3
    bef4:	3884703a 	and	r2,r7,r2
    bef8:	1204703a 	and	r2,r2,r8
    befc:	19bff626 	beq	r3,r6,bed8 <__alt_data_end+0xfffebed8>
    bf00:	20800003 	ldbu	r2,0(r4)
    bf04:	10c03fcc 	andi	r3,r2,255
    bf08:	18c0201c 	xori	r3,r3,128
    bf0c:	18ffe004 	addi	r3,r3,-128
    bf10:	18000c26 	beq	r3,zero,bf44 <strcmp+0xac>
    bf14:	29800007 	ldb	r6,0(r5)
    bf18:	19800326 	beq	r3,r6,bf28 <strcmp+0x90>
    bf1c:	00001306 	br	bf6c <strcmp+0xd4>
    bf20:	29800007 	ldb	r6,0(r5)
    bf24:	11800b1e 	bne	r2,r6,bf54 <strcmp+0xbc>
    bf28:	21000044 	addi	r4,r4,1
    bf2c:	20c00003 	ldbu	r3,0(r4)
    bf30:	29400044 	addi	r5,r5,1
    bf34:	18803fcc 	andi	r2,r3,255
    bf38:	1080201c 	xori	r2,r2,128
    bf3c:	10bfe004 	addi	r2,r2,-128
    bf40:	103ff71e 	bne	r2,zero,bf20 <__alt_data_end+0xfffebf20>
    bf44:	0007883a 	mov	r3,zero
    bf48:	28800003 	ldbu	r2,0(r5)
    bf4c:	1885c83a 	sub	r2,r3,r2
    bf50:	f800283a 	ret
    bf54:	28800003 	ldbu	r2,0(r5)
    bf58:	18c03fcc 	andi	r3,r3,255
    bf5c:	1885c83a 	sub	r2,r3,r2
    bf60:	f800283a 	ret
    bf64:	0005883a 	mov	r2,zero
    bf68:	f800283a 	ret
    bf6c:	10c03fcc 	andi	r3,r2,255
    bf70:	003ff506 	br	bf48 <__alt_data_end+0xfffebf48>

0000bf74 <__sprint_r.part.0>:
    bf74:	28801917 	ldw	r2,100(r5)
    bf78:	defff604 	addi	sp,sp,-40
    bf7c:	dd400515 	stw	r21,20(sp)
    bf80:	dfc00915 	stw	ra,36(sp)
    bf84:	df000815 	stw	fp,32(sp)
    bf88:	ddc00715 	stw	r23,28(sp)
    bf8c:	dd800615 	stw	r22,24(sp)
    bf90:	dd000415 	stw	r20,16(sp)
    bf94:	dcc00315 	stw	r19,12(sp)
    bf98:	dc800215 	stw	r18,8(sp)
    bf9c:	dc400115 	stw	r17,4(sp)
    bfa0:	dc000015 	stw	r16,0(sp)
    bfa4:	1088000c 	andi	r2,r2,8192
    bfa8:	302b883a 	mov	r21,r6
    bfac:	10002e26 	beq	r2,zero,c068 <__sprint_r.part.0+0xf4>
    bfb0:	30800217 	ldw	r2,8(r6)
    bfb4:	35800017 	ldw	r22,0(r6)
    bfb8:	10002926 	beq	r2,zero,c060 <__sprint_r.part.0+0xec>
    bfbc:	2827883a 	mov	r19,r5
    bfc0:	2029883a 	mov	r20,r4
    bfc4:	b5c00104 	addi	r23,r22,4
    bfc8:	04bfffc4 	movi	r18,-1
    bfcc:	bc400017 	ldw	r17,0(r23)
    bfd0:	b4000017 	ldw	r16,0(r22)
    bfd4:	0039883a 	mov	fp,zero
    bfd8:	8822d0ba 	srli	r17,r17,2
    bfdc:	8800031e 	bne	r17,zero,bfec <__sprint_r.part.0+0x78>
    bfe0:	00001806 	br	c044 <__sprint_r.part.0+0xd0>
    bfe4:	84000104 	addi	r16,r16,4
    bfe8:	8f001526 	beq	r17,fp,c040 <__sprint_r.part.0+0xcc>
    bfec:	81400017 	ldw	r5,0(r16)
    bff0:	980d883a 	mov	r6,r19
    bff4:	a009883a 	mov	r4,r20
    bff8:	000d8ac0 	call	d8ac <_fputwc_r>
    bffc:	e7000044 	addi	fp,fp,1
    c000:	14bff81e 	bne	r2,r18,bfe4 <__alt_data_end+0xfffebfe4>
    c004:	9005883a 	mov	r2,r18
    c008:	a8000215 	stw	zero,8(r21)
    c00c:	a8000115 	stw	zero,4(r21)
    c010:	dfc00917 	ldw	ra,36(sp)
    c014:	df000817 	ldw	fp,32(sp)
    c018:	ddc00717 	ldw	r23,28(sp)
    c01c:	dd800617 	ldw	r22,24(sp)
    c020:	dd400517 	ldw	r21,20(sp)
    c024:	dd000417 	ldw	r20,16(sp)
    c028:	dcc00317 	ldw	r19,12(sp)
    c02c:	dc800217 	ldw	r18,8(sp)
    c030:	dc400117 	ldw	r17,4(sp)
    c034:	dc000017 	ldw	r16,0(sp)
    c038:	dec00a04 	addi	sp,sp,40
    c03c:	f800283a 	ret
    c040:	a8800217 	ldw	r2,8(r21)
    c044:	8c63883a 	add	r17,r17,r17
    c048:	8c63883a 	add	r17,r17,r17
    c04c:	1445c83a 	sub	r2,r2,r17
    c050:	a8800215 	stw	r2,8(r21)
    c054:	b5800204 	addi	r22,r22,8
    c058:	bdc00204 	addi	r23,r23,8
    c05c:	103fdb1e 	bne	r2,zero,bfcc <__alt_data_end+0xfffebfcc>
    c060:	0005883a 	mov	r2,zero
    c064:	003fe806 	br	c008 <__alt_data_end+0xfffec008>
    c068:	0009f100 	call	9f10 <__sfvwrite_r>
    c06c:	003fe606 	br	c008 <__alt_data_end+0xfffec008>

0000c070 <__sprint_r>:
    c070:	30c00217 	ldw	r3,8(r6)
    c074:	18000126 	beq	r3,zero,c07c <__sprint_r+0xc>
    c078:	000bf741 	jmpi	bf74 <__sprint_r.part.0>
    c07c:	30000115 	stw	zero,4(r6)
    c080:	0005883a 	mov	r2,zero
    c084:	f800283a 	ret

0000c088 <___vfiprintf_internal_r>:
    c088:	deffca04 	addi	sp,sp,-216
    c08c:	dd403115 	stw	r21,196(sp)
    c090:	dfc03515 	stw	ra,212(sp)
    c094:	df003415 	stw	fp,208(sp)
    c098:	ddc03315 	stw	r23,204(sp)
    c09c:	dd803215 	stw	r22,200(sp)
    c0a0:	dd003015 	stw	r20,192(sp)
    c0a4:	dcc02f15 	stw	r19,188(sp)
    c0a8:	dc802e15 	stw	r18,184(sp)
    c0ac:	dc402d15 	stw	r17,180(sp)
    c0b0:	dc002c15 	stw	r16,176(sp)
    c0b4:	d9002115 	stw	r4,132(sp)
    c0b8:	d9402015 	stw	r5,128(sp)
    c0bc:	d9c02215 	stw	r7,136(sp)
    c0c0:	302b883a 	mov	r21,r6
    c0c4:	20000226 	beq	r4,zero,c0d0 <___vfiprintf_internal_r+0x48>
    c0c8:	20800e17 	ldw	r2,56(r4)
    c0cc:	1000cf26 	beq	r2,zero,c40c <___vfiprintf_internal_r+0x384>
    c0d0:	d8c02017 	ldw	r3,128(sp)
    c0d4:	1880030b 	ldhu	r2,12(r3)
    c0d8:	10c8000c 	andi	r3,r2,8192
    c0dc:	1800071e 	bne	r3,zero,c0fc <___vfiprintf_internal_r+0x74>
    c0e0:	d9402017 	ldw	r5,128(sp)
    c0e4:	00f7ffc4 	movi	r3,-8193
    c0e8:	10880014 	ori	r2,r2,8192
    c0ec:	29001917 	ldw	r4,100(r5)
    c0f0:	2880030d 	sth	r2,12(r5)
    c0f4:	20c6703a 	and	r3,r4,r3
    c0f8:	28c01915 	stw	r3,100(r5)
    c0fc:	10c0020c 	andi	r3,r2,8
    c100:	1800a526 	beq	r3,zero,c398 <___vfiprintf_internal_r+0x310>
    c104:	d9002017 	ldw	r4,128(sp)
    c108:	20c00417 	ldw	r3,16(r4)
    c10c:	1800a226 	beq	r3,zero,c398 <___vfiprintf_internal_r+0x310>
    c110:	1080068c 	andi	r2,r2,26
    c114:	00c00284 	movi	r3,10
    c118:	10c0a826 	beq	r2,r3,c3bc <___vfiprintf_internal_r+0x334>
    c11c:	d9001a04 	addi	r4,sp,104
    c120:	d94019c4 	addi	r5,sp,103
    c124:	04800074 	movhi	r18,1
    c128:	2145c83a 	sub	r2,r4,r5
    c12c:	94852404 	addi	r18,r18,5264
    c130:	d9001e15 	stw	r4,120(sp)
    c134:	d9401f15 	stw	r5,124(sp)
    c138:	dec01a15 	stw	sp,104(sp)
    c13c:	d8001c15 	stw	zero,112(sp)
    c140:	d8001b15 	stw	zero,108(sp)
    c144:	d811883a 	mov	r8,sp
    c148:	d8002615 	stw	zero,152(sp)
    c14c:	d8002415 	stw	zero,144(sp)
    c150:	d8802815 	stw	r2,160(sp)
    c154:	a82d883a 	mov	r22,r21
    c158:	b0800007 	ldb	r2,0(r22)
    c15c:	10040d26 	beq	r2,zero,d194 <___vfiprintf_internal_r+0x110c>
    c160:	00c00944 	movi	r3,37
    c164:	b029883a 	mov	r20,r22
    c168:	10c0021e 	bne	r2,r3,c174 <___vfiprintf_internal_r+0xec>
    c16c:	00001606 	br	c1c8 <___vfiprintf_internal_r+0x140>
    c170:	10c00326 	beq	r2,r3,c180 <___vfiprintf_internal_r+0xf8>
    c174:	a5000044 	addi	r20,r20,1
    c178:	a0800007 	ldb	r2,0(r20)
    c17c:	103ffc1e 	bne	r2,zero,c170 <__alt_data_end+0xfffec170>
    c180:	a5a1c83a 	sub	r16,r20,r22
    c184:	80001026 	beq	r16,zero,c1c8 <___vfiprintf_internal_r+0x140>
    c188:	d8c01c17 	ldw	r3,112(sp)
    c18c:	d8801b17 	ldw	r2,108(sp)
    c190:	45800015 	stw	r22,0(r8)
    c194:	80c7883a 	add	r3,r16,r3
    c198:	10800044 	addi	r2,r2,1
    c19c:	44000115 	stw	r16,4(r8)
    c1a0:	d8c01c15 	stw	r3,112(sp)
    c1a4:	d8801b15 	stw	r2,108(sp)
    c1a8:	010001c4 	movi	r4,7
    c1ac:	2080750e 	bge	r4,r2,c384 <___vfiprintf_internal_r+0x2fc>
    c1b0:	1803951e 	bne	r3,zero,d008 <___vfiprintf_internal_r+0xf80>
    c1b4:	d8c02417 	ldw	r3,144(sp)
    c1b8:	d8001b15 	stw	zero,108(sp)
    c1bc:	d811883a 	mov	r8,sp
    c1c0:	1c07883a 	add	r3,r3,r16
    c1c4:	d8c02415 	stw	r3,144(sp)
    c1c8:	a0800007 	ldb	r2,0(r20)
    c1cc:	1002e026 	beq	r2,zero,cd50 <___vfiprintf_internal_r+0xcc8>
    c1d0:	a5800044 	addi	r22,r20,1
    c1d4:	a0c00047 	ldb	r3,1(r20)
    c1d8:	d8001d85 	stb	zero,118(sp)
    c1dc:	0027883a 	mov	r19,zero
    c1e0:	d8002305 	stb	zero,140(sp)
    c1e4:	043fffc4 	movi	r16,-1
    c1e8:	d8002515 	stw	zero,148(sp)
    c1ec:	0023883a 	mov	r17,zero
    c1f0:	05001604 	movi	r20,88
    c1f4:	05400244 	movi	r21,9
    c1f8:	402f883a 	mov	r23,r8
    c1fc:	b5800044 	addi	r22,r22,1
    c200:	18bff804 	addi	r2,r3,-32
    c204:	a0827736 	bltu	r20,r2,cbe4 <___vfiprintf_internal_r+0xb5c>
    c208:	100490ba 	slli	r2,r2,2
    c20c:	01000074 	movhi	r4,1
    c210:	21308804 	addi	r4,r4,-15840
    c214:	1105883a 	add	r2,r2,r4
    c218:	10800017 	ldw	r2,0(r2)
    c21c:	1000683a 	jmp	r2
    c220:	0000c8e4 	muli	zero,zero,803
    c224:	0000cbe4 	muli	zero,zero,815
    c228:	0000cbe4 	muli	zero,zero,815
    c22c:	0000c900 	call	c90 <readLabelFileHeader+0x8>
    c230:	0000cbe4 	muli	zero,zero,815
    c234:	0000cbe4 	muli	zero,zero,815
    c238:	0000cbe4 	muli	zero,zero,815
    c23c:	0000cbe4 	muli	zero,zero,815
    c240:	0000cbe4 	muli	zero,zero,815
    c244:	0000cbe4 	muli	zero,zero,815
    c248:	0000cb08 	cmpgei	zero,zero,812
    c24c:	0000cb2c 	andhi	zero,zero,812
    c250:	0000cbe4 	muli	zero,zero,815
    c254:	0000c424 	muli	zero,zero,784
    c258:	0000cb40 	call	cb4 <readLabelFileHeader+0x2c>
    c25c:	0000cbe4 	muli	zero,zero,815
    c260:	0000c90c 	andi	zero,zero,804
    c264:	0000c918 	cmpnei	zero,zero,804
    c268:	0000c918 	cmpnei	zero,zero,804
    c26c:	0000c918 	cmpnei	zero,zero,804
    c270:	0000c918 	cmpnei	zero,zero,804
    c274:	0000c918 	cmpnei	zero,zero,804
    c278:	0000c918 	cmpnei	zero,zero,804
    c27c:	0000c918 	cmpnei	zero,zero,804
    c280:	0000c918 	cmpnei	zero,zero,804
    c284:	0000c918 	cmpnei	zero,zero,804
    c288:	0000cbe4 	muli	zero,zero,815
    c28c:	0000cbe4 	muli	zero,zero,815
    c290:	0000cbe4 	muli	zero,zero,815
    c294:	0000cbe4 	muli	zero,zero,815
    c298:	0000cbe4 	muli	zero,zero,815
    c29c:	0000cbe4 	muli	zero,zero,815
    c2a0:	0000cbe4 	muli	zero,zero,815
    c2a4:	0000cbe4 	muli	zero,zero,815
    c2a8:	0000cbe4 	muli	zero,zero,815
    c2ac:	0000cbe4 	muli	zero,zero,815
    c2b0:	0000c958 	cmpnei	zero,zero,805
    c2b4:	0000cbe4 	muli	zero,zero,815
    c2b8:	0000cbe4 	muli	zero,zero,815
    c2bc:	0000cbe4 	muli	zero,zero,815
    c2c0:	0000cbe4 	muli	zero,zero,815
    c2c4:	0000cbe4 	muli	zero,zero,815
    c2c8:	0000cbe4 	muli	zero,zero,815
    c2cc:	0000cbe4 	muli	zero,zero,815
    c2d0:	0000cbe4 	muli	zero,zero,815
    c2d4:	0000cbe4 	muli	zero,zero,815
    c2d8:	0000cbe4 	muli	zero,zero,815
    c2dc:	0000c994 	movui	zero,806
    c2e0:	0000cbe4 	muli	zero,zero,815
    c2e4:	0000cbe4 	muli	zero,zero,815
    c2e8:	0000cbe4 	muli	zero,zero,815
    c2ec:	0000cbe4 	muli	zero,zero,815
    c2f0:	0000cbe4 	muli	zero,zero,815
    c2f4:	0000c9f0 	cmpltui	zero,zero,807
    c2f8:	0000cbe4 	muli	zero,zero,815
    c2fc:	0000cbe4 	muli	zero,zero,815
    c300:	0000ca64 	muli	zero,zero,809
    c304:	0000cbe4 	muli	zero,zero,815
    c308:	0000cbe4 	muli	zero,zero,815
    c30c:	0000cbe4 	muli	zero,zero,815
    c310:	0000cbe4 	muli	zero,zero,815
    c314:	0000cbe4 	muli	zero,zero,815
    c318:	0000cbe4 	muli	zero,zero,815
    c31c:	0000cbe4 	muli	zero,zero,815
    c320:	0000cbe4 	muli	zero,zero,815
    c324:	0000cbe4 	muli	zero,zero,815
    c328:	0000cbe4 	muli	zero,zero,815
    c32c:	0000c80c 	andi	zero,zero,800
    c330:	0000c83c 	xorhi	zero,zero,800
    c334:	0000cbe4 	muli	zero,zero,815
    c338:	0000cbe4 	muli	zero,zero,815
    c33c:	0000cbe4 	muli	zero,zero,815
    c340:	0000cb8c 	andi	zero,zero,814
    c344:	0000c83c 	xorhi	zero,zero,800
    c348:	0000cbe4 	muli	zero,zero,815
    c34c:	0000cbe4 	muli	zero,zero,815
    c350:	0000c6e4 	muli	zero,zero,795
    c354:	0000cbe4 	muli	zero,zero,815
    c358:	0000c6f8 	rdprs	zero,zero,795
    c35c:	0000c730 	cmpltui	zero,zero,796
    c360:	0000c430 	cmpltui	zero,zero,784
    c364:	0000c6d8 	cmpnei	zero,zero,795
    c368:	0000cbe4 	muli	zero,zero,815
    c36c:	0000caa4 	muli	zero,zero,810
    c370:	0000cbe4 	muli	zero,zero,815
    c374:	0000caf0 	cmpltui	zero,zero,811
    c378:	0000cbe4 	muli	zero,zero,815
    c37c:	0000cbe4 	muli	zero,zero,815
    c380:	0000c7b4 	movhi	zero,798
    c384:	42000204 	addi	r8,r8,8
    c388:	d8c02417 	ldw	r3,144(sp)
    c38c:	1c07883a 	add	r3,r3,r16
    c390:	d8c02415 	stw	r3,144(sp)
    c394:	003f8c06 	br	c1c8 <__alt_data_end+0xfffec1c8>
    c398:	d9402017 	ldw	r5,128(sp)
    c39c:	d9002117 	ldw	r4,132(sp)
    c3a0:	000828c0 	call	828c <__swsetup_r>
    c3a4:	1003c11e 	bne	r2,zero,d2ac <___vfiprintf_internal_r+0x1224>
    c3a8:	d9402017 	ldw	r5,128(sp)
    c3ac:	00c00284 	movi	r3,10
    c3b0:	2880030b 	ldhu	r2,12(r5)
    c3b4:	1080068c 	andi	r2,r2,26
    c3b8:	10ff581e 	bne	r2,r3,c11c <__alt_data_end+0xfffec11c>
    c3bc:	d8c02017 	ldw	r3,128(sp)
    c3c0:	1880038f 	ldh	r2,14(r3)
    c3c4:	103f5516 	blt	r2,zero,c11c <__alt_data_end+0xfffec11c>
    c3c8:	d9c02217 	ldw	r7,136(sp)
    c3cc:	d9002117 	ldw	r4,132(sp)
    c3d0:	a80d883a 	mov	r6,r21
    c3d4:	180b883a 	mov	r5,r3
    c3d8:	000d5b00 	call	d5b0 <__sbprintf>
    c3dc:	dfc03517 	ldw	ra,212(sp)
    c3e0:	df003417 	ldw	fp,208(sp)
    c3e4:	ddc03317 	ldw	r23,204(sp)
    c3e8:	dd803217 	ldw	r22,200(sp)
    c3ec:	dd403117 	ldw	r21,196(sp)
    c3f0:	dd003017 	ldw	r20,192(sp)
    c3f4:	dcc02f17 	ldw	r19,188(sp)
    c3f8:	dc802e17 	ldw	r18,184(sp)
    c3fc:	dc402d17 	ldw	r17,180(sp)
    c400:	dc002c17 	ldw	r16,176(sp)
    c404:	dec03604 	addi	sp,sp,216
    c408:	f800283a 	ret
    c40c:	0003e240 	call	3e24 <__sinit>
    c410:	003f2f06 	br	c0d0 <__alt_data_end+0xfffec0d0>
    c414:	d8c02517 	ldw	r3,148(sp)
    c418:	d8802215 	stw	r2,136(sp)
    c41c:	00c7c83a 	sub	r3,zero,r3
    c420:	d8c02515 	stw	r3,148(sp)
    c424:	8c400114 	ori	r17,r17,4
    c428:	b0c00007 	ldb	r3,0(r22)
    c42c:	003f7306 	br	c1fc <__alt_data_end+0xfffec1fc>
    c430:	00800c04 	movi	r2,48
    c434:	d9402217 	ldw	r5,136(sp)
    c438:	d8801d05 	stb	r2,116(sp)
    c43c:	00801e04 	movi	r2,120
    c440:	d8801d45 	stb	r2,117(sp)
    c444:	d8001d85 	stb	zero,118(sp)
    c448:	b811883a 	mov	r8,r23
    c44c:	28c00104 	addi	r3,r5,4
    c450:	2cc00017 	ldw	r19,0(r5)
    c454:	0029883a 	mov	r20,zero
    c458:	88800094 	ori	r2,r17,2
    c45c:	80032516 	blt	r16,zero,d0f4 <___vfiprintf_internal_r+0x106c>
    c460:	00bfdfc4 	movi	r2,-129
    c464:	88a2703a 	and	r17,r17,r2
    c468:	d8c02215 	stw	r3,136(sp)
    c46c:	8c400094 	ori	r17,r17,2
    c470:	98032a1e 	bne	r19,zero,d11c <___vfiprintf_internal_r+0x1094>
    c474:	00800074 	movhi	r2,1
    c478:	1084c404 	addi	r2,r2,4880
    c47c:	d8802615 	stw	r2,152(sp)
    c480:	002b883a 	mov	r21,zero
    c484:	8001741e 	bne	r16,zero,ca58 <___vfiprintf_internal_r+0x9d0>
    c488:	0021883a 	mov	r16,zero
    c48c:	0029883a 	mov	r20,zero
    c490:	ddc01a04 	addi	r23,sp,104
    c494:	8027883a 	mov	r19,r16
    c498:	8500010e 	bge	r16,r20,c4a0 <___vfiprintf_internal_r+0x418>
    c49c:	a027883a 	mov	r19,r20
    c4a0:	ad403fcc 	andi	r21,r21,255
    c4a4:	ad40201c 	xori	r21,r21,128
    c4a8:	ad7fe004 	addi	r21,r21,-128
    c4ac:	a8000126 	beq	r21,zero,c4b4 <___vfiprintf_internal_r+0x42c>
    c4b0:	9cc00044 	addi	r19,r19,1
    c4b4:	89c0008c 	andi	r7,r17,2
    c4b8:	38000126 	beq	r7,zero,c4c0 <___vfiprintf_internal_r+0x438>
    c4bc:	9cc00084 	addi	r19,r19,2
    c4c0:	88c0210c 	andi	r3,r17,132
    c4c4:	1801dd1e 	bne	r3,zero,cc3c <___vfiprintf_internal_r+0xbb4>
    c4c8:	d9402517 	ldw	r5,148(sp)
    c4cc:	2cebc83a 	sub	r21,r5,r19
    c4d0:	0541da0e 	bge	zero,r21,cc3c <___vfiprintf_internal_r+0xbb4>
    c4d4:	07000404 	movi	fp,16
    c4d8:	d8801c17 	ldw	r2,112(sp)
    c4dc:	e543be0e 	bge	fp,r21,d3d8 <___vfiprintf_internal_r+0x1350>
    c4e0:	01400074 	movhi	r5,1
    c4e4:	29452804 	addi	r5,r5,5280
    c4e8:	dc002715 	stw	r16,156(sp)
    c4ec:	d9801b17 	ldw	r6,108(sp)
    c4f0:	a821883a 	mov	r16,r21
    c4f4:	d9402315 	stw	r5,140(sp)
    c4f8:	028001c4 	movi	r10,7
    c4fc:	d9c02915 	stw	r7,164(sp)
    c500:	182b883a 	mov	r21,r3
    c504:	00000506 	br	c51c <___vfiprintf_internal_r+0x494>
    c508:	31000084 	addi	r4,r6,2
    c50c:	42000204 	addi	r8,r8,8
    c510:	180d883a 	mov	r6,r3
    c514:	843ffc04 	addi	r16,r16,-16
    c518:	e4000f0e 	bge	fp,r16,c558 <___vfiprintf_internal_r+0x4d0>
    c51c:	01000074 	movhi	r4,1
    c520:	10800404 	addi	r2,r2,16
    c524:	30c00044 	addi	r3,r6,1
    c528:	21052804 	addi	r4,r4,5280
    c52c:	41000015 	stw	r4,0(r8)
    c530:	47000115 	stw	fp,4(r8)
    c534:	d8801c15 	stw	r2,112(sp)
    c538:	d8c01b15 	stw	r3,108(sp)
    c53c:	50fff20e 	bge	r10,r3,c508 <__alt_data_end+0xfffec508>
    c540:	1001b21e 	bne	r2,zero,cc0c <___vfiprintf_internal_r+0xb84>
    c544:	843ffc04 	addi	r16,r16,-16
    c548:	000d883a 	mov	r6,zero
    c54c:	01000044 	movi	r4,1
    c550:	d811883a 	mov	r8,sp
    c554:	e43ff116 	blt	fp,r16,c51c <__alt_data_end+0xfffec51c>
    c558:	a807883a 	mov	r3,r21
    c55c:	d9c02917 	ldw	r7,164(sp)
    c560:	802b883a 	mov	r21,r16
    c564:	dc002717 	ldw	r16,156(sp)
    c568:	d9402317 	ldw	r5,140(sp)
    c56c:	a885883a 	add	r2,r21,r2
    c570:	45400115 	stw	r21,4(r8)
    c574:	41400015 	stw	r5,0(r8)
    c578:	d8801c15 	stw	r2,112(sp)
    c57c:	d9001b15 	stw	r4,108(sp)
    c580:	014001c4 	movi	r5,7
    c584:	29026216 	blt	r5,r4,cf10 <___vfiprintf_internal_r+0xe88>
    c588:	d9801d87 	ldb	r6,118(sp)
    c58c:	42000204 	addi	r8,r8,8
    c590:	21400044 	addi	r5,r4,1
    c594:	3001ae1e 	bne	r6,zero,cc50 <___vfiprintf_internal_r+0xbc8>
    c598:	3801bb26 	beq	r7,zero,cc88 <___vfiprintf_internal_r+0xc00>
    c59c:	d9001d04 	addi	r4,sp,116
    c5a0:	10800084 	addi	r2,r2,2
    c5a4:	41000015 	stw	r4,0(r8)
    c5a8:	01000084 	movi	r4,2
    c5ac:	41000115 	stw	r4,4(r8)
    c5b0:	d8801c15 	stw	r2,112(sp)
    c5b4:	d9401b15 	stw	r5,108(sp)
    c5b8:	010001c4 	movi	r4,7
    c5bc:	2142680e 	bge	r4,r5,cf60 <___vfiprintf_internal_r+0xed8>
    c5c0:	1002b11e 	bne	r2,zero,d088 <___vfiprintf_internal_r+0x1000>
    c5c4:	01802004 	movi	r6,128
    c5c8:	01400044 	movi	r5,1
    c5cc:	0009883a 	mov	r4,zero
    c5d0:	d811883a 	mov	r8,sp
    c5d4:	1981ae1e 	bne	r3,r6,cc90 <___vfiprintf_internal_r+0xc08>
    c5d8:	d8c02517 	ldw	r3,148(sp)
    c5dc:	1cf9c83a 	sub	fp,r3,r19
    c5e0:	0701ab0e 	bge	zero,fp,cc90 <___vfiprintf_internal_r+0xc08>
    c5e4:	05400404 	movi	r21,16
    c5e8:	af03a90e 	bge	r21,fp,d490 <___vfiprintf_internal_r+0x1408>
    c5ec:	01400074 	movhi	r5,1
    c5f0:	29452404 	addi	r5,r5,5264
    c5f4:	d9402315 	stw	r5,140(sp)
    c5f8:	01c001c4 	movi	r7,7
    c5fc:	00000506 	br	c614 <___vfiprintf_internal_r+0x58c>
    c600:	21800084 	addi	r6,r4,2
    c604:	42000204 	addi	r8,r8,8
    c608:	1809883a 	mov	r4,r3
    c60c:	e73ffc04 	addi	fp,fp,-16
    c610:	af000d0e 	bge	r21,fp,c648 <___vfiprintf_internal_r+0x5c0>
    c614:	10800404 	addi	r2,r2,16
    c618:	20c00044 	addi	r3,r4,1
    c61c:	44800015 	stw	r18,0(r8)
    c620:	45400115 	stw	r21,4(r8)
    c624:	d8801c15 	stw	r2,112(sp)
    c628:	d8c01b15 	stw	r3,108(sp)
    c62c:	38fff40e 	bge	r7,r3,c600 <__alt_data_end+0xfffec600>
    c630:	10022b1e 	bne	r2,zero,cee0 <___vfiprintf_internal_r+0xe58>
    c634:	e73ffc04 	addi	fp,fp,-16
    c638:	01800044 	movi	r6,1
    c63c:	0009883a 	mov	r4,zero
    c640:	d811883a 	mov	r8,sp
    c644:	af3ff316 	blt	r21,fp,c614 <__alt_data_end+0xfffec614>
    c648:	d8c02317 	ldw	r3,140(sp)
    c64c:	1705883a 	add	r2,r2,fp
    c650:	47000115 	stw	fp,4(r8)
    c654:	40c00015 	stw	r3,0(r8)
    c658:	d8801c15 	stw	r2,112(sp)
    c65c:	d9801b15 	stw	r6,108(sp)
    c660:	00c001c4 	movi	r3,7
    c664:	19829416 	blt	r3,r6,d0b8 <___vfiprintf_internal_r+0x1030>
    c668:	8521c83a 	sub	r16,r16,r20
    c66c:	42000204 	addi	r8,r8,8
    c670:	31400044 	addi	r5,r6,1
    c674:	3009883a 	mov	r4,r6
    c678:	04018716 	blt	zero,r16,cc98 <___vfiprintf_internal_r+0xc10>
    c67c:	a085883a 	add	r2,r20,r2
    c680:	45c00015 	stw	r23,0(r8)
    c684:	45000115 	stw	r20,4(r8)
    c688:	d8801c15 	stw	r2,112(sp)
    c68c:	d9401b15 	stw	r5,108(sp)
    c690:	00c001c4 	movi	r3,7
    c694:	1941c20e 	bge	r3,r5,cda0 <___vfiprintf_internal_r+0xd18>
    c698:	1002531e 	bne	r2,zero,cfe8 <___vfiprintf_internal_r+0xf60>
    c69c:	d8001b15 	stw	zero,108(sp)
    c6a0:	8c40010c 	andi	r17,r17,4
    c6a4:	88023226 	beq	r17,zero,cf70 <___vfiprintf_internal_r+0xee8>
    c6a8:	d9002517 	ldw	r4,148(sp)
    c6ac:	24e3c83a 	sub	r17,r4,r19
    c6b0:	04432916 	blt	zero,r17,d358 <___vfiprintf_internal_r+0x12d0>
    c6b4:	d8802517 	ldw	r2,148(sp)
    c6b8:	14c0010e 	bge	r2,r19,c6c0 <___vfiprintf_internal_r+0x638>
    c6bc:	9805883a 	mov	r2,r19
    c6c0:	d8c02417 	ldw	r3,144(sp)
    c6c4:	1887883a 	add	r3,r3,r2
    c6c8:	d8c02415 	stw	r3,144(sp)
    c6cc:	d8001b15 	stw	zero,108(sp)
    c6d0:	d811883a 	mov	r8,sp
    c6d4:	003ea006 	br	c158 <__alt_data_end+0xfffec158>
    c6d8:	8c400814 	ori	r17,r17,32
    c6dc:	b0c00007 	ldb	r3,0(r22)
    c6e0:	003ec606 	br	c1fc <__alt_data_end+0xfffec1fc>
    c6e4:	b0c00007 	ldb	r3,0(r22)
    c6e8:	00801b04 	movi	r2,108
    c6ec:	18832026 	beq	r3,r2,d370 <___vfiprintf_internal_r+0x12e8>
    c6f0:	8c400414 	ori	r17,r17,16
    c6f4:	003ec106 	br	c1fc <__alt_data_end+0xfffec1fc>
    c6f8:	9cc03fcc 	andi	r19,r19,255
    c6fc:	b811883a 	mov	r8,r23
    c700:	9803981e 	bne	r19,zero,d564 <___vfiprintf_internal_r+0x14dc>
    c704:	8880080c 	andi	r2,r17,32
    c708:	1002be26 	beq	r2,zero,d204 <___vfiprintf_internal_r+0x117c>
    c70c:	d9002217 	ldw	r4,136(sp)
    c710:	d9402417 	ldw	r5,144(sp)
    c714:	20800017 	ldw	r2,0(r4)
    c718:	2807d7fa 	srai	r3,r5,31
    c71c:	21000104 	addi	r4,r4,4
    c720:	d9002215 	stw	r4,136(sp)
    c724:	11400015 	stw	r5,0(r2)
    c728:	10c00115 	stw	r3,4(r2)
    c72c:	003e8a06 	br	c158 <__alt_data_end+0xfffec158>
    c730:	9cc03fcc 	andi	r19,r19,255
    c734:	b811883a 	mov	r8,r23
    c738:	9803871e 	bne	r19,zero,d558 <___vfiprintf_internal_r+0x14d0>
    c73c:	8880080c 	andi	r2,r17,32
    c740:	10009a26 	beq	r2,zero,c9ac <___vfiprintf_internal_r+0x924>
    c744:	d9002217 	ldw	r4,136(sp)
    c748:	d8001d85 	stb	zero,118(sp)
    c74c:	20800204 	addi	r2,r4,8
    c750:	24c00017 	ldw	r19,0(r4)
    c754:	25000117 	ldw	r20,4(r4)
    c758:	8002a416 	blt	r16,zero,d1ec <___vfiprintf_internal_r+0x1164>
    c75c:	013fdfc4 	movi	r4,-129
    c760:	9d06b03a 	or	r3,r19,r20
    c764:	d8802215 	stw	r2,136(sp)
    c768:	8922703a 	and	r17,r17,r4
    c76c:	18009b26 	beq	r3,zero,c9dc <___vfiprintf_internal_r+0x954>
    c770:	002b883a 	mov	r21,zero
    c774:	ddc01a04 	addi	r23,sp,104
    c778:	9806d0fa 	srli	r3,r19,3
    c77c:	a008977a 	slli	r4,r20,29
    c780:	a028d0fa 	srli	r20,r20,3
    c784:	9cc001cc 	andi	r19,r19,7
    c788:	98800c04 	addi	r2,r19,48
    c78c:	bdffffc4 	addi	r23,r23,-1
    c790:	20e6b03a 	or	r19,r4,r3
    c794:	b8800005 	stb	r2,0(r23)
    c798:	9d06b03a 	or	r3,r19,r20
    c79c:	183ff61e 	bne	r3,zero,c778 <__alt_data_end+0xfffec778>
    c7a0:	88c0004c 	andi	r3,r17,1
    c7a4:	18021f1e 	bne	r3,zero,d024 <___vfiprintf_internal_r+0xf9c>
    c7a8:	d9401e17 	ldw	r5,120(sp)
    c7ac:	2de9c83a 	sub	r20,r5,r23
    c7b0:	003f3806 	br	c494 <__alt_data_end+0xfffec494>
    c7b4:	9cc03fcc 	andi	r19,r19,255
    c7b8:	b811883a 	mov	r8,r23
    c7bc:	98034f1e 	bne	r19,zero,d4fc <___vfiprintf_internal_r+0x1474>
    c7c0:	00800074 	movhi	r2,1
    c7c4:	1084c404 	addi	r2,r2,4880
    c7c8:	d8802615 	stw	r2,152(sp)
    c7cc:	8880080c 	andi	r2,r17,32
    c7d0:	1000ac26 	beq	r2,zero,ca84 <___vfiprintf_internal_r+0x9fc>
    c7d4:	d9002217 	ldw	r4,136(sp)
    c7d8:	24c00017 	ldw	r19,0(r4)
    c7dc:	25000117 	ldw	r20,4(r4)
    c7e0:	21000204 	addi	r4,r4,8
    c7e4:	d9002215 	stw	r4,136(sp)
    c7e8:	8880004c 	andi	r2,r17,1
    c7ec:	1001e726 	beq	r2,zero,cf8c <___vfiprintf_internal_r+0xf04>
    c7f0:	9d04b03a 	or	r2,r19,r20
    c7f4:	10025c1e 	bne	r2,zero,d168 <___vfiprintf_internal_r+0x10e0>
    c7f8:	d8001d85 	stb	zero,118(sp)
    c7fc:	80024416 	blt	r16,zero,d110 <___vfiprintf_internal_r+0x1088>
    c800:	00bfdfc4 	movi	r2,-129
    c804:	88a2703a 	and	r17,r17,r2
    c808:	003f1d06 	br	c480 <__alt_data_end+0xfffec480>
    c80c:	d8c02217 	ldw	r3,136(sp)
    c810:	04c00044 	movi	r19,1
    c814:	b811883a 	mov	r8,r23
    c818:	18800017 	ldw	r2,0(r3)
    c81c:	18c00104 	addi	r3,r3,4
    c820:	d8001d85 	stb	zero,118(sp)
    c824:	d8801005 	stb	r2,64(sp)
    c828:	d8c02215 	stw	r3,136(sp)
    c82c:	9829883a 	mov	r20,r19
    c830:	ddc01004 	addi	r23,sp,64
    c834:	0021883a 	mov	r16,zero
    c838:	003f1e06 	br	c4b4 <__alt_data_end+0xfffec4b4>
    c83c:	9cc03fcc 	andi	r19,r19,255
    c840:	b811883a 	mov	r8,r23
    c844:	9803331e 	bne	r19,zero,d514 <___vfiprintf_internal_r+0x148c>
    c848:	8880080c 	andi	r2,r17,32
    c84c:	10004826 	beq	r2,zero,c970 <___vfiprintf_internal_r+0x8e8>
    c850:	d9002217 	ldw	r4,136(sp)
    c854:	20800117 	ldw	r2,4(r4)
    c858:	24c00017 	ldw	r19,0(r4)
    c85c:	21000204 	addi	r4,r4,8
    c860:	d9002215 	stw	r4,136(sp)
    c864:	1029883a 	mov	r20,r2
    c868:	10024c16 	blt	r2,zero,d19c <___vfiprintf_internal_r+0x1114>
    c86c:	dd401d83 	ldbu	r21,118(sp)
    c870:	80007116 	blt	r16,zero,ca38 <___vfiprintf_internal_r+0x9b0>
    c874:	00ffdfc4 	movi	r3,-129
    c878:	9d04b03a 	or	r2,r19,r20
    c87c:	88e2703a 	and	r17,r17,r3
    c880:	1000d126 	beq	r2,zero,cbc8 <___vfiprintf_internal_r+0xb40>
    c884:	a0023526 	beq	r20,zero,d15c <___vfiprintf_internal_r+0x10d4>
    c888:	ddc01a04 	addi	r23,sp,104
    c88c:	4039883a 	mov	fp,r8
    c890:	9809883a 	mov	r4,r19
    c894:	a00b883a 	mov	r5,r20
    c898:	01800284 	movi	r6,10
    c89c:	000f883a 	mov	r7,zero
    c8a0:	000e28c0 	call	e28c <__umoddi3>
    c8a4:	10800c04 	addi	r2,r2,48
    c8a8:	bdffffc4 	addi	r23,r23,-1
    c8ac:	9809883a 	mov	r4,r19
    c8b0:	a00b883a 	mov	r5,r20
    c8b4:	b8800005 	stb	r2,0(r23)
    c8b8:	01800284 	movi	r6,10
    c8bc:	000f883a 	mov	r7,zero
    c8c0:	000dc900 	call	dc90 <__udivdi3>
    c8c4:	1027883a 	mov	r19,r2
    c8c8:	10c4b03a 	or	r2,r2,r3
    c8cc:	1829883a 	mov	r20,r3
    c8d0:	103fef1e 	bne	r2,zero,c890 <__alt_data_end+0xfffec890>
    c8d4:	d9001e17 	ldw	r4,120(sp)
    c8d8:	e011883a 	mov	r8,fp
    c8dc:	25e9c83a 	sub	r20,r4,r23
    c8e0:	003eec06 	br	c494 <__alt_data_end+0xfffec494>
    c8e4:	d8802307 	ldb	r2,140(sp)
    c8e8:	1002361e 	bne	r2,zero,d1c4 <___vfiprintf_internal_r+0x113c>
    c8ec:	00c00804 	movi	r3,32
    c8f0:	d8c02305 	stb	r3,140(sp)
    c8f4:	04c00044 	movi	r19,1
    c8f8:	b0c00007 	ldb	r3,0(r22)
    c8fc:	003e3f06 	br	c1fc <__alt_data_end+0xfffec1fc>
    c900:	8c400054 	ori	r17,r17,1
    c904:	b0c00007 	ldb	r3,0(r22)
    c908:	003e3c06 	br	c1fc <__alt_data_end+0xfffec1fc>
    c90c:	8c402014 	ori	r17,r17,128
    c910:	b0c00007 	ldb	r3,0(r22)
    c914:	003e3906 	br	c1fc <__alt_data_end+0xfffec1fc>
    c918:	dc002715 	stw	r16,156(sp)
    c91c:	d8002515 	stw	zero,148(sp)
    c920:	1f3ff404 	addi	fp,r3,-48
    c924:	0009883a 	mov	r4,zero
    c928:	b021883a 	mov	r16,r22
    c92c:	01400284 	movi	r5,10
    c930:	0000f040 	call	f04 <__mulsi3>
    c934:	80c00007 	ldb	r3,0(r16)
    c938:	e089883a 	add	r4,fp,r2
    c93c:	b5800044 	addi	r22,r22,1
    c940:	1f3ff404 	addi	fp,r3,-48
    c944:	b021883a 	mov	r16,r22
    c948:	af3ff82e 	bgeu	r21,fp,c92c <__alt_data_end+0xfffec92c>
    c94c:	d9002515 	stw	r4,148(sp)
    c950:	dc002717 	ldw	r16,156(sp)
    c954:	003e2a06 	br	c200 <__alt_data_end+0xfffec200>
    c958:	9cc03fcc 	andi	r19,r19,255
    c95c:	b811883a 	mov	r8,r23
    c960:	9802e91e 	bne	r19,zero,d508 <___vfiprintf_internal_r+0x1480>
    c964:	8c400414 	ori	r17,r17,16
    c968:	8880080c 	andi	r2,r17,32
    c96c:	103fb81e 	bne	r2,zero,c850 <__alt_data_end+0xfffec850>
    c970:	8880040c 	andi	r2,r17,16
    c974:	10022e26 	beq	r2,zero,d230 <___vfiprintf_internal_r+0x11a8>
    c978:	d9402217 	ldw	r5,136(sp)
    c97c:	2cc00017 	ldw	r19,0(r5)
    c980:	29400104 	addi	r5,r5,4
    c984:	d9402215 	stw	r5,136(sp)
    c988:	9829d7fa 	srai	r20,r19,31
    c98c:	a005883a 	mov	r2,r20
    c990:	003fb506 	br	c868 <__alt_data_end+0xfffec868>
    c994:	9cc03fcc 	andi	r19,r19,255
    c998:	b811883a 	mov	r8,r23
    c99c:	9802fa1e 	bne	r19,zero,d588 <___vfiprintf_internal_r+0x1500>
    c9a0:	8c400414 	ori	r17,r17,16
    c9a4:	8880080c 	andi	r2,r17,32
    c9a8:	103f661e 	bne	r2,zero,c744 <__alt_data_end+0xfffec744>
    c9ac:	8880040c 	andi	r2,r17,16
    c9b0:	10020626 	beq	r2,zero,d1cc <___vfiprintf_internal_r+0x1144>
    c9b4:	d9402217 	ldw	r5,136(sp)
    c9b8:	d8001d85 	stb	zero,118(sp)
    c9bc:	0029883a 	mov	r20,zero
    c9c0:	28800104 	addi	r2,r5,4
    c9c4:	2cc00017 	ldw	r19,0(r5)
    c9c8:	80020816 	blt	r16,zero,d1ec <___vfiprintf_internal_r+0x1164>
    c9cc:	00ffdfc4 	movi	r3,-129
    c9d0:	d8802215 	stw	r2,136(sp)
    c9d4:	88e2703a 	and	r17,r17,r3
    c9d8:	983f651e 	bne	r19,zero,c770 <__alt_data_end+0xfffec770>
    c9dc:	002b883a 	mov	r21,zero
    c9e0:	8002cf26 	beq	r16,zero,d520 <___vfiprintf_internal_r+0x1498>
    c9e4:	0027883a 	mov	r19,zero
    c9e8:	0029883a 	mov	r20,zero
    c9ec:	003f6106 	br	c774 <__alt_data_end+0xfffec774>
    c9f0:	9cc03fcc 	andi	r19,r19,255
    c9f4:	b811883a 	mov	r8,r23
    c9f8:	9802e01e 	bne	r19,zero,d57c <___vfiprintf_internal_r+0x14f4>
    c9fc:	8c400414 	ori	r17,r17,16
    ca00:	8880080c 	andi	r2,r17,32
    ca04:	1000641e 	bne	r2,zero,cb98 <___vfiprintf_internal_r+0xb10>
    ca08:	8880040c 	andi	r2,r17,16
    ca0c:	1001c81e 	bne	r2,zero,d130 <___vfiprintf_internal_r+0x10a8>
    ca10:	8880100c 	andi	r2,r17,64
    ca14:	d8001d85 	stb	zero,118(sp)
    ca18:	1002281e 	bne	r2,zero,d2bc <___vfiprintf_internal_r+0x1234>
    ca1c:	d9002217 	ldw	r4,136(sp)
    ca20:	0029883a 	mov	r20,zero
    ca24:	20800104 	addi	r2,r4,4
    ca28:	24c00017 	ldw	r19,0(r4)
    ca2c:	8001c60e 	bge	r16,zero,d148 <___vfiprintf_internal_r+0x10c0>
    ca30:	d8802215 	stw	r2,136(sp)
    ca34:	002b883a 	mov	r21,zero
    ca38:	9d04b03a 	or	r2,r19,r20
    ca3c:	103f911e 	bne	r2,zero,c884 <__alt_data_end+0xfffec884>
    ca40:	00800044 	movi	r2,1
    ca44:	10803fcc 	andi	r2,r2,255
    ca48:	00c00044 	movi	r3,1
    ca4c:	10c05f26 	beq	r2,r3,cbcc <___vfiprintf_internal_r+0xb44>
    ca50:	00c00084 	movi	r3,2
    ca54:	10ffe31e 	bne	r2,r3,c9e4 <__alt_data_end+0xfffec9e4>
    ca58:	0027883a 	mov	r19,zero
    ca5c:	0029883a 	mov	r20,zero
    ca60:	00015106 	br	cfa8 <___vfiprintf_internal_r+0xf20>
    ca64:	9cc03fcc 	andi	r19,r19,255
    ca68:	b811883a 	mov	r8,r23
    ca6c:	9802c01e 	bne	r19,zero,d570 <___vfiprintf_internal_r+0x14e8>
    ca70:	01400074 	movhi	r5,1
    ca74:	2944bf04 	addi	r5,r5,4860
    ca78:	d9402615 	stw	r5,152(sp)
    ca7c:	8880080c 	andi	r2,r17,32
    ca80:	103f541e 	bne	r2,zero,c7d4 <__alt_data_end+0xfffec7d4>
    ca84:	8880040c 	andi	r2,r17,16
    ca88:	1001f226 	beq	r2,zero,d254 <___vfiprintf_internal_r+0x11cc>
    ca8c:	d9402217 	ldw	r5,136(sp)
    ca90:	0029883a 	mov	r20,zero
    ca94:	2cc00017 	ldw	r19,0(r5)
    ca98:	29400104 	addi	r5,r5,4
    ca9c:	d9402215 	stw	r5,136(sp)
    caa0:	003f5106 	br	c7e8 <__alt_data_end+0xfffec7e8>
    caa4:	d8c02217 	ldw	r3,136(sp)
    caa8:	b811883a 	mov	r8,r23
    caac:	d8001d85 	stb	zero,118(sp)
    cab0:	1dc00017 	ldw	r23,0(r3)
    cab4:	1f000104 	addi	fp,r3,4
    cab8:	b8025926 	beq	r23,zero,d420 <___vfiprintf_internal_r+0x1398>
    cabc:	80023316 	blt	r16,zero,d38c <___vfiprintf_internal_r+0x1304>
    cac0:	800d883a 	mov	r6,r16
    cac4:	000b883a 	mov	r5,zero
    cac8:	b809883a 	mov	r4,r23
    cacc:	da002a15 	stw	r8,168(sp)
    cad0:	000a5680 	call	a568 <memchr>
    cad4:	da002a17 	ldw	r8,168(sp)
    cad8:	10026826 	beq	r2,zero,d47c <___vfiprintf_internal_r+0x13f4>
    cadc:	15e9c83a 	sub	r20,r2,r23
    cae0:	dd401d83 	ldbu	r21,118(sp)
    cae4:	df002215 	stw	fp,136(sp)
    cae8:	0021883a 	mov	r16,zero
    caec:	003e6906 	br	c494 <__alt_data_end+0xfffec494>
    caf0:	9cc03fcc 	andi	r19,r19,255
    caf4:	b811883a 	mov	r8,r23
    caf8:	983fc126 	beq	r19,zero,ca00 <__alt_data_end+0xfffeca00>
    cafc:	d8c02303 	ldbu	r3,140(sp)
    cb00:	d8c01d85 	stb	r3,118(sp)
    cb04:	003fbe06 	br	ca00 <__alt_data_end+0xfffeca00>
    cb08:	d9002217 	ldw	r4,136(sp)
    cb0c:	d9402217 	ldw	r5,136(sp)
    cb10:	21000017 	ldw	r4,0(r4)
    cb14:	28800104 	addi	r2,r5,4
    cb18:	d9002515 	stw	r4,148(sp)
    cb1c:	203e3d16 	blt	r4,zero,c414 <__alt_data_end+0xfffec414>
    cb20:	d8802215 	stw	r2,136(sp)
    cb24:	b0c00007 	ldb	r3,0(r22)
    cb28:	003db406 	br	c1fc <__alt_data_end+0xfffec1fc>
    cb2c:	00c00ac4 	movi	r3,43
    cb30:	d8c02305 	stb	r3,140(sp)
    cb34:	04c00044 	movi	r19,1
    cb38:	b0c00007 	ldb	r3,0(r22)
    cb3c:	003daf06 	br	c1fc <__alt_data_end+0xfffec1fc>
    cb40:	b0c00007 	ldb	r3,0(r22)
    cb44:	01000a84 	movi	r4,42
    cb48:	b4000044 	addi	r16,r22,1
    cb4c:	19025e26 	beq	r3,r4,d4c8 <___vfiprintf_internal_r+0x1440>
    cb50:	1f3ff404 	addi	fp,r3,-48
    cb54:	0009883a 	mov	r4,zero
    cb58:	af025236 	bltu	r21,fp,d4a4 <___vfiprintf_internal_r+0x141c>
    cb5c:	01400284 	movi	r5,10
    cb60:	0000f040 	call	f04 <__mulsi3>
    cb64:	80c00007 	ldb	r3,0(r16)
    cb68:	1709883a 	add	r4,r2,fp
    cb6c:	85800044 	addi	r22,r16,1
    cb70:	1f3ff404 	addi	fp,r3,-48
    cb74:	b021883a 	mov	r16,r22
    cb78:	af3ff82e 	bgeu	r21,fp,cb5c <__alt_data_end+0xfffecb5c>
    cb7c:	2021883a 	mov	r16,r4
    cb80:	203d9f0e 	bge	r4,zero,c200 <__alt_data_end+0xfffec200>
    cb84:	043fffc4 	movi	r16,-1
    cb88:	003d9d06 	br	c200 <__alt_data_end+0xfffec200>
    cb8c:	8c401014 	ori	r17,r17,64
    cb90:	b0c00007 	ldb	r3,0(r22)
    cb94:	003d9906 	br	c1fc <__alt_data_end+0xfffec1fc>
    cb98:	d9002217 	ldw	r4,136(sp)
    cb9c:	d8001d85 	stb	zero,118(sp)
    cba0:	20c00204 	addi	r3,r4,8
    cba4:	24c00017 	ldw	r19,0(r4)
    cba8:	25000117 	ldw	r20,4(r4)
    cbac:	8001e716 	blt	r16,zero,d34c <___vfiprintf_internal_r+0x12c4>
    cbb0:	013fdfc4 	movi	r4,-129
    cbb4:	9d04b03a 	or	r2,r19,r20
    cbb8:	d8c02215 	stw	r3,136(sp)
    cbbc:	8922703a 	and	r17,r17,r4
    cbc0:	002b883a 	mov	r21,zero
    cbc4:	103f2f1e 	bne	r2,zero,c884 <__alt_data_end+0xfffec884>
    cbc8:	803e2f26 	beq	r16,zero,c488 <__alt_data_end+0xfffec488>
    cbcc:	0027883a 	mov	r19,zero
    cbd0:	9cc00c04 	addi	r19,r19,48
    cbd4:	dcc019c5 	stb	r19,103(sp)
    cbd8:	dd002817 	ldw	r20,160(sp)
    cbdc:	ddc019c4 	addi	r23,sp,103
    cbe0:	003e2c06 	br	c494 <__alt_data_end+0xfffec494>
    cbe4:	9cc03fcc 	andi	r19,r19,255
    cbe8:	b811883a 	mov	r8,r23
    cbec:	9802571e 	bne	r19,zero,d54c <___vfiprintf_internal_r+0x14c4>
    cbf0:	18005726 	beq	r3,zero,cd50 <___vfiprintf_internal_r+0xcc8>
    cbf4:	04c00044 	movi	r19,1
    cbf8:	d8c01005 	stb	r3,64(sp)
    cbfc:	d8001d85 	stb	zero,118(sp)
    cc00:	9829883a 	mov	r20,r19
    cc04:	ddc01004 	addi	r23,sp,64
    cc08:	003f0a06 	br	c834 <__alt_data_end+0xfffec834>
    cc0c:	d9402017 	ldw	r5,128(sp)
    cc10:	d9002117 	ldw	r4,132(sp)
    cc14:	d9801a04 	addi	r6,sp,104
    cc18:	da802a15 	stw	r10,168(sp)
    cc1c:	000bf740 	call	bf74 <__sprint_r.part.0>
    cc20:	da802a17 	ldw	r10,168(sp)
    cc24:	1000501e 	bne	r2,zero,cd68 <___vfiprintf_internal_r+0xce0>
    cc28:	d9801b17 	ldw	r6,108(sp)
    cc2c:	d8801c17 	ldw	r2,112(sp)
    cc30:	d811883a 	mov	r8,sp
    cc34:	31000044 	addi	r4,r6,1
    cc38:	003e3606 	br	c514 <__alt_data_end+0xfffec514>
    cc3c:	d9001b17 	ldw	r4,108(sp)
    cc40:	d8801c17 	ldw	r2,112(sp)
    cc44:	21400044 	addi	r5,r4,1
    cc48:	d9801d87 	ldb	r6,118(sp)
    cc4c:	303e5226 	beq	r6,zero,c598 <__alt_data_end+0xfffec598>
    cc50:	01800044 	movi	r6,1
    cc54:	d9001d84 	addi	r4,sp,118
    cc58:	1185883a 	add	r2,r2,r6
    cc5c:	41000015 	stw	r4,0(r8)
    cc60:	41800115 	stw	r6,4(r8)
    cc64:	d8801c15 	stw	r2,112(sp)
    cc68:	d9401b15 	stw	r5,108(sp)
    cc6c:	010001c4 	movi	r4,7
    cc70:	2140b00e 	bge	r4,r5,cf34 <___vfiprintf_internal_r+0xeac>
    cc74:	1000f61e 	bne	r2,zero,d050 <___vfiprintf_internal_r+0xfc8>
    cc78:	3800b31e 	bne	r7,zero,cf48 <___vfiprintf_internal_r+0xec0>
    cc7c:	0009883a 	mov	r4,zero
    cc80:	300b883a 	mov	r5,r6
    cc84:	d811883a 	mov	r8,sp
    cc88:	01802004 	movi	r6,128
    cc8c:	19be5226 	beq	r3,r6,c5d8 <__alt_data_end+0xfffec5d8>
    cc90:	8521c83a 	sub	r16,r16,r20
    cc94:	043e790e 	bge	zero,r16,c67c <__alt_data_end+0xfffec67c>
    cc98:	05400404 	movi	r21,16
    cc9c:	ac01b00e 	bge	r21,r16,d360 <___vfiprintf_internal_r+0x12d8>
    cca0:	01400074 	movhi	r5,1
    cca4:	29452404 	addi	r5,r5,5264
    cca8:	d9402315 	stw	r5,140(sp)
    ccac:	070001c4 	movi	fp,7
    ccb0:	00000506 	br	ccc8 <___vfiprintf_internal_r+0xc40>
    ccb4:	21400084 	addi	r5,r4,2
    ccb8:	42000204 	addi	r8,r8,8
    ccbc:	1809883a 	mov	r4,r3
    ccc0:	843ffc04 	addi	r16,r16,-16
    ccc4:	ac000d0e 	bge	r21,r16,ccfc <___vfiprintf_internal_r+0xc74>
    ccc8:	10800404 	addi	r2,r2,16
    cccc:	20c00044 	addi	r3,r4,1
    ccd0:	44800015 	stw	r18,0(r8)
    ccd4:	45400115 	stw	r21,4(r8)
    ccd8:	d8801c15 	stw	r2,112(sp)
    ccdc:	d8c01b15 	stw	r3,108(sp)
    cce0:	e0fff40e 	bge	fp,r3,ccb4 <__alt_data_end+0xfffeccb4>
    cce4:	1000101e 	bne	r2,zero,cd28 <___vfiprintf_internal_r+0xca0>
    cce8:	843ffc04 	addi	r16,r16,-16
    ccec:	01400044 	movi	r5,1
    ccf0:	0009883a 	mov	r4,zero
    ccf4:	d811883a 	mov	r8,sp
    ccf8:	ac3ff316 	blt	r21,r16,ccc8 <__alt_data_end+0xfffeccc8>
    ccfc:	d8c02317 	ldw	r3,140(sp)
    cd00:	1405883a 	add	r2,r2,r16
    cd04:	44000115 	stw	r16,4(r8)
    cd08:	40c00015 	stw	r3,0(r8)
    cd0c:	d8801c15 	stw	r2,112(sp)
    cd10:	d9401b15 	stw	r5,108(sp)
    cd14:	00c001c4 	movi	r3,7
    cd18:	19401916 	blt	r3,r5,cd80 <___vfiprintf_internal_r+0xcf8>
    cd1c:	42000204 	addi	r8,r8,8
    cd20:	29400044 	addi	r5,r5,1
    cd24:	003e5506 	br	c67c <__alt_data_end+0xfffec67c>
    cd28:	d9402017 	ldw	r5,128(sp)
    cd2c:	d9002117 	ldw	r4,132(sp)
    cd30:	d9801a04 	addi	r6,sp,104
    cd34:	000bf740 	call	bf74 <__sprint_r.part.0>
    cd38:	10000b1e 	bne	r2,zero,cd68 <___vfiprintf_internal_r+0xce0>
    cd3c:	d9001b17 	ldw	r4,108(sp)
    cd40:	d8801c17 	ldw	r2,112(sp)
    cd44:	d811883a 	mov	r8,sp
    cd48:	21400044 	addi	r5,r4,1
    cd4c:	003fdc06 	br	ccc0 <__alt_data_end+0xfffeccc0>
    cd50:	d8801c17 	ldw	r2,112(sp)
    cd54:	10000426 	beq	r2,zero,cd68 <___vfiprintf_internal_r+0xce0>
    cd58:	d9402017 	ldw	r5,128(sp)
    cd5c:	d9002117 	ldw	r4,132(sp)
    cd60:	d9801a04 	addi	r6,sp,104
    cd64:	000bf740 	call	bf74 <__sprint_r.part.0>
    cd68:	d9402017 	ldw	r5,128(sp)
    cd6c:	2880030b 	ldhu	r2,12(r5)
    cd70:	1080100c 	andi	r2,r2,64
    cd74:	10014d1e 	bne	r2,zero,d2ac <___vfiprintf_internal_r+0x1224>
    cd78:	d8802417 	ldw	r2,144(sp)
    cd7c:	003d9706 	br	c3dc <__alt_data_end+0xfffec3dc>
    cd80:	1000d21e 	bne	r2,zero,d0cc <___vfiprintf_internal_r+0x1044>
    cd84:	00c00044 	movi	r3,1
    cd88:	a005883a 	mov	r2,r20
    cd8c:	ddc00015 	stw	r23,0(sp)
    cd90:	dd000115 	stw	r20,4(sp)
    cd94:	dd001c15 	stw	r20,112(sp)
    cd98:	d8c01b15 	stw	r3,108(sp)
    cd9c:	d811883a 	mov	r8,sp
    cda0:	42000204 	addi	r8,r8,8
    cda4:	8c40010c 	andi	r17,r17,4
    cda8:	88004026 	beq	r17,zero,ceac <___vfiprintf_internal_r+0xe24>
    cdac:	d9002517 	ldw	r4,148(sp)
    cdb0:	24e3c83a 	sub	r17,r4,r19
    cdb4:	04403d0e 	bge	zero,r17,ceac <___vfiprintf_internal_r+0xe24>
    cdb8:	04000404 	movi	r16,16
    cdbc:	8441a90e 	bge	r16,r17,d464 <___vfiprintf_internal_r+0x13dc>
    cdc0:	00c00074 	movhi	r3,1
    cdc4:	18c52804 	addi	r3,r3,5280
    cdc8:	d9001b17 	ldw	r4,108(sp)
    cdcc:	d8c02315 	stw	r3,140(sp)
    cdd0:	050001c4 	movi	r20,7
    cdd4:	dd402117 	ldw	r21,132(sp)
    cdd8:	ddc02017 	ldw	r23,128(sp)
    cddc:	00000506 	br	cdf4 <___vfiprintf_internal_r+0xd6c>
    cde0:	21400084 	addi	r5,r4,2
    cde4:	42000204 	addi	r8,r8,8
    cde8:	1809883a 	mov	r4,r3
    cdec:	8c7ffc04 	addi	r17,r17,-16
    cdf0:	84400f0e 	bge	r16,r17,ce30 <___vfiprintf_internal_r+0xda8>
    cdf4:	01400074 	movhi	r5,1
    cdf8:	10800404 	addi	r2,r2,16
    cdfc:	20c00044 	addi	r3,r4,1
    ce00:	29452804 	addi	r5,r5,5280
    ce04:	41400015 	stw	r5,0(r8)
    ce08:	44000115 	stw	r16,4(r8)
    ce0c:	d8801c15 	stw	r2,112(sp)
    ce10:	d8c01b15 	stw	r3,108(sp)
    ce14:	a0fff20e 	bge	r20,r3,cde0 <__alt_data_end+0xfffecde0>
    ce18:	1000141e 	bne	r2,zero,ce6c <___vfiprintf_internal_r+0xde4>
    ce1c:	8c7ffc04 	addi	r17,r17,-16
    ce20:	01400044 	movi	r5,1
    ce24:	0009883a 	mov	r4,zero
    ce28:	d811883a 	mov	r8,sp
    ce2c:	847ff116 	blt	r16,r17,cdf4 <__alt_data_end+0xfffecdf4>
    ce30:	d8c02317 	ldw	r3,140(sp)
    ce34:	1445883a 	add	r2,r2,r17
    ce38:	44400115 	stw	r17,4(r8)
    ce3c:	40c00015 	stw	r3,0(r8)
    ce40:	d8801c15 	stw	r2,112(sp)
    ce44:	d9401b15 	stw	r5,108(sp)
    ce48:	00c001c4 	movi	r3,7
    ce4c:	1940170e 	bge	r3,r5,ceac <___vfiprintf_internal_r+0xe24>
    ce50:	1000101e 	bne	r2,zero,ce94 <___vfiprintf_internal_r+0xe0c>
    ce54:	d8802517 	ldw	r2,148(sp)
    ce58:	14c11616 	blt	r2,r19,d2b4 <___vfiprintf_internal_r+0x122c>
    ce5c:	d9002417 	ldw	r4,144(sp)
    ce60:	2089883a 	add	r4,r4,r2
    ce64:	d9002415 	stw	r4,144(sp)
    ce68:	003e1806 	br	c6cc <__alt_data_end+0xfffec6cc>
    ce6c:	d9801a04 	addi	r6,sp,104
    ce70:	b80b883a 	mov	r5,r23
    ce74:	a809883a 	mov	r4,r21
    ce78:	000bf740 	call	bf74 <__sprint_r.part.0>
    ce7c:	103fba1e 	bne	r2,zero,cd68 <__alt_data_end+0xfffecd68>
    ce80:	d9001b17 	ldw	r4,108(sp)
    ce84:	d8801c17 	ldw	r2,112(sp)
    ce88:	d811883a 	mov	r8,sp
    ce8c:	21400044 	addi	r5,r4,1
    ce90:	003fd606 	br	cdec <__alt_data_end+0xfffecdec>
    ce94:	d9402017 	ldw	r5,128(sp)
    ce98:	d9002117 	ldw	r4,132(sp)
    ce9c:	d9801a04 	addi	r6,sp,104
    cea0:	000bf740 	call	bf74 <__sprint_r.part.0>
    cea4:	103fb01e 	bne	r2,zero,cd68 <__alt_data_end+0xfffecd68>
    cea8:	d8801c17 	ldw	r2,112(sp)
    ceac:	d8c02517 	ldw	r3,148(sp)
    ceb0:	1cc0010e 	bge	r3,r19,ceb8 <___vfiprintf_internal_r+0xe30>
    ceb4:	9807883a 	mov	r3,r19
    ceb8:	d9002417 	ldw	r4,144(sp)
    cebc:	20c9883a 	add	r4,r4,r3
    cec0:	d9002415 	stw	r4,144(sp)
    cec4:	103e0126 	beq	r2,zero,c6cc <__alt_data_end+0xfffec6cc>
    cec8:	d9402017 	ldw	r5,128(sp)
    cecc:	d9002117 	ldw	r4,132(sp)
    ced0:	d9801a04 	addi	r6,sp,104
    ced4:	000bf740 	call	bf74 <__sprint_r.part.0>
    ced8:	103dfc26 	beq	r2,zero,c6cc <__alt_data_end+0xfffec6cc>
    cedc:	003fa206 	br	cd68 <__alt_data_end+0xfffecd68>
    cee0:	d9402017 	ldw	r5,128(sp)
    cee4:	d9002117 	ldw	r4,132(sp)
    cee8:	d9801a04 	addi	r6,sp,104
    ceec:	d9c02b15 	stw	r7,172(sp)
    cef0:	000bf740 	call	bf74 <__sprint_r.part.0>
    cef4:	d9c02b17 	ldw	r7,172(sp)
    cef8:	103f9b1e 	bne	r2,zero,cd68 <__alt_data_end+0xfffecd68>
    cefc:	d9001b17 	ldw	r4,108(sp)
    cf00:	d8801c17 	ldw	r2,112(sp)
    cf04:	d811883a 	mov	r8,sp
    cf08:	21800044 	addi	r6,r4,1
    cf0c:	003dbf06 	br	c60c <__alt_data_end+0xfffec60c>
    cf10:	1000d81e 	bne	r2,zero,d274 <___vfiprintf_internal_r+0x11ec>
    cf14:	d9001d87 	ldb	r4,118(sp)
    cf18:	20000a26 	beq	r4,zero,cf44 <___vfiprintf_internal_r+0xebc>
    cf1c:	00800044 	movi	r2,1
    cf20:	d9001d84 	addi	r4,sp,118
    cf24:	100b883a 	mov	r5,r2
    cf28:	d9000015 	stw	r4,0(sp)
    cf2c:	d8800115 	stw	r2,4(sp)
    cf30:	d811883a 	mov	r8,sp
    cf34:	2809883a 	mov	r4,r5
    cf38:	42000204 	addi	r8,r8,8
    cf3c:	29400044 	addi	r5,r5,1
    cf40:	003d9506 	br	c598 <__alt_data_end+0xfffec598>
    cf44:	3800fd26 	beq	r7,zero,d33c <___vfiprintf_internal_r+0x12b4>
    cf48:	00800084 	movi	r2,2
    cf4c:	d9001d04 	addi	r4,sp,116
    cf50:	d9000015 	stw	r4,0(sp)
    cf54:	d8800115 	stw	r2,4(sp)
    cf58:	01400044 	movi	r5,1
    cf5c:	d811883a 	mov	r8,sp
    cf60:	2809883a 	mov	r4,r5
    cf64:	42000204 	addi	r8,r8,8
    cf68:	29400044 	addi	r5,r5,1
    cf6c:	003f4606 	br	cc88 <__alt_data_end+0xfffecc88>
    cf70:	d8802517 	ldw	r2,148(sp)
    cf74:	14c0010e 	bge	r2,r19,cf7c <___vfiprintf_internal_r+0xef4>
    cf78:	9805883a 	mov	r2,r19
    cf7c:	d9402417 	ldw	r5,144(sp)
    cf80:	288b883a 	add	r5,r5,r2
    cf84:	d9402415 	stw	r5,144(sp)
    cf88:	003dd006 	br	c6cc <__alt_data_end+0xfffec6cc>
    cf8c:	d8001d85 	stb	zero,118(sp)
    cf90:	80005d16 	blt	r16,zero,d108 <___vfiprintf_internal_r+0x1080>
    cf94:	00ffdfc4 	movi	r3,-129
    cf98:	9d04b03a 	or	r2,r19,r20
    cf9c:	88e2703a 	and	r17,r17,r3
    cfa0:	103d3726 	beq	r2,zero,c480 <__alt_data_end+0xfffec480>
    cfa4:	002b883a 	mov	r21,zero
    cfa8:	d9002617 	ldw	r4,152(sp)
    cfac:	ddc01a04 	addi	r23,sp,104
    cfb0:	988003cc 	andi	r2,r19,15
    cfb4:	a006973a 	slli	r3,r20,28
    cfb8:	2085883a 	add	r2,r4,r2
    cfbc:	9826d13a 	srli	r19,r19,4
    cfc0:	10800003 	ldbu	r2,0(r2)
    cfc4:	a028d13a 	srli	r20,r20,4
    cfc8:	bdffffc4 	addi	r23,r23,-1
    cfcc:	1ce6b03a 	or	r19,r3,r19
    cfd0:	b8800005 	stb	r2,0(r23)
    cfd4:	9d04b03a 	or	r2,r19,r20
    cfd8:	103ff51e 	bne	r2,zero,cfb0 <__alt_data_end+0xfffecfb0>
    cfdc:	d8801e17 	ldw	r2,120(sp)
    cfe0:	15e9c83a 	sub	r20,r2,r23
    cfe4:	003d2b06 	br	c494 <__alt_data_end+0xfffec494>
    cfe8:	d9402017 	ldw	r5,128(sp)
    cfec:	d9002117 	ldw	r4,132(sp)
    cff0:	d9801a04 	addi	r6,sp,104
    cff4:	000bf740 	call	bf74 <__sprint_r.part.0>
    cff8:	103f5b1e 	bne	r2,zero,cd68 <__alt_data_end+0xfffecd68>
    cffc:	d8801c17 	ldw	r2,112(sp)
    d000:	d811883a 	mov	r8,sp
    d004:	003f6706 	br	cda4 <__alt_data_end+0xfffecda4>
    d008:	d9402017 	ldw	r5,128(sp)
    d00c:	d9002117 	ldw	r4,132(sp)
    d010:	d9801a04 	addi	r6,sp,104
    d014:	000bf740 	call	bf74 <__sprint_r.part.0>
    d018:	103f531e 	bne	r2,zero,cd68 <__alt_data_end+0xfffecd68>
    d01c:	d811883a 	mov	r8,sp
    d020:	003cd906 	br	c388 <__alt_data_end+0xfffec388>
    d024:	10803fcc 	andi	r2,r2,255
    d028:	1080201c 	xori	r2,r2,128
    d02c:	10bfe004 	addi	r2,r2,-128
    d030:	00c00c04 	movi	r3,48
    d034:	10ffe926 	beq	r2,r3,cfdc <__alt_data_end+0xfffecfdc>
    d038:	b8ffffc5 	stb	r3,-1(r23)
    d03c:	d8c01e17 	ldw	r3,120(sp)
    d040:	b8bfffc4 	addi	r2,r23,-1
    d044:	102f883a 	mov	r23,r2
    d048:	18a9c83a 	sub	r20,r3,r2
    d04c:	003d1106 	br	c494 <__alt_data_end+0xfffec494>
    d050:	d9402017 	ldw	r5,128(sp)
    d054:	d9002117 	ldw	r4,132(sp)
    d058:	d9801a04 	addi	r6,sp,104
    d05c:	d8c02a15 	stw	r3,168(sp)
    d060:	d9c02b15 	stw	r7,172(sp)
    d064:	000bf740 	call	bf74 <__sprint_r.part.0>
    d068:	d8c02a17 	ldw	r3,168(sp)
    d06c:	d9c02b17 	ldw	r7,172(sp)
    d070:	103f3d1e 	bne	r2,zero,cd68 <__alt_data_end+0xfffecd68>
    d074:	d9001b17 	ldw	r4,108(sp)
    d078:	d8801c17 	ldw	r2,112(sp)
    d07c:	d811883a 	mov	r8,sp
    d080:	21400044 	addi	r5,r4,1
    d084:	003d4406 	br	c598 <__alt_data_end+0xfffec598>
    d088:	d9402017 	ldw	r5,128(sp)
    d08c:	d9002117 	ldw	r4,132(sp)
    d090:	d9801a04 	addi	r6,sp,104
    d094:	d8c02a15 	stw	r3,168(sp)
    d098:	000bf740 	call	bf74 <__sprint_r.part.0>
    d09c:	d8c02a17 	ldw	r3,168(sp)
    d0a0:	103f311e 	bne	r2,zero,cd68 <__alt_data_end+0xfffecd68>
    d0a4:	d9001b17 	ldw	r4,108(sp)
    d0a8:	d8801c17 	ldw	r2,112(sp)
    d0ac:	d811883a 	mov	r8,sp
    d0b0:	21400044 	addi	r5,r4,1
    d0b4:	003ef406 	br	cc88 <__alt_data_end+0xfffecc88>
    d0b8:	1000bd1e 	bne	r2,zero,d3b0 <___vfiprintf_internal_r+0x1328>
    d0bc:	01400044 	movi	r5,1
    d0c0:	0009883a 	mov	r4,zero
    d0c4:	d811883a 	mov	r8,sp
    d0c8:	003ef106 	br	cc90 <__alt_data_end+0xfffecc90>
    d0cc:	d9402017 	ldw	r5,128(sp)
    d0d0:	d9002117 	ldw	r4,132(sp)
    d0d4:	d9801a04 	addi	r6,sp,104
    d0d8:	000bf740 	call	bf74 <__sprint_r.part.0>
    d0dc:	103f221e 	bne	r2,zero,cd68 <__alt_data_end+0xfffecd68>
    d0e0:	d9401b17 	ldw	r5,108(sp)
    d0e4:	d8801c17 	ldw	r2,112(sp)
    d0e8:	d811883a 	mov	r8,sp
    d0ec:	29400044 	addi	r5,r5,1
    d0f0:	003d6206 	br	c67c <__alt_data_end+0xfffec67c>
    d0f4:	01400074 	movhi	r5,1
    d0f8:	2944c404 	addi	r5,r5,4880
    d0fc:	d9402615 	stw	r5,152(sp)
    d100:	d8c02215 	stw	r3,136(sp)
    d104:	1023883a 	mov	r17,r2
    d108:	9d04b03a 	or	r2,r19,r20
    d10c:	103fa51e 	bne	r2,zero,cfa4 <__alt_data_end+0xfffecfa4>
    d110:	002b883a 	mov	r21,zero
    d114:	00800084 	movi	r2,2
    d118:	003e4a06 	br	ca44 <__alt_data_end+0xfffeca44>
    d11c:	01400074 	movhi	r5,1
    d120:	2944c404 	addi	r5,r5,4880
    d124:	002b883a 	mov	r21,zero
    d128:	d9402615 	stw	r5,152(sp)
    d12c:	003f9e06 	br	cfa8 <__alt_data_end+0xfffecfa8>
    d130:	d9402217 	ldw	r5,136(sp)
    d134:	d8001d85 	stb	zero,118(sp)
    d138:	0029883a 	mov	r20,zero
    d13c:	28800104 	addi	r2,r5,4
    d140:	2cc00017 	ldw	r19,0(r5)
    d144:	803e3a16 	blt	r16,zero,ca30 <__alt_data_end+0xfffeca30>
    d148:	00ffdfc4 	movi	r3,-129
    d14c:	d8802215 	stw	r2,136(sp)
    d150:	88e2703a 	and	r17,r17,r3
    d154:	002b883a 	mov	r21,zero
    d158:	983e9b26 	beq	r19,zero,cbc8 <__alt_data_end+0xfffecbc8>
    d15c:	00800244 	movi	r2,9
    d160:	14fdc936 	bltu	r2,r19,c888 <__alt_data_end+0xfffec888>
    d164:	003e9a06 	br	cbd0 <__alt_data_end+0xfffecbd0>
    d168:	00800c04 	movi	r2,48
    d16c:	d8c01d45 	stb	r3,117(sp)
    d170:	d8801d05 	stb	r2,116(sp)
    d174:	d8001d85 	stb	zero,118(sp)
    d178:	88c00094 	ori	r3,r17,2
    d17c:	80009c16 	blt	r16,zero,d3f0 <___vfiprintf_internal_r+0x1368>
    d180:	00bfdfc4 	movi	r2,-129
    d184:	88a2703a 	and	r17,r17,r2
    d188:	8c400094 	ori	r17,r17,2
    d18c:	002b883a 	mov	r21,zero
    d190:	003f8506 	br	cfa8 <__alt_data_end+0xfffecfa8>
    d194:	b029883a 	mov	r20,r22
    d198:	003c0b06 	br	c1c8 <__alt_data_end+0xfffec1c8>
    d19c:	04e7c83a 	sub	r19,zero,r19
    d1a0:	05400b44 	movi	r21,45
    d1a4:	9804c03a 	cmpne	r2,r19,zero
    d1a8:	0529c83a 	sub	r20,zero,r20
    d1ac:	dd401d85 	stb	r21,118(sp)
    d1b0:	a0a9c83a 	sub	r20,r20,r2
    d1b4:	80009716 	blt	r16,zero,d414 <___vfiprintf_internal_r+0x138c>
    d1b8:	00bfdfc4 	movi	r2,-129
    d1bc:	88a2703a 	and	r17,r17,r2
    d1c0:	003db006 	br	c884 <__alt_data_end+0xfffec884>
    d1c4:	b0c00007 	ldb	r3,0(r22)
    d1c8:	003c0c06 	br	c1fc <__alt_data_end+0xfffec1fc>
    d1cc:	8880100c 	andi	r2,r17,64
    d1d0:	d8001d85 	stb	zero,118(sp)
    d1d4:	1000461e 	bne	r2,zero,d2f0 <___vfiprintf_internal_r+0x1268>
    d1d8:	d9002217 	ldw	r4,136(sp)
    d1dc:	0029883a 	mov	r20,zero
    d1e0:	20800104 	addi	r2,r4,4
    d1e4:	24c00017 	ldw	r19,0(r4)
    d1e8:	803df80e 	bge	r16,zero,c9cc <__alt_data_end+0xfffec9cc>
    d1ec:	9d06b03a 	or	r3,r19,r20
    d1f0:	d8802215 	stw	r2,136(sp)
    d1f4:	183d5e1e 	bne	r3,zero,c770 <__alt_data_end+0xfffec770>
    d1f8:	002b883a 	mov	r21,zero
    d1fc:	0005883a 	mov	r2,zero
    d200:	003e1006 	br	ca44 <__alt_data_end+0xfffeca44>
    d204:	8880040c 	andi	r2,r17,16
    d208:	1000321e 	bne	r2,zero,d2d4 <___vfiprintf_internal_r+0x124c>
    d20c:	8c40100c 	andi	r17,r17,64
    d210:	88008d26 	beq	r17,zero,d448 <___vfiprintf_internal_r+0x13c0>
    d214:	d9402217 	ldw	r5,136(sp)
    d218:	d8c02417 	ldw	r3,144(sp)
    d21c:	28800017 	ldw	r2,0(r5)
    d220:	29400104 	addi	r5,r5,4
    d224:	d9402215 	stw	r5,136(sp)
    d228:	10c0000d 	sth	r3,0(r2)
    d22c:	003bca06 	br	c158 <__alt_data_end+0xfffec158>
    d230:	8880100c 	andi	r2,r17,64
    d234:	10003a26 	beq	r2,zero,d320 <___vfiprintf_internal_r+0x1298>
    d238:	d8802217 	ldw	r2,136(sp)
    d23c:	14c0000f 	ldh	r19,0(r2)
    d240:	10800104 	addi	r2,r2,4
    d244:	d8802215 	stw	r2,136(sp)
    d248:	9829d7fa 	srai	r20,r19,31
    d24c:	a005883a 	mov	r2,r20
    d250:	003d8506 	br	c868 <__alt_data_end+0xfffec868>
    d254:	8880100c 	andi	r2,r17,64
    d258:	10002b26 	beq	r2,zero,d308 <___vfiprintf_internal_r+0x1280>
    d25c:	d8802217 	ldw	r2,136(sp)
    d260:	0029883a 	mov	r20,zero
    d264:	14c0000b 	ldhu	r19,0(r2)
    d268:	10800104 	addi	r2,r2,4
    d26c:	d8802215 	stw	r2,136(sp)
    d270:	003d5d06 	br	c7e8 <__alt_data_end+0xfffec7e8>
    d274:	d9402017 	ldw	r5,128(sp)
    d278:	d9002117 	ldw	r4,132(sp)
    d27c:	d9801a04 	addi	r6,sp,104
    d280:	d8c02a15 	stw	r3,168(sp)
    d284:	d9c02b15 	stw	r7,172(sp)
    d288:	000bf740 	call	bf74 <__sprint_r.part.0>
    d28c:	d8c02a17 	ldw	r3,168(sp)
    d290:	d9c02b17 	ldw	r7,172(sp)
    d294:	103eb41e 	bne	r2,zero,cd68 <__alt_data_end+0xfffecd68>
    d298:	d9001b17 	ldw	r4,108(sp)
    d29c:	d8801c17 	ldw	r2,112(sp)
    d2a0:	d811883a 	mov	r8,sp
    d2a4:	21400044 	addi	r5,r4,1
    d2a8:	003e6706 	br	cc48 <__alt_data_end+0xfffecc48>
    d2ac:	00bfffc4 	movi	r2,-1
    d2b0:	003c4a06 	br	c3dc <__alt_data_end+0xfffec3dc>
    d2b4:	9805883a 	mov	r2,r19
    d2b8:	003ee806 	br	ce5c <__alt_data_end+0xfffece5c>
    d2bc:	d8c02217 	ldw	r3,136(sp)
    d2c0:	0029883a 	mov	r20,zero
    d2c4:	18800104 	addi	r2,r3,4
    d2c8:	1cc0000b 	ldhu	r19,0(r3)
    d2cc:	803f9e0e 	bge	r16,zero,d148 <__alt_data_end+0xfffed148>
    d2d0:	003dd706 	br	ca30 <__alt_data_end+0xfffeca30>
    d2d4:	d8c02217 	ldw	r3,136(sp)
    d2d8:	d9002417 	ldw	r4,144(sp)
    d2dc:	18800017 	ldw	r2,0(r3)
    d2e0:	18c00104 	addi	r3,r3,4
    d2e4:	d8c02215 	stw	r3,136(sp)
    d2e8:	11000015 	stw	r4,0(r2)
    d2ec:	003b9a06 	br	c158 <__alt_data_end+0xfffec158>
    d2f0:	d8c02217 	ldw	r3,136(sp)
    d2f4:	0029883a 	mov	r20,zero
    d2f8:	18800104 	addi	r2,r3,4
    d2fc:	1cc0000b 	ldhu	r19,0(r3)
    d300:	803db20e 	bge	r16,zero,c9cc <__alt_data_end+0xfffec9cc>
    d304:	003fb906 	br	d1ec <__alt_data_end+0xfffed1ec>
    d308:	d9002217 	ldw	r4,136(sp)
    d30c:	0029883a 	mov	r20,zero
    d310:	24c00017 	ldw	r19,0(r4)
    d314:	21000104 	addi	r4,r4,4
    d318:	d9002215 	stw	r4,136(sp)
    d31c:	003d3206 	br	c7e8 <__alt_data_end+0xfffec7e8>
    d320:	d8c02217 	ldw	r3,136(sp)
    d324:	1cc00017 	ldw	r19,0(r3)
    d328:	18c00104 	addi	r3,r3,4
    d32c:	d8c02215 	stw	r3,136(sp)
    d330:	9829d7fa 	srai	r20,r19,31
    d334:	a005883a 	mov	r2,r20
    d338:	003d4b06 	br	c868 <__alt_data_end+0xfffec868>
    d33c:	0009883a 	mov	r4,zero
    d340:	01400044 	movi	r5,1
    d344:	d811883a 	mov	r8,sp
    d348:	003e4f06 	br	cc88 <__alt_data_end+0xfffecc88>
    d34c:	d8c02215 	stw	r3,136(sp)
    d350:	002b883a 	mov	r21,zero
    d354:	003db806 	br	ca38 <__alt_data_end+0xfffeca38>
    d358:	d811883a 	mov	r8,sp
    d35c:	003e9606 	br	cdb8 <__alt_data_end+0xfffecdb8>
    d360:	01000074 	movhi	r4,1
    d364:	21052404 	addi	r4,r4,5264
    d368:	d9002315 	stw	r4,140(sp)
    d36c:	003e6306 	br	ccfc <__alt_data_end+0xfffeccfc>
    d370:	b0c00043 	ldbu	r3,1(r22)
    d374:	8c400814 	ori	r17,r17,32
    d378:	b5800044 	addi	r22,r22,1
    d37c:	18c03fcc 	andi	r3,r3,255
    d380:	18c0201c 	xori	r3,r3,128
    d384:	18ffe004 	addi	r3,r3,-128
    d388:	003b9c06 	br	c1fc <__alt_data_end+0xfffec1fc>
    d38c:	b809883a 	mov	r4,r23
    d390:	da002a15 	stw	r8,168(sp)
    d394:	0005de00 	call	5de0 <strlen>
    d398:	1029883a 	mov	r20,r2
    d39c:	dd401d83 	ldbu	r21,118(sp)
    d3a0:	df002215 	stw	fp,136(sp)
    d3a4:	0021883a 	mov	r16,zero
    d3a8:	da002a17 	ldw	r8,168(sp)
    d3ac:	003c3906 	br	c494 <__alt_data_end+0xfffec494>
    d3b0:	d9402017 	ldw	r5,128(sp)
    d3b4:	d9002117 	ldw	r4,132(sp)
    d3b8:	d9801a04 	addi	r6,sp,104
    d3bc:	000bf740 	call	bf74 <__sprint_r.part.0>
    d3c0:	103e691e 	bne	r2,zero,cd68 <__alt_data_end+0xfffecd68>
    d3c4:	d9001b17 	ldw	r4,108(sp)
    d3c8:	d8801c17 	ldw	r2,112(sp)
    d3cc:	d811883a 	mov	r8,sp
    d3d0:	21400044 	addi	r5,r4,1
    d3d4:	003e2e06 	br	cc90 <__alt_data_end+0xfffecc90>
    d3d8:	01000074 	movhi	r4,1
    d3dc:	21052804 	addi	r4,r4,5280
    d3e0:	d9002315 	stw	r4,140(sp)
    d3e4:	d9001b17 	ldw	r4,108(sp)
    d3e8:	21000044 	addi	r4,r4,1
    d3ec:	003c5e06 	br	c568 <__alt_data_end+0xfffec568>
    d3f0:	002b883a 	mov	r21,zero
    d3f4:	00800084 	movi	r2,2
    d3f8:	10803fcc 	andi	r2,r2,255
    d3fc:	01000044 	movi	r4,1
    d400:	11002b26 	beq	r2,r4,d4b0 <___vfiprintf_internal_r+0x1428>
    d404:	01000084 	movi	r4,2
    d408:	11002b1e 	bne	r2,r4,d4b8 <___vfiprintf_internal_r+0x1430>
    d40c:	1823883a 	mov	r17,r3
    d410:	003ee506 	br	cfa8 <__alt_data_end+0xfffecfa8>
    d414:	8807883a 	mov	r3,r17
    d418:	00800044 	movi	r2,1
    d41c:	003ff606 	br	d3f8 <__alt_data_end+0xfffed3f8>
    d420:	00800184 	movi	r2,6
    d424:	1400012e 	bgeu	r2,r16,d42c <___vfiprintf_internal_r+0x13a4>
    d428:	1021883a 	mov	r16,r2
    d42c:	8029883a 	mov	r20,r16
    d430:	8027883a 	mov	r19,r16
    d434:	80002216 	blt	r16,zero,d4c0 <___vfiprintf_internal_r+0x1438>
    d438:	05c00074 	movhi	r23,1
    d43c:	df002215 	stw	fp,136(sp)
    d440:	bdc4c904 	addi	r23,r23,4900
    d444:	003cfb06 	br	c834 <__alt_data_end+0xfffec834>
    d448:	d9002217 	ldw	r4,136(sp)
    d44c:	d9402417 	ldw	r5,144(sp)
    d450:	20800017 	ldw	r2,0(r4)
    d454:	21000104 	addi	r4,r4,4
    d458:	d9002215 	stw	r4,136(sp)
    d45c:	11400015 	stw	r5,0(r2)
    d460:	003b3d06 	br	c158 <__alt_data_end+0xfffec158>
    d464:	01400074 	movhi	r5,1
    d468:	29452804 	addi	r5,r5,5280
    d46c:	d9402315 	stw	r5,140(sp)
    d470:	d9401b17 	ldw	r5,108(sp)
    d474:	29400044 	addi	r5,r5,1
    d478:	003e6d06 	br	ce30 <__alt_data_end+0xfffece30>
    d47c:	8029883a 	mov	r20,r16
    d480:	dd401d83 	ldbu	r21,118(sp)
    d484:	df002215 	stw	fp,136(sp)
    d488:	0021883a 	mov	r16,zero
    d48c:	003c0106 	br	c494 <__alt_data_end+0xfffec494>
    d490:	00c00074 	movhi	r3,1
    d494:	18c52404 	addi	r3,r3,5264
    d498:	d8c02315 	stw	r3,140(sp)
    d49c:	280d883a 	mov	r6,r5
    d4a0:	003c6906 	br	c648 <__alt_data_end+0xfffec648>
    d4a4:	802d883a 	mov	r22,r16
    d4a8:	0021883a 	mov	r16,zero
    d4ac:	003b5406 	br	c200 <__alt_data_end+0xfffec200>
    d4b0:	1823883a 	mov	r17,r3
    d4b4:	003cf306 	br	c884 <__alt_data_end+0xfffec884>
    d4b8:	1823883a 	mov	r17,r3
    d4bc:	003cad06 	br	c774 <__alt_data_end+0xfffec774>
    d4c0:	0027883a 	mov	r19,zero
    d4c4:	003fdc06 	br	d438 <__alt_data_end+0xfffed438>
    d4c8:	d9402217 	ldw	r5,136(sp)
    d4cc:	8005883a 	mov	r2,r16
    d4d0:	b0c00043 	ldbu	r3,1(r22)
    d4d4:	2c000017 	ldw	r16,0(r5)
    d4d8:	29000104 	addi	r4,r5,4
    d4dc:	d9002215 	stw	r4,136(sp)
    d4e0:	102d883a 	mov	r22,r2
    d4e4:	803fa50e 	bge	r16,zero,d37c <__alt_data_end+0xfffed37c>
    d4e8:	18c03fcc 	andi	r3,r3,255
    d4ec:	18c0201c 	xori	r3,r3,128
    d4f0:	043fffc4 	movi	r16,-1
    d4f4:	18ffe004 	addi	r3,r3,-128
    d4f8:	003b4006 	br	c1fc <__alt_data_end+0xfffec1fc>
    d4fc:	d9402303 	ldbu	r5,140(sp)
    d500:	d9401d85 	stb	r5,118(sp)
    d504:	003cae06 	br	c7c0 <__alt_data_end+0xfffec7c0>
    d508:	d8c02303 	ldbu	r3,140(sp)
    d50c:	d8c01d85 	stb	r3,118(sp)
    d510:	003d1406 	br	c964 <__alt_data_end+0xfffec964>
    d514:	d8c02303 	ldbu	r3,140(sp)
    d518:	d8c01d85 	stb	r3,118(sp)
    d51c:	003cca06 	br	c848 <__alt_data_end+0xfffec848>
    d520:	8880004c 	andi	r2,r17,1
    d524:	002b883a 	mov	r21,zero
    d528:	10000526 	beq	r2,zero,d540 <___vfiprintf_internal_r+0x14b8>
    d52c:	00800c04 	movi	r2,48
    d530:	d88019c5 	stb	r2,103(sp)
    d534:	dd002817 	ldw	r20,160(sp)
    d538:	ddc019c4 	addi	r23,sp,103
    d53c:	003bd506 	br	c494 <__alt_data_end+0xfffec494>
    d540:	0029883a 	mov	r20,zero
    d544:	ddc01a04 	addi	r23,sp,104
    d548:	003bd206 	br	c494 <__alt_data_end+0xfffec494>
    d54c:	d9002303 	ldbu	r4,140(sp)
    d550:	d9001d85 	stb	r4,118(sp)
    d554:	003da606 	br	cbf0 <__alt_data_end+0xfffecbf0>
    d558:	d8c02303 	ldbu	r3,140(sp)
    d55c:	d8c01d85 	stb	r3,118(sp)
    d560:	003c7606 	br	c73c <__alt_data_end+0xfffec73c>
    d564:	d8c02303 	ldbu	r3,140(sp)
    d568:	d8c01d85 	stb	r3,118(sp)
    d56c:	003c6506 	br	c704 <__alt_data_end+0xfffec704>
    d570:	d9002303 	ldbu	r4,140(sp)
    d574:	d9001d85 	stb	r4,118(sp)
    d578:	003d3d06 	br	ca70 <__alt_data_end+0xfffeca70>
    d57c:	d8c02303 	ldbu	r3,140(sp)
    d580:	d8c01d85 	stb	r3,118(sp)
    d584:	003d1d06 	br	c9fc <__alt_data_end+0xfffec9fc>
    d588:	d8c02303 	ldbu	r3,140(sp)
    d58c:	d8c01d85 	stb	r3,118(sp)
    d590:	003d0306 	br	c9a0 <__alt_data_end+0xfffec9a0>

0000d594 <__vfiprintf_internal>:
    d594:	00800074 	movhi	r2,1
    d598:	108be504 	addi	r2,r2,12180
    d59c:	300f883a 	mov	r7,r6
    d5a0:	280d883a 	mov	r6,r5
    d5a4:	200b883a 	mov	r5,r4
    d5a8:	11000017 	ldw	r4,0(r2)
    d5ac:	000c0881 	jmpi	c088 <___vfiprintf_internal_r>

0000d5b0 <__sbprintf>:
    d5b0:	2880030b 	ldhu	r2,12(r5)
    d5b4:	2ac01917 	ldw	r11,100(r5)
    d5b8:	2a80038b 	ldhu	r10,14(r5)
    d5bc:	2a400717 	ldw	r9,28(r5)
    d5c0:	2a000917 	ldw	r8,36(r5)
    d5c4:	defee204 	addi	sp,sp,-1144
    d5c8:	00c10004 	movi	r3,1024
    d5cc:	dc011a15 	stw	r16,1128(sp)
    d5d0:	10bfff4c 	andi	r2,r2,65533
    d5d4:	2821883a 	mov	r16,r5
    d5d8:	d8cb883a 	add	r5,sp,r3
    d5dc:	dc811c15 	stw	r18,1136(sp)
    d5e0:	dc411b15 	stw	r17,1132(sp)
    d5e4:	dfc11d15 	stw	ra,1140(sp)
    d5e8:	2025883a 	mov	r18,r4
    d5ec:	d881030d 	sth	r2,1036(sp)
    d5f0:	dac11915 	stw	r11,1124(sp)
    d5f4:	da81038d 	sth	r10,1038(sp)
    d5f8:	da410715 	stw	r9,1052(sp)
    d5fc:	da010915 	stw	r8,1060(sp)
    d600:	dec10015 	stw	sp,1024(sp)
    d604:	dec10415 	stw	sp,1040(sp)
    d608:	d8c10215 	stw	r3,1032(sp)
    d60c:	d8c10515 	stw	r3,1044(sp)
    d610:	d8010615 	stw	zero,1048(sp)
    d614:	000c0880 	call	c088 <___vfiprintf_internal_r>
    d618:	1023883a 	mov	r17,r2
    d61c:	10000416 	blt	r2,zero,d630 <__sbprintf+0x80>
    d620:	d9410004 	addi	r5,sp,1024
    d624:	9009883a 	mov	r4,r18
    d628:	0003a380 	call	3a38 <_fflush_r>
    d62c:	10000d1e 	bne	r2,zero,d664 <__sbprintf+0xb4>
    d630:	d881030b 	ldhu	r2,1036(sp)
    d634:	1080100c 	andi	r2,r2,64
    d638:	10000326 	beq	r2,zero,d648 <__sbprintf+0x98>
    d63c:	8080030b 	ldhu	r2,12(r16)
    d640:	10801014 	ori	r2,r2,64
    d644:	8080030d 	sth	r2,12(r16)
    d648:	8805883a 	mov	r2,r17
    d64c:	dfc11d17 	ldw	ra,1140(sp)
    d650:	dc811c17 	ldw	r18,1136(sp)
    d654:	dc411b17 	ldw	r17,1132(sp)
    d658:	dc011a17 	ldw	r16,1128(sp)
    d65c:	dec11e04 	addi	sp,sp,1144
    d660:	f800283a 	ret
    d664:	047fffc4 	movi	r17,-1
    d668:	003ff106 	br	d630 <__alt_data_end+0xfffed630>

0000d66c <_calloc_r>:
    d66c:	defffe04 	addi	sp,sp,-8
    d670:	2805883a 	mov	r2,r5
    d674:	dc000015 	stw	r16,0(sp)
    d678:	300b883a 	mov	r5,r6
    d67c:	2021883a 	mov	r16,r4
    d680:	1009883a 	mov	r4,r2
    d684:	dfc00115 	stw	ra,4(sp)
    d688:	0000f040 	call	f04 <__mulsi3>
    d68c:	100b883a 	mov	r5,r2
    d690:	8009883a 	mov	r4,r16
    d694:	0004e440 	call	4e44 <_malloc_r>
    d698:	10002926 	beq	r2,zero,d740 <_calloc_r+0xd4>
    d69c:	11bfff17 	ldw	r6,-4(r2)
    d6a0:	1021883a 	mov	r16,r2
    d6a4:	00bfff04 	movi	r2,-4
    d6a8:	308c703a 	and	r6,r6,r2
    d6ac:	00c00904 	movi	r3,36
    d6b0:	308d883a 	add	r6,r6,r2
    d6b4:	19801636 	bltu	r3,r6,d710 <_calloc_r+0xa4>
    d6b8:	008004c4 	movi	r2,19
    d6bc:	11800b2e 	bgeu	r2,r6,d6ec <_calloc_r+0x80>
    d6c0:	80000015 	stw	zero,0(r16)
    d6c4:	80000115 	stw	zero,4(r16)
    d6c8:	008006c4 	movi	r2,27
    d6cc:	11801a2e 	bgeu	r2,r6,d738 <_calloc_r+0xcc>
    d6d0:	80000215 	stw	zero,8(r16)
    d6d4:	80000315 	stw	zero,12(r16)
    d6d8:	30c0151e 	bne	r6,r3,d730 <_calloc_r+0xc4>
    d6dc:	80000415 	stw	zero,16(r16)
    d6e0:	80800604 	addi	r2,r16,24
    d6e4:	80000515 	stw	zero,20(r16)
    d6e8:	00000106 	br	d6f0 <_calloc_r+0x84>
    d6ec:	8005883a 	mov	r2,r16
    d6f0:	10000015 	stw	zero,0(r2)
    d6f4:	10000115 	stw	zero,4(r2)
    d6f8:	10000215 	stw	zero,8(r2)
    d6fc:	8005883a 	mov	r2,r16
    d700:	dfc00117 	ldw	ra,4(sp)
    d704:	dc000017 	ldw	r16,0(sp)
    d708:	dec00204 	addi	sp,sp,8
    d70c:	f800283a 	ret
    d710:	000b883a 	mov	r5,zero
    d714:	8009883a 	mov	r4,r16
    d718:	00057980 	call	5798 <memset>
    d71c:	8005883a 	mov	r2,r16
    d720:	dfc00117 	ldw	ra,4(sp)
    d724:	dc000017 	ldw	r16,0(sp)
    d728:	dec00204 	addi	sp,sp,8
    d72c:	f800283a 	ret
    d730:	80800404 	addi	r2,r16,16
    d734:	003fee06 	br	d6f0 <__alt_data_end+0xfffed6f0>
    d738:	80800204 	addi	r2,r16,8
    d73c:	003fec06 	br	d6f0 <__alt_data_end+0xfffed6f0>
    d740:	0005883a 	mov	r2,zero
    d744:	003fee06 	br	d700 <__alt_data_end+0xfffed700>

0000d748 <__fputwc>:
    d748:	defff804 	addi	sp,sp,-32
    d74c:	dcc00415 	stw	r19,16(sp)
    d750:	dc800315 	stw	r18,12(sp)
    d754:	dc000115 	stw	r16,4(sp)
    d758:	dfc00715 	stw	ra,28(sp)
    d75c:	dd400615 	stw	r21,24(sp)
    d760:	dd000515 	stw	r20,20(sp)
    d764:	dc400215 	stw	r17,8(sp)
    d768:	2027883a 	mov	r19,r4
    d76c:	2825883a 	mov	r18,r5
    d770:	3021883a 	mov	r16,r6
    d774:	000a4b40 	call	a4b4 <__locale_mb_cur_max>
    d778:	00c00044 	movi	r3,1
    d77c:	10c03e26 	beq	r2,r3,d878 <__fputwc+0x130>
    d780:	81c01704 	addi	r7,r16,92
    d784:	900d883a 	mov	r6,r18
    d788:	d80b883a 	mov	r5,sp
    d78c:	9809883a 	mov	r4,r19
    d790:	000daa80 	call	daa8 <_wcrtomb_r>
    d794:	1029883a 	mov	r20,r2
    d798:	00bfffc4 	movi	r2,-1
    d79c:	a0802026 	beq	r20,r2,d820 <__fputwc+0xd8>
    d7a0:	d9400003 	ldbu	r5,0(sp)
    d7a4:	a0001c26 	beq	r20,zero,d818 <__fputwc+0xd0>
    d7a8:	0023883a 	mov	r17,zero
    d7ac:	05400284 	movi	r21,10
    d7b0:	00000906 	br	d7d8 <__fputwc+0x90>
    d7b4:	80800017 	ldw	r2,0(r16)
    d7b8:	11400005 	stb	r5,0(r2)
    d7bc:	80c00017 	ldw	r3,0(r16)
    d7c0:	18c00044 	addi	r3,r3,1
    d7c4:	80c00015 	stw	r3,0(r16)
    d7c8:	8c400044 	addi	r17,r17,1
    d7cc:	dc45883a 	add	r2,sp,r17
    d7d0:	8d00112e 	bgeu	r17,r20,d818 <__fputwc+0xd0>
    d7d4:	11400003 	ldbu	r5,0(r2)
    d7d8:	80c00217 	ldw	r3,8(r16)
    d7dc:	18ffffc4 	addi	r3,r3,-1
    d7e0:	80c00215 	stw	r3,8(r16)
    d7e4:	183ff30e 	bge	r3,zero,d7b4 <__alt_data_end+0xfffed7b4>
    d7e8:	80800617 	ldw	r2,24(r16)
    d7ec:	18801916 	blt	r3,r2,d854 <__fputwc+0x10c>
    d7f0:	80800017 	ldw	r2,0(r16)
    d7f4:	11400005 	stb	r5,0(r2)
    d7f8:	80800017 	ldw	r2,0(r16)
    d7fc:	10c00003 	ldbu	r3,0(r2)
    d800:	10800044 	addi	r2,r2,1
    d804:	1d402326 	beq	r3,r21,d894 <__fputwc+0x14c>
    d808:	80800015 	stw	r2,0(r16)
    d80c:	8c400044 	addi	r17,r17,1
    d810:	dc45883a 	add	r2,sp,r17
    d814:	8d3fef36 	bltu	r17,r20,d7d4 <__alt_data_end+0xfffed7d4>
    d818:	9005883a 	mov	r2,r18
    d81c:	00000406 	br	d830 <__fputwc+0xe8>
    d820:	80c0030b 	ldhu	r3,12(r16)
    d824:	a005883a 	mov	r2,r20
    d828:	18c01014 	ori	r3,r3,64
    d82c:	80c0030d 	sth	r3,12(r16)
    d830:	dfc00717 	ldw	ra,28(sp)
    d834:	dd400617 	ldw	r21,24(sp)
    d838:	dd000517 	ldw	r20,20(sp)
    d83c:	dcc00417 	ldw	r19,16(sp)
    d840:	dc800317 	ldw	r18,12(sp)
    d844:	dc400217 	ldw	r17,8(sp)
    d848:	dc000117 	ldw	r16,4(sp)
    d84c:	dec00804 	addi	sp,sp,32
    d850:	f800283a 	ret
    d854:	800d883a 	mov	r6,r16
    d858:	29403fcc 	andi	r5,r5,255
    d85c:	9809883a 	mov	r4,r19
    d860:	000d9500 	call	d950 <__swbuf_r>
    d864:	10bfffe0 	cmpeqi	r2,r2,-1
    d868:	10803fcc 	andi	r2,r2,255
    d86c:	103fd626 	beq	r2,zero,d7c8 <__alt_data_end+0xfffed7c8>
    d870:	00bfffc4 	movi	r2,-1
    d874:	003fee06 	br	d830 <__alt_data_end+0xfffed830>
    d878:	90ffffc4 	addi	r3,r18,-1
    d87c:	01003f84 	movi	r4,254
    d880:	20ffbf36 	bltu	r4,r3,d780 <__alt_data_end+0xfffed780>
    d884:	900b883a 	mov	r5,r18
    d888:	dc800005 	stb	r18,0(sp)
    d88c:	1029883a 	mov	r20,r2
    d890:	003fc506 	br	d7a8 <__alt_data_end+0xfffed7a8>
    d894:	800d883a 	mov	r6,r16
    d898:	a80b883a 	mov	r5,r21
    d89c:	9809883a 	mov	r4,r19
    d8a0:	000d9500 	call	d950 <__swbuf_r>
    d8a4:	10bfffe0 	cmpeqi	r2,r2,-1
    d8a8:	003fef06 	br	d868 <__alt_data_end+0xfffed868>

0000d8ac <_fputwc_r>:
    d8ac:	3080030b 	ldhu	r2,12(r6)
    d8b0:	10c8000c 	andi	r3,r2,8192
    d8b4:	1800051e 	bne	r3,zero,d8cc <_fputwc_r+0x20>
    d8b8:	30c01917 	ldw	r3,100(r6)
    d8bc:	10880014 	ori	r2,r2,8192
    d8c0:	3080030d 	sth	r2,12(r6)
    d8c4:	18880014 	ori	r2,r3,8192
    d8c8:	30801915 	stw	r2,100(r6)
    d8cc:	000d7481 	jmpi	d748 <__fputwc>

0000d8d0 <fputwc>:
    d8d0:	00800074 	movhi	r2,1
    d8d4:	defffc04 	addi	sp,sp,-16
    d8d8:	108be504 	addi	r2,r2,12180
    d8dc:	dc000115 	stw	r16,4(sp)
    d8e0:	14000017 	ldw	r16,0(r2)
    d8e4:	dc400215 	stw	r17,8(sp)
    d8e8:	dfc00315 	stw	ra,12(sp)
    d8ec:	2023883a 	mov	r17,r4
    d8f0:	80000226 	beq	r16,zero,d8fc <fputwc+0x2c>
    d8f4:	80800e17 	ldw	r2,56(r16)
    d8f8:	10001026 	beq	r2,zero,d93c <fputwc+0x6c>
    d8fc:	2880030b 	ldhu	r2,12(r5)
    d900:	10c8000c 	andi	r3,r2,8192
    d904:	1800051e 	bne	r3,zero,d91c <fputwc+0x4c>
    d908:	28c01917 	ldw	r3,100(r5)
    d90c:	10880014 	ori	r2,r2,8192
    d910:	2880030d 	sth	r2,12(r5)
    d914:	18880014 	ori	r2,r3,8192
    d918:	28801915 	stw	r2,100(r5)
    d91c:	280d883a 	mov	r6,r5
    d920:	8009883a 	mov	r4,r16
    d924:	880b883a 	mov	r5,r17
    d928:	dfc00317 	ldw	ra,12(sp)
    d92c:	dc400217 	ldw	r17,8(sp)
    d930:	dc000117 	ldw	r16,4(sp)
    d934:	dec00404 	addi	sp,sp,16
    d938:	000d7481 	jmpi	d748 <__fputwc>
    d93c:	8009883a 	mov	r4,r16
    d940:	d9400015 	stw	r5,0(sp)
    d944:	0003e240 	call	3e24 <__sinit>
    d948:	d9400017 	ldw	r5,0(sp)
    d94c:	003feb06 	br	d8fc <__alt_data_end+0xfffed8fc>

0000d950 <__swbuf_r>:
    d950:	defffb04 	addi	sp,sp,-20
    d954:	dcc00315 	stw	r19,12(sp)
    d958:	dc800215 	stw	r18,8(sp)
    d95c:	dc000015 	stw	r16,0(sp)
    d960:	dfc00415 	stw	ra,16(sp)
    d964:	dc400115 	stw	r17,4(sp)
    d968:	2025883a 	mov	r18,r4
    d96c:	2827883a 	mov	r19,r5
    d970:	3021883a 	mov	r16,r6
    d974:	20000226 	beq	r4,zero,d980 <__swbuf_r+0x30>
    d978:	20800e17 	ldw	r2,56(r4)
    d97c:	10004226 	beq	r2,zero,da88 <__swbuf_r+0x138>
    d980:	80800617 	ldw	r2,24(r16)
    d984:	8100030b 	ldhu	r4,12(r16)
    d988:	80800215 	stw	r2,8(r16)
    d98c:	2080020c 	andi	r2,r4,8
    d990:	10003626 	beq	r2,zero,da6c <__swbuf_r+0x11c>
    d994:	80c00417 	ldw	r3,16(r16)
    d998:	18003426 	beq	r3,zero,da6c <__swbuf_r+0x11c>
    d99c:	2088000c 	andi	r2,r4,8192
    d9a0:	9c403fcc 	andi	r17,r19,255
    d9a4:	10001a26 	beq	r2,zero,da10 <__swbuf_r+0xc0>
    d9a8:	80800017 	ldw	r2,0(r16)
    d9ac:	81000517 	ldw	r4,20(r16)
    d9b0:	10c7c83a 	sub	r3,r2,r3
    d9b4:	1900200e 	bge	r3,r4,da38 <__swbuf_r+0xe8>
    d9b8:	18c00044 	addi	r3,r3,1
    d9bc:	81000217 	ldw	r4,8(r16)
    d9c0:	11400044 	addi	r5,r2,1
    d9c4:	81400015 	stw	r5,0(r16)
    d9c8:	213fffc4 	addi	r4,r4,-1
    d9cc:	81000215 	stw	r4,8(r16)
    d9d0:	14c00005 	stb	r19,0(r2)
    d9d4:	80800517 	ldw	r2,20(r16)
    d9d8:	10c01e26 	beq	r2,r3,da54 <__swbuf_r+0x104>
    d9dc:	8080030b 	ldhu	r2,12(r16)
    d9e0:	1080004c 	andi	r2,r2,1
    d9e4:	10000226 	beq	r2,zero,d9f0 <__swbuf_r+0xa0>
    d9e8:	00800284 	movi	r2,10
    d9ec:	88801926 	beq	r17,r2,da54 <__swbuf_r+0x104>
    d9f0:	8805883a 	mov	r2,r17
    d9f4:	dfc00417 	ldw	ra,16(sp)
    d9f8:	dcc00317 	ldw	r19,12(sp)
    d9fc:	dc800217 	ldw	r18,8(sp)
    da00:	dc400117 	ldw	r17,4(sp)
    da04:	dc000017 	ldw	r16,0(sp)
    da08:	dec00504 	addi	sp,sp,20
    da0c:	f800283a 	ret
    da10:	81401917 	ldw	r5,100(r16)
    da14:	00b7ffc4 	movi	r2,-8193
    da18:	21080014 	ori	r4,r4,8192
    da1c:	2884703a 	and	r2,r5,r2
    da20:	80801915 	stw	r2,100(r16)
    da24:	80800017 	ldw	r2,0(r16)
    da28:	8100030d 	sth	r4,12(r16)
    da2c:	81000517 	ldw	r4,20(r16)
    da30:	10c7c83a 	sub	r3,r2,r3
    da34:	193fe016 	blt	r3,r4,d9b8 <__alt_data_end+0xfffed9b8>
    da38:	800b883a 	mov	r5,r16
    da3c:	9009883a 	mov	r4,r18
    da40:	0003a380 	call	3a38 <_fflush_r>
    da44:	1000071e 	bne	r2,zero,da64 <__swbuf_r+0x114>
    da48:	80800017 	ldw	r2,0(r16)
    da4c:	00c00044 	movi	r3,1
    da50:	003fda06 	br	d9bc <__alt_data_end+0xfffed9bc>
    da54:	800b883a 	mov	r5,r16
    da58:	9009883a 	mov	r4,r18
    da5c:	0003a380 	call	3a38 <_fflush_r>
    da60:	103fe326 	beq	r2,zero,d9f0 <__alt_data_end+0xfffed9f0>
    da64:	00bfffc4 	movi	r2,-1
    da68:	003fe206 	br	d9f4 <__alt_data_end+0xfffed9f4>
    da6c:	800b883a 	mov	r5,r16
    da70:	9009883a 	mov	r4,r18
    da74:	000828c0 	call	828c <__swsetup_r>
    da78:	103ffa1e 	bne	r2,zero,da64 <__alt_data_end+0xfffeda64>
    da7c:	8100030b 	ldhu	r4,12(r16)
    da80:	80c00417 	ldw	r3,16(r16)
    da84:	003fc506 	br	d99c <__alt_data_end+0xfffed99c>
    da88:	0003e240 	call	3e24 <__sinit>
    da8c:	003fbc06 	br	d980 <__alt_data_end+0xfffed980>

0000da90 <__swbuf>:
    da90:	00800074 	movhi	r2,1
    da94:	108be504 	addi	r2,r2,12180
    da98:	280d883a 	mov	r6,r5
    da9c:	200b883a 	mov	r5,r4
    daa0:	11000017 	ldw	r4,0(r2)
    daa4:	000d9501 	jmpi	d950 <__swbuf_r>

0000daa8 <_wcrtomb_r>:
    daa8:	defff604 	addi	sp,sp,-40
    daac:	00800074 	movhi	r2,1
    dab0:	dc800815 	stw	r18,32(sp)
    dab4:	dc400715 	stw	r17,28(sp)
    dab8:	dc000615 	stw	r16,24(sp)
    dabc:	108be904 	addi	r2,r2,12196
    dac0:	dfc00915 	stw	ra,36(sp)
    dac4:	2021883a 	mov	r16,r4
    dac8:	3823883a 	mov	r17,r7
    dacc:	14800017 	ldw	r18,0(r2)
    dad0:	28001426 	beq	r5,zero,db24 <_wcrtomb_r+0x7c>
    dad4:	d9400415 	stw	r5,16(sp)
    dad8:	d9800515 	stw	r6,20(sp)
    dadc:	000a4a80 	call	a4a8 <__locale_charset>
    dae0:	d9800517 	ldw	r6,20(sp)
    dae4:	d9400417 	ldw	r5,16(sp)
    dae8:	100f883a 	mov	r7,r2
    daec:	dc400015 	stw	r17,0(sp)
    daf0:	8009883a 	mov	r4,r16
    daf4:	903ee83a 	callr	r18
    daf8:	00ffffc4 	movi	r3,-1
    dafc:	10c0031e 	bne	r2,r3,db0c <_wcrtomb_r+0x64>
    db00:	88000015 	stw	zero,0(r17)
    db04:	00c02284 	movi	r3,138
    db08:	80c00015 	stw	r3,0(r16)
    db0c:	dfc00917 	ldw	ra,36(sp)
    db10:	dc800817 	ldw	r18,32(sp)
    db14:	dc400717 	ldw	r17,28(sp)
    db18:	dc000617 	ldw	r16,24(sp)
    db1c:	dec00a04 	addi	sp,sp,40
    db20:	f800283a 	ret
    db24:	000a4a80 	call	a4a8 <__locale_charset>
    db28:	100f883a 	mov	r7,r2
    db2c:	dc400015 	stw	r17,0(sp)
    db30:	000d883a 	mov	r6,zero
    db34:	d9400104 	addi	r5,sp,4
    db38:	8009883a 	mov	r4,r16
    db3c:	903ee83a 	callr	r18
    db40:	003fed06 	br	daf8 <__alt_data_end+0xfffedaf8>

0000db44 <wcrtomb>:
    db44:	defff604 	addi	sp,sp,-40
    db48:	00800074 	movhi	r2,1
    db4c:	dc800615 	stw	r18,24(sp)
    db50:	dc400515 	stw	r17,20(sp)
    db54:	108be504 	addi	r2,r2,12180
    db58:	dfc00915 	stw	ra,36(sp)
    db5c:	dd000815 	stw	r20,32(sp)
    db60:	dcc00715 	stw	r19,28(sp)
    db64:	dc000415 	stw	r16,16(sp)
    db68:	3025883a 	mov	r18,r6
    db6c:	14400017 	ldw	r17,0(r2)
    db70:	20001926 	beq	r4,zero,dbd8 <wcrtomb+0x94>
    db74:	00800074 	movhi	r2,1
    db78:	108be904 	addi	r2,r2,12196
    db7c:	15000017 	ldw	r20,0(r2)
    db80:	2021883a 	mov	r16,r4
    db84:	2827883a 	mov	r19,r5
    db88:	000a4a80 	call	a4a8 <__locale_charset>
    db8c:	100f883a 	mov	r7,r2
    db90:	dc800015 	stw	r18,0(sp)
    db94:	980d883a 	mov	r6,r19
    db98:	800b883a 	mov	r5,r16
    db9c:	8809883a 	mov	r4,r17
    dba0:	a03ee83a 	callr	r20
    dba4:	00ffffc4 	movi	r3,-1
    dba8:	10c0031e 	bne	r2,r3,dbb8 <wcrtomb+0x74>
    dbac:	90000015 	stw	zero,0(r18)
    dbb0:	00c02284 	movi	r3,138
    dbb4:	88c00015 	stw	r3,0(r17)
    dbb8:	dfc00917 	ldw	ra,36(sp)
    dbbc:	dd000817 	ldw	r20,32(sp)
    dbc0:	dcc00717 	ldw	r19,28(sp)
    dbc4:	dc800617 	ldw	r18,24(sp)
    dbc8:	dc400517 	ldw	r17,20(sp)
    dbcc:	dc000417 	ldw	r16,16(sp)
    dbd0:	dec00a04 	addi	sp,sp,40
    dbd4:	f800283a 	ret
    dbd8:	00800074 	movhi	r2,1
    dbdc:	108be904 	addi	r2,r2,12196
    dbe0:	14000017 	ldw	r16,0(r2)
    dbe4:	000a4a80 	call	a4a8 <__locale_charset>
    dbe8:	100f883a 	mov	r7,r2
    dbec:	dc800015 	stw	r18,0(sp)
    dbf0:	000d883a 	mov	r6,zero
    dbf4:	d9400104 	addi	r5,sp,4
    dbf8:	8809883a 	mov	r4,r17
    dbfc:	803ee83a 	callr	r16
    dc00:	003fe806 	br	dba4 <__alt_data_end+0xfffedba4>

0000dc04 <__ascii_wctomb>:
    dc04:	28000526 	beq	r5,zero,dc1c <__ascii_wctomb+0x18>
    dc08:	00803fc4 	movi	r2,255
    dc0c:	11800536 	bltu	r2,r6,dc24 <__ascii_wctomb+0x20>
    dc10:	29800005 	stb	r6,0(r5)
    dc14:	00800044 	movi	r2,1
    dc18:	f800283a 	ret
    dc1c:	0005883a 	mov	r2,zero
    dc20:	f800283a 	ret
    dc24:	00802284 	movi	r2,138
    dc28:	20800015 	stw	r2,0(r4)
    dc2c:	00bfffc4 	movi	r2,-1
    dc30:	f800283a 	ret

0000dc34 <_wctomb_r>:
    dc34:	00800074 	movhi	r2,1
    dc38:	defff904 	addi	sp,sp,-28
    dc3c:	108be904 	addi	r2,r2,12196
    dc40:	dfc00615 	stw	ra,24(sp)
    dc44:	dc400515 	stw	r17,20(sp)
    dc48:	dc000415 	stw	r16,16(sp)
    dc4c:	3823883a 	mov	r17,r7
    dc50:	14000017 	ldw	r16,0(r2)
    dc54:	d9000115 	stw	r4,4(sp)
    dc58:	d9400215 	stw	r5,8(sp)
    dc5c:	d9800315 	stw	r6,12(sp)
    dc60:	000a4a80 	call	a4a8 <__locale_charset>
    dc64:	d9800317 	ldw	r6,12(sp)
    dc68:	d9400217 	ldw	r5,8(sp)
    dc6c:	d9000117 	ldw	r4,4(sp)
    dc70:	100f883a 	mov	r7,r2
    dc74:	dc400015 	stw	r17,0(sp)
    dc78:	803ee83a 	callr	r16
    dc7c:	dfc00617 	ldw	ra,24(sp)
    dc80:	dc400517 	ldw	r17,20(sp)
    dc84:	dc000417 	ldw	r16,16(sp)
    dc88:	dec00704 	addi	sp,sp,28
    dc8c:	f800283a 	ret

0000dc90 <__udivdi3>:
    dc90:	defff404 	addi	sp,sp,-48
    dc94:	dcc00515 	stw	r19,20(sp)
    dc98:	dc000215 	stw	r16,8(sp)
    dc9c:	dfc00b15 	stw	ra,44(sp)
    dca0:	df000a15 	stw	fp,40(sp)
    dca4:	ddc00915 	stw	r23,36(sp)
    dca8:	dd800815 	stw	r22,32(sp)
    dcac:	dd400715 	stw	r21,28(sp)
    dcb0:	dd000615 	stw	r20,24(sp)
    dcb4:	dc800415 	stw	r18,16(sp)
    dcb8:	dc400315 	stw	r17,12(sp)
    dcbc:	2027883a 	mov	r19,r4
    dcc0:	2821883a 	mov	r16,r5
    dcc4:	3800461e 	bne	r7,zero,dde0 <__udivdi3+0x150>
    dcc8:	3023883a 	mov	r17,r6
    dccc:	2025883a 	mov	r18,r4
    dcd0:	2980572e 	bgeu	r5,r6,de30 <__udivdi3+0x1a0>
    dcd4:	00bfffd4 	movui	r2,65535
    dcd8:	282d883a 	mov	r22,r5
    dcdc:	1180b236 	bltu	r2,r6,dfa8 <__udivdi3+0x318>
    dce0:	00803fc4 	movi	r2,255
    dce4:	1185803a 	cmpltu	r2,r2,r6
    dce8:	100490fa 	slli	r2,r2,3
    dcec:	3086d83a 	srl	r3,r6,r2
    dcf0:	01000074 	movhi	r4,1
    dcf4:	210478c4 	addi	r4,r4,4579
    dcf8:	20c7883a 	add	r3,r4,r3
    dcfc:	18c00003 	ldbu	r3,0(r3)
    dd00:	1885883a 	add	r2,r3,r2
    dd04:	00c00804 	movi	r3,32
    dd08:	1887c83a 	sub	r3,r3,r2
    dd0c:	18000526 	beq	r3,zero,dd24 <__udivdi3+0x94>
    dd10:	80e0983a 	sll	r16,r16,r3
    dd14:	9884d83a 	srl	r2,r19,r2
    dd18:	30e2983a 	sll	r17,r6,r3
    dd1c:	98e4983a 	sll	r18,r19,r3
    dd20:	142cb03a 	or	r22,r2,r16
    dd24:	882ad43a 	srli	r21,r17,16
    dd28:	b009883a 	mov	r4,r22
    dd2c:	8d3fffcc 	andi	r20,r17,65535
    dd30:	a80b883a 	mov	r5,r21
    dd34:	00036880 	call	3688 <__umodsi3>
    dd38:	b009883a 	mov	r4,r22
    dd3c:	a80b883a 	mov	r5,r21
    dd40:	1027883a 	mov	r19,r2
    dd44:	00036240 	call	3624 <__udivsi3>
    dd48:	100b883a 	mov	r5,r2
    dd4c:	a009883a 	mov	r4,r20
    dd50:	102d883a 	mov	r22,r2
    dd54:	0000f040 	call	f04 <__mulsi3>
    dd58:	9826943a 	slli	r19,r19,16
    dd5c:	9006d43a 	srli	r3,r18,16
    dd60:	1cc6b03a 	or	r3,r3,r19
    dd64:	1880052e 	bgeu	r3,r2,dd7c <__udivdi3+0xec>
    dd68:	1c47883a 	add	r3,r3,r17
    dd6c:	b13fffc4 	addi	r4,r22,-1
    dd70:	1c400136 	bltu	r3,r17,dd78 <__udivdi3+0xe8>
    dd74:	18814236 	bltu	r3,r2,e280 <__udivdi3+0x5f0>
    dd78:	202d883a 	mov	r22,r4
    dd7c:	18a1c83a 	sub	r16,r3,r2
    dd80:	8009883a 	mov	r4,r16
    dd84:	a80b883a 	mov	r5,r21
    dd88:	00036880 	call	3688 <__umodsi3>
    dd8c:	1027883a 	mov	r19,r2
    dd90:	8009883a 	mov	r4,r16
    dd94:	a80b883a 	mov	r5,r21
    dd98:	9826943a 	slli	r19,r19,16
    dd9c:	00036240 	call	3624 <__udivsi3>
    dda0:	100b883a 	mov	r5,r2
    dda4:	a009883a 	mov	r4,r20
    dda8:	94bfffcc 	andi	r18,r18,65535
    ddac:	1021883a 	mov	r16,r2
    ddb0:	94e4b03a 	or	r18,r18,r19
    ddb4:	0000f040 	call	f04 <__mulsi3>
    ddb8:	9080052e 	bgeu	r18,r2,ddd0 <__udivdi3+0x140>
    ddbc:	8ca5883a 	add	r18,r17,r18
    ddc0:	80ffffc4 	addi	r3,r16,-1
    ddc4:	94410c36 	bltu	r18,r17,e1f8 <__udivdi3+0x568>
    ddc8:	90810b2e 	bgeu	r18,r2,e1f8 <__udivdi3+0x568>
    ddcc:	843fff84 	addi	r16,r16,-2
    ddd0:	b004943a 	slli	r2,r22,16
    ddd4:	0007883a 	mov	r3,zero
    ddd8:	1404b03a 	or	r2,r2,r16
    dddc:	00005e06 	br	df58 <__udivdi3+0x2c8>
    dde0:	29c05b36 	bltu	r5,r7,df50 <__udivdi3+0x2c0>
    dde4:	00bfffd4 	movui	r2,65535
    dde8:	11c0672e 	bgeu	r2,r7,df88 <__udivdi3+0x2f8>
    ddec:	00804034 	movhi	r2,256
    ddf0:	10bfffc4 	addi	r2,r2,-1
    ddf4:	11c10a36 	bltu	r2,r7,e220 <__udivdi3+0x590>
    ddf8:	00800404 	movi	r2,16
    ddfc:	3886d83a 	srl	r3,r7,r2
    de00:	01000074 	movhi	r4,1
    de04:	210478c4 	addi	r4,r4,4579
    de08:	20c7883a 	add	r3,r4,r3
    de0c:	18c00003 	ldbu	r3,0(r3)
    de10:	05c00804 	movi	r23,32
    de14:	1885883a 	add	r2,r3,r2
    de18:	b8afc83a 	sub	r23,r23,r2
    de1c:	b800671e 	bne	r23,zero,dfbc <__udivdi3+0x32c>
    de20:	3c010536 	bltu	r7,r16,e238 <__udivdi3+0x5a8>
    de24:	9985403a 	cmpgeu	r2,r19,r6
    de28:	0007883a 	mov	r3,zero
    de2c:	00004a06 	br	df58 <__udivdi3+0x2c8>
    de30:	3000041e 	bne	r6,zero,de44 <__udivdi3+0x1b4>
    de34:	000b883a 	mov	r5,zero
    de38:	01000044 	movi	r4,1
    de3c:	00036240 	call	3624 <__udivsi3>
    de40:	1023883a 	mov	r17,r2
    de44:	00bfffd4 	movui	r2,65535
    de48:	1440532e 	bgeu	r2,r17,df98 <__udivdi3+0x308>
    de4c:	00804034 	movhi	r2,256
    de50:	10bfffc4 	addi	r2,r2,-1
    de54:	1440f436 	bltu	r2,r17,e228 <__udivdi3+0x598>
    de58:	00800404 	movi	r2,16
    de5c:	8886d83a 	srl	r3,r17,r2
    de60:	01000074 	movhi	r4,1
    de64:	210478c4 	addi	r4,r4,4579
    de68:	20c7883a 	add	r3,r4,r3
    de6c:	18c00003 	ldbu	r3,0(r3)
    de70:	1885883a 	add	r2,r3,r2
    de74:	00c00804 	movi	r3,32
    de78:	1887c83a 	sub	r3,r3,r2
    de7c:	1800a51e 	bne	r3,zero,e114 <__udivdi3+0x484>
    de80:	882ad43a 	srli	r21,r17,16
    de84:	8461c83a 	sub	r16,r16,r17
    de88:	8d3fffcc 	andi	r20,r17,65535
    de8c:	00c00044 	movi	r3,1
    de90:	a80b883a 	mov	r5,r21
    de94:	8009883a 	mov	r4,r16
    de98:	d8c00115 	stw	r3,4(sp)
    de9c:	00036880 	call	3688 <__umodsi3>
    dea0:	a80b883a 	mov	r5,r21
    dea4:	8009883a 	mov	r4,r16
    dea8:	1027883a 	mov	r19,r2
    deac:	00036240 	call	3624 <__udivsi3>
    deb0:	a00b883a 	mov	r5,r20
    deb4:	1009883a 	mov	r4,r2
    deb8:	102d883a 	mov	r22,r2
    debc:	0000f040 	call	f04 <__mulsi3>
    dec0:	9826943a 	slli	r19,r19,16
    dec4:	900ed43a 	srli	r7,r18,16
    dec8:	d8c00117 	ldw	r3,4(sp)
    decc:	3cceb03a 	or	r7,r7,r19
    ded0:	3880052e 	bgeu	r7,r2,dee8 <__udivdi3+0x258>
    ded4:	3c4f883a 	add	r7,r7,r17
    ded8:	b13fffc4 	addi	r4,r22,-1
    dedc:	3c400136 	bltu	r7,r17,dee4 <__udivdi3+0x254>
    dee0:	3880e436 	bltu	r7,r2,e274 <__udivdi3+0x5e4>
    dee4:	202d883a 	mov	r22,r4
    dee8:	38a1c83a 	sub	r16,r7,r2
    deec:	8009883a 	mov	r4,r16
    def0:	a80b883a 	mov	r5,r21
    def4:	d8c00115 	stw	r3,4(sp)
    def8:	00036880 	call	3688 <__umodsi3>
    defc:	1027883a 	mov	r19,r2
    df00:	8009883a 	mov	r4,r16
    df04:	a80b883a 	mov	r5,r21
    df08:	9826943a 	slli	r19,r19,16
    df0c:	00036240 	call	3624 <__udivsi3>
    df10:	a00b883a 	mov	r5,r20
    df14:	1009883a 	mov	r4,r2
    df18:	94bfffcc 	andi	r18,r18,65535
    df1c:	1021883a 	mov	r16,r2
    df20:	94e4b03a 	or	r18,r18,r19
    df24:	0000f040 	call	f04 <__mulsi3>
    df28:	d8c00117 	ldw	r3,4(sp)
    df2c:	9080052e 	bgeu	r18,r2,df44 <__udivdi3+0x2b4>
    df30:	8ca5883a 	add	r18,r17,r18
    df34:	813fffc4 	addi	r4,r16,-1
    df38:	9440ad36 	bltu	r18,r17,e1f0 <__udivdi3+0x560>
    df3c:	9080ac2e 	bgeu	r18,r2,e1f0 <__udivdi3+0x560>
    df40:	843fff84 	addi	r16,r16,-2
    df44:	b004943a 	slli	r2,r22,16
    df48:	1404b03a 	or	r2,r2,r16
    df4c:	00000206 	br	df58 <__udivdi3+0x2c8>
    df50:	0007883a 	mov	r3,zero
    df54:	0005883a 	mov	r2,zero
    df58:	dfc00b17 	ldw	ra,44(sp)
    df5c:	df000a17 	ldw	fp,40(sp)
    df60:	ddc00917 	ldw	r23,36(sp)
    df64:	dd800817 	ldw	r22,32(sp)
    df68:	dd400717 	ldw	r21,28(sp)
    df6c:	dd000617 	ldw	r20,24(sp)
    df70:	dcc00517 	ldw	r19,20(sp)
    df74:	dc800417 	ldw	r18,16(sp)
    df78:	dc400317 	ldw	r17,12(sp)
    df7c:	dc000217 	ldw	r16,8(sp)
    df80:	dec00c04 	addi	sp,sp,48
    df84:	f800283a 	ret
    df88:	00803fc4 	movi	r2,255
    df8c:	11c5803a 	cmpltu	r2,r2,r7
    df90:	100490fa 	slli	r2,r2,3
    df94:	003f9906 	br	ddfc <__alt_data_end+0xfffeddfc>
    df98:	00803fc4 	movi	r2,255
    df9c:	1445803a 	cmpltu	r2,r2,r17
    dfa0:	100490fa 	slli	r2,r2,3
    dfa4:	003fad06 	br	de5c <__alt_data_end+0xfffede5c>
    dfa8:	00804034 	movhi	r2,256
    dfac:	10bfffc4 	addi	r2,r2,-1
    dfb0:	11809f36 	bltu	r2,r6,e230 <__udivdi3+0x5a0>
    dfb4:	00800404 	movi	r2,16
    dfb8:	003f4c06 	br	dcec <__alt_data_end+0xfffedcec>
    dfbc:	3dce983a 	sll	r7,r7,r23
    dfc0:	30b8d83a 	srl	fp,r6,r2
    dfc4:	80a2d83a 	srl	r17,r16,r2
    dfc8:	35cc983a 	sll	r6,r6,r23
    dfcc:	3f38b03a 	or	fp,r7,fp
    dfd0:	e024d43a 	srli	r18,fp,16
    dfd4:	9884d83a 	srl	r2,r19,r2
    dfd8:	85e0983a 	sll	r16,r16,r23
    dfdc:	8809883a 	mov	r4,r17
    dfe0:	900b883a 	mov	r5,r18
    dfe4:	d9800015 	stw	r6,0(sp)
    dfe8:	1420b03a 	or	r16,r2,r16
    dfec:	00036880 	call	3688 <__umodsi3>
    dff0:	900b883a 	mov	r5,r18
    dff4:	8809883a 	mov	r4,r17
    dff8:	1029883a 	mov	r20,r2
    dffc:	e5bfffcc 	andi	r22,fp,65535
    e000:	00036240 	call	3624 <__udivsi3>
    e004:	100b883a 	mov	r5,r2
    e008:	b009883a 	mov	r4,r22
    e00c:	102b883a 	mov	r21,r2
    e010:	0000f040 	call	f04 <__mulsi3>
    e014:	a028943a 	slli	r20,r20,16
    e018:	8006d43a 	srli	r3,r16,16
    e01c:	1d06b03a 	or	r3,r3,r20
    e020:	1880042e 	bgeu	r3,r2,e034 <__udivdi3+0x3a4>
    e024:	1f07883a 	add	r3,r3,fp
    e028:	a93fffc4 	addi	r4,r21,-1
    e02c:	1f00892e 	bgeu	r3,fp,e254 <__udivdi3+0x5c4>
    e030:	202b883a 	mov	r21,r4
    e034:	18a3c83a 	sub	r17,r3,r2
    e038:	8809883a 	mov	r4,r17
    e03c:	900b883a 	mov	r5,r18
    e040:	00036880 	call	3688 <__umodsi3>
    e044:	1029883a 	mov	r20,r2
    e048:	8809883a 	mov	r4,r17
    e04c:	900b883a 	mov	r5,r18
    e050:	a028943a 	slli	r20,r20,16
    e054:	00036240 	call	3624 <__udivsi3>
    e058:	100b883a 	mov	r5,r2
    e05c:	b009883a 	mov	r4,r22
    e060:	843fffcc 	andi	r16,r16,65535
    e064:	1023883a 	mov	r17,r2
    e068:	8520b03a 	or	r16,r16,r20
    e06c:	0000f040 	call	f04 <__mulsi3>
    e070:	8080042e 	bgeu	r16,r2,e084 <__udivdi3+0x3f4>
    e074:	8721883a 	add	r16,r16,fp
    e078:	88ffffc4 	addi	r3,r17,-1
    e07c:	8700712e 	bgeu	r16,fp,e244 <__udivdi3+0x5b4>
    e080:	1823883a 	mov	r17,r3
    e084:	a80e943a 	slli	r7,r21,16
    e088:	d8c00017 	ldw	r3,0(sp)
    e08c:	80a1c83a 	sub	r16,r16,r2
    e090:	3c64b03a 	or	r18,r7,r17
    e094:	1d3fffcc 	andi	r20,r3,65535
    e098:	9022d43a 	srli	r17,r18,16
    e09c:	95bfffcc 	andi	r22,r18,65535
    e0a0:	a00b883a 	mov	r5,r20
    e0a4:	b009883a 	mov	r4,r22
    e0a8:	182ad43a 	srli	r21,r3,16
    e0ac:	0000f040 	call	f04 <__mulsi3>
    e0b0:	a00b883a 	mov	r5,r20
    e0b4:	8809883a 	mov	r4,r17
    e0b8:	1039883a 	mov	fp,r2
    e0bc:	0000f040 	call	f04 <__mulsi3>
    e0c0:	8809883a 	mov	r4,r17
    e0c4:	a80b883a 	mov	r5,r21
    e0c8:	1029883a 	mov	r20,r2
    e0cc:	0000f040 	call	f04 <__mulsi3>
    e0d0:	a80b883a 	mov	r5,r21
    e0d4:	b009883a 	mov	r4,r22
    e0d8:	1023883a 	mov	r17,r2
    e0dc:	0000f040 	call	f04 <__mulsi3>
    e0e0:	e006d43a 	srli	r3,fp,16
    e0e4:	1505883a 	add	r2,r2,r20
    e0e8:	1887883a 	add	r3,r3,r2
    e0ec:	1d00022e 	bgeu	r3,r20,e0f8 <__udivdi3+0x468>
    e0f0:	00800074 	movhi	r2,1
    e0f4:	88a3883a 	add	r17,r17,r2
    e0f8:	1804d43a 	srli	r2,r3,16
    e0fc:	1463883a 	add	r17,r2,r17
    e100:	84404436 	bltu	r16,r17,e214 <__udivdi3+0x584>
    e104:	84403e26 	beq	r16,r17,e200 <__udivdi3+0x570>
    e108:	9005883a 	mov	r2,r18
    e10c:	0007883a 	mov	r3,zero
    e110:	003f9106 	br	df58 <__alt_data_end+0xfffedf58>
    e114:	88e2983a 	sll	r17,r17,r3
    e118:	80aed83a 	srl	r23,r16,r2
    e11c:	80e0983a 	sll	r16,r16,r3
    e120:	882ad43a 	srli	r21,r17,16
    e124:	9884d83a 	srl	r2,r19,r2
    e128:	b809883a 	mov	r4,r23
    e12c:	a80b883a 	mov	r5,r21
    e130:	98e4983a 	sll	r18,r19,r3
    e134:	142cb03a 	or	r22,r2,r16
    e138:	00036880 	call	3688 <__umodsi3>
    e13c:	b809883a 	mov	r4,r23
    e140:	a80b883a 	mov	r5,r21
    e144:	1027883a 	mov	r19,r2
    e148:	8d3fffcc 	andi	r20,r17,65535
    e14c:	00036240 	call	3624 <__udivsi3>
    e150:	a009883a 	mov	r4,r20
    e154:	100b883a 	mov	r5,r2
    e158:	102f883a 	mov	r23,r2
    e15c:	0000f040 	call	f04 <__mulsi3>
    e160:	9826943a 	slli	r19,r19,16
    e164:	b008d43a 	srli	r4,r22,16
    e168:	24c8b03a 	or	r4,r4,r19
    e16c:	2080062e 	bgeu	r4,r2,e188 <__udivdi3+0x4f8>
    e170:	2449883a 	add	r4,r4,r17
    e174:	b8ffffc4 	addi	r3,r23,-1
    e178:	24403c36 	bltu	r4,r17,e26c <__udivdi3+0x5dc>
    e17c:	20803b2e 	bgeu	r4,r2,e26c <__udivdi3+0x5dc>
    e180:	bdffff84 	addi	r23,r23,-2
    e184:	2449883a 	add	r4,r4,r17
    e188:	20a1c83a 	sub	r16,r4,r2
    e18c:	a80b883a 	mov	r5,r21
    e190:	8009883a 	mov	r4,r16
    e194:	00036880 	call	3688 <__umodsi3>
    e198:	a80b883a 	mov	r5,r21
    e19c:	8009883a 	mov	r4,r16
    e1a0:	1027883a 	mov	r19,r2
    e1a4:	00036240 	call	3624 <__udivsi3>
    e1a8:	a009883a 	mov	r4,r20
    e1ac:	100b883a 	mov	r5,r2
    e1b0:	9826943a 	slli	r19,r19,16
    e1b4:	1039883a 	mov	fp,r2
    e1b8:	0000f040 	call	f04 <__mulsi3>
    e1bc:	b13fffcc 	andi	r4,r22,65535
    e1c0:	24c8b03a 	or	r4,r4,r19
    e1c4:	2080062e 	bgeu	r4,r2,e1e0 <__udivdi3+0x550>
    e1c8:	2449883a 	add	r4,r4,r17
    e1cc:	e0ffffc4 	addi	r3,fp,-1
    e1d0:	24402436 	bltu	r4,r17,e264 <__udivdi3+0x5d4>
    e1d4:	2080232e 	bgeu	r4,r2,e264 <__udivdi3+0x5d4>
    e1d8:	e73fff84 	addi	fp,fp,-2
    e1dc:	2449883a 	add	r4,r4,r17
    e1e0:	b82e943a 	slli	r23,r23,16
    e1e4:	20a1c83a 	sub	r16,r4,r2
    e1e8:	bf06b03a 	or	r3,r23,fp
    e1ec:	003f2806 	br	de90 <__alt_data_end+0xfffede90>
    e1f0:	2021883a 	mov	r16,r4
    e1f4:	003f5306 	br	df44 <__alt_data_end+0xfffedf44>
    e1f8:	1821883a 	mov	r16,r3
    e1fc:	003ef406 	br	ddd0 <__alt_data_end+0xfffeddd0>
    e200:	1806943a 	slli	r3,r3,16
    e204:	9de6983a 	sll	r19,r19,r23
    e208:	e73fffcc 	andi	fp,fp,65535
    e20c:	1f07883a 	add	r3,r3,fp
    e210:	98ffbd2e 	bgeu	r19,r3,e108 <__alt_data_end+0xfffee108>
    e214:	90bfffc4 	addi	r2,r18,-1
    e218:	0007883a 	mov	r3,zero
    e21c:	003f4e06 	br	df58 <__alt_data_end+0xfffedf58>
    e220:	00800604 	movi	r2,24
    e224:	003ef506 	br	ddfc <__alt_data_end+0xfffeddfc>
    e228:	00800604 	movi	r2,24
    e22c:	003f0b06 	br	de5c <__alt_data_end+0xfffede5c>
    e230:	00800604 	movi	r2,24
    e234:	003ead06 	br	dcec <__alt_data_end+0xfffedcec>
    e238:	0007883a 	mov	r3,zero
    e23c:	00800044 	movi	r2,1
    e240:	003f4506 	br	df58 <__alt_data_end+0xfffedf58>
    e244:	80bf8e2e 	bgeu	r16,r2,e080 <__alt_data_end+0xfffee080>
    e248:	8c7fff84 	addi	r17,r17,-2
    e24c:	8721883a 	add	r16,r16,fp
    e250:	003f8c06 	br	e084 <__alt_data_end+0xfffee084>
    e254:	18bf762e 	bgeu	r3,r2,e030 <__alt_data_end+0xfffee030>
    e258:	ad7fff84 	addi	r21,r21,-2
    e25c:	1f07883a 	add	r3,r3,fp
    e260:	003f7406 	br	e034 <__alt_data_end+0xfffee034>
    e264:	1839883a 	mov	fp,r3
    e268:	003fdd06 	br	e1e0 <__alt_data_end+0xfffee1e0>
    e26c:	182f883a 	mov	r23,r3
    e270:	003fc506 	br	e188 <__alt_data_end+0xfffee188>
    e274:	b5bfff84 	addi	r22,r22,-2
    e278:	3c4f883a 	add	r7,r7,r17
    e27c:	003f1a06 	br	dee8 <__alt_data_end+0xfffedee8>
    e280:	b5bfff84 	addi	r22,r22,-2
    e284:	1c47883a 	add	r3,r3,r17
    e288:	003ebc06 	br	dd7c <__alt_data_end+0xfffedd7c>

0000e28c <__umoddi3>:
    e28c:	defff304 	addi	sp,sp,-52
    e290:	df000b15 	stw	fp,44(sp)
    e294:	dc400415 	stw	r17,16(sp)
    e298:	dc000315 	stw	r16,12(sp)
    e29c:	dfc00c15 	stw	ra,48(sp)
    e2a0:	ddc00a15 	stw	r23,40(sp)
    e2a4:	dd800915 	stw	r22,36(sp)
    e2a8:	dd400815 	stw	r21,32(sp)
    e2ac:	dd000715 	stw	r20,28(sp)
    e2b0:	dcc00615 	stw	r19,24(sp)
    e2b4:	dc800515 	stw	r18,20(sp)
    e2b8:	2021883a 	mov	r16,r4
    e2bc:	2823883a 	mov	r17,r5
    e2c0:	2839883a 	mov	fp,r5
    e2c4:	3800401e 	bne	r7,zero,e3c8 <__umoddi3+0x13c>
    e2c8:	3027883a 	mov	r19,r6
    e2cc:	2029883a 	mov	r20,r4
    e2d0:	2980552e 	bgeu	r5,r6,e428 <__umoddi3+0x19c>
    e2d4:	00bfffd4 	movui	r2,65535
    e2d8:	1180a236 	bltu	r2,r6,e564 <__umoddi3+0x2d8>
    e2dc:	01003fc4 	movi	r4,255
    e2e0:	2189803a 	cmpltu	r4,r4,r6
    e2e4:	200890fa 	slli	r4,r4,3
    e2e8:	3104d83a 	srl	r2,r6,r4
    e2ec:	00c00074 	movhi	r3,1
    e2f0:	18c478c4 	addi	r3,r3,4579
    e2f4:	1885883a 	add	r2,r3,r2
    e2f8:	10c00003 	ldbu	r3,0(r2)
    e2fc:	00800804 	movi	r2,32
    e300:	1909883a 	add	r4,r3,r4
    e304:	1125c83a 	sub	r18,r2,r4
    e308:	90000526 	beq	r18,zero,e320 <__umoddi3+0x94>
    e30c:	8ca2983a 	sll	r17,r17,r18
    e310:	8108d83a 	srl	r4,r16,r4
    e314:	34a6983a 	sll	r19,r6,r18
    e318:	84a8983a 	sll	r20,r16,r18
    e31c:	2478b03a 	or	fp,r4,r17
    e320:	982cd43a 	srli	r22,r19,16
    e324:	e009883a 	mov	r4,fp
    e328:	9dffffcc 	andi	r23,r19,65535
    e32c:	b00b883a 	mov	r5,r22
    e330:	00036880 	call	3688 <__umodsi3>
    e334:	b00b883a 	mov	r5,r22
    e338:	e009883a 	mov	r4,fp
    e33c:	102b883a 	mov	r21,r2
    e340:	00036240 	call	3624 <__udivsi3>
    e344:	100b883a 	mov	r5,r2
    e348:	b809883a 	mov	r4,r23
    e34c:	0000f040 	call	f04 <__mulsi3>
    e350:	a82a943a 	slli	r21,r21,16
    e354:	a006d43a 	srli	r3,r20,16
    e358:	1d46b03a 	or	r3,r3,r21
    e35c:	1880032e 	bgeu	r3,r2,e36c <__umoddi3+0xe0>
    e360:	1cc7883a 	add	r3,r3,r19
    e364:	1cc00136 	bltu	r3,r19,e36c <__umoddi3+0xe0>
    e368:	18813136 	bltu	r3,r2,e830 <__umoddi3+0x5a4>
    e36c:	18a1c83a 	sub	r16,r3,r2
    e370:	b00b883a 	mov	r5,r22
    e374:	8009883a 	mov	r4,r16
    e378:	00036880 	call	3688 <__umodsi3>
    e37c:	b00b883a 	mov	r5,r22
    e380:	8009883a 	mov	r4,r16
    e384:	1023883a 	mov	r17,r2
    e388:	00036240 	call	3624 <__udivsi3>
    e38c:	100b883a 	mov	r5,r2
    e390:	b809883a 	mov	r4,r23
    e394:	8822943a 	slli	r17,r17,16
    e398:	0000f040 	call	f04 <__mulsi3>
    e39c:	a0ffffcc 	andi	r3,r20,65535
    e3a0:	1c46b03a 	or	r3,r3,r17
    e3a4:	1880042e 	bgeu	r3,r2,e3b8 <__umoddi3+0x12c>
    e3a8:	1cc7883a 	add	r3,r3,r19
    e3ac:	1cc00236 	bltu	r3,r19,e3b8 <__umoddi3+0x12c>
    e3b0:	1880012e 	bgeu	r3,r2,e3b8 <__umoddi3+0x12c>
    e3b4:	1cc7883a 	add	r3,r3,r19
    e3b8:	1885c83a 	sub	r2,r3,r2
    e3bc:	1484d83a 	srl	r2,r2,r18
    e3c0:	0007883a 	mov	r3,zero
    e3c4:	00005306 	br	e514 <__umoddi3+0x288>
    e3c8:	29c05036 	bltu	r5,r7,e50c <__umoddi3+0x280>
    e3cc:	00bfffd4 	movui	r2,65535
    e3d0:	11c05c2e 	bgeu	r2,r7,e544 <__umoddi3+0x2b8>
    e3d4:	00804034 	movhi	r2,256
    e3d8:	10bfffc4 	addi	r2,r2,-1
    e3dc:	11c10636 	bltu	r2,r7,e7f8 <__umoddi3+0x56c>
    e3e0:	01000404 	movi	r4,16
    e3e4:	3904d83a 	srl	r2,r7,r4
    e3e8:	00c00074 	movhi	r3,1
    e3ec:	18c478c4 	addi	r3,r3,4579
    e3f0:	1885883a 	add	r2,r3,r2
    e3f4:	14c00003 	ldbu	r19,0(r2)
    e3f8:	00c00804 	movi	r3,32
    e3fc:	9927883a 	add	r19,r19,r4
    e400:	1ce9c83a 	sub	r20,r3,r19
    e404:	a0005c1e 	bne	r20,zero,e578 <__umoddi3+0x2ec>
    e408:	3c400136 	bltu	r7,r17,e410 <__umoddi3+0x184>
    e40c:	81810a36 	bltu	r16,r6,e838 <__umoddi3+0x5ac>
    e410:	8185c83a 	sub	r2,r16,r6
    e414:	89e3c83a 	sub	r17,r17,r7
    e418:	8089803a 	cmpltu	r4,r16,r2
    e41c:	8939c83a 	sub	fp,r17,r4
    e420:	e007883a 	mov	r3,fp
    e424:	00003b06 	br	e514 <__umoddi3+0x288>
    e428:	3000041e 	bne	r6,zero,e43c <__umoddi3+0x1b0>
    e42c:	000b883a 	mov	r5,zero
    e430:	01000044 	movi	r4,1
    e434:	00036240 	call	3624 <__udivsi3>
    e438:	1027883a 	mov	r19,r2
    e43c:	00bfffd4 	movui	r2,65535
    e440:	14c0442e 	bgeu	r2,r19,e554 <__umoddi3+0x2c8>
    e444:	00804034 	movhi	r2,256
    e448:	10bfffc4 	addi	r2,r2,-1
    e44c:	14c0ec36 	bltu	r2,r19,e800 <__umoddi3+0x574>
    e450:	00800404 	movi	r2,16
    e454:	9886d83a 	srl	r3,r19,r2
    e458:	01000074 	movhi	r4,1
    e45c:	210478c4 	addi	r4,r4,4579
    e460:	20c7883a 	add	r3,r4,r3
    e464:	18c00003 	ldbu	r3,0(r3)
    e468:	1887883a 	add	r3,r3,r2
    e46c:	00800804 	movi	r2,32
    e470:	10e5c83a 	sub	r18,r2,r3
    e474:	9000ab1e 	bne	r18,zero,e724 <__umoddi3+0x498>
    e478:	982cd43a 	srli	r22,r19,16
    e47c:	8ce3c83a 	sub	r17,r17,r19
    e480:	9dffffcc 	andi	r23,r19,65535
    e484:	b00b883a 	mov	r5,r22
    e488:	8809883a 	mov	r4,r17
    e48c:	00036880 	call	3688 <__umodsi3>
    e490:	b00b883a 	mov	r5,r22
    e494:	8809883a 	mov	r4,r17
    e498:	102b883a 	mov	r21,r2
    e49c:	00036240 	call	3624 <__udivsi3>
    e4a0:	b80b883a 	mov	r5,r23
    e4a4:	1009883a 	mov	r4,r2
    e4a8:	0000f040 	call	f04 <__mulsi3>
    e4ac:	a82a943a 	slli	r21,r21,16
    e4b0:	a006d43a 	srli	r3,r20,16
    e4b4:	1d46b03a 	or	r3,r3,r21
    e4b8:	1880042e 	bgeu	r3,r2,e4cc <__umoddi3+0x240>
    e4bc:	1cc7883a 	add	r3,r3,r19
    e4c0:	1cc00236 	bltu	r3,r19,e4cc <__umoddi3+0x240>
    e4c4:	1880012e 	bgeu	r3,r2,e4cc <__umoddi3+0x240>
    e4c8:	1cc7883a 	add	r3,r3,r19
    e4cc:	18a1c83a 	sub	r16,r3,r2
    e4d0:	b00b883a 	mov	r5,r22
    e4d4:	8009883a 	mov	r4,r16
    e4d8:	00036880 	call	3688 <__umodsi3>
    e4dc:	1023883a 	mov	r17,r2
    e4e0:	b00b883a 	mov	r5,r22
    e4e4:	8009883a 	mov	r4,r16
    e4e8:	00036240 	call	3624 <__udivsi3>
    e4ec:	8822943a 	slli	r17,r17,16
    e4f0:	b80b883a 	mov	r5,r23
    e4f4:	1009883a 	mov	r4,r2
    e4f8:	0000f040 	call	f04 <__mulsi3>
    e4fc:	a53fffcc 	andi	r20,r20,65535
    e500:	a446b03a 	or	r3,r20,r17
    e504:	18bfac2e 	bgeu	r3,r2,e3b8 <__alt_data_end+0xfffee3b8>
    e508:	003fa706 	br	e3a8 <__alt_data_end+0xfffee3a8>
    e50c:	2005883a 	mov	r2,r4
    e510:	2807883a 	mov	r3,r5
    e514:	dfc00c17 	ldw	ra,48(sp)
    e518:	df000b17 	ldw	fp,44(sp)
    e51c:	ddc00a17 	ldw	r23,40(sp)
    e520:	dd800917 	ldw	r22,36(sp)
    e524:	dd400817 	ldw	r21,32(sp)
    e528:	dd000717 	ldw	r20,28(sp)
    e52c:	dcc00617 	ldw	r19,24(sp)
    e530:	dc800517 	ldw	r18,20(sp)
    e534:	dc400417 	ldw	r17,16(sp)
    e538:	dc000317 	ldw	r16,12(sp)
    e53c:	dec00d04 	addi	sp,sp,52
    e540:	f800283a 	ret
    e544:	04c03fc4 	movi	r19,255
    e548:	99c9803a 	cmpltu	r4,r19,r7
    e54c:	200890fa 	slli	r4,r4,3
    e550:	003fa406 	br	e3e4 <__alt_data_end+0xfffee3e4>
    e554:	00803fc4 	movi	r2,255
    e558:	14c5803a 	cmpltu	r2,r2,r19
    e55c:	100490fa 	slli	r2,r2,3
    e560:	003fbc06 	br	e454 <__alt_data_end+0xfffee454>
    e564:	00804034 	movhi	r2,256
    e568:	10bfffc4 	addi	r2,r2,-1
    e56c:	1180a636 	bltu	r2,r6,e808 <__umoddi3+0x57c>
    e570:	01000404 	movi	r4,16
    e574:	003f5c06 	br	e2e8 <__alt_data_end+0xfffee2e8>
    e578:	3d0e983a 	sll	r7,r7,r20
    e57c:	34ead83a 	srl	r21,r6,r19
    e580:	8cc6d83a 	srl	r3,r17,r19
    e584:	8d10983a 	sll	r8,r17,r20
    e588:	3d6ab03a 	or	r21,r7,r21
    e58c:	a82cd43a 	srli	r22,r21,16
    e590:	84e2d83a 	srl	r17,r16,r19
    e594:	1809883a 	mov	r4,r3
    e598:	b00b883a 	mov	r5,r22
    e59c:	8a22b03a 	or	r17,r17,r8
    e5a0:	3524983a 	sll	r18,r6,r20
    e5a4:	dc400015 	stw	r17,0(sp)
    e5a8:	d8c00115 	stw	r3,4(sp)
    e5ac:	00036880 	call	3688 <__umodsi3>
    e5b0:	d8c00117 	ldw	r3,4(sp)
    e5b4:	b00b883a 	mov	r5,r22
    e5b8:	1039883a 	mov	fp,r2
    e5bc:	1809883a 	mov	r4,r3
    e5c0:	00036240 	call	3624 <__udivsi3>
    e5c4:	adffffcc 	andi	r23,r21,65535
    e5c8:	100b883a 	mov	r5,r2
    e5cc:	b809883a 	mov	r4,r23
    e5d0:	1023883a 	mov	r17,r2
    e5d4:	0000f040 	call	f04 <__mulsi3>
    e5d8:	d9400017 	ldw	r5,0(sp)
    e5dc:	e008943a 	slli	r4,fp,16
    e5e0:	8520983a 	sll	r16,r16,r20
    e5e4:	2806d43a 	srli	r3,r5,16
    e5e8:	1906b03a 	or	r3,r3,r4
    e5ec:	1880042e 	bgeu	r3,r2,e600 <__umoddi3+0x374>
    e5f0:	1d47883a 	add	r3,r3,r21
    e5f4:	893fffc4 	addi	r4,r17,-1
    e5f8:	1d40892e 	bgeu	r3,r21,e820 <__umoddi3+0x594>
    e5fc:	2023883a 	mov	r17,r4
    e600:	18b9c83a 	sub	fp,r3,r2
    e604:	b00b883a 	mov	r5,r22
    e608:	e009883a 	mov	r4,fp
    e60c:	00036880 	call	3688 <__umodsi3>
    e610:	b00b883a 	mov	r5,r22
    e614:	e009883a 	mov	r4,fp
    e618:	d8800215 	stw	r2,8(sp)
    e61c:	00036240 	call	3624 <__udivsi3>
    e620:	100b883a 	mov	r5,r2
    e624:	b809883a 	mov	r4,r23
    e628:	102d883a 	mov	r22,r2
    e62c:	0000f040 	call	f04 <__mulsi3>
    e630:	d9800217 	ldw	r6,8(sp)
    e634:	d8c00017 	ldw	r3,0(sp)
    e638:	300c943a 	slli	r6,r6,16
    e63c:	1a3fffcc 	andi	r8,r3,65535
    e640:	4190b03a 	or	r8,r8,r6
    e644:	4080042e 	bgeu	r8,r2,e658 <__umoddi3+0x3cc>
    e648:	4551883a 	add	r8,r8,r21
    e64c:	b0ffffc4 	addi	r3,r22,-1
    e650:	45406f2e 	bgeu	r8,r21,e810 <__umoddi3+0x584>
    e654:	182d883a 	mov	r22,r3
    e658:	880e943a 	slli	r7,r17,16
    e65c:	9006d43a 	srli	r3,r18,16
    e660:	91bfffcc 	andi	r6,r18,65535
    e664:	3dacb03a 	or	r22,r7,r22
    e668:	b02ed43a 	srli	r23,r22,16
    e66c:	b5bfffcc 	andi	r22,r22,65535
    e670:	300b883a 	mov	r5,r6
    e674:	b009883a 	mov	r4,r22
    e678:	40a3c83a 	sub	r17,r8,r2
    e67c:	d8c00115 	stw	r3,4(sp)
    e680:	d9800215 	stw	r6,8(sp)
    e684:	0000f040 	call	f04 <__mulsi3>
    e688:	d9800217 	ldw	r6,8(sp)
    e68c:	b809883a 	mov	r4,r23
    e690:	1039883a 	mov	fp,r2
    e694:	300b883a 	mov	r5,r6
    e698:	0000f040 	call	f04 <__mulsi3>
    e69c:	d8c00117 	ldw	r3,4(sp)
    e6a0:	b809883a 	mov	r4,r23
    e6a4:	d8800215 	stw	r2,8(sp)
    e6a8:	180b883a 	mov	r5,r3
    e6ac:	0000f040 	call	f04 <__mulsi3>
    e6b0:	d8c00117 	ldw	r3,4(sp)
    e6b4:	b009883a 	mov	r4,r22
    e6b8:	102f883a 	mov	r23,r2
    e6bc:	180b883a 	mov	r5,r3
    e6c0:	0000f040 	call	f04 <__mulsi3>
    e6c4:	d9800217 	ldw	r6,8(sp)
    e6c8:	e006d43a 	srli	r3,fp,16
    e6cc:	1185883a 	add	r2,r2,r6
    e6d0:	1885883a 	add	r2,r3,r2
    e6d4:	1180022e 	bgeu	r2,r6,e6e0 <__umoddi3+0x454>
    e6d8:	00c00074 	movhi	r3,1
    e6dc:	b8ef883a 	add	r23,r23,r3
    e6e0:	1006d43a 	srli	r3,r2,16
    e6e4:	1004943a 	slli	r2,r2,16
    e6e8:	e73fffcc 	andi	fp,fp,65535
    e6ec:	1dc7883a 	add	r3,r3,r23
    e6f0:	1739883a 	add	fp,r2,fp
    e6f4:	88c03a36 	bltu	r17,r3,e7e0 <__umoddi3+0x554>
    e6f8:	88c05126 	beq	r17,r3,e840 <__umoddi3+0x5b4>
    e6fc:	88c9c83a 	sub	r4,r17,r3
    e700:	e00f883a 	mov	r7,fp
    e704:	81cfc83a 	sub	r7,r16,r7
    e708:	81c7803a 	cmpltu	r3,r16,r7
    e70c:	20c7c83a 	sub	r3,r4,r3
    e710:	1cc4983a 	sll	r2,r3,r19
    e714:	3d0ed83a 	srl	r7,r7,r20
    e718:	1d06d83a 	srl	r3,r3,r20
    e71c:	11c4b03a 	or	r2,r2,r7
    e720:	003f7c06 	br	e514 <__alt_data_end+0xfffee514>
    e724:	9ca6983a 	sll	r19,r19,r18
    e728:	88f8d83a 	srl	fp,r17,r3
    e72c:	80c4d83a 	srl	r2,r16,r3
    e730:	982cd43a 	srli	r22,r19,16
    e734:	8ca2983a 	sll	r17,r17,r18
    e738:	e009883a 	mov	r4,fp
    e73c:	b00b883a 	mov	r5,r22
    e740:	146ab03a 	or	r21,r2,r17
    e744:	00036880 	call	3688 <__umodsi3>
    e748:	b00b883a 	mov	r5,r22
    e74c:	e009883a 	mov	r4,fp
    e750:	1029883a 	mov	r20,r2
    e754:	9dffffcc 	andi	r23,r19,65535
    e758:	00036240 	call	3624 <__udivsi3>
    e75c:	b809883a 	mov	r4,r23
    e760:	100b883a 	mov	r5,r2
    e764:	0000f040 	call	f04 <__mulsi3>
    e768:	a008943a 	slli	r4,r20,16
    e76c:	a806d43a 	srli	r3,r21,16
    e770:	84a8983a 	sll	r20,r16,r18
    e774:	1906b03a 	or	r3,r3,r4
    e778:	1880042e 	bgeu	r3,r2,e78c <__umoddi3+0x500>
    e77c:	1cc7883a 	add	r3,r3,r19
    e780:	1cc00236 	bltu	r3,r19,e78c <__umoddi3+0x500>
    e784:	1880012e 	bgeu	r3,r2,e78c <__umoddi3+0x500>
    e788:	1cc7883a 	add	r3,r3,r19
    e78c:	18a3c83a 	sub	r17,r3,r2
    e790:	b00b883a 	mov	r5,r22
    e794:	8809883a 	mov	r4,r17
    e798:	00036880 	call	3688 <__umodsi3>
    e79c:	b00b883a 	mov	r5,r22
    e7a0:	8809883a 	mov	r4,r17
    e7a4:	1021883a 	mov	r16,r2
    e7a8:	00036240 	call	3624 <__udivsi3>
    e7ac:	100b883a 	mov	r5,r2
    e7b0:	b809883a 	mov	r4,r23
    e7b4:	8020943a 	slli	r16,r16,16
    e7b8:	0000f040 	call	f04 <__mulsi3>
    e7bc:	a8ffffcc 	andi	r3,r21,65535
    e7c0:	1c06b03a 	or	r3,r3,r16
    e7c4:	1880042e 	bgeu	r3,r2,e7d8 <__umoddi3+0x54c>
    e7c8:	1cc7883a 	add	r3,r3,r19
    e7cc:	1cc00236 	bltu	r3,r19,e7d8 <__umoddi3+0x54c>
    e7d0:	1880012e 	bgeu	r3,r2,e7d8 <__umoddi3+0x54c>
    e7d4:	1cc7883a 	add	r3,r3,r19
    e7d8:	18a3c83a 	sub	r17,r3,r2
    e7dc:	003f2906 	br	e484 <__alt_data_end+0xfffee484>
    e7e0:	e48fc83a 	sub	r7,fp,r18
    e7e4:	1d49c83a 	sub	r4,r3,r21
    e7e8:	e1f9803a 	cmpltu	fp,fp,r7
    e7ec:	2739c83a 	sub	fp,r4,fp
    e7f0:	8f09c83a 	sub	r4,r17,fp
    e7f4:	003fc306 	br	e704 <__alt_data_end+0xfffee704>
    e7f8:	01000604 	movi	r4,24
    e7fc:	003ef906 	br	e3e4 <__alt_data_end+0xfffee3e4>
    e800:	00800604 	movi	r2,24
    e804:	003f1306 	br	e454 <__alt_data_end+0xfffee454>
    e808:	01000604 	movi	r4,24
    e80c:	003eb606 	br	e2e8 <__alt_data_end+0xfffee2e8>
    e810:	40bf902e 	bgeu	r8,r2,e654 <__alt_data_end+0xfffee654>
    e814:	b5bfff84 	addi	r22,r22,-2
    e818:	4551883a 	add	r8,r8,r21
    e81c:	003f8e06 	br	e658 <__alt_data_end+0xfffee658>
    e820:	18bf762e 	bgeu	r3,r2,e5fc <__alt_data_end+0xfffee5fc>
    e824:	8c7fff84 	addi	r17,r17,-2
    e828:	1d47883a 	add	r3,r3,r21
    e82c:	003f7406 	br	e600 <__alt_data_end+0xfffee600>
    e830:	1cc7883a 	add	r3,r3,r19
    e834:	003ecd06 	br	e36c <__alt_data_end+0xfffee36c>
    e838:	8005883a 	mov	r2,r16
    e83c:	003ef806 	br	e420 <__alt_data_end+0xfffee420>
    e840:	873fe736 	bltu	r16,fp,e7e0 <__alt_data_end+0xfffee7e0>
    e844:	e00f883a 	mov	r7,fp
    e848:	0009883a 	mov	r4,zero
    e84c:	003fad06 	br	e704 <__alt_data_end+0xfffee704>

0000e850 <__eqdf2>:
    e850:	2804d53a 	srli	r2,r5,20
    e854:	3806d53a 	srli	r3,r7,20
    e858:	02000434 	movhi	r8,16
    e85c:	423fffc4 	addi	r8,r8,-1
    e860:	1081ffcc 	andi	r2,r2,2047
    e864:	0281ffc4 	movi	r10,2047
    e868:	2a12703a 	and	r9,r5,r8
    e86c:	18c1ffcc 	andi	r3,r3,2047
    e870:	3a10703a 	and	r8,r7,r8
    e874:	280ad7fa 	srli	r5,r5,31
    e878:	380ed7fa 	srli	r7,r7,31
    e87c:	12801026 	beq	r2,r10,e8c0 <__eqdf2+0x70>
    e880:	0281ffc4 	movi	r10,2047
    e884:	1a800a26 	beq	r3,r10,e8b0 <__eqdf2+0x60>
    e888:	10c00226 	beq	r2,r3,e894 <__eqdf2+0x44>
    e88c:	00800044 	movi	r2,1
    e890:	f800283a 	ret
    e894:	4a3ffd1e 	bne	r9,r8,e88c <__alt_data_end+0xfffee88c>
    e898:	21bffc1e 	bne	r4,r6,e88c <__alt_data_end+0xfffee88c>
    e89c:	29c00c26 	beq	r5,r7,e8d0 <__eqdf2+0x80>
    e8a0:	103ffa1e 	bne	r2,zero,e88c <__alt_data_end+0xfffee88c>
    e8a4:	2244b03a 	or	r2,r4,r9
    e8a8:	1004c03a 	cmpne	r2,r2,zero
    e8ac:	f800283a 	ret
    e8b0:	3214b03a 	or	r10,r6,r8
    e8b4:	503ff426 	beq	r10,zero,e888 <__alt_data_end+0xfffee888>
    e8b8:	00800044 	movi	r2,1
    e8bc:	f800283a 	ret
    e8c0:	2254b03a 	or	r10,r4,r9
    e8c4:	503fee26 	beq	r10,zero,e880 <__alt_data_end+0xfffee880>
    e8c8:	00800044 	movi	r2,1
    e8cc:	f800283a 	ret
    e8d0:	0005883a 	mov	r2,zero
    e8d4:	f800283a 	ret

0000e8d8 <__ledf2>:
    e8d8:	2804d53a 	srli	r2,r5,20
    e8dc:	3810d53a 	srli	r8,r7,20
    e8e0:	00c00434 	movhi	r3,16
    e8e4:	18ffffc4 	addi	r3,r3,-1
    e8e8:	1081ffcc 	andi	r2,r2,2047
    e8ec:	0241ffc4 	movi	r9,2047
    e8f0:	28d4703a 	and	r10,r5,r3
    e8f4:	4201ffcc 	andi	r8,r8,2047
    e8f8:	38c6703a 	and	r3,r7,r3
    e8fc:	280ad7fa 	srli	r5,r5,31
    e900:	380ed7fa 	srli	r7,r7,31
    e904:	12401f26 	beq	r2,r9,e984 <__ledf2+0xac>
    e908:	0241ffc4 	movi	r9,2047
    e90c:	42401426 	beq	r8,r9,e960 <__ledf2+0x88>
    e910:	1000091e 	bne	r2,zero,e938 <__ledf2+0x60>
    e914:	2296b03a 	or	r11,r4,r10
    e918:	5813003a 	cmpeq	r9,r11,zero
    e91c:	29403fcc 	andi	r5,r5,255
    e920:	40000a1e 	bne	r8,zero,e94c <__ledf2+0x74>
    e924:	30d8b03a 	or	r12,r6,r3
    e928:	6000081e 	bne	r12,zero,e94c <__ledf2+0x74>
    e92c:	0005883a 	mov	r2,zero
    e930:	5800111e 	bne	r11,zero,e978 <__ledf2+0xa0>
    e934:	f800283a 	ret
    e938:	29403fcc 	andi	r5,r5,255
    e93c:	40000c1e 	bne	r8,zero,e970 <__ledf2+0x98>
    e940:	30d2b03a 	or	r9,r6,r3
    e944:	48000c26 	beq	r9,zero,e978 <__ledf2+0xa0>
    e948:	0013883a 	mov	r9,zero
    e94c:	39c03fcc 	andi	r7,r7,255
    e950:	48000826 	beq	r9,zero,e974 <__ledf2+0x9c>
    e954:	38001126 	beq	r7,zero,e99c <__ledf2+0xc4>
    e958:	00800044 	movi	r2,1
    e95c:	f800283a 	ret
    e960:	30d2b03a 	or	r9,r6,r3
    e964:	483fea26 	beq	r9,zero,e910 <__alt_data_end+0xfffee910>
    e968:	00800084 	movi	r2,2
    e96c:	f800283a 	ret
    e970:	39c03fcc 	andi	r7,r7,255
    e974:	39400726 	beq	r7,r5,e994 <__ledf2+0xbc>
    e978:	2800081e 	bne	r5,zero,e99c <__ledf2+0xc4>
    e97c:	00800044 	movi	r2,1
    e980:	f800283a 	ret
    e984:	2292b03a 	or	r9,r4,r10
    e988:	483fdf26 	beq	r9,zero,e908 <__alt_data_end+0xfffee908>
    e98c:	00800084 	movi	r2,2
    e990:	f800283a 	ret
    e994:	4080030e 	bge	r8,r2,e9a4 <__ledf2+0xcc>
    e998:	383fef26 	beq	r7,zero,e958 <__alt_data_end+0xfffee958>
    e99c:	00bfffc4 	movi	r2,-1
    e9a0:	f800283a 	ret
    e9a4:	123feb16 	blt	r2,r8,e954 <__alt_data_end+0xfffee954>
    e9a8:	1abff336 	bltu	r3,r10,e978 <__alt_data_end+0xfffee978>
    e9ac:	50c00326 	beq	r10,r3,e9bc <__ledf2+0xe4>
    e9b0:	50c0042e 	bgeu	r10,r3,e9c4 <__ledf2+0xec>
    e9b4:	283fe81e 	bne	r5,zero,e958 <__alt_data_end+0xfffee958>
    e9b8:	003ff806 	br	e99c <__alt_data_end+0xfffee99c>
    e9bc:	313fee36 	bltu	r6,r4,e978 <__alt_data_end+0xfffee978>
    e9c0:	21bffc36 	bltu	r4,r6,e9b4 <__alt_data_end+0xfffee9b4>
    e9c4:	0005883a 	mov	r2,zero
    e9c8:	f800283a 	ret

0000e9cc <__fixdfsi>:
    e9cc:	280cd53a 	srli	r6,r5,20
    e9d0:	00c00434 	movhi	r3,16
    e9d4:	18ffffc4 	addi	r3,r3,-1
    e9d8:	3181ffcc 	andi	r6,r6,2047
    e9dc:	01c0ff84 	movi	r7,1022
    e9e0:	28c6703a 	and	r3,r5,r3
    e9e4:	280ad7fa 	srli	r5,r5,31
    e9e8:	3980120e 	bge	r7,r6,ea34 <__fixdfsi+0x68>
    e9ec:	00810744 	movi	r2,1053
    e9f0:	11800c16 	blt	r2,r6,ea24 <__fixdfsi+0x58>
    e9f4:	00810cc4 	movi	r2,1075
    e9f8:	1185c83a 	sub	r2,r2,r6
    e9fc:	01c007c4 	movi	r7,31
    ea00:	18c00434 	orhi	r3,r3,16
    ea04:	38800d16 	blt	r7,r2,ea3c <__fixdfsi+0x70>
    ea08:	31befb44 	addi	r6,r6,-1043
    ea0c:	2084d83a 	srl	r2,r4,r2
    ea10:	1986983a 	sll	r3,r3,r6
    ea14:	1884b03a 	or	r2,r3,r2
    ea18:	28000726 	beq	r5,zero,ea38 <__fixdfsi+0x6c>
    ea1c:	0085c83a 	sub	r2,zero,r2
    ea20:	f800283a 	ret
    ea24:	00a00034 	movhi	r2,32768
    ea28:	10bfffc4 	addi	r2,r2,-1
    ea2c:	2885883a 	add	r2,r5,r2
    ea30:	f800283a 	ret
    ea34:	0005883a 	mov	r2,zero
    ea38:	f800283a 	ret
    ea3c:	008104c4 	movi	r2,1043
    ea40:	1185c83a 	sub	r2,r2,r6
    ea44:	1884d83a 	srl	r2,r3,r2
    ea48:	003ff306 	br	ea18 <__alt_data_end+0xfffeea18>

0000ea4c <__floatunsidf>:
    ea4c:	defffe04 	addi	sp,sp,-8
    ea50:	dc000015 	stw	r16,0(sp)
    ea54:	dfc00115 	stw	ra,4(sp)
    ea58:	2021883a 	mov	r16,r4
    ea5c:	20002226 	beq	r4,zero,eae8 <__floatunsidf+0x9c>
    ea60:	00034c80 	call	34c8 <__clzsi2>
    ea64:	01010784 	movi	r4,1054
    ea68:	2089c83a 	sub	r4,r4,r2
    ea6c:	01810cc4 	movi	r6,1075
    ea70:	310dc83a 	sub	r6,r6,r4
    ea74:	00c007c4 	movi	r3,31
    ea78:	1980120e 	bge	r3,r6,eac4 <__floatunsidf+0x78>
    ea7c:	00c104c4 	movi	r3,1043
    ea80:	1907c83a 	sub	r3,r3,r4
    ea84:	80ca983a 	sll	r5,r16,r3
    ea88:	00800434 	movhi	r2,16
    ea8c:	10bfffc4 	addi	r2,r2,-1
    ea90:	2101ffcc 	andi	r4,r4,2047
    ea94:	0021883a 	mov	r16,zero
    ea98:	288a703a 	and	r5,r5,r2
    ea9c:	2008953a 	slli	r4,r4,20
    eaa0:	00c00434 	movhi	r3,16
    eaa4:	18ffffc4 	addi	r3,r3,-1
    eaa8:	28c6703a 	and	r3,r5,r3
    eaac:	8005883a 	mov	r2,r16
    eab0:	1906b03a 	or	r3,r3,r4
    eab4:	dfc00117 	ldw	ra,4(sp)
    eab8:	dc000017 	ldw	r16,0(sp)
    eabc:	dec00204 	addi	sp,sp,8
    eac0:	f800283a 	ret
    eac4:	00c002c4 	movi	r3,11
    eac8:	188bc83a 	sub	r5,r3,r2
    eacc:	814ad83a 	srl	r5,r16,r5
    ead0:	00c00434 	movhi	r3,16
    ead4:	18ffffc4 	addi	r3,r3,-1
    ead8:	81a0983a 	sll	r16,r16,r6
    eadc:	2101ffcc 	andi	r4,r4,2047
    eae0:	28ca703a 	and	r5,r5,r3
    eae4:	003fed06 	br	ea9c <__alt_data_end+0xfffeea9c>
    eae8:	0009883a 	mov	r4,zero
    eaec:	000b883a 	mov	r5,zero
    eaf0:	003fea06 	br	ea9c <__alt_data_end+0xfffeea9c>

0000eaf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eaf4:	defffe04 	addi	sp,sp,-8
    eaf8:	dfc00115 	stw	ra,4(sp)
    eafc:	df000015 	stw	fp,0(sp)
    eb00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eb04:	d0a00b17 	ldw	r2,-32724(gp)
    eb08:	10000326 	beq	r2,zero,eb18 <alt_get_errno+0x24>
    eb0c:	d0a00b17 	ldw	r2,-32724(gp)
    eb10:	103ee83a 	callr	r2
    eb14:	00000106 	br	eb1c <alt_get_errno+0x28>
    eb18:	d0a6cb04 	addi	r2,gp,-25812
}
    eb1c:	e037883a 	mov	sp,fp
    eb20:	dfc00117 	ldw	ra,4(sp)
    eb24:	df000017 	ldw	fp,0(sp)
    eb28:	dec00204 	addi	sp,sp,8
    eb2c:	f800283a 	ret

0000eb30 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    eb30:	defffb04 	addi	sp,sp,-20
    eb34:	dfc00415 	stw	ra,16(sp)
    eb38:	df000315 	stw	fp,12(sp)
    eb3c:	df000304 	addi	fp,sp,12
    eb40:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    eb44:	e0bfff17 	ldw	r2,-4(fp)
    eb48:	10000816 	blt	r2,zero,eb6c <close+0x3c>
    eb4c:	01400304 	movi	r5,12
    eb50:	e13fff17 	ldw	r4,-4(fp)
    eb54:	0000f040 	call	f04 <__mulsi3>
    eb58:	1007883a 	mov	r3,r2
    eb5c:	00800074 	movhi	r2,1
    eb60:	10876c04 	addi	r2,r2,7600
    eb64:	1885883a 	add	r2,r3,r2
    eb68:	00000106 	br	eb70 <close+0x40>
    eb6c:	0005883a 	mov	r2,zero
    eb70:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    eb74:	e0bffd17 	ldw	r2,-12(fp)
    eb78:	10001926 	beq	r2,zero,ebe0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    eb7c:	e0bffd17 	ldw	r2,-12(fp)
    eb80:	10800017 	ldw	r2,0(r2)
    eb84:	10800417 	ldw	r2,16(r2)
    eb88:	10000626 	beq	r2,zero,eba4 <close+0x74>
    eb8c:	e0bffd17 	ldw	r2,-12(fp)
    eb90:	10800017 	ldw	r2,0(r2)
    eb94:	10800417 	ldw	r2,16(r2)
    eb98:	e13ffd17 	ldw	r4,-12(fp)
    eb9c:	103ee83a 	callr	r2
    eba0:	00000106 	br	eba8 <close+0x78>
    eba4:	0005883a 	mov	r2,zero
    eba8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ebac:	e13fff17 	ldw	r4,-4(fp)
    ebb0:	000f4d00 	call	f4d0 <alt_release_fd>
    if (rval < 0)
    ebb4:	e0bffe17 	ldw	r2,-8(fp)
    ebb8:	1000070e 	bge	r2,zero,ebd8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    ebbc:	000eaf40 	call	eaf4 <alt_get_errno>
    ebc0:	1007883a 	mov	r3,r2
    ebc4:	e0bffe17 	ldw	r2,-8(fp)
    ebc8:	0085c83a 	sub	r2,zero,r2
    ebcc:	18800015 	stw	r2,0(r3)
      return -1;
    ebd0:	00bfffc4 	movi	r2,-1
    ebd4:	00000706 	br	ebf4 <close+0xc4>
    }
    return 0;
    ebd8:	0005883a 	mov	r2,zero
    ebdc:	00000506 	br	ebf4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ebe0:	000eaf40 	call	eaf4 <alt_get_errno>
    ebe4:	1007883a 	mov	r3,r2
    ebe8:	00801444 	movi	r2,81
    ebec:	18800015 	stw	r2,0(r3)
    return -1;
    ebf0:	00bfffc4 	movi	r2,-1
  }
}
    ebf4:	e037883a 	mov	sp,fp
    ebf8:	dfc00117 	ldw	ra,4(sp)
    ebfc:	df000017 	ldw	fp,0(sp)
    ec00:	dec00204 	addi	sp,sp,8
    ec04:	f800283a 	ret

0000ec08 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ec08:	defffc04 	addi	sp,sp,-16
    ec0c:	df000315 	stw	fp,12(sp)
    ec10:	df000304 	addi	fp,sp,12
    ec14:	e13ffd15 	stw	r4,-12(fp)
    ec18:	e17ffe15 	stw	r5,-8(fp)
    ec1c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ec20:	e0bfff17 	ldw	r2,-4(fp)
}
    ec24:	e037883a 	mov	sp,fp
    ec28:	df000017 	ldw	fp,0(sp)
    ec2c:	dec00104 	addi	sp,sp,4
    ec30:	f800283a 	ret

0000ec34 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ec34:	defffd04 	addi	sp,sp,-12
    ec38:	df000215 	stw	fp,8(sp)
    ec3c:	df000204 	addi	fp,sp,8
    ec40:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    ec44:	0001883a 	nop
    ec48:	e0bfff17 	ldw	r2,-4(fp)
    ec4c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    ec50:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ec54:	10000226 	beq	r2,zero,ec60 <_exit+0x2c>
    ALT_SIM_FAIL();
    ec58:	002af070 	cmpltui	zero,zero,43969
    ec5c:	00000106 	br	ec64 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    ec60:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    ec64:	003fff06 	br	ec64 <__alt_data_end+0xfffeec64>

0000ec68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ec68:	defffe04 	addi	sp,sp,-8
    ec6c:	dfc00115 	stw	ra,4(sp)
    ec70:	df000015 	stw	fp,0(sp)
    ec74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ec78:	d0a00b17 	ldw	r2,-32724(gp)
    ec7c:	10000326 	beq	r2,zero,ec8c <alt_get_errno+0x24>
    ec80:	d0a00b17 	ldw	r2,-32724(gp)
    ec84:	103ee83a 	callr	r2
    ec88:	00000106 	br	ec90 <alt_get_errno+0x28>
    ec8c:	d0a6cb04 	addi	r2,gp,-25812
}
    ec90:	e037883a 	mov	sp,fp
    ec94:	dfc00117 	ldw	ra,4(sp)
    ec98:	df000017 	ldw	fp,0(sp)
    ec9c:	dec00204 	addi	sp,sp,8
    eca0:	f800283a 	ret

0000eca4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    eca4:	defffb04 	addi	sp,sp,-20
    eca8:	dfc00415 	stw	ra,16(sp)
    ecac:	df000315 	stw	fp,12(sp)
    ecb0:	df000304 	addi	fp,sp,12
    ecb4:	e13ffe15 	stw	r4,-8(fp)
    ecb8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ecbc:	e0bffe17 	ldw	r2,-8(fp)
    ecc0:	10000816 	blt	r2,zero,ece4 <fstat+0x40>
    ecc4:	01400304 	movi	r5,12
    ecc8:	e13ffe17 	ldw	r4,-8(fp)
    eccc:	0000f040 	call	f04 <__mulsi3>
    ecd0:	1007883a 	mov	r3,r2
    ecd4:	00800074 	movhi	r2,1
    ecd8:	10876c04 	addi	r2,r2,7600
    ecdc:	1885883a 	add	r2,r3,r2
    ece0:	00000106 	br	ece8 <fstat+0x44>
    ece4:	0005883a 	mov	r2,zero
    ece8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    ecec:	e0bffd17 	ldw	r2,-12(fp)
    ecf0:	10001026 	beq	r2,zero,ed34 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    ecf4:	e0bffd17 	ldw	r2,-12(fp)
    ecf8:	10800017 	ldw	r2,0(r2)
    ecfc:	10800817 	ldw	r2,32(r2)
    ed00:	10000726 	beq	r2,zero,ed20 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    ed04:	e0bffd17 	ldw	r2,-12(fp)
    ed08:	10800017 	ldw	r2,0(r2)
    ed0c:	10800817 	ldw	r2,32(r2)
    ed10:	e17fff17 	ldw	r5,-4(fp)
    ed14:	e13ffd17 	ldw	r4,-12(fp)
    ed18:	103ee83a 	callr	r2
    ed1c:	00000a06 	br	ed48 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ed20:	e0bfff17 	ldw	r2,-4(fp)
    ed24:	00c80004 	movi	r3,8192
    ed28:	10c00115 	stw	r3,4(r2)
      return 0;
    ed2c:	0005883a 	mov	r2,zero
    ed30:	00000506 	br	ed48 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ed34:	000ec680 	call	ec68 <alt_get_errno>
    ed38:	1007883a 	mov	r3,r2
    ed3c:	00801444 	movi	r2,81
    ed40:	18800015 	stw	r2,0(r3)
    return -1;
    ed44:	00bfffc4 	movi	r2,-1
  }
}
    ed48:	e037883a 	mov	sp,fp
    ed4c:	dfc00117 	ldw	ra,4(sp)
    ed50:	df000017 	ldw	fp,0(sp)
    ed54:	dec00204 	addi	sp,sp,8
    ed58:	f800283a 	ret

0000ed5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ed5c:	defffe04 	addi	sp,sp,-8
    ed60:	dfc00115 	stw	ra,4(sp)
    ed64:	df000015 	stw	fp,0(sp)
    ed68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ed6c:	d0a00b17 	ldw	r2,-32724(gp)
    ed70:	10000326 	beq	r2,zero,ed80 <alt_get_errno+0x24>
    ed74:	d0a00b17 	ldw	r2,-32724(gp)
    ed78:	103ee83a 	callr	r2
    ed7c:	00000106 	br	ed84 <alt_get_errno+0x28>
    ed80:	d0a6cb04 	addi	r2,gp,-25812
}
    ed84:	e037883a 	mov	sp,fp
    ed88:	dfc00117 	ldw	ra,4(sp)
    ed8c:	df000017 	ldw	fp,0(sp)
    ed90:	dec00204 	addi	sp,sp,8
    ed94:	f800283a 	ret

0000ed98 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ed98:	deffed04 	addi	sp,sp,-76
    ed9c:	dfc01215 	stw	ra,72(sp)
    eda0:	df001115 	stw	fp,68(sp)
    eda4:	df001104 	addi	fp,sp,68
    eda8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    edac:	e0bfff17 	ldw	r2,-4(fp)
    edb0:	10000816 	blt	r2,zero,edd4 <isatty+0x3c>
    edb4:	01400304 	movi	r5,12
    edb8:	e13fff17 	ldw	r4,-4(fp)
    edbc:	0000f040 	call	f04 <__mulsi3>
    edc0:	1007883a 	mov	r3,r2
    edc4:	00800074 	movhi	r2,1
    edc8:	10876c04 	addi	r2,r2,7600
    edcc:	1885883a 	add	r2,r3,r2
    edd0:	00000106 	br	edd8 <isatty+0x40>
    edd4:	0005883a 	mov	r2,zero
    edd8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    eddc:	e0bfef17 	ldw	r2,-68(fp)
    ede0:	10000e26 	beq	r2,zero,ee1c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ede4:	e0bfef17 	ldw	r2,-68(fp)
    ede8:	10800017 	ldw	r2,0(r2)
    edec:	10800817 	ldw	r2,32(r2)
    edf0:	1000021e 	bne	r2,zero,edfc <isatty+0x64>
    {
      return 1;
    edf4:	00800044 	movi	r2,1
    edf8:	00000d06 	br	ee30 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    edfc:	e0bff004 	addi	r2,fp,-64
    ee00:	100b883a 	mov	r5,r2
    ee04:	e13fff17 	ldw	r4,-4(fp)
    ee08:	000eca40 	call	eca4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ee0c:	e0bff117 	ldw	r2,-60(fp)
    ee10:	10880020 	cmpeqi	r2,r2,8192
    ee14:	10803fcc 	andi	r2,r2,255
    ee18:	00000506 	br	ee30 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ee1c:	000ed5c0 	call	ed5c <alt_get_errno>
    ee20:	1007883a 	mov	r3,r2
    ee24:	00801444 	movi	r2,81
    ee28:	18800015 	stw	r2,0(r3)
    return 0;
    ee2c:	0005883a 	mov	r2,zero
  }
}
    ee30:	e037883a 	mov	sp,fp
    ee34:	dfc00117 	ldw	ra,4(sp)
    ee38:	df000017 	ldw	fp,0(sp)
    ee3c:	dec00204 	addi	sp,sp,8
    ee40:	f800283a 	ret

0000ee44 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ee44:	defffc04 	addi	sp,sp,-16
    ee48:	df000315 	stw	fp,12(sp)
    ee4c:	df000304 	addi	fp,sp,12
    ee50:	e13ffd15 	stw	r4,-12(fp)
    ee54:	e17ffe15 	stw	r5,-8(fp)
    ee58:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ee5c:	e0fffe17 	ldw	r3,-8(fp)
    ee60:	e0bffd17 	ldw	r2,-12(fp)
    ee64:	18800c26 	beq	r3,r2,ee98 <alt_load_section+0x54>
  {
    while( to != end )
    ee68:	00000806 	br	ee8c <alt_load_section+0x48>
    {
      *to++ = *from++;
    ee6c:	e0bffe17 	ldw	r2,-8(fp)
    ee70:	10c00104 	addi	r3,r2,4
    ee74:	e0fffe15 	stw	r3,-8(fp)
    ee78:	e0fffd17 	ldw	r3,-12(fp)
    ee7c:	19000104 	addi	r4,r3,4
    ee80:	e13ffd15 	stw	r4,-12(fp)
    ee84:	18c00017 	ldw	r3,0(r3)
    ee88:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ee8c:	e0fffe17 	ldw	r3,-8(fp)
    ee90:	e0bfff17 	ldw	r2,-4(fp)
    ee94:	18bff51e 	bne	r3,r2,ee6c <__alt_data_end+0xfffeee6c>
    {
      *to++ = *from++;
    }
  }
}
    ee98:	0001883a 	nop
    ee9c:	e037883a 	mov	sp,fp
    eea0:	df000017 	ldw	fp,0(sp)
    eea4:	dec00104 	addi	sp,sp,4
    eea8:	f800283a 	ret

0000eeac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    eeac:	defffe04 	addi	sp,sp,-8
    eeb0:	dfc00115 	stw	ra,4(sp)
    eeb4:	df000015 	stw	fp,0(sp)
    eeb8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    eebc:	01800074 	movhi	r6,1
    eec0:	318bf404 	addi	r6,r6,12240
    eec4:	01400074 	movhi	r5,1
    eec8:	29453904 	addi	r5,r5,5348
    eecc:	01000074 	movhi	r4,1
    eed0:	210bf404 	addi	r4,r4,12240
    eed4:	000ee440 	call	ee44 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    eed8:	01800034 	movhi	r6,0
    eedc:	31808c04 	addi	r6,r6,560
    eee0:	01400034 	movhi	r5,0
    eee4:	29400804 	addi	r5,r5,32
    eee8:	01000034 	movhi	r4,0
    eeec:	21000804 	addi	r4,r4,32
    eef0:	000ee440 	call	ee44 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    eef4:	01800074 	movhi	r6,1
    eef8:	31853904 	addi	r6,r6,5348
    eefc:	01400074 	movhi	r5,1
    ef00:	29443804 	addi	r5,r5,4320
    ef04:	01000074 	movhi	r4,1
    ef08:	21043804 	addi	r4,r4,4320
    ef0c:	000ee440 	call	ee44 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ef10:	00104980 	call	10498 <alt_dcache_flush_all>
  alt_icache_flush_all();
    ef14:	00108b40 	call	108b4 <alt_icache_flush_all>
}
    ef18:	0001883a 	nop
    ef1c:	e037883a 	mov	sp,fp
    ef20:	dfc00117 	ldw	ra,4(sp)
    ef24:	df000017 	ldw	fp,0(sp)
    ef28:	dec00204 	addi	sp,sp,8
    ef2c:	f800283a 	ret

0000ef30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ef30:	defffe04 	addi	sp,sp,-8
    ef34:	dfc00115 	stw	ra,4(sp)
    ef38:	df000015 	stw	fp,0(sp)
    ef3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ef40:	d0a00b17 	ldw	r2,-32724(gp)
    ef44:	10000326 	beq	r2,zero,ef54 <alt_get_errno+0x24>
    ef48:	d0a00b17 	ldw	r2,-32724(gp)
    ef4c:	103ee83a 	callr	r2
    ef50:	00000106 	br	ef58 <alt_get_errno+0x28>
    ef54:	d0a6cb04 	addi	r2,gp,-25812
}
    ef58:	e037883a 	mov	sp,fp
    ef5c:	dfc00117 	ldw	ra,4(sp)
    ef60:	df000017 	ldw	fp,0(sp)
    ef64:	dec00204 	addi	sp,sp,8
    ef68:	f800283a 	ret

0000ef6c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    ef6c:	defff904 	addi	sp,sp,-28
    ef70:	dfc00615 	stw	ra,24(sp)
    ef74:	df000515 	stw	fp,20(sp)
    ef78:	df000504 	addi	fp,sp,20
    ef7c:	e13ffd15 	stw	r4,-12(fp)
    ef80:	e17ffe15 	stw	r5,-8(fp)
    ef84:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    ef88:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ef8c:	e0bffd17 	ldw	r2,-12(fp)
    ef90:	10000816 	blt	r2,zero,efb4 <lseek+0x48>
    ef94:	01400304 	movi	r5,12
    ef98:	e13ffd17 	ldw	r4,-12(fp)
    ef9c:	0000f040 	call	f04 <__mulsi3>
    efa0:	1007883a 	mov	r3,r2
    efa4:	00800074 	movhi	r2,1
    efa8:	10876c04 	addi	r2,r2,7600
    efac:	1885883a 	add	r2,r3,r2
    efb0:	00000106 	br	efb8 <lseek+0x4c>
    efb4:	0005883a 	mov	r2,zero
    efb8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    efbc:	e0bffc17 	ldw	r2,-16(fp)
    efc0:	10001026 	beq	r2,zero,f004 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    efc4:	e0bffc17 	ldw	r2,-16(fp)
    efc8:	10800017 	ldw	r2,0(r2)
    efcc:	10800717 	ldw	r2,28(r2)
    efd0:	10000926 	beq	r2,zero,eff8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    efd4:	e0bffc17 	ldw	r2,-16(fp)
    efd8:	10800017 	ldw	r2,0(r2)
    efdc:	10800717 	ldw	r2,28(r2)
    efe0:	e1bfff17 	ldw	r6,-4(fp)
    efe4:	e17ffe17 	ldw	r5,-8(fp)
    efe8:	e13ffc17 	ldw	r4,-16(fp)
    efec:	103ee83a 	callr	r2
    eff0:	e0bffb15 	stw	r2,-20(fp)
    eff4:	00000506 	br	f00c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    eff8:	00bfde84 	movi	r2,-134
    effc:	e0bffb15 	stw	r2,-20(fp)
    f000:	00000206 	br	f00c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    f004:	00bfebc4 	movi	r2,-81
    f008:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f00c:	e0bffb17 	ldw	r2,-20(fp)
    f010:	1000070e 	bge	r2,zero,f030 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    f014:	000ef300 	call	ef30 <alt_get_errno>
    f018:	1007883a 	mov	r3,r2
    f01c:	e0bffb17 	ldw	r2,-20(fp)
    f020:	0085c83a 	sub	r2,zero,r2
    f024:	18800015 	stw	r2,0(r3)
    rc = -1;
    f028:	00bfffc4 	movi	r2,-1
    f02c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f030:	e0bffb17 	ldw	r2,-20(fp)
}
    f034:	e037883a 	mov	sp,fp
    f038:	dfc00117 	ldw	ra,4(sp)
    f03c:	df000017 	ldw	fp,0(sp)
    f040:	dec00204 	addi	sp,sp,8
    f044:	f800283a 	ret

0000f048 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f048:	defffd04 	addi	sp,sp,-12
    f04c:	dfc00215 	stw	ra,8(sp)
    f050:	df000115 	stw	fp,4(sp)
    f054:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f058:	0009883a 	mov	r4,zero
    f05c:	000f7740 	call	f774 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f060:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f064:	000f7ac0 	call	f7ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f068:	01800074 	movhi	r6,1
    f06c:	31852f04 	addi	r6,r6,5308
    f070:	01400074 	movhi	r5,1
    f074:	29452f04 	addi	r5,r5,5308
    f078:	01000074 	movhi	r4,1
    f07c:	21052f04 	addi	r4,r4,5308
    f080:	0010c580 	call	10c58 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f084:	00105980 	call	10598 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f088:	01000074 	movhi	r4,1
    f08c:	21017e04 	addi	r4,r4,1528
    f090:	0010f380 	call	10f38 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f094:	d0a6d217 	ldw	r2,-25784(gp)
    f098:	d0e6d317 	ldw	r3,-25780(gp)
    f09c:	d126d417 	ldw	r4,-25776(gp)
    f0a0:	200d883a 	mov	r6,r4
    f0a4:	180b883a 	mov	r5,r3
    f0a8:	1009883a 	mov	r4,r2
    f0ac:	0000a240 	call	a24 <main>
    f0b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f0b4:	01000044 	movi	r4,1
    f0b8:	000eb300 	call	eb30 <close>
  exit (result);
    f0bc:	e13fff17 	ldw	r4,-4(fp)
    f0c0:	00036e00 	call	36e0 <exit>

0000f0c4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f0c4:	defffe04 	addi	sp,sp,-8
    f0c8:	df000115 	stw	fp,4(sp)
    f0cc:	df000104 	addi	fp,sp,4
    f0d0:	e13fff15 	stw	r4,-4(fp)
}
    f0d4:	0001883a 	nop
    f0d8:	e037883a 	mov	sp,fp
    f0dc:	df000017 	ldw	fp,0(sp)
    f0e0:	dec00104 	addi	sp,sp,4
    f0e4:	f800283a 	ret

0000f0e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f0e8:	defffe04 	addi	sp,sp,-8
    f0ec:	df000115 	stw	fp,4(sp)
    f0f0:	df000104 	addi	fp,sp,4
    f0f4:	e13fff15 	stw	r4,-4(fp)
}
    f0f8:	0001883a 	nop
    f0fc:	e037883a 	mov	sp,fp
    f100:	df000017 	ldw	fp,0(sp)
    f104:	dec00104 	addi	sp,sp,4
    f108:	f800283a 	ret

0000f10c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f10c:	defffe04 	addi	sp,sp,-8
    f110:	dfc00115 	stw	ra,4(sp)
    f114:	df000015 	stw	fp,0(sp)
    f118:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f11c:	d0a00b17 	ldw	r2,-32724(gp)
    f120:	10000326 	beq	r2,zero,f130 <alt_get_errno+0x24>
    f124:	d0a00b17 	ldw	r2,-32724(gp)
    f128:	103ee83a 	callr	r2
    f12c:	00000106 	br	f134 <alt_get_errno+0x28>
    f130:	d0a6cb04 	addi	r2,gp,-25812
}
    f134:	e037883a 	mov	sp,fp
    f138:	dfc00117 	ldw	ra,4(sp)
    f13c:	df000017 	ldw	fp,0(sp)
    f140:	dec00204 	addi	sp,sp,8
    f144:	f800283a 	ret

0000f148 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f148:	defffb04 	addi	sp,sp,-20
    f14c:	dfc00415 	stw	ra,16(sp)
    f150:	df000315 	stw	fp,12(sp)
    f154:	dc000215 	stw	r16,8(sp)
    f158:	df000304 	addi	fp,sp,12
    f15c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f160:	e0bffe17 	ldw	r2,-8(fp)
    f164:	10800217 	ldw	r2,8(r2)
    f168:	10d00034 	orhi	r3,r2,16384
    f16c:	e0bffe17 	ldw	r2,-8(fp)
    f170:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f174:	e03ffd15 	stw	zero,-12(fp)
    f178:	00002306 	br	f208 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f17c:	04000074 	movhi	r16,1
    f180:	84076c04 	addi	r16,r16,7600
    f184:	e0bffd17 	ldw	r2,-12(fp)
    f188:	01400304 	movi	r5,12
    f18c:	1009883a 	mov	r4,r2
    f190:	0000f040 	call	f04 <__mulsi3>
    f194:	8085883a 	add	r2,r16,r2
    f198:	10c00017 	ldw	r3,0(r2)
    f19c:	e0bffe17 	ldw	r2,-8(fp)
    f1a0:	10800017 	ldw	r2,0(r2)
    f1a4:	1880151e 	bne	r3,r2,f1fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f1a8:	04000074 	movhi	r16,1
    f1ac:	84076c04 	addi	r16,r16,7600
    f1b0:	e0bffd17 	ldw	r2,-12(fp)
    f1b4:	01400304 	movi	r5,12
    f1b8:	1009883a 	mov	r4,r2
    f1bc:	0000f040 	call	f04 <__mulsi3>
    f1c0:	8085883a 	add	r2,r16,r2
    f1c4:	10800204 	addi	r2,r2,8
    f1c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f1cc:	10000b0e 	bge	r2,zero,f1fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f1d0:	01400304 	movi	r5,12
    f1d4:	e13ffd17 	ldw	r4,-12(fp)
    f1d8:	0000f040 	call	f04 <__mulsi3>
    f1dc:	1007883a 	mov	r3,r2
    f1e0:	00800074 	movhi	r2,1
    f1e4:	10876c04 	addi	r2,r2,7600
    f1e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f1ec:	e0bffe17 	ldw	r2,-8(fp)
    f1f0:	18800226 	beq	r3,r2,f1fc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f1f4:	00bffcc4 	movi	r2,-13
    f1f8:	00000806 	br	f21c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f1fc:	e0bffd17 	ldw	r2,-12(fp)
    f200:	10800044 	addi	r2,r2,1
    f204:	e0bffd15 	stw	r2,-12(fp)
    f208:	d0a00a17 	ldw	r2,-32728(gp)
    f20c:	1007883a 	mov	r3,r2
    f210:	e0bffd17 	ldw	r2,-12(fp)
    f214:	18bfd92e 	bgeu	r3,r2,f17c <__alt_data_end+0xfffef17c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f218:	0005883a 	mov	r2,zero
}
    f21c:	e6ffff04 	addi	sp,fp,-4
    f220:	dfc00217 	ldw	ra,8(sp)
    f224:	df000117 	ldw	fp,4(sp)
    f228:	dc000017 	ldw	r16,0(sp)
    f22c:	dec00304 	addi	sp,sp,12
    f230:	f800283a 	ret

0000f234 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f234:	defff604 	addi	sp,sp,-40
    f238:	dfc00915 	stw	ra,36(sp)
    f23c:	df000815 	stw	fp,32(sp)
    f240:	df000804 	addi	fp,sp,32
    f244:	e13ffd15 	stw	r4,-12(fp)
    f248:	e17ffe15 	stw	r5,-8(fp)
    f24c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f250:	00bfffc4 	movi	r2,-1
    f254:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f258:	00bffb44 	movi	r2,-19
    f25c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f260:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f264:	d1600804 	addi	r5,gp,-32736
    f268:	e13ffd17 	ldw	r4,-12(fp)
    f26c:	00106580 	call	10658 <alt_find_dev>
    f270:	e0bff815 	stw	r2,-32(fp)
    f274:	e0bff817 	ldw	r2,-32(fp)
    f278:	1000051e 	bne	r2,zero,f290 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f27c:	e13ffd17 	ldw	r4,-12(fp)
    f280:	00106e80 	call	106e8 <alt_find_file>
    f284:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f288:	00800044 	movi	r2,1
    f28c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f290:	e0bff817 	ldw	r2,-32(fp)
    f294:	10002b26 	beq	r2,zero,f344 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f298:	e13ff817 	ldw	r4,-32(fp)
    f29c:	00107f00 	call	107f0 <alt_get_fd>
    f2a0:	e0bff915 	stw	r2,-28(fp)
    f2a4:	e0bff917 	ldw	r2,-28(fp)
    f2a8:	1000030e 	bge	r2,zero,f2b8 <open+0x84>
    {
      status = index;
    f2ac:	e0bff917 	ldw	r2,-28(fp)
    f2b0:	e0bffa15 	stw	r2,-24(fp)
    f2b4:	00002506 	br	f34c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    f2b8:	01400304 	movi	r5,12
    f2bc:	e13ff917 	ldw	r4,-28(fp)
    f2c0:	0000f040 	call	f04 <__mulsi3>
    f2c4:	1007883a 	mov	r3,r2
    f2c8:	00800074 	movhi	r2,1
    f2cc:	10876c04 	addi	r2,r2,7600
    f2d0:	1885883a 	add	r2,r3,r2
    f2d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f2d8:	e0fffe17 	ldw	r3,-8(fp)
    f2dc:	00900034 	movhi	r2,16384
    f2e0:	10bfffc4 	addi	r2,r2,-1
    f2e4:	1886703a 	and	r3,r3,r2
    f2e8:	e0bffc17 	ldw	r2,-16(fp)
    f2ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f2f0:	e0bffb17 	ldw	r2,-20(fp)
    f2f4:	1000051e 	bne	r2,zero,f30c <open+0xd8>
    f2f8:	e13ffc17 	ldw	r4,-16(fp)
    f2fc:	000f1480 	call	f148 <alt_file_locked>
    f300:	e0bffa15 	stw	r2,-24(fp)
    f304:	e0bffa17 	ldw	r2,-24(fp)
    f308:	10001016 	blt	r2,zero,f34c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f30c:	e0bff817 	ldw	r2,-32(fp)
    f310:	10800317 	ldw	r2,12(r2)
    f314:	10000826 	beq	r2,zero,f338 <open+0x104>
    f318:	e0bff817 	ldw	r2,-32(fp)
    f31c:	10800317 	ldw	r2,12(r2)
    f320:	e1ffff17 	ldw	r7,-4(fp)
    f324:	e1bffe17 	ldw	r6,-8(fp)
    f328:	e17ffd17 	ldw	r5,-12(fp)
    f32c:	e13ffc17 	ldw	r4,-16(fp)
    f330:	103ee83a 	callr	r2
    f334:	00000106 	br	f33c <open+0x108>
    f338:	0005883a 	mov	r2,zero
    f33c:	e0bffa15 	stw	r2,-24(fp)
    f340:	00000206 	br	f34c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f344:	00bffb44 	movi	r2,-19
    f348:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f34c:	e0bffa17 	ldw	r2,-24(fp)
    f350:	1000090e 	bge	r2,zero,f378 <open+0x144>
  {
    alt_release_fd (index);  
    f354:	e13ff917 	ldw	r4,-28(fp)
    f358:	000f4d00 	call	f4d0 <alt_release_fd>
    ALT_ERRNO = -status;
    f35c:	000f10c0 	call	f10c <alt_get_errno>
    f360:	1007883a 	mov	r3,r2
    f364:	e0bffa17 	ldw	r2,-24(fp)
    f368:	0085c83a 	sub	r2,zero,r2
    f36c:	18800015 	stw	r2,0(r3)
    return -1;
    f370:	00bfffc4 	movi	r2,-1
    f374:	00000106 	br	f37c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    f378:	e0bff917 	ldw	r2,-28(fp)
}
    f37c:	e037883a 	mov	sp,fp
    f380:	dfc00117 	ldw	ra,4(sp)
    f384:	df000017 	ldw	fp,0(sp)
    f388:	dec00204 	addi	sp,sp,8
    f38c:	f800283a 	ret

0000f390 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f390:	defffe04 	addi	sp,sp,-8
    f394:	dfc00115 	stw	ra,4(sp)
    f398:	df000015 	stw	fp,0(sp)
    f39c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f3a0:	d0a00b17 	ldw	r2,-32724(gp)
    f3a4:	10000326 	beq	r2,zero,f3b4 <alt_get_errno+0x24>
    f3a8:	d0a00b17 	ldw	r2,-32724(gp)
    f3ac:	103ee83a 	callr	r2
    f3b0:	00000106 	br	f3b8 <alt_get_errno+0x28>
    f3b4:	d0a6cb04 	addi	r2,gp,-25812
}
    f3b8:	e037883a 	mov	sp,fp
    f3bc:	dfc00117 	ldw	ra,4(sp)
    f3c0:	df000017 	ldw	fp,0(sp)
    f3c4:	dec00204 	addi	sp,sp,8
    f3c8:	f800283a 	ret

0000f3cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f3cc:	defff904 	addi	sp,sp,-28
    f3d0:	dfc00615 	stw	ra,24(sp)
    f3d4:	df000515 	stw	fp,20(sp)
    f3d8:	df000504 	addi	fp,sp,20
    f3dc:	e13ffd15 	stw	r4,-12(fp)
    f3e0:	e17ffe15 	stw	r5,-8(fp)
    f3e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f3e8:	e0bffd17 	ldw	r2,-12(fp)
    f3ec:	10000816 	blt	r2,zero,f410 <read+0x44>
    f3f0:	01400304 	movi	r5,12
    f3f4:	e13ffd17 	ldw	r4,-12(fp)
    f3f8:	0000f040 	call	f04 <__mulsi3>
    f3fc:	1007883a 	mov	r3,r2
    f400:	00800074 	movhi	r2,1
    f404:	10876c04 	addi	r2,r2,7600
    f408:	1885883a 	add	r2,r3,r2
    f40c:	00000106 	br	f414 <read+0x48>
    f410:	0005883a 	mov	r2,zero
    f414:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f418:	e0bffb17 	ldw	r2,-20(fp)
    f41c:	10002226 	beq	r2,zero,f4a8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f420:	e0bffb17 	ldw	r2,-20(fp)
    f424:	10800217 	ldw	r2,8(r2)
    f428:	108000cc 	andi	r2,r2,3
    f42c:	10800060 	cmpeqi	r2,r2,1
    f430:	1000181e 	bne	r2,zero,f494 <read+0xc8>
        (fd->dev->read))
    f434:	e0bffb17 	ldw	r2,-20(fp)
    f438:	10800017 	ldw	r2,0(r2)
    f43c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f440:	10001426 	beq	r2,zero,f494 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f444:	e0bffb17 	ldw	r2,-20(fp)
    f448:	10800017 	ldw	r2,0(r2)
    f44c:	10800517 	ldw	r2,20(r2)
    f450:	e0ffff17 	ldw	r3,-4(fp)
    f454:	180d883a 	mov	r6,r3
    f458:	e17ffe17 	ldw	r5,-8(fp)
    f45c:	e13ffb17 	ldw	r4,-20(fp)
    f460:	103ee83a 	callr	r2
    f464:	e0bffc15 	stw	r2,-16(fp)
    f468:	e0bffc17 	ldw	r2,-16(fp)
    f46c:	1000070e 	bge	r2,zero,f48c <read+0xc0>
        {
          ALT_ERRNO = -rval;
    f470:	000f3900 	call	f390 <alt_get_errno>
    f474:	1007883a 	mov	r3,r2
    f478:	e0bffc17 	ldw	r2,-16(fp)
    f47c:	0085c83a 	sub	r2,zero,r2
    f480:	18800015 	stw	r2,0(r3)
          return -1;
    f484:	00bfffc4 	movi	r2,-1
    f488:	00000c06 	br	f4bc <read+0xf0>
        }
        return rval;
    f48c:	e0bffc17 	ldw	r2,-16(fp)
    f490:	00000a06 	br	f4bc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f494:	000f3900 	call	f390 <alt_get_errno>
    f498:	1007883a 	mov	r3,r2
    f49c:	00800344 	movi	r2,13
    f4a0:	18800015 	stw	r2,0(r3)
    f4a4:	00000406 	br	f4b8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f4a8:	000f3900 	call	f390 <alt_get_errno>
    f4ac:	1007883a 	mov	r3,r2
    f4b0:	00801444 	movi	r2,81
    f4b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f4b8:	00bfffc4 	movi	r2,-1
}
    f4bc:	e037883a 	mov	sp,fp
    f4c0:	dfc00117 	ldw	ra,4(sp)
    f4c4:	df000017 	ldw	fp,0(sp)
    f4c8:	dec00204 	addi	sp,sp,8
    f4cc:	f800283a 	ret

0000f4d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f4d0:	defffc04 	addi	sp,sp,-16
    f4d4:	dfc00315 	stw	ra,12(sp)
    f4d8:	df000215 	stw	fp,8(sp)
    f4dc:	dc000115 	stw	r16,4(sp)
    f4e0:	df000204 	addi	fp,sp,8
    f4e4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    f4e8:	e0bffe17 	ldw	r2,-8(fp)
    f4ec:	108000d0 	cmplti	r2,r2,3
    f4f0:	1000111e 	bne	r2,zero,f538 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    f4f4:	04000074 	movhi	r16,1
    f4f8:	84076c04 	addi	r16,r16,7600
    f4fc:	e0bffe17 	ldw	r2,-8(fp)
    f500:	01400304 	movi	r5,12
    f504:	1009883a 	mov	r4,r2
    f508:	0000f040 	call	f04 <__mulsi3>
    f50c:	8085883a 	add	r2,r16,r2
    f510:	10800204 	addi	r2,r2,8
    f514:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f518:	04000074 	movhi	r16,1
    f51c:	84076c04 	addi	r16,r16,7600
    f520:	e0bffe17 	ldw	r2,-8(fp)
    f524:	01400304 	movi	r5,12
    f528:	1009883a 	mov	r4,r2
    f52c:	0000f040 	call	f04 <__mulsi3>
    f530:	8085883a 	add	r2,r16,r2
    f534:	10000015 	stw	zero,0(r2)
  }
}
    f538:	0001883a 	nop
    f53c:	e6ffff04 	addi	sp,fp,-4
    f540:	dfc00217 	ldw	ra,8(sp)
    f544:	df000117 	ldw	fp,4(sp)
    f548:	dc000017 	ldw	r16,0(sp)
    f54c:	dec00304 	addi	sp,sp,12
    f550:	f800283a 	ret

0000f554 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f554:	defff904 	addi	sp,sp,-28
    f558:	df000615 	stw	fp,24(sp)
    f55c:	df000604 	addi	fp,sp,24
    f560:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f564:	0005303a 	rdctl	r2,status
    f568:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f56c:	e0fffe17 	ldw	r3,-8(fp)
    f570:	00bfff84 	movi	r2,-2
    f574:	1884703a 	and	r2,r3,r2
    f578:	1001703a 	wrctl	status,r2
  
  return context;
    f57c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f580:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f584:	d0a00c17 	ldw	r2,-32720(gp)
    f588:	10c000c4 	addi	r3,r2,3
    f58c:	00bfff04 	movi	r2,-4
    f590:	1884703a 	and	r2,r3,r2
    f594:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f598:	d0e00c17 	ldw	r3,-32720(gp)
    f59c:	e0bfff17 	ldw	r2,-4(fp)
    f5a0:	1887883a 	add	r3,r3,r2
    f5a4:	008000b4 	movhi	r2,2
    f5a8:	10800004 	addi	r2,r2,0
    f5ac:	10c0062e 	bgeu	r2,r3,f5c8 <sbrk+0x74>
    f5b0:	e0bffb17 	ldw	r2,-20(fp)
    f5b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5b8:	e0bffa17 	ldw	r2,-24(fp)
    f5bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f5c0:	00bfffc4 	movi	r2,-1
    f5c4:	00000b06 	br	f5f4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f5c8:	d0a00c17 	ldw	r2,-32720(gp)
    f5cc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f5d0:	d0e00c17 	ldw	r3,-32720(gp)
    f5d4:	e0bfff17 	ldw	r2,-4(fp)
    f5d8:	1885883a 	add	r2,r3,r2
    f5dc:	d0a00c15 	stw	r2,-32720(gp)
    f5e0:	e0bffb17 	ldw	r2,-20(fp)
    f5e4:	e0bffc15 	stw	r2,-16(fp)
    f5e8:	e0bffc17 	ldw	r2,-16(fp)
    f5ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f5f0:	e0bffd17 	ldw	r2,-12(fp)
} 
    f5f4:	e037883a 	mov	sp,fp
    f5f8:	df000017 	ldw	fp,0(sp)
    f5fc:	dec00104 	addi	sp,sp,4
    f600:	f800283a 	ret

0000f604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f604:	defffe04 	addi	sp,sp,-8
    f608:	dfc00115 	stw	ra,4(sp)
    f60c:	df000015 	stw	fp,0(sp)
    f610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f614:	d0a00b17 	ldw	r2,-32724(gp)
    f618:	10000326 	beq	r2,zero,f628 <alt_get_errno+0x24>
    f61c:	d0a00b17 	ldw	r2,-32724(gp)
    f620:	103ee83a 	callr	r2
    f624:	00000106 	br	f62c <alt_get_errno+0x28>
    f628:	d0a6cb04 	addi	r2,gp,-25812
}
    f62c:	e037883a 	mov	sp,fp
    f630:	dfc00117 	ldw	ra,4(sp)
    f634:	df000017 	ldw	fp,0(sp)
    f638:	dec00204 	addi	sp,sp,8
    f63c:	f800283a 	ret

0000f640 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f640:	defff904 	addi	sp,sp,-28
    f644:	dfc00615 	stw	ra,24(sp)
    f648:	df000515 	stw	fp,20(sp)
    f64c:	df000504 	addi	fp,sp,20
    f650:	e13ffd15 	stw	r4,-12(fp)
    f654:	e17ffe15 	stw	r5,-8(fp)
    f658:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f65c:	e0bffd17 	ldw	r2,-12(fp)
    f660:	10000816 	blt	r2,zero,f684 <write+0x44>
    f664:	01400304 	movi	r5,12
    f668:	e13ffd17 	ldw	r4,-12(fp)
    f66c:	0000f040 	call	f04 <__mulsi3>
    f670:	1007883a 	mov	r3,r2
    f674:	00800074 	movhi	r2,1
    f678:	10876c04 	addi	r2,r2,7600
    f67c:	1885883a 	add	r2,r3,r2
    f680:	00000106 	br	f688 <write+0x48>
    f684:	0005883a 	mov	r2,zero
    f688:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f68c:	e0bffb17 	ldw	r2,-20(fp)
    f690:	10002126 	beq	r2,zero,f718 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f694:	e0bffb17 	ldw	r2,-20(fp)
    f698:	10800217 	ldw	r2,8(r2)
    f69c:	108000cc 	andi	r2,r2,3
    f6a0:	10001826 	beq	r2,zero,f704 <write+0xc4>
    f6a4:	e0bffb17 	ldw	r2,-20(fp)
    f6a8:	10800017 	ldw	r2,0(r2)
    f6ac:	10800617 	ldw	r2,24(r2)
    f6b0:	10001426 	beq	r2,zero,f704 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f6b4:	e0bffb17 	ldw	r2,-20(fp)
    f6b8:	10800017 	ldw	r2,0(r2)
    f6bc:	10800617 	ldw	r2,24(r2)
    f6c0:	e0ffff17 	ldw	r3,-4(fp)
    f6c4:	180d883a 	mov	r6,r3
    f6c8:	e17ffe17 	ldw	r5,-8(fp)
    f6cc:	e13ffb17 	ldw	r4,-20(fp)
    f6d0:	103ee83a 	callr	r2
    f6d4:	e0bffc15 	stw	r2,-16(fp)
    f6d8:	e0bffc17 	ldw	r2,-16(fp)
    f6dc:	1000070e 	bge	r2,zero,f6fc <write+0xbc>
      {
        ALT_ERRNO = -rval;
    f6e0:	000f6040 	call	f604 <alt_get_errno>
    f6e4:	1007883a 	mov	r3,r2
    f6e8:	e0bffc17 	ldw	r2,-16(fp)
    f6ec:	0085c83a 	sub	r2,zero,r2
    f6f0:	18800015 	stw	r2,0(r3)
        return -1;
    f6f4:	00bfffc4 	movi	r2,-1
    f6f8:	00000c06 	br	f72c <write+0xec>
      }
      return rval;
    f6fc:	e0bffc17 	ldw	r2,-16(fp)
    f700:	00000a06 	br	f72c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f704:	000f6040 	call	f604 <alt_get_errno>
    f708:	1007883a 	mov	r3,r2
    f70c:	00800344 	movi	r2,13
    f710:	18800015 	stw	r2,0(r3)
    f714:	00000406 	br	f728 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f718:	000f6040 	call	f604 <alt_get_errno>
    f71c:	1007883a 	mov	r3,r2
    f720:	00801444 	movi	r2,81
    f724:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f728:	00bfffc4 	movi	r2,-1
}
    f72c:	e037883a 	mov	sp,fp
    f730:	dfc00117 	ldw	ra,4(sp)
    f734:	df000017 	ldw	fp,0(sp)
    f738:	dec00204 	addi	sp,sp,8
    f73c:	f800283a 	ret

0000f740 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f740:	defffd04 	addi	sp,sp,-12
    f744:	dfc00215 	stw	ra,8(sp)
    f748:	df000115 	stw	fp,4(sp)
    f74c:	df000104 	addi	fp,sp,4
    f750:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f754:	d1600804 	addi	r5,gp,-32736
    f758:	e13fff17 	ldw	r4,-4(fp)
    f75c:	00104f40 	call	104f4 <alt_dev_llist_insert>
}
    f760:	e037883a 	mov	sp,fp
    f764:	dfc00117 	ldw	ra,4(sp)
    f768:	df000017 	ldw	fp,0(sp)
    f76c:	dec00204 	addi	sp,sp,8
    f770:	f800283a 	ret

0000f774 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f774:	defffd04 	addi	sp,sp,-12
    f778:	dfc00215 	stw	ra,8(sp)
    f77c:	df000115 	stw	fp,4(sp)
    f780:	df000104 	addi	fp,sp,4
    f784:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROC, proc);
    f788:	0010e780 	call	10e78 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f78c:	00800044 	movi	r2,1
    f790:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f794:	0001883a 	nop
    f798:	e037883a 	mov	sp,fp
    f79c:	dfc00117 	ldw	ra,4(sp)
    f7a0:	df000017 	ldw	fp,0(sp)
    f7a4:	dec00204 	addi	sp,sp,8
    f7a8:	f800283a 	ret

0000f7ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f7ac:	defffe04 	addi	sp,sp,-8
    f7b0:	dfc00115 	stw	ra,4(sp)
    f7b4:	df000015 	stw	fp,0(sp)
    f7b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    f7bc:	01c0fa04 	movi	r7,1000
    f7c0:	01800044 	movi	r6,1
    f7c4:	000b883a 	mov	r5,zero
    f7c8:	01000134 	movhi	r4,4
    f7cc:	21040804 	addi	r4,r4,4128
    f7d0:	00102f00 	call	102f0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( WATCHDOG, watchdog);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    f7d4:	000d883a 	mov	r6,zero
    f7d8:	000b883a 	mov	r5,zero
    f7dc:	01000074 	movhi	r4,1
    f7e0:	2107d604 	addi	r4,r4,8024
    f7e4:	000f9740 	call	f974 <altera_avalon_jtag_uart_init>
    f7e8:	01000074 	movhi	r4,1
    f7ec:	2107cc04 	addi	r4,r4,7984
    f7f0:	000f7400 	call	f740 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    f7f4:	0001883a 	nop
}
    f7f8:	0001883a 	nop
    f7fc:	e037883a 	mov	sp,fp
    f800:	dfc00117 	ldw	ra,4(sp)
    f804:	df000017 	ldw	fp,0(sp)
    f808:	dec00204 	addi	sp,sp,8
    f80c:	f800283a 	ret

0000f810 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f810:	defffa04 	addi	sp,sp,-24
    f814:	dfc00515 	stw	ra,20(sp)
    f818:	df000415 	stw	fp,16(sp)
    f81c:	df000404 	addi	fp,sp,16
    f820:	e13ffd15 	stw	r4,-12(fp)
    f824:	e17ffe15 	stw	r5,-8(fp)
    f828:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f82c:	e0bffd17 	ldw	r2,-12(fp)
    f830:	10800017 	ldw	r2,0(r2)
    f834:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f838:	e0bffc17 	ldw	r2,-16(fp)
    f83c:	10c00a04 	addi	r3,r2,40
    f840:	e0bffd17 	ldw	r2,-12(fp)
    f844:	10800217 	ldw	r2,8(r2)
    f848:	100f883a 	mov	r7,r2
    f84c:	e1bfff17 	ldw	r6,-4(fp)
    f850:	e17ffe17 	ldw	r5,-8(fp)
    f854:	1809883a 	mov	r4,r3
    f858:	000fe380 	call	fe38 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f85c:	e037883a 	mov	sp,fp
    f860:	dfc00117 	ldw	ra,4(sp)
    f864:	df000017 	ldw	fp,0(sp)
    f868:	dec00204 	addi	sp,sp,8
    f86c:	f800283a 	ret

0000f870 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f870:	defffa04 	addi	sp,sp,-24
    f874:	dfc00515 	stw	ra,20(sp)
    f878:	df000415 	stw	fp,16(sp)
    f87c:	df000404 	addi	fp,sp,16
    f880:	e13ffd15 	stw	r4,-12(fp)
    f884:	e17ffe15 	stw	r5,-8(fp)
    f888:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f88c:	e0bffd17 	ldw	r2,-12(fp)
    f890:	10800017 	ldw	r2,0(r2)
    f894:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f898:	e0bffc17 	ldw	r2,-16(fp)
    f89c:	10c00a04 	addi	r3,r2,40
    f8a0:	e0bffd17 	ldw	r2,-12(fp)
    f8a4:	10800217 	ldw	r2,8(r2)
    f8a8:	100f883a 	mov	r7,r2
    f8ac:	e1bfff17 	ldw	r6,-4(fp)
    f8b0:	e17ffe17 	ldw	r5,-8(fp)
    f8b4:	1809883a 	mov	r4,r3
    f8b8:	00100540 	call	10054 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f8bc:	e037883a 	mov	sp,fp
    f8c0:	dfc00117 	ldw	ra,4(sp)
    f8c4:	df000017 	ldw	fp,0(sp)
    f8c8:	dec00204 	addi	sp,sp,8
    f8cc:	f800283a 	ret

0000f8d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f8d0:	defffc04 	addi	sp,sp,-16
    f8d4:	dfc00315 	stw	ra,12(sp)
    f8d8:	df000215 	stw	fp,8(sp)
    f8dc:	df000204 	addi	fp,sp,8
    f8e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f8e4:	e0bfff17 	ldw	r2,-4(fp)
    f8e8:	10800017 	ldw	r2,0(r2)
    f8ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f8f0:	e0bffe17 	ldw	r2,-8(fp)
    f8f4:	10c00a04 	addi	r3,r2,40
    f8f8:	e0bfff17 	ldw	r2,-4(fp)
    f8fc:	10800217 	ldw	r2,8(r2)
    f900:	100b883a 	mov	r5,r2
    f904:	1809883a 	mov	r4,r3
    f908:	000fce00 	call	fce0 <altera_avalon_jtag_uart_close>
}
    f90c:	e037883a 	mov	sp,fp
    f910:	dfc00117 	ldw	ra,4(sp)
    f914:	df000017 	ldw	fp,0(sp)
    f918:	dec00204 	addi	sp,sp,8
    f91c:	f800283a 	ret

0000f920 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f920:	defffa04 	addi	sp,sp,-24
    f924:	dfc00515 	stw	ra,20(sp)
    f928:	df000415 	stw	fp,16(sp)
    f92c:	df000404 	addi	fp,sp,16
    f930:	e13ffd15 	stw	r4,-12(fp)
    f934:	e17ffe15 	stw	r5,-8(fp)
    f938:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f93c:	e0bffd17 	ldw	r2,-12(fp)
    f940:	10800017 	ldw	r2,0(r2)
    f944:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f948:	e0bffc17 	ldw	r2,-16(fp)
    f94c:	10800a04 	addi	r2,r2,40
    f950:	e1bfff17 	ldw	r6,-4(fp)
    f954:	e17ffe17 	ldw	r5,-8(fp)
    f958:	1009883a 	mov	r4,r2
    f95c:	000fd480 	call	fd48 <altera_avalon_jtag_uart_ioctl>
}
    f960:	e037883a 	mov	sp,fp
    f964:	dfc00117 	ldw	ra,4(sp)
    f968:	df000017 	ldw	fp,0(sp)
    f96c:	dec00204 	addi	sp,sp,8
    f970:	f800283a 	ret

0000f974 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f974:	defffa04 	addi	sp,sp,-24
    f978:	dfc00515 	stw	ra,20(sp)
    f97c:	df000415 	stw	fp,16(sp)
    f980:	df000404 	addi	fp,sp,16
    f984:	e13ffd15 	stw	r4,-12(fp)
    f988:	e17ffe15 	stw	r5,-8(fp)
    f98c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f990:	e0bffd17 	ldw	r2,-12(fp)
    f994:	00c00044 	movi	r3,1
    f998:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f99c:	e0bffd17 	ldw	r2,-12(fp)
    f9a0:	10800017 	ldw	r2,0(r2)
    f9a4:	10800104 	addi	r2,r2,4
    f9a8:	1007883a 	mov	r3,r2
    f9ac:	e0bffd17 	ldw	r2,-12(fp)
    f9b0:	10800817 	ldw	r2,32(r2)
    f9b4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f9b8:	e0bffe17 	ldw	r2,-8(fp)
    f9bc:	e0ffff17 	ldw	r3,-4(fp)
    f9c0:	d8000015 	stw	zero,0(sp)
    f9c4:	e1fffd17 	ldw	r7,-12(fp)
    f9c8:	01800074 	movhi	r6,1
    f9cc:	31be8d04 	addi	r6,r6,-1484
    f9d0:	180b883a 	mov	r5,r3
    f9d4:	1009883a 	mov	r4,r2
    f9d8:	00108d40 	call	108d4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f9dc:	e0bffd17 	ldw	r2,-12(fp)
    f9e0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f9e4:	e0bffd17 	ldw	r2,-12(fp)
    f9e8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f9ec:	d0e6d617 	ldw	r3,-25768(gp)
    f9f0:	e1fffd17 	ldw	r7,-12(fp)
    f9f4:	01800074 	movhi	r6,1
    f9f8:	31bf1004 	addi	r6,r6,-960
    f9fc:	180b883a 	mov	r5,r3
    fa00:	1009883a 	mov	r4,r2
    fa04:	001036c0 	call	1036c <alt_alarm_start>
    fa08:	1000040e 	bge	r2,zero,fa1c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    fa0c:	e0fffd17 	ldw	r3,-12(fp)
    fa10:	00a00034 	movhi	r2,32768
    fa14:	10bfffc4 	addi	r2,r2,-1
    fa18:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    fa1c:	0001883a 	nop
    fa20:	e037883a 	mov	sp,fp
    fa24:	dfc00117 	ldw	ra,4(sp)
    fa28:	df000017 	ldw	fp,0(sp)
    fa2c:	dec00204 	addi	sp,sp,8
    fa30:	f800283a 	ret

0000fa34 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    fa34:	defff804 	addi	sp,sp,-32
    fa38:	df000715 	stw	fp,28(sp)
    fa3c:	df000704 	addi	fp,sp,28
    fa40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    fa44:	e0bfff17 	ldw	r2,-4(fp)
    fa48:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    fa4c:	e0bffb17 	ldw	r2,-20(fp)
    fa50:	10800017 	ldw	r2,0(r2)
    fa54:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fa58:	e0bffc17 	ldw	r2,-16(fp)
    fa5c:	10800104 	addi	r2,r2,4
    fa60:	10800037 	ldwio	r2,0(r2)
    fa64:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    fa68:	e0bffd17 	ldw	r2,-12(fp)
    fa6c:	1080c00c 	andi	r2,r2,768
    fa70:	10006d26 	beq	r2,zero,fc28 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    fa74:	e0bffd17 	ldw	r2,-12(fp)
    fa78:	1080400c 	andi	r2,r2,256
    fa7c:	10003526 	beq	r2,zero,fb54 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    fa80:	00800074 	movhi	r2,1
    fa84:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fa88:	e0bffb17 	ldw	r2,-20(fp)
    fa8c:	10800a17 	ldw	r2,40(r2)
    fa90:	10800044 	addi	r2,r2,1
    fa94:	1081ffcc 	andi	r2,r2,2047
    fa98:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    fa9c:	e0bffb17 	ldw	r2,-20(fp)
    faa0:	10c00b17 	ldw	r3,44(r2)
    faa4:	e0bffe17 	ldw	r2,-8(fp)
    faa8:	18801526 	beq	r3,r2,fb00 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    faac:	e0bffc17 	ldw	r2,-16(fp)
    fab0:	10800037 	ldwio	r2,0(r2)
    fab4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    fab8:	e0bff917 	ldw	r2,-28(fp)
    fabc:	10a0000c 	andi	r2,r2,32768
    fac0:	10001126 	beq	r2,zero,fb08 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    fac4:	e0bffb17 	ldw	r2,-20(fp)
    fac8:	10800a17 	ldw	r2,40(r2)
    facc:	e0fff917 	ldw	r3,-28(fp)
    fad0:	1809883a 	mov	r4,r3
    fad4:	e0fffb17 	ldw	r3,-20(fp)
    fad8:	1885883a 	add	r2,r3,r2
    fadc:	10800e04 	addi	r2,r2,56
    fae0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fae4:	e0bffb17 	ldw	r2,-20(fp)
    fae8:	10800a17 	ldw	r2,40(r2)
    faec:	10800044 	addi	r2,r2,1
    faf0:	10c1ffcc 	andi	r3,r2,2047
    faf4:	e0bffb17 	ldw	r2,-20(fp)
    faf8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    fafc:	003fe206 	br	fa88 <__alt_data_end+0xfffefa88>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    fb00:	0001883a 	nop
    fb04:	00000106 	br	fb0c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    fb08:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    fb0c:	e0bff917 	ldw	r2,-28(fp)
    fb10:	10bfffec 	andhi	r2,r2,65535
    fb14:	10000f26 	beq	r2,zero,fb54 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fb18:	e0bffb17 	ldw	r2,-20(fp)
    fb1c:	10c00817 	ldw	r3,32(r2)
    fb20:	00bfff84 	movi	r2,-2
    fb24:	1886703a 	and	r3,r3,r2
    fb28:	e0bffb17 	ldw	r2,-20(fp)
    fb2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    fb30:	e0bffc17 	ldw	r2,-16(fp)
    fb34:	10800104 	addi	r2,r2,4
    fb38:	1007883a 	mov	r3,r2
    fb3c:	e0bffb17 	ldw	r2,-20(fp)
    fb40:	10800817 	ldw	r2,32(r2)
    fb44:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fb48:	e0bffc17 	ldw	r2,-16(fp)
    fb4c:	10800104 	addi	r2,r2,4
    fb50:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    fb54:	e0bffd17 	ldw	r2,-12(fp)
    fb58:	1080800c 	andi	r2,r2,512
    fb5c:	103fbe26 	beq	r2,zero,fa58 <__alt_data_end+0xfffefa58>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    fb60:	e0bffd17 	ldw	r2,-12(fp)
    fb64:	1004d43a 	srli	r2,r2,16
    fb68:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    fb6c:	00001406 	br	fbc0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    fb70:	e0bffc17 	ldw	r2,-16(fp)
    fb74:	e0fffb17 	ldw	r3,-20(fp)
    fb78:	18c00d17 	ldw	r3,52(r3)
    fb7c:	e13ffb17 	ldw	r4,-20(fp)
    fb80:	20c7883a 	add	r3,r4,r3
    fb84:	18c20e04 	addi	r3,r3,2104
    fb88:	18c00003 	ldbu	r3,0(r3)
    fb8c:	18c03fcc 	andi	r3,r3,255
    fb90:	18c0201c 	xori	r3,r3,128
    fb94:	18ffe004 	addi	r3,r3,-128
    fb98:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fb9c:	e0bffb17 	ldw	r2,-20(fp)
    fba0:	10800d17 	ldw	r2,52(r2)
    fba4:	10800044 	addi	r2,r2,1
    fba8:	10c1ffcc 	andi	r3,r2,2047
    fbac:	e0bffb17 	ldw	r2,-20(fp)
    fbb0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    fbb4:	e0bffa17 	ldw	r2,-24(fp)
    fbb8:	10bfffc4 	addi	r2,r2,-1
    fbbc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    fbc0:	e0bffa17 	ldw	r2,-24(fp)
    fbc4:	10000526 	beq	r2,zero,fbdc <altera_avalon_jtag_uart_irq+0x1a8>
    fbc8:	e0bffb17 	ldw	r2,-20(fp)
    fbcc:	10c00d17 	ldw	r3,52(r2)
    fbd0:	e0bffb17 	ldw	r2,-20(fp)
    fbd4:	10800c17 	ldw	r2,48(r2)
    fbd8:	18bfe51e 	bne	r3,r2,fb70 <__alt_data_end+0xfffefb70>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    fbdc:	e0bffa17 	ldw	r2,-24(fp)
    fbe0:	103f9d26 	beq	r2,zero,fa58 <__alt_data_end+0xfffefa58>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fbe4:	e0bffb17 	ldw	r2,-20(fp)
    fbe8:	10c00817 	ldw	r3,32(r2)
    fbec:	00bfff44 	movi	r2,-3
    fbf0:	1886703a 	and	r3,r3,r2
    fbf4:	e0bffb17 	ldw	r2,-20(fp)
    fbf8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fbfc:	e0bffb17 	ldw	r2,-20(fp)
    fc00:	10800017 	ldw	r2,0(r2)
    fc04:	10800104 	addi	r2,r2,4
    fc08:	1007883a 	mov	r3,r2
    fc0c:	e0bffb17 	ldw	r2,-20(fp)
    fc10:	10800817 	ldw	r2,32(r2)
    fc14:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fc18:	e0bffc17 	ldw	r2,-16(fp)
    fc1c:	10800104 	addi	r2,r2,4
    fc20:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    fc24:	003f8c06 	br	fa58 <__alt_data_end+0xfffefa58>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    fc28:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    fc2c:	0001883a 	nop
    fc30:	e037883a 	mov	sp,fp
    fc34:	df000017 	ldw	fp,0(sp)
    fc38:	dec00104 	addi	sp,sp,4
    fc3c:	f800283a 	ret

0000fc40 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    fc40:	defff804 	addi	sp,sp,-32
    fc44:	df000715 	stw	fp,28(sp)
    fc48:	df000704 	addi	fp,sp,28
    fc4c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    fc50:	e0bffb17 	ldw	r2,-20(fp)
    fc54:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    fc58:	e0bff917 	ldw	r2,-28(fp)
    fc5c:	10800017 	ldw	r2,0(r2)
    fc60:	10800104 	addi	r2,r2,4
    fc64:	10800037 	ldwio	r2,0(r2)
    fc68:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    fc6c:	e0bffa17 	ldw	r2,-24(fp)
    fc70:	1081000c 	andi	r2,r2,1024
    fc74:	10000b26 	beq	r2,zero,fca4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    fc78:	e0bff917 	ldw	r2,-28(fp)
    fc7c:	10800017 	ldw	r2,0(r2)
    fc80:	10800104 	addi	r2,r2,4
    fc84:	1007883a 	mov	r3,r2
    fc88:	e0bff917 	ldw	r2,-28(fp)
    fc8c:	10800817 	ldw	r2,32(r2)
    fc90:	10810014 	ori	r2,r2,1024
    fc94:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    fc98:	e0bff917 	ldw	r2,-28(fp)
    fc9c:	10000915 	stw	zero,36(r2)
    fca0:	00000a06 	br	fccc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    fca4:	e0bff917 	ldw	r2,-28(fp)
    fca8:	10c00917 	ldw	r3,36(r2)
    fcac:	00a00034 	movhi	r2,32768
    fcb0:	10bfff04 	addi	r2,r2,-4
    fcb4:	10c00536 	bltu	r2,r3,fccc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    fcb8:	e0bff917 	ldw	r2,-28(fp)
    fcbc:	10800917 	ldw	r2,36(r2)
    fcc0:	10c00044 	addi	r3,r2,1
    fcc4:	e0bff917 	ldw	r2,-28(fp)
    fcc8:	10c00915 	stw	r3,36(r2)
    fccc:	d0a6d617 	ldw	r2,-25768(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    fcd0:	e037883a 	mov	sp,fp
    fcd4:	df000017 	ldw	fp,0(sp)
    fcd8:	dec00104 	addi	sp,sp,4
    fcdc:	f800283a 	ret

0000fce0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    fce0:	defffd04 	addi	sp,sp,-12
    fce4:	df000215 	stw	fp,8(sp)
    fce8:	df000204 	addi	fp,sp,8
    fcec:	e13ffe15 	stw	r4,-8(fp)
    fcf0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fcf4:	00000506 	br	fd0c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    fcf8:	e0bfff17 	ldw	r2,-4(fp)
    fcfc:	1090000c 	andi	r2,r2,16384
    fd00:	10000226 	beq	r2,zero,fd0c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    fd04:	00bffd44 	movi	r2,-11
    fd08:	00000b06 	br	fd38 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fd0c:	e0bffe17 	ldw	r2,-8(fp)
    fd10:	10c00d17 	ldw	r3,52(r2)
    fd14:	e0bffe17 	ldw	r2,-8(fp)
    fd18:	10800c17 	ldw	r2,48(r2)
    fd1c:	18800526 	beq	r3,r2,fd34 <altera_avalon_jtag_uart_close+0x54>
    fd20:	e0bffe17 	ldw	r2,-8(fp)
    fd24:	10c00917 	ldw	r3,36(r2)
    fd28:	e0bffe17 	ldw	r2,-8(fp)
    fd2c:	10800117 	ldw	r2,4(r2)
    fd30:	18bff136 	bltu	r3,r2,fcf8 <__alt_data_end+0xfffefcf8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    fd34:	0005883a 	mov	r2,zero
}
    fd38:	e037883a 	mov	sp,fp
    fd3c:	df000017 	ldw	fp,0(sp)
    fd40:	dec00104 	addi	sp,sp,4
    fd44:	f800283a 	ret

0000fd48 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    fd48:	defffa04 	addi	sp,sp,-24
    fd4c:	df000515 	stw	fp,20(sp)
    fd50:	df000504 	addi	fp,sp,20
    fd54:	e13ffd15 	stw	r4,-12(fp)
    fd58:	e17ffe15 	stw	r5,-8(fp)
    fd5c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    fd60:	00bff9c4 	movi	r2,-25
    fd64:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    fd68:	e0bffe17 	ldw	r2,-8(fp)
    fd6c:	10da8060 	cmpeqi	r3,r2,27137
    fd70:	1800031e 	bne	r3,zero,fd80 <altera_avalon_jtag_uart_ioctl+0x38>
    fd74:	109a80a0 	cmpeqi	r2,r2,27138
    fd78:	1000181e 	bne	r2,zero,fddc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    fd7c:	00002906 	br	fe24 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    fd80:	e0bffd17 	ldw	r2,-12(fp)
    fd84:	10c00117 	ldw	r3,4(r2)
    fd88:	00a00034 	movhi	r2,32768
    fd8c:	10bfffc4 	addi	r2,r2,-1
    fd90:	18802126 	beq	r3,r2,fe18 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    fd94:	e0bfff17 	ldw	r2,-4(fp)
    fd98:	10800017 	ldw	r2,0(r2)
    fd9c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    fda0:	e0bffc17 	ldw	r2,-16(fp)
    fda4:	10800090 	cmplti	r2,r2,2
    fda8:	1000061e 	bne	r2,zero,fdc4 <altera_avalon_jtag_uart_ioctl+0x7c>
    fdac:	e0fffc17 	ldw	r3,-16(fp)
    fdb0:	00a00034 	movhi	r2,32768
    fdb4:	10bfffc4 	addi	r2,r2,-1
    fdb8:	18800226 	beq	r3,r2,fdc4 <altera_avalon_jtag_uart_ioctl+0x7c>
    fdbc:	e0bffc17 	ldw	r2,-16(fp)
    fdc0:	00000206 	br	fdcc <altera_avalon_jtag_uart_ioctl+0x84>
    fdc4:	00a00034 	movhi	r2,32768
    fdc8:	10bfff84 	addi	r2,r2,-2
    fdcc:	e0fffd17 	ldw	r3,-12(fp)
    fdd0:	18800115 	stw	r2,4(r3)
      rc = 0;
    fdd4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fdd8:	00000f06 	br	fe18 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    fddc:	e0bffd17 	ldw	r2,-12(fp)
    fde0:	10c00117 	ldw	r3,4(r2)
    fde4:	00a00034 	movhi	r2,32768
    fde8:	10bfffc4 	addi	r2,r2,-1
    fdec:	18800c26 	beq	r3,r2,fe20 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    fdf0:	e0bffd17 	ldw	r2,-12(fp)
    fdf4:	10c00917 	ldw	r3,36(r2)
    fdf8:	e0bffd17 	ldw	r2,-12(fp)
    fdfc:	10800117 	ldw	r2,4(r2)
    fe00:	1885803a 	cmpltu	r2,r3,r2
    fe04:	10c03fcc 	andi	r3,r2,255
    fe08:	e0bfff17 	ldw	r2,-4(fp)
    fe0c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    fe10:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fe14:	00000206 	br	fe20 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    fe18:	0001883a 	nop
    fe1c:	00000106 	br	fe24 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    fe20:	0001883a 	nop

  default:
    break;
  }

  return rc;
    fe24:	e0bffb17 	ldw	r2,-20(fp)
}
    fe28:	e037883a 	mov	sp,fp
    fe2c:	df000017 	ldw	fp,0(sp)
    fe30:	dec00104 	addi	sp,sp,4
    fe34:	f800283a 	ret

0000fe38 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fe38:	defff304 	addi	sp,sp,-52
    fe3c:	dfc00c15 	stw	ra,48(sp)
    fe40:	df000b15 	stw	fp,44(sp)
    fe44:	df000b04 	addi	fp,sp,44
    fe48:	e13ffc15 	stw	r4,-16(fp)
    fe4c:	e17ffd15 	stw	r5,-12(fp)
    fe50:	e1bffe15 	stw	r6,-8(fp)
    fe54:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fe58:	e0bffd17 	ldw	r2,-12(fp)
    fe5c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fe60:	00004706 	br	ff80 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fe64:	e0bffc17 	ldw	r2,-16(fp)
    fe68:	10800a17 	ldw	r2,40(r2)
    fe6c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fe70:	e0bffc17 	ldw	r2,-16(fp)
    fe74:	10800b17 	ldw	r2,44(r2)
    fe78:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fe7c:	e0fff717 	ldw	r3,-36(fp)
    fe80:	e0bff817 	ldw	r2,-32(fp)
    fe84:	18800536 	bltu	r3,r2,fe9c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    fe88:	e0fff717 	ldw	r3,-36(fp)
    fe8c:	e0bff817 	ldw	r2,-32(fp)
    fe90:	1885c83a 	sub	r2,r3,r2
    fe94:	e0bff615 	stw	r2,-40(fp)
    fe98:	00000406 	br	feac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fe9c:	00c20004 	movi	r3,2048
    fea0:	e0bff817 	ldw	r2,-32(fp)
    fea4:	1885c83a 	sub	r2,r3,r2
    fea8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    feac:	e0bff617 	ldw	r2,-40(fp)
    feb0:	10001e26 	beq	r2,zero,ff2c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    feb4:	e0fffe17 	ldw	r3,-8(fp)
    feb8:	e0bff617 	ldw	r2,-40(fp)
    febc:	1880022e 	bgeu	r3,r2,fec8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    fec0:	e0bffe17 	ldw	r2,-8(fp)
    fec4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fec8:	e0bffc17 	ldw	r2,-16(fp)
    fecc:	10c00e04 	addi	r3,r2,56
    fed0:	e0bff817 	ldw	r2,-32(fp)
    fed4:	1885883a 	add	r2,r3,r2
    fed8:	e1bff617 	ldw	r6,-40(fp)
    fedc:	100b883a 	mov	r5,r2
    fee0:	e13ff517 	ldw	r4,-44(fp)
    fee4:	00056500 	call	5650 <memcpy>
      ptr   += n;
    fee8:	e0fff517 	ldw	r3,-44(fp)
    feec:	e0bff617 	ldw	r2,-40(fp)
    fef0:	1885883a 	add	r2,r3,r2
    fef4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    fef8:	e0fffe17 	ldw	r3,-8(fp)
    fefc:	e0bff617 	ldw	r2,-40(fp)
    ff00:	1885c83a 	sub	r2,r3,r2
    ff04:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ff08:	e0fff817 	ldw	r3,-32(fp)
    ff0c:	e0bff617 	ldw	r2,-40(fp)
    ff10:	1885883a 	add	r2,r3,r2
    ff14:	10c1ffcc 	andi	r3,r2,2047
    ff18:	e0bffc17 	ldw	r2,-16(fp)
    ff1c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    ff20:	e0bffe17 	ldw	r2,-8(fp)
    ff24:	00bfcf16 	blt	zero,r2,fe64 <__alt_data_end+0xfffefe64>
    ff28:	00000106 	br	ff30 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    ff2c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    ff30:	e0fff517 	ldw	r3,-44(fp)
    ff34:	e0bffd17 	ldw	r2,-12(fp)
    ff38:	1880141e 	bne	r3,r2,ff8c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ff3c:	e0bfff17 	ldw	r2,-4(fp)
    ff40:	1090000c 	andi	r2,r2,16384
    ff44:	1000131e 	bne	r2,zero,ff94 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    ff48:	0001883a 	nop
    ff4c:	e0bffc17 	ldw	r2,-16(fp)
    ff50:	10c00a17 	ldw	r3,40(r2)
    ff54:	e0bff717 	ldw	r2,-36(fp)
    ff58:	1880051e 	bne	r3,r2,ff70 <altera_avalon_jtag_uart_read+0x138>
    ff5c:	e0bffc17 	ldw	r2,-16(fp)
    ff60:	10c00917 	ldw	r3,36(r2)
    ff64:	e0bffc17 	ldw	r2,-16(fp)
    ff68:	10800117 	ldw	r2,4(r2)
    ff6c:	18bff736 	bltu	r3,r2,ff4c <__alt_data_end+0xfffeff4c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ff70:	e0bffc17 	ldw	r2,-16(fp)
    ff74:	10c00a17 	ldw	r3,40(r2)
    ff78:	e0bff717 	ldw	r2,-36(fp)
    ff7c:	18800726 	beq	r3,r2,ff9c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ff80:	e0bffe17 	ldw	r2,-8(fp)
    ff84:	00bfb716 	blt	zero,r2,fe64 <__alt_data_end+0xfffefe64>
    ff88:	00000506 	br	ffa0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    ff8c:	0001883a 	nop
    ff90:	00000306 	br	ffa0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    ff94:	0001883a 	nop
    ff98:	00000106 	br	ffa0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    ff9c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ffa0:	e0fff517 	ldw	r3,-44(fp)
    ffa4:	e0bffd17 	ldw	r2,-12(fp)
    ffa8:	18801826 	beq	r3,r2,1000c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ffac:	0005303a 	rdctl	r2,status
    ffb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ffb4:	e0fffb17 	ldw	r3,-20(fp)
    ffb8:	00bfff84 	movi	r2,-2
    ffbc:	1884703a 	and	r2,r3,r2
    ffc0:	1001703a 	wrctl	status,r2
  
  return context;
    ffc4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ffc8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ffcc:	e0bffc17 	ldw	r2,-16(fp)
    ffd0:	10800817 	ldw	r2,32(r2)
    ffd4:	10c00054 	ori	r3,r2,1
    ffd8:	e0bffc17 	ldw	r2,-16(fp)
    ffdc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ffe0:	e0bffc17 	ldw	r2,-16(fp)
    ffe4:	10800017 	ldw	r2,0(r2)
    ffe8:	10800104 	addi	r2,r2,4
    ffec:	1007883a 	mov	r3,r2
    fff0:	e0bffc17 	ldw	r2,-16(fp)
    fff4:	10800817 	ldw	r2,32(r2)
    fff8:	18800035 	stwio	r2,0(r3)
    fffc:	e0bffa17 	ldw	r2,-24(fp)
   10000:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10004:	e0bff917 	ldw	r2,-28(fp)
   10008:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1000c:	e0fff517 	ldw	r3,-44(fp)
   10010:	e0bffd17 	ldw	r2,-12(fp)
   10014:	18800426 	beq	r3,r2,10028 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10018:	e0fff517 	ldw	r3,-44(fp)
   1001c:	e0bffd17 	ldw	r2,-12(fp)
   10020:	1885c83a 	sub	r2,r3,r2
   10024:	00000606 	br	10040 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10028:	e0bfff17 	ldw	r2,-4(fp)
   1002c:	1090000c 	andi	r2,r2,16384
   10030:	10000226 	beq	r2,zero,1003c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10034:	00bffd44 	movi	r2,-11
   10038:	00000106 	br	10040 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1003c:	00bffec4 	movi	r2,-5
}
   10040:	e037883a 	mov	sp,fp
   10044:	dfc00117 	ldw	ra,4(sp)
   10048:	df000017 	ldw	fp,0(sp)
   1004c:	dec00204 	addi	sp,sp,8
   10050:	f800283a 	ret

00010054 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10054:	defff304 	addi	sp,sp,-52
   10058:	dfc00c15 	stw	ra,48(sp)
   1005c:	df000b15 	stw	fp,44(sp)
   10060:	df000b04 	addi	fp,sp,44
   10064:	e13ffc15 	stw	r4,-16(fp)
   10068:	e17ffd15 	stw	r5,-12(fp)
   1006c:	e1bffe15 	stw	r6,-8(fp)
   10070:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10074:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10078:	e0bffd17 	ldw	r2,-12(fp)
   1007c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10080:	00003706 	br	10160 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10084:	e0bffc17 	ldw	r2,-16(fp)
   10088:	10800c17 	ldw	r2,48(r2)
   1008c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   10090:	e0bffc17 	ldw	r2,-16(fp)
   10094:	10800d17 	ldw	r2,52(r2)
   10098:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1009c:	e0fff917 	ldw	r3,-28(fp)
   100a0:	e0bff517 	ldw	r2,-44(fp)
   100a4:	1880062e 	bgeu	r3,r2,100c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   100a8:	e0fff517 	ldw	r3,-44(fp)
   100ac:	e0bff917 	ldw	r2,-28(fp)
   100b0:	1885c83a 	sub	r2,r3,r2
   100b4:	10bfffc4 	addi	r2,r2,-1
   100b8:	e0bff615 	stw	r2,-40(fp)
   100bc:	00000b06 	br	100ec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   100c0:	e0bff517 	ldw	r2,-44(fp)
   100c4:	10000526 	beq	r2,zero,100dc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   100c8:	00c20004 	movi	r3,2048
   100cc:	e0bff917 	ldw	r2,-28(fp)
   100d0:	1885c83a 	sub	r2,r3,r2
   100d4:	e0bff615 	stw	r2,-40(fp)
   100d8:	00000406 	br	100ec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   100dc:	00c1ffc4 	movi	r3,2047
   100e0:	e0bff917 	ldw	r2,-28(fp)
   100e4:	1885c83a 	sub	r2,r3,r2
   100e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   100ec:	e0bff617 	ldw	r2,-40(fp)
   100f0:	10001e26 	beq	r2,zero,1016c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   100f4:	e0fffe17 	ldw	r3,-8(fp)
   100f8:	e0bff617 	ldw	r2,-40(fp)
   100fc:	1880022e 	bgeu	r3,r2,10108 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10100:	e0bffe17 	ldw	r2,-8(fp)
   10104:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10108:	e0bffc17 	ldw	r2,-16(fp)
   1010c:	10c20e04 	addi	r3,r2,2104
   10110:	e0bff917 	ldw	r2,-28(fp)
   10114:	1885883a 	add	r2,r3,r2
   10118:	e1bff617 	ldw	r6,-40(fp)
   1011c:	e17ffd17 	ldw	r5,-12(fp)
   10120:	1009883a 	mov	r4,r2
   10124:	00056500 	call	5650 <memcpy>
      ptr   += n;
   10128:	e0fffd17 	ldw	r3,-12(fp)
   1012c:	e0bff617 	ldw	r2,-40(fp)
   10130:	1885883a 	add	r2,r3,r2
   10134:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10138:	e0fffe17 	ldw	r3,-8(fp)
   1013c:	e0bff617 	ldw	r2,-40(fp)
   10140:	1885c83a 	sub	r2,r3,r2
   10144:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10148:	e0fff917 	ldw	r3,-28(fp)
   1014c:	e0bff617 	ldw	r2,-40(fp)
   10150:	1885883a 	add	r2,r3,r2
   10154:	10c1ffcc 	andi	r3,r2,2047
   10158:	e0bffc17 	ldw	r2,-16(fp)
   1015c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10160:	e0bffe17 	ldw	r2,-8(fp)
   10164:	00bfc716 	blt	zero,r2,10084 <__alt_data_end+0xffff0084>
   10168:	00000106 	br	10170 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1016c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10170:	0005303a 	rdctl	r2,status
   10174:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10178:	e0fffb17 	ldw	r3,-20(fp)
   1017c:	00bfff84 	movi	r2,-2
   10180:	1884703a 	and	r2,r3,r2
   10184:	1001703a 	wrctl	status,r2
  
  return context;
   10188:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1018c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	10800817 	ldw	r2,32(r2)
   10198:	10c00094 	ori	r3,r2,2
   1019c:	e0bffc17 	ldw	r2,-16(fp)
   101a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   101a4:	e0bffc17 	ldw	r2,-16(fp)
   101a8:	10800017 	ldw	r2,0(r2)
   101ac:	10800104 	addi	r2,r2,4
   101b0:	1007883a 	mov	r3,r2
   101b4:	e0bffc17 	ldw	r2,-16(fp)
   101b8:	10800817 	ldw	r2,32(r2)
   101bc:	18800035 	stwio	r2,0(r3)
   101c0:	e0bffa17 	ldw	r2,-24(fp)
   101c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101c8:	e0bff817 	ldw	r2,-32(fp)
   101cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   101d0:	e0bffe17 	ldw	r2,-8(fp)
   101d4:	0080100e 	bge	zero,r2,10218 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   101d8:	e0bfff17 	ldw	r2,-4(fp)
   101dc:	1090000c 	andi	r2,r2,16384
   101e0:	1000101e 	bne	r2,zero,10224 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   101e4:	0001883a 	nop
   101e8:	e0bffc17 	ldw	r2,-16(fp)
   101ec:	10c00d17 	ldw	r3,52(r2)
   101f0:	e0bff517 	ldw	r2,-44(fp)
   101f4:	1880051e 	bne	r3,r2,1020c <altera_avalon_jtag_uart_write+0x1b8>
   101f8:	e0bffc17 	ldw	r2,-16(fp)
   101fc:	10c00917 	ldw	r3,36(r2)
   10200:	e0bffc17 	ldw	r2,-16(fp)
   10204:	10800117 	ldw	r2,4(r2)
   10208:	18bff736 	bltu	r3,r2,101e8 <__alt_data_end+0xffff01e8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1020c:	e0bffc17 	ldw	r2,-16(fp)
   10210:	10800917 	ldw	r2,36(r2)
   10214:	1000051e 	bne	r2,zero,1022c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   10218:	e0bffe17 	ldw	r2,-8(fp)
   1021c:	00bfd016 	blt	zero,r2,10160 <__alt_data_end+0xffff0160>
   10220:	00000306 	br	10230 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10224:	0001883a 	nop
   10228:	00000106 	br	10230 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1022c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10230:	e0fffd17 	ldw	r3,-12(fp)
   10234:	e0bff717 	ldw	r2,-36(fp)
   10238:	18800426 	beq	r3,r2,1024c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1023c:	e0fffd17 	ldw	r3,-12(fp)
   10240:	e0bff717 	ldw	r2,-36(fp)
   10244:	1885c83a 	sub	r2,r3,r2
   10248:	00000606 	br	10264 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1024c:	e0bfff17 	ldw	r2,-4(fp)
   10250:	1090000c 	andi	r2,r2,16384
   10254:	10000226 	beq	r2,zero,10260 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   10258:	00bffd44 	movi	r2,-11
   1025c:	00000106 	br	10264 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10260:	00bffec4 	movi	r2,-5
}
   10264:	e037883a 	mov	sp,fp
   10268:	dfc00117 	ldw	ra,4(sp)
   1026c:	df000017 	ldw	fp,0(sp)
   10270:	dec00204 	addi	sp,sp,8
   10274:	f800283a 	ret

00010278 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10278:	defffa04 	addi	sp,sp,-24
   1027c:	dfc00515 	stw	ra,20(sp)
   10280:	df000415 	stw	fp,16(sp)
   10284:	df000404 	addi	fp,sp,16
   10288:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1028c:	0007883a 	mov	r3,zero
   10290:	e0bfff17 	ldw	r2,-4(fp)
   10294:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10298:	e0bfff17 	ldw	r2,-4(fp)
   1029c:	10800104 	addi	r2,r2,4
   102a0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102a4:	0005303a 	rdctl	r2,status
   102a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102ac:	e0fffd17 	ldw	r3,-12(fp)
   102b0:	00bfff84 	movi	r2,-2
   102b4:	1884703a 	and	r2,r3,r2
   102b8:	1001703a 	wrctl	status,r2
  
  return context;
   102bc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   102c0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   102c4:	0010d700 	call	10d70 <alt_tick>
   102c8:	e0bffc17 	ldw	r2,-16(fp)
   102cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   102d0:	e0bffe17 	ldw	r2,-8(fp)
   102d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   102d8:	0001883a 	nop
   102dc:	e037883a 	mov	sp,fp
   102e0:	dfc00117 	ldw	ra,4(sp)
   102e4:	df000017 	ldw	fp,0(sp)
   102e8:	dec00204 	addi	sp,sp,8
   102ec:	f800283a 	ret

000102f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   102f0:	defff804 	addi	sp,sp,-32
   102f4:	dfc00715 	stw	ra,28(sp)
   102f8:	df000615 	stw	fp,24(sp)
   102fc:	df000604 	addi	fp,sp,24
   10300:	e13ffc15 	stw	r4,-16(fp)
   10304:	e17ffd15 	stw	r5,-12(fp)
   10308:	e1bffe15 	stw	r6,-8(fp)
   1030c:	e1ffff15 	stw	r7,-4(fp)
   10310:	e0bfff17 	ldw	r2,-4(fp)
   10314:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10318:	d0a6d617 	ldw	r2,-25768(gp)
   1031c:	1000021e 	bne	r2,zero,10328 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10320:	e0bffb17 	ldw	r2,-20(fp)
   10324:	d0a6d615 	stw	r2,-25768(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10328:	e0bffc17 	ldw	r2,-16(fp)
   1032c:	10800104 	addi	r2,r2,4
   10330:	00c001c4 	movi	r3,7
   10334:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10338:	d8000015 	stw	zero,0(sp)
   1033c:	e1fffc17 	ldw	r7,-16(fp)
   10340:	01800074 	movhi	r6,1
   10344:	31809e04 	addi	r6,r6,632
   10348:	e17ffe17 	ldw	r5,-8(fp)
   1034c:	e13ffd17 	ldw	r4,-12(fp)
   10350:	00108d40 	call	108d4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10354:	0001883a 	nop
   10358:	e037883a 	mov	sp,fp
   1035c:	dfc00117 	ldw	ra,4(sp)
   10360:	df000017 	ldw	fp,0(sp)
   10364:	dec00204 	addi	sp,sp,8
   10368:	f800283a 	ret

0001036c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1036c:	defff504 	addi	sp,sp,-44
   10370:	df000a15 	stw	fp,40(sp)
   10374:	df000a04 	addi	fp,sp,40
   10378:	e13ffc15 	stw	r4,-16(fp)
   1037c:	e17ffd15 	stw	r5,-12(fp)
   10380:	e1bffe15 	stw	r6,-8(fp)
   10384:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10388:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1038c:	d0a6d617 	ldw	r2,-25768(gp)
  
  if (alt_ticks_per_second ())
   10390:	10003c26 	beq	r2,zero,10484 <alt_alarm_start+0x118>
  {
    if (alarm)
   10394:	e0bffc17 	ldw	r2,-16(fp)
   10398:	10003826 	beq	r2,zero,1047c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1039c:	e0bffc17 	ldw	r2,-16(fp)
   103a0:	e0fffe17 	ldw	r3,-8(fp)
   103a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   103a8:	e0bffc17 	ldw	r2,-16(fp)
   103ac:	e0ffff17 	ldw	r3,-4(fp)
   103b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   103b4:	0005303a 	rdctl	r2,status
   103b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   103bc:	e0fff917 	ldw	r3,-28(fp)
   103c0:	00bfff84 	movi	r2,-2
   103c4:	1884703a 	and	r2,r3,r2
   103c8:	1001703a 	wrctl	status,r2
  
  return context;
   103cc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   103d0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   103d4:	d0a6d717 	ldw	r2,-25764(gp)
      
      current_nticks = alt_nticks();
   103d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   103dc:	e0fffd17 	ldw	r3,-12(fp)
   103e0:	e0bff617 	ldw	r2,-40(fp)
   103e4:	1885883a 	add	r2,r3,r2
   103e8:	10c00044 	addi	r3,r2,1
   103ec:	e0bffc17 	ldw	r2,-16(fp)
   103f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   103f4:	e0bffc17 	ldw	r2,-16(fp)
   103f8:	10c00217 	ldw	r3,8(r2)
   103fc:	e0bff617 	ldw	r2,-40(fp)
   10400:	1880042e 	bgeu	r3,r2,10414 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10404:	e0bffc17 	ldw	r2,-16(fp)
   10408:	00c00044 	movi	r3,1
   1040c:	10c00405 	stb	r3,16(r2)
   10410:	00000206 	br	1041c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10414:	e0bffc17 	ldw	r2,-16(fp)
   10418:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1041c:	e0bffc17 	ldw	r2,-16(fp)
   10420:	d0e00e04 	addi	r3,gp,-32712
   10424:	e0fffa15 	stw	r3,-24(fp)
   10428:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1042c:	e0bffb17 	ldw	r2,-20(fp)
   10430:	e0fffa17 	ldw	r3,-24(fp)
   10434:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10438:	e0bffa17 	ldw	r2,-24(fp)
   1043c:	10c00017 	ldw	r3,0(r2)
   10440:	e0bffb17 	ldw	r2,-20(fp)
   10444:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10448:	e0bffa17 	ldw	r2,-24(fp)
   1044c:	10800017 	ldw	r2,0(r2)
   10450:	e0fffb17 	ldw	r3,-20(fp)
   10454:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10458:	e0bffa17 	ldw	r2,-24(fp)
   1045c:	e0fffb17 	ldw	r3,-20(fp)
   10460:	10c00015 	stw	r3,0(r2)
   10464:	e0bff817 	ldw	r2,-32(fp)
   10468:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1046c:	e0bff717 	ldw	r2,-36(fp)
   10470:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10474:	0005883a 	mov	r2,zero
   10478:	00000306 	br	10488 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1047c:	00bffa84 	movi	r2,-22
   10480:	00000106 	br	10488 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10484:	00bfde84 	movi	r2,-134
  }
}
   10488:	e037883a 	mov	sp,fp
   1048c:	df000017 	ldw	fp,0(sp)
   10490:	dec00104 	addi	sp,sp,4
   10494:	f800283a 	ret

00010498 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10498:	deffff04 	addi	sp,sp,-4
   1049c:	df000015 	stw	fp,0(sp)
   104a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   104a4:	0001883a 	nop
   104a8:	e037883a 	mov	sp,fp
   104ac:	df000017 	ldw	fp,0(sp)
   104b0:	dec00104 	addi	sp,sp,4
   104b4:	f800283a 	ret

000104b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   104b8:	defffe04 	addi	sp,sp,-8
   104bc:	dfc00115 	stw	ra,4(sp)
   104c0:	df000015 	stw	fp,0(sp)
   104c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   104c8:	d0a00b17 	ldw	r2,-32724(gp)
   104cc:	10000326 	beq	r2,zero,104dc <alt_get_errno+0x24>
   104d0:	d0a00b17 	ldw	r2,-32724(gp)
   104d4:	103ee83a 	callr	r2
   104d8:	00000106 	br	104e0 <alt_get_errno+0x28>
   104dc:	d0a6cb04 	addi	r2,gp,-25812
}
   104e0:	e037883a 	mov	sp,fp
   104e4:	dfc00117 	ldw	ra,4(sp)
   104e8:	df000017 	ldw	fp,0(sp)
   104ec:	dec00204 	addi	sp,sp,8
   104f0:	f800283a 	ret

000104f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   104f4:	defffa04 	addi	sp,sp,-24
   104f8:	dfc00515 	stw	ra,20(sp)
   104fc:	df000415 	stw	fp,16(sp)
   10500:	df000404 	addi	fp,sp,16
   10504:	e13ffe15 	stw	r4,-8(fp)
   10508:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1050c:	e0bffe17 	ldw	r2,-8(fp)
   10510:	10000326 	beq	r2,zero,10520 <alt_dev_llist_insert+0x2c>
   10514:	e0bffe17 	ldw	r2,-8(fp)
   10518:	10800217 	ldw	r2,8(r2)
   1051c:	1000061e 	bne	r2,zero,10538 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10520:	00104b80 	call	104b8 <alt_get_errno>
   10524:	1007883a 	mov	r3,r2
   10528:	00800584 	movi	r2,22
   1052c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10530:	00bffa84 	movi	r2,-22
   10534:	00001306 	br	10584 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10538:	e0bffe17 	ldw	r2,-8(fp)
   1053c:	e0ffff17 	ldw	r3,-4(fp)
   10540:	e0fffc15 	stw	r3,-16(fp)
   10544:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10548:	e0bffd17 	ldw	r2,-12(fp)
   1054c:	e0fffc17 	ldw	r3,-16(fp)
   10550:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10554:	e0bffc17 	ldw	r2,-16(fp)
   10558:	10c00017 	ldw	r3,0(r2)
   1055c:	e0bffd17 	ldw	r2,-12(fp)
   10560:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10564:	e0bffc17 	ldw	r2,-16(fp)
   10568:	10800017 	ldw	r2,0(r2)
   1056c:	e0fffd17 	ldw	r3,-12(fp)
   10570:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10574:	e0bffc17 	ldw	r2,-16(fp)
   10578:	e0fffd17 	ldw	r3,-12(fp)
   1057c:	10c00015 	stw	r3,0(r2)

  return 0;  
   10580:	0005883a 	mov	r2,zero
}
   10584:	e037883a 	mov	sp,fp
   10588:	dfc00117 	ldw	ra,4(sp)
   1058c:	df000017 	ldw	fp,0(sp)
   10590:	dec00204 	addi	sp,sp,8
   10594:	f800283a 	ret

00010598 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10598:	defffd04 	addi	sp,sp,-12
   1059c:	dfc00215 	stw	ra,8(sp)
   105a0:	df000115 	stw	fp,4(sp)
   105a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   105a8:	00800074 	movhi	r2,1
   105ac:	10843704 	addi	r2,r2,4316
   105b0:	e0bfff15 	stw	r2,-4(fp)
   105b4:	00000606 	br	105d0 <_do_ctors+0x38>
        (*ctor) (); 
   105b8:	e0bfff17 	ldw	r2,-4(fp)
   105bc:	10800017 	ldw	r2,0(r2)
   105c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   105c4:	e0bfff17 	ldw	r2,-4(fp)
   105c8:	10bfff04 	addi	r2,r2,-4
   105cc:	e0bfff15 	stw	r2,-4(fp)
   105d0:	e0ffff17 	ldw	r3,-4(fp)
   105d4:	00800074 	movhi	r2,1
   105d8:	10843804 	addi	r2,r2,4320
   105dc:	18bff62e 	bgeu	r3,r2,105b8 <__alt_data_end+0xffff05b8>
        (*ctor) (); 
}
   105e0:	0001883a 	nop
   105e4:	e037883a 	mov	sp,fp
   105e8:	dfc00117 	ldw	ra,4(sp)
   105ec:	df000017 	ldw	fp,0(sp)
   105f0:	dec00204 	addi	sp,sp,8
   105f4:	f800283a 	ret

000105f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   105f8:	defffd04 	addi	sp,sp,-12
   105fc:	dfc00215 	stw	ra,8(sp)
   10600:	df000115 	stw	fp,4(sp)
   10604:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10608:	00800074 	movhi	r2,1
   1060c:	10843704 	addi	r2,r2,4316
   10610:	e0bfff15 	stw	r2,-4(fp)
   10614:	00000606 	br	10630 <_do_dtors+0x38>
        (*dtor) (); 
   10618:	e0bfff17 	ldw	r2,-4(fp)
   1061c:	10800017 	ldw	r2,0(r2)
   10620:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10624:	e0bfff17 	ldw	r2,-4(fp)
   10628:	10bfff04 	addi	r2,r2,-4
   1062c:	e0bfff15 	stw	r2,-4(fp)
   10630:	e0ffff17 	ldw	r3,-4(fp)
   10634:	00800074 	movhi	r2,1
   10638:	10843804 	addi	r2,r2,4320
   1063c:	18bff62e 	bgeu	r3,r2,10618 <__alt_data_end+0xffff0618>
        (*dtor) (); 
}
   10640:	0001883a 	nop
   10644:	e037883a 	mov	sp,fp
   10648:	dfc00117 	ldw	ra,4(sp)
   1064c:	df000017 	ldw	fp,0(sp)
   10650:	dec00204 	addi	sp,sp,8
   10654:	f800283a 	ret

00010658 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10658:	defffa04 	addi	sp,sp,-24
   1065c:	dfc00515 	stw	ra,20(sp)
   10660:	df000415 	stw	fp,16(sp)
   10664:	df000404 	addi	fp,sp,16
   10668:	e13ffe15 	stw	r4,-8(fp)
   1066c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10670:	e0bfff17 	ldw	r2,-4(fp)
   10674:	10800017 	ldw	r2,0(r2)
   10678:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1067c:	e13ffe17 	ldw	r4,-8(fp)
   10680:	0005de00 	call	5de0 <strlen>
   10684:	10800044 	addi	r2,r2,1
   10688:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1068c:	00000d06 	br	106c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10690:	e0bffc17 	ldw	r2,-16(fp)
   10694:	10800217 	ldw	r2,8(r2)
   10698:	e0fffd17 	ldw	r3,-12(fp)
   1069c:	180d883a 	mov	r6,r3
   106a0:	e17ffe17 	ldw	r5,-8(fp)
   106a4:	1009883a 	mov	r4,r2
   106a8:	0010f4c0 	call	10f4c <memcmp>
   106ac:	1000021e 	bne	r2,zero,106b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   106b0:	e0bffc17 	ldw	r2,-16(fp)
   106b4:	00000706 	br	106d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   106b8:	e0bffc17 	ldw	r2,-16(fp)
   106bc:	10800017 	ldw	r2,0(r2)
   106c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   106c4:	e0fffc17 	ldw	r3,-16(fp)
   106c8:	e0bfff17 	ldw	r2,-4(fp)
   106cc:	18bff01e 	bne	r3,r2,10690 <__alt_data_end+0xffff0690>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   106d0:	0005883a 	mov	r2,zero
}
   106d4:	e037883a 	mov	sp,fp
   106d8:	dfc00117 	ldw	ra,4(sp)
   106dc:	df000017 	ldw	fp,0(sp)
   106e0:	dec00204 	addi	sp,sp,8
   106e4:	f800283a 	ret

000106e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   106e8:	defffb04 	addi	sp,sp,-20
   106ec:	dfc00415 	stw	ra,16(sp)
   106f0:	df000315 	stw	fp,12(sp)
   106f4:	df000304 	addi	fp,sp,12
   106f8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   106fc:	d0a00617 	ldw	r2,-32744(gp)
   10700:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10704:	00003106 	br	107cc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10708:	e0bffd17 	ldw	r2,-12(fp)
   1070c:	10800217 	ldw	r2,8(r2)
   10710:	1009883a 	mov	r4,r2
   10714:	0005de00 	call	5de0 <strlen>
   10718:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1071c:	e0bffd17 	ldw	r2,-12(fp)
   10720:	10c00217 	ldw	r3,8(r2)
   10724:	e0bffe17 	ldw	r2,-8(fp)
   10728:	10bfffc4 	addi	r2,r2,-1
   1072c:	1885883a 	add	r2,r3,r2
   10730:	10800003 	ldbu	r2,0(r2)
   10734:	10803fcc 	andi	r2,r2,255
   10738:	1080201c 	xori	r2,r2,128
   1073c:	10bfe004 	addi	r2,r2,-128
   10740:	10800bd8 	cmpnei	r2,r2,47
   10744:	1000031e 	bne	r2,zero,10754 <alt_find_file+0x6c>
    {
      len -= 1;
   10748:	e0bffe17 	ldw	r2,-8(fp)
   1074c:	10bfffc4 	addi	r2,r2,-1
   10750:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10754:	e0bffe17 	ldw	r2,-8(fp)
   10758:	e0ffff17 	ldw	r3,-4(fp)
   1075c:	1885883a 	add	r2,r3,r2
   10760:	10800003 	ldbu	r2,0(r2)
   10764:	10803fcc 	andi	r2,r2,255
   10768:	1080201c 	xori	r2,r2,128
   1076c:	10bfe004 	addi	r2,r2,-128
   10770:	10800be0 	cmpeqi	r2,r2,47
   10774:	1000081e 	bne	r2,zero,10798 <alt_find_file+0xb0>
   10778:	e0bffe17 	ldw	r2,-8(fp)
   1077c:	e0ffff17 	ldw	r3,-4(fp)
   10780:	1885883a 	add	r2,r3,r2
   10784:	10800003 	ldbu	r2,0(r2)
   10788:	10803fcc 	andi	r2,r2,255
   1078c:	1080201c 	xori	r2,r2,128
   10790:	10bfe004 	addi	r2,r2,-128
   10794:	10000a1e 	bne	r2,zero,107c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10798:	e0bffd17 	ldw	r2,-12(fp)
   1079c:	10800217 	ldw	r2,8(r2)
   107a0:	e0fffe17 	ldw	r3,-8(fp)
   107a4:	180d883a 	mov	r6,r3
   107a8:	e17fff17 	ldw	r5,-4(fp)
   107ac:	1009883a 	mov	r4,r2
   107b0:	0010f4c0 	call	10f4c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   107b4:	1000021e 	bne	r2,zero,107c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   107b8:	e0bffd17 	ldw	r2,-12(fp)
   107bc:	00000706 	br	107dc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   107c0:	e0bffd17 	ldw	r2,-12(fp)
   107c4:	10800017 	ldw	r2,0(r2)
   107c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   107cc:	e0fffd17 	ldw	r3,-12(fp)
   107d0:	d0a00604 	addi	r2,gp,-32744
   107d4:	18bfcc1e 	bne	r3,r2,10708 <__alt_data_end+0xffff0708>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   107d8:	0005883a 	mov	r2,zero
}
   107dc:	e037883a 	mov	sp,fp
   107e0:	dfc00117 	ldw	ra,4(sp)
   107e4:	df000017 	ldw	fp,0(sp)
   107e8:	dec00204 	addi	sp,sp,8
   107ec:	f800283a 	ret

000107f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   107f0:	defffa04 	addi	sp,sp,-24
   107f4:	dfc00515 	stw	ra,20(sp)
   107f8:	df000415 	stw	fp,16(sp)
   107fc:	dc000315 	stw	r16,12(sp)
   10800:	df000404 	addi	fp,sp,16
   10804:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   10808:	00bffa04 	movi	r2,-24
   1080c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10810:	e03ffc15 	stw	zero,-16(fp)
   10814:	00001d06 	br	1088c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   10818:	04000074 	movhi	r16,1
   1081c:	84076c04 	addi	r16,r16,7600
   10820:	e0bffc17 	ldw	r2,-16(fp)
   10824:	01400304 	movi	r5,12
   10828:	1009883a 	mov	r4,r2
   1082c:	0000f040 	call	f04 <__mulsi3>
   10830:	8085883a 	add	r2,r16,r2
   10834:	10800017 	ldw	r2,0(r2)
   10838:	1000111e 	bne	r2,zero,10880 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   1083c:	04000074 	movhi	r16,1
   10840:	84076c04 	addi	r16,r16,7600
   10844:	e0bffc17 	ldw	r2,-16(fp)
   10848:	01400304 	movi	r5,12
   1084c:	1009883a 	mov	r4,r2
   10850:	0000f040 	call	f04 <__mulsi3>
   10854:	8085883a 	add	r2,r16,r2
   10858:	e0fffe17 	ldw	r3,-8(fp)
   1085c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10860:	d0e00a17 	ldw	r3,-32728(gp)
   10864:	e0bffc17 	ldw	r2,-16(fp)
   10868:	1880020e 	bge	r3,r2,10874 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   1086c:	e0bffc17 	ldw	r2,-16(fp)
   10870:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   10874:	e0bffc17 	ldw	r2,-16(fp)
   10878:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1087c:	00000606 	br	10898 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10880:	e0bffc17 	ldw	r2,-16(fp)
   10884:	10800044 	addi	r2,r2,1
   10888:	e0bffc15 	stw	r2,-16(fp)
   1088c:	e0bffc17 	ldw	r2,-16(fp)
   10890:	10800810 	cmplti	r2,r2,32
   10894:	103fe01e 	bne	r2,zero,10818 <__alt_data_end+0xffff0818>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10898:	e0bffd17 	ldw	r2,-12(fp)
}
   1089c:	e6ffff04 	addi	sp,fp,-4
   108a0:	dfc00217 	ldw	ra,8(sp)
   108a4:	df000117 	ldw	fp,4(sp)
   108a8:	dc000017 	ldw	r16,0(sp)
   108ac:	dec00304 	addi	sp,sp,12
   108b0:	f800283a 	ret

000108b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   108b4:	deffff04 	addi	sp,sp,-4
   108b8:	df000015 	stw	fp,0(sp)
   108bc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   108c0:	0001883a 	nop
   108c4:	e037883a 	mov	sp,fp
   108c8:	df000017 	ldw	fp,0(sp)
   108cc:	dec00104 	addi	sp,sp,4
   108d0:	f800283a 	ret

000108d4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   108d4:	defff904 	addi	sp,sp,-28
   108d8:	dfc00615 	stw	ra,24(sp)
   108dc:	df000515 	stw	fp,20(sp)
   108e0:	df000504 	addi	fp,sp,20
   108e4:	e13ffc15 	stw	r4,-16(fp)
   108e8:	e17ffd15 	stw	r5,-12(fp)
   108ec:	e1bffe15 	stw	r6,-8(fp)
   108f0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   108f4:	e0800217 	ldw	r2,8(fp)
   108f8:	d8800015 	stw	r2,0(sp)
   108fc:	e1ffff17 	ldw	r7,-4(fp)
   10900:	e1bffe17 	ldw	r6,-8(fp)
   10904:	e17ffd17 	ldw	r5,-12(fp)
   10908:	e13ffc17 	ldw	r4,-16(fp)
   1090c:	0010a840 	call	10a84 <alt_iic_isr_register>
}  
   10910:	e037883a 	mov	sp,fp
   10914:	dfc00117 	ldw	ra,4(sp)
   10918:	df000017 	ldw	fp,0(sp)
   1091c:	dec00204 	addi	sp,sp,8
   10920:	f800283a 	ret

00010924 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10924:	defff904 	addi	sp,sp,-28
   10928:	df000615 	stw	fp,24(sp)
   1092c:	df000604 	addi	fp,sp,24
   10930:	e13ffe15 	stw	r4,-8(fp)
   10934:	e17fff15 	stw	r5,-4(fp)
   10938:	e0bfff17 	ldw	r2,-4(fp)
   1093c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10940:	0005303a 	rdctl	r2,status
   10944:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10948:	e0fffb17 	ldw	r3,-20(fp)
   1094c:	00bfff84 	movi	r2,-2
   10950:	1884703a 	and	r2,r3,r2
   10954:	1001703a 	wrctl	status,r2
  
  return context;
   10958:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1095c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10960:	00c00044 	movi	r3,1
   10964:	e0bffa17 	ldw	r2,-24(fp)
   10968:	1884983a 	sll	r2,r3,r2
   1096c:	1007883a 	mov	r3,r2
   10970:	d0a6d517 	ldw	r2,-25772(gp)
   10974:	1884b03a 	or	r2,r3,r2
   10978:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1097c:	d0a6d517 	ldw	r2,-25772(gp)
   10980:	100170fa 	wrctl	ienable,r2
   10984:	e0bffc17 	ldw	r2,-16(fp)
   10988:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1098c:	e0bffd17 	ldw	r2,-12(fp)
   10990:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10994:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10998:	0001883a 	nop
}
   1099c:	e037883a 	mov	sp,fp
   109a0:	df000017 	ldw	fp,0(sp)
   109a4:	dec00104 	addi	sp,sp,4
   109a8:	f800283a 	ret

000109ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   109ac:	defff904 	addi	sp,sp,-28
   109b0:	df000615 	stw	fp,24(sp)
   109b4:	df000604 	addi	fp,sp,24
   109b8:	e13ffe15 	stw	r4,-8(fp)
   109bc:	e17fff15 	stw	r5,-4(fp)
   109c0:	e0bfff17 	ldw	r2,-4(fp)
   109c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   109c8:	0005303a 	rdctl	r2,status
   109cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   109d0:	e0fffb17 	ldw	r3,-20(fp)
   109d4:	00bfff84 	movi	r2,-2
   109d8:	1884703a 	and	r2,r3,r2
   109dc:	1001703a 	wrctl	status,r2
  
  return context;
   109e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   109e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   109e8:	00c00044 	movi	r3,1
   109ec:	e0bffa17 	ldw	r2,-24(fp)
   109f0:	1884983a 	sll	r2,r3,r2
   109f4:	0084303a 	nor	r2,zero,r2
   109f8:	1007883a 	mov	r3,r2
   109fc:	d0a6d517 	ldw	r2,-25772(gp)
   10a00:	1884703a 	and	r2,r3,r2
   10a04:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10a08:	d0a6d517 	ldw	r2,-25772(gp)
   10a0c:	100170fa 	wrctl	ienable,r2
   10a10:	e0bffc17 	ldw	r2,-16(fp)
   10a14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a18:	e0bffd17 	ldw	r2,-12(fp)
   10a1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10a20:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10a24:	0001883a 	nop
}
   10a28:	e037883a 	mov	sp,fp
   10a2c:	df000017 	ldw	fp,0(sp)
   10a30:	dec00104 	addi	sp,sp,4
   10a34:	f800283a 	ret

00010a38 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10a38:	defffc04 	addi	sp,sp,-16
   10a3c:	df000315 	stw	fp,12(sp)
   10a40:	df000304 	addi	fp,sp,12
   10a44:	e13ffe15 	stw	r4,-8(fp)
   10a48:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10a4c:	000530fa 	rdctl	r2,ienable
   10a50:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10a54:	00c00044 	movi	r3,1
   10a58:	e0bfff17 	ldw	r2,-4(fp)
   10a5c:	1884983a 	sll	r2,r3,r2
   10a60:	1007883a 	mov	r3,r2
   10a64:	e0bffd17 	ldw	r2,-12(fp)
   10a68:	1884703a 	and	r2,r3,r2
   10a6c:	1004c03a 	cmpne	r2,r2,zero
   10a70:	10803fcc 	andi	r2,r2,255
}
   10a74:	e037883a 	mov	sp,fp
   10a78:	df000017 	ldw	fp,0(sp)
   10a7c:	dec00104 	addi	sp,sp,4
   10a80:	f800283a 	ret

00010a84 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10a84:	defff504 	addi	sp,sp,-44
   10a88:	dfc00a15 	stw	ra,40(sp)
   10a8c:	df000915 	stw	fp,36(sp)
   10a90:	df000904 	addi	fp,sp,36
   10a94:	e13ffc15 	stw	r4,-16(fp)
   10a98:	e17ffd15 	stw	r5,-12(fp)
   10a9c:	e1bffe15 	stw	r6,-8(fp)
   10aa0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10aa4:	00bffa84 	movi	r2,-22
   10aa8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10aac:	e0bffd17 	ldw	r2,-12(fp)
   10ab0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10ab4:	e0bff817 	ldw	r2,-32(fp)
   10ab8:	10800808 	cmpgei	r2,r2,32
   10abc:	1000271e 	bne	r2,zero,10b5c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ac0:	0005303a 	rdctl	r2,status
   10ac4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ac8:	e0fffb17 	ldw	r3,-20(fp)
   10acc:	00bfff84 	movi	r2,-2
   10ad0:	1884703a 	and	r2,r3,r2
   10ad4:	1001703a 	wrctl	status,r2
  
  return context;
   10ad8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10adc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10ae0:	00800074 	movhi	r2,1
   10ae4:	1092c704 	addi	r2,r2,19228
   10ae8:	e0fff817 	ldw	r3,-32(fp)
   10aec:	180690fa 	slli	r3,r3,3
   10af0:	10c5883a 	add	r2,r2,r3
   10af4:	e0fffe17 	ldw	r3,-8(fp)
   10af8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10afc:	00800074 	movhi	r2,1
   10b00:	1092c704 	addi	r2,r2,19228
   10b04:	e0fff817 	ldw	r3,-32(fp)
   10b08:	180690fa 	slli	r3,r3,3
   10b0c:	10c5883a 	add	r2,r2,r3
   10b10:	10800104 	addi	r2,r2,4
   10b14:	e0ffff17 	ldw	r3,-4(fp)
   10b18:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10b1c:	e0bffe17 	ldw	r2,-8(fp)
   10b20:	10000526 	beq	r2,zero,10b38 <alt_iic_isr_register+0xb4>
   10b24:	e0bff817 	ldw	r2,-32(fp)
   10b28:	100b883a 	mov	r5,r2
   10b2c:	e13ffc17 	ldw	r4,-16(fp)
   10b30:	00109240 	call	10924 <alt_ic_irq_enable>
   10b34:	00000406 	br	10b48 <alt_iic_isr_register+0xc4>
   10b38:	e0bff817 	ldw	r2,-32(fp)
   10b3c:	100b883a 	mov	r5,r2
   10b40:	e13ffc17 	ldw	r4,-16(fp)
   10b44:	00109ac0 	call	109ac <alt_ic_irq_disable>
   10b48:	e0bff715 	stw	r2,-36(fp)
   10b4c:	e0bffa17 	ldw	r2,-24(fp)
   10b50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b54:	e0bff917 	ldw	r2,-28(fp)
   10b58:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10b5c:	e0bff717 	ldw	r2,-36(fp)
}
   10b60:	e037883a 	mov	sp,fp
   10b64:	dfc00117 	ldw	ra,4(sp)
   10b68:	df000017 	ldw	fp,0(sp)
   10b6c:	dec00204 	addi	sp,sp,8
   10b70:	f800283a 	ret

00010b74 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10b74:	defff804 	addi	sp,sp,-32
   10b78:	dfc00715 	stw	ra,28(sp)
   10b7c:	df000615 	stw	fp,24(sp)
   10b80:	dc000515 	stw	r16,20(sp)
   10b84:	df000604 	addi	fp,sp,24
   10b88:	e13ffb15 	stw	r4,-20(fp)
   10b8c:	e17ffc15 	stw	r5,-16(fp)
   10b90:	e1bffd15 	stw	r6,-12(fp)
   10b94:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   10b98:	e1bffe17 	ldw	r6,-8(fp)
   10b9c:	e17ffd17 	ldw	r5,-12(fp)
   10ba0:	e13ffc17 	ldw	r4,-16(fp)
   10ba4:	000f2340 	call	f234 <open>
   10ba8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   10bac:	e0bffa17 	ldw	r2,-24(fp)
   10bb0:	10002216 	blt	r2,zero,10c3c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   10bb4:	04000074 	movhi	r16,1
   10bb8:	84076c04 	addi	r16,r16,7600
   10bbc:	e0bffa17 	ldw	r2,-24(fp)
   10bc0:	01400304 	movi	r5,12
   10bc4:	1009883a 	mov	r4,r2
   10bc8:	0000f040 	call	f04 <__mulsi3>
   10bcc:	8085883a 	add	r2,r16,r2
   10bd0:	10c00017 	ldw	r3,0(r2)
   10bd4:	e0bffb17 	ldw	r2,-20(fp)
   10bd8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10bdc:	04000074 	movhi	r16,1
   10be0:	84076c04 	addi	r16,r16,7600
   10be4:	e0bffa17 	ldw	r2,-24(fp)
   10be8:	01400304 	movi	r5,12
   10bec:	1009883a 	mov	r4,r2
   10bf0:	0000f040 	call	f04 <__mulsi3>
   10bf4:	8085883a 	add	r2,r16,r2
   10bf8:	10800104 	addi	r2,r2,4
   10bfc:	10c00017 	ldw	r3,0(r2)
   10c00:	e0bffb17 	ldw	r2,-20(fp)
   10c04:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10c08:	04000074 	movhi	r16,1
   10c0c:	84076c04 	addi	r16,r16,7600
   10c10:	e0bffa17 	ldw	r2,-24(fp)
   10c14:	01400304 	movi	r5,12
   10c18:	1009883a 	mov	r4,r2
   10c1c:	0000f040 	call	f04 <__mulsi3>
   10c20:	8085883a 	add	r2,r16,r2
   10c24:	10800204 	addi	r2,r2,8
   10c28:	10c00017 	ldw	r3,0(r2)
   10c2c:	e0bffb17 	ldw	r2,-20(fp)
   10c30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10c34:	e13ffa17 	ldw	r4,-24(fp)
   10c38:	000f4d00 	call	f4d0 <alt_release_fd>
  }
} 
   10c3c:	0001883a 	nop
   10c40:	e6ffff04 	addi	sp,fp,-4
   10c44:	dfc00217 	ldw	ra,8(sp)
   10c48:	df000117 	ldw	fp,4(sp)
   10c4c:	dc000017 	ldw	r16,0(sp)
   10c50:	dec00304 	addi	sp,sp,12
   10c54:	f800283a 	ret

00010c58 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10c58:	defffb04 	addi	sp,sp,-20
   10c5c:	dfc00415 	stw	ra,16(sp)
   10c60:	df000315 	stw	fp,12(sp)
   10c64:	df000304 	addi	fp,sp,12
   10c68:	e13ffd15 	stw	r4,-12(fp)
   10c6c:	e17ffe15 	stw	r5,-8(fp)
   10c70:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10c74:	01c07fc4 	movi	r7,511
   10c78:	01800044 	movi	r6,1
   10c7c:	e17ffd17 	ldw	r5,-12(fp)
   10c80:	01000074 	movhi	r4,1
   10c84:	21076f04 	addi	r4,r4,7612
   10c88:	0010b740 	call	10b74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10c8c:	01c07fc4 	movi	r7,511
   10c90:	000d883a 	mov	r6,zero
   10c94:	e17ffe17 	ldw	r5,-8(fp)
   10c98:	01000074 	movhi	r4,1
   10c9c:	21076c04 	addi	r4,r4,7600
   10ca0:	0010b740 	call	10b74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10ca4:	01c07fc4 	movi	r7,511
   10ca8:	01800044 	movi	r6,1
   10cac:	e17fff17 	ldw	r5,-4(fp)
   10cb0:	01000074 	movhi	r4,1
   10cb4:	21077204 	addi	r4,r4,7624
   10cb8:	0010b740 	call	10b74 <alt_open_fd>
}  
   10cbc:	0001883a 	nop
   10cc0:	e037883a 	mov	sp,fp
   10cc4:	dfc00117 	ldw	ra,4(sp)
   10cc8:	df000017 	ldw	fp,0(sp)
   10ccc:	dec00204 	addi	sp,sp,8
   10cd0:	f800283a 	ret

00010cd4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10cd4:	defffa04 	addi	sp,sp,-24
   10cd8:	df000515 	stw	fp,20(sp)
   10cdc:	df000504 	addi	fp,sp,20
   10ce0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ce4:	0005303a 	rdctl	r2,status
   10ce8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10cec:	e0fffc17 	ldw	r3,-16(fp)
   10cf0:	00bfff84 	movi	r2,-2
   10cf4:	1884703a 	and	r2,r3,r2
   10cf8:	1001703a 	wrctl	status,r2
  
  return context;
   10cfc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10d00:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10d04:	e0bfff17 	ldw	r2,-4(fp)
   10d08:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10d0c:	e0bffd17 	ldw	r2,-12(fp)
   10d10:	10800017 	ldw	r2,0(r2)
   10d14:	e0fffd17 	ldw	r3,-12(fp)
   10d18:	18c00117 	ldw	r3,4(r3)
   10d1c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10d20:	e0bffd17 	ldw	r2,-12(fp)
   10d24:	10800117 	ldw	r2,4(r2)
   10d28:	e0fffd17 	ldw	r3,-12(fp)
   10d2c:	18c00017 	ldw	r3,0(r3)
   10d30:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10d34:	e0bffd17 	ldw	r2,-12(fp)
   10d38:	e0fffd17 	ldw	r3,-12(fp)
   10d3c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10d40:	e0bffd17 	ldw	r2,-12(fp)
   10d44:	e0fffd17 	ldw	r3,-12(fp)
   10d48:	10c00015 	stw	r3,0(r2)
   10d4c:	e0bffb17 	ldw	r2,-20(fp)
   10d50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d54:	e0bffe17 	ldw	r2,-8(fp)
   10d58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10d5c:	0001883a 	nop
   10d60:	e037883a 	mov	sp,fp
   10d64:	df000017 	ldw	fp,0(sp)
   10d68:	dec00104 	addi	sp,sp,4
   10d6c:	f800283a 	ret

00010d70 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10d70:	defffb04 	addi	sp,sp,-20
   10d74:	dfc00415 	stw	ra,16(sp)
   10d78:	df000315 	stw	fp,12(sp)
   10d7c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10d80:	d0a00e17 	ldw	r2,-32712(gp)
   10d84:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10d88:	d0a6d717 	ldw	r2,-25764(gp)
   10d8c:	10800044 	addi	r2,r2,1
   10d90:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10d94:	00002e06 	br	10e50 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10d98:	e0bffd17 	ldw	r2,-12(fp)
   10d9c:	10800017 	ldw	r2,0(r2)
   10da0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10da4:	e0bffd17 	ldw	r2,-12(fp)
   10da8:	10800403 	ldbu	r2,16(r2)
   10dac:	10803fcc 	andi	r2,r2,255
   10db0:	10000426 	beq	r2,zero,10dc4 <alt_tick+0x54>
   10db4:	d0a6d717 	ldw	r2,-25764(gp)
   10db8:	1000021e 	bne	r2,zero,10dc4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10dbc:	e0bffd17 	ldw	r2,-12(fp)
   10dc0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10dc4:	e0bffd17 	ldw	r2,-12(fp)
   10dc8:	10800217 	ldw	r2,8(r2)
   10dcc:	d0e6d717 	ldw	r3,-25764(gp)
   10dd0:	18801d36 	bltu	r3,r2,10e48 <alt_tick+0xd8>
   10dd4:	e0bffd17 	ldw	r2,-12(fp)
   10dd8:	10800403 	ldbu	r2,16(r2)
   10ddc:	10803fcc 	andi	r2,r2,255
   10de0:	1000191e 	bne	r2,zero,10e48 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10de4:	e0bffd17 	ldw	r2,-12(fp)
   10de8:	10800317 	ldw	r2,12(r2)
   10dec:	e0fffd17 	ldw	r3,-12(fp)
   10df0:	18c00517 	ldw	r3,20(r3)
   10df4:	1809883a 	mov	r4,r3
   10df8:	103ee83a 	callr	r2
   10dfc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10e00:	e0bfff17 	ldw	r2,-4(fp)
   10e04:	1000031e 	bne	r2,zero,10e14 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10e08:	e13ffd17 	ldw	r4,-12(fp)
   10e0c:	0010cd40 	call	10cd4 <alt_alarm_stop>
   10e10:	00000d06 	br	10e48 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10e14:	e0bffd17 	ldw	r2,-12(fp)
   10e18:	10c00217 	ldw	r3,8(r2)
   10e1c:	e0bfff17 	ldw	r2,-4(fp)
   10e20:	1887883a 	add	r3,r3,r2
   10e24:	e0bffd17 	ldw	r2,-12(fp)
   10e28:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10e2c:	e0bffd17 	ldw	r2,-12(fp)
   10e30:	10c00217 	ldw	r3,8(r2)
   10e34:	d0a6d717 	ldw	r2,-25764(gp)
   10e38:	1880032e 	bgeu	r3,r2,10e48 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10e3c:	e0bffd17 	ldw	r2,-12(fp)
   10e40:	00c00044 	movi	r3,1
   10e44:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10e48:	e0bffe17 	ldw	r2,-8(fp)
   10e4c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10e50:	e0fffd17 	ldw	r3,-12(fp)
   10e54:	d0a00e04 	addi	r2,gp,-32712
   10e58:	18bfcf1e 	bne	r3,r2,10d98 <__alt_data_end+0xffff0d98>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10e5c:	0001883a 	nop
}
   10e60:	0001883a 	nop
   10e64:	e037883a 	mov	sp,fp
   10e68:	dfc00117 	ldw	ra,4(sp)
   10e6c:	df000017 	ldw	fp,0(sp)
   10e70:	dec00204 	addi	sp,sp,8
   10e74:	f800283a 	ret

00010e78 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10e78:	deffff04 	addi	sp,sp,-4
   10e7c:	df000015 	stw	fp,0(sp)
   10e80:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10e84:	000170fa 	wrctl	ienable,zero
}
   10e88:	0001883a 	nop
   10e8c:	e037883a 	mov	sp,fp
   10e90:	df000017 	ldw	fp,0(sp)
   10e94:	dec00104 	addi	sp,sp,4
   10e98:	f800283a 	ret

00010e9c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10e9c:	defffe04 	addi	sp,sp,-8
   10ea0:	df000115 	stw	fp,4(sp)
   10ea4:	df000104 	addi	fp,sp,4
   10ea8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10eac:	e0bfff17 	ldw	r2,-4(fp)
   10eb0:	10bffe84 	addi	r2,r2,-6
   10eb4:	10c00428 	cmpgeui	r3,r2,16
   10eb8:	18001a1e 	bne	r3,zero,10f24 <alt_exception_cause_generated_bad_addr+0x88>
   10ebc:	100690ba 	slli	r3,r2,2
   10ec0:	00800074 	movhi	r2,1
   10ec4:	1083b504 	addi	r2,r2,3796
   10ec8:	1885883a 	add	r2,r3,r2
   10ecc:	10800017 	ldw	r2,0(r2)
   10ed0:	1000683a 	jmp	r2
   10ed4:	00010f14 	movui	zero,1084
   10ed8:	00010f14 	movui	zero,1084
   10edc:	00010f24 	muli	zero,zero,1084
   10ee0:	00010f24 	muli	zero,zero,1084
   10ee4:	00010f24 	muli	zero,zero,1084
   10ee8:	00010f14 	movui	zero,1084
   10eec:	00010f1c 	xori	zero,zero,1084
   10ef0:	00010f24 	muli	zero,zero,1084
   10ef4:	00010f14 	movui	zero,1084
   10ef8:	00010f14 	movui	zero,1084
   10efc:	00010f24 	muli	zero,zero,1084
   10f00:	00010f14 	movui	zero,1084
   10f04:	00010f1c 	xori	zero,zero,1084
   10f08:	00010f24 	muli	zero,zero,1084
   10f0c:	00010f24 	muli	zero,zero,1084
   10f10:	00010f14 	movui	zero,1084
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10f14:	00800044 	movi	r2,1
   10f18:	00000306 	br	10f28 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10f1c:	0005883a 	mov	r2,zero
   10f20:	00000106 	br	10f28 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10f24:	0005883a 	mov	r2,zero
  }
}
   10f28:	e037883a 	mov	sp,fp
   10f2c:	df000017 	ldw	fp,0(sp)
   10f30:	dec00104 	addi	sp,sp,4
   10f34:	f800283a 	ret

00010f38 <atexit>:
   10f38:	200b883a 	mov	r5,r4
   10f3c:	000f883a 	mov	r7,zero
   10f40:	000d883a 	mov	r6,zero
   10f44:	0009883a 	mov	r4,zero
   10f48:	0010fc81 	jmpi	10fc8 <__register_exitproc>

00010f4c <memcmp>:
   10f4c:	01c000c4 	movi	r7,3
   10f50:	3980192e 	bgeu	r7,r6,10fb8 <memcmp+0x6c>
   10f54:	2144b03a 	or	r2,r4,r5
   10f58:	11c4703a 	and	r2,r2,r7
   10f5c:	10000f26 	beq	r2,zero,10f9c <memcmp+0x50>
   10f60:	20800003 	ldbu	r2,0(r4)
   10f64:	28c00003 	ldbu	r3,0(r5)
   10f68:	10c0151e 	bne	r2,r3,10fc0 <memcmp+0x74>
   10f6c:	31bfff84 	addi	r6,r6,-2
   10f70:	01ffffc4 	movi	r7,-1
   10f74:	00000406 	br	10f88 <memcmp+0x3c>
   10f78:	20800003 	ldbu	r2,0(r4)
   10f7c:	28c00003 	ldbu	r3,0(r5)
   10f80:	31bfffc4 	addi	r6,r6,-1
   10f84:	10c00e1e 	bne	r2,r3,10fc0 <memcmp+0x74>
   10f88:	21000044 	addi	r4,r4,1
   10f8c:	29400044 	addi	r5,r5,1
   10f90:	31fff91e 	bne	r6,r7,10f78 <__alt_data_end+0xffff0f78>
   10f94:	0005883a 	mov	r2,zero
   10f98:	f800283a 	ret
   10f9c:	20c00017 	ldw	r3,0(r4)
   10fa0:	28800017 	ldw	r2,0(r5)
   10fa4:	18bfee1e 	bne	r3,r2,10f60 <__alt_data_end+0xffff0f60>
   10fa8:	31bfff04 	addi	r6,r6,-4
   10fac:	21000104 	addi	r4,r4,4
   10fb0:	29400104 	addi	r5,r5,4
   10fb4:	39bff936 	bltu	r7,r6,10f9c <__alt_data_end+0xffff0f9c>
   10fb8:	303fe91e 	bne	r6,zero,10f60 <__alt_data_end+0xffff0f60>
   10fbc:	003ff506 	br	10f94 <__alt_data_end+0xffff0f94>
   10fc0:	10c5c83a 	sub	r2,r2,r3
   10fc4:	f800283a 	ret

00010fc8 <__register_exitproc>:
   10fc8:	defffa04 	addi	sp,sp,-24
   10fcc:	dc000315 	stw	r16,12(sp)
   10fd0:	04000074 	movhi	r16,1
   10fd4:	840be404 	addi	r16,r16,12176
   10fd8:	80c00017 	ldw	r3,0(r16)
   10fdc:	dc400415 	stw	r17,16(sp)
   10fe0:	dfc00515 	stw	ra,20(sp)
   10fe4:	18805217 	ldw	r2,328(r3)
   10fe8:	2023883a 	mov	r17,r4
   10fec:	10003726 	beq	r2,zero,110cc <__register_exitproc+0x104>
   10ff0:	10c00117 	ldw	r3,4(r2)
   10ff4:	010007c4 	movi	r4,31
   10ff8:	20c00e16 	blt	r4,r3,11034 <__register_exitproc+0x6c>
   10ffc:	1a000044 	addi	r8,r3,1
   11000:	8800221e 	bne	r17,zero,1108c <__register_exitproc+0xc4>
   11004:	18c00084 	addi	r3,r3,2
   11008:	18c7883a 	add	r3,r3,r3
   1100c:	18c7883a 	add	r3,r3,r3
   11010:	12000115 	stw	r8,4(r2)
   11014:	10c7883a 	add	r3,r2,r3
   11018:	19400015 	stw	r5,0(r3)
   1101c:	0005883a 	mov	r2,zero
   11020:	dfc00517 	ldw	ra,20(sp)
   11024:	dc400417 	ldw	r17,16(sp)
   11028:	dc000317 	ldw	r16,12(sp)
   1102c:	dec00604 	addi	sp,sp,24
   11030:	f800283a 	ret
   11034:	00800034 	movhi	r2,0
   11038:	10800004 	addi	r2,r2,0
   1103c:	10002626 	beq	r2,zero,110d8 <__register_exitproc+0x110>
   11040:	01006404 	movi	r4,400
   11044:	d9400015 	stw	r5,0(sp)
   11048:	d9800115 	stw	r6,4(sp)
   1104c:	d9c00215 	stw	r7,8(sp)
   11050:	00000000 	call	0 <__reset>
   11054:	d9400017 	ldw	r5,0(sp)
   11058:	d9800117 	ldw	r6,4(sp)
   1105c:	d9c00217 	ldw	r7,8(sp)
   11060:	10001d26 	beq	r2,zero,110d8 <__register_exitproc+0x110>
   11064:	81000017 	ldw	r4,0(r16)
   11068:	10000115 	stw	zero,4(r2)
   1106c:	02000044 	movi	r8,1
   11070:	22405217 	ldw	r9,328(r4)
   11074:	0007883a 	mov	r3,zero
   11078:	12400015 	stw	r9,0(r2)
   1107c:	20805215 	stw	r2,328(r4)
   11080:	10006215 	stw	zero,392(r2)
   11084:	10006315 	stw	zero,396(r2)
   11088:	883fde26 	beq	r17,zero,11004 <__alt_data_end+0xffff1004>
   1108c:	18c9883a 	add	r4,r3,r3
   11090:	2109883a 	add	r4,r4,r4
   11094:	1109883a 	add	r4,r2,r4
   11098:	21802215 	stw	r6,136(r4)
   1109c:	01800044 	movi	r6,1
   110a0:	12406217 	ldw	r9,392(r2)
   110a4:	30cc983a 	sll	r6,r6,r3
   110a8:	4992b03a 	or	r9,r9,r6
   110ac:	12406215 	stw	r9,392(r2)
   110b0:	21c04215 	stw	r7,264(r4)
   110b4:	01000084 	movi	r4,2
   110b8:	893fd21e 	bne	r17,r4,11004 <__alt_data_end+0xffff1004>
   110bc:	11006317 	ldw	r4,396(r2)
   110c0:	218cb03a 	or	r6,r4,r6
   110c4:	11806315 	stw	r6,396(r2)
   110c8:	003fce06 	br	11004 <__alt_data_end+0xffff1004>
   110cc:	18805304 	addi	r2,r3,332
   110d0:	18805215 	stw	r2,328(r3)
   110d4:	003fc606 	br	10ff0 <__alt_data_end+0xffff0ff0>
   110d8:	00bfffc4 	movi	r2,-1
   110dc:	003fd006 	br	11020 <__alt_data_end+0xffff1020>
