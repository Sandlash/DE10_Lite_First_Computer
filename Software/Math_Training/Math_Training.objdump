
Math_Training.elf:     file format elf32-littlenios2
Math_Training.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001140c memsz 0x0001140c flags r-x
    LOAD off    0x0001242c vaddr 0x0001142c paddr 0x00012f18 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00014a04 vaddr 0x00014a04 paddr 0x00014a04 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010e34  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c8  00011064  00011064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0001142c  00012f18  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00014a04  00014a04  00014a04  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00014b64  00014b64  00013f18  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013f18  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001000  00000000  00000000  00013f40  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000295b3  00000000  00000000  00014f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a4b0  00000000  00000000  0003e4f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cabb  00000000  00000000  000489a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000255c  00000000  00000000  00055460  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d8a  00000000  00000000  000579bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018588  00000000  00000000  0005b746  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00073cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019e0  00000000  00000000  00073ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00078ba1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00078ba4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00078ba8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00078ba9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00078baa  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00078bae  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00078bb2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00078bb6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00078bc1  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00078bcc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000014  00000000  00000000  00078bd7  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  00078beb  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00062588  00000000  00000000  00078c39  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00011064 l    d  .rodata	00000000 .rodata
0001142c l    d  .rwdata	00000000 .rwdata
00014a04 l    d  .bss	00000000 .bss
00014b64 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/emilio/UNI/Magistrale/Embedded/progetto/DE10_Lite_First_Computer/Software/Math_Training_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 1lnn.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mnist-utils.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003a48 l     F .text	00000008 __fp_unlock
00003a5c l     F .text	0000019c __sinit.part.1
00003bf8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001142c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
000059e4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011276 l     O .rodata	00000010 zeroes.4404
000080f4 l     F .text	000000bc __sbprintf
00011286 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00008538 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00011c78 l     O .rwdata	00000020 lc_ctype_charset
00011c58 l     O .rwdata	00000020 lc_message_charset
00011c98 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000112b4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000bef8 l     F .text	000000fc __sprint_r.part.0
000113d8 l     O .rodata	00000010 zeroes.4349
0000d534 l     F .text	000000bc __sbprintf
000113e8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ea78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000eb8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ebec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ece0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000edc8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000eeb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f090 l     F .text	0000003c alt_get_errno
0000f0cc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0000f314 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012f08 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000f588 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f6c4 l     F .text	00000034 alt_dev_reg
00011e78 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f9b8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000fbc4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000101fc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001043c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010af8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00014a38 g     O .bss	00000004 alt_instruction_exception_handler
0000b66c g     F .text	00000074 _mprec_log10
0000b758 g     F .text	0000008c __any_on
0000a35c g     F .text	00000054 _isatty_r
000112c0 g     O .rodata	00000028 __mprec_tinytens
0000efcc g     F .text	0000007c alt_main
00005910 g     F .text	000000c0 _puts_r
00014a64 g     O .bss	00000100 alt_irq
0000a48c g     F .text	00000060 _lseek_r
00012f18 g       *ABS*	00000000 __flash_rwdata_start
00009de8 g     F .text	000000ac __sflags
0000e7d4 g     F .text	00000088 .hidden __eqdf2
00014b64 g       *ABS*	00000000 __alt_heap_start
000058d4 g     F .text	0000003c printf
0000da2c g     F .text	0000009c _wcrtomb_r
00005d00 g     F .text	0000005c __sseek
00003da8 g     F .text	00000010 __sinit
0000d8d4 g     F .text	00000140 __swbuf_r
0000a3b0 g     F .text	0000007c _setlocale_r
00003c00 g     F .text	00000078 __sfmoreglue
0000f06c g     F .text	00000024 __malloc_unlock
00000ae0 g     F .text	0000012c readImageFileHeader
0000a5d0 g     F .text	0000015c memmove
00003d90 g     F .text	00000018 _cleanup
0000a72c g     F .text	000000a8 _Balloc
0000212c g     F .text	000000dc .hidden __gtdf2
00010dfc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004a28 g     F .text	0000005c _fstat_r
00014a04 g     O .bss	00000004 errno
00005c7c g     F .text	00000008 __seofread
00014a24 g     O .bss	00000004 alt_argv
0001aed8 g       *ABS*	00000000 _gp
00011cf8 g     O .rwdata	00000180 alt_fd_list
000105dc g     F .text	00000090 alt_find_dev
000055d4 g     F .text	00000148 memcpy
00003a50 g     F .text	0000000c _cleanup_r
00003370 g     F .text	000000dc .hidden __floatsidf
00010bdc g     F .text	0000007c alt_io_redirect
0000e85c g     F .text	000000f4 .hidden __ltdf2
00011064 g       *ABS*	00000000 __DTOR_END__
000059d0 g     F .text	00000014 puts
00010e20 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000bda8 g     F .text	00000074 __fpclassifyd
0000b5c8 g     F .text	000000a4 __ratio
0000d518 g     F .text	0000001c __vfiprintf_internal
0000fdbc g     F .text	0000021c altera_avalon_jtag_uart_read
000058a4 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000035a8 g     F .text	00000064 .hidden __udivsi3
0000ed1c g     F .text	000000ac isatty
00011310 g     O .rodata	000000c8 __mprec_tens
0000a42c g     F .text	0000000c __locale_charset
00014a10 g     O .bss	00000004 __malloc_top_pad
00000770 g     F .text	00000128 updateCellWeights
00012ee8 g     O .rwdata	00000004 __mb_cur_max
0000a45c g     F .text	0000000c _localeconv_r
0000ab60 g     F .text	0000003c __i2b
00009e94 g     F .text	000004c8 __sfvwrite_r
00000e20 g     F .text	00000068 getLabel
00005bd4 g     F .text	00000054 _sbrk_r
0000b7e4 g     F .text	00000060 _read_r
00012f00 g     O .rwdata	00000004 alt_max_fd
0000369c g     F .text	000000f0 _fclose_r
00003a18 g     F .text	00000030 fflush
00014a0c g     O .bss	00000004 __malloc_max_sbrked_mem
00000eb0 g     F .text	000008ac .hidden __adddf3
0000b370 g     F .text	0000010c __b2d
0000e210 g     F .text	000005c4 .hidden __umoddi3
0000eef0 g     F .text	000000dc lseek
00012ed8 g     O .rwdata	00000004 _global_impure_ptr
0000b844 g     F .text	00000564 _realloc_r
00014b64 g       *ABS*	00000000 __bss_end
00010a08 g     F .text	000000f0 alt_iic_isr_register
00010cf4 g     F .text	00000108 alt_tick
0000dc14 g     F .text	000005fc .hidden __udivdi3
0000d830 g     F .text	00000024 _fputwc_r
000112e8 g     O .rodata	00000028 __mprec_bigtens
0000a944 g     F .text	00000104 __s2b
0000e9d0 g     F .text	000000a8 .hidden __floatunsidf
0000b0b0 g     F .text	00000060 __mcmp
00003dc8 g     F .text	00000018 __fp_lock_all
000109bc g     F .text	0000004c alt_ic_irq_enabled
00000d98 g     F .text	00000088 getImage
00010c58 g     F .text	0000009c alt_alarm_stop
00014a2c g     O .bss	00000004 alt_irq_active
000045c8 g     F .text	00000444 _fseeko_r
000000fc g     F .exceptions	000000d4 alt_irq_handler
00011cd0 g     O .rwdata	00000028 alt_dev_null
00000898 g     F .text	0000006c trainCell
0001041c g     F .text	00000020 alt_dcache_flush_all
0000aa48 g     F .text	00000068 __hi0bits
0000e950 g     F .text	00000080 .hidden __fixdfsi
00000904 g     F .text	00000044 testCell
00012f18 g       *ABS*	00000000 __ram_rwdata_end
00012ef8 g     O .rwdata	00000008 alt_dev_list
0000f5c4 g     F .text	00000100 write
0001142c g       *ABS*	00000000 __ram_rodata_end
0000ec28 g     F .text	000000b8 fstat
0000e85c g     F .text	000000f4 .hidden __ledf2
0000ae28 g     F .text	00000140 __pow5mult
0000c00c g     F .text	0000150c ___vfiprintf_internal_r
00014a1c g     O .bss	00000004 __nlocale_changed
0000360c g     F .text	00000058 .hidden __umodsi3
00014b64 g       *ABS*	00000000 end
00004a0c g     F .text	0000001c fseeko
000045ac g     F .text	0000001c fseek
0000f8f8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00011064 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010274 g     F .text	0000007c alt_avalon_timer_sc_init
0000344c g     F .text	00000064 .hidden __clzsi2
0000ffd8 g     F .text	00000224 altera_avalon_jtag_uart_write
00000a6c g     F .text	00000074 flipBytes
000005b0 g     F .text	0000013c calcCellOutput
00003db8 g     F .text	00000004 __sfp_lock_acquire
0000a4ec g     F .text	000000e4 memchr
00005dfc g     F .text	000022dc ___vfprintf_internal_r
00004298 g     F .text	00000310 _free_r
0000a438 g     F .text	00000010 __locale_mb_cur_max
000083b8 g     F .text	00000180 __call_exitprocs
00014a18 g     O .bss	00000004 __mlocale_changed
00012ee0 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00014a30 g     O .bss	00000004 _alt_tick_rate
00000524 g     F .text	0000008c setCellInput
0000af68 g     F .text	00000148 __lshift
00014a34 g     O .bss	00000004 _alt_nticks
0000f350 g     F .text	00000104 read
0000f730 g     F .text	00000064 alt_sys_init
00005844 g     F .text	00000060 _open_r
00010f4c g     F .text	00000118 __register_exitproc
00000cb8 g     F .text	00000070 openMNISTImageFile
0000ab9c g     F .text	0000028c __multiply
0000fc64 g     F .text	00000068 altera_avalon_jtag_uart_close
00000e88 g     F .text	00000028 .hidden __mulsi3
0001142c g       *ABS*	00000000 __ram_rwdata_start
00011064 g       *ABS*	00000000 __ram_rodata_start
00000454 g     F .text	000000d0 getLayerPrediction
00014a3c g     O .bss	00000028 __malloc_current_mallinfo
0000b47c g     F .text	0000014c __d2b
0000f794 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00010774 g     F .text	000000c4 alt_get_fd
00008364 g     F .text	00000054 _close_r
00010ed0 g     F .text	0000007c memcmp
0000f854 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014b64 g       *ABS*	00000000 __alt_stack_base
0000f8a4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00008210 g     F .text	00000154 __swsetup_r
0000175c g     F .text	000009d0 .hidden __divdf3
00003c78 g     F .text	00000118 __sfp
0000b6e0 g     F .text	00000078 __copybits
00011850 g     O .rwdata	00000408 __malloc_av_
00003dc4 g     F .text	00000004 __sinit_lock_release
00002208 g     F .text	0000086c .hidden __muldf3
00005c28 g     F .text	00000054 __sread
00004140 g     F .text	00000034 fread
0001066c g     F .text	00000108 alt_find_file
00010478 g     F .text	000000a4 alt_dev_llist_insert
0000f048 g     F .text	00000024 __malloc_lock
0000f4d8 g     F .text	000000b0 sbrk
000039bc g     F .text	0000005c _fflush_r
0000d5f0 g     F .text	000000dc _calloc_r
00003eec g     F .text	00000018 fopen
00014a04 g       *ABS*	00000000 __bss_start
0000571c g     F .text	00000128 memset
000009f0 g     F .text	0000007c main
00014a28 g     O .bss	00000004 alt_envp
00014a08 g     O .bss	00000004 __malloc_max_total_mem
0000f7f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000da14 g     F .text	00000018 __swbuf
00003f04 g     F .text	0000023c _fread_r
00000d28 g     F .text	00000070 openMNISTLabelFile
00005d5c g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
0000378c g     F .text	00000014 fclose
00008760 g     F .text	00001688 _dtoa_r
00004dc8 g     F .text	0000080c _malloc_r
0000db88 g     F .text	00000030 __ascii_wctomb
00012f04 g     O .rwdata	00000004 alt_errno
00004a84 g     F .text	000000c4 _fwalk
000034b0 g     F .text	00000084 .hidden __divsi3
00004174 g     F .text	00000124 _malloc_trim_r
00011064 g       *ABS*	00000000 __CTOR_END__
0000be1c g     F .text	000000dc strcmp
00011064 g       *ABS*	00000000 __flash_rodata_start
00011064 g       *ABS*	00000000 __DTOR_LIST__
0000e7d4 g     F .text	00000088 .hidden __nedf2
00000c0c g     F .text	000000ac readLabelFileHeader
0000f6f8 g     F .text	00000038 alt_irq_init
0000f454 g     F .text	00000084 alt_release_fd
0001112b g     O .rodata	00000100 .hidden __clz_tab
00014a14 g     O .bss	00000004 _PathLocale
00010ebc g     F .text	00000014 atexit
000081b0 g     F .text	00000060 _write_r
0000a468 g     F .text	00000018 setlocale
00012edc g     O .rwdata	00000004 _impure_ptr
00014a20 g     O .bss	00000004 alt_argc
000037a0 g     F .text	0000021c __sflush_r
0001057c g     F .text	00000060 _do_dtors
0000a454 g     F .text	00000008 __locale_cjk_lang
000045a8 g     F .text	00000004 _fseek_r
00005a00 g     F .text	000001d4 __srefill_r
000006ec g     F .text	00000084 getCellError
00000020 g       .exceptions	00000000 alt_irq_entry
0000b30c g     F .text	00000064 __ulp
00003de0 g     F .text	00000018 __fp_unlock_all
00012ef0 g     O .rwdata	00000008 alt_fs_list
00000948 g     F .text	000000a8 testLayer
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000a480 g     F .text	0000000c localeconv
00010858 g     F .text	00000050 alt_ic_isr_register
0000026c g     F .text	000000c8 getTargetOutput
00012f18 g       *ABS*	00000000 _edata
00014b64 g       *ABS*	00000000 _end
0000d6cc g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000fccc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00000334 g     F .text	00000120 initLayer
00010930 g     F .text	0000008c alt_ic_irq_disable
00005c84 g     F .text	0000007c __swrite
00012ee4 g     O .rwdata	00000004 __malloc_trim_threshold
0000a448 g     F .text	0000000c __locale_msgcharset
00003664 g     F .text	00000038 exit
00004b48 g     F .text	000000c4 _fwalk_reent
0000b110 g     F .text	000001fc __mdiff
00003534 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003dbc g     F .text	00000004 __sfp_lock_release
00003df8 g     F .text	000000f4 _fopen_r
0000ebb8 g     F .text	00000034 _exit
000102f0 g     F .text	0000012c alt_alarm_start
00004c0c g     F .text	000001bc __smakebuf_r
00005d64 g     F .text	00000098 strlen
0000f1b8 g     F .text	0000015c open
0000212c g     F .text	000000dc .hidden __gedf2
00012eec g     O .rwdata	00000004 __wctomb
0000bff4 g     F .text	00000018 __sprint_r
00010838 g     F .text	00000020 alt_icache_flush_all
00012f0c g     O .rwdata	00000004 alt_priority_mask
000108a8 g     F .text	00000088 alt_ic_irq_enable
000080d8 g     F .text	0000001c __vfprintf_internal
0000dbb8 g     F .text	0000005c _wctomb_r
00002a74 g     F .text	000008fc .hidden __subdf3
0000aab0 g     F .text	000000b0 __lo0bits
00012f10 g     O .rwdata	00000008 alt_alarm_list
0001051c g     F .text	00000060 _do_ctors
0000dac8 g     F .text	000000c0 wcrtomb
0000eab4 g     F .text	000000d8 close
0000ee30 g     F .text	00000084 alt_load
0000d854 g     F .text	00000080 fputwc
00003dc0 g     F .text	00000004 __sinit_lock_acquire
0000a7fc g     F .text	00000148 __multadd
0000a7d4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10929904 	addi	r2,r2,19044
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10929904 	addi	r2,r2,19044
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6d817 	ldw	r2,-25760(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6d817 	ldw	r2,-25760(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6abb614 	ori	gp,gp,44760
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10928114 	ori	r2,r2,18948

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d2d914 	ori	r3,r3,19300

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000ee300 	call	ee30 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000efcc0 	call	efcc <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffe0268>

0000026c <getTargetOutput>:

/**
 * @details Returns an output vector with targetIndex set to 1, all others to 0
 */

Vector getTargetOutput(int targetIndex){
     26c:	defff204 	addi	sp,sp,-56
     270:	df000d15 	stw	fp,52(sp)
     274:	df000d04 	addi	fp,sp,52
     278:	e13ffe15 	stw	r4,-8(fp)
     27c:	e17fff15 	stw	r5,-4(fp)
    Vector v;
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     280:	e03ff315 	stw	zero,-52(fp)
     284:	00000e06 	br	2c0 <getTargetOutput+0x54>
        v.val[i] = (i==targetIndex) ? 1 : 0;
     288:	e0fff317 	ldw	r3,-52(fp)
     28c:	e0bfff17 	ldw	r2,-4(fp)
     290:	1885003a 	cmpeq	r2,r3,r2
     294:	10c03fcc 	andi	r3,r2,255
     298:	e0bff317 	ldw	r2,-52(fp)
     29c:	1085883a 	add	r2,r2,r2
     2a0:	1085883a 	add	r2,r2,r2
     2a4:	e13ff304 	addi	r4,fp,-52
     2a8:	2085883a 	add	r2,r4,r2
     2ac:	10800104 	addi	r2,r2,4
     2b0:	10c00015 	stw	r3,0(r2)
 * @details Returns an output vector with targetIndex set to 1, all others to 0
 */

Vector getTargetOutput(int targetIndex){
    Vector v;
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     2b4:	e0bff317 	ldw	r2,-52(fp)
     2b8:	10800044 	addi	r2,r2,1
     2bc:	e0bff315 	stw	r2,-52(fp)
     2c0:	e0bff317 	ldw	r2,-52(fp)
     2c4:	10800290 	cmplti	r2,r2,10
     2c8:	103fef1e 	bne	r2,zero,288 <__alt_data_end+0xfffe0288>
        v.val[i] = (i==targetIndex) ? 1 : 0;
    }
    return v;
     2cc:	e0bffe17 	ldw	r2,-8(fp)
     2d0:	e0fff417 	ldw	r3,-48(fp)
     2d4:	10c00015 	stw	r3,0(r2)
     2d8:	e0fff517 	ldw	r3,-44(fp)
     2dc:	10c00115 	stw	r3,4(r2)
     2e0:	e0fff617 	ldw	r3,-40(fp)
     2e4:	10c00215 	stw	r3,8(r2)
     2e8:	e0fff717 	ldw	r3,-36(fp)
     2ec:	10c00315 	stw	r3,12(r2)
     2f0:	e0fff817 	ldw	r3,-32(fp)
     2f4:	10c00415 	stw	r3,16(r2)
     2f8:	e0fff917 	ldw	r3,-28(fp)
     2fc:	10c00515 	stw	r3,20(r2)
     300:	e0fffa17 	ldw	r3,-24(fp)
     304:	10c00615 	stw	r3,24(r2)
     308:	e0fffb17 	ldw	r3,-20(fp)
     30c:	10c00715 	stw	r3,28(r2)
     310:	e0fffc17 	ldw	r3,-16(fp)
     314:	10c00815 	stw	r3,32(r2)
     318:	e0fffd17 	ldw	r3,-12(fp)
     31c:	10c00915 	stw	r3,36(r2)
}
     320:	e0bffe17 	ldw	r2,-8(fp)
     324:	e037883a 	mov	sp,fp
     328:	df000017 	ldw	fp,0(sp)
     32c:	dec00104 	addi	sp,sp,4
     330:	f800283a 	ret

00000334 <initLayer>:
 * @attention It actually makes no difference whether the weights are
 * initialized to a constant (e.g. 0.5) or to a random number.
 * The result (85% success rate) will not change significantly.
 */

void initLayer(Layer *l){
     334:	defffa04 	addi	sp,sp,-24
     338:	dfc00515 	stw	ra,20(sp)
     33c:	df000415 	stw	fp,16(sp)
     340:	dc000315 	stw	r16,12(sp)
     344:	df000404 	addi	fp,sp,16
     348:	e13ffe15 	stw	r4,-8(fp)
    
    for (int o=0; o<NUMBER_OF_OUTPUT_CELLS; o++){
     34c:	e03ffc15 	stw	zero,-16(fp)
     350:	00003606 	br	42c <initLayer+0xf8>
        
        for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     354:	e03ffd15 	stw	zero,-12(fp)
     358:	00001c06 	br	3cc <initLayer+0x98>
            l->cell[o].input[i]=0;
     35c:	e43ffe17 	ldw	r16,-8(fp)
     360:	e0bffc17 	ldw	r2,-16(fp)
     364:	01418884 	movi	r5,1570
     368:	1009883a 	mov	r4,r2
     36c:	0000e880 	call	e88 <__mulsi3>
     370:	1007883a 	mov	r3,r2
     374:	e0bffd17 	ldw	r2,-12(fp)
     378:	1885883a 	add	r2,r3,r2
     37c:	100490fa 	slli	r2,r2,3
     380:	8085883a 	add	r2,r16,r2
     384:	10000015 	stw	zero,0(r2)
     388:	10000115 	stw	zero,4(r2)
            l->cell[o].weight[i]=0;
     38c:	e43ffe17 	ldw	r16,-8(fp)
     390:	e0bffc17 	ldw	r2,-16(fp)
     394:	01418884 	movi	r5,1570
     398:	1009883a 	mov	r4,r2
     39c:	0000e880 	call	e88 <__mulsi3>
     3a0:	1007883a 	mov	r3,r2
     3a4:	e0bffd17 	ldw	r2,-12(fp)
     3a8:	1885883a 	add	r2,r3,r2
     3ac:	1080c404 	addi	r2,r2,784
     3b0:	100490fa 	slli	r2,r2,3
     3b4:	8085883a 	add	r2,r16,r2
     3b8:	10000015 	stw	zero,0(r2)
     3bc:	10000115 	stw	zero,4(r2)

void initLayer(Layer *l){
    
    for (int o=0; o<NUMBER_OF_OUTPUT_CELLS; o++){
        
        for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     3c0:	e0bffd17 	ldw	r2,-12(fp)
     3c4:	10800044 	addi	r2,r2,1
     3c8:	e0bffd15 	stw	r2,-12(fp)
     3cc:	e0bffd17 	ldw	r2,-12(fp)
     3d0:	1080c410 	cmplti	r2,r2,784
     3d4:	103fe11e 	bne	r2,zero,35c <__alt_data_end+0xfffe035c>
            l->cell[o].input[i]=0;
            l->cell[o].weight[i]=0;
        }
        
        l->cell[o].output = 0;
     3d8:	e43ffe17 	ldw	r16,-8(fp)
     3dc:	e0bffc17 	ldw	r2,-16(fp)
     3e0:	014c4404 	movi	r5,12560
     3e4:	1009883a 	mov	r4,r2
     3e8:	0000e880 	call	e88 <__mulsi3>
     3ec:	8085883a 	add	r2,r16,r2
     3f0:	108c4004 	addi	r2,r2,12544
     3f4:	10000015 	stw	zero,0(r2)
     3f8:	10000115 	stw	zero,4(r2)
        l->cell[o].bias = 0;
     3fc:	e43ffe17 	ldw	r16,-8(fp)
     400:	e0bffc17 	ldw	r2,-16(fp)
     404:	014c4404 	movi	r5,12560
     408:	1009883a 	mov	r4,r2
     40c:	0000e880 	call	e88 <__mulsi3>
     410:	8085883a 	add	r2,r16,r2
     414:	108c4204 	addi	r2,r2,12552
     418:	10000015 	stw	zero,0(r2)
     41c:	10000115 	stw	zero,4(r2)
 * The result (85% success rate) will not change significantly.
 */

void initLayer(Layer *l){
    
    for (int o=0; o<NUMBER_OF_OUTPUT_CELLS; o++){
     420:	e0bffc17 	ldw	r2,-16(fp)
     424:	10800044 	addi	r2,r2,1
     428:	e0bffc15 	stw	r2,-16(fp)
     42c:	e0bffc17 	ldw	r2,-16(fp)
     430:	10800290 	cmplti	r2,r2,10
     434:	103fc71e 	bne	r2,zero,354 <__alt_data_end+0xfffe0354>
        }
        
        l->cell[o].output = 0;
        l->cell[o].bias = 0;
    }
}
     438:	0001883a 	nop
     43c:	e6ffff04 	addi	sp,fp,-4
     440:	dfc00217 	ldw	ra,8(sp)
     444:	df000117 	ldw	fp,4(sp)
     448:	dc000017 	ldw	r16,0(sp)
     44c:	dec00304 	addi	sp,sp,12
     450:	f800283a 	ret

00000454 <getLayerPrediction>:
/**
 * @details The output prediction is derived by simply sorting all output values
 * and using the index (=0-9 number) of the highest value as the prediction.
 */

uint8_t getLayerPrediction(Layer *l){
     454:	defff804 	addi	sp,sp,-32
     458:	dfc00715 	stw	ra,28(sp)
     45c:	df000615 	stw	fp,24(sp)
     460:	dc000515 	stw	r16,20(sp)
     464:	df000604 	addi	fp,sp,24
     468:	e13ffe15 	stw	r4,-8(fp)
    
    double maxOut = 0;
     46c:	e03ffa15 	stw	zero,-24(fp)
     470:	e03ffb15 	stw	zero,-20(fp)
    uint8_t maxInd = 0;
     474:	e03ffc05 	stb	zero,-16(fp)
    
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     478:	e03ffd15 	stw	zero,-12(fp)
     47c:	00001f06 	br	4fc <getLayerPrediction+0xa8>
        
        if (l->cell[i].output > maxOut){
     480:	e43ffe17 	ldw	r16,-8(fp)
     484:	e0bffd17 	ldw	r2,-12(fp)
     488:	014c4404 	movi	r5,12560
     48c:	1009883a 	mov	r4,r2
     490:	0000e880 	call	e88 <__mulsi3>
     494:	8085883a 	add	r2,r16,r2
     498:	110c4004 	addi	r4,r2,12544
     49c:	20800017 	ldw	r2,0(r4)
     4a0:	20c00117 	ldw	r3,4(r4)
     4a4:	e1bffa17 	ldw	r6,-24(fp)
     4a8:	e1fffb17 	ldw	r7,-20(fp)
     4ac:	1009883a 	mov	r4,r2
     4b0:	180b883a 	mov	r5,r3
     4b4:	000212c0 	call	212c <__gedf2>
     4b8:	00800d0e 	bge	zero,r2,4f0 <getLayerPrediction+0x9c>
            maxOut = l->cell[i].output;
     4bc:	e43ffe17 	ldw	r16,-8(fp)
     4c0:	e0bffd17 	ldw	r2,-12(fp)
     4c4:	014c4404 	movi	r5,12560
     4c8:	1009883a 	mov	r4,r2
     4cc:	0000e880 	call	e88 <__mulsi3>
     4d0:	8085883a 	add	r2,r16,r2
     4d4:	108c4004 	addi	r2,r2,12544
     4d8:	10c00017 	ldw	r3,0(r2)
     4dc:	e0fffa15 	stw	r3,-24(fp)
     4e0:	10800117 	ldw	r2,4(r2)
     4e4:	e0bffb15 	stw	r2,-20(fp)
            maxInd = i;
     4e8:	e0bffd17 	ldw	r2,-12(fp)
     4ec:	e0bffc05 	stb	r2,-16(fp)
uint8_t getLayerPrediction(Layer *l){
    
    double maxOut = 0;
    uint8_t maxInd = 0;
    
    for (int i=0; i<NUMBER_OF_OUTPUT_CELLS; i++){
     4f0:	e0bffd17 	ldw	r2,-12(fp)
     4f4:	10800044 	addi	r2,r2,1
     4f8:	e0bffd15 	stw	r2,-12(fp)
     4fc:	e0bffd17 	ldw	r2,-12(fp)
     500:	10800290 	cmplti	r2,r2,10
     504:	103fde1e 	bne	r2,zero,480 <__alt_data_end+0xfffe0480>
            maxOut = l->cell[i].output;
            maxInd = i;
        }
    }
    
    return maxInd;
     508:	e0bffc03 	ldbu	r2,-16(fp)
    
}
     50c:	e6ffff04 	addi	sp,fp,-4
     510:	dfc00217 	ldw	ra,8(sp)
     514:	df000117 	ldw	fp,4(sp)
     518:	dc000017 	ldw	r16,0(sp)
     51c:	dec00304 	addi	sp,sp,12
     520:	f800283a 	ret

00000524 <setCellInput>:
 * of a given MNIST image, setting input vector cells to [0,1]
 * based on the pixels of the image.
 * Scalar pixel intensity [=grey-scale] is ignored, only 0 or 1 [=black-white].
 */

void setCellInput(Cell *c, MNIST_Image *img){
     524:	defffc04 	addi	sp,sp,-16
     528:	df000315 	stw	fp,12(sp)
     52c:	df000304 	addi	fp,sp,12
     530:	e13ffe15 	stw	r4,-8(fp)
     534:	e17fff15 	stw	r5,-4(fp)
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     538:	e03ffd15 	stw	zero,-12(fp)
     53c:	00001406 	br	590 <setCellInput+0x6c>
        c->input[i] = img->pixel[i] ? 1 : 0;
     540:	e0ffff17 	ldw	r3,-4(fp)
     544:	e0bffd17 	ldw	r2,-12(fp)
     548:	1885883a 	add	r2,r3,r2
     54c:	10800003 	ldbu	r2,0(r2)
     550:	10803fcc 	andi	r2,r2,255
     554:	10000326 	beq	r2,zero,564 <setCellInput+0x40>
     558:	0005883a 	mov	r2,zero
     55c:	00cffc34 	movhi	r3,16368
     560:	00000206 	br	56c <setCellInput+0x48>
     564:	0005883a 	mov	r2,zero
     568:	0007883a 	mov	r3,zero
     56c:	e17ffe17 	ldw	r5,-8(fp)
     570:	e13ffd17 	ldw	r4,-12(fp)
     574:	200890fa 	slli	r4,r4,3
     578:	2909883a 	add	r4,r5,r4
     57c:	20800015 	stw	r2,0(r4)
     580:	20c00115 	stw	r3,4(r4)
 * Scalar pixel intensity [=grey-scale] is ignored, only 0 or 1 [=black-white].
 */

void setCellInput(Cell *c, MNIST_Image *img){
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     584:	e0bffd17 	ldw	r2,-12(fp)
     588:	10800044 	addi	r2,r2,1
     58c:	e0bffd15 	stw	r2,-12(fp)
     590:	e0bffd17 	ldw	r2,-12(fp)
     594:	1080c410 	cmplti	r2,r2,784
     598:	103fe91e 	bne	r2,zero,540 <__alt_data_end+0xfffe0540>
        c->input[i] = img->pixel[i] ? 1 : 0;
    }
}
     59c:	0001883a 	nop
     5a0:	e037883a 	mov	sp,fp
     5a4:	df000017 	ldw	fp,0(sp)
     5a8:	dec00104 	addi	sp,sp,4
     5ac:	f800283a 	ret

000005b0 <calcCellOutput>:
/**
 * @details Calculates a cell's output by suming all input-weight-products
 * and normalizes to [0-1].
 */

void calcCellOutput(Cell *c){
     5b0:	defffa04 	addi	sp,sp,-24
     5b4:	dfc00515 	stw	ra,20(sp)
     5b8:	df000415 	stw	fp,16(sp)
     5bc:	dc400315 	stw	r17,12(sp)
     5c0:	dc000215 	stw	r16,8(sp)
     5c4:	df000404 	addi	fp,sp,16
     5c8:	e13ffd15 	stw	r4,-12(fp)
    
    c->output=0;
     5cc:	e0bffd17 	ldw	r2,-12(fp)
     5d0:	100c4015 	stw	zero,12544(r2)
     5d4:	100c4115 	stw	zero,12548(r2)
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     5d8:	e03ffc15 	stw	zero,-16(fp)
     5dc:	00002806 	br	680 <calcCellOutput+0xd0>
        c->output += c->input[i] * c->weight[i];
     5e0:	e0bffd17 	ldw	r2,-12(fp)
     5e4:	140c4017 	ldw	r16,12544(r2)
     5e8:	144c4117 	ldw	r17,12548(r2)
     5ec:	e0fffd17 	ldw	r3,-12(fp)
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	100490fa 	slli	r2,r2,3
     5f8:	1889883a 	add	r4,r3,r2
     5fc:	20800017 	ldw	r2,0(r4)
     600:	20c00117 	ldw	r3,4(r4)
     604:	e17ffd17 	ldw	r5,-12(fp)
     608:	e13ffc17 	ldw	r4,-16(fp)
     60c:	2100c404 	addi	r4,r4,784
     610:	200890fa 	slli	r4,r4,3
     614:	290d883a 	add	r6,r5,r4
     618:	31000017 	ldw	r4,0(r6)
     61c:	31400117 	ldw	r5,4(r6)
     620:	200d883a 	mov	r6,r4
     624:	280f883a 	mov	r7,r5
     628:	1009883a 	mov	r4,r2
     62c:	180b883a 	mov	r5,r3
     630:	00022080 	call	2208 <__muldf3>
     634:	1009883a 	mov	r4,r2
     638:	180b883a 	mov	r5,r3
     63c:	2005883a 	mov	r2,r4
     640:	2807883a 	mov	r3,r5
     644:	100d883a 	mov	r6,r2
     648:	180f883a 	mov	r7,r3
     64c:	8009883a 	mov	r4,r16
     650:	880b883a 	mov	r5,r17
     654:	0000eb00 	call	eb0 <__adddf3>
     658:	1009883a 	mov	r4,r2
     65c:	180b883a 	mov	r5,r3
     660:	2005883a 	mov	r2,r4
     664:	2807883a 	mov	r3,r5
     668:	e13ffd17 	ldw	r4,-12(fp)
     66c:	208c4015 	stw	r2,12544(r4)
     670:	20cc4115 	stw	r3,12548(r4)

void calcCellOutput(Cell *c){
    
    c->output=0;
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     674:	e0bffc17 	ldw	r2,-16(fp)
     678:	10800044 	addi	r2,r2,1
     67c:	e0bffc15 	stw	r2,-16(fp)
     680:	e0bffc17 	ldw	r2,-16(fp)
     684:	1080c410 	cmplti	r2,r2,784
     688:	103fd51e 	bne	r2,zero,5e0 <__alt_data_end+0xfffe05e0>
        c->output += c->input[i] * c->weight[i];
    }
    
    c->output /= NUMBER_OF_INPUT_CELLS;             // normalize output (0-1)
     68c:	e13ffd17 	ldw	r4,-12(fp)
     690:	208c4017 	ldw	r2,12544(r4)
     694:	20cc4117 	ldw	r3,12548(r4)
     698:	000d883a 	mov	r6,zero
     69c:	01d02274 	movhi	r7,16521
     6a0:	39e00004 	addi	r7,r7,-32768
     6a4:	1009883a 	mov	r4,r2
     6a8:	180b883a 	mov	r5,r3
     6ac:	000175c0 	call	175c <__divdf3>
     6b0:	1009883a 	mov	r4,r2
     6b4:	180b883a 	mov	r5,r3
     6b8:	2005883a 	mov	r2,r4
     6bc:	2807883a 	mov	r3,r5
     6c0:	e13ffd17 	ldw	r4,-12(fp)
     6c4:	208c4015 	stw	r2,12544(r4)
     6c8:	20cc4115 	stw	r3,12548(r4)
}
     6cc:	0001883a 	nop
     6d0:	e6fffe04 	addi	sp,fp,-8
     6d4:	dfc00317 	ldw	ra,12(sp)
     6d8:	df000217 	ldw	fp,8(sp)
     6dc:	dc400117 	ldw	r17,4(sp)
     6e0:	dc000017 	ldw	r16,0(sp)
     6e4:	dec00404 	addi	sp,sp,16
     6e8:	f800283a 	ret

000006ec <getCellError>:

/**
 * @details Returns the difference between a target value and the cell's ouput
 */

double getCellError(Cell *c, int target){
     6ec:	defffa04 	addi	sp,sp,-24
     6f0:	dfc00515 	stw	ra,20(sp)
     6f4:	df000415 	stw	fp,16(sp)
     6f8:	df000404 	addi	fp,sp,16
     6fc:	e13ffe15 	stw	r4,-8(fp)
     700:	e17fff15 	stw	r5,-4(fp)

    double err = target - c->output;
     704:	e13fff17 	ldw	r4,-4(fp)
     708:	00033700 	call	3370 <__floatsidf>
     70c:	1011883a 	mov	r8,r2
     710:	1813883a 	mov	r9,r3
     714:	e13ffe17 	ldw	r4,-8(fp)
     718:	208c4017 	ldw	r2,12544(r4)
     71c:	20cc4117 	ldw	r3,12548(r4)
     720:	100d883a 	mov	r6,r2
     724:	180f883a 	mov	r7,r3
     728:	4009883a 	mov	r4,r8
     72c:	480b883a 	mov	r5,r9
     730:	0002a740 	call	2a74 <__subdf3>
     734:	1009883a 	mov	r4,r2
     738:	180b883a 	mov	r5,r3
     73c:	e13ffc15 	stw	r4,-16(fp)
     740:	e17ffd15 	stw	r5,-12(fp)

    return err;
     744:	e0bffc17 	ldw	r2,-16(fp)
     748:	e0fffd17 	ldw	r3,-12(fp)
     74c:	1009883a 	mov	r4,r2
     750:	180b883a 	mov	r5,r3
}
     754:	2005883a 	mov	r2,r4
     758:	2807883a 	mov	r3,r5
     75c:	e037883a 	mov	sp,fp
     760:	dfc00117 	ldw	ra,4(sp)
     764:	df000017 	ldw	fp,0(sp)
     768:	dec00204 	addi	sp,sp,8
     76c:	f800283a 	ret

00000770 <updateCellWeights>:

/**
 * @details Updates a cell's weights based on given error and LEARNING_RATE
 */

void updateCellWeights(Cell *c, double err){
     770:	defff804 	addi	sp,sp,-32
     774:	dfc00715 	stw	ra,28(sp)
     778:	df000615 	stw	fp,24(sp)
     77c:	dc400515 	stw	r17,20(sp)
     780:	dc000415 	stw	r16,16(sp)
     784:	df000604 	addi	fp,sp,24
     788:	e13ffb15 	stw	r4,-20(fp)
     78c:	e17ffc15 	stw	r5,-16(fp)
     790:	e1bffd15 	stw	r6,-12(fp)
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     794:	e03ffa15 	stw	zero,-24(fp)
     798:	00003406 	br	86c <updateCellWeights+0xfc>
        c->weight[i] += LEARNING_RATE * c->input[i] * err;
     79c:	e0fffb17 	ldw	r3,-20(fp)
     7a0:	e0bffa17 	ldw	r2,-24(fp)
     7a4:	1080c404 	addi	r2,r2,784
     7a8:	100490fa 	slli	r2,r2,3
     7ac:	1885883a 	add	r2,r3,r2
     7b0:	14000017 	ldw	r16,0(r2)
     7b4:	14400117 	ldw	r17,4(r2)
     7b8:	e0fffb17 	ldw	r3,-20(fp)
     7bc:	e0bffa17 	ldw	r2,-24(fp)
     7c0:	100490fa 	slli	r2,r2,3
     7c4:	1889883a 	add	r4,r3,r2
     7c8:	20800017 	ldw	r2,0(r4)
     7cc:	20c00117 	ldw	r3,4(r4)
     7d0:	01a666b4 	movhi	r6,39322
     7d4:	31a66684 	addi	r6,r6,-26214
     7d8:	01cfeab4 	movhi	r7,16298
     7dc:	39e66644 	addi	r7,r7,-26215
     7e0:	1009883a 	mov	r4,r2
     7e4:	180b883a 	mov	r5,r3
     7e8:	00022080 	call	2208 <__muldf3>
     7ec:	1009883a 	mov	r4,r2
     7f0:	180b883a 	mov	r5,r3
     7f4:	2005883a 	mov	r2,r4
     7f8:	2807883a 	mov	r3,r5
     7fc:	e1bffc17 	ldw	r6,-16(fp)
     800:	e1fffd17 	ldw	r7,-12(fp)
     804:	1009883a 	mov	r4,r2
     808:	180b883a 	mov	r5,r3
     80c:	00022080 	call	2208 <__muldf3>
     810:	1009883a 	mov	r4,r2
     814:	180b883a 	mov	r5,r3
     818:	2005883a 	mov	r2,r4
     81c:	2807883a 	mov	r3,r5
     820:	100d883a 	mov	r6,r2
     824:	180f883a 	mov	r7,r3
     828:	8009883a 	mov	r4,r16
     82c:	880b883a 	mov	r5,r17
     830:	0000eb00 	call	eb0 <__adddf3>
     834:	1009883a 	mov	r4,r2
     838:	180b883a 	mov	r5,r3
     83c:	2005883a 	mov	r2,r4
     840:	2807883a 	mov	r3,r5
     844:	e17ffb17 	ldw	r5,-20(fp)
     848:	e13ffa17 	ldw	r4,-24(fp)
     84c:	2100c404 	addi	r4,r4,784
     850:	200890fa 	slli	r4,r4,3
     854:	2909883a 	add	r4,r5,r4
     858:	20800015 	stw	r2,0(r4)
     85c:	20c00115 	stw	r3,4(r4)
 * @details Updates a cell's weights based on given error and LEARNING_RATE
 */

void updateCellWeights(Cell *c, double err){
    
    for (int i=0; i<NUMBER_OF_INPUT_CELLS; i++){
     860:	e0bffa17 	ldw	r2,-24(fp)
     864:	10800044 	addi	r2,r2,1
     868:	e0bffa15 	stw	r2,-24(fp)
     86c:	e0bffa17 	ldw	r2,-24(fp)
     870:	1080c410 	cmplti	r2,r2,784
     874:	103fc91e 	bne	r2,zero,79c <__alt_data_end+0xfffe079c>
        c->weight[i] += LEARNING_RATE * c->input[i] * err;
    }
}
     878:	0001883a 	nop
     87c:	e6fffe04 	addi	sp,fp,-8
     880:	dfc00317 	ldw	ra,12(sp)
     884:	df000217 	ldw	fp,8(sp)
     888:	dc400117 	ldw	r17,4(sp)
     88c:	dc000017 	ldw	r16,0(sp)
     890:	dec00404 	addi	sp,sp,16
     894:	f800283a 	ret

00000898 <trainCell>:
/**
 * @details Performs the training algorithm:
 * feeding input, calculate output, calculate error, update weights)
 */

void trainCell(Cell *c, MNIST_Image *img, int target){
     898:	defff904 	addi	sp,sp,-28
     89c:	dfc00615 	stw	ra,24(sp)
     8a0:	df000515 	stw	fp,20(sp)
     8a4:	df000504 	addi	fp,sp,20
     8a8:	e13ffd15 	stw	r4,-12(fp)
     8ac:	e17ffe15 	stw	r5,-8(fp)
     8b0:	e1bfff15 	stw	r6,-4(fp)
    
    setCellInput(c, img);
     8b4:	e17ffe17 	ldw	r5,-8(fp)
     8b8:	e13ffd17 	ldw	r4,-12(fp)
     8bc:	00005240 	call	524 <setCellInput>
    calcCellOutput(c);
     8c0:	e13ffd17 	ldw	r4,-12(fp)
     8c4:	00005b00 	call	5b0 <calcCellOutput>
    
    // learning (by updating the weights)
    double err = getCellError(c, target);
     8c8:	e17fff17 	ldw	r5,-4(fp)
     8cc:	e13ffd17 	ldw	r4,-12(fp)
     8d0:	00006ec0 	call	6ec <getCellError>
     8d4:	e0bffb15 	stw	r2,-20(fp)
     8d8:	e0fffc15 	stw	r3,-16(fp)
    updateCellWeights(c, err);
     8dc:	e17ffb17 	ldw	r5,-20(fp)
     8e0:	e1bffc17 	ldw	r6,-16(fp)
     8e4:	e13ffd17 	ldw	r4,-12(fp)
     8e8:	00007700 	call	770 <updateCellWeights>
}
     8ec:	0001883a 	nop
     8f0:	e037883a 	mov	sp,fp
     8f4:	dfc00117 	ldw	ra,4(sp)
     8f8:	df000017 	ldw	fp,0(sp)
     8fc:	dec00204 	addi	sp,sp,8
     900:	f800283a 	ret

00000904 <testCell>:
/**
 * @details Performs the testing of the trained network
 * Same as training a cell, but without updating weights (learning)
 */

void testCell(Cell *c, MNIST_Image *img){
     904:	defffc04 	addi	sp,sp,-16
     908:	dfc00315 	stw	ra,12(sp)
     90c:	df000215 	stw	fp,8(sp)
     910:	df000204 	addi	fp,sp,8
     914:	e13ffe15 	stw	r4,-8(fp)
     918:	e17fff15 	stw	r5,-4(fp)
    
    setCellInput(c, img);
     91c:	e17fff17 	ldw	r5,-4(fp)
     920:	e13ffe17 	ldw	r4,-8(fp)
     924:	00005240 	call	524 <setCellInput>
    calcCellOutput(c);
     928:	e13ffe17 	ldw	r4,-8(fp)
     92c:	00005b00 	call	5b0 <calcCellOutput>
    
}
     930:	0001883a 	nop
     934:	e037883a 	mov	sp,fp
     938:	dfc00117 	ldw	ra,4(sp)
     93c:	df000017 	ldw	fp,0(sp)
     940:	dec00204 	addi	sp,sp,8
     944:	f800283a 	ret

00000948 <testLayer>:
 * @details Tests a layer by looping through and testing its cells
 * Exactly the same as TrainLayer() but WITHOUT LEARNING.
 * @param l A pointer to the layer that is to be training
 */

int testLayer(Layer *l){
     948:	deff3604 	addi	sp,sp,-808
     94c:	dfc0c915 	stw	ra,804(sp)
     950:	df00c815 	stw	fp,800(sp)
     954:	df00c804 	addi	fp,sp,800
     958:	e13fff15 	stw	r4,-4(fp)
    
    // open MNIST files
    FILE *imageFile;
    imageFile = openMNISTImageFile(MNIST_TESTING_SET_IMAGE_FILE_NAME);
     95c:	01000074 	movhi	r4,1
     960:	21041904 	addi	r4,r4,4196
     964:	0000cb80 	call	cb8 <openMNISTImageFile>
     968:	e0bf3915 	stw	r2,-796(fp)
    
        
	// Reading next image
	MNIST_Image img = getImage(imageFile);
     96c:	e0bf3a44 	addi	r2,fp,-791
     970:	e17f3917 	ldw	r5,-796(fp)
     974:	1009883a 	mov	r4,r2
     978:	0000d980 	call	d98 <getImage>


	// loop through all output cells for the given image
	for (int i=0; i < NUMBER_OF_OUTPUT_CELLS; i++){
     97c:	e03f3815 	stw	zero,-800(fp)
     980:	00000d06 	br	9b8 <testLayer+0x70>
		testCell(&l->cell[i], &img);
     984:	014c4404 	movi	r5,12560
     988:	e13f3817 	ldw	r4,-800(fp)
     98c:	0000e880 	call	e88 <__mulsi3>
     990:	1007883a 	mov	r3,r2
     994:	e0bfff17 	ldw	r2,-4(fp)
     998:	10c5883a 	add	r2,r2,r3
     99c:	e0ff3a44 	addi	r3,fp,-791
     9a0:	180b883a 	mov	r5,r3
     9a4:	1009883a 	mov	r4,r2
     9a8:	00009040 	call	904 <testCell>
	// Reading next image
	MNIST_Image img = getImage(imageFile);


	// loop through all output cells for the given image
	for (int i=0; i < NUMBER_OF_OUTPUT_CELLS; i++){
     9ac:	e0bf3817 	ldw	r2,-800(fp)
     9b0:	10800044 	addi	r2,r2,1
     9b4:	e0bf3815 	stw	r2,-800(fp)
     9b8:	e0bf3817 	ldw	r2,-800(fp)
     9bc:	10800290 	cmplti	r2,r2,10
     9c0:	103ff01e 	bne	r2,zero,984 <__alt_data_end+0xfffe0984>
		testCell(&l->cell[i], &img);
	}

	uint8_t predictedNum = getLayerPrediction(l);
     9c4:	e13fff17 	ldw	r4,-4(fp)
     9c8:	00004540 	call	454 <getLayerPrediction>
     9cc:	e0bf3a05 	stb	r2,-792(fp)
        
    
    // Close files
    fclose(imageFile);
     9d0:	e13f3917 	ldw	r4,-796(fp)
     9d4:	000378c0 	call	378c <fclose>
    
    return predictedNum;
     9d8:	e0bf3a03 	ldbu	r2,-792(fp)

}
     9dc:	e037883a 	mov	sp,fp
     9e0:	dfc00117 	ldw	ra,4(sp)
     9e4:	df000017 	ldw	fp,0(sp)
     9e8:	dec00204 	addi	sp,sp,8
     9ec:	f800283a 	ret

000009f0 <main>:

/**
 * @details Main function to run MNIST-1LNN
 */

int main() {
     9f0:	defffe04 	addi	sp,sp,-8
     9f4:	dfc00115 	stw	ra,4(sp)
     9f8:	df000015 	stw	fp,0(sp)
     9fc:	d839883a 	mov	fp,sp
     a00:	023fffb4 	movhi	r8,65534
     a04:	42055704 	addi	r8,r8,5468
     a08:	da37883a 	add	sp,sp,r8
	uint8_t img_ready=0;
     a0c:	00bfffb4 	movhi	r2,65534
     a10:	10855704 	addi	r2,r2,5468
     a14:	1705883a 	add	r2,r2,fp
     a18:	10000005 	stb	zero,0(r2)
	uint8_t result;

    Layer outputLayer;

    initLayer(&outputLayer);
     a1c:	00ffffb4 	movhi	r3,65534
     a20:	18c55804 	addi	r3,r3,5472
     a24:	e0c5883a 	add	r2,fp,r3
     a28:	1009883a 	mov	r4,r2
     a2c:	00003340 	call	334 <initLayer>
    
    while(1){
    	if(img_ready)
     a30:	00ffffb4 	movhi	r3,65534
     a34:	18c55704 	addi	r3,r3,5468
     a38:	1f07883a 	add	r3,r3,fp
     a3c:	18800003 	ldbu	r2,0(r3)
     a40:	103ffb26 	beq	r2,zero,a30 <__alt_data_end+0xfffe0a30>
    		 result=testLayer(&outputLayer);
     a44:	00ffffb4 	movhi	r3,65534
     a48:	18c55804 	addi	r3,r3,5472
     a4c:	e0c5883a 	add	r2,fp,r3
     a50:	1009883a 	mov	r4,r2
     a54:	00009480 	call	948 <testLayer>
     a58:	00ffffb4 	movhi	r3,65534
     a5c:	18c55744 	addi	r3,r3,5469
     a60:	1f07883a 	add	r3,r3,fp
     a64:	18800005 	stb	r2,0(r3)
    }
     a68:	003ff106 	br	a30 <__alt_data_end+0xfffe0a30>

00000a6c <flipBytes>:
 * @details Reverse byte order in 32bit numbers
 * MNIST files contain all numbers in reversed byte order,
 * and hence must be reversed before using
 */

uint32_t flipBytes(uint32_t n){
     a6c:	defffa04 	addi	sp,sp,-24
     a70:	df000515 	stw	fp,20(sp)
     a74:	df000504 	addi	fp,sp,20
     a78:	e13fff15 	stw	r4,-4(fp)
    
    uint32_t b0,b1,b2,b3;
    
    b0 = (n & 0x000000ff) <<  24u;
     a7c:	e0bfff17 	ldw	r2,-4(fp)
     a80:	1004963a 	slli	r2,r2,24
     a84:	e0bffb15 	stw	r2,-20(fp)
    b1 = (n & 0x0000ff00) <<   8u;
     a88:	e0bfff17 	ldw	r2,-4(fp)
     a8c:	10bfc00c 	andi	r2,r2,65280
     a90:	1004923a 	slli	r2,r2,8
     a94:	e0bffc15 	stw	r2,-16(fp)
    b2 = (n & 0x00ff0000) >>   8u;
     a98:	e0bfff17 	ldw	r2,-4(fp)
     a9c:	10803fec 	andhi	r2,r2,255
     aa0:	1004d23a 	srli	r2,r2,8
     aa4:	e0bffd15 	stw	r2,-12(fp)
    b3 = (n & 0xff000000) >>  24u;
     aa8:	e0bfff17 	ldw	r2,-4(fp)
     aac:	1004d63a 	srli	r2,r2,24
     ab0:	e0bffe15 	stw	r2,-8(fp)
    
    return (b0 | b1 | b2 | b3);
     ab4:	e0fffb17 	ldw	r3,-20(fp)
     ab8:	e0bffc17 	ldw	r2,-16(fp)
     abc:	1886b03a 	or	r3,r3,r2
     ac0:	e0bffd17 	ldw	r2,-12(fp)
     ac4:	1886b03a 	or	r3,r3,r2
     ac8:	e0bffe17 	ldw	r2,-8(fp)
     acc:	1884b03a 	or	r2,r3,r2
    
}
     ad0:	e037883a 	mov	sp,fp
     ad4:	df000017 	ldw	fp,0(sp)
     ad8:	dec00104 	addi	sp,sp,4
     adc:	f800283a 	ret

00000ae0 <readImageFileHeader>:
/**
 * @details Read MNIST image file header
 * @see http://yann.lecun.com/exdb/mnist/ for definition details
 */

void readImageFileHeader(FILE *imageFile, MNIST_ImageFileHeader *ifh){
     ae0:	defffc04 	addi	sp,sp,-16
     ae4:	dfc00315 	stw	ra,12(sp)
     ae8:	df000215 	stw	fp,8(sp)
     aec:	df000204 	addi	fp,sp,8
     af0:	e13ffe15 	stw	r4,-8(fp)
     af4:	e17fff15 	stw	r5,-4(fp)
    
    ifh->magicNumber =0;
     af8:	e0bfff17 	ldw	r2,-4(fp)
     afc:	10000015 	stw	zero,0(r2)
    ifh->maxImages   =0;
     b00:	e0bfff17 	ldw	r2,-4(fp)
     b04:	10000115 	stw	zero,4(r2)
    ifh->imgWidth    =0;
     b08:	e0bfff17 	ldw	r2,-4(fp)
     b0c:	10000215 	stw	zero,8(r2)
    ifh->imgHeight   =0;
     b10:	e0bfff17 	ldw	r2,-4(fp)
     b14:	10000315 	stw	zero,12(r2)
    
    fread(&ifh->magicNumber, 4, 1, imageFile);
     b18:	e0bfff17 	ldw	r2,-4(fp)
     b1c:	e1fffe17 	ldw	r7,-8(fp)
     b20:	01800044 	movi	r6,1
     b24:	01400104 	movi	r5,4
     b28:	1009883a 	mov	r4,r2
     b2c:	00041400 	call	4140 <fread>
    ifh->magicNumber = flipBytes(ifh->magicNumber);
     b30:	e0bfff17 	ldw	r2,-4(fp)
     b34:	10800017 	ldw	r2,0(r2)
     b38:	1009883a 	mov	r4,r2
     b3c:	0000a6c0 	call	a6c <flipBytes>
     b40:	1007883a 	mov	r3,r2
     b44:	e0bfff17 	ldw	r2,-4(fp)
     b48:	10c00015 	stw	r3,0(r2)
    
    fread(&ifh->maxImages, 4, 1, imageFile);
     b4c:	e0bfff17 	ldw	r2,-4(fp)
     b50:	10800104 	addi	r2,r2,4
     b54:	e1fffe17 	ldw	r7,-8(fp)
     b58:	01800044 	movi	r6,1
     b5c:	01400104 	movi	r5,4
     b60:	1009883a 	mov	r4,r2
     b64:	00041400 	call	4140 <fread>
    ifh->maxImages = flipBytes(ifh->maxImages);
     b68:	e0bfff17 	ldw	r2,-4(fp)
     b6c:	10800117 	ldw	r2,4(r2)
     b70:	1009883a 	mov	r4,r2
     b74:	0000a6c0 	call	a6c <flipBytes>
     b78:	1007883a 	mov	r3,r2
     b7c:	e0bfff17 	ldw	r2,-4(fp)
     b80:	10c00115 	stw	r3,4(r2)
    
    fread(&ifh->imgWidth, 4, 1, imageFile);
     b84:	e0bfff17 	ldw	r2,-4(fp)
     b88:	10800204 	addi	r2,r2,8
     b8c:	e1fffe17 	ldw	r7,-8(fp)
     b90:	01800044 	movi	r6,1
     b94:	01400104 	movi	r5,4
     b98:	1009883a 	mov	r4,r2
     b9c:	00041400 	call	4140 <fread>
    ifh->imgWidth = flipBytes(ifh->imgWidth);
     ba0:	e0bfff17 	ldw	r2,-4(fp)
     ba4:	10800217 	ldw	r2,8(r2)
     ba8:	1009883a 	mov	r4,r2
     bac:	0000a6c0 	call	a6c <flipBytes>
     bb0:	1007883a 	mov	r3,r2
     bb4:	e0bfff17 	ldw	r2,-4(fp)
     bb8:	10c00215 	stw	r3,8(r2)
    
    fread(&ifh->imgHeight, 4, 1, imageFile);
     bbc:	e0bfff17 	ldw	r2,-4(fp)
     bc0:	10800304 	addi	r2,r2,12
     bc4:	e1fffe17 	ldw	r7,-8(fp)
     bc8:	01800044 	movi	r6,1
     bcc:	01400104 	movi	r5,4
     bd0:	1009883a 	mov	r4,r2
     bd4:	00041400 	call	4140 <fread>
    ifh->imgHeight = flipBytes(ifh->imgHeight);
     bd8:	e0bfff17 	ldw	r2,-4(fp)
     bdc:	10800317 	ldw	r2,12(r2)
     be0:	1009883a 	mov	r4,r2
     be4:	0000a6c0 	call	a6c <flipBytes>
     be8:	1007883a 	mov	r3,r2
     bec:	e0bfff17 	ldw	r2,-4(fp)
     bf0:	10c00315 	stw	r3,12(r2)
}
     bf4:	0001883a 	nop
     bf8:	e037883a 	mov	sp,fp
     bfc:	dfc00117 	ldw	ra,4(sp)
     c00:	df000017 	ldw	fp,0(sp)
     c04:	dec00204 	addi	sp,sp,8
     c08:	f800283a 	ret

00000c0c <readLabelFileHeader>:
/**
 * @details Read MNIST label file header
 * @see http://yann.lecun.com/exdb/mnist/ for definition details
 */

void readLabelFileHeader(FILE *imageFile, MNIST_LabelFileHeader *lfh){
     c0c:	defffc04 	addi	sp,sp,-16
     c10:	dfc00315 	stw	ra,12(sp)
     c14:	df000215 	stw	fp,8(sp)
     c18:	df000204 	addi	fp,sp,8
     c1c:	e13ffe15 	stw	r4,-8(fp)
     c20:	e17fff15 	stw	r5,-4(fp)
    
    lfh->magicNumber =0;
     c24:	e0bfff17 	ldw	r2,-4(fp)
     c28:	10000015 	stw	zero,0(r2)
    lfh->maxImages   =0;
     c2c:	e0bfff17 	ldw	r2,-4(fp)
     c30:	10000115 	stw	zero,4(r2)
    
    fread(&lfh->magicNumber, 4, 1, imageFile);
     c34:	e0bfff17 	ldw	r2,-4(fp)
     c38:	e1fffe17 	ldw	r7,-8(fp)
     c3c:	01800044 	movi	r6,1
     c40:	01400104 	movi	r5,4
     c44:	1009883a 	mov	r4,r2
     c48:	00041400 	call	4140 <fread>
    lfh->magicNumber = flipBytes(lfh->magicNumber);
     c4c:	e0bfff17 	ldw	r2,-4(fp)
     c50:	10800017 	ldw	r2,0(r2)
     c54:	1009883a 	mov	r4,r2
     c58:	0000a6c0 	call	a6c <flipBytes>
     c5c:	1007883a 	mov	r3,r2
     c60:	e0bfff17 	ldw	r2,-4(fp)
     c64:	10c00015 	stw	r3,0(r2)
    
    fread(&lfh->maxImages, 4, 1, imageFile);
     c68:	e0bfff17 	ldw	r2,-4(fp)
     c6c:	10800104 	addi	r2,r2,4
     c70:	e1fffe17 	ldw	r7,-8(fp)
     c74:	01800044 	movi	r6,1
     c78:	01400104 	movi	r5,4
     c7c:	1009883a 	mov	r4,r2
     c80:	00041400 	call	4140 <fread>
    lfh->maxImages = flipBytes(lfh->maxImages);
     c84:	e0bfff17 	ldw	r2,-4(fp)
     c88:	10800117 	ldw	r2,4(r2)
     c8c:	1009883a 	mov	r4,r2
     c90:	0000a6c0 	call	a6c <flipBytes>
     c94:	1007883a 	mov	r3,r2
     c98:	e0bfff17 	ldw	r2,-4(fp)
     c9c:	10c00115 	stw	r3,4(r2)
    
}
     ca0:	0001883a 	nop
     ca4:	e037883a 	mov	sp,fp
     ca8:	dfc00117 	ldw	ra,4(sp)
     cac:	df000017 	ldw	fp,0(sp)
     cb0:	dec00204 	addi	sp,sp,8
     cb4:	f800283a 	ret

00000cb8 <openMNISTImageFile>:
 * @details Open MNIST image file and read header info
 * by reading the header info, the read pointer
 * is moved to the position of the 1st IMAGE
 */

FILE *openMNISTImageFile(char *fileName){
     cb8:	defff804 	addi	sp,sp,-32
     cbc:	dfc00715 	stw	ra,28(sp)
     cc0:	df000615 	stw	fp,24(sp)
     cc4:	df000604 	addi	fp,sp,24
     cc8:	e13fff15 	stw	r4,-4(fp)

    FILE *imageFile;
    imageFile = fopen (fileName, "rb");
     ccc:	01400074 	movhi	r5,1
     cd0:	29442004 	addi	r5,r5,4224
     cd4:	e13fff17 	ldw	r4,-4(fp)
     cd8:	0003eec0 	call	3eec <fopen>
     cdc:	e0bffa15 	stw	r2,-24(fp)
    if (imageFile == NULL) {
     ce0:	e0bffa17 	ldw	r2,-24(fp)
     ce4:	1000061e 	bne	r2,zero,d00 <openMNISTImageFile+0x48>
        printf("Abort! Could not fine MNIST IMAGE file: %s\n",fileName);
     ce8:	e17fff17 	ldw	r5,-4(fp)
     cec:	01000074 	movhi	r4,1
     cf0:	21042104 	addi	r4,r4,4228
     cf4:	00058d40 	call	58d4 <printf>
        exit(0);
     cf8:	0009883a 	mov	r4,zero
     cfc:	00036640 	call	3664 <exit>
    }

    MNIST_ImageFileHeader imageFileHeader;
    readImageFileHeader(imageFile, &imageFileHeader);
     d00:	e0bffb04 	addi	r2,fp,-20
     d04:	100b883a 	mov	r5,r2
     d08:	e13ffa17 	ldw	r4,-24(fp)
     d0c:	0000ae00 	call	ae0 <readImageFileHeader>
    
    return imageFile;
     d10:	e0bffa17 	ldw	r2,-24(fp)
}
     d14:	e037883a 	mov	sp,fp
     d18:	dfc00117 	ldw	ra,4(sp)
     d1c:	df000017 	ldw	fp,0(sp)
     d20:	dec00204 	addi	sp,sp,8
     d24:	f800283a 	ret

00000d28 <openMNISTLabelFile>:
 * @details Open MNIST label file and read header info
 * by reading the header info, the read pointer
 * is moved to the position of the 1st LABEL
 */

FILE *openMNISTLabelFile(char *fileName){
     d28:	defffa04 	addi	sp,sp,-24
     d2c:	dfc00515 	stw	ra,20(sp)
     d30:	df000415 	stw	fp,16(sp)
     d34:	df000404 	addi	fp,sp,16
     d38:	e13fff15 	stw	r4,-4(fp)
    
    FILE *labelFile;
    labelFile = fopen (fileName, "rb");
     d3c:	01400074 	movhi	r5,1
     d40:	29442004 	addi	r5,r5,4224
     d44:	e13fff17 	ldw	r4,-4(fp)
     d48:	0003eec0 	call	3eec <fopen>
     d4c:	e0bffc15 	stw	r2,-16(fp)
    if (labelFile == NULL) {
     d50:	e0bffc17 	ldw	r2,-16(fp)
     d54:	1000061e 	bne	r2,zero,d70 <openMNISTLabelFile+0x48>
        printf("Abort! Could not find MNIST LABEL file: %s\n",fileName);
     d58:	e17fff17 	ldw	r5,-4(fp)
     d5c:	01000074 	movhi	r4,1
     d60:	21042c04 	addi	r4,r4,4272
     d64:	00058d40 	call	58d4 <printf>
        exit(0);
     d68:	0009883a 	mov	r4,zero
     d6c:	00036640 	call	3664 <exit>
    }

    MNIST_LabelFileHeader labelFileHeader;
    readLabelFileHeader(labelFile, &labelFileHeader);
     d70:	e0bffd04 	addi	r2,fp,-12
     d74:	100b883a 	mov	r5,r2
     d78:	e13ffc17 	ldw	r4,-16(fp)
     d7c:	0000c0c0 	call	c0c <readLabelFileHeader>
    
    return labelFile;
     d80:	e0bffc17 	ldw	r2,-16(fp)
}
     d84:	e037883a 	mov	sp,fp
     d88:	dfc00117 	ldw	ra,4(sp)
     d8c:	df000017 	ldw	fp,0(sp)
     d90:	dec00204 	addi	sp,sp,8
     d94:	f800283a 	ret

00000d98 <getImage>:

/**
 * @details Returns the next image in the given MNIST image file
 */

MNIST_Image getImage(FILE *imageFile){
     d98:	deff3704 	addi	sp,sp,-804
     d9c:	dfc0c815 	stw	ra,800(sp)
     da0:	df00c715 	stw	fp,796(sp)
     da4:	df00c704 	addi	fp,sp,796
     da8:	e13ffe15 	stw	r4,-8(fp)
     dac:	e17fff15 	stw	r5,-4(fp)
    
    MNIST_Image img;
    size_t result;
    result = fread(&img, sizeof(img), 1, imageFile);
     db0:	e0bf3a04 	addi	r2,fp,-792
     db4:	e1ffff17 	ldw	r7,-4(fp)
     db8:	01800044 	movi	r6,1
     dbc:	0140c404 	movi	r5,784
     dc0:	1009883a 	mov	r4,r2
     dc4:	00041400 	call	4140 <fread>
     dc8:	e0bf3915 	stw	r2,-796(fp)
    if (result!=1) {
     dcc:	e0bf3917 	ldw	r2,-796(fp)
     dd0:	10800060 	cmpeqi	r2,r2,1
     dd4:	1000051e 	bne	r2,zero,dec <getImage+0x54>
        printf("\nError when reading IMAGE file! Abort!\n");
     dd8:	01000074 	movhi	r4,1
     ddc:	21043704 	addi	r4,r4,4316
     de0:	00059d00 	call	59d0 <puts>
        exit(1);
     de4:	01000044 	movi	r4,1
     de8:	00036640 	call	3664 <exit>
    }
    
    return img;
     dec:	e0bffe17 	ldw	r2,-8(fp)
     df0:	1009883a 	mov	r4,r2
     df4:	e0bf3a04 	addi	r2,fp,-792
     df8:	00c0c404 	movi	r3,784
     dfc:	180d883a 	mov	r6,r3
     e00:	100b883a 	mov	r5,r2
     e04:	00055d40 	call	55d4 <memcpy>
}
     e08:	e0bffe17 	ldw	r2,-8(fp)
     e0c:	e037883a 	mov	sp,fp
     e10:	dfc00117 	ldw	ra,4(sp)
     e14:	df000017 	ldw	fp,0(sp)
     e18:	dec00204 	addi	sp,sp,8
     e1c:	f800283a 	ret

00000e20 <getLabel>:

/**
 * @details Returns the next label in the given MNIST label file
 */

MNIST_Label getLabel(FILE *labelFile){
     e20:	defffb04 	addi	sp,sp,-20
     e24:	dfc00415 	stw	ra,16(sp)
     e28:	df000315 	stw	fp,12(sp)
     e2c:	df000304 	addi	fp,sp,12
     e30:	e13fff15 	stw	r4,-4(fp)
    
    MNIST_Label lbl;
    size_t result;
    result = fread(&lbl, sizeof(lbl), 1, labelFile);
     e34:	e0bffe04 	addi	r2,fp,-8
     e38:	e1ffff17 	ldw	r7,-4(fp)
     e3c:	01800044 	movi	r6,1
     e40:	01400044 	movi	r5,1
     e44:	1009883a 	mov	r4,r2
     e48:	00041400 	call	4140 <fread>
     e4c:	e0bffd15 	stw	r2,-12(fp)
    if (result!=1) {
     e50:	e0bffd17 	ldw	r2,-12(fp)
     e54:	10800060 	cmpeqi	r2,r2,1
     e58:	1000051e 	bne	r2,zero,e70 <getLabel+0x50>
        printf("\nError when reading LABEL file! Abort!\n");
     e5c:	01000074 	movhi	r4,1
     e60:	21044104 	addi	r4,r4,4356
     e64:	00059d00 	call	59d0 <puts>
        exit(1);
     e68:	01000044 	movi	r4,1
     e6c:	00036640 	call	3664 <exit>
    }
    
    return lbl;
     e70:	e0bffe03 	ldbu	r2,-8(fp)
}
     e74:	e037883a 	mov	sp,fp
     e78:	dfc00117 	ldw	ra,4(sp)
     e7c:	df000017 	ldw	fp,0(sp)
     e80:	dec00204 	addi	sp,sp,8
     e84:	f800283a 	ret

00000e88 <__mulsi3>:
     e88:	0005883a 	mov	r2,zero
     e8c:	20000726 	beq	r4,zero,eac <__mulsi3+0x24>
     e90:	20c0004c 	andi	r3,r4,1
     e94:	2008d07a 	srli	r4,r4,1
     e98:	18000126 	beq	r3,zero,ea0 <__mulsi3+0x18>
     e9c:	1145883a 	add	r2,r2,r5
     ea0:	294b883a 	add	r5,r5,r5
     ea4:	203ffa1e 	bne	r4,zero,e90 <__alt_data_end+0xfffe0e90>
     ea8:	f800283a 	ret
     eac:	f800283a 	ret

00000eb0 <__adddf3>:
     eb0:	02c00434 	movhi	r11,16
     eb4:	5affffc4 	addi	r11,r11,-1
     eb8:	2806d7fa 	srli	r3,r5,31
     ebc:	2ad4703a 	and	r10,r5,r11
     ec0:	3ad2703a 	and	r9,r7,r11
     ec4:	3804d53a 	srli	r2,r7,20
     ec8:	3018d77a 	srli	r12,r6,29
     ecc:	280ad53a 	srli	r5,r5,20
     ed0:	501490fa 	slli	r10,r10,3
     ed4:	2010d77a 	srli	r8,r4,29
     ed8:	481290fa 	slli	r9,r9,3
     edc:	380ed7fa 	srli	r7,r7,31
     ee0:	defffb04 	addi	sp,sp,-20
     ee4:	dc800215 	stw	r18,8(sp)
     ee8:	dc400115 	stw	r17,4(sp)
     eec:	dc000015 	stw	r16,0(sp)
     ef0:	dfc00415 	stw	ra,16(sp)
     ef4:	dcc00315 	stw	r19,12(sp)
     ef8:	1c803fcc 	andi	r18,r3,255
     efc:	2c01ffcc 	andi	r16,r5,2047
     f00:	5210b03a 	or	r8,r10,r8
     f04:	202290fa 	slli	r17,r4,3
     f08:	1081ffcc 	andi	r2,r2,2047
     f0c:	4b12b03a 	or	r9,r9,r12
     f10:	300c90fa 	slli	r6,r6,3
     f14:	91c07526 	beq	r18,r7,10ec <__adddf3+0x23c>
     f18:	8087c83a 	sub	r3,r16,r2
     f1c:	00c0ab0e 	bge	zero,r3,11cc <__adddf3+0x31c>
     f20:	10002a1e 	bne	r2,zero,fcc <__adddf3+0x11c>
     f24:	4984b03a 	or	r2,r9,r6
     f28:	1000961e 	bne	r2,zero,1184 <__adddf3+0x2d4>
     f2c:	888001cc 	andi	r2,r17,7
     f30:	10000726 	beq	r2,zero,f50 <__adddf3+0xa0>
     f34:	888003cc 	andi	r2,r17,15
     f38:	00c00104 	movi	r3,4
     f3c:	10c00426 	beq	r2,r3,f50 <__adddf3+0xa0>
     f40:	88c7883a 	add	r3,r17,r3
     f44:	1c63803a 	cmpltu	r17,r3,r17
     f48:	4451883a 	add	r8,r8,r17
     f4c:	1823883a 	mov	r17,r3
     f50:	4080202c 	andhi	r2,r8,128
     f54:	10005926 	beq	r2,zero,10bc <__adddf3+0x20c>
     f58:	84000044 	addi	r16,r16,1
     f5c:	0081ffc4 	movi	r2,2047
     f60:	8080ba26 	beq	r16,r2,124c <__adddf3+0x39c>
     f64:	00bfe034 	movhi	r2,65408
     f68:	10bfffc4 	addi	r2,r2,-1
     f6c:	4090703a 	and	r8,r8,r2
     f70:	4004977a 	slli	r2,r8,29
     f74:	4010927a 	slli	r8,r8,9
     f78:	8822d0fa 	srli	r17,r17,3
     f7c:	8401ffcc 	andi	r16,r16,2047
     f80:	4010d33a 	srli	r8,r8,12
     f84:	9007883a 	mov	r3,r18
     f88:	1444b03a 	or	r2,r2,r17
     f8c:	8401ffcc 	andi	r16,r16,2047
     f90:	8020953a 	slli	r16,r16,20
     f94:	18c03fcc 	andi	r3,r3,255
     f98:	01000434 	movhi	r4,16
     f9c:	213fffc4 	addi	r4,r4,-1
     fa0:	180697fa 	slli	r3,r3,31
     fa4:	4110703a 	and	r8,r8,r4
     fa8:	4410b03a 	or	r8,r8,r16
     fac:	40c6b03a 	or	r3,r8,r3
     fb0:	dfc00417 	ldw	ra,16(sp)
     fb4:	dcc00317 	ldw	r19,12(sp)
     fb8:	dc800217 	ldw	r18,8(sp)
     fbc:	dc400117 	ldw	r17,4(sp)
     fc0:	dc000017 	ldw	r16,0(sp)
     fc4:	dec00504 	addi	sp,sp,20
     fc8:	f800283a 	ret
     fcc:	0081ffc4 	movi	r2,2047
     fd0:	80bfd626 	beq	r16,r2,f2c <__alt_data_end+0xfffe0f2c>
     fd4:	4a402034 	orhi	r9,r9,128
     fd8:	00800e04 	movi	r2,56
     fdc:	10c09f16 	blt	r2,r3,125c <__adddf3+0x3ac>
     fe0:	008007c4 	movi	r2,31
     fe4:	10c0c216 	blt	r2,r3,12f0 <__adddf3+0x440>
     fe8:	00800804 	movi	r2,32
     fec:	10c5c83a 	sub	r2,r2,r3
     ff0:	488a983a 	sll	r5,r9,r2
     ff4:	30c8d83a 	srl	r4,r6,r3
     ff8:	3084983a 	sll	r2,r6,r2
     ffc:	48c6d83a 	srl	r3,r9,r3
    1000:	290cb03a 	or	r6,r5,r4
    1004:	1004c03a 	cmpne	r2,r2,zero
    1008:	308cb03a 	or	r6,r6,r2
    100c:	898dc83a 	sub	r6,r17,r6
    1010:	89a3803a 	cmpltu	r17,r17,r6
    1014:	40d1c83a 	sub	r8,r8,r3
    1018:	4451c83a 	sub	r8,r8,r17
    101c:	3023883a 	mov	r17,r6
    1020:	4080202c 	andhi	r2,r8,128
    1024:	10002326 	beq	r2,zero,10b4 <__adddf3+0x204>
    1028:	04c02034 	movhi	r19,128
    102c:	9cffffc4 	addi	r19,r19,-1
    1030:	44e6703a 	and	r19,r8,r19
    1034:	98007626 	beq	r19,zero,1210 <__adddf3+0x360>
    1038:	9809883a 	mov	r4,r19
    103c:	000344c0 	call	344c <__clzsi2>
    1040:	10fffe04 	addi	r3,r2,-8
    1044:	010007c4 	movi	r4,31
    1048:	20c07716 	blt	r4,r3,1228 <__adddf3+0x378>
    104c:	00800804 	movi	r2,32
    1050:	10c5c83a 	sub	r2,r2,r3
    1054:	8884d83a 	srl	r2,r17,r2
    1058:	98d0983a 	sll	r8,r19,r3
    105c:	88e2983a 	sll	r17,r17,r3
    1060:	1204b03a 	or	r2,r2,r8
    1064:	1c007416 	blt	r3,r16,1238 <__adddf3+0x388>
    1068:	1c21c83a 	sub	r16,r3,r16
    106c:	82000044 	addi	r8,r16,1
    1070:	00c007c4 	movi	r3,31
    1074:	1a009116 	blt	r3,r8,12bc <__adddf3+0x40c>
    1078:	00c00804 	movi	r3,32
    107c:	1a07c83a 	sub	r3,r3,r8
    1080:	8a08d83a 	srl	r4,r17,r8
    1084:	88e2983a 	sll	r17,r17,r3
    1088:	10c6983a 	sll	r3,r2,r3
    108c:	1210d83a 	srl	r8,r2,r8
    1090:	8804c03a 	cmpne	r2,r17,zero
    1094:	1906b03a 	or	r3,r3,r4
    1098:	18a2b03a 	or	r17,r3,r2
    109c:	0021883a 	mov	r16,zero
    10a0:	003fa206 	br	f2c <__alt_data_end+0xfffe0f2c>
    10a4:	1890b03a 	or	r8,r3,r2
    10a8:	40017d26 	beq	r8,zero,16a0 <__adddf3+0x7f0>
    10ac:	1011883a 	mov	r8,r2
    10b0:	1823883a 	mov	r17,r3
    10b4:	888001cc 	andi	r2,r17,7
    10b8:	103f9e1e 	bne	r2,zero,f34 <__alt_data_end+0xfffe0f34>
    10bc:	4004977a 	slli	r2,r8,29
    10c0:	8822d0fa 	srli	r17,r17,3
    10c4:	4010d0fa 	srli	r8,r8,3
    10c8:	9007883a 	mov	r3,r18
    10cc:	1444b03a 	or	r2,r2,r17
    10d0:	0101ffc4 	movi	r4,2047
    10d4:	81002426 	beq	r16,r4,1168 <__adddf3+0x2b8>
    10d8:	8120703a 	and	r16,r16,r4
    10dc:	01000434 	movhi	r4,16
    10e0:	213fffc4 	addi	r4,r4,-1
    10e4:	4110703a 	and	r8,r8,r4
    10e8:	003fa806 	br	f8c <__alt_data_end+0xfffe0f8c>
    10ec:	8089c83a 	sub	r4,r16,r2
    10f0:	01005e0e 	bge	zero,r4,126c <__adddf3+0x3bc>
    10f4:	10002b26 	beq	r2,zero,11a4 <__adddf3+0x2f4>
    10f8:	0081ffc4 	movi	r2,2047
    10fc:	80bf8b26 	beq	r16,r2,f2c <__alt_data_end+0xfffe0f2c>
    1100:	4a402034 	orhi	r9,r9,128
    1104:	00800e04 	movi	r2,56
    1108:	1100a40e 	bge	r2,r4,139c <__adddf3+0x4ec>
    110c:	498cb03a 	or	r6,r9,r6
    1110:	300ac03a 	cmpne	r5,r6,zero
    1114:	0013883a 	mov	r9,zero
    1118:	2c4b883a 	add	r5,r5,r17
    111c:	2c63803a 	cmpltu	r17,r5,r17
    1120:	4a11883a 	add	r8,r9,r8
    1124:	8a11883a 	add	r8,r17,r8
    1128:	2823883a 	mov	r17,r5
    112c:	4080202c 	andhi	r2,r8,128
    1130:	103fe026 	beq	r2,zero,10b4 <__alt_data_end+0xfffe10b4>
    1134:	84000044 	addi	r16,r16,1
    1138:	0081ffc4 	movi	r2,2047
    113c:	8080d226 	beq	r16,r2,1488 <__adddf3+0x5d8>
    1140:	00bfe034 	movhi	r2,65408
    1144:	10bfffc4 	addi	r2,r2,-1
    1148:	4090703a 	and	r8,r8,r2
    114c:	880ad07a 	srli	r5,r17,1
    1150:	400897fa 	slli	r4,r8,31
    1154:	88c0004c 	andi	r3,r17,1
    1158:	28e2b03a 	or	r17,r5,r3
    115c:	4010d07a 	srli	r8,r8,1
    1160:	2462b03a 	or	r17,r4,r17
    1164:	003f7106 	br	f2c <__alt_data_end+0xfffe0f2c>
    1168:	4088b03a 	or	r4,r8,r2
    116c:	20014526 	beq	r4,zero,1684 <__adddf3+0x7d4>
    1170:	01000434 	movhi	r4,16
    1174:	42000234 	orhi	r8,r8,8
    1178:	213fffc4 	addi	r4,r4,-1
    117c:	4110703a 	and	r8,r8,r4
    1180:	003f8206 	br	f8c <__alt_data_end+0xfffe0f8c>
    1184:	18ffffc4 	addi	r3,r3,-1
    1188:	1800491e 	bne	r3,zero,12b0 <__adddf3+0x400>
    118c:	898bc83a 	sub	r5,r17,r6
    1190:	8963803a 	cmpltu	r17,r17,r5
    1194:	4251c83a 	sub	r8,r8,r9
    1198:	4451c83a 	sub	r8,r8,r17
    119c:	2823883a 	mov	r17,r5
    11a0:	003f9f06 	br	1020 <__alt_data_end+0xfffe1020>
    11a4:	4984b03a 	or	r2,r9,r6
    11a8:	103f6026 	beq	r2,zero,f2c <__alt_data_end+0xfffe0f2c>
    11ac:	213fffc4 	addi	r4,r4,-1
    11b0:	2000931e 	bne	r4,zero,1400 <__adddf3+0x550>
    11b4:	898d883a 	add	r6,r17,r6
    11b8:	3463803a 	cmpltu	r17,r6,r17
    11bc:	4251883a 	add	r8,r8,r9
    11c0:	8a11883a 	add	r8,r17,r8
    11c4:	3023883a 	mov	r17,r6
    11c8:	003fd806 	br	112c <__alt_data_end+0xfffe112c>
    11cc:	1800541e 	bne	r3,zero,1320 <__adddf3+0x470>
    11d0:	80800044 	addi	r2,r16,1
    11d4:	1081ffcc 	andi	r2,r2,2047
    11d8:	00c00044 	movi	r3,1
    11dc:	1880a00e 	bge	r3,r2,1460 <__adddf3+0x5b0>
    11e0:	8989c83a 	sub	r4,r17,r6
    11e4:	8905803a 	cmpltu	r2,r17,r4
    11e8:	4267c83a 	sub	r19,r8,r9
    11ec:	98a7c83a 	sub	r19,r19,r2
    11f0:	9880202c 	andhi	r2,r19,128
    11f4:	10006326 	beq	r2,zero,1384 <__adddf3+0x4d4>
    11f8:	3463c83a 	sub	r17,r6,r17
    11fc:	4a07c83a 	sub	r3,r9,r8
    1200:	344d803a 	cmpltu	r6,r6,r17
    1204:	19a7c83a 	sub	r19,r3,r6
    1208:	3825883a 	mov	r18,r7
    120c:	983f8a1e 	bne	r19,zero,1038 <__alt_data_end+0xfffe1038>
    1210:	8809883a 	mov	r4,r17
    1214:	000344c0 	call	344c <__clzsi2>
    1218:	10800804 	addi	r2,r2,32
    121c:	10fffe04 	addi	r3,r2,-8
    1220:	010007c4 	movi	r4,31
    1224:	20ff890e 	bge	r4,r3,104c <__alt_data_end+0xfffe104c>
    1228:	10bff604 	addi	r2,r2,-40
    122c:	8884983a 	sll	r2,r17,r2
    1230:	0023883a 	mov	r17,zero
    1234:	1c3f8c0e 	bge	r3,r16,1068 <__alt_data_end+0xfffe1068>
    1238:	023fe034 	movhi	r8,65408
    123c:	423fffc4 	addi	r8,r8,-1
    1240:	80e1c83a 	sub	r16,r16,r3
    1244:	1210703a 	and	r8,r2,r8
    1248:	003f3806 	br	f2c <__alt_data_end+0xfffe0f2c>
    124c:	9007883a 	mov	r3,r18
    1250:	0011883a 	mov	r8,zero
    1254:	0005883a 	mov	r2,zero
    1258:	003f4c06 	br	f8c <__alt_data_end+0xfffe0f8c>
    125c:	498cb03a 	or	r6,r9,r6
    1260:	300cc03a 	cmpne	r6,r6,zero
    1264:	0007883a 	mov	r3,zero
    1268:	003f6806 	br	100c <__alt_data_end+0xfffe100c>
    126c:	20009c1e 	bne	r4,zero,14e0 <__adddf3+0x630>
    1270:	80800044 	addi	r2,r16,1
    1274:	1141ffcc 	andi	r5,r2,2047
    1278:	01000044 	movi	r4,1
    127c:	2140670e 	bge	r4,r5,141c <__adddf3+0x56c>
    1280:	0101ffc4 	movi	r4,2047
    1284:	11007f26 	beq	r2,r4,1484 <__adddf3+0x5d4>
    1288:	898d883a 	add	r6,r17,r6
    128c:	4247883a 	add	r3,r8,r9
    1290:	3451803a 	cmpltu	r8,r6,r17
    1294:	40d1883a 	add	r8,r8,r3
    1298:	402297fa 	slli	r17,r8,31
    129c:	300cd07a 	srli	r6,r6,1
    12a0:	4010d07a 	srli	r8,r8,1
    12a4:	1021883a 	mov	r16,r2
    12a8:	89a2b03a 	or	r17,r17,r6
    12ac:	003f1f06 	br	f2c <__alt_data_end+0xfffe0f2c>
    12b0:	0081ffc4 	movi	r2,2047
    12b4:	80bf481e 	bne	r16,r2,fd8 <__alt_data_end+0xfffe0fd8>
    12b8:	003f1c06 	br	f2c <__alt_data_end+0xfffe0f2c>
    12bc:	843ff844 	addi	r16,r16,-31
    12c0:	01000804 	movi	r4,32
    12c4:	1406d83a 	srl	r3,r2,r16
    12c8:	41005026 	beq	r8,r4,140c <__adddf3+0x55c>
    12cc:	01001004 	movi	r4,64
    12d0:	2211c83a 	sub	r8,r4,r8
    12d4:	1204983a 	sll	r2,r2,r8
    12d8:	88a2b03a 	or	r17,r17,r2
    12dc:	8822c03a 	cmpne	r17,r17,zero
    12e0:	1c62b03a 	or	r17,r3,r17
    12e4:	0011883a 	mov	r8,zero
    12e8:	0021883a 	mov	r16,zero
    12ec:	003f7106 	br	10b4 <__alt_data_end+0xfffe10b4>
    12f0:	193ff804 	addi	r4,r3,-32
    12f4:	00800804 	movi	r2,32
    12f8:	4908d83a 	srl	r4,r9,r4
    12fc:	18804526 	beq	r3,r2,1414 <__adddf3+0x564>
    1300:	00801004 	movi	r2,64
    1304:	10c5c83a 	sub	r2,r2,r3
    1308:	4886983a 	sll	r3,r9,r2
    130c:	198cb03a 	or	r6,r3,r6
    1310:	300cc03a 	cmpne	r6,r6,zero
    1314:	218cb03a 	or	r6,r4,r6
    1318:	0007883a 	mov	r3,zero
    131c:	003f3b06 	br	100c <__alt_data_end+0xfffe100c>
    1320:	80002a26 	beq	r16,zero,13cc <__adddf3+0x51c>
    1324:	0101ffc4 	movi	r4,2047
    1328:	11006826 	beq	r2,r4,14cc <__adddf3+0x61c>
    132c:	00c7c83a 	sub	r3,zero,r3
    1330:	42002034 	orhi	r8,r8,128
    1334:	01000e04 	movi	r4,56
    1338:	20c07c16 	blt	r4,r3,152c <__adddf3+0x67c>
    133c:	010007c4 	movi	r4,31
    1340:	20c0da16 	blt	r4,r3,16ac <__adddf3+0x7fc>
    1344:	01000804 	movi	r4,32
    1348:	20c9c83a 	sub	r4,r4,r3
    134c:	4114983a 	sll	r10,r8,r4
    1350:	88cad83a 	srl	r5,r17,r3
    1354:	8908983a 	sll	r4,r17,r4
    1358:	40c6d83a 	srl	r3,r8,r3
    135c:	5162b03a 	or	r17,r10,r5
    1360:	2008c03a 	cmpne	r4,r4,zero
    1364:	8922b03a 	or	r17,r17,r4
    1368:	3463c83a 	sub	r17,r6,r17
    136c:	48c7c83a 	sub	r3,r9,r3
    1370:	344d803a 	cmpltu	r6,r6,r17
    1374:	1991c83a 	sub	r8,r3,r6
    1378:	1021883a 	mov	r16,r2
    137c:	3825883a 	mov	r18,r7
    1380:	003f2706 	br	1020 <__alt_data_end+0xfffe1020>
    1384:	24d0b03a 	or	r8,r4,r19
    1388:	40001b1e 	bne	r8,zero,13f8 <__adddf3+0x548>
    138c:	0005883a 	mov	r2,zero
    1390:	0007883a 	mov	r3,zero
    1394:	0021883a 	mov	r16,zero
    1398:	003f4d06 	br	10d0 <__alt_data_end+0xfffe10d0>
    139c:	008007c4 	movi	r2,31
    13a0:	11003c16 	blt	r2,r4,1494 <__adddf3+0x5e4>
    13a4:	00800804 	movi	r2,32
    13a8:	1105c83a 	sub	r2,r2,r4
    13ac:	488e983a 	sll	r7,r9,r2
    13b0:	310ad83a 	srl	r5,r6,r4
    13b4:	3084983a 	sll	r2,r6,r2
    13b8:	4912d83a 	srl	r9,r9,r4
    13bc:	394ab03a 	or	r5,r7,r5
    13c0:	1004c03a 	cmpne	r2,r2,zero
    13c4:	288ab03a 	or	r5,r5,r2
    13c8:	003f5306 	br	1118 <__alt_data_end+0xfffe1118>
    13cc:	4448b03a 	or	r4,r8,r17
    13d0:	20003e26 	beq	r4,zero,14cc <__adddf3+0x61c>
    13d4:	00c6303a 	nor	r3,zero,r3
    13d8:	18003a1e 	bne	r3,zero,14c4 <__adddf3+0x614>
    13dc:	3463c83a 	sub	r17,r6,r17
    13e0:	4a07c83a 	sub	r3,r9,r8
    13e4:	344d803a 	cmpltu	r6,r6,r17
    13e8:	1991c83a 	sub	r8,r3,r6
    13ec:	1021883a 	mov	r16,r2
    13f0:	3825883a 	mov	r18,r7
    13f4:	003f0a06 	br	1020 <__alt_data_end+0xfffe1020>
    13f8:	2023883a 	mov	r17,r4
    13fc:	003f0d06 	br	1034 <__alt_data_end+0xfffe1034>
    1400:	0081ffc4 	movi	r2,2047
    1404:	80bf3f1e 	bne	r16,r2,1104 <__alt_data_end+0xfffe1104>
    1408:	003ec806 	br	f2c <__alt_data_end+0xfffe0f2c>
    140c:	0005883a 	mov	r2,zero
    1410:	003fb106 	br	12d8 <__alt_data_end+0xfffe12d8>
    1414:	0007883a 	mov	r3,zero
    1418:	003fbc06 	br	130c <__alt_data_end+0xfffe130c>
    141c:	4444b03a 	or	r2,r8,r17
    1420:	8000871e 	bne	r16,zero,1640 <__adddf3+0x790>
    1424:	1000ba26 	beq	r2,zero,1710 <__adddf3+0x860>
    1428:	4984b03a 	or	r2,r9,r6
    142c:	103ebf26 	beq	r2,zero,f2c <__alt_data_end+0xfffe0f2c>
    1430:	8985883a 	add	r2,r17,r6
    1434:	4247883a 	add	r3,r8,r9
    1438:	1451803a 	cmpltu	r8,r2,r17
    143c:	40d1883a 	add	r8,r8,r3
    1440:	40c0202c 	andhi	r3,r8,128
    1444:	1023883a 	mov	r17,r2
    1448:	183f1a26 	beq	r3,zero,10b4 <__alt_data_end+0xfffe10b4>
    144c:	00bfe034 	movhi	r2,65408
    1450:	10bfffc4 	addi	r2,r2,-1
    1454:	2021883a 	mov	r16,r4
    1458:	4090703a 	and	r8,r8,r2
    145c:	003eb306 	br	f2c <__alt_data_end+0xfffe0f2c>
    1460:	4444b03a 	or	r2,r8,r17
    1464:	8000291e 	bne	r16,zero,150c <__adddf3+0x65c>
    1468:	10004b1e 	bne	r2,zero,1598 <__adddf3+0x6e8>
    146c:	4990b03a 	or	r8,r9,r6
    1470:	40008b26 	beq	r8,zero,16a0 <__adddf3+0x7f0>
    1474:	4811883a 	mov	r8,r9
    1478:	3023883a 	mov	r17,r6
    147c:	3825883a 	mov	r18,r7
    1480:	003eaa06 	br	f2c <__alt_data_end+0xfffe0f2c>
    1484:	1021883a 	mov	r16,r2
    1488:	0011883a 	mov	r8,zero
    148c:	0005883a 	mov	r2,zero
    1490:	003f0f06 	br	10d0 <__alt_data_end+0xfffe10d0>
    1494:	217ff804 	addi	r5,r4,-32
    1498:	00800804 	movi	r2,32
    149c:	494ad83a 	srl	r5,r9,r5
    14a0:	20807d26 	beq	r4,r2,1698 <__adddf3+0x7e8>
    14a4:	00801004 	movi	r2,64
    14a8:	1109c83a 	sub	r4,r2,r4
    14ac:	4912983a 	sll	r9,r9,r4
    14b0:	498cb03a 	or	r6,r9,r6
    14b4:	300cc03a 	cmpne	r6,r6,zero
    14b8:	298ab03a 	or	r5,r5,r6
    14bc:	0013883a 	mov	r9,zero
    14c0:	003f1506 	br	1118 <__alt_data_end+0xfffe1118>
    14c4:	0101ffc4 	movi	r4,2047
    14c8:	113f9a1e 	bne	r2,r4,1334 <__alt_data_end+0xfffe1334>
    14cc:	4811883a 	mov	r8,r9
    14d0:	3023883a 	mov	r17,r6
    14d4:	1021883a 	mov	r16,r2
    14d8:	3825883a 	mov	r18,r7
    14dc:	003e9306 	br	f2c <__alt_data_end+0xfffe0f2c>
    14e0:	8000161e 	bne	r16,zero,153c <__adddf3+0x68c>
    14e4:	444ab03a 	or	r5,r8,r17
    14e8:	28005126 	beq	r5,zero,1630 <__adddf3+0x780>
    14ec:	0108303a 	nor	r4,zero,r4
    14f0:	20004d1e 	bne	r4,zero,1628 <__adddf3+0x778>
    14f4:	89a3883a 	add	r17,r17,r6
    14f8:	4253883a 	add	r9,r8,r9
    14fc:	898d803a 	cmpltu	r6,r17,r6
    1500:	3251883a 	add	r8,r6,r9
    1504:	1021883a 	mov	r16,r2
    1508:	003f0806 	br	112c <__alt_data_end+0xfffe112c>
    150c:	1000301e 	bne	r2,zero,15d0 <__adddf3+0x720>
    1510:	4984b03a 	or	r2,r9,r6
    1514:	10007126 	beq	r2,zero,16dc <__adddf3+0x82c>
    1518:	4811883a 	mov	r8,r9
    151c:	3023883a 	mov	r17,r6
    1520:	3825883a 	mov	r18,r7
    1524:	0401ffc4 	movi	r16,2047
    1528:	003e8006 	br	f2c <__alt_data_end+0xfffe0f2c>
    152c:	4462b03a 	or	r17,r8,r17
    1530:	8822c03a 	cmpne	r17,r17,zero
    1534:	0007883a 	mov	r3,zero
    1538:	003f8b06 	br	1368 <__alt_data_end+0xfffe1368>
    153c:	0141ffc4 	movi	r5,2047
    1540:	11403b26 	beq	r2,r5,1630 <__adddf3+0x780>
    1544:	0109c83a 	sub	r4,zero,r4
    1548:	42002034 	orhi	r8,r8,128
    154c:	01400e04 	movi	r5,56
    1550:	29006716 	blt	r5,r4,16f0 <__adddf3+0x840>
    1554:	014007c4 	movi	r5,31
    1558:	29007016 	blt	r5,r4,171c <__adddf3+0x86c>
    155c:	01400804 	movi	r5,32
    1560:	290bc83a 	sub	r5,r5,r4
    1564:	4154983a 	sll	r10,r8,r5
    1568:	890ed83a 	srl	r7,r17,r4
    156c:	894a983a 	sll	r5,r17,r5
    1570:	4108d83a 	srl	r4,r8,r4
    1574:	51e2b03a 	or	r17,r10,r7
    1578:	280ac03a 	cmpne	r5,r5,zero
    157c:	8962b03a 	or	r17,r17,r5
    1580:	89a3883a 	add	r17,r17,r6
    1584:	2253883a 	add	r9,r4,r9
    1588:	898d803a 	cmpltu	r6,r17,r6
    158c:	3251883a 	add	r8,r6,r9
    1590:	1021883a 	mov	r16,r2
    1594:	003ee506 	br	112c <__alt_data_end+0xfffe112c>
    1598:	4984b03a 	or	r2,r9,r6
    159c:	103e6326 	beq	r2,zero,f2c <__alt_data_end+0xfffe0f2c>
    15a0:	8987c83a 	sub	r3,r17,r6
    15a4:	88c9803a 	cmpltu	r4,r17,r3
    15a8:	4245c83a 	sub	r2,r8,r9
    15ac:	1105c83a 	sub	r2,r2,r4
    15b0:	1100202c 	andhi	r4,r2,128
    15b4:	203ebb26 	beq	r4,zero,10a4 <__alt_data_end+0xfffe10a4>
    15b8:	3463c83a 	sub	r17,r6,r17
    15bc:	4a07c83a 	sub	r3,r9,r8
    15c0:	344d803a 	cmpltu	r6,r6,r17
    15c4:	1991c83a 	sub	r8,r3,r6
    15c8:	3825883a 	mov	r18,r7
    15cc:	003e5706 	br	f2c <__alt_data_end+0xfffe0f2c>
    15d0:	4984b03a 	or	r2,r9,r6
    15d4:	10002e26 	beq	r2,zero,1690 <__adddf3+0x7e0>
    15d8:	4004d0fa 	srli	r2,r8,3
    15dc:	8822d0fa 	srli	r17,r17,3
    15e0:	4010977a 	slli	r8,r8,29
    15e4:	10c0022c 	andhi	r3,r2,8
    15e8:	4462b03a 	or	r17,r8,r17
    15ec:	18000826 	beq	r3,zero,1610 <__adddf3+0x760>
    15f0:	4808d0fa 	srli	r4,r9,3
    15f4:	20c0022c 	andhi	r3,r4,8
    15f8:	1800051e 	bne	r3,zero,1610 <__adddf3+0x760>
    15fc:	300cd0fa 	srli	r6,r6,3
    1600:	4806977a 	slli	r3,r9,29
    1604:	2005883a 	mov	r2,r4
    1608:	3825883a 	mov	r18,r7
    160c:	19a2b03a 	or	r17,r3,r6
    1610:	8810d77a 	srli	r8,r17,29
    1614:	100490fa 	slli	r2,r2,3
    1618:	882290fa 	slli	r17,r17,3
    161c:	0401ffc4 	movi	r16,2047
    1620:	4090b03a 	or	r8,r8,r2
    1624:	003e4106 	br	f2c <__alt_data_end+0xfffe0f2c>
    1628:	0141ffc4 	movi	r5,2047
    162c:	117fc71e 	bne	r2,r5,154c <__alt_data_end+0xfffe154c>
    1630:	4811883a 	mov	r8,r9
    1634:	3023883a 	mov	r17,r6
    1638:	1021883a 	mov	r16,r2
    163c:	003e3b06 	br	f2c <__alt_data_end+0xfffe0f2c>
    1640:	10002f26 	beq	r2,zero,1700 <__adddf3+0x850>
    1644:	4984b03a 	or	r2,r9,r6
    1648:	10001126 	beq	r2,zero,1690 <__adddf3+0x7e0>
    164c:	4004d0fa 	srli	r2,r8,3
    1650:	8822d0fa 	srli	r17,r17,3
    1654:	4010977a 	slli	r8,r8,29
    1658:	10c0022c 	andhi	r3,r2,8
    165c:	4462b03a 	or	r17,r8,r17
    1660:	183feb26 	beq	r3,zero,1610 <__alt_data_end+0xfffe1610>
    1664:	4808d0fa 	srli	r4,r9,3
    1668:	20c0022c 	andhi	r3,r4,8
    166c:	183fe81e 	bne	r3,zero,1610 <__alt_data_end+0xfffe1610>
    1670:	300cd0fa 	srli	r6,r6,3
    1674:	4806977a 	slli	r3,r9,29
    1678:	2005883a 	mov	r2,r4
    167c:	19a2b03a 	or	r17,r3,r6
    1680:	003fe306 	br	1610 <__alt_data_end+0xfffe1610>
    1684:	0011883a 	mov	r8,zero
    1688:	0005883a 	mov	r2,zero
    168c:	003e3f06 	br	f8c <__alt_data_end+0xfffe0f8c>
    1690:	0401ffc4 	movi	r16,2047
    1694:	003e2506 	br	f2c <__alt_data_end+0xfffe0f2c>
    1698:	0013883a 	mov	r9,zero
    169c:	003f8406 	br	14b0 <__alt_data_end+0xfffe14b0>
    16a0:	0005883a 	mov	r2,zero
    16a4:	0007883a 	mov	r3,zero
    16a8:	003e8906 	br	10d0 <__alt_data_end+0xfffe10d0>
    16ac:	197ff804 	addi	r5,r3,-32
    16b0:	01000804 	movi	r4,32
    16b4:	414ad83a 	srl	r5,r8,r5
    16b8:	19002426 	beq	r3,r4,174c <__adddf3+0x89c>
    16bc:	01001004 	movi	r4,64
    16c0:	20c7c83a 	sub	r3,r4,r3
    16c4:	40c6983a 	sll	r3,r8,r3
    16c8:	1c46b03a 	or	r3,r3,r17
    16cc:	1806c03a 	cmpne	r3,r3,zero
    16d0:	28e2b03a 	or	r17,r5,r3
    16d4:	0007883a 	mov	r3,zero
    16d8:	003f2306 	br	1368 <__alt_data_end+0xfffe1368>
    16dc:	0007883a 	mov	r3,zero
    16e0:	5811883a 	mov	r8,r11
    16e4:	00bfffc4 	movi	r2,-1
    16e8:	0401ffc4 	movi	r16,2047
    16ec:	003e7806 	br	10d0 <__alt_data_end+0xfffe10d0>
    16f0:	4462b03a 	or	r17,r8,r17
    16f4:	8822c03a 	cmpne	r17,r17,zero
    16f8:	0009883a 	mov	r4,zero
    16fc:	003fa006 	br	1580 <__alt_data_end+0xfffe1580>
    1700:	4811883a 	mov	r8,r9
    1704:	3023883a 	mov	r17,r6
    1708:	0401ffc4 	movi	r16,2047
    170c:	003e0706 	br	f2c <__alt_data_end+0xfffe0f2c>
    1710:	4811883a 	mov	r8,r9
    1714:	3023883a 	mov	r17,r6
    1718:	003e0406 	br	f2c <__alt_data_end+0xfffe0f2c>
    171c:	21fff804 	addi	r7,r4,-32
    1720:	01400804 	movi	r5,32
    1724:	41ced83a 	srl	r7,r8,r7
    1728:	21400a26 	beq	r4,r5,1754 <__adddf3+0x8a4>
    172c:	01401004 	movi	r5,64
    1730:	2909c83a 	sub	r4,r5,r4
    1734:	4108983a 	sll	r4,r8,r4
    1738:	2448b03a 	or	r4,r4,r17
    173c:	2008c03a 	cmpne	r4,r4,zero
    1740:	3922b03a 	or	r17,r7,r4
    1744:	0009883a 	mov	r4,zero
    1748:	003f8d06 	br	1580 <__alt_data_end+0xfffe1580>
    174c:	0007883a 	mov	r3,zero
    1750:	003fdd06 	br	16c8 <__alt_data_end+0xfffe16c8>
    1754:	0009883a 	mov	r4,zero
    1758:	003ff706 	br	1738 <__alt_data_end+0xfffe1738>

0000175c <__divdf3>:
    175c:	defff004 	addi	sp,sp,-64
    1760:	dc800815 	stw	r18,32(sp)
    1764:	2824d53a 	srli	r18,r5,20
    1768:	dd800c15 	stw	r22,48(sp)
    176c:	282cd7fa 	srli	r22,r5,31
    1770:	dc000615 	stw	r16,24(sp)
    1774:	04000434 	movhi	r16,16
    1778:	843fffc4 	addi	r16,r16,-1
    177c:	dfc00f15 	stw	ra,60(sp)
    1780:	df000e15 	stw	fp,56(sp)
    1784:	ddc00d15 	stw	r23,52(sp)
    1788:	dd400b15 	stw	r21,44(sp)
    178c:	dd000a15 	stw	r20,40(sp)
    1790:	dcc00915 	stw	r19,36(sp)
    1794:	dc400715 	stw	r17,28(sp)
    1798:	9481ffcc 	andi	r18,r18,2047
    179c:	2c20703a 	and	r16,r5,r16
    17a0:	b2003fcc 	andi	r8,r22,255
    17a4:	90006126 	beq	r18,zero,192c <__divdf3+0x1d0>
    17a8:	0081ffc4 	movi	r2,2047
    17ac:	202b883a 	mov	r21,r4
    17b0:	90803726 	beq	r18,r2,1890 <__divdf3+0x134>
    17b4:	80800434 	orhi	r2,r16,16
    17b8:	100490fa 	slli	r2,r2,3
    17bc:	2020d77a 	srli	r16,r4,29
    17c0:	202a90fa 	slli	r21,r4,3
    17c4:	94bf0044 	addi	r18,r18,-1023
    17c8:	80a0b03a 	or	r16,r16,r2
    17cc:	0013883a 	mov	r9,zero
    17d0:	000b883a 	mov	r5,zero
    17d4:	3806d53a 	srli	r3,r7,20
    17d8:	382ed7fa 	srli	r23,r7,31
    17dc:	04400434 	movhi	r17,16
    17e0:	8c7fffc4 	addi	r17,r17,-1
    17e4:	18c1ffcc 	andi	r3,r3,2047
    17e8:	3029883a 	mov	r20,r6
    17ec:	3c62703a 	and	r17,r7,r17
    17f0:	bf003fcc 	andi	fp,r23,255
    17f4:	18006e26 	beq	r3,zero,19b0 <__divdf3+0x254>
    17f8:	0081ffc4 	movi	r2,2047
    17fc:	18806626 	beq	r3,r2,1998 <__divdf3+0x23c>
    1800:	88800434 	orhi	r2,r17,16
    1804:	100490fa 	slli	r2,r2,3
    1808:	3022d77a 	srli	r17,r6,29
    180c:	302890fa 	slli	r20,r6,3
    1810:	18ff0044 	addi	r3,r3,-1023
    1814:	88a2b03a 	or	r17,r17,r2
    1818:	000f883a 	mov	r7,zero
    181c:	b5e6f03a 	xor	r19,r22,r23
    1820:	3a4cb03a 	or	r6,r7,r9
    1824:	008003c4 	movi	r2,15
    1828:	9809883a 	mov	r4,r19
    182c:	90c7c83a 	sub	r3,r18,r3
    1830:	9cc03fcc 	andi	r19,r19,255
    1834:	11809636 	bltu	r2,r6,1a90 <__divdf3+0x334>
    1838:	300c90ba 	slli	r6,r6,2
    183c:	00800034 	movhi	r2,0
    1840:	10861404 	addi	r2,r2,6224
    1844:	308d883a 	add	r6,r6,r2
    1848:	30800017 	ldw	r2,0(r6)
    184c:	1000683a 	jmp	r2
    1850:	00001a90 	cmplti	zero,zero,106
    1854:	000018c8 	cmpgei	zero,zero,99
    1858:	00001a80 	call	1a8 <alt_irq_handler+0xac>
    185c:	000018bc 	xorhi	zero,zero,98
    1860:	00001a80 	call	1a8 <alt_irq_handler+0xac>
    1864:	00001a54 	movui	zero,105
    1868:	00001a80 	call	1a8 <alt_irq_handler+0xac>
    186c:	000018bc 	xorhi	zero,zero,98
    1870:	000018c8 	cmpgei	zero,zero,99
    1874:	000018c8 	cmpgei	zero,zero,99
    1878:	00001a54 	movui	zero,105
    187c:	000018bc 	xorhi	zero,zero,98
    1880:	000018ac 	andhi	zero,zero,98
    1884:	000018ac 	andhi	zero,zero,98
    1888:	000018ac 	andhi	zero,zero,98
    188c:	00001e18 	cmpnei	zero,zero,120
    1890:	2404b03a 	or	r2,r4,r16
    1894:	10006c1e 	bne	r2,zero,1a48 <__divdf3+0x2ec>
    1898:	02400204 	movi	r9,8
    189c:	0021883a 	mov	r16,zero
    18a0:	002b883a 	mov	r21,zero
    18a4:	01400084 	movi	r5,2
    18a8:	003fca06 	br	17d4 <__alt_data_end+0xfffe17d4>
    18ac:	8023883a 	mov	r17,r16
    18b0:	a829883a 	mov	r20,r21
    18b4:	4039883a 	mov	fp,r8
    18b8:	280f883a 	mov	r7,r5
    18bc:	00800084 	movi	r2,2
    18c0:	3881601e 	bne	r7,r2,1e44 <__divdf3+0x6e8>
    18c4:	e027883a 	mov	r19,fp
    18c8:	9900004c 	andi	r4,r19,1
    18cc:	0081ffc4 	movi	r2,2047
    18d0:	0021883a 	mov	r16,zero
    18d4:	002b883a 	mov	r21,zero
    18d8:	1004953a 	slli	r2,r2,20
    18dc:	20c03fcc 	andi	r3,r4,255
    18e0:	01400434 	movhi	r5,16
    18e4:	297fffc4 	addi	r5,r5,-1
    18e8:	180697fa 	slli	r3,r3,31
    18ec:	8160703a 	and	r16,r16,r5
    18f0:	80a0b03a 	or	r16,r16,r2
    18f4:	80c6b03a 	or	r3,r16,r3
    18f8:	a805883a 	mov	r2,r21
    18fc:	dfc00f17 	ldw	ra,60(sp)
    1900:	df000e17 	ldw	fp,56(sp)
    1904:	ddc00d17 	ldw	r23,52(sp)
    1908:	dd800c17 	ldw	r22,48(sp)
    190c:	dd400b17 	ldw	r21,44(sp)
    1910:	dd000a17 	ldw	r20,40(sp)
    1914:	dcc00917 	ldw	r19,36(sp)
    1918:	dc800817 	ldw	r18,32(sp)
    191c:	dc400717 	ldw	r17,28(sp)
    1920:	dc000617 	ldw	r16,24(sp)
    1924:	dec01004 	addi	sp,sp,64
    1928:	f800283a 	ret
    192c:	2404b03a 	or	r2,r4,r16
    1930:	2023883a 	mov	r17,r4
    1934:	10003f26 	beq	r2,zero,1a34 <__divdf3+0x2d8>
    1938:	80015e26 	beq	r16,zero,1eb4 <__divdf3+0x758>
    193c:	8009883a 	mov	r4,r16
    1940:	d9800215 	stw	r6,8(sp)
    1944:	d9c00515 	stw	r7,20(sp)
    1948:	da000415 	stw	r8,16(sp)
    194c:	000344c0 	call	344c <__clzsi2>
    1950:	d9800217 	ldw	r6,8(sp)
    1954:	d9c00517 	ldw	r7,20(sp)
    1958:	da000417 	ldw	r8,16(sp)
    195c:	113ffd44 	addi	r4,r2,-11
    1960:	00c00704 	movi	r3,28
    1964:	19014f16 	blt	r3,r4,1ea4 <__divdf3+0x748>
    1968:	00c00744 	movi	r3,29
    196c:	157ffe04 	addi	r21,r2,-8
    1970:	1907c83a 	sub	r3,r3,r4
    1974:	8560983a 	sll	r16,r16,r21
    1978:	88c6d83a 	srl	r3,r17,r3
    197c:	8d6a983a 	sll	r21,r17,r21
    1980:	1c20b03a 	or	r16,r3,r16
    1984:	1080fcc4 	addi	r2,r2,1011
    1988:	00a5c83a 	sub	r18,zero,r2
    198c:	0013883a 	mov	r9,zero
    1990:	000b883a 	mov	r5,zero
    1994:	003f8f06 	br	17d4 <__alt_data_end+0xfffe17d4>
    1998:	3444b03a 	or	r2,r6,r17
    199c:	1000231e 	bne	r2,zero,1a2c <__divdf3+0x2d0>
    19a0:	0023883a 	mov	r17,zero
    19a4:	0029883a 	mov	r20,zero
    19a8:	01c00084 	movi	r7,2
    19ac:	003f9b06 	br	181c <__alt_data_end+0xfffe181c>
    19b0:	3444b03a 	or	r2,r6,r17
    19b4:	10001926 	beq	r2,zero,1a1c <__divdf3+0x2c0>
    19b8:	88014b26 	beq	r17,zero,1ee8 <__divdf3+0x78c>
    19bc:	8809883a 	mov	r4,r17
    19c0:	d9400115 	stw	r5,4(sp)
    19c4:	d9800215 	stw	r6,8(sp)
    19c8:	da000415 	stw	r8,16(sp)
    19cc:	da400315 	stw	r9,12(sp)
    19d0:	000344c0 	call	344c <__clzsi2>
    19d4:	d9400117 	ldw	r5,4(sp)
    19d8:	d9800217 	ldw	r6,8(sp)
    19dc:	da000417 	ldw	r8,16(sp)
    19e0:	da400317 	ldw	r9,12(sp)
    19e4:	113ffd44 	addi	r4,r2,-11
    19e8:	00c00704 	movi	r3,28
    19ec:	19013a16 	blt	r3,r4,1ed8 <__divdf3+0x77c>
    19f0:	00c00744 	movi	r3,29
    19f4:	153ffe04 	addi	r20,r2,-8
    19f8:	1907c83a 	sub	r3,r3,r4
    19fc:	8d22983a 	sll	r17,r17,r20
    1a00:	30c6d83a 	srl	r3,r6,r3
    1a04:	3528983a 	sll	r20,r6,r20
    1a08:	1c62b03a 	or	r17,r3,r17
    1a0c:	1080fcc4 	addi	r2,r2,1011
    1a10:	0087c83a 	sub	r3,zero,r2
    1a14:	000f883a 	mov	r7,zero
    1a18:	003f8006 	br	181c <__alt_data_end+0xfffe181c>
    1a1c:	0023883a 	mov	r17,zero
    1a20:	0029883a 	mov	r20,zero
    1a24:	01c00044 	movi	r7,1
    1a28:	003f7c06 	br	181c <__alt_data_end+0xfffe181c>
    1a2c:	01c000c4 	movi	r7,3
    1a30:	003f7a06 	br	181c <__alt_data_end+0xfffe181c>
    1a34:	02400104 	movi	r9,4
    1a38:	0021883a 	mov	r16,zero
    1a3c:	002b883a 	mov	r21,zero
    1a40:	01400044 	movi	r5,1
    1a44:	003f6306 	br	17d4 <__alt_data_end+0xfffe17d4>
    1a48:	02400304 	movi	r9,12
    1a4c:	014000c4 	movi	r5,3
    1a50:	003f6006 	br	17d4 <__alt_data_end+0xfffe17d4>
    1a54:	04000434 	movhi	r16,16
    1a58:	0009883a 	mov	r4,zero
    1a5c:	843fffc4 	addi	r16,r16,-1
    1a60:	057fffc4 	movi	r21,-1
    1a64:	0081ffc4 	movi	r2,2047
    1a68:	003f9b06 	br	18d8 <__alt_data_end+0xfffe18d8>
    1a6c:	00c00044 	movi	r3,1
    1a70:	1887c83a 	sub	r3,r3,r2
    1a74:	01000e04 	movi	r4,56
    1a78:	20c1530e 	bge	r4,r3,1fc8 <__divdf3+0x86c>
    1a7c:	9900004c 	andi	r4,r19,1
    1a80:	0005883a 	mov	r2,zero
    1a84:	0021883a 	mov	r16,zero
    1a88:	002b883a 	mov	r21,zero
    1a8c:	003f9206 	br	18d8 <__alt_data_end+0xfffe18d8>
    1a90:	8c012e36 	bltu	r17,r16,1f4c <__divdf3+0x7f0>
    1a94:	84412c26 	beq	r16,r17,1f48 <__divdf3+0x7ec>
    1a98:	a82f883a 	mov	r23,r21
    1a9c:	18ffffc4 	addi	r3,r3,-1
    1aa0:	002b883a 	mov	r21,zero
    1aa4:	a004d63a 	srli	r2,r20,24
    1aa8:	8822923a 	slli	r17,r17,8
    1aac:	a028923a 	slli	r20,r20,8
    1ab0:	8009883a 	mov	r4,r16
    1ab4:	88acb03a 	or	r22,r17,r2
    1ab8:	dd000015 	stw	r20,0(sp)
    1abc:	b028d43a 	srli	r20,r22,16
    1ac0:	d8c00215 	stw	r3,8(sp)
    1ac4:	b4bfffcc 	andi	r18,r22,65535
    1ac8:	a00b883a 	mov	r5,r20
    1acc:	00035a80 	call	35a8 <__udivsi3>
    1ad0:	100b883a 	mov	r5,r2
    1ad4:	9009883a 	mov	r4,r18
    1ad8:	1023883a 	mov	r17,r2
    1adc:	0000e880 	call	e88 <__mulsi3>
    1ae0:	8009883a 	mov	r4,r16
    1ae4:	a00b883a 	mov	r5,r20
    1ae8:	1039883a 	mov	fp,r2
    1aec:	000360c0 	call	360c <__umodsi3>
    1af0:	1004943a 	slli	r2,r2,16
    1af4:	b808d43a 	srli	r4,r23,16
    1af8:	d8c00217 	ldw	r3,8(sp)
    1afc:	2084b03a 	or	r2,r4,r2
    1b00:	1700062e 	bgeu	r2,fp,1b1c <__divdf3+0x3c0>
    1b04:	1585883a 	add	r2,r2,r22
    1b08:	893fffc4 	addi	r4,r17,-1
    1b0c:	15811d36 	bltu	r2,r22,1f84 <__divdf3+0x828>
    1b10:	17011c2e 	bgeu	r2,fp,1f84 <__divdf3+0x828>
    1b14:	8c7fff84 	addi	r17,r17,-2
    1b18:	1585883a 	add	r2,r2,r22
    1b1c:	1739c83a 	sub	fp,r2,fp
    1b20:	a00b883a 	mov	r5,r20
    1b24:	e009883a 	mov	r4,fp
    1b28:	d8c00215 	stw	r3,8(sp)
    1b2c:	00035a80 	call	35a8 <__udivsi3>
    1b30:	100b883a 	mov	r5,r2
    1b34:	9009883a 	mov	r4,r18
    1b38:	1021883a 	mov	r16,r2
    1b3c:	0000e880 	call	e88 <__mulsi3>
    1b40:	a00b883a 	mov	r5,r20
    1b44:	e009883a 	mov	r4,fp
    1b48:	d8800415 	stw	r2,16(sp)
    1b4c:	000360c0 	call	360c <__umodsi3>
    1b50:	1004943a 	slli	r2,r2,16
    1b54:	da000417 	ldw	r8,16(sp)
    1b58:	bdffffcc 	andi	r23,r23,65535
    1b5c:	b884b03a 	or	r2,r23,r2
    1b60:	d8c00217 	ldw	r3,8(sp)
    1b64:	1200062e 	bgeu	r2,r8,1b80 <__divdf3+0x424>
    1b68:	1585883a 	add	r2,r2,r22
    1b6c:	813fffc4 	addi	r4,r16,-1
    1b70:	15810236 	bltu	r2,r22,1f7c <__divdf3+0x820>
    1b74:	1201012e 	bgeu	r2,r8,1f7c <__divdf3+0x820>
    1b78:	843fff84 	addi	r16,r16,-2
    1b7c:	1585883a 	add	r2,r2,r22
    1b80:	8822943a 	slli	r17,r17,16
    1b84:	d9800017 	ldw	r6,0(sp)
    1b88:	1211c83a 	sub	r8,r2,r8
    1b8c:	8c22b03a 	or	r17,r17,r16
    1b90:	373fffcc 	andi	fp,r6,65535
    1b94:	8abfffcc 	andi	r10,r17,65535
    1b98:	8820d43a 	srli	r16,r17,16
    1b9c:	5009883a 	mov	r4,r10
    1ba0:	e00b883a 	mov	r5,fp
    1ba4:	302ed43a 	srli	r23,r6,16
    1ba8:	d8c00215 	stw	r3,8(sp)
    1bac:	da000415 	stw	r8,16(sp)
    1bb0:	da800115 	stw	r10,4(sp)
    1bb4:	0000e880 	call	e88 <__mulsi3>
    1bb8:	800b883a 	mov	r5,r16
    1bbc:	e009883a 	mov	r4,fp
    1bc0:	d8800515 	stw	r2,20(sp)
    1bc4:	0000e880 	call	e88 <__mulsi3>
    1bc8:	8009883a 	mov	r4,r16
    1bcc:	b80b883a 	mov	r5,r23
    1bd0:	d8800315 	stw	r2,12(sp)
    1bd4:	0000e880 	call	e88 <__mulsi3>
    1bd8:	da800117 	ldw	r10,4(sp)
    1bdc:	b80b883a 	mov	r5,r23
    1be0:	1021883a 	mov	r16,r2
    1be4:	5009883a 	mov	r4,r10
    1be8:	0000e880 	call	e88 <__mulsi3>
    1bec:	d9c00517 	ldw	r7,20(sp)
    1bf0:	da400317 	ldw	r9,12(sp)
    1bf4:	d8c00217 	ldw	r3,8(sp)
    1bf8:	3808d43a 	srli	r4,r7,16
    1bfc:	1245883a 	add	r2,r2,r9
    1c00:	da000417 	ldw	r8,16(sp)
    1c04:	2085883a 	add	r2,r4,r2
    1c08:	1240022e 	bgeu	r2,r9,1c14 <__divdf3+0x4b8>
    1c0c:	01000074 	movhi	r4,1
    1c10:	8121883a 	add	r16,r16,r4
    1c14:	1008d43a 	srli	r4,r2,16
    1c18:	1004943a 	slli	r2,r2,16
    1c1c:	39ffffcc 	andi	r7,r7,65535
    1c20:	2409883a 	add	r4,r4,r16
    1c24:	11c5883a 	add	r2,r2,r7
    1c28:	4100bb36 	bltu	r8,r4,1f18 <__divdf3+0x7bc>
    1c2c:	4100d726 	beq	r8,r4,1f8c <__divdf3+0x830>
    1c30:	4109c83a 	sub	r4,r8,r4
    1c34:	a8a1c83a 	sub	r16,r21,r2
    1c38:	ac2b803a 	cmpltu	r21,r21,r16
    1c3c:	256bc83a 	sub	r21,r4,r21
    1c40:	b540d926 	beq	r22,r21,1fa8 <__divdf3+0x84c>
    1c44:	a00b883a 	mov	r5,r20
    1c48:	a809883a 	mov	r4,r21
    1c4c:	d8c00215 	stw	r3,8(sp)
    1c50:	00035a80 	call	35a8 <__udivsi3>
    1c54:	100b883a 	mov	r5,r2
    1c58:	9009883a 	mov	r4,r18
    1c5c:	d8800515 	stw	r2,20(sp)
    1c60:	0000e880 	call	e88 <__mulsi3>
    1c64:	a809883a 	mov	r4,r21
    1c68:	a00b883a 	mov	r5,r20
    1c6c:	d8800415 	stw	r2,16(sp)
    1c70:	000360c0 	call	360c <__umodsi3>
    1c74:	1004943a 	slli	r2,r2,16
    1c78:	8008d43a 	srli	r4,r16,16
    1c7c:	da000417 	ldw	r8,16(sp)
    1c80:	d8c00217 	ldw	r3,8(sp)
    1c84:	2084b03a 	or	r2,r4,r2
    1c88:	d9c00517 	ldw	r7,20(sp)
    1c8c:	1200062e 	bgeu	r2,r8,1ca8 <__divdf3+0x54c>
    1c90:	1585883a 	add	r2,r2,r22
    1c94:	393fffc4 	addi	r4,r7,-1
    1c98:	1580c536 	bltu	r2,r22,1fb0 <__divdf3+0x854>
    1c9c:	1200c42e 	bgeu	r2,r8,1fb0 <__divdf3+0x854>
    1ca0:	39ffff84 	addi	r7,r7,-2
    1ca4:	1585883a 	add	r2,r2,r22
    1ca8:	122bc83a 	sub	r21,r2,r8
    1cac:	a00b883a 	mov	r5,r20
    1cb0:	a809883a 	mov	r4,r21
    1cb4:	d8c00215 	stw	r3,8(sp)
    1cb8:	d9c00515 	stw	r7,20(sp)
    1cbc:	00035a80 	call	35a8 <__udivsi3>
    1cc0:	9009883a 	mov	r4,r18
    1cc4:	100b883a 	mov	r5,r2
    1cc8:	d8800415 	stw	r2,16(sp)
    1ccc:	0000e880 	call	e88 <__mulsi3>
    1cd0:	a809883a 	mov	r4,r21
    1cd4:	a00b883a 	mov	r5,r20
    1cd8:	1025883a 	mov	r18,r2
    1cdc:	000360c0 	call	360c <__umodsi3>
    1ce0:	1004943a 	slli	r2,r2,16
    1ce4:	813fffcc 	andi	r4,r16,65535
    1ce8:	d8c00217 	ldw	r3,8(sp)
    1cec:	20a0b03a 	or	r16,r4,r2
    1cf0:	d9c00517 	ldw	r7,20(sp)
    1cf4:	da000417 	ldw	r8,16(sp)
    1cf8:	8480062e 	bgeu	r16,r18,1d14 <__divdf3+0x5b8>
    1cfc:	85a1883a 	add	r16,r16,r22
    1d00:	40bfffc4 	addi	r2,r8,-1
    1d04:	8580ac36 	bltu	r16,r22,1fb8 <__divdf3+0x85c>
    1d08:	8480ab2e 	bgeu	r16,r18,1fb8 <__divdf3+0x85c>
    1d0c:	423fff84 	addi	r8,r8,-2
    1d10:	85a1883a 	add	r16,r16,r22
    1d14:	3804943a 	slli	r2,r7,16
    1d18:	84a1c83a 	sub	r16,r16,r18
    1d1c:	e009883a 	mov	r4,fp
    1d20:	1228b03a 	or	r20,r2,r8
    1d24:	a1ffffcc 	andi	r7,r20,65535
    1d28:	a024d43a 	srli	r18,r20,16
    1d2c:	380b883a 	mov	r5,r7
    1d30:	d8c00215 	stw	r3,8(sp)
    1d34:	d9c00515 	stw	r7,20(sp)
    1d38:	0000e880 	call	e88 <__mulsi3>
    1d3c:	900b883a 	mov	r5,r18
    1d40:	e009883a 	mov	r4,fp
    1d44:	102b883a 	mov	r21,r2
    1d48:	0000e880 	call	e88 <__mulsi3>
    1d4c:	900b883a 	mov	r5,r18
    1d50:	b809883a 	mov	r4,r23
    1d54:	1039883a 	mov	fp,r2
    1d58:	0000e880 	call	e88 <__mulsi3>
    1d5c:	d9c00517 	ldw	r7,20(sp)
    1d60:	b80b883a 	mov	r5,r23
    1d64:	1025883a 	mov	r18,r2
    1d68:	3809883a 	mov	r4,r7
    1d6c:	0000e880 	call	e88 <__mulsi3>
    1d70:	a808d43a 	srli	r4,r21,16
    1d74:	1705883a 	add	r2,r2,fp
    1d78:	d8c00217 	ldw	r3,8(sp)
    1d7c:	2085883a 	add	r2,r4,r2
    1d80:	1700022e 	bgeu	r2,fp,1d8c <__divdf3+0x630>
    1d84:	01000074 	movhi	r4,1
    1d88:	9125883a 	add	r18,r18,r4
    1d8c:	1008d43a 	srli	r4,r2,16
    1d90:	1004943a 	slli	r2,r2,16
    1d94:	ad7fffcc 	andi	r21,r21,65535
    1d98:	2489883a 	add	r4,r4,r18
    1d9c:	1545883a 	add	r2,r2,r21
    1da0:	81003836 	bltu	r16,r4,1e84 <__divdf3+0x728>
    1da4:	81003626 	beq	r16,r4,1e80 <__divdf3+0x724>
    1da8:	a5000054 	ori	r20,r20,1
    1dac:	1880ffc4 	addi	r2,r3,1023
    1db0:	00bf2e0e 	bge	zero,r2,1a6c <__alt_data_end+0xfffe1a6c>
    1db4:	a10001cc 	andi	r4,r20,7
    1db8:	20000726 	beq	r4,zero,1dd8 <__divdf3+0x67c>
    1dbc:	a10003cc 	andi	r4,r20,15
    1dc0:	01400104 	movi	r5,4
    1dc4:	21400426 	beq	r4,r5,1dd8 <__divdf3+0x67c>
    1dc8:	a149883a 	add	r4,r20,r5
    1dcc:	2529803a 	cmpltu	r20,r4,r20
    1dd0:	8d23883a 	add	r17,r17,r20
    1dd4:	2029883a 	mov	r20,r4
    1dd8:	8900402c 	andhi	r4,r17,256
    1ddc:	20000426 	beq	r4,zero,1df0 <__divdf3+0x694>
    1de0:	18810004 	addi	r2,r3,1024
    1de4:	00ffc034 	movhi	r3,65280
    1de8:	18ffffc4 	addi	r3,r3,-1
    1dec:	88e2703a 	and	r17,r17,r3
    1df0:	00c1ff84 	movi	r3,2046
    1df4:	18beb416 	blt	r3,r2,18c8 <__alt_data_end+0xfffe18c8>
    1df8:	a028d0fa 	srli	r20,r20,3
    1dfc:	882a977a 	slli	r21,r17,29
    1e00:	8820927a 	slli	r16,r17,9
    1e04:	1081ffcc 	andi	r2,r2,2047
    1e08:	ad2ab03a 	or	r21,r21,r20
    1e0c:	8020d33a 	srli	r16,r16,12
    1e10:	9900004c 	andi	r4,r19,1
    1e14:	003eb006 	br	18d8 <__alt_data_end+0xfffe18d8>
    1e18:	8080022c 	andhi	r2,r16,8
    1e1c:	10001226 	beq	r2,zero,1e68 <__divdf3+0x70c>
    1e20:	8880022c 	andhi	r2,r17,8
    1e24:	1000101e 	bne	r2,zero,1e68 <__divdf3+0x70c>
    1e28:	00800434 	movhi	r2,16
    1e2c:	8c000234 	orhi	r16,r17,8
    1e30:	10bfffc4 	addi	r2,r2,-1
    1e34:	b809883a 	mov	r4,r23
    1e38:	80a0703a 	and	r16,r16,r2
    1e3c:	a02b883a 	mov	r21,r20
    1e40:	003f0806 	br	1a64 <__alt_data_end+0xfffe1a64>
    1e44:	008000c4 	movi	r2,3
    1e48:	3880b126 	beq	r7,r2,2110 <__divdf3+0x9b4>
    1e4c:	00800044 	movi	r2,1
    1e50:	38805b1e 	bne	r7,r2,1fc0 <__divdf3+0x864>
    1e54:	e009883a 	mov	r4,fp
    1e58:	0005883a 	mov	r2,zero
    1e5c:	0021883a 	mov	r16,zero
    1e60:	002b883a 	mov	r21,zero
    1e64:	003e9c06 	br	18d8 <__alt_data_end+0xfffe18d8>
    1e68:	00800434 	movhi	r2,16
    1e6c:	84000234 	orhi	r16,r16,8
    1e70:	10bfffc4 	addi	r2,r2,-1
    1e74:	b009883a 	mov	r4,r22
    1e78:	80a0703a 	and	r16,r16,r2
    1e7c:	003ef906 	br	1a64 <__alt_data_end+0xfffe1a64>
    1e80:	103fca26 	beq	r2,zero,1dac <__alt_data_end+0xfffe1dac>
    1e84:	b421883a 	add	r16,r22,r16
    1e88:	a17fffc4 	addi	r5,r20,-1
    1e8c:	8580422e 	bgeu	r16,r22,1f98 <__divdf3+0x83c>
    1e90:	2829883a 	mov	r20,r5
    1e94:	813fc41e 	bne	r16,r4,1da8 <__alt_data_end+0xfffe1da8>
    1e98:	d9800017 	ldw	r6,0(sp)
    1e9c:	30bfc21e 	bne	r6,r2,1da8 <__alt_data_end+0xfffe1da8>
    1ea0:	003fc206 	br	1dac <__alt_data_end+0xfffe1dac>
    1ea4:	143ff604 	addi	r16,r2,-40
    1ea8:	8c20983a 	sll	r16,r17,r16
    1eac:	002b883a 	mov	r21,zero
    1eb0:	003eb406 	br	1984 <__alt_data_end+0xfffe1984>
    1eb4:	d9800215 	stw	r6,8(sp)
    1eb8:	d9c00515 	stw	r7,20(sp)
    1ebc:	da000415 	stw	r8,16(sp)
    1ec0:	000344c0 	call	344c <__clzsi2>
    1ec4:	10800804 	addi	r2,r2,32
    1ec8:	da000417 	ldw	r8,16(sp)
    1ecc:	d9c00517 	ldw	r7,20(sp)
    1ed0:	d9800217 	ldw	r6,8(sp)
    1ed4:	003ea106 	br	195c <__alt_data_end+0xfffe195c>
    1ed8:	147ff604 	addi	r17,r2,-40
    1edc:	3462983a 	sll	r17,r6,r17
    1ee0:	0029883a 	mov	r20,zero
    1ee4:	003ec906 	br	1a0c <__alt_data_end+0xfffe1a0c>
    1ee8:	3009883a 	mov	r4,r6
    1eec:	d9400115 	stw	r5,4(sp)
    1ef0:	d9800215 	stw	r6,8(sp)
    1ef4:	da000415 	stw	r8,16(sp)
    1ef8:	da400315 	stw	r9,12(sp)
    1efc:	000344c0 	call	344c <__clzsi2>
    1f00:	10800804 	addi	r2,r2,32
    1f04:	da400317 	ldw	r9,12(sp)
    1f08:	da000417 	ldw	r8,16(sp)
    1f0c:	d9800217 	ldw	r6,8(sp)
    1f10:	d9400117 	ldw	r5,4(sp)
    1f14:	003eb306 	br	19e4 <__alt_data_end+0xfffe19e4>
    1f18:	d9800017 	ldw	r6,0(sp)
    1f1c:	a9ab883a 	add	r21,r21,r6
    1f20:	a98b803a 	cmpltu	r5,r21,r6
    1f24:	2d8b883a 	add	r5,r5,r22
    1f28:	2a11883a 	add	r8,r5,r8
    1f2c:	897fffc4 	addi	r5,r17,-1
    1f30:	b2000c2e 	bgeu	r22,r8,1f64 <__divdf3+0x808>
    1f34:	41003f36 	bltu	r8,r4,2034 <__divdf3+0x8d8>
    1f38:	22006c26 	beq	r4,r8,20ec <__divdf3+0x990>
    1f3c:	4109c83a 	sub	r4,r8,r4
    1f40:	2823883a 	mov	r17,r5
    1f44:	003f3b06 	br	1c34 <__alt_data_end+0xfffe1c34>
    1f48:	ad3ed336 	bltu	r21,r20,1a98 <__alt_data_end+0xfffe1a98>
    1f4c:	a804d07a 	srli	r2,r21,1
    1f50:	802e97fa 	slli	r23,r16,31
    1f54:	a82a97fa 	slli	r21,r21,31
    1f58:	8020d07a 	srli	r16,r16,1
    1f5c:	b8aeb03a 	or	r23,r23,r2
    1f60:	003ed006 	br	1aa4 <__alt_data_end+0xfffe1aa4>
    1f64:	b23ff51e 	bne	r22,r8,1f3c <__alt_data_end+0xfffe1f3c>
    1f68:	d9800017 	ldw	r6,0(sp)
    1f6c:	a9bff12e 	bgeu	r21,r6,1f34 <__alt_data_end+0xfffe1f34>
    1f70:	b109c83a 	sub	r4,r22,r4
    1f74:	2823883a 	mov	r17,r5
    1f78:	003f2e06 	br	1c34 <__alt_data_end+0xfffe1c34>
    1f7c:	2021883a 	mov	r16,r4
    1f80:	003eff06 	br	1b80 <__alt_data_end+0xfffe1b80>
    1f84:	2023883a 	mov	r17,r4
    1f88:	003ee406 	br	1b1c <__alt_data_end+0xfffe1b1c>
    1f8c:	a8bfe236 	bltu	r21,r2,1f18 <__alt_data_end+0xfffe1f18>
    1f90:	0009883a 	mov	r4,zero
    1f94:	003f2706 	br	1c34 <__alt_data_end+0xfffe1c34>
    1f98:	81002d36 	bltu	r16,r4,2050 <__divdf3+0x8f4>
    1f9c:	24005626 	beq	r4,r16,20f8 <__divdf3+0x99c>
    1fa0:	2829883a 	mov	r20,r5
    1fa4:	003f8006 	br	1da8 <__alt_data_end+0xfffe1da8>
    1fa8:	053fffc4 	movi	r20,-1
    1fac:	003f7f06 	br	1dac <__alt_data_end+0xfffe1dac>
    1fb0:	200f883a 	mov	r7,r4
    1fb4:	003f3c06 	br	1ca8 <__alt_data_end+0xfffe1ca8>
    1fb8:	1011883a 	mov	r8,r2
    1fbc:	003f5506 	br	1d14 <__alt_data_end+0xfffe1d14>
    1fc0:	e027883a 	mov	r19,fp
    1fc4:	003f7906 	br	1dac <__alt_data_end+0xfffe1dac>
    1fc8:	010007c4 	movi	r4,31
    1fcc:	20c02816 	blt	r4,r3,2070 <__divdf3+0x914>
    1fd0:	00800804 	movi	r2,32
    1fd4:	10c5c83a 	sub	r2,r2,r3
    1fd8:	888a983a 	sll	r5,r17,r2
    1fdc:	a0c8d83a 	srl	r4,r20,r3
    1fe0:	a084983a 	sll	r2,r20,r2
    1fe4:	88e2d83a 	srl	r17,r17,r3
    1fe8:	2906b03a 	or	r3,r5,r4
    1fec:	1004c03a 	cmpne	r2,r2,zero
    1ff0:	1886b03a 	or	r3,r3,r2
    1ff4:	188001cc 	andi	r2,r3,7
    1ff8:	10000726 	beq	r2,zero,2018 <__divdf3+0x8bc>
    1ffc:	188003cc 	andi	r2,r3,15
    2000:	01000104 	movi	r4,4
    2004:	11000426 	beq	r2,r4,2018 <__divdf3+0x8bc>
    2008:	1805883a 	mov	r2,r3
    200c:	10c00104 	addi	r3,r2,4
    2010:	1885803a 	cmpltu	r2,r3,r2
    2014:	88a3883a 	add	r17,r17,r2
    2018:	8880202c 	andhi	r2,r17,128
    201c:	10002926 	beq	r2,zero,20c4 <__divdf3+0x968>
    2020:	9900004c 	andi	r4,r19,1
    2024:	00800044 	movi	r2,1
    2028:	0021883a 	mov	r16,zero
    202c:	002b883a 	mov	r21,zero
    2030:	003e2906 	br	18d8 <__alt_data_end+0xfffe18d8>
    2034:	d9800017 	ldw	r6,0(sp)
    2038:	8c7fff84 	addi	r17,r17,-2
    203c:	a9ab883a 	add	r21,r21,r6
    2040:	a98b803a 	cmpltu	r5,r21,r6
    2044:	2d8b883a 	add	r5,r5,r22
    2048:	2a11883a 	add	r8,r5,r8
    204c:	003ef806 	br	1c30 <__alt_data_end+0xfffe1c30>
    2050:	d9800017 	ldw	r6,0(sp)
    2054:	318f883a 	add	r7,r6,r6
    2058:	398b803a 	cmpltu	r5,r7,r6
    205c:	2d8d883a 	add	r6,r5,r22
    2060:	81a1883a 	add	r16,r16,r6
    2064:	a17fff84 	addi	r5,r20,-2
    2068:	d9c00015 	stw	r7,0(sp)
    206c:	003f8806 	br	1e90 <__alt_data_end+0xfffe1e90>
    2070:	013ff844 	movi	r4,-31
    2074:	2085c83a 	sub	r2,r4,r2
    2078:	8888d83a 	srl	r4,r17,r2
    207c:	00800804 	movi	r2,32
    2080:	18802126 	beq	r3,r2,2108 <__divdf3+0x9ac>
    2084:	04001004 	movi	r16,64
    2088:	80c7c83a 	sub	r3,r16,r3
    208c:	88e0983a 	sll	r16,r17,r3
    2090:	8504b03a 	or	r2,r16,r20
    2094:	1004c03a 	cmpne	r2,r2,zero
    2098:	2084b03a 	or	r2,r4,r2
    209c:	144001cc 	andi	r17,r2,7
    20a0:	88000d1e 	bne	r17,zero,20d8 <__divdf3+0x97c>
    20a4:	0021883a 	mov	r16,zero
    20a8:	102ad0fa 	srli	r21,r2,3
    20ac:	9900004c 	andi	r4,r19,1
    20b0:	0005883a 	mov	r2,zero
    20b4:	ac6ab03a 	or	r21,r21,r17
    20b8:	003e0706 	br	18d8 <__alt_data_end+0xfffe18d8>
    20bc:	1007883a 	mov	r3,r2
    20c0:	0023883a 	mov	r17,zero
    20c4:	8820927a 	slli	r16,r17,9
    20c8:	1805883a 	mov	r2,r3
    20cc:	8822977a 	slli	r17,r17,29
    20d0:	8020d33a 	srli	r16,r16,12
    20d4:	003ff406 	br	20a8 <__alt_data_end+0xfffe20a8>
    20d8:	10c003cc 	andi	r3,r2,15
    20dc:	01000104 	movi	r4,4
    20e0:	193ff626 	beq	r3,r4,20bc <__alt_data_end+0xfffe20bc>
    20e4:	0023883a 	mov	r17,zero
    20e8:	003fc806 	br	200c <__alt_data_end+0xfffe200c>
    20ec:	a8bfd136 	bltu	r21,r2,2034 <__alt_data_end+0xfffe2034>
    20f0:	2823883a 	mov	r17,r5
    20f4:	003fa606 	br	1f90 <__alt_data_end+0xfffe1f90>
    20f8:	d9800017 	ldw	r6,0(sp)
    20fc:	30bfd436 	bltu	r6,r2,2050 <__alt_data_end+0xfffe2050>
    2100:	2829883a 	mov	r20,r5
    2104:	003f6406 	br	1e98 <__alt_data_end+0xfffe1e98>
    2108:	0021883a 	mov	r16,zero
    210c:	003fe006 	br	2090 <__alt_data_end+0xfffe2090>
    2110:	00800434 	movhi	r2,16
    2114:	8c000234 	orhi	r16,r17,8
    2118:	10bfffc4 	addi	r2,r2,-1
    211c:	e009883a 	mov	r4,fp
    2120:	80a0703a 	and	r16,r16,r2
    2124:	a02b883a 	mov	r21,r20
    2128:	003e4e06 	br	1a64 <__alt_data_end+0xfffe1a64>

0000212c <__gedf2>:
    212c:	2804d53a 	srli	r2,r5,20
    2130:	3806d53a 	srli	r3,r7,20
    2134:	02000434 	movhi	r8,16
    2138:	423fffc4 	addi	r8,r8,-1
    213c:	1081ffcc 	andi	r2,r2,2047
    2140:	0241ffc4 	movi	r9,2047
    2144:	2a14703a 	and	r10,r5,r8
    2148:	18c1ffcc 	andi	r3,r3,2047
    214c:	3a10703a 	and	r8,r7,r8
    2150:	280ad7fa 	srli	r5,r5,31
    2154:	380ed7fa 	srli	r7,r7,31
    2158:	12401d26 	beq	r2,r9,21d0 <__gedf2+0xa4>
    215c:	0241ffc4 	movi	r9,2047
    2160:	1a401226 	beq	r3,r9,21ac <__gedf2+0x80>
    2164:	1000081e 	bne	r2,zero,2188 <__gedf2+0x5c>
    2168:	2296b03a 	or	r11,r4,r10
    216c:	5813003a 	cmpeq	r9,r11,zero
    2170:	1800091e 	bne	r3,zero,2198 <__gedf2+0x6c>
    2174:	3218b03a 	or	r12,r6,r8
    2178:	6000071e 	bne	r12,zero,2198 <__gedf2+0x6c>
    217c:	0005883a 	mov	r2,zero
    2180:	5800101e 	bne	r11,zero,21c4 <__gedf2+0x98>
    2184:	f800283a 	ret
    2188:	18000c1e 	bne	r3,zero,21bc <__gedf2+0x90>
    218c:	3212b03a 	or	r9,r6,r8
    2190:	48000c26 	beq	r9,zero,21c4 <__gedf2+0x98>
    2194:	0013883a 	mov	r9,zero
    2198:	39c03fcc 	andi	r7,r7,255
    219c:	48000826 	beq	r9,zero,21c0 <__gedf2+0x94>
    21a0:	38000926 	beq	r7,zero,21c8 <__gedf2+0x9c>
    21a4:	00800044 	movi	r2,1
    21a8:	f800283a 	ret
    21ac:	3212b03a 	or	r9,r6,r8
    21b0:	483fec26 	beq	r9,zero,2164 <__alt_data_end+0xfffe2164>
    21b4:	00bfff84 	movi	r2,-2
    21b8:	f800283a 	ret
    21bc:	39c03fcc 	andi	r7,r7,255
    21c0:	29c00626 	beq	r5,r7,21dc <__gedf2+0xb0>
    21c4:	283ff726 	beq	r5,zero,21a4 <__alt_data_end+0xfffe21a4>
    21c8:	00bfffc4 	movi	r2,-1
    21cc:	f800283a 	ret
    21d0:	2292b03a 	or	r9,r4,r10
    21d4:	483fe126 	beq	r9,zero,215c <__alt_data_end+0xfffe215c>
    21d8:	003ff606 	br	21b4 <__alt_data_end+0xfffe21b4>
    21dc:	18bff916 	blt	r3,r2,21c4 <__alt_data_end+0xfffe21c4>
    21e0:	10c00316 	blt	r2,r3,21f0 <__gedf2+0xc4>
    21e4:	42bff736 	bltu	r8,r10,21c4 <__alt_data_end+0xfffe21c4>
    21e8:	52000326 	beq	r10,r8,21f8 <__gedf2+0xcc>
    21ec:	5200042e 	bgeu	r10,r8,2200 <__gedf2+0xd4>
    21f0:	283fec1e 	bne	r5,zero,21a4 <__alt_data_end+0xfffe21a4>
    21f4:	003ff406 	br	21c8 <__alt_data_end+0xfffe21c8>
    21f8:	313ff236 	bltu	r6,r4,21c4 <__alt_data_end+0xfffe21c4>
    21fc:	21bffc36 	bltu	r4,r6,21f0 <__alt_data_end+0xfffe21f0>
    2200:	0005883a 	mov	r2,zero
    2204:	f800283a 	ret

00002208 <__muldf3>:
    2208:	deffee04 	addi	sp,sp,-72
    220c:	dd000c15 	stw	r20,48(sp)
    2210:	2828d53a 	srli	r20,r5,20
    2214:	ddc00f15 	stw	r23,60(sp)
    2218:	282ed7fa 	srli	r23,r5,31
    221c:	dc000815 	stw	r16,32(sp)
    2220:	04000434 	movhi	r16,16
    2224:	dcc00b15 	stw	r19,44(sp)
    2228:	843fffc4 	addi	r16,r16,-1
    222c:	dfc01115 	stw	ra,68(sp)
    2230:	df001015 	stw	fp,64(sp)
    2234:	dd800e15 	stw	r22,56(sp)
    2238:	dd400d15 	stw	r21,52(sp)
    223c:	dc800a15 	stw	r18,40(sp)
    2240:	dc400915 	stw	r17,36(sp)
    2244:	a501ffcc 	andi	r20,r20,2047
    2248:	2c20703a 	and	r16,r5,r16
    224c:	b827883a 	mov	r19,r23
    2250:	ba403fcc 	andi	r9,r23,255
    2254:	a0006026 	beq	r20,zero,23d8 <__muldf3+0x1d0>
    2258:	0081ffc4 	movi	r2,2047
    225c:	202d883a 	mov	r22,r4
    2260:	a0803626 	beq	r20,r2,233c <__muldf3+0x134>
    2264:	84000434 	orhi	r16,r16,16
    2268:	200ad77a 	srli	r5,r4,29
    226c:	800490fa 	slli	r2,r16,3
    2270:	202c90fa 	slli	r22,r4,3
    2274:	a53f0044 	addi	r20,r20,-1023
    2278:	28a0b03a 	or	r16,r5,r2
    227c:	002b883a 	mov	r21,zero
    2280:	000b883a 	mov	r5,zero
    2284:	3804d53a 	srli	r2,r7,20
    2288:	3838d7fa 	srli	fp,r7,31
    228c:	04400434 	movhi	r17,16
    2290:	8c7fffc4 	addi	r17,r17,-1
    2294:	1081ffcc 	andi	r2,r2,2047
    2298:	3025883a 	mov	r18,r6
    229c:	3c62703a 	and	r17,r7,r17
    22a0:	e2803fcc 	andi	r10,fp,255
    22a4:	10006d26 	beq	r2,zero,245c <__muldf3+0x254>
    22a8:	00c1ffc4 	movi	r3,2047
    22ac:	10c06526 	beq	r2,r3,2444 <__muldf3+0x23c>
    22b0:	8c400434 	orhi	r17,r17,16
    22b4:	300ed77a 	srli	r7,r6,29
    22b8:	880690fa 	slli	r3,r17,3
    22bc:	302490fa 	slli	r18,r6,3
    22c0:	10bf0044 	addi	r2,r2,-1023
    22c4:	38e2b03a 	or	r17,r7,r3
    22c8:	000f883a 	mov	r7,zero
    22cc:	a087883a 	add	r3,r20,r2
    22d0:	010003c4 	movi	r4,15
    22d4:	3d44b03a 	or	r2,r7,r21
    22d8:	e5ccf03a 	xor	r6,fp,r23
    22dc:	1a000044 	addi	r8,r3,1
    22e0:	20809b36 	bltu	r4,r2,2550 <__muldf3+0x348>
    22e4:	100490ba 	slli	r2,r2,2
    22e8:	01000034 	movhi	r4,0
    22ec:	2108bf04 	addi	r4,r4,8956
    22f0:	1105883a 	add	r2,r2,r4
    22f4:	10800017 	ldw	r2,0(r2)
    22f8:	1000683a 	jmp	r2
    22fc:	00002550 	cmplti	zero,zero,149
    2300:	0000235c 	xori	zero,zero,141
    2304:	0000235c 	xori	zero,zero,141
    2308:	00002358 	cmpnei	zero,zero,141
    230c:	0000252c 	andhi	zero,zero,148
    2310:	0000252c 	andhi	zero,zero,148
    2314:	00002514 	movui	zero,148
    2318:	00002358 	cmpnei	zero,zero,141
    231c:	0000252c 	andhi	zero,zero,148
    2320:	00002514 	movui	zero,148
    2324:	0000252c 	andhi	zero,zero,148
    2328:	00002358 	cmpnei	zero,zero,141
    232c:	0000253c 	xorhi	zero,zero,148
    2330:	0000253c 	xorhi	zero,zero,148
    2334:	0000253c 	xorhi	zero,zero,148
    2338:	0000289c 	xori	zero,zero,162
    233c:	2404b03a 	or	r2,r4,r16
    2340:	1000711e 	bne	r2,zero,2508 <__muldf3+0x300>
    2344:	05400204 	movi	r21,8
    2348:	0021883a 	mov	r16,zero
    234c:	002d883a 	mov	r22,zero
    2350:	01400084 	movi	r5,2
    2354:	003fcb06 	br	2284 <__alt_data_end+0xfffe2284>
    2358:	500d883a 	mov	r6,r10
    235c:	00800084 	movi	r2,2
    2360:	38805926 	beq	r7,r2,24c8 <__muldf3+0x2c0>
    2364:	008000c4 	movi	r2,3
    2368:	3881bb26 	beq	r7,r2,2a58 <__muldf3+0x850>
    236c:	00800044 	movi	r2,1
    2370:	3881961e 	bne	r7,r2,29cc <__muldf3+0x7c4>
    2374:	3027883a 	mov	r19,r6
    2378:	0005883a 	mov	r2,zero
    237c:	0021883a 	mov	r16,zero
    2380:	002d883a 	mov	r22,zero
    2384:	1004953a 	slli	r2,r2,20
    2388:	98c03fcc 	andi	r3,r19,255
    238c:	04400434 	movhi	r17,16
    2390:	8c7fffc4 	addi	r17,r17,-1
    2394:	180697fa 	slli	r3,r3,31
    2398:	8460703a 	and	r16,r16,r17
    239c:	80a0b03a 	or	r16,r16,r2
    23a0:	80c6b03a 	or	r3,r16,r3
    23a4:	b005883a 	mov	r2,r22
    23a8:	dfc01117 	ldw	ra,68(sp)
    23ac:	df001017 	ldw	fp,64(sp)
    23b0:	ddc00f17 	ldw	r23,60(sp)
    23b4:	dd800e17 	ldw	r22,56(sp)
    23b8:	dd400d17 	ldw	r21,52(sp)
    23bc:	dd000c17 	ldw	r20,48(sp)
    23c0:	dcc00b17 	ldw	r19,44(sp)
    23c4:	dc800a17 	ldw	r18,40(sp)
    23c8:	dc400917 	ldw	r17,36(sp)
    23cc:	dc000817 	ldw	r16,32(sp)
    23d0:	dec01204 	addi	sp,sp,72
    23d4:	f800283a 	ret
    23d8:	2404b03a 	or	r2,r4,r16
    23dc:	202b883a 	mov	r21,r4
    23e0:	10004426 	beq	r2,zero,24f4 <__muldf3+0x2ec>
    23e4:	80015126 	beq	r16,zero,292c <__muldf3+0x724>
    23e8:	8009883a 	mov	r4,r16
    23ec:	d9800715 	stw	r6,28(sp)
    23f0:	d9c00215 	stw	r7,8(sp)
    23f4:	da400415 	stw	r9,16(sp)
    23f8:	000344c0 	call	344c <__clzsi2>
    23fc:	d9800717 	ldw	r6,28(sp)
    2400:	d9c00217 	ldw	r7,8(sp)
    2404:	da400417 	ldw	r9,16(sp)
    2408:	113ffd44 	addi	r4,r2,-11
    240c:	00c00704 	movi	r3,28
    2410:	19014216 	blt	r3,r4,291c <__muldf3+0x714>
    2414:	00c00744 	movi	r3,29
    2418:	15bffe04 	addi	r22,r2,-8
    241c:	1907c83a 	sub	r3,r3,r4
    2420:	85a0983a 	sll	r16,r16,r22
    2424:	a8c6d83a 	srl	r3,r21,r3
    2428:	adac983a 	sll	r22,r21,r22
    242c:	1c20b03a 	or	r16,r3,r16
    2430:	1080fcc4 	addi	r2,r2,1011
    2434:	00a9c83a 	sub	r20,zero,r2
    2438:	002b883a 	mov	r21,zero
    243c:	000b883a 	mov	r5,zero
    2440:	003f9006 	br	2284 <__alt_data_end+0xfffe2284>
    2444:	3446b03a 	or	r3,r6,r17
    2448:	1800281e 	bne	r3,zero,24ec <__muldf3+0x2e4>
    244c:	0023883a 	mov	r17,zero
    2450:	0025883a 	mov	r18,zero
    2454:	01c00084 	movi	r7,2
    2458:	003f9c06 	br	22cc <__alt_data_end+0xfffe22cc>
    245c:	3446b03a 	or	r3,r6,r17
    2460:	18001e26 	beq	r3,zero,24dc <__muldf3+0x2d4>
    2464:	88012126 	beq	r17,zero,28ec <__muldf3+0x6e4>
    2468:	8809883a 	mov	r4,r17
    246c:	d9400215 	stw	r5,8(sp)
    2470:	d9800715 	stw	r6,28(sp)
    2474:	da400415 	stw	r9,16(sp)
    2478:	da800315 	stw	r10,12(sp)
    247c:	000344c0 	call	344c <__clzsi2>
    2480:	d9400217 	ldw	r5,8(sp)
    2484:	d9800717 	ldw	r6,28(sp)
    2488:	da400417 	ldw	r9,16(sp)
    248c:	da800317 	ldw	r10,12(sp)
    2490:	113ffd44 	addi	r4,r2,-11
    2494:	00c00704 	movi	r3,28
    2498:	19011016 	blt	r3,r4,28dc <__muldf3+0x6d4>
    249c:	00c00744 	movi	r3,29
    24a0:	14bffe04 	addi	r18,r2,-8
    24a4:	1907c83a 	sub	r3,r3,r4
    24a8:	8ca2983a 	sll	r17,r17,r18
    24ac:	30c6d83a 	srl	r3,r6,r3
    24b0:	34a4983a 	sll	r18,r6,r18
    24b4:	1c62b03a 	or	r17,r3,r17
    24b8:	1080fcc4 	addi	r2,r2,1011
    24bc:	0085c83a 	sub	r2,zero,r2
    24c0:	000f883a 	mov	r7,zero
    24c4:	003f8106 	br	22cc <__alt_data_end+0xfffe22cc>
    24c8:	3027883a 	mov	r19,r6
    24cc:	0081ffc4 	movi	r2,2047
    24d0:	0021883a 	mov	r16,zero
    24d4:	002d883a 	mov	r22,zero
    24d8:	003faa06 	br	2384 <__alt_data_end+0xfffe2384>
    24dc:	0023883a 	mov	r17,zero
    24e0:	0025883a 	mov	r18,zero
    24e4:	01c00044 	movi	r7,1
    24e8:	003f7806 	br	22cc <__alt_data_end+0xfffe22cc>
    24ec:	01c000c4 	movi	r7,3
    24f0:	003f7606 	br	22cc <__alt_data_end+0xfffe22cc>
    24f4:	05400104 	movi	r21,4
    24f8:	0021883a 	mov	r16,zero
    24fc:	002d883a 	mov	r22,zero
    2500:	01400044 	movi	r5,1
    2504:	003f5f06 	br	2284 <__alt_data_end+0xfffe2284>
    2508:	05400304 	movi	r21,12
    250c:	014000c4 	movi	r5,3
    2510:	003f5c06 	br	2284 <__alt_data_end+0xfffe2284>
    2514:	04000434 	movhi	r16,16
    2518:	0027883a 	mov	r19,zero
    251c:	843fffc4 	addi	r16,r16,-1
    2520:	05bfffc4 	movi	r22,-1
    2524:	0081ffc4 	movi	r2,2047
    2528:	003f9606 	br	2384 <__alt_data_end+0xfffe2384>
    252c:	8023883a 	mov	r17,r16
    2530:	b025883a 	mov	r18,r22
    2534:	280f883a 	mov	r7,r5
    2538:	003f8806 	br	235c <__alt_data_end+0xfffe235c>
    253c:	8023883a 	mov	r17,r16
    2540:	b025883a 	mov	r18,r22
    2544:	480d883a 	mov	r6,r9
    2548:	280f883a 	mov	r7,r5
    254c:	003f8306 	br	235c <__alt_data_end+0xfffe235c>
    2550:	b026d43a 	srli	r19,r22,16
    2554:	902ed43a 	srli	r23,r18,16
    2558:	b5bfffcc 	andi	r22,r22,65535
    255c:	94bfffcc 	andi	r18,r18,65535
    2560:	b00b883a 	mov	r5,r22
    2564:	9009883a 	mov	r4,r18
    2568:	d8c00515 	stw	r3,20(sp)
    256c:	d9800715 	stw	r6,28(sp)
    2570:	da000615 	stw	r8,24(sp)
    2574:	0000e880 	call	e88 <__mulsi3>
    2578:	980b883a 	mov	r5,r19
    257c:	9009883a 	mov	r4,r18
    2580:	1029883a 	mov	r20,r2
    2584:	0000e880 	call	e88 <__mulsi3>
    2588:	b80b883a 	mov	r5,r23
    258c:	9809883a 	mov	r4,r19
    2590:	102b883a 	mov	r21,r2
    2594:	0000e880 	call	e88 <__mulsi3>
    2598:	b809883a 	mov	r4,r23
    259c:	b00b883a 	mov	r5,r22
    25a0:	1039883a 	mov	fp,r2
    25a4:	0000e880 	call	e88 <__mulsi3>
    25a8:	a008d43a 	srli	r4,r20,16
    25ac:	1545883a 	add	r2,r2,r21
    25b0:	d8c00517 	ldw	r3,20(sp)
    25b4:	2085883a 	add	r2,r4,r2
    25b8:	d9800717 	ldw	r6,28(sp)
    25bc:	da000617 	ldw	r8,24(sp)
    25c0:	1540022e 	bgeu	r2,r21,25cc <__muldf3+0x3c4>
    25c4:	01000074 	movhi	r4,1
    25c8:	e139883a 	add	fp,fp,r4
    25cc:	100e943a 	slli	r7,r2,16
    25d0:	1004d43a 	srli	r2,r2,16
    25d4:	882ad43a 	srli	r21,r17,16
    25d8:	a53fffcc 	andi	r20,r20,65535
    25dc:	8c7fffcc 	andi	r17,r17,65535
    25e0:	3d29883a 	add	r20,r7,r20
    25e4:	b00b883a 	mov	r5,r22
    25e8:	8809883a 	mov	r4,r17
    25ec:	d8c00515 	stw	r3,20(sp)
    25f0:	d9800715 	stw	r6,28(sp)
    25f4:	da000615 	stw	r8,24(sp)
    25f8:	dd000115 	stw	r20,4(sp)
    25fc:	d8800015 	stw	r2,0(sp)
    2600:	0000e880 	call	e88 <__mulsi3>
    2604:	980b883a 	mov	r5,r19
    2608:	8809883a 	mov	r4,r17
    260c:	d8800215 	stw	r2,8(sp)
    2610:	0000e880 	call	e88 <__mulsi3>
    2614:	9809883a 	mov	r4,r19
    2618:	a80b883a 	mov	r5,r21
    261c:	1029883a 	mov	r20,r2
    2620:	0000e880 	call	e88 <__mulsi3>
    2624:	b00b883a 	mov	r5,r22
    2628:	a809883a 	mov	r4,r21
    262c:	d8800415 	stw	r2,16(sp)
    2630:	0000e880 	call	e88 <__mulsi3>
    2634:	d9c00217 	ldw	r7,8(sp)
    2638:	1505883a 	add	r2,r2,r20
    263c:	d8c00517 	ldw	r3,20(sp)
    2640:	3826d43a 	srli	r19,r7,16
    2644:	d9800717 	ldw	r6,28(sp)
    2648:	da000617 	ldw	r8,24(sp)
    264c:	9885883a 	add	r2,r19,r2
    2650:	da400417 	ldw	r9,16(sp)
    2654:	1500022e 	bgeu	r2,r20,2660 <__muldf3+0x458>
    2658:	01000074 	movhi	r4,1
    265c:	4913883a 	add	r9,r9,r4
    2660:	1028d43a 	srli	r20,r2,16
    2664:	1004943a 	slli	r2,r2,16
    2668:	802cd43a 	srli	r22,r16,16
    266c:	843fffcc 	andi	r16,r16,65535
    2670:	3cffffcc 	andi	r19,r7,65535
    2674:	9009883a 	mov	r4,r18
    2678:	800b883a 	mov	r5,r16
    267c:	a269883a 	add	r20,r20,r9
    2680:	d8c00515 	stw	r3,20(sp)
    2684:	d9800715 	stw	r6,28(sp)
    2688:	da000615 	stw	r8,24(sp)
    268c:	14e7883a 	add	r19,r2,r19
    2690:	0000e880 	call	e88 <__mulsi3>
    2694:	9009883a 	mov	r4,r18
    2698:	b00b883a 	mov	r5,r22
    269c:	d8800315 	stw	r2,12(sp)
    26a0:	0000e880 	call	e88 <__mulsi3>
    26a4:	b809883a 	mov	r4,r23
    26a8:	b00b883a 	mov	r5,r22
    26ac:	d8800215 	stw	r2,8(sp)
    26b0:	0000e880 	call	e88 <__mulsi3>
    26b4:	b80b883a 	mov	r5,r23
    26b8:	8009883a 	mov	r4,r16
    26bc:	d8800415 	stw	r2,16(sp)
    26c0:	0000e880 	call	e88 <__mulsi3>
    26c4:	da800317 	ldw	r10,12(sp)
    26c8:	d9c00217 	ldw	r7,8(sp)
    26cc:	d9000017 	ldw	r4,0(sp)
    26d0:	502ed43a 	srli	r23,r10,16
    26d4:	11c5883a 	add	r2,r2,r7
    26d8:	24e5883a 	add	r18,r4,r19
    26dc:	b885883a 	add	r2,r23,r2
    26e0:	d8c00517 	ldw	r3,20(sp)
    26e4:	d9800717 	ldw	r6,28(sp)
    26e8:	da000617 	ldw	r8,24(sp)
    26ec:	da400417 	ldw	r9,16(sp)
    26f0:	11c0022e 	bgeu	r2,r7,26fc <__muldf3+0x4f4>
    26f4:	01000074 	movhi	r4,1
    26f8:	4913883a 	add	r9,r9,r4
    26fc:	100ed43a 	srli	r7,r2,16
    2700:	1004943a 	slli	r2,r2,16
    2704:	55ffffcc 	andi	r23,r10,65535
    2708:	3a53883a 	add	r9,r7,r9
    270c:	8809883a 	mov	r4,r17
    2710:	800b883a 	mov	r5,r16
    2714:	d8c00515 	stw	r3,20(sp)
    2718:	d9800715 	stw	r6,28(sp)
    271c:	da000615 	stw	r8,24(sp)
    2720:	da400415 	stw	r9,16(sp)
    2724:	15ef883a 	add	r23,r2,r23
    2728:	0000e880 	call	e88 <__mulsi3>
    272c:	8809883a 	mov	r4,r17
    2730:	b00b883a 	mov	r5,r22
    2734:	d8800215 	stw	r2,8(sp)
    2738:	0000e880 	call	e88 <__mulsi3>
    273c:	b00b883a 	mov	r5,r22
    2740:	a809883a 	mov	r4,r21
    2744:	d8800315 	stw	r2,12(sp)
    2748:	0000e880 	call	e88 <__mulsi3>
    274c:	8009883a 	mov	r4,r16
    2750:	a80b883a 	mov	r5,r21
    2754:	1023883a 	mov	r17,r2
    2758:	0000e880 	call	e88 <__mulsi3>
    275c:	d9c00217 	ldw	r7,8(sp)
    2760:	da800317 	ldw	r10,12(sp)
    2764:	d8c00517 	ldw	r3,20(sp)
    2768:	3808d43a 	srli	r4,r7,16
    276c:	1285883a 	add	r2,r2,r10
    2770:	d9800717 	ldw	r6,28(sp)
    2774:	2085883a 	add	r2,r4,r2
    2778:	da000617 	ldw	r8,24(sp)
    277c:	da400417 	ldw	r9,16(sp)
    2780:	1280022e 	bgeu	r2,r10,278c <__muldf3+0x584>
    2784:	01000074 	movhi	r4,1
    2788:	8923883a 	add	r17,r17,r4
    278c:	1008943a 	slli	r4,r2,16
    2790:	39ffffcc 	andi	r7,r7,65535
    2794:	e4b9883a 	add	fp,fp,r18
    2798:	21cf883a 	add	r7,r4,r7
    279c:	e4e7803a 	cmpltu	r19,fp,r19
    27a0:	3d0f883a 	add	r7,r7,r20
    27a4:	bf39883a 	add	fp,r23,fp
    27a8:	99c9883a 	add	r4,r19,r7
    27ac:	e5ef803a 	cmpltu	r23,fp,r23
    27b0:	490b883a 	add	r5,r9,r4
    27b4:	1004d43a 	srli	r2,r2,16
    27b8:	b965883a 	add	r18,r23,r5
    27bc:	24c9803a 	cmpltu	r4,r4,r19
    27c0:	3d29803a 	cmpltu	r20,r7,r20
    27c4:	a128b03a 	or	r20,r20,r4
    27c8:	95ef803a 	cmpltu	r23,r18,r23
    27cc:	2a53803a 	cmpltu	r9,r5,r9
    27d0:	a0a9883a 	add	r20,r20,r2
    27d4:	4deeb03a 	or	r23,r9,r23
    27d8:	a5ef883a 	add	r23,r20,r23
    27dc:	bc63883a 	add	r17,r23,r17
    27e0:	e004927a 	slli	r2,fp,9
    27e4:	d9000117 	ldw	r4,4(sp)
    27e8:	882e927a 	slli	r23,r17,9
    27ec:	9022d5fa 	srli	r17,r18,23
    27f0:	e038d5fa 	srli	fp,fp,23
    27f4:	1104b03a 	or	r2,r2,r4
    27f8:	9024927a 	slli	r18,r18,9
    27fc:	1004c03a 	cmpne	r2,r2,zero
    2800:	bc62b03a 	or	r17,r23,r17
    2804:	1738b03a 	or	fp,r2,fp
    2808:	8880402c 	andhi	r2,r17,256
    280c:	e4a4b03a 	or	r18,fp,r18
    2810:	10000726 	beq	r2,zero,2830 <__muldf3+0x628>
    2814:	9006d07a 	srli	r3,r18,1
    2818:	880497fa 	slli	r2,r17,31
    281c:	9480004c 	andi	r18,r18,1
    2820:	8822d07a 	srli	r17,r17,1
    2824:	1ca4b03a 	or	r18,r3,r18
    2828:	14a4b03a 	or	r18,r2,r18
    282c:	4007883a 	mov	r3,r8
    2830:	1880ffc4 	addi	r2,r3,1023
    2834:	0080460e 	bge	zero,r2,2950 <__muldf3+0x748>
    2838:	910001cc 	andi	r4,r18,7
    283c:	20000726 	beq	r4,zero,285c <__muldf3+0x654>
    2840:	910003cc 	andi	r4,r18,15
    2844:	01400104 	movi	r5,4
    2848:	21400426 	beq	r4,r5,285c <__muldf3+0x654>
    284c:	9149883a 	add	r4,r18,r5
    2850:	24a5803a 	cmpltu	r18,r4,r18
    2854:	8ca3883a 	add	r17,r17,r18
    2858:	2025883a 	mov	r18,r4
    285c:	8900402c 	andhi	r4,r17,256
    2860:	20000426 	beq	r4,zero,2874 <__muldf3+0x66c>
    2864:	18810004 	addi	r2,r3,1024
    2868:	00ffc034 	movhi	r3,65280
    286c:	18ffffc4 	addi	r3,r3,-1
    2870:	88e2703a 	and	r17,r17,r3
    2874:	00c1ff84 	movi	r3,2046
    2878:	18bf1316 	blt	r3,r2,24c8 <__alt_data_end+0xfffe24c8>
    287c:	882c977a 	slli	r22,r17,29
    2880:	9024d0fa 	srli	r18,r18,3
    2884:	8822927a 	slli	r17,r17,9
    2888:	1081ffcc 	andi	r2,r2,2047
    288c:	b4acb03a 	or	r22,r22,r18
    2890:	8820d33a 	srli	r16,r17,12
    2894:	3027883a 	mov	r19,r6
    2898:	003eba06 	br	2384 <__alt_data_end+0xfffe2384>
    289c:	8080022c 	andhi	r2,r16,8
    28a0:	10000926 	beq	r2,zero,28c8 <__muldf3+0x6c0>
    28a4:	8880022c 	andhi	r2,r17,8
    28a8:	1000071e 	bne	r2,zero,28c8 <__muldf3+0x6c0>
    28ac:	00800434 	movhi	r2,16
    28b0:	8c000234 	orhi	r16,r17,8
    28b4:	10bfffc4 	addi	r2,r2,-1
    28b8:	e027883a 	mov	r19,fp
    28bc:	80a0703a 	and	r16,r16,r2
    28c0:	902d883a 	mov	r22,r18
    28c4:	003f1706 	br	2524 <__alt_data_end+0xfffe2524>
    28c8:	00800434 	movhi	r2,16
    28cc:	84000234 	orhi	r16,r16,8
    28d0:	10bfffc4 	addi	r2,r2,-1
    28d4:	80a0703a 	and	r16,r16,r2
    28d8:	003f1206 	br	2524 <__alt_data_end+0xfffe2524>
    28dc:	147ff604 	addi	r17,r2,-40
    28e0:	3462983a 	sll	r17,r6,r17
    28e4:	0025883a 	mov	r18,zero
    28e8:	003ef306 	br	24b8 <__alt_data_end+0xfffe24b8>
    28ec:	3009883a 	mov	r4,r6
    28f0:	d9400215 	stw	r5,8(sp)
    28f4:	d9800715 	stw	r6,28(sp)
    28f8:	da400415 	stw	r9,16(sp)
    28fc:	da800315 	stw	r10,12(sp)
    2900:	000344c0 	call	344c <__clzsi2>
    2904:	10800804 	addi	r2,r2,32
    2908:	da800317 	ldw	r10,12(sp)
    290c:	da400417 	ldw	r9,16(sp)
    2910:	d9800717 	ldw	r6,28(sp)
    2914:	d9400217 	ldw	r5,8(sp)
    2918:	003edd06 	br	2490 <__alt_data_end+0xfffe2490>
    291c:	143ff604 	addi	r16,r2,-40
    2920:	ac20983a 	sll	r16,r21,r16
    2924:	002d883a 	mov	r22,zero
    2928:	003ec106 	br	2430 <__alt_data_end+0xfffe2430>
    292c:	d9800715 	stw	r6,28(sp)
    2930:	d9c00215 	stw	r7,8(sp)
    2934:	da400415 	stw	r9,16(sp)
    2938:	000344c0 	call	344c <__clzsi2>
    293c:	10800804 	addi	r2,r2,32
    2940:	da400417 	ldw	r9,16(sp)
    2944:	d9c00217 	ldw	r7,8(sp)
    2948:	d9800717 	ldw	r6,28(sp)
    294c:	003eae06 	br	2408 <__alt_data_end+0xfffe2408>
    2950:	00c00044 	movi	r3,1
    2954:	1887c83a 	sub	r3,r3,r2
    2958:	01000e04 	movi	r4,56
    295c:	20fe8516 	blt	r4,r3,2374 <__alt_data_end+0xfffe2374>
    2960:	010007c4 	movi	r4,31
    2964:	20c01b16 	blt	r4,r3,29d4 <__muldf3+0x7cc>
    2968:	00800804 	movi	r2,32
    296c:	10c5c83a 	sub	r2,r2,r3
    2970:	888a983a 	sll	r5,r17,r2
    2974:	90c8d83a 	srl	r4,r18,r3
    2978:	9084983a 	sll	r2,r18,r2
    297c:	88e2d83a 	srl	r17,r17,r3
    2980:	2906b03a 	or	r3,r5,r4
    2984:	1004c03a 	cmpne	r2,r2,zero
    2988:	1886b03a 	or	r3,r3,r2
    298c:	188001cc 	andi	r2,r3,7
    2990:	10000726 	beq	r2,zero,29b0 <__muldf3+0x7a8>
    2994:	188003cc 	andi	r2,r3,15
    2998:	01000104 	movi	r4,4
    299c:	11000426 	beq	r2,r4,29b0 <__muldf3+0x7a8>
    29a0:	1805883a 	mov	r2,r3
    29a4:	10c00104 	addi	r3,r2,4
    29a8:	1885803a 	cmpltu	r2,r3,r2
    29ac:	88a3883a 	add	r17,r17,r2
    29b0:	8880202c 	andhi	r2,r17,128
    29b4:	10001c26 	beq	r2,zero,2a28 <__muldf3+0x820>
    29b8:	3027883a 	mov	r19,r6
    29bc:	00800044 	movi	r2,1
    29c0:	0021883a 	mov	r16,zero
    29c4:	002d883a 	mov	r22,zero
    29c8:	003e6e06 	br	2384 <__alt_data_end+0xfffe2384>
    29cc:	4007883a 	mov	r3,r8
    29d0:	003f9706 	br	2830 <__alt_data_end+0xfffe2830>
    29d4:	017ff844 	movi	r5,-31
    29d8:	2885c83a 	sub	r2,r5,r2
    29dc:	888ad83a 	srl	r5,r17,r2
    29e0:	00800804 	movi	r2,32
    29e4:	18801a26 	beq	r3,r2,2a50 <__muldf3+0x848>
    29e8:	01001004 	movi	r4,64
    29ec:	20c7c83a 	sub	r3,r4,r3
    29f0:	88e2983a 	sll	r17,r17,r3
    29f4:	8ca4b03a 	or	r18,r17,r18
    29f8:	9004c03a 	cmpne	r2,r18,zero
    29fc:	2884b03a 	or	r2,r5,r2
    2a00:	144001cc 	andi	r17,r2,7
    2a04:	88000d1e 	bne	r17,zero,2a3c <__muldf3+0x834>
    2a08:	0021883a 	mov	r16,zero
    2a0c:	102cd0fa 	srli	r22,r2,3
    2a10:	3027883a 	mov	r19,r6
    2a14:	0005883a 	mov	r2,zero
    2a18:	b46cb03a 	or	r22,r22,r17
    2a1c:	003e5906 	br	2384 <__alt_data_end+0xfffe2384>
    2a20:	1007883a 	mov	r3,r2
    2a24:	0023883a 	mov	r17,zero
    2a28:	8820927a 	slli	r16,r17,9
    2a2c:	1805883a 	mov	r2,r3
    2a30:	8822977a 	slli	r17,r17,29
    2a34:	8020d33a 	srli	r16,r16,12
    2a38:	003ff406 	br	2a0c <__alt_data_end+0xfffe2a0c>
    2a3c:	10c003cc 	andi	r3,r2,15
    2a40:	01000104 	movi	r4,4
    2a44:	193ff626 	beq	r3,r4,2a20 <__alt_data_end+0xfffe2a20>
    2a48:	0023883a 	mov	r17,zero
    2a4c:	003fd506 	br	29a4 <__alt_data_end+0xfffe29a4>
    2a50:	0023883a 	mov	r17,zero
    2a54:	003fe706 	br	29f4 <__alt_data_end+0xfffe29f4>
    2a58:	00800434 	movhi	r2,16
    2a5c:	8c000234 	orhi	r16,r17,8
    2a60:	10bfffc4 	addi	r2,r2,-1
    2a64:	3027883a 	mov	r19,r6
    2a68:	80a0703a 	and	r16,r16,r2
    2a6c:	902d883a 	mov	r22,r18
    2a70:	003eac06 	br	2524 <__alt_data_end+0xfffe2524>

00002a74 <__subdf3>:
    2a74:	02000434 	movhi	r8,16
    2a78:	423fffc4 	addi	r8,r8,-1
    2a7c:	defffb04 	addi	sp,sp,-20
    2a80:	2a14703a 	and	r10,r5,r8
    2a84:	3812d53a 	srli	r9,r7,20
    2a88:	3a10703a 	and	r8,r7,r8
    2a8c:	2006d77a 	srli	r3,r4,29
    2a90:	3004d77a 	srli	r2,r6,29
    2a94:	dc000015 	stw	r16,0(sp)
    2a98:	501490fa 	slli	r10,r10,3
    2a9c:	2820d53a 	srli	r16,r5,20
    2aa0:	401090fa 	slli	r8,r8,3
    2aa4:	dc800215 	stw	r18,8(sp)
    2aa8:	dc400115 	stw	r17,4(sp)
    2aac:	dfc00415 	stw	ra,16(sp)
    2ab0:	202290fa 	slli	r17,r4,3
    2ab4:	dcc00315 	stw	r19,12(sp)
    2ab8:	4a41ffcc 	andi	r9,r9,2047
    2abc:	0101ffc4 	movi	r4,2047
    2ac0:	2824d7fa 	srli	r18,r5,31
    2ac4:	8401ffcc 	andi	r16,r16,2047
    2ac8:	50c6b03a 	or	r3,r10,r3
    2acc:	380ed7fa 	srli	r7,r7,31
    2ad0:	408ab03a 	or	r5,r8,r2
    2ad4:	300c90fa 	slli	r6,r6,3
    2ad8:	49009626 	beq	r9,r4,2d34 <__subdf3+0x2c0>
    2adc:	39c0005c 	xori	r7,r7,1
    2ae0:	8245c83a 	sub	r2,r16,r9
    2ae4:	3c807426 	beq	r7,r18,2cb8 <__subdf3+0x244>
    2ae8:	0080af0e 	bge	zero,r2,2da8 <__subdf3+0x334>
    2aec:	48002a1e 	bne	r9,zero,2b98 <__subdf3+0x124>
    2af0:	2988b03a 	or	r4,r5,r6
    2af4:	20009a1e 	bne	r4,zero,2d60 <__subdf3+0x2ec>
    2af8:	888001cc 	andi	r2,r17,7
    2afc:	10000726 	beq	r2,zero,2b1c <__subdf3+0xa8>
    2b00:	888003cc 	andi	r2,r17,15
    2b04:	01000104 	movi	r4,4
    2b08:	11000426 	beq	r2,r4,2b1c <__subdf3+0xa8>
    2b0c:	890b883a 	add	r5,r17,r4
    2b10:	2c63803a 	cmpltu	r17,r5,r17
    2b14:	1c47883a 	add	r3,r3,r17
    2b18:	2823883a 	mov	r17,r5
    2b1c:	1880202c 	andhi	r2,r3,128
    2b20:	10005926 	beq	r2,zero,2c88 <__subdf3+0x214>
    2b24:	84000044 	addi	r16,r16,1
    2b28:	0081ffc4 	movi	r2,2047
    2b2c:	8080be26 	beq	r16,r2,2e28 <__subdf3+0x3b4>
    2b30:	017fe034 	movhi	r5,65408
    2b34:	297fffc4 	addi	r5,r5,-1
    2b38:	1946703a 	and	r3,r3,r5
    2b3c:	1804977a 	slli	r2,r3,29
    2b40:	1806927a 	slli	r3,r3,9
    2b44:	8822d0fa 	srli	r17,r17,3
    2b48:	8401ffcc 	andi	r16,r16,2047
    2b4c:	180ad33a 	srli	r5,r3,12
    2b50:	9100004c 	andi	r4,r18,1
    2b54:	1444b03a 	or	r2,r2,r17
    2b58:	80c1ffcc 	andi	r3,r16,2047
    2b5c:	1820953a 	slli	r16,r3,20
    2b60:	20c03fcc 	andi	r3,r4,255
    2b64:	180897fa 	slli	r4,r3,31
    2b68:	00c00434 	movhi	r3,16
    2b6c:	18ffffc4 	addi	r3,r3,-1
    2b70:	28c6703a 	and	r3,r5,r3
    2b74:	1c06b03a 	or	r3,r3,r16
    2b78:	1906b03a 	or	r3,r3,r4
    2b7c:	dfc00417 	ldw	ra,16(sp)
    2b80:	dcc00317 	ldw	r19,12(sp)
    2b84:	dc800217 	ldw	r18,8(sp)
    2b88:	dc400117 	ldw	r17,4(sp)
    2b8c:	dc000017 	ldw	r16,0(sp)
    2b90:	dec00504 	addi	sp,sp,20
    2b94:	f800283a 	ret
    2b98:	0101ffc4 	movi	r4,2047
    2b9c:	813fd626 	beq	r16,r4,2af8 <__alt_data_end+0xfffe2af8>
    2ba0:	29402034 	orhi	r5,r5,128
    2ba4:	01000e04 	movi	r4,56
    2ba8:	2080a316 	blt	r4,r2,2e38 <__subdf3+0x3c4>
    2bac:	010007c4 	movi	r4,31
    2bb0:	2080c616 	blt	r4,r2,2ecc <__subdf3+0x458>
    2bb4:	01000804 	movi	r4,32
    2bb8:	2089c83a 	sub	r4,r4,r2
    2bbc:	2910983a 	sll	r8,r5,r4
    2bc0:	308ed83a 	srl	r7,r6,r2
    2bc4:	3108983a 	sll	r4,r6,r4
    2bc8:	2884d83a 	srl	r2,r5,r2
    2bcc:	41ccb03a 	or	r6,r8,r7
    2bd0:	2008c03a 	cmpne	r4,r4,zero
    2bd4:	310cb03a 	or	r6,r6,r4
    2bd8:	898dc83a 	sub	r6,r17,r6
    2bdc:	89a3803a 	cmpltu	r17,r17,r6
    2be0:	1887c83a 	sub	r3,r3,r2
    2be4:	1c47c83a 	sub	r3,r3,r17
    2be8:	3023883a 	mov	r17,r6
    2bec:	1880202c 	andhi	r2,r3,128
    2bf0:	10002326 	beq	r2,zero,2c80 <__subdf3+0x20c>
    2bf4:	04c02034 	movhi	r19,128
    2bf8:	9cffffc4 	addi	r19,r19,-1
    2bfc:	1ce6703a 	and	r19,r3,r19
    2c00:	98007a26 	beq	r19,zero,2dec <__subdf3+0x378>
    2c04:	9809883a 	mov	r4,r19
    2c08:	000344c0 	call	344c <__clzsi2>
    2c0c:	113ffe04 	addi	r4,r2,-8
    2c10:	00c007c4 	movi	r3,31
    2c14:	19007b16 	blt	r3,r4,2e04 <__subdf3+0x390>
    2c18:	00800804 	movi	r2,32
    2c1c:	1105c83a 	sub	r2,r2,r4
    2c20:	8884d83a 	srl	r2,r17,r2
    2c24:	9906983a 	sll	r3,r19,r4
    2c28:	8922983a 	sll	r17,r17,r4
    2c2c:	10c4b03a 	or	r2,r2,r3
    2c30:	24007816 	blt	r4,r16,2e14 <__subdf3+0x3a0>
    2c34:	2421c83a 	sub	r16,r4,r16
    2c38:	80c00044 	addi	r3,r16,1
    2c3c:	010007c4 	movi	r4,31
    2c40:	20c09516 	blt	r4,r3,2e98 <__subdf3+0x424>
    2c44:	01400804 	movi	r5,32
    2c48:	28cbc83a 	sub	r5,r5,r3
    2c4c:	88c8d83a 	srl	r4,r17,r3
    2c50:	8962983a 	sll	r17,r17,r5
    2c54:	114a983a 	sll	r5,r2,r5
    2c58:	10c6d83a 	srl	r3,r2,r3
    2c5c:	8804c03a 	cmpne	r2,r17,zero
    2c60:	290ab03a 	or	r5,r5,r4
    2c64:	28a2b03a 	or	r17,r5,r2
    2c68:	0021883a 	mov	r16,zero
    2c6c:	003fa206 	br	2af8 <__alt_data_end+0xfffe2af8>
    2c70:	2090b03a 	or	r8,r4,r2
    2c74:	40018e26 	beq	r8,zero,32b0 <__subdf3+0x83c>
    2c78:	1007883a 	mov	r3,r2
    2c7c:	2023883a 	mov	r17,r4
    2c80:	888001cc 	andi	r2,r17,7
    2c84:	103f9e1e 	bne	r2,zero,2b00 <__alt_data_end+0xfffe2b00>
    2c88:	1804977a 	slli	r2,r3,29
    2c8c:	8822d0fa 	srli	r17,r17,3
    2c90:	1810d0fa 	srli	r8,r3,3
    2c94:	9100004c 	andi	r4,r18,1
    2c98:	1444b03a 	or	r2,r2,r17
    2c9c:	00c1ffc4 	movi	r3,2047
    2ca0:	80c02826 	beq	r16,r3,2d44 <__subdf3+0x2d0>
    2ca4:	01400434 	movhi	r5,16
    2ca8:	297fffc4 	addi	r5,r5,-1
    2cac:	80e0703a 	and	r16,r16,r3
    2cb0:	414a703a 	and	r5,r8,r5
    2cb4:	003fa806 	br	2b58 <__alt_data_end+0xfffe2b58>
    2cb8:	0080630e 	bge	zero,r2,2e48 <__subdf3+0x3d4>
    2cbc:	48003026 	beq	r9,zero,2d80 <__subdf3+0x30c>
    2cc0:	0101ffc4 	movi	r4,2047
    2cc4:	813f8c26 	beq	r16,r4,2af8 <__alt_data_end+0xfffe2af8>
    2cc8:	29402034 	orhi	r5,r5,128
    2ccc:	01000e04 	movi	r4,56
    2cd0:	2080a90e 	bge	r4,r2,2f78 <__subdf3+0x504>
    2cd4:	298cb03a 	or	r6,r5,r6
    2cd8:	3012c03a 	cmpne	r9,r6,zero
    2cdc:	0005883a 	mov	r2,zero
    2ce0:	4c53883a 	add	r9,r9,r17
    2ce4:	4c63803a 	cmpltu	r17,r9,r17
    2ce8:	10c7883a 	add	r3,r2,r3
    2cec:	88c7883a 	add	r3,r17,r3
    2cf0:	4823883a 	mov	r17,r9
    2cf4:	1880202c 	andhi	r2,r3,128
    2cf8:	1000d026 	beq	r2,zero,303c <__subdf3+0x5c8>
    2cfc:	84000044 	addi	r16,r16,1
    2d00:	0081ffc4 	movi	r2,2047
    2d04:	8080fe26 	beq	r16,r2,3100 <__subdf3+0x68c>
    2d08:	00bfe034 	movhi	r2,65408
    2d0c:	10bfffc4 	addi	r2,r2,-1
    2d10:	1886703a 	and	r3,r3,r2
    2d14:	880ad07a 	srli	r5,r17,1
    2d18:	180497fa 	slli	r2,r3,31
    2d1c:	8900004c 	andi	r4,r17,1
    2d20:	2922b03a 	or	r17,r5,r4
    2d24:	1806d07a 	srli	r3,r3,1
    2d28:	1462b03a 	or	r17,r2,r17
    2d2c:	3825883a 	mov	r18,r7
    2d30:	003f7106 	br	2af8 <__alt_data_end+0xfffe2af8>
    2d34:	2984b03a 	or	r2,r5,r6
    2d38:	103f6826 	beq	r2,zero,2adc <__alt_data_end+0xfffe2adc>
    2d3c:	39c03fcc 	andi	r7,r7,255
    2d40:	003f6706 	br	2ae0 <__alt_data_end+0xfffe2ae0>
    2d44:	4086b03a 	or	r3,r8,r2
    2d48:	18015226 	beq	r3,zero,3294 <__subdf3+0x820>
    2d4c:	00c00434 	movhi	r3,16
    2d50:	41400234 	orhi	r5,r8,8
    2d54:	18ffffc4 	addi	r3,r3,-1
    2d58:	28ca703a 	and	r5,r5,r3
    2d5c:	003f7e06 	br	2b58 <__alt_data_end+0xfffe2b58>
    2d60:	10bfffc4 	addi	r2,r2,-1
    2d64:	1000491e 	bne	r2,zero,2e8c <__subdf3+0x418>
    2d68:	898fc83a 	sub	r7,r17,r6
    2d6c:	89e3803a 	cmpltu	r17,r17,r7
    2d70:	1947c83a 	sub	r3,r3,r5
    2d74:	1c47c83a 	sub	r3,r3,r17
    2d78:	3823883a 	mov	r17,r7
    2d7c:	003f9b06 	br	2bec <__alt_data_end+0xfffe2bec>
    2d80:	2988b03a 	or	r4,r5,r6
    2d84:	203f5c26 	beq	r4,zero,2af8 <__alt_data_end+0xfffe2af8>
    2d88:	10bfffc4 	addi	r2,r2,-1
    2d8c:	1000931e 	bne	r2,zero,2fdc <__subdf3+0x568>
    2d90:	898d883a 	add	r6,r17,r6
    2d94:	3463803a 	cmpltu	r17,r6,r17
    2d98:	1947883a 	add	r3,r3,r5
    2d9c:	88c7883a 	add	r3,r17,r3
    2da0:	3023883a 	mov	r17,r6
    2da4:	003fd306 	br	2cf4 <__alt_data_end+0xfffe2cf4>
    2da8:	1000541e 	bne	r2,zero,2efc <__subdf3+0x488>
    2dac:	80800044 	addi	r2,r16,1
    2db0:	1081ffcc 	andi	r2,r2,2047
    2db4:	01000044 	movi	r4,1
    2db8:	2080a20e 	bge	r4,r2,3044 <__subdf3+0x5d0>
    2dbc:	8989c83a 	sub	r4,r17,r6
    2dc0:	8905803a 	cmpltu	r2,r17,r4
    2dc4:	1967c83a 	sub	r19,r3,r5
    2dc8:	98a7c83a 	sub	r19,r19,r2
    2dcc:	9880202c 	andhi	r2,r19,128
    2dd0:	10006326 	beq	r2,zero,2f60 <__subdf3+0x4ec>
    2dd4:	3463c83a 	sub	r17,r6,r17
    2dd8:	28c7c83a 	sub	r3,r5,r3
    2ddc:	344d803a 	cmpltu	r6,r6,r17
    2de0:	19a7c83a 	sub	r19,r3,r6
    2de4:	3825883a 	mov	r18,r7
    2de8:	983f861e 	bne	r19,zero,2c04 <__alt_data_end+0xfffe2c04>
    2dec:	8809883a 	mov	r4,r17
    2df0:	000344c0 	call	344c <__clzsi2>
    2df4:	10800804 	addi	r2,r2,32
    2df8:	113ffe04 	addi	r4,r2,-8
    2dfc:	00c007c4 	movi	r3,31
    2e00:	193f850e 	bge	r3,r4,2c18 <__alt_data_end+0xfffe2c18>
    2e04:	10bff604 	addi	r2,r2,-40
    2e08:	8884983a 	sll	r2,r17,r2
    2e0c:	0023883a 	mov	r17,zero
    2e10:	243f880e 	bge	r4,r16,2c34 <__alt_data_end+0xfffe2c34>
    2e14:	00ffe034 	movhi	r3,65408
    2e18:	18ffffc4 	addi	r3,r3,-1
    2e1c:	8121c83a 	sub	r16,r16,r4
    2e20:	10c6703a 	and	r3,r2,r3
    2e24:	003f3406 	br	2af8 <__alt_data_end+0xfffe2af8>
    2e28:	9100004c 	andi	r4,r18,1
    2e2c:	000b883a 	mov	r5,zero
    2e30:	0005883a 	mov	r2,zero
    2e34:	003f4806 	br	2b58 <__alt_data_end+0xfffe2b58>
    2e38:	298cb03a 	or	r6,r5,r6
    2e3c:	300cc03a 	cmpne	r6,r6,zero
    2e40:	0005883a 	mov	r2,zero
    2e44:	003f6406 	br	2bd8 <__alt_data_end+0xfffe2bd8>
    2e48:	10009a1e 	bne	r2,zero,30b4 <__subdf3+0x640>
    2e4c:	82400044 	addi	r9,r16,1
    2e50:	4881ffcc 	andi	r2,r9,2047
    2e54:	02800044 	movi	r10,1
    2e58:	5080670e 	bge	r10,r2,2ff8 <__subdf3+0x584>
    2e5c:	0081ffc4 	movi	r2,2047
    2e60:	4880af26 	beq	r9,r2,3120 <__subdf3+0x6ac>
    2e64:	898d883a 	add	r6,r17,r6
    2e68:	1945883a 	add	r2,r3,r5
    2e6c:	3447803a 	cmpltu	r3,r6,r17
    2e70:	1887883a 	add	r3,r3,r2
    2e74:	182297fa 	slli	r17,r3,31
    2e78:	300cd07a 	srli	r6,r6,1
    2e7c:	1806d07a 	srli	r3,r3,1
    2e80:	4821883a 	mov	r16,r9
    2e84:	89a2b03a 	or	r17,r17,r6
    2e88:	003f1b06 	br	2af8 <__alt_data_end+0xfffe2af8>
    2e8c:	0101ffc4 	movi	r4,2047
    2e90:	813f441e 	bne	r16,r4,2ba4 <__alt_data_end+0xfffe2ba4>
    2e94:	003f1806 	br	2af8 <__alt_data_end+0xfffe2af8>
    2e98:	843ff844 	addi	r16,r16,-31
    2e9c:	01400804 	movi	r5,32
    2ea0:	1408d83a 	srl	r4,r2,r16
    2ea4:	19405026 	beq	r3,r5,2fe8 <__subdf3+0x574>
    2ea8:	01401004 	movi	r5,64
    2eac:	28c7c83a 	sub	r3,r5,r3
    2eb0:	10c4983a 	sll	r2,r2,r3
    2eb4:	88a2b03a 	or	r17,r17,r2
    2eb8:	8822c03a 	cmpne	r17,r17,zero
    2ebc:	2462b03a 	or	r17,r4,r17
    2ec0:	0007883a 	mov	r3,zero
    2ec4:	0021883a 	mov	r16,zero
    2ec8:	003f6d06 	br	2c80 <__alt_data_end+0xfffe2c80>
    2ecc:	11fff804 	addi	r7,r2,-32
    2ed0:	01000804 	movi	r4,32
    2ed4:	29ced83a 	srl	r7,r5,r7
    2ed8:	11004526 	beq	r2,r4,2ff0 <__subdf3+0x57c>
    2edc:	01001004 	movi	r4,64
    2ee0:	2089c83a 	sub	r4,r4,r2
    2ee4:	2904983a 	sll	r2,r5,r4
    2ee8:	118cb03a 	or	r6,r2,r6
    2eec:	300cc03a 	cmpne	r6,r6,zero
    2ef0:	398cb03a 	or	r6,r7,r6
    2ef4:	0005883a 	mov	r2,zero
    2ef8:	003f3706 	br	2bd8 <__alt_data_end+0xfffe2bd8>
    2efc:	80002a26 	beq	r16,zero,2fa8 <__subdf3+0x534>
    2f00:	0101ffc4 	movi	r4,2047
    2f04:	49006626 	beq	r9,r4,30a0 <__subdf3+0x62c>
    2f08:	0085c83a 	sub	r2,zero,r2
    2f0c:	18c02034 	orhi	r3,r3,128
    2f10:	01000e04 	movi	r4,56
    2f14:	20807e16 	blt	r4,r2,3110 <__subdf3+0x69c>
    2f18:	010007c4 	movi	r4,31
    2f1c:	2080e716 	blt	r4,r2,32bc <__subdf3+0x848>
    2f20:	01000804 	movi	r4,32
    2f24:	2089c83a 	sub	r4,r4,r2
    2f28:	1914983a 	sll	r10,r3,r4
    2f2c:	8890d83a 	srl	r8,r17,r2
    2f30:	8908983a 	sll	r4,r17,r4
    2f34:	1884d83a 	srl	r2,r3,r2
    2f38:	5222b03a 	or	r17,r10,r8
    2f3c:	2006c03a 	cmpne	r3,r4,zero
    2f40:	88e2b03a 	or	r17,r17,r3
    2f44:	3463c83a 	sub	r17,r6,r17
    2f48:	2885c83a 	sub	r2,r5,r2
    2f4c:	344d803a 	cmpltu	r6,r6,r17
    2f50:	1187c83a 	sub	r3,r2,r6
    2f54:	4821883a 	mov	r16,r9
    2f58:	3825883a 	mov	r18,r7
    2f5c:	003f2306 	br	2bec <__alt_data_end+0xfffe2bec>
    2f60:	24d0b03a 	or	r8,r4,r19
    2f64:	40001b1e 	bne	r8,zero,2fd4 <__subdf3+0x560>
    2f68:	0005883a 	mov	r2,zero
    2f6c:	0009883a 	mov	r4,zero
    2f70:	0021883a 	mov	r16,zero
    2f74:	003f4906 	br	2c9c <__alt_data_end+0xfffe2c9c>
    2f78:	010007c4 	movi	r4,31
    2f7c:	20803a16 	blt	r4,r2,3068 <__subdf3+0x5f4>
    2f80:	01000804 	movi	r4,32
    2f84:	2089c83a 	sub	r4,r4,r2
    2f88:	2912983a 	sll	r9,r5,r4
    2f8c:	3090d83a 	srl	r8,r6,r2
    2f90:	3108983a 	sll	r4,r6,r4
    2f94:	2884d83a 	srl	r2,r5,r2
    2f98:	4a12b03a 	or	r9,r9,r8
    2f9c:	2008c03a 	cmpne	r4,r4,zero
    2fa0:	4912b03a 	or	r9,r9,r4
    2fa4:	003f4e06 	br	2ce0 <__alt_data_end+0xfffe2ce0>
    2fa8:	1c48b03a 	or	r4,r3,r17
    2fac:	20003c26 	beq	r4,zero,30a0 <__subdf3+0x62c>
    2fb0:	0084303a 	nor	r2,zero,r2
    2fb4:	1000381e 	bne	r2,zero,3098 <__subdf3+0x624>
    2fb8:	3463c83a 	sub	r17,r6,r17
    2fbc:	28c5c83a 	sub	r2,r5,r3
    2fc0:	344d803a 	cmpltu	r6,r6,r17
    2fc4:	1187c83a 	sub	r3,r2,r6
    2fc8:	4821883a 	mov	r16,r9
    2fcc:	3825883a 	mov	r18,r7
    2fd0:	003f0606 	br	2bec <__alt_data_end+0xfffe2bec>
    2fd4:	2023883a 	mov	r17,r4
    2fd8:	003f0906 	br	2c00 <__alt_data_end+0xfffe2c00>
    2fdc:	0101ffc4 	movi	r4,2047
    2fe0:	813f3a1e 	bne	r16,r4,2ccc <__alt_data_end+0xfffe2ccc>
    2fe4:	003ec406 	br	2af8 <__alt_data_end+0xfffe2af8>
    2fe8:	0005883a 	mov	r2,zero
    2fec:	003fb106 	br	2eb4 <__alt_data_end+0xfffe2eb4>
    2ff0:	0005883a 	mov	r2,zero
    2ff4:	003fbc06 	br	2ee8 <__alt_data_end+0xfffe2ee8>
    2ff8:	1c44b03a 	or	r2,r3,r17
    2ffc:	80008e1e 	bne	r16,zero,3238 <__subdf3+0x7c4>
    3000:	1000c826 	beq	r2,zero,3324 <__subdf3+0x8b0>
    3004:	2984b03a 	or	r2,r5,r6
    3008:	103ebb26 	beq	r2,zero,2af8 <__alt_data_end+0xfffe2af8>
    300c:	8989883a 	add	r4,r17,r6
    3010:	1945883a 	add	r2,r3,r5
    3014:	2447803a 	cmpltu	r3,r4,r17
    3018:	1887883a 	add	r3,r3,r2
    301c:	1880202c 	andhi	r2,r3,128
    3020:	2023883a 	mov	r17,r4
    3024:	103f1626 	beq	r2,zero,2c80 <__alt_data_end+0xfffe2c80>
    3028:	00bfe034 	movhi	r2,65408
    302c:	10bfffc4 	addi	r2,r2,-1
    3030:	5021883a 	mov	r16,r10
    3034:	1886703a 	and	r3,r3,r2
    3038:	003eaf06 	br	2af8 <__alt_data_end+0xfffe2af8>
    303c:	3825883a 	mov	r18,r7
    3040:	003f0f06 	br	2c80 <__alt_data_end+0xfffe2c80>
    3044:	1c44b03a 	or	r2,r3,r17
    3048:	8000251e 	bne	r16,zero,30e0 <__subdf3+0x66c>
    304c:	1000661e 	bne	r2,zero,31e8 <__subdf3+0x774>
    3050:	2990b03a 	or	r8,r5,r6
    3054:	40009626 	beq	r8,zero,32b0 <__subdf3+0x83c>
    3058:	2807883a 	mov	r3,r5
    305c:	3023883a 	mov	r17,r6
    3060:	3825883a 	mov	r18,r7
    3064:	003ea406 	br	2af8 <__alt_data_end+0xfffe2af8>
    3068:	127ff804 	addi	r9,r2,-32
    306c:	01000804 	movi	r4,32
    3070:	2a52d83a 	srl	r9,r5,r9
    3074:	11008c26 	beq	r2,r4,32a8 <__subdf3+0x834>
    3078:	01001004 	movi	r4,64
    307c:	2085c83a 	sub	r2,r4,r2
    3080:	2884983a 	sll	r2,r5,r2
    3084:	118cb03a 	or	r6,r2,r6
    3088:	300cc03a 	cmpne	r6,r6,zero
    308c:	4992b03a 	or	r9,r9,r6
    3090:	0005883a 	mov	r2,zero
    3094:	003f1206 	br	2ce0 <__alt_data_end+0xfffe2ce0>
    3098:	0101ffc4 	movi	r4,2047
    309c:	493f9c1e 	bne	r9,r4,2f10 <__alt_data_end+0xfffe2f10>
    30a0:	2807883a 	mov	r3,r5
    30a4:	3023883a 	mov	r17,r6
    30a8:	4821883a 	mov	r16,r9
    30ac:	3825883a 	mov	r18,r7
    30b0:	003e9106 	br	2af8 <__alt_data_end+0xfffe2af8>
    30b4:	80001f1e 	bne	r16,zero,3134 <__subdf3+0x6c0>
    30b8:	1c48b03a 	or	r4,r3,r17
    30bc:	20005a26 	beq	r4,zero,3228 <__subdf3+0x7b4>
    30c0:	0084303a 	nor	r2,zero,r2
    30c4:	1000561e 	bne	r2,zero,3220 <__subdf3+0x7ac>
    30c8:	89a3883a 	add	r17,r17,r6
    30cc:	1945883a 	add	r2,r3,r5
    30d0:	898d803a 	cmpltu	r6,r17,r6
    30d4:	3087883a 	add	r3,r6,r2
    30d8:	4821883a 	mov	r16,r9
    30dc:	003f0506 	br	2cf4 <__alt_data_end+0xfffe2cf4>
    30e0:	10002b1e 	bne	r2,zero,3190 <__subdf3+0x71c>
    30e4:	2984b03a 	or	r2,r5,r6
    30e8:	10008026 	beq	r2,zero,32ec <__subdf3+0x878>
    30ec:	2807883a 	mov	r3,r5
    30f0:	3023883a 	mov	r17,r6
    30f4:	3825883a 	mov	r18,r7
    30f8:	0401ffc4 	movi	r16,2047
    30fc:	003e7e06 	br	2af8 <__alt_data_end+0xfffe2af8>
    3100:	3809883a 	mov	r4,r7
    3104:	0011883a 	mov	r8,zero
    3108:	0005883a 	mov	r2,zero
    310c:	003ee306 	br	2c9c <__alt_data_end+0xfffe2c9c>
    3110:	1c62b03a 	or	r17,r3,r17
    3114:	8822c03a 	cmpne	r17,r17,zero
    3118:	0005883a 	mov	r2,zero
    311c:	003f8906 	br	2f44 <__alt_data_end+0xfffe2f44>
    3120:	3809883a 	mov	r4,r7
    3124:	4821883a 	mov	r16,r9
    3128:	0011883a 	mov	r8,zero
    312c:	0005883a 	mov	r2,zero
    3130:	003eda06 	br	2c9c <__alt_data_end+0xfffe2c9c>
    3134:	0101ffc4 	movi	r4,2047
    3138:	49003b26 	beq	r9,r4,3228 <__subdf3+0x7b4>
    313c:	0085c83a 	sub	r2,zero,r2
    3140:	18c02034 	orhi	r3,r3,128
    3144:	01000e04 	movi	r4,56
    3148:	20806e16 	blt	r4,r2,3304 <__subdf3+0x890>
    314c:	010007c4 	movi	r4,31
    3150:	20807716 	blt	r4,r2,3330 <__subdf3+0x8bc>
    3154:	01000804 	movi	r4,32
    3158:	2089c83a 	sub	r4,r4,r2
    315c:	1914983a 	sll	r10,r3,r4
    3160:	8890d83a 	srl	r8,r17,r2
    3164:	8908983a 	sll	r4,r17,r4
    3168:	1884d83a 	srl	r2,r3,r2
    316c:	5222b03a 	or	r17,r10,r8
    3170:	2006c03a 	cmpne	r3,r4,zero
    3174:	88e2b03a 	or	r17,r17,r3
    3178:	89a3883a 	add	r17,r17,r6
    317c:	1145883a 	add	r2,r2,r5
    3180:	898d803a 	cmpltu	r6,r17,r6
    3184:	3087883a 	add	r3,r6,r2
    3188:	4821883a 	mov	r16,r9
    318c:	003ed906 	br	2cf4 <__alt_data_end+0xfffe2cf4>
    3190:	2984b03a 	or	r2,r5,r6
    3194:	10004226 	beq	r2,zero,32a0 <__subdf3+0x82c>
    3198:	1808d0fa 	srli	r4,r3,3
    319c:	8822d0fa 	srli	r17,r17,3
    31a0:	1806977a 	slli	r3,r3,29
    31a4:	2080022c 	andhi	r2,r4,8
    31a8:	1c62b03a 	or	r17,r3,r17
    31ac:	10000826 	beq	r2,zero,31d0 <__subdf3+0x75c>
    31b0:	2812d0fa 	srli	r9,r5,3
    31b4:	4880022c 	andhi	r2,r9,8
    31b8:	1000051e 	bne	r2,zero,31d0 <__subdf3+0x75c>
    31bc:	300cd0fa 	srli	r6,r6,3
    31c0:	2804977a 	slli	r2,r5,29
    31c4:	4809883a 	mov	r4,r9
    31c8:	3825883a 	mov	r18,r7
    31cc:	11a2b03a 	or	r17,r2,r6
    31d0:	8806d77a 	srli	r3,r17,29
    31d4:	200890fa 	slli	r4,r4,3
    31d8:	882290fa 	slli	r17,r17,3
    31dc:	0401ffc4 	movi	r16,2047
    31e0:	1906b03a 	or	r3,r3,r4
    31e4:	003e4406 	br	2af8 <__alt_data_end+0xfffe2af8>
    31e8:	2984b03a 	or	r2,r5,r6
    31ec:	103e4226 	beq	r2,zero,2af8 <__alt_data_end+0xfffe2af8>
    31f0:	8989c83a 	sub	r4,r17,r6
    31f4:	8911803a 	cmpltu	r8,r17,r4
    31f8:	1945c83a 	sub	r2,r3,r5
    31fc:	1205c83a 	sub	r2,r2,r8
    3200:	1200202c 	andhi	r8,r2,128
    3204:	403e9a26 	beq	r8,zero,2c70 <__alt_data_end+0xfffe2c70>
    3208:	3463c83a 	sub	r17,r6,r17
    320c:	28c5c83a 	sub	r2,r5,r3
    3210:	344d803a 	cmpltu	r6,r6,r17
    3214:	1187c83a 	sub	r3,r2,r6
    3218:	3825883a 	mov	r18,r7
    321c:	003e3606 	br	2af8 <__alt_data_end+0xfffe2af8>
    3220:	0101ffc4 	movi	r4,2047
    3224:	493fc71e 	bne	r9,r4,3144 <__alt_data_end+0xfffe3144>
    3228:	2807883a 	mov	r3,r5
    322c:	3023883a 	mov	r17,r6
    3230:	4821883a 	mov	r16,r9
    3234:	003e3006 	br	2af8 <__alt_data_end+0xfffe2af8>
    3238:	10003626 	beq	r2,zero,3314 <__subdf3+0x8a0>
    323c:	2984b03a 	or	r2,r5,r6
    3240:	10001726 	beq	r2,zero,32a0 <__subdf3+0x82c>
    3244:	1808d0fa 	srli	r4,r3,3
    3248:	8822d0fa 	srli	r17,r17,3
    324c:	1806977a 	slli	r3,r3,29
    3250:	2080022c 	andhi	r2,r4,8
    3254:	1c62b03a 	or	r17,r3,r17
    3258:	10000726 	beq	r2,zero,3278 <__subdf3+0x804>
    325c:	2812d0fa 	srli	r9,r5,3
    3260:	4880022c 	andhi	r2,r9,8
    3264:	1000041e 	bne	r2,zero,3278 <__subdf3+0x804>
    3268:	300cd0fa 	srli	r6,r6,3
    326c:	2804977a 	slli	r2,r5,29
    3270:	4809883a 	mov	r4,r9
    3274:	11a2b03a 	or	r17,r2,r6
    3278:	8806d77a 	srli	r3,r17,29
    327c:	200890fa 	slli	r4,r4,3
    3280:	882290fa 	slli	r17,r17,3
    3284:	3825883a 	mov	r18,r7
    3288:	1906b03a 	or	r3,r3,r4
    328c:	0401ffc4 	movi	r16,2047
    3290:	003e1906 	br	2af8 <__alt_data_end+0xfffe2af8>
    3294:	000b883a 	mov	r5,zero
    3298:	0005883a 	mov	r2,zero
    329c:	003e2e06 	br	2b58 <__alt_data_end+0xfffe2b58>
    32a0:	0401ffc4 	movi	r16,2047
    32a4:	003e1406 	br	2af8 <__alt_data_end+0xfffe2af8>
    32a8:	0005883a 	mov	r2,zero
    32ac:	003f7506 	br	3084 <__alt_data_end+0xfffe3084>
    32b0:	0005883a 	mov	r2,zero
    32b4:	0009883a 	mov	r4,zero
    32b8:	003e7806 	br	2c9c <__alt_data_end+0xfffe2c9c>
    32bc:	123ff804 	addi	r8,r2,-32
    32c0:	01000804 	movi	r4,32
    32c4:	1a10d83a 	srl	r8,r3,r8
    32c8:	11002526 	beq	r2,r4,3360 <__subdf3+0x8ec>
    32cc:	01001004 	movi	r4,64
    32d0:	2085c83a 	sub	r2,r4,r2
    32d4:	1884983a 	sll	r2,r3,r2
    32d8:	1444b03a 	or	r2,r2,r17
    32dc:	1004c03a 	cmpne	r2,r2,zero
    32e0:	40a2b03a 	or	r17,r8,r2
    32e4:	0005883a 	mov	r2,zero
    32e8:	003f1606 	br	2f44 <__alt_data_end+0xfffe2f44>
    32ec:	02000434 	movhi	r8,16
    32f0:	0009883a 	mov	r4,zero
    32f4:	423fffc4 	addi	r8,r8,-1
    32f8:	00bfffc4 	movi	r2,-1
    32fc:	0401ffc4 	movi	r16,2047
    3300:	003e6606 	br	2c9c <__alt_data_end+0xfffe2c9c>
    3304:	1c62b03a 	or	r17,r3,r17
    3308:	8822c03a 	cmpne	r17,r17,zero
    330c:	0005883a 	mov	r2,zero
    3310:	003f9906 	br	3178 <__alt_data_end+0xfffe3178>
    3314:	2807883a 	mov	r3,r5
    3318:	3023883a 	mov	r17,r6
    331c:	0401ffc4 	movi	r16,2047
    3320:	003df506 	br	2af8 <__alt_data_end+0xfffe2af8>
    3324:	2807883a 	mov	r3,r5
    3328:	3023883a 	mov	r17,r6
    332c:	003df206 	br	2af8 <__alt_data_end+0xfffe2af8>
    3330:	123ff804 	addi	r8,r2,-32
    3334:	01000804 	movi	r4,32
    3338:	1a10d83a 	srl	r8,r3,r8
    333c:	11000a26 	beq	r2,r4,3368 <__subdf3+0x8f4>
    3340:	01001004 	movi	r4,64
    3344:	2085c83a 	sub	r2,r4,r2
    3348:	1884983a 	sll	r2,r3,r2
    334c:	1444b03a 	or	r2,r2,r17
    3350:	1004c03a 	cmpne	r2,r2,zero
    3354:	40a2b03a 	or	r17,r8,r2
    3358:	0005883a 	mov	r2,zero
    335c:	003f8606 	br	3178 <__alt_data_end+0xfffe3178>
    3360:	0005883a 	mov	r2,zero
    3364:	003fdc06 	br	32d8 <__alt_data_end+0xfffe32d8>
    3368:	0005883a 	mov	r2,zero
    336c:	003ff706 	br	334c <__alt_data_end+0xfffe334c>

00003370 <__floatsidf>:
    3370:	defffd04 	addi	sp,sp,-12
    3374:	dfc00215 	stw	ra,8(sp)
    3378:	dc400115 	stw	r17,4(sp)
    337c:	dc000015 	stw	r16,0(sp)
    3380:	20002b26 	beq	r4,zero,3430 <__floatsidf+0xc0>
    3384:	2023883a 	mov	r17,r4
    3388:	2020d7fa 	srli	r16,r4,31
    338c:	20002d16 	blt	r4,zero,3444 <__floatsidf+0xd4>
    3390:	8809883a 	mov	r4,r17
    3394:	000344c0 	call	344c <__clzsi2>
    3398:	01410784 	movi	r5,1054
    339c:	288bc83a 	sub	r5,r5,r2
    33a0:	01010cc4 	movi	r4,1075
    33a4:	2149c83a 	sub	r4,r4,r5
    33a8:	00c007c4 	movi	r3,31
    33ac:	1900160e 	bge	r3,r4,3408 <__floatsidf+0x98>
    33b0:	00c104c4 	movi	r3,1043
    33b4:	1947c83a 	sub	r3,r3,r5
    33b8:	88c6983a 	sll	r3,r17,r3
    33bc:	00800434 	movhi	r2,16
    33c0:	10bfffc4 	addi	r2,r2,-1
    33c4:	1886703a 	and	r3,r3,r2
    33c8:	2941ffcc 	andi	r5,r5,2047
    33cc:	800d883a 	mov	r6,r16
    33d0:	0005883a 	mov	r2,zero
    33d4:	280a953a 	slli	r5,r5,20
    33d8:	31803fcc 	andi	r6,r6,255
    33dc:	01000434 	movhi	r4,16
    33e0:	300c97fa 	slli	r6,r6,31
    33e4:	213fffc4 	addi	r4,r4,-1
    33e8:	1906703a 	and	r3,r3,r4
    33ec:	1946b03a 	or	r3,r3,r5
    33f0:	1986b03a 	or	r3,r3,r6
    33f4:	dfc00217 	ldw	ra,8(sp)
    33f8:	dc400117 	ldw	r17,4(sp)
    33fc:	dc000017 	ldw	r16,0(sp)
    3400:	dec00304 	addi	sp,sp,12
    3404:	f800283a 	ret
    3408:	00c002c4 	movi	r3,11
    340c:	1887c83a 	sub	r3,r3,r2
    3410:	88c6d83a 	srl	r3,r17,r3
    3414:	8904983a 	sll	r2,r17,r4
    3418:	01000434 	movhi	r4,16
    341c:	213fffc4 	addi	r4,r4,-1
    3420:	2941ffcc 	andi	r5,r5,2047
    3424:	1906703a 	and	r3,r3,r4
    3428:	800d883a 	mov	r6,r16
    342c:	003fe906 	br	33d4 <__alt_data_end+0xfffe33d4>
    3430:	000d883a 	mov	r6,zero
    3434:	000b883a 	mov	r5,zero
    3438:	0007883a 	mov	r3,zero
    343c:	0005883a 	mov	r2,zero
    3440:	003fe406 	br	33d4 <__alt_data_end+0xfffe33d4>
    3444:	0123c83a 	sub	r17,zero,r4
    3448:	003fd106 	br	3390 <__alt_data_end+0xfffe3390>

0000344c <__clzsi2>:
    344c:	00bfffd4 	movui	r2,65535
    3450:	11000536 	bltu	r2,r4,3468 <__clzsi2+0x1c>
    3454:	00803fc4 	movi	r2,255
    3458:	11000f36 	bltu	r2,r4,3498 <__clzsi2+0x4c>
    345c:	00800804 	movi	r2,32
    3460:	0007883a 	mov	r3,zero
    3464:	00000506 	br	347c <__clzsi2+0x30>
    3468:	00804034 	movhi	r2,256
    346c:	10bfffc4 	addi	r2,r2,-1
    3470:	11000c2e 	bgeu	r2,r4,34a4 <__clzsi2+0x58>
    3474:	00800204 	movi	r2,8
    3478:	00c00604 	movi	r3,24
    347c:	20c8d83a 	srl	r4,r4,r3
    3480:	00c00074 	movhi	r3,1
    3484:	18c44ac4 	addi	r3,r3,4395
    3488:	1909883a 	add	r4,r3,r4
    348c:	20c00003 	ldbu	r3,0(r4)
    3490:	10c5c83a 	sub	r2,r2,r3
    3494:	f800283a 	ret
    3498:	00800604 	movi	r2,24
    349c:	00c00204 	movi	r3,8
    34a0:	003ff606 	br	347c <__alt_data_end+0xfffe347c>
    34a4:	00800404 	movi	r2,16
    34a8:	1007883a 	mov	r3,r2
    34ac:	003ff306 	br	347c <__alt_data_end+0xfffe347c>

000034b0 <__divsi3>:
    34b0:	20001b16 	blt	r4,zero,3520 <__divsi3+0x70>
    34b4:	000f883a 	mov	r7,zero
    34b8:	28001616 	blt	r5,zero,3514 <__divsi3+0x64>
    34bc:	200d883a 	mov	r6,r4
    34c0:	29001a2e 	bgeu	r5,r4,352c <__divsi3+0x7c>
    34c4:	00800804 	movi	r2,32
    34c8:	00c00044 	movi	r3,1
    34cc:	00000106 	br	34d4 <__divsi3+0x24>
    34d0:	10000d26 	beq	r2,zero,3508 <__divsi3+0x58>
    34d4:	294b883a 	add	r5,r5,r5
    34d8:	10bfffc4 	addi	r2,r2,-1
    34dc:	18c7883a 	add	r3,r3,r3
    34e0:	293ffb36 	bltu	r5,r4,34d0 <__alt_data_end+0xfffe34d0>
    34e4:	0005883a 	mov	r2,zero
    34e8:	18000726 	beq	r3,zero,3508 <__divsi3+0x58>
    34ec:	0005883a 	mov	r2,zero
    34f0:	31400236 	bltu	r6,r5,34fc <__divsi3+0x4c>
    34f4:	314dc83a 	sub	r6,r6,r5
    34f8:	10c4b03a 	or	r2,r2,r3
    34fc:	1806d07a 	srli	r3,r3,1
    3500:	280ad07a 	srli	r5,r5,1
    3504:	183ffa1e 	bne	r3,zero,34f0 <__alt_data_end+0xfffe34f0>
    3508:	38000126 	beq	r7,zero,3510 <__divsi3+0x60>
    350c:	0085c83a 	sub	r2,zero,r2
    3510:	f800283a 	ret
    3514:	014bc83a 	sub	r5,zero,r5
    3518:	39c0005c 	xori	r7,r7,1
    351c:	003fe706 	br	34bc <__alt_data_end+0xfffe34bc>
    3520:	0109c83a 	sub	r4,zero,r4
    3524:	01c00044 	movi	r7,1
    3528:	003fe306 	br	34b8 <__alt_data_end+0xfffe34b8>
    352c:	00c00044 	movi	r3,1
    3530:	003fee06 	br	34ec <__alt_data_end+0xfffe34ec>

00003534 <__modsi3>:
    3534:	20001716 	blt	r4,zero,3594 <__modsi3+0x60>
    3538:	000f883a 	mov	r7,zero
    353c:	2005883a 	mov	r2,r4
    3540:	28001216 	blt	r5,zero,358c <__modsi3+0x58>
    3544:	2900162e 	bgeu	r5,r4,35a0 <__modsi3+0x6c>
    3548:	01800804 	movi	r6,32
    354c:	00c00044 	movi	r3,1
    3550:	00000106 	br	3558 <__modsi3+0x24>
    3554:	30000a26 	beq	r6,zero,3580 <__modsi3+0x4c>
    3558:	294b883a 	add	r5,r5,r5
    355c:	31bfffc4 	addi	r6,r6,-1
    3560:	18c7883a 	add	r3,r3,r3
    3564:	293ffb36 	bltu	r5,r4,3554 <__alt_data_end+0xfffe3554>
    3568:	18000526 	beq	r3,zero,3580 <__modsi3+0x4c>
    356c:	1806d07a 	srli	r3,r3,1
    3570:	11400136 	bltu	r2,r5,3578 <__modsi3+0x44>
    3574:	1145c83a 	sub	r2,r2,r5
    3578:	280ad07a 	srli	r5,r5,1
    357c:	183ffb1e 	bne	r3,zero,356c <__alt_data_end+0xfffe356c>
    3580:	38000126 	beq	r7,zero,3588 <__modsi3+0x54>
    3584:	0085c83a 	sub	r2,zero,r2
    3588:	f800283a 	ret
    358c:	014bc83a 	sub	r5,zero,r5
    3590:	003fec06 	br	3544 <__alt_data_end+0xfffe3544>
    3594:	0109c83a 	sub	r4,zero,r4
    3598:	01c00044 	movi	r7,1
    359c:	003fe706 	br	353c <__alt_data_end+0xfffe353c>
    35a0:	00c00044 	movi	r3,1
    35a4:	003ff106 	br	356c <__alt_data_end+0xfffe356c>

000035a8 <__udivsi3>:
    35a8:	200d883a 	mov	r6,r4
    35ac:	2900152e 	bgeu	r5,r4,3604 <__udivsi3+0x5c>
    35b0:	28001416 	blt	r5,zero,3604 <__udivsi3+0x5c>
    35b4:	00800804 	movi	r2,32
    35b8:	00c00044 	movi	r3,1
    35bc:	00000206 	br	35c8 <__udivsi3+0x20>
    35c0:	10000e26 	beq	r2,zero,35fc <__udivsi3+0x54>
    35c4:	28000516 	blt	r5,zero,35dc <__udivsi3+0x34>
    35c8:	294b883a 	add	r5,r5,r5
    35cc:	10bfffc4 	addi	r2,r2,-1
    35d0:	18c7883a 	add	r3,r3,r3
    35d4:	293ffa36 	bltu	r5,r4,35c0 <__alt_data_end+0xfffe35c0>
    35d8:	18000826 	beq	r3,zero,35fc <__udivsi3+0x54>
    35dc:	0005883a 	mov	r2,zero
    35e0:	31400236 	bltu	r6,r5,35ec <__udivsi3+0x44>
    35e4:	314dc83a 	sub	r6,r6,r5
    35e8:	10c4b03a 	or	r2,r2,r3
    35ec:	1806d07a 	srli	r3,r3,1
    35f0:	280ad07a 	srli	r5,r5,1
    35f4:	183ffa1e 	bne	r3,zero,35e0 <__alt_data_end+0xfffe35e0>
    35f8:	f800283a 	ret
    35fc:	0005883a 	mov	r2,zero
    3600:	f800283a 	ret
    3604:	00c00044 	movi	r3,1
    3608:	003ff406 	br	35dc <__alt_data_end+0xfffe35dc>

0000360c <__umodsi3>:
    360c:	2005883a 	mov	r2,r4
    3610:	2900122e 	bgeu	r5,r4,365c <__umodsi3+0x50>
    3614:	28001116 	blt	r5,zero,365c <__umodsi3+0x50>
    3618:	01800804 	movi	r6,32
    361c:	00c00044 	movi	r3,1
    3620:	00000206 	br	362c <__umodsi3+0x20>
    3624:	30000c26 	beq	r6,zero,3658 <__umodsi3+0x4c>
    3628:	28000516 	blt	r5,zero,3640 <__umodsi3+0x34>
    362c:	294b883a 	add	r5,r5,r5
    3630:	31bfffc4 	addi	r6,r6,-1
    3634:	18c7883a 	add	r3,r3,r3
    3638:	293ffa36 	bltu	r5,r4,3624 <__alt_data_end+0xfffe3624>
    363c:	18000626 	beq	r3,zero,3658 <__umodsi3+0x4c>
    3640:	1806d07a 	srli	r3,r3,1
    3644:	11400136 	bltu	r2,r5,364c <__umodsi3+0x40>
    3648:	1145c83a 	sub	r2,r2,r5
    364c:	280ad07a 	srli	r5,r5,1
    3650:	183ffb1e 	bne	r3,zero,3640 <__alt_data_end+0xfffe3640>
    3654:	f800283a 	ret
    3658:	f800283a 	ret
    365c:	00c00044 	movi	r3,1
    3660:	003ff706 	br	3640 <__alt_data_end+0xfffe3640>

00003664 <exit>:
    3664:	defffe04 	addi	sp,sp,-8
    3668:	000b883a 	mov	r5,zero
    366c:	dc000015 	stw	r16,0(sp)
    3670:	dfc00115 	stw	ra,4(sp)
    3674:	2021883a 	mov	r16,r4
    3678:	00083b80 	call	83b8 <__call_exitprocs>
    367c:	00800074 	movhi	r2,1
    3680:	108bb604 	addi	r2,r2,11992
    3684:	11000017 	ldw	r4,0(r2)
    3688:	20800f17 	ldw	r2,60(r4)
    368c:	10000126 	beq	r2,zero,3694 <exit+0x30>
    3690:	103ee83a 	callr	r2
    3694:	8009883a 	mov	r4,r16
    3698:	000ebb80 	call	ebb8 <_exit>

0000369c <_fclose_r>:
    369c:	28003926 	beq	r5,zero,3784 <_fclose_r+0xe8>
    36a0:	defffc04 	addi	sp,sp,-16
    36a4:	dc400115 	stw	r17,4(sp)
    36a8:	dc000015 	stw	r16,0(sp)
    36ac:	dfc00315 	stw	ra,12(sp)
    36b0:	dc800215 	stw	r18,8(sp)
    36b4:	2023883a 	mov	r17,r4
    36b8:	2821883a 	mov	r16,r5
    36bc:	20000226 	beq	r4,zero,36c8 <_fclose_r+0x2c>
    36c0:	20800e17 	ldw	r2,56(r4)
    36c4:	10002726 	beq	r2,zero,3764 <_fclose_r+0xc8>
    36c8:	8080030f 	ldh	r2,12(r16)
    36cc:	1000071e 	bne	r2,zero,36ec <_fclose_r+0x50>
    36d0:	0005883a 	mov	r2,zero
    36d4:	dfc00317 	ldw	ra,12(sp)
    36d8:	dc800217 	ldw	r18,8(sp)
    36dc:	dc400117 	ldw	r17,4(sp)
    36e0:	dc000017 	ldw	r16,0(sp)
    36e4:	dec00404 	addi	sp,sp,16
    36e8:	f800283a 	ret
    36ec:	800b883a 	mov	r5,r16
    36f0:	8809883a 	mov	r4,r17
    36f4:	00037a00 	call	37a0 <__sflush_r>
    36f8:	1025883a 	mov	r18,r2
    36fc:	80800b17 	ldw	r2,44(r16)
    3700:	10000426 	beq	r2,zero,3714 <_fclose_r+0x78>
    3704:	81400717 	ldw	r5,28(r16)
    3708:	8809883a 	mov	r4,r17
    370c:	103ee83a 	callr	r2
    3710:	10001616 	blt	r2,zero,376c <_fclose_r+0xd0>
    3714:	8080030b 	ldhu	r2,12(r16)
    3718:	1080200c 	andi	r2,r2,128
    371c:	1000151e 	bne	r2,zero,3774 <_fclose_r+0xd8>
    3720:	81400c17 	ldw	r5,48(r16)
    3724:	28000526 	beq	r5,zero,373c <_fclose_r+0xa0>
    3728:	80801004 	addi	r2,r16,64
    372c:	28800226 	beq	r5,r2,3738 <_fclose_r+0x9c>
    3730:	8809883a 	mov	r4,r17
    3734:	00042980 	call	4298 <_free_r>
    3738:	80000c15 	stw	zero,48(r16)
    373c:	81401117 	ldw	r5,68(r16)
    3740:	28000326 	beq	r5,zero,3750 <_fclose_r+0xb4>
    3744:	8809883a 	mov	r4,r17
    3748:	00042980 	call	4298 <_free_r>
    374c:	80001115 	stw	zero,68(r16)
    3750:	0003db80 	call	3db8 <__sfp_lock_acquire>
    3754:	8000030d 	sth	zero,12(r16)
    3758:	0003dbc0 	call	3dbc <__sfp_lock_release>
    375c:	9005883a 	mov	r2,r18
    3760:	003fdc06 	br	36d4 <__alt_data_end+0xfffe36d4>
    3764:	0003da80 	call	3da8 <__sinit>
    3768:	003fd706 	br	36c8 <__alt_data_end+0xfffe36c8>
    376c:	04bfffc4 	movi	r18,-1
    3770:	003fe806 	br	3714 <__alt_data_end+0xfffe3714>
    3774:	81400417 	ldw	r5,16(r16)
    3778:	8809883a 	mov	r4,r17
    377c:	00042980 	call	4298 <_free_r>
    3780:	003fe706 	br	3720 <__alt_data_end+0xfffe3720>
    3784:	0005883a 	mov	r2,zero
    3788:	f800283a 	ret

0000378c <fclose>:
    378c:	00800074 	movhi	r2,1
    3790:	108bb704 	addi	r2,r2,11996
    3794:	200b883a 	mov	r5,r4
    3798:	11000017 	ldw	r4,0(r2)
    379c:	000369c1 	jmpi	369c <_fclose_r>

000037a0 <__sflush_r>:
    37a0:	2880030b 	ldhu	r2,12(r5)
    37a4:	defffb04 	addi	sp,sp,-20
    37a8:	dcc00315 	stw	r19,12(sp)
    37ac:	dc400115 	stw	r17,4(sp)
    37b0:	dfc00415 	stw	ra,16(sp)
    37b4:	dc800215 	stw	r18,8(sp)
    37b8:	dc000015 	stw	r16,0(sp)
    37bc:	10c0020c 	andi	r3,r2,8
    37c0:	2823883a 	mov	r17,r5
    37c4:	2027883a 	mov	r19,r4
    37c8:	1800311e 	bne	r3,zero,3890 <__sflush_r+0xf0>
    37cc:	28c00117 	ldw	r3,4(r5)
    37d0:	10820014 	ori	r2,r2,2048
    37d4:	2880030d 	sth	r2,12(r5)
    37d8:	00c04b0e 	bge	zero,r3,3908 <__sflush_r+0x168>
    37dc:	8a000a17 	ldw	r8,40(r17)
    37e0:	40002326 	beq	r8,zero,3870 <__sflush_r+0xd0>
    37e4:	9c000017 	ldw	r16,0(r19)
    37e8:	10c4000c 	andi	r3,r2,4096
    37ec:	98000015 	stw	zero,0(r19)
    37f0:	18004826 	beq	r3,zero,3914 <__sflush_r+0x174>
    37f4:	89801417 	ldw	r6,80(r17)
    37f8:	10c0010c 	andi	r3,r2,4
    37fc:	18000626 	beq	r3,zero,3818 <__sflush_r+0x78>
    3800:	88c00117 	ldw	r3,4(r17)
    3804:	88800c17 	ldw	r2,48(r17)
    3808:	30cdc83a 	sub	r6,r6,r3
    380c:	10000226 	beq	r2,zero,3818 <__sflush_r+0x78>
    3810:	88800f17 	ldw	r2,60(r17)
    3814:	308dc83a 	sub	r6,r6,r2
    3818:	89400717 	ldw	r5,28(r17)
    381c:	000f883a 	mov	r7,zero
    3820:	9809883a 	mov	r4,r19
    3824:	403ee83a 	callr	r8
    3828:	00ffffc4 	movi	r3,-1
    382c:	10c04426 	beq	r2,r3,3940 <__sflush_r+0x1a0>
    3830:	88c0030b 	ldhu	r3,12(r17)
    3834:	89000417 	ldw	r4,16(r17)
    3838:	88000115 	stw	zero,4(r17)
    383c:	197dffcc 	andi	r5,r3,63487
    3840:	8940030d 	sth	r5,12(r17)
    3844:	89000015 	stw	r4,0(r17)
    3848:	18c4000c 	andi	r3,r3,4096
    384c:	18002c1e 	bne	r3,zero,3900 <__sflush_r+0x160>
    3850:	89400c17 	ldw	r5,48(r17)
    3854:	9c000015 	stw	r16,0(r19)
    3858:	28000526 	beq	r5,zero,3870 <__sflush_r+0xd0>
    385c:	88801004 	addi	r2,r17,64
    3860:	28800226 	beq	r5,r2,386c <__sflush_r+0xcc>
    3864:	9809883a 	mov	r4,r19
    3868:	00042980 	call	4298 <_free_r>
    386c:	88000c15 	stw	zero,48(r17)
    3870:	0005883a 	mov	r2,zero
    3874:	dfc00417 	ldw	ra,16(sp)
    3878:	dcc00317 	ldw	r19,12(sp)
    387c:	dc800217 	ldw	r18,8(sp)
    3880:	dc400117 	ldw	r17,4(sp)
    3884:	dc000017 	ldw	r16,0(sp)
    3888:	dec00504 	addi	sp,sp,20
    388c:	f800283a 	ret
    3890:	2c800417 	ldw	r18,16(r5)
    3894:	903ff626 	beq	r18,zero,3870 <__alt_data_end+0xfffe3870>
    3898:	2c000017 	ldw	r16,0(r5)
    389c:	108000cc 	andi	r2,r2,3
    38a0:	2c800015 	stw	r18,0(r5)
    38a4:	84a1c83a 	sub	r16,r16,r18
    38a8:	1000131e 	bne	r2,zero,38f8 <__sflush_r+0x158>
    38ac:	28800517 	ldw	r2,20(r5)
    38b0:	88800215 	stw	r2,8(r17)
    38b4:	04000316 	blt	zero,r16,38c4 <__sflush_r+0x124>
    38b8:	003fed06 	br	3870 <__alt_data_end+0xfffe3870>
    38bc:	90a5883a 	add	r18,r18,r2
    38c0:	043feb0e 	bge	zero,r16,3870 <__alt_data_end+0xfffe3870>
    38c4:	88800917 	ldw	r2,36(r17)
    38c8:	89400717 	ldw	r5,28(r17)
    38cc:	800f883a 	mov	r7,r16
    38d0:	900d883a 	mov	r6,r18
    38d4:	9809883a 	mov	r4,r19
    38d8:	103ee83a 	callr	r2
    38dc:	80a1c83a 	sub	r16,r16,r2
    38e0:	00bff616 	blt	zero,r2,38bc <__alt_data_end+0xfffe38bc>
    38e4:	88c0030b 	ldhu	r3,12(r17)
    38e8:	00bfffc4 	movi	r2,-1
    38ec:	18c01014 	ori	r3,r3,64
    38f0:	88c0030d 	sth	r3,12(r17)
    38f4:	003fdf06 	br	3874 <__alt_data_end+0xfffe3874>
    38f8:	0005883a 	mov	r2,zero
    38fc:	003fec06 	br	38b0 <__alt_data_end+0xfffe38b0>
    3900:	88801415 	stw	r2,80(r17)
    3904:	003fd206 	br	3850 <__alt_data_end+0xfffe3850>
    3908:	28c00f17 	ldw	r3,60(r5)
    390c:	00ffb316 	blt	zero,r3,37dc <__alt_data_end+0xfffe37dc>
    3910:	003fd706 	br	3870 <__alt_data_end+0xfffe3870>
    3914:	89400717 	ldw	r5,28(r17)
    3918:	000d883a 	mov	r6,zero
    391c:	01c00044 	movi	r7,1
    3920:	9809883a 	mov	r4,r19
    3924:	403ee83a 	callr	r8
    3928:	100d883a 	mov	r6,r2
    392c:	00bfffc4 	movi	r2,-1
    3930:	30801426 	beq	r6,r2,3984 <__sflush_r+0x1e4>
    3934:	8880030b 	ldhu	r2,12(r17)
    3938:	8a000a17 	ldw	r8,40(r17)
    393c:	003fae06 	br	37f8 <__alt_data_end+0xfffe37f8>
    3940:	98c00017 	ldw	r3,0(r19)
    3944:	183fba26 	beq	r3,zero,3830 <__alt_data_end+0xfffe3830>
    3948:	01000744 	movi	r4,29
    394c:	19000626 	beq	r3,r4,3968 <__sflush_r+0x1c8>
    3950:	01000584 	movi	r4,22
    3954:	19000426 	beq	r3,r4,3968 <__sflush_r+0x1c8>
    3958:	88c0030b 	ldhu	r3,12(r17)
    395c:	18c01014 	ori	r3,r3,64
    3960:	88c0030d 	sth	r3,12(r17)
    3964:	003fc306 	br	3874 <__alt_data_end+0xfffe3874>
    3968:	8880030b 	ldhu	r2,12(r17)
    396c:	88c00417 	ldw	r3,16(r17)
    3970:	88000115 	stw	zero,4(r17)
    3974:	10bdffcc 	andi	r2,r2,63487
    3978:	8880030d 	sth	r2,12(r17)
    397c:	88c00015 	stw	r3,0(r17)
    3980:	003fb306 	br	3850 <__alt_data_end+0xfffe3850>
    3984:	98800017 	ldw	r2,0(r19)
    3988:	103fea26 	beq	r2,zero,3934 <__alt_data_end+0xfffe3934>
    398c:	00c00744 	movi	r3,29
    3990:	10c00226 	beq	r2,r3,399c <__sflush_r+0x1fc>
    3994:	00c00584 	movi	r3,22
    3998:	10c0031e 	bne	r2,r3,39a8 <__sflush_r+0x208>
    399c:	9c000015 	stw	r16,0(r19)
    39a0:	0005883a 	mov	r2,zero
    39a4:	003fb306 	br	3874 <__alt_data_end+0xfffe3874>
    39a8:	88c0030b 	ldhu	r3,12(r17)
    39ac:	3005883a 	mov	r2,r6
    39b0:	18c01014 	ori	r3,r3,64
    39b4:	88c0030d 	sth	r3,12(r17)
    39b8:	003fae06 	br	3874 <__alt_data_end+0xfffe3874>

000039bc <_fflush_r>:
    39bc:	defffd04 	addi	sp,sp,-12
    39c0:	dc000115 	stw	r16,4(sp)
    39c4:	dfc00215 	stw	ra,8(sp)
    39c8:	2021883a 	mov	r16,r4
    39cc:	20000226 	beq	r4,zero,39d8 <_fflush_r+0x1c>
    39d0:	20800e17 	ldw	r2,56(r4)
    39d4:	10000c26 	beq	r2,zero,3a08 <_fflush_r+0x4c>
    39d8:	2880030f 	ldh	r2,12(r5)
    39dc:	1000051e 	bne	r2,zero,39f4 <_fflush_r+0x38>
    39e0:	0005883a 	mov	r2,zero
    39e4:	dfc00217 	ldw	ra,8(sp)
    39e8:	dc000117 	ldw	r16,4(sp)
    39ec:	dec00304 	addi	sp,sp,12
    39f0:	f800283a 	ret
    39f4:	8009883a 	mov	r4,r16
    39f8:	dfc00217 	ldw	ra,8(sp)
    39fc:	dc000117 	ldw	r16,4(sp)
    3a00:	dec00304 	addi	sp,sp,12
    3a04:	00037a01 	jmpi	37a0 <__sflush_r>
    3a08:	d9400015 	stw	r5,0(sp)
    3a0c:	0003da80 	call	3da8 <__sinit>
    3a10:	d9400017 	ldw	r5,0(sp)
    3a14:	003ff006 	br	39d8 <__alt_data_end+0xfffe39d8>

00003a18 <fflush>:
    3a18:	20000526 	beq	r4,zero,3a30 <fflush+0x18>
    3a1c:	00800074 	movhi	r2,1
    3a20:	108bb704 	addi	r2,r2,11996
    3a24:	200b883a 	mov	r5,r4
    3a28:	11000017 	ldw	r4,0(r2)
    3a2c:	00039bc1 	jmpi	39bc <_fflush_r>
    3a30:	00800074 	movhi	r2,1
    3a34:	108bb604 	addi	r2,r2,11992
    3a38:	11000017 	ldw	r4,0(r2)
    3a3c:	01400034 	movhi	r5,0
    3a40:	294e6f04 	addi	r5,r5,14780
    3a44:	0004b481 	jmpi	4b48 <_fwalk_reent>

00003a48 <__fp_unlock>:
    3a48:	0005883a 	mov	r2,zero
    3a4c:	f800283a 	ret

00003a50 <_cleanup_r>:
    3a50:	01400034 	movhi	r5,0
    3a54:	294da704 	addi	r5,r5,13980
    3a58:	0004b481 	jmpi	4b48 <_fwalk_reent>

00003a5c <__sinit.part.1>:
    3a5c:	defff704 	addi	sp,sp,-36
    3a60:	00c00034 	movhi	r3,0
    3a64:	dfc00815 	stw	ra,32(sp)
    3a68:	ddc00715 	stw	r23,28(sp)
    3a6c:	dd800615 	stw	r22,24(sp)
    3a70:	dd400515 	stw	r21,20(sp)
    3a74:	dd000415 	stw	r20,16(sp)
    3a78:	dcc00315 	stw	r19,12(sp)
    3a7c:	dc800215 	stw	r18,8(sp)
    3a80:	dc400115 	stw	r17,4(sp)
    3a84:	dc000015 	stw	r16,0(sp)
    3a88:	18ce9404 	addi	r3,r3,14928
    3a8c:	24000117 	ldw	r16,4(r4)
    3a90:	20c00f15 	stw	r3,60(r4)
    3a94:	2080bb04 	addi	r2,r4,748
    3a98:	00c000c4 	movi	r3,3
    3a9c:	20c0b915 	stw	r3,740(r4)
    3aa0:	2080ba15 	stw	r2,744(r4)
    3aa4:	2000b815 	stw	zero,736(r4)
    3aa8:	05c00204 	movi	r23,8
    3aac:	00800104 	movi	r2,4
    3ab0:	2025883a 	mov	r18,r4
    3ab4:	b80d883a 	mov	r6,r23
    3ab8:	81001704 	addi	r4,r16,92
    3abc:	000b883a 	mov	r5,zero
    3ac0:	80000015 	stw	zero,0(r16)
    3ac4:	80000115 	stw	zero,4(r16)
    3ac8:	80000215 	stw	zero,8(r16)
    3acc:	8080030d 	sth	r2,12(r16)
    3ad0:	80001915 	stw	zero,100(r16)
    3ad4:	8000038d 	sth	zero,14(r16)
    3ad8:	80000415 	stw	zero,16(r16)
    3adc:	80000515 	stw	zero,20(r16)
    3ae0:	80000615 	stw	zero,24(r16)
    3ae4:	000571c0 	call	571c <memset>
    3ae8:	05800034 	movhi	r22,0
    3aec:	94400217 	ldw	r17,8(r18)
    3af0:	05400034 	movhi	r21,0
    3af4:	05000034 	movhi	r20,0
    3af8:	04c00034 	movhi	r19,0
    3afc:	b5970a04 	addi	r22,r22,23592
    3b00:	ad572104 	addi	r21,r21,23684
    3b04:	a5174004 	addi	r20,r20,23808
    3b08:	9cd75704 	addi	r19,r19,23900
    3b0c:	85800815 	stw	r22,32(r16)
    3b10:	85400915 	stw	r21,36(r16)
    3b14:	85000a15 	stw	r20,40(r16)
    3b18:	84c00b15 	stw	r19,44(r16)
    3b1c:	84000715 	stw	r16,28(r16)
    3b20:	00800284 	movi	r2,10
    3b24:	8880030d 	sth	r2,12(r17)
    3b28:	00800044 	movi	r2,1
    3b2c:	b80d883a 	mov	r6,r23
    3b30:	89001704 	addi	r4,r17,92
    3b34:	000b883a 	mov	r5,zero
    3b38:	88000015 	stw	zero,0(r17)
    3b3c:	88000115 	stw	zero,4(r17)
    3b40:	88000215 	stw	zero,8(r17)
    3b44:	88001915 	stw	zero,100(r17)
    3b48:	8880038d 	sth	r2,14(r17)
    3b4c:	88000415 	stw	zero,16(r17)
    3b50:	88000515 	stw	zero,20(r17)
    3b54:	88000615 	stw	zero,24(r17)
    3b58:	000571c0 	call	571c <memset>
    3b5c:	94000317 	ldw	r16,12(r18)
    3b60:	00800484 	movi	r2,18
    3b64:	8c400715 	stw	r17,28(r17)
    3b68:	8d800815 	stw	r22,32(r17)
    3b6c:	8d400915 	stw	r21,36(r17)
    3b70:	8d000a15 	stw	r20,40(r17)
    3b74:	8cc00b15 	stw	r19,44(r17)
    3b78:	8080030d 	sth	r2,12(r16)
    3b7c:	00800084 	movi	r2,2
    3b80:	80000015 	stw	zero,0(r16)
    3b84:	80000115 	stw	zero,4(r16)
    3b88:	80000215 	stw	zero,8(r16)
    3b8c:	80001915 	stw	zero,100(r16)
    3b90:	8080038d 	sth	r2,14(r16)
    3b94:	80000415 	stw	zero,16(r16)
    3b98:	80000515 	stw	zero,20(r16)
    3b9c:	80000615 	stw	zero,24(r16)
    3ba0:	b80d883a 	mov	r6,r23
    3ba4:	000b883a 	mov	r5,zero
    3ba8:	81001704 	addi	r4,r16,92
    3bac:	000571c0 	call	571c <memset>
    3bb0:	00800044 	movi	r2,1
    3bb4:	84000715 	stw	r16,28(r16)
    3bb8:	85800815 	stw	r22,32(r16)
    3bbc:	85400915 	stw	r21,36(r16)
    3bc0:	85000a15 	stw	r20,40(r16)
    3bc4:	84c00b15 	stw	r19,44(r16)
    3bc8:	90800e15 	stw	r2,56(r18)
    3bcc:	dfc00817 	ldw	ra,32(sp)
    3bd0:	ddc00717 	ldw	r23,28(sp)
    3bd4:	dd800617 	ldw	r22,24(sp)
    3bd8:	dd400517 	ldw	r21,20(sp)
    3bdc:	dd000417 	ldw	r20,16(sp)
    3be0:	dcc00317 	ldw	r19,12(sp)
    3be4:	dc800217 	ldw	r18,8(sp)
    3be8:	dc400117 	ldw	r17,4(sp)
    3bec:	dc000017 	ldw	r16,0(sp)
    3bf0:	dec00904 	addi	sp,sp,36
    3bf4:	f800283a 	ret

00003bf8 <__fp_lock>:
    3bf8:	0005883a 	mov	r2,zero
    3bfc:	f800283a 	ret

00003c00 <__sfmoreglue>:
    3c00:	defffc04 	addi	sp,sp,-16
    3c04:	dc800215 	stw	r18,8(sp)
    3c08:	2825883a 	mov	r18,r5
    3c0c:	dc000015 	stw	r16,0(sp)
    3c10:	01401a04 	movi	r5,104
    3c14:	2021883a 	mov	r16,r4
    3c18:	913fffc4 	addi	r4,r18,-1
    3c1c:	dfc00315 	stw	ra,12(sp)
    3c20:	dc400115 	stw	r17,4(sp)
    3c24:	0000e880 	call	e88 <__mulsi3>
    3c28:	8009883a 	mov	r4,r16
    3c2c:	11401d04 	addi	r5,r2,116
    3c30:	1023883a 	mov	r17,r2
    3c34:	0004dc80 	call	4dc8 <_malloc_r>
    3c38:	1021883a 	mov	r16,r2
    3c3c:	10000726 	beq	r2,zero,3c5c <__sfmoreglue+0x5c>
    3c40:	11000304 	addi	r4,r2,12
    3c44:	10000015 	stw	zero,0(r2)
    3c48:	14800115 	stw	r18,4(r2)
    3c4c:	11000215 	stw	r4,8(r2)
    3c50:	89801a04 	addi	r6,r17,104
    3c54:	000b883a 	mov	r5,zero
    3c58:	000571c0 	call	571c <memset>
    3c5c:	8005883a 	mov	r2,r16
    3c60:	dfc00317 	ldw	ra,12(sp)
    3c64:	dc800217 	ldw	r18,8(sp)
    3c68:	dc400117 	ldw	r17,4(sp)
    3c6c:	dc000017 	ldw	r16,0(sp)
    3c70:	dec00404 	addi	sp,sp,16
    3c74:	f800283a 	ret

00003c78 <__sfp>:
    3c78:	defffb04 	addi	sp,sp,-20
    3c7c:	dc000015 	stw	r16,0(sp)
    3c80:	04000074 	movhi	r16,1
    3c84:	840bb604 	addi	r16,r16,11992
    3c88:	dcc00315 	stw	r19,12(sp)
    3c8c:	2027883a 	mov	r19,r4
    3c90:	81000017 	ldw	r4,0(r16)
    3c94:	dfc00415 	stw	ra,16(sp)
    3c98:	dc800215 	stw	r18,8(sp)
    3c9c:	20800e17 	ldw	r2,56(r4)
    3ca0:	dc400115 	stw	r17,4(sp)
    3ca4:	1000021e 	bne	r2,zero,3cb0 <__sfp+0x38>
    3ca8:	0003a5c0 	call	3a5c <__sinit.part.1>
    3cac:	81000017 	ldw	r4,0(r16)
    3cb0:	2480b804 	addi	r18,r4,736
    3cb4:	047fffc4 	movi	r17,-1
    3cb8:	91000117 	ldw	r4,4(r18)
    3cbc:	94000217 	ldw	r16,8(r18)
    3cc0:	213fffc4 	addi	r4,r4,-1
    3cc4:	20000a16 	blt	r4,zero,3cf0 <__sfp+0x78>
    3cc8:	8080030f 	ldh	r2,12(r16)
    3ccc:	10000c26 	beq	r2,zero,3d00 <__sfp+0x88>
    3cd0:	80c01d04 	addi	r3,r16,116
    3cd4:	00000206 	br	3ce0 <__sfp+0x68>
    3cd8:	18bfe60f 	ldh	r2,-104(r3)
    3cdc:	10000826 	beq	r2,zero,3d00 <__sfp+0x88>
    3ce0:	213fffc4 	addi	r4,r4,-1
    3ce4:	1c3ffd04 	addi	r16,r3,-12
    3ce8:	18c01a04 	addi	r3,r3,104
    3cec:	247ffa1e 	bne	r4,r17,3cd8 <__alt_data_end+0xfffe3cd8>
    3cf0:	90800017 	ldw	r2,0(r18)
    3cf4:	10001d26 	beq	r2,zero,3d6c <__sfp+0xf4>
    3cf8:	1025883a 	mov	r18,r2
    3cfc:	003fee06 	br	3cb8 <__alt_data_end+0xfffe3cb8>
    3d00:	00bfffc4 	movi	r2,-1
    3d04:	8080038d 	sth	r2,14(r16)
    3d08:	00800044 	movi	r2,1
    3d0c:	8080030d 	sth	r2,12(r16)
    3d10:	80001915 	stw	zero,100(r16)
    3d14:	80000015 	stw	zero,0(r16)
    3d18:	80000215 	stw	zero,8(r16)
    3d1c:	80000115 	stw	zero,4(r16)
    3d20:	80000415 	stw	zero,16(r16)
    3d24:	80000515 	stw	zero,20(r16)
    3d28:	80000615 	stw	zero,24(r16)
    3d2c:	01800204 	movi	r6,8
    3d30:	000b883a 	mov	r5,zero
    3d34:	81001704 	addi	r4,r16,92
    3d38:	000571c0 	call	571c <memset>
    3d3c:	8005883a 	mov	r2,r16
    3d40:	80000c15 	stw	zero,48(r16)
    3d44:	80000d15 	stw	zero,52(r16)
    3d48:	80001115 	stw	zero,68(r16)
    3d4c:	80001215 	stw	zero,72(r16)
    3d50:	dfc00417 	ldw	ra,16(sp)
    3d54:	dcc00317 	ldw	r19,12(sp)
    3d58:	dc800217 	ldw	r18,8(sp)
    3d5c:	dc400117 	ldw	r17,4(sp)
    3d60:	dc000017 	ldw	r16,0(sp)
    3d64:	dec00504 	addi	sp,sp,20
    3d68:	f800283a 	ret
    3d6c:	01400104 	movi	r5,4
    3d70:	9809883a 	mov	r4,r19
    3d74:	0003c000 	call	3c00 <__sfmoreglue>
    3d78:	90800015 	stw	r2,0(r18)
    3d7c:	103fde1e 	bne	r2,zero,3cf8 <__alt_data_end+0xfffe3cf8>
    3d80:	00800304 	movi	r2,12
    3d84:	98800015 	stw	r2,0(r19)
    3d88:	0005883a 	mov	r2,zero
    3d8c:	003ff006 	br	3d50 <__alt_data_end+0xfffe3d50>

00003d90 <_cleanup>:
    3d90:	00800074 	movhi	r2,1
    3d94:	108bb604 	addi	r2,r2,11992
    3d98:	11000017 	ldw	r4,0(r2)
    3d9c:	01400034 	movhi	r5,0
    3da0:	294da704 	addi	r5,r5,13980
    3da4:	0004b481 	jmpi	4b48 <_fwalk_reent>

00003da8 <__sinit>:
    3da8:	20800e17 	ldw	r2,56(r4)
    3dac:	10000126 	beq	r2,zero,3db4 <__sinit+0xc>
    3db0:	f800283a 	ret
    3db4:	0003a5c1 	jmpi	3a5c <__sinit.part.1>

00003db8 <__sfp_lock_acquire>:
    3db8:	f800283a 	ret

00003dbc <__sfp_lock_release>:
    3dbc:	f800283a 	ret

00003dc0 <__sinit_lock_acquire>:
    3dc0:	f800283a 	ret

00003dc4 <__sinit_lock_release>:
    3dc4:	f800283a 	ret

00003dc8 <__fp_lock_all>:
    3dc8:	00800074 	movhi	r2,1
    3dcc:	108bb704 	addi	r2,r2,11996
    3dd0:	11000017 	ldw	r4,0(r2)
    3dd4:	01400034 	movhi	r5,0
    3dd8:	294efe04 	addi	r5,r5,15352
    3ddc:	0004a841 	jmpi	4a84 <_fwalk>

00003de0 <__fp_unlock_all>:
    3de0:	00800074 	movhi	r2,1
    3de4:	108bb704 	addi	r2,r2,11996
    3de8:	11000017 	ldw	r4,0(r2)
    3dec:	01400034 	movhi	r5,0
    3df0:	294e9204 	addi	r5,r5,14920
    3df4:	0004a841 	jmpi	4a84 <_fwalk>

00003df8 <_fopen_r>:
    3df8:	defffa04 	addi	sp,sp,-24
    3dfc:	3005883a 	mov	r2,r6
    3e00:	dcc00415 	stw	r19,16(sp)
    3e04:	d80d883a 	mov	r6,sp
    3e08:	2827883a 	mov	r19,r5
    3e0c:	100b883a 	mov	r5,r2
    3e10:	dc800315 	stw	r18,12(sp)
    3e14:	dfc00515 	stw	ra,20(sp)
    3e18:	dc400215 	stw	r17,8(sp)
    3e1c:	dc000115 	stw	r16,4(sp)
    3e20:	2025883a 	mov	r18,r4
    3e24:	0009de80 	call	9de8 <__sflags>
    3e28:	10002726 	beq	r2,zero,3ec8 <_fopen_r+0xd0>
    3e2c:	9009883a 	mov	r4,r18
    3e30:	1023883a 	mov	r17,r2
    3e34:	0003c780 	call	3c78 <__sfp>
    3e38:	1021883a 	mov	r16,r2
    3e3c:	10002226 	beq	r2,zero,3ec8 <_fopen_r+0xd0>
    3e40:	d9800017 	ldw	r6,0(sp)
    3e44:	01c06d84 	movi	r7,438
    3e48:	980b883a 	mov	r5,r19
    3e4c:	9009883a 	mov	r4,r18
    3e50:	00058440 	call	5844 <_open_r>
    3e54:	10001916 	blt	r2,zero,3ebc <_fopen_r+0xc4>
    3e58:	8080038d 	sth	r2,14(r16)
    3e5c:	00800034 	movhi	r2,0
    3e60:	10970a04 	addi	r2,r2,23592
    3e64:	80800815 	stw	r2,32(r16)
    3e68:	00800034 	movhi	r2,0
    3e6c:	10972104 	addi	r2,r2,23684
    3e70:	80800915 	stw	r2,36(r16)
    3e74:	00800034 	movhi	r2,0
    3e78:	10974004 	addi	r2,r2,23808
    3e7c:	80800a15 	stw	r2,40(r16)
    3e80:	00800034 	movhi	r2,0
    3e84:	10975704 	addi	r2,r2,23900
    3e88:	8440030d 	sth	r17,12(r16)
    3e8c:	84000715 	stw	r16,28(r16)
    3e90:	80800b15 	stw	r2,44(r16)
    3e94:	8c40400c 	andi	r17,r17,256
    3e98:	88000d1e 	bne	r17,zero,3ed0 <_fopen_r+0xd8>
    3e9c:	8005883a 	mov	r2,r16
    3ea0:	dfc00517 	ldw	ra,20(sp)
    3ea4:	dcc00417 	ldw	r19,16(sp)
    3ea8:	dc800317 	ldw	r18,12(sp)
    3eac:	dc400217 	ldw	r17,8(sp)
    3eb0:	dc000117 	ldw	r16,4(sp)
    3eb4:	dec00604 	addi	sp,sp,24
    3eb8:	f800283a 	ret
    3ebc:	0003db80 	call	3db8 <__sfp_lock_acquire>
    3ec0:	8000030d 	sth	zero,12(r16)
    3ec4:	0003dbc0 	call	3dbc <__sfp_lock_release>
    3ec8:	0005883a 	mov	r2,zero
    3ecc:	003ff406 	br	3ea0 <__alt_data_end+0xfffe3ea0>
    3ed0:	01c00084 	movi	r7,2
    3ed4:	000d883a 	mov	r6,zero
    3ed8:	800b883a 	mov	r5,r16
    3edc:	9009883a 	mov	r4,r18
    3ee0:	00045a80 	call	45a8 <_fseek_r>
    3ee4:	8005883a 	mov	r2,r16
    3ee8:	003fed06 	br	3ea0 <__alt_data_end+0xfffe3ea0>

00003eec <fopen>:
    3eec:	00800074 	movhi	r2,1
    3ef0:	108bb704 	addi	r2,r2,11996
    3ef4:	280d883a 	mov	r6,r5
    3ef8:	200b883a 	mov	r5,r4
    3efc:	11000017 	ldw	r4,0(r2)
    3f00:	0003df81 	jmpi	3df8 <_fopen_r>

00003f04 <_fread_r>:
    3f04:	defff404 	addi	sp,sp,-48
    3f08:	dd000615 	stw	r20,24(sp)
    3f0c:	dcc00515 	stw	r19,20(sp)
    3f10:	2029883a 	mov	r20,r4
    3f14:	2827883a 	mov	r19,r5
    3f18:	3809883a 	mov	r4,r7
    3f1c:	300b883a 	mov	r5,r6
    3f20:	ddc00915 	stw	r23,36(sp)
    3f24:	dd400715 	stw	r21,28(sp)
    3f28:	dc000215 	stw	r16,8(sp)
    3f2c:	dfc00b15 	stw	ra,44(sp)
    3f30:	df000a15 	stw	fp,40(sp)
    3f34:	dd800815 	stw	r22,32(sp)
    3f38:	dc800415 	stw	r18,16(sp)
    3f3c:	dc400315 	stw	r17,12(sp)
    3f40:	302f883a 	mov	r23,r6
    3f44:	382b883a 	mov	r21,r7
    3f48:	0000e880 	call	e88 <__mulsi3>
    3f4c:	dc000c17 	ldw	r16,48(sp)
    3f50:	10003826 	beq	r2,zero,4034 <_fread_r+0x130>
    3f54:	102d883a 	mov	r22,r2
    3f58:	a0000226 	beq	r20,zero,3f64 <_fread_r+0x60>
    3f5c:	a0800e17 	ldw	r2,56(r20)
    3f60:	10006e26 	beq	r2,zero,411c <_fread_r+0x218>
    3f64:	8080030b 	ldhu	r2,12(r16)
    3f68:	10c8000c 	andi	r3,r2,8192
    3f6c:	1800061e 	bne	r3,zero,3f88 <_fread_r+0x84>
    3f70:	81001917 	ldw	r4,100(r16)
    3f74:	00f7ffc4 	movi	r3,-8193
    3f78:	10880014 	ori	r2,r2,8192
    3f7c:	20c6703a 	and	r3,r4,r3
    3f80:	8080030d 	sth	r2,12(r16)
    3f84:	80c01915 	stw	r3,100(r16)
    3f88:	84400117 	ldw	r17,4(r16)
    3f8c:	88005f16 	blt	r17,zero,410c <_fread_r+0x208>
    3f90:	8809883a 	mov	r4,r17
    3f94:	1080008c 	andi	r2,r2,2
    3f98:	1000281e 	bne	r2,zero,403c <_fread_r+0x138>
    3f9c:	b025883a 	mov	r18,r22
    3fa0:	00000b06 	br	3fd0 <_fread_r+0xcc>
    3fa4:	00055d40 	call	55d4 <memcpy>
    3fa8:	80800017 	ldw	r2,0(r16)
    3fac:	9c67883a 	add	r19,r19,r17
    3fb0:	9465c83a 	sub	r18,r18,r17
    3fb4:	1463883a 	add	r17,r2,r17
    3fb8:	800b883a 	mov	r5,r16
    3fbc:	a009883a 	mov	r4,r20
    3fc0:	84400015 	stw	r17,0(r16)
    3fc4:	0005a000 	call	5a00 <__srefill_r>
    3fc8:	10004c1e 	bne	r2,zero,40fc <_fread_r+0x1f8>
    3fcc:	84400117 	ldw	r17,4(r16)
    3fd0:	880d883a 	mov	r6,r17
    3fd4:	9809883a 	mov	r4,r19
    3fd8:	81400017 	ldw	r5,0(r16)
    3fdc:	8cbff136 	bltu	r17,r18,3fa4 <__alt_data_end+0xfffe3fa4>
    3fe0:	900d883a 	mov	r6,r18
    3fe4:	00055d40 	call	55d4 <memcpy>
    3fe8:	80c00117 	ldw	r3,4(r16)
    3fec:	81000017 	ldw	r4,0(r16)
    3ff0:	a805883a 	mov	r2,r21
    3ff4:	1c87c83a 	sub	r3,r3,r18
    3ff8:	24a5883a 	add	r18,r4,r18
    3ffc:	80c00115 	stw	r3,4(r16)
    4000:	84800015 	stw	r18,0(r16)
    4004:	dfc00b17 	ldw	ra,44(sp)
    4008:	df000a17 	ldw	fp,40(sp)
    400c:	ddc00917 	ldw	r23,36(sp)
    4010:	dd800817 	ldw	r22,32(sp)
    4014:	dd400717 	ldw	r21,28(sp)
    4018:	dd000617 	ldw	r20,24(sp)
    401c:	dcc00517 	ldw	r19,20(sp)
    4020:	dc800417 	ldw	r18,16(sp)
    4024:	dc400317 	ldw	r17,12(sp)
    4028:	dc000217 	ldw	r16,8(sp)
    402c:	dec00c04 	addi	sp,sp,48
    4030:	f800283a 	ret
    4034:	0005883a 	mov	r2,zero
    4038:	003ff206 	br	4004 <__alt_data_end+0xfffe4004>
    403c:	b007883a 	mov	r3,r22
    4040:	2580012e 	bgeu	r4,r22,4048 <_fread_r+0x144>
    4044:	2007883a 	mov	r3,r4
    4048:	81400017 	ldw	r5,0(r16)
    404c:	180d883a 	mov	r6,r3
    4050:	9809883a 	mov	r4,r19
    4054:	d8c00115 	stw	r3,4(sp)
    4058:	00055d40 	call	55d4 <memcpy>
    405c:	d8c00117 	ldw	r3,4(sp)
    4060:	84400017 	ldw	r17,0(r16)
    4064:	80800117 	ldw	r2,4(r16)
    4068:	81400c17 	ldw	r5,48(r16)
    406c:	88e3883a 	add	r17,r17,r3
    4070:	10c5c83a 	sub	r2,r2,r3
    4074:	84400015 	stw	r17,0(r16)
    4078:	80800115 	stw	r2,4(r16)
    407c:	b0e5c83a 	sub	r18,r22,r3
    4080:	28002c26 	beq	r5,zero,4134 <_fread_r+0x230>
    4084:	90002c26 	beq	r18,zero,4138 <_fread_r+0x234>
    4088:	80801004 	addi	r2,r16,64
    408c:	28800526 	beq	r5,r2,40a4 <_fread_r+0x1a0>
    4090:	a009883a 	mov	r4,r20
    4094:	d8c00115 	stw	r3,4(sp)
    4098:	00042980 	call	4298 <_free_r>
    409c:	d8c00117 	ldw	r3,4(sp)
    40a0:	84400017 	ldw	r17,0(r16)
    40a4:	80000c15 	stw	zero,48(r16)
    40a8:	80800517 	ldw	r2,20(r16)
    40ac:	87000417 	ldw	fp,16(r16)
    40b0:	98e7883a 	add	r19,r19,r3
    40b4:	d8800015 	stw	r2,0(sp)
    40b8:	00000106 	br	40c0 <_fread_r+0x1bc>
    40bc:	90001e26 	beq	r18,zero,4138 <_fread_r+0x234>
    40c0:	84c00415 	stw	r19,16(r16)
    40c4:	84800515 	stw	r18,20(r16)
    40c8:	84c00015 	stw	r19,0(r16)
    40cc:	a009883a 	mov	r4,r20
    40d0:	800b883a 	mov	r5,r16
    40d4:	0005a000 	call	5a00 <__srefill_r>
    40d8:	d9000017 	ldw	r4,0(sp)
    40dc:	80c00117 	ldw	r3,4(r16)
    40e0:	87000415 	stw	fp,16(r16)
    40e4:	81000515 	stw	r4,20(r16)
    40e8:	84400015 	stw	r17,0(r16)
    40ec:	80000115 	stw	zero,4(r16)
    40f0:	90e5c83a 	sub	r18,r18,r3
    40f4:	98e7883a 	add	r19,r19,r3
    40f8:	103ff026 	beq	r2,zero,40bc <__alt_data_end+0xfffe40bc>
    40fc:	b80b883a 	mov	r5,r23
    4100:	b489c83a 	sub	r4,r22,r18
    4104:	00035a80 	call	35a8 <__udivsi3>
    4108:	003fbe06 	br	4004 <__alt_data_end+0xfffe4004>
    410c:	80000115 	stw	zero,4(r16)
    4110:	0009883a 	mov	r4,zero
    4114:	0023883a 	mov	r17,zero
    4118:	003f9e06 	br	3f94 <__alt_data_end+0xfffe3f94>
    411c:	a009883a 	mov	r4,r20
    4120:	0003da80 	call	3da8 <__sinit>
    4124:	8080030b 	ldhu	r2,12(r16)
    4128:	10c8000c 	andi	r3,r2,8192
    412c:	183f961e 	bne	r3,zero,3f88 <__alt_data_end+0xfffe3f88>
    4130:	003f8f06 	br	3f70 <__alt_data_end+0xfffe3f70>
    4134:	903fdc1e 	bne	r18,zero,40a8 <__alt_data_end+0xfffe40a8>
    4138:	a805883a 	mov	r2,r21
    413c:	003fb106 	br	4004 <__alt_data_end+0xfffe4004>

00004140 <fread>:
    4140:	defffe04 	addi	sp,sp,-8
    4144:	00800074 	movhi	r2,1
    4148:	d9c00015 	stw	r7,0(sp)
    414c:	108bb704 	addi	r2,r2,11996
    4150:	300f883a 	mov	r7,r6
    4154:	280d883a 	mov	r6,r5
    4158:	200b883a 	mov	r5,r4
    415c:	11000017 	ldw	r4,0(r2)
    4160:	dfc00115 	stw	ra,4(sp)
    4164:	0003f040 	call	3f04 <_fread_r>
    4168:	dfc00117 	ldw	ra,4(sp)
    416c:	dec00204 	addi	sp,sp,8
    4170:	f800283a 	ret

00004174 <_malloc_trim_r>:
    4174:	defffb04 	addi	sp,sp,-20
    4178:	dcc00315 	stw	r19,12(sp)
    417c:	04c00074 	movhi	r19,1
    4180:	dc800215 	stw	r18,8(sp)
    4184:	dc400115 	stw	r17,4(sp)
    4188:	dc000015 	stw	r16,0(sp)
    418c:	dfc00415 	stw	ra,16(sp)
    4190:	2821883a 	mov	r16,r5
    4194:	9cc61404 	addi	r19,r19,6224
    4198:	2025883a 	mov	r18,r4
    419c:	000f0480 	call	f048 <__malloc_lock>
    41a0:	98800217 	ldw	r2,8(r19)
    41a4:	14400117 	ldw	r17,4(r2)
    41a8:	00bfff04 	movi	r2,-4
    41ac:	88a2703a 	and	r17,r17,r2
    41b0:	8c21c83a 	sub	r16,r17,r16
    41b4:	8403fbc4 	addi	r16,r16,4079
    41b8:	8020d33a 	srli	r16,r16,12
    41bc:	0083ffc4 	movi	r2,4095
    41c0:	843fffc4 	addi	r16,r16,-1
    41c4:	8020933a 	slli	r16,r16,12
    41c8:	1400060e 	bge	r2,r16,41e4 <_malloc_trim_r+0x70>
    41cc:	000b883a 	mov	r5,zero
    41d0:	9009883a 	mov	r4,r18
    41d4:	0005bd40 	call	5bd4 <_sbrk_r>
    41d8:	98c00217 	ldw	r3,8(r19)
    41dc:	1c47883a 	add	r3,r3,r17
    41e0:	10c00a26 	beq	r2,r3,420c <_malloc_trim_r+0x98>
    41e4:	9009883a 	mov	r4,r18
    41e8:	000f06c0 	call	f06c <__malloc_unlock>
    41ec:	0005883a 	mov	r2,zero
    41f0:	dfc00417 	ldw	ra,16(sp)
    41f4:	dcc00317 	ldw	r19,12(sp)
    41f8:	dc800217 	ldw	r18,8(sp)
    41fc:	dc400117 	ldw	r17,4(sp)
    4200:	dc000017 	ldw	r16,0(sp)
    4204:	dec00504 	addi	sp,sp,20
    4208:	f800283a 	ret
    420c:	040bc83a 	sub	r5,zero,r16
    4210:	9009883a 	mov	r4,r18
    4214:	0005bd40 	call	5bd4 <_sbrk_r>
    4218:	00ffffc4 	movi	r3,-1
    421c:	10c00d26 	beq	r2,r3,4254 <_malloc_trim_r+0xe0>
    4220:	00c00074 	movhi	r3,1
    4224:	18d28f04 	addi	r3,r3,19004
    4228:	18800017 	ldw	r2,0(r3)
    422c:	99000217 	ldw	r4,8(r19)
    4230:	8c23c83a 	sub	r17,r17,r16
    4234:	8c400054 	ori	r17,r17,1
    4238:	1421c83a 	sub	r16,r2,r16
    423c:	24400115 	stw	r17,4(r4)
    4240:	9009883a 	mov	r4,r18
    4244:	1c000015 	stw	r16,0(r3)
    4248:	000f06c0 	call	f06c <__malloc_unlock>
    424c:	00800044 	movi	r2,1
    4250:	003fe706 	br	41f0 <__alt_data_end+0xfffe41f0>
    4254:	000b883a 	mov	r5,zero
    4258:	9009883a 	mov	r4,r18
    425c:	0005bd40 	call	5bd4 <_sbrk_r>
    4260:	99000217 	ldw	r4,8(r19)
    4264:	014003c4 	movi	r5,15
    4268:	1107c83a 	sub	r3,r2,r4
    426c:	28ffdd0e 	bge	r5,r3,41e4 <__alt_data_end+0xfffe41e4>
    4270:	01400074 	movhi	r5,1
    4274:	294bb804 	addi	r5,r5,12000
    4278:	29400017 	ldw	r5,0(r5)
    427c:	18c00054 	ori	r3,r3,1
    4280:	20c00115 	stw	r3,4(r4)
    4284:	00c00074 	movhi	r3,1
    4288:	1145c83a 	sub	r2,r2,r5
    428c:	18d28f04 	addi	r3,r3,19004
    4290:	18800015 	stw	r2,0(r3)
    4294:	003fd306 	br	41e4 <__alt_data_end+0xfffe41e4>

00004298 <_free_r>:
    4298:	28004126 	beq	r5,zero,43a0 <_free_r+0x108>
    429c:	defffd04 	addi	sp,sp,-12
    42a0:	dc400115 	stw	r17,4(sp)
    42a4:	dc000015 	stw	r16,0(sp)
    42a8:	2023883a 	mov	r17,r4
    42ac:	2821883a 	mov	r16,r5
    42b0:	dfc00215 	stw	ra,8(sp)
    42b4:	000f0480 	call	f048 <__malloc_lock>
    42b8:	81ffff17 	ldw	r7,-4(r16)
    42bc:	00bfff84 	movi	r2,-2
    42c0:	01000074 	movhi	r4,1
    42c4:	81bffe04 	addi	r6,r16,-8
    42c8:	3884703a 	and	r2,r7,r2
    42cc:	21061404 	addi	r4,r4,6224
    42d0:	308b883a 	add	r5,r6,r2
    42d4:	2a400117 	ldw	r9,4(r5)
    42d8:	22000217 	ldw	r8,8(r4)
    42dc:	00ffff04 	movi	r3,-4
    42e0:	48c6703a 	and	r3,r9,r3
    42e4:	2a005726 	beq	r5,r8,4444 <_free_r+0x1ac>
    42e8:	28c00115 	stw	r3,4(r5)
    42ec:	39c0004c 	andi	r7,r7,1
    42f0:	3800091e 	bne	r7,zero,4318 <_free_r+0x80>
    42f4:	823ffe17 	ldw	r8,-8(r16)
    42f8:	22400204 	addi	r9,r4,8
    42fc:	320dc83a 	sub	r6,r6,r8
    4300:	31c00217 	ldw	r7,8(r6)
    4304:	1205883a 	add	r2,r2,r8
    4308:	3a406526 	beq	r7,r9,44a0 <_free_r+0x208>
    430c:	32000317 	ldw	r8,12(r6)
    4310:	3a000315 	stw	r8,12(r7)
    4314:	41c00215 	stw	r7,8(r8)
    4318:	28cf883a 	add	r7,r5,r3
    431c:	39c00117 	ldw	r7,4(r7)
    4320:	39c0004c 	andi	r7,r7,1
    4324:	38003a26 	beq	r7,zero,4410 <_free_r+0x178>
    4328:	10c00054 	ori	r3,r2,1
    432c:	30c00115 	stw	r3,4(r6)
    4330:	3087883a 	add	r3,r6,r2
    4334:	18800015 	stw	r2,0(r3)
    4338:	00c07fc4 	movi	r3,511
    433c:	18801936 	bltu	r3,r2,43a4 <_free_r+0x10c>
    4340:	1004d0fa 	srli	r2,r2,3
    4344:	01c00044 	movi	r7,1
    4348:	21400117 	ldw	r5,4(r4)
    434c:	10c00044 	addi	r3,r2,1
    4350:	18c7883a 	add	r3,r3,r3
    4354:	1005d0ba 	srai	r2,r2,2
    4358:	18c7883a 	add	r3,r3,r3
    435c:	18c7883a 	add	r3,r3,r3
    4360:	1907883a 	add	r3,r3,r4
    4364:	3884983a 	sll	r2,r7,r2
    4368:	19c00017 	ldw	r7,0(r3)
    436c:	1a3ffe04 	addi	r8,r3,-8
    4370:	1144b03a 	or	r2,r2,r5
    4374:	32000315 	stw	r8,12(r6)
    4378:	31c00215 	stw	r7,8(r6)
    437c:	20800115 	stw	r2,4(r4)
    4380:	19800015 	stw	r6,0(r3)
    4384:	39800315 	stw	r6,12(r7)
    4388:	8809883a 	mov	r4,r17
    438c:	dfc00217 	ldw	ra,8(sp)
    4390:	dc400117 	ldw	r17,4(sp)
    4394:	dc000017 	ldw	r16,0(sp)
    4398:	dec00304 	addi	sp,sp,12
    439c:	000f06c1 	jmpi	f06c <__malloc_unlock>
    43a0:	f800283a 	ret
    43a4:	100ad27a 	srli	r5,r2,9
    43a8:	00c00104 	movi	r3,4
    43ac:	19404a36 	bltu	r3,r5,44d8 <_free_r+0x240>
    43b0:	100ad1ba 	srli	r5,r2,6
    43b4:	28c00e44 	addi	r3,r5,57
    43b8:	18c7883a 	add	r3,r3,r3
    43bc:	29400e04 	addi	r5,r5,56
    43c0:	18c7883a 	add	r3,r3,r3
    43c4:	18c7883a 	add	r3,r3,r3
    43c8:	1909883a 	add	r4,r3,r4
    43cc:	20c00017 	ldw	r3,0(r4)
    43d0:	01c00074 	movhi	r7,1
    43d4:	213ffe04 	addi	r4,r4,-8
    43d8:	39c61404 	addi	r7,r7,6224
    43dc:	20c04426 	beq	r4,r3,44f0 <_free_r+0x258>
    43e0:	01ffff04 	movi	r7,-4
    43e4:	19400117 	ldw	r5,4(r3)
    43e8:	29ca703a 	and	r5,r5,r7
    43ec:	1140022e 	bgeu	r2,r5,43f8 <_free_r+0x160>
    43f0:	18c00217 	ldw	r3,8(r3)
    43f4:	20fffb1e 	bne	r4,r3,43e4 <__alt_data_end+0xfffe43e4>
    43f8:	19000317 	ldw	r4,12(r3)
    43fc:	31000315 	stw	r4,12(r6)
    4400:	30c00215 	stw	r3,8(r6)
    4404:	21800215 	stw	r6,8(r4)
    4408:	19800315 	stw	r6,12(r3)
    440c:	003fde06 	br	4388 <__alt_data_end+0xfffe4388>
    4410:	29c00217 	ldw	r7,8(r5)
    4414:	10c5883a 	add	r2,r2,r3
    4418:	00c00074 	movhi	r3,1
    441c:	18c61604 	addi	r3,r3,6232
    4420:	38c03b26 	beq	r7,r3,4510 <_free_r+0x278>
    4424:	2a000317 	ldw	r8,12(r5)
    4428:	11400054 	ori	r5,r2,1
    442c:	3087883a 	add	r3,r6,r2
    4430:	3a000315 	stw	r8,12(r7)
    4434:	41c00215 	stw	r7,8(r8)
    4438:	31400115 	stw	r5,4(r6)
    443c:	18800015 	stw	r2,0(r3)
    4440:	003fbd06 	br	4338 <__alt_data_end+0xfffe4338>
    4444:	39c0004c 	andi	r7,r7,1
    4448:	10c5883a 	add	r2,r2,r3
    444c:	3800071e 	bne	r7,zero,446c <_free_r+0x1d4>
    4450:	81fffe17 	ldw	r7,-8(r16)
    4454:	31cdc83a 	sub	r6,r6,r7
    4458:	30c00317 	ldw	r3,12(r6)
    445c:	31400217 	ldw	r5,8(r6)
    4460:	11c5883a 	add	r2,r2,r7
    4464:	28c00315 	stw	r3,12(r5)
    4468:	19400215 	stw	r5,8(r3)
    446c:	10c00054 	ori	r3,r2,1
    4470:	30c00115 	stw	r3,4(r6)
    4474:	00c00074 	movhi	r3,1
    4478:	18cbb904 	addi	r3,r3,12004
    447c:	18c00017 	ldw	r3,0(r3)
    4480:	21800215 	stw	r6,8(r4)
    4484:	10ffc036 	bltu	r2,r3,4388 <__alt_data_end+0xfffe4388>
    4488:	00800074 	movhi	r2,1
    448c:	10928404 	addi	r2,r2,18960
    4490:	11400017 	ldw	r5,0(r2)
    4494:	8809883a 	mov	r4,r17
    4498:	00041740 	call	4174 <_malloc_trim_r>
    449c:	003fba06 	br	4388 <__alt_data_end+0xfffe4388>
    44a0:	28c9883a 	add	r4,r5,r3
    44a4:	21000117 	ldw	r4,4(r4)
    44a8:	2100004c 	andi	r4,r4,1
    44ac:	2000391e 	bne	r4,zero,4594 <_free_r+0x2fc>
    44b0:	29c00217 	ldw	r7,8(r5)
    44b4:	29000317 	ldw	r4,12(r5)
    44b8:	1885883a 	add	r2,r3,r2
    44bc:	10c00054 	ori	r3,r2,1
    44c0:	39000315 	stw	r4,12(r7)
    44c4:	21c00215 	stw	r7,8(r4)
    44c8:	30c00115 	stw	r3,4(r6)
    44cc:	308d883a 	add	r6,r6,r2
    44d0:	30800015 	stw	r2,0(r6)
    44d4:	003fac06 	br	4388 <__alt_data_end+0xfffe4388>
    44d8:	00c00504 	movi	r3,20
    44dc:	19401536 	bltu	r3,r5,4534 <_free_r+0x29c>
    44e0:	28c01704 	addi	r3,r5,92
    44e4:	18c7883a 	add	r3,r3,r3
    44e8:	294016c4 	addi	r5,r5,91
    44ec:	003fb406 	br	43c0 <__alt_data_end+0xfffe43c0>
    44f0:	280bd0ba 	srai	r5,r5,2
    44f4:	00c00044 	movi	r3,1
    44f8:	38800117 	ldw	r2,4(r7)
    44fc:	194a983a 	sll	r5,r3,r5
    4500:	2007883a 	mov	r3,r4
    4504:	2884b03a 	or	r2,r5,r2
    4508:	38800115 	stw	r2,4(r7)
    450c:	003fbb06 	br	43fc <__alt_data_end+0xfffe43fc>
    4510:	21800515 	stw	r6,20(r4)
    4514:	21800415 	stw	r6,16(r4)
    4518:	10c00054 	ori	r3,r2,1
    451c:	31c00315 	stw	r7,12(r6)
    4520:	31c00215 	stw	r7,8(r6)
    4524:	30c00115 	stw	r3,4(r6)
    4528:	308d883a 	add	r6,r6,r2
    452c:	30800015 	stw	r2,0(r6)
    4530:	003f9506 	br	4388 <__alt_data_end+0xfffe4388>
    4534:	00c01504 	movi	r3,84
    4538:	19400536 	bltu	r3,r5,4550 <_free_r+0x2b8>
    453c:	100ad33a 	srli	r5,r2,12
    4540:	28c01bc4 	addi	r3,r5,111
    4544:	18c7883a 	add	r3,r3,r3
    4548:	29401b84 	addi	r5,r5,110
    454c:	003f9c06 	br	43c0 <__alt_data_end+0xfffe43c0>
    4550:	00c05504 	movi	r3,340
    4554:	19400536 	bltu	r3,r5,456c <_free_r+0x2d4>
    4558:	100ad3fa 	srli	r5,r2,15
    455c:	28c01e04 	addi	r3,r5,120
    4560:	18c7883a 	add	r3,r3,r3
    4564:	29401dc4 	addi	r5,r5,119
    4568:	003f9506 	br	43c0 <__alt_data_end+0xfffe43c0>
    456c:	00c15504 	movi	r3,1364
    4570:	19400536 	bltu	r3,r5,4588 <_free_r+0x2f0>
    4574:	100ad4ba 	srli	r5,r2,18
    4578:	28c01f44 	addi	r3,r5,125
    457c:	18c7883a 	add	r3,r3,r3
    4580:	29401f04 	addi	r5,r5,124
    4584:	003f8e06 	br	43c0 <__alt_data_end+0xfffe43c0>
    4588:	00c03f84 	movi	r3,254
    458c:	01401f84 	movi	r5,126
    4590:	003f8b06 	br	43c0 <__alt_data_end+0xfffe43c0>
    4594:	10c00054 	ori	r3,r2,1
    4598:	30c00115 	stw	r3,4(r6)
    459c:	308d883a 	add	r6,r6,r2
    45a0:	30800015 	stw	r2,0(r6)
    45a4:	003f7806 	br	4388 <__alt_data_end+0xfffe4388>

000045a8 <_fseek_r>:
    45a8:	00045c81 	jmpi	45c8 <_fseeko_r>

000045ac <fseek>:
    45ac:	00800074 	movhi	r2,1
    45b0:	108bb704 	addi	r2,r2,11996
    45b4:	300f883a 	mov	r7,r6
    45b8:	280d883a 	mov	r6,r5
    45bc:	200b883a 	mov	r5,r4
    45c0:	11000017 	ldw	r4,0(r2)
    45c4:	00045c81 	jmpi	45c8 <_fseeko_r>

000045c8 <_fseeko_r>:
    45c8:	deffe804 	addi	sp,sp,-96
    45cc:	dd401415 	stw	r21,80(sp)
    45d0:	dc801115 	stw	r18,68(sp)
    45d4:	dc401015 	stw	r17,64(sp)
    45d8:	dc000f15 	stw	r16,60(sp)
    45dc:	dfc01715 	stw	ra,92(sp)
    45e0:	ddc01615 	stw	r23,88(sp)
    45e4:	dd801515 	stw	r22,84(sp)
    45e8:	dd001315 	stw	r20,76(sp)
    45ec:	dcc01215 	stw	r19,72(sp)
    45f0:	2023883a 	mov	r17,r4
    45f4:	2821883a 	mov	r16,r5
    45f8:	302b883a 	mov	r21,r6
    45fc:	3825883a 	mov	r18,r7
    4600:	20000226 	beq	r4,zero,460c <_fseeko_r+0x44>
    4604:	20800e17 	ldw	r2,56(r4)
    4608:	10005a26 	beq	r2,zero,4774 <_fseeko_r+0x1ac>
    460c:	8080030b 	ldhu	r2,12(r16)
    4610:	00c04204 	movi	r3,264
    4614:	1080420c 	andi	r2,r2,264
    4618:	10c05b26 	beq	r2,r3,4788 <_fseeko_r+0x1c0>
    461c:	85000a17 	ldw	r20,40(r16)
    4620:	a000f626 	beq	r20,zero,49fc <_fseeko_r+0x434>
    4624:	00800044 	movi	r2,1
    4628:	90803e26 	beq	r18,r2,4724 <_fseeko_r+0x15c>
    462c:	00800084 	movi	r2,2
    4630:	90801026 	beq	r18,r2,4674 <_fseeko_r+0xac>
    4634:	90000f26 	beq	r18,zero,4674 <_fseeko_r+0xac>
    4638:	00800584 	movi	r2,22
    463c:	88800015 	stw	r2,0(r17)
    4640:	04ffffc4 	movi	r19,-1
    4644:	9805883a 	mov	r2,r19
    4648:	dfc01717 	ldw	ra,92(sp)
    464c:	ddc01617 	ldw	r23,88(sp)
    4650:	dd801517 	ldw	r22,84(sp)
    4654:	dd401417 	ldw	r21,80(sp)
    4658:	dd001317 	ldw	r20,76(sp)
    465c:	dcc01217 	ldw	r19,72(sp)
    4660:	dc801117 	ldw	r18,68(sp)
    4664:	dc401017 	ldw	r17,64(sp)
    4668:	dc000f17 	ldw	r16,60(sp)
    466c:	dec01804 	addi	sp,sp,96
    4670:	f800283a 	ret
    4674:	80800417 	ldw	r2,16(r16)
    4678:	002f883a 	mov	r23,zero
    467c:	0027883a 	mov	r19,zero
    4680:	1000cb26 	beq	r2,zero,49b0 <_fseeko_r+0x3e8>
    4684:	8080030b 	ldhu	r2,12(r16)
    4688:	10c2068c 	andi	r3,r2,2074
    468c:	1800071e 	bne	r3,zero,46ac <_fseeko_r+0xe4>
    4690:	10c1000c 	andi	r3,r2,1024
    4694:	1800451e 	bne	r3,zero,47ac <_fseeko_r+0x1e4>
    4698:	00c00034 	movhi	r3,0
    469c:	18d74004 	addi	r3,r3,23808
    46a0:	a0c0b726 	beq	r20,r3,4980 <_fseeko_r+0x3b8>
    46a4:	10820014 	ori	r2,r2,2048
    46a8:	8080030d 	sth	r2,12(r16)
    46ac:	800b883a 	mov	r5,r16
    46b0:	8809883a 	mov	r4,r17
    46b4:	00039bc0 	call	39bc <_fflush_r>
    46b8:	1027883a 	mov	r19,r2
    46bc:	103fe01e 	bne	r2,zero,4640 <__alt_data_end+0xfffe4640>
    46c0:	81400717 	ldw	r5,28(r16)
    46c4:	900f883a 	mov	r7,r18
    46c8:	a80d883a 	mov	r6,r21
    46cc:	8809883a 	mov	r4,r17
    46d0:	a03ee83a 	callr	r20
    46d4:	00ffffc4 	movi	r3,-1
    46d8:	10ffd926 	beq	r2,r3,4640 <__alt_data_end+0xfffe4640>
    46dc:	81400c17 	ldw	r5,48(r16)
    46e0:	28000526 	beq	r5,zero,46f8 <_fseeko_r+0x130>
    46e4:	80801004 	addi	r2,r16,64
    46e8:	28800226 	beq	r5,r2,46f4 <_fseeko_r+0x12c>
    46ec:	8809883a 	mov	r4,r17
    46f0:	00042980 	call	4298 <_free_r>
    46f4:	80000c15 	stw	zero,48(r16)
    46f8:	8080030b 	ldhu	r2,12(r16)
    46fc:	80c00417 	ldw	r3,16(r16)
    4700:	80000115 	stw	zero,4(r16)
    4704:	10bdf7cc 	andi	r2,r2,63455
    4708:	80c00015 	stw	r3,0(r16)
    470c:	8080030d 	sth	r2,12(r16)
    4710:	01800204 	movi	r6,8
    4714:	000b883a 	mov	r5,zero
    4718:	81001704 	addi	r4,r16,92
    471c:	000571c0 	call	571c <memset>
    4720:	003fc806 	br	4644 <__alt_data_end+0xfffe4644>
    4724:	800b883a 	mov	r5,r16
    4728:	8809883a 	mov	r4,r17
    472c:	00039bc0 	call	39bc <_fflush_r>
    4730:	8080030b 	ldhu	r2,12(r16)
    4734:	10c4000c 	andi	r3,r2,4096
    4738:	18008726 	beq	r3,zero,4958 <_fseeko_r+0x390>
    473c:	84c01417 	ldw	r19,80(r16)
    4740:	10c0010c 	andi	r3,r2,4
    4744:	1800431e 	bne	r3,zero,4854 <_fseeko_r+0x28c>
    4748:	1080020c 	andi	r2,r2,8
    474c:	10008026 	beq	r2,zero,4950 <_fseeko_r+0x388>
    4750:	80c00017 	ldw	r3,0(r16)
    4754:	80800417 	ldw	r2,16(r16)
    4758:	18000226 	beq	r3,zero,4764 <_fseeko_r+0x19c>
    475c:	1887c83a 	sub	r3,r3,r2
    4760:	98e7883a 	add	r19,r19,r3
    4764:	aceb883a 	add	r21,r21,r19
    4768:	05c00044 	movi	r23,1
    476c:	0025883a 	mov	r18,zero
    4770:	003fc306 	br	4680 <__alt_data_end+0xfffe4680>
    4774:	0003da80 	call	3da8 <__sinit>
    4778:	8080030b 	ldhu	r2,12(r16)
    477c:	00c04204 	movi	r3,264
    4780:	1080420c 	andi	r2,r2,264
    4784:	10ffa51e 	bne	r2,r3,461c <__alt_data_end+0xfffe461c>
    4788:	800b883a 	mov	r5,r16
    478c:	8809883a 	mov	r4,r17
    4790:	00039bc0 	call	39bc <_fflush_r>
    4794:	003fa106 	br	461c <__alt_data_end+0xfffe461c>
    4798:	8080030b 	ldhu	r2,12(r16)
    479c:	00c10004 	movi	r3,1024
    47a0:	80c01315 	stw	r3,76(r16)
    47a4:	10c4b03a 	or	r2,r2,r3
    47a8:	8080030d 	sth	r2,12(r16)
    47ac:	9000311e 	bne	r18,zero,4874 <_fseeko_r+0x2ac>
    47b0:	a82d883a 	mov	r22,r21
    47b4:	b800371e 	bne	r23,zero,4894 <_fseeko_r+0x2cc>
    47b8:	8080030b 	ldhu	r2,12(r16)
    47bc:	1084000c 	andi	r2,r2,4096
    47c0:	10007f26 	beq	r2,zero,49c0 <_fseeko_r+0x3f8>
    47c4:	80801417 	ldw	r2,80(r16)
    47c8:	81800117 	ldw	r6,4(r16)
    47cc:	81400c17 	ldw	r5,48(r16)
    47d0:	11a7c83a 	sub	r19,r2,r6
    47d4:	28008226 	beq	r5,zero,49e0 <_fseeko_r+0x418>
    47d8:	81c00f17 	ldw	r7,60(r16)
    47dc:	99e7c83a 	sub	r19,r19,r7
    47e0:	81000e17 	ldw	r4,56(r16)
    47e4:	80800417 	ldw	r2,16(r16)
    47e8:	99a7883a 	add	r19,r19,r6
    47ec:	2087c83a 	sub	r3,r4,r2
    47f0:	98e7c83a 	sub	r19,r19,r3
    47f4:	38c7883a 	add	r3,r7,r3
    47f8:	b4c02b16 	blt	r22,r19,48a8 <_fseeko_r+0x2e0>
    47fc:	98c9883a 	add	r4,r19,r3
    4800:	b100292e 	bgeu	r22,r4,48a8 <_fseeko_r+0x2e0>
    4804:	b4e7c83a 	sub	r19,r22,r19
    4808:	14c5883a 	add	r2,r2,r19
    480c:	1ce7c83a 	sub	r19,r3,r19
    4810:	80800015 	stw	r2,0(r16)
    4814:	84c00115 	stw	r19,4(r16)
    4818:	28000526 	beq	r5,zero,4830 <_fseeko_r+0x268>
    481c:	80801004 	addi	r2,r16,64
    4820:	28800226 	beq	r5,r2,482c <_fseeko_r+0x264>
    4824:	8809883a 	mov	r4,r17
    4828:	00042980 	call	4298 <_free_r>
    482c:	80000c15 	stw	zero,48(r16)
    4830:	8080030b 	ldhu	r2,12(r16)
    4834:	01800204 	movi	r6,8
    4838:	000b883a 	mov	r5,zero
    483c:	10bff7cc 	andi	r2,r2,65503
    4840:	8080030d 	sth	r2,12(r16)
    4844:	81001704 	addi	r4,r16,92
    4848:	000571c0 	call	571c <memset>
    484c:	0027883a 	mov	r19,zero
    4850:	003f7c06 	br	4644 <__alt_data_end+0xfffe4644>
    4854:	80c00117 	ldw	r3,4(r16)
    4858:	80800c17 	ldw	r2,48(r16)
    485c:	98e7c83a 	sub	r19,r19,r3
    4860:	10003b26 	beq	r2,zero,4950 <_fseeko_r+0x388>
    4864:	80c00f17 	ldw	r3,60(r16)
    4868:	80800417 	ldw	r2,16(r16)
    486c:	98e7c83a 	sub	r19,r19,r3
    4870:	003fbc06 	br	4764 <__alt_data_end+0xfffe4764>
    4874:	8140038f 	ldh	r5,14(r16)
    4878:	d80d883a 	mov	r6,sp
    487c:	8809883a 	mov	r4,r17
    4880:	0004a280 	call	4a28 <_fstat_r>
    4884:	103f891e 	bne	r2,zero,46ac <__alt_data_end+0xfffe46ac>
    4888:	dd800417 	ldw	r22,16(sp)
    488c:	adad883a 	add	r22,r21,r22
    4890:	b83fc926 	beq	r23,zero,47b8 <__alt_data_end+0xfffe47b8>
    4894:	81400c17 	ldw	r5,48(r16)
    4898:	81800117 	ldw	r6,4(r16)
    489c:	28005026 	beq	r5,zero,49e0 <_fseeko_r+0x418>
    48a0:	81c00f17 	ldw	r7,60(r16)
    48a4:	003fce06 	br	47e0 <__alt_data_end+0xfffe47e0>
    48a8:	84c01317 	ldw	r19,76(r16)
    48ac:	81400717 	ldw	r5,28(r16)
    48b0:	000f883a 	mov	r7,zero
    48b4:	04e7c83a 	sub	r19,zero,r19
    48b8:	9da6703a 	and	r19,r19,r22
    48bc:	980d883a 	mov	r6,r19
    48c0:	8809883a 	mov	r4,r17
    48c4:	a03ee83a 	callr	r20
    48c8:	00ffffc4 	movi	r3,-1
    48cc:	10ff7726 	beq	r2,r3,46ac <__alt_data_end+0xfffe46ac>
    48d0:	80800417 	ldw	r2,16(r16)
    48d4:	81400c17 	ldw	r5,48(r16)
    48d8:	80000115 	stw	zero,4(r16)
    48dc:	80800015 	stw	r2,0(r16)
    48e0:	28000526 	beq	r5,zero,48f8 <_fseeko_r+0x330>
    48e4:	80801004 	addi	r2,r16,64
    48e8:	28800226 	beq	r5,r2,48f4 <_fseeko_r+0x32c>
    48ec:	8809883a 	mov	r4,r17
    48f0:	00042980 	call	4298 <_free_r>
    48f4:	80000c15 	stw	zero,48(r16)
    48f8:	8080030b 	ldhu	r2,12(r16)
    48fc:	b4e7c83a 	sub	r19,r22,r19
    4900:	10bff7cc 	andi	r2,r2,65503
    4904:	8080030d 	sth	r2,12(r16)
    4908:	98000b26 	beq	r19,zero,4938 <_fseeko_r+0x370>
    490c:	800b883a 	mov	r5,r16
    4910:	8809883a 	mov	r4,r17
    4914:	0005a000 	call	5a00 <__srefill_r>
    4918:	103f641e 	bne	r2,zero,46ac <__alt_data_end+0xfffe46ac>
    491c:	80800117 	ldw	r2,4(r16)
    4920:	14ff6236 	bltu	r2,r19,46ac <__alt_data_end+0xfffe46ac>
    4924:	80c00017 	ldw	r3,0(r16)
    4928:	14c5c83a 	sub	r2,r2,r19
    492c:	80800115 	stw	r2,4(r16)
    4930:	1ce7883a 	add	r19,r3,r19
    4934:	84c00015 	stw	r19,0(r16)
    4938:	01800204 	movi	r6,8
    493c:	000b883a 	mov	r5,zero
    4940:	81001704 	addi	r4,r16,92
    4944:	000571c0 	call	571c <memset>
    4948:	0027883a 	mov	r19,zero
    494c:	003f3d06 	br	4644 <__alt_data_end+0xfffe4644>
    4950:	80800417 	ldw	r2,16(r16)
    4954:	003f8306 	br	4764 <__alt_data_end+0xfffe4764>
    4958:	81400717 	ldw	r5,28(r16)
    495c:	900f883a 	mov	r7,r18
    4960:	000d883a 	mov	r6,zero
    4964:	8809883a 	mov	r4,r17
    4968:	a03ee83a 	callr	r20
    496c:	1027883a 	mov	r19,r2
    4970:	00bfffc4 	movi	r2,-1
    4974:	98bf3226 	beq	r19,r2,4640 <__alt_data_end+0xfffe4640>
    4978:	8080030b 	ldhu	r2,12(r16)
    497c:	003f7006 	br	4740 <__alt_data_end+0xfffe4740>
    4980:	8140038f 	ldh	r5,14(r16)
    4984:	283f4716 	blt	r5,zero,46a4 <__alt_data_end+0xfffe46a4>
    4988:	d80d883a 	mov	r6,sp
    498c:	8809883a 	mov	r4,r17
    4990:	0004a280 	call	4a28 <_fstat_r>
    4994:	1000041e 	bne	r2,zero,49a8 <_fseeko_r+0x3e0>
    4998:	d8800117 	ldw	r2,4(sp)
    499c:	00e00014 	movui	r3,32768
    49a0:	10bc000c 	andi	r2,r2,61440
    49a4:	10ff7c26 	beq	r2,r3,4798 <__alt_data_end+0xfffe4798>
    49a8:	8080030b 	ldhu	r2,12(r16)
    49ac:	003f3d06 	br	46a4 <__alt_data_end+0xfffe46a4>
    49b0:	800b883a 	mov	r5,r16
    49b4:	8809883a 	mov	r4,r17
    49b8:	0004c0c0 	call	4c0c <__smakebuf_r>
    49bc:	003f3106 	br	4684 <__alt_data_end+0xfffe4684>
    49c0:	81400717 	ldw	r5,28(r16)
    49c4:	01c00044 	movi	r7,1
    49c8:	000d883a 	mov	r6,zero
    49cc:	8809883a 	mov	r4,r17
    49d0:	a03ee83a 	callr	r20
    49d4:	00ffffc4 	movi	r3,-1
    49d8:	10ff7b1e 	bne	r2,r3,47c8 <__alt_data_end+0xfffe47c8>
    49dc:	003f3306 	br	46ac <__alt_data_end+0xfffe46ac>
    49e0:	80c00017 	ldw	r3,0(r16)
    49e4:	80800417 	ldw	r2,16(r16)
    49e8:	000b883a 	mov	r5,zero
    49ec:	1887c83a 	sub	r3,r3,r2
    49f0:	98e7c83a 	sub	r19,r19,r3
    49f4:	30c7883a 	add	r3,r6,r3
    49f8:	003f7f06 	br	47f8 <__alt_data_end+0xfffe47f8>
    49fc:	00800744 	movi	r2,29
    4a00:	88800015 	stw	r2,0(r17)
    4a04:	04ffffc4 	movi	r19,-1
    4a08:	003f0e06 	br	4644 <__alt_data_end+0xfffe4644>

00004a0c <fseeko>:
    4a0c:	00800074 	movhi	r2,1
    4a10:	108bb704 	addi	r2,r2,11996
    4a14:	300f883a 	mov	r7,r6
    4a18:	280d883a 	mov	r6,r5
    4a1c:	200b883a 	mov	r5,r4
    4a20:	11000017 	ldw	r4,0(r2)
    4a24:	00045c81 	jmpi	45c8 <_fseeko_r>

00004a28 <_fstat_r>:
    4a28:	defffd04 	addi	sp,sp,-12
    4a2c:	2805883a 	mov	r2,r5
    4a30:	dc000015 	stw	r16,0(sp)
    4a34:	04000074 	movhi	r16,1
    4a38:	dc400115 	stw	r17,4(sp)
    4a3c:	84128104 	addi	r16,r16,18948
    4a40:	2023883a 	mov	r17,r4
    4a44:	300b883a 	mov	r5,r6
    4a48:	1009883a 	mov	r4,r2
    4a4c:	dfc00215 	stw	ra,8(sp)
    4a50:	80000015 	stw	zero,0(r16)
    4a54:	000ec280 	call	ec28 <fstat>
    4a58:	00ffffc4 	movi	r3,-1
    4a5c:	10c00526 	beq	r2,r3,4a74 <_fstat_r+0x4c>
    4a60:	dfc00217 	ldw	ra,8(sp)
    4a64:	dc400117 	ldw	r17,4(sp)
    4a68:	dc000017 	ldw	r16,0(sp)
    4a6c:	dec00304 	addi	sp,sp,12
    4a70:	f800283a 	ret
    4a74:	80c00017 	ldw	r3,0(r16)
    4a78:	183ff926 	beq	r3,zero,4a60 <__alt_data_end+0xfffe4a60>
    4a7c:	88c00015 	stw	r3,0(r17)
    4a80:	003ff706 	br	4a60 <__alt_data_end+0xfffe4a60>

00004a84 <_fwalk>:
    4a84:	defff704 	addi	sp,sp,-36
    4a88:	dd000415 	stw	r20,16(sp)
    4a8c:	dfc00815 	stw	ra,32(sp)
    4a90:	ddc00715 	stw	r23,28(sp)
    4a94:	dd800615 	stw	r22,24(sp)
    4a98:	dd400515 	stw	r21,20(sp)
    4a9c:	dcc00315 	stw	r19,12(sp)
    4aa0:	dc800215 	stw	r18,8(sp)
    4aa4:	dc400115 	stw	r17,4(sp)
    4aa8:	dc000015 	stw	r16,0(sp)
    4aac:	2500b804 	addi	r20,r4,736
    4ab0:	a0002326 	beq	r20,zero,4b40 <_fwalk+0xbc>
    4ab4:	282b883a 	mov	r21,r5
    4ab8:	002f883a 	mov	r23,zero
    4abc:	05800044 	movi	r22,1
    4ac0:	04ffffc4 	movi	r19,-1
    4ac4:	a4400117 	ldw	r17,4(r20)
    4ac8:	a4800217 	ldw	r18,8(r20)
    4acc:	8c7fffc4 	addi	r17,r17,-1
    4ad0:	88000d16 	blt	r17,zero,4b08 <_fwalk+0x84>
    4ad4:	94000304 	addi	r16,r18,12
    4ad8:	94800384 	addi	r18,r18,14
    4adc:	8080000b 	ldhu	r2,0(r16)
    4ae0:	8c7fffc4 	addi	r17,r17,-1
    4ae4:	813ffd04 	addi	r4,r16,-12
    4ae8:	b080042e 	bgeu	r22,r2,4afc <_fwalk+0x78>
    4aec:	9080000f 	ldh	r2,0(r18)
    4af0:	14c00226 	beq	r2,r19,4afc <_fwalk+0x78>
    4af4:	a83ee83a 	callr	r21
    4af8:	b8aeb03a 	or	r23,r23,r2
    4afc:	84001a04 	addi	r16,r16,104
    4b00:	94801a04 	addi	r18,r18,104
    4b04:	8cfff51e 	bne	r17,r19,4adc <__alt_data_end+0xfffe4adc>
    4b08:	a5000017 	ldw	r20,0(r20)
    4b0c:	a03fed1e 	bne	r20,zero,4ac4 <__alt_data_end+0xfffe4ac4>
    4b10:	b805883a 	mov	r2,r23
    4b14:	dfc00817 	ldw	ra,32(sp)
    4b18:	ddc00717 	ldw	r23,28(sp)
    4b1c:	dd800617 	ldw	r22,24(sp)
    4b20:	dd400517 	ldw	r21,20(sp)
    4b24:	dd000417 	ldw	r20,16(sp)
    4b28:	dcc00317 	ldw	r19,12(sp)
    4b2c:	dc800217 	ldw	r18,8(sp)
    4b30:	dc400117 	ldw	r17,4(sp)
    4b34:	dc000017 	ldw	r16,0(sp)
    4b38:	dec00904 	addi	sp,sp,36
    4b3c:	f800283a 	ret
    4b40:	002f883a 	mov	r23,zero
    4b44:	003ff206 	br	4b10 <__alt_data_end+0xfffe4b10>

00004b48 <_fwalk_reent>:
    4b48:	defff704 	addi	sp,sp,-36
    4b4c:	dd000415 	stw	r20,16(sp)
    4b50:	dfc00815 	stw	ra,32(sp)
    4b54:	ddc00715 	stw	r23,28(sp)
    4b58:	dd800615 	stw	r22,24(sp)
    4b5c:	dd400515 	stw	r21,20(sp)
    4b60:	dcc00315 	stw	r19,12(sp)
    4b64:	dc800215 	stw	r18,8(sp)
    4b68:	dc400115 	stw	r17,4(sp)
    4b6c:	dc000015 	stw	r16,0(sp)
    4b70:	2500b804 	addi	r20,r4,736
    4b74:	a0002326 	beq	r20,zero,4c04 <_fwalk_reent+0xbc>
    4b78:	282b883a 	mov	r21,r5
    4b7c:	2027883a 	mov	r19,r4
    4b80:	002f883a 	mov	r23,zero
    4b84:	05800044 	movi	r22,1
    4b88:	04bfffc4 	movi	r18,-1
    4b8c:	a4400117 	ldw	r17,4(r20)
    4b90:	a4000217 	ldw	r16,8(r20)
    4b94:	8c7fffc4 	addi	r17,r17,-1
    4b98:	88000c16 	blt	r17,zero,4bcc <_fwalk_reent+0x84>
    4b9c:	84000304 	addi	r16,r16,12
    4ba0:	8080000b 	ldhu	r2,0(r16)
    4ba4:	8c7fffc4 	addi	r17,r17,-1
    4ba8:	817ffd04 	addi	r5,r16,-12
    4bac:	b080052e 	bgeu	r22,r2,4bc4 <_fwalk_reent+0x7c>
    4bb0:	8080008f 	ldh	r2,2(r16)
    4bb4:	9809883a 	mov	r4,r19
    4bb8:	14800226 	beq	r2,r18,4bc4 <_fwalk_reent+0x7c>
    4bbc:	a83ee83a 	callr	r21
    4bc0:	b8aeb03a 	or	r23,r23,r2
    4bc4:	84001a04 	addi	r16,r16,104
    4bc8:	8cbff51e 	bne	r17,r18,4ba0 <__alt_data_end+0xfffe4ba0>
    4bcc:	a5000017 	ldw	r20,0(r20)
    4bd0:	a03fee1e 	bne	r20,zero,4b8c <__alt_data_end+0xfffe4b8c>
    4bd4:	b805883a 	mov	r2,r23
    4bd8:	dfc00817 	ldw	ra,32(sp)
    4bdc:	ddc00717 	ldw	r23,28(sp)
    4be0:	dd800617 	ldw	r22,24(sp)
    4be4:	dd400517 	ldw	r21,20(sp)
    4be8:	dd000417 	ldw	r20,16(sp)
    4bec:	dcc00317 	ldw	r19,12(sp)
    4bf0:	dc800217 	ldw	r18,8(sp)
    4bf4:	dc400117 	ldw	r17,4(sp)
    4bf8:	dc000017 	ldw	r16,0(sp)
    4bfc:	dec00904 	addi	sp,sp,36
    4c00:	f800283a 	ret
    4c04:	002f883a 	mov	r23,zero
    4c08:	003ff206 	br	4bd4 <__alt_data_end+0xfffe4bd4>

00004c0c <__smakebuf_r>:
    4c0c:	2880030b 	ldhu	r2,12(r5)
    4c10:	10c0008c 	andi	r3,r2,2
    4c14:	1800411e 	bne	r3,zero,4d1c <__smakebuf_r+0x110>
    4c18:	deffec04 	addi	sp,sp,-80
    4c1c:	dc000f15 	stw	r16,60(sp)
    4c20:	2821883a 	mov	r16,r5
    4c24:	2940038f 	ldh	r5,14(r5)
    4c28:	dc401015 	stw	r17,64(sp)
    4c2c:	dfc01315 	stw	ra,76(sp)
    4c30:	dcc01215 	stw	r19,72(sp)
    4c34:	dc801115 	stw	r18,68(sp)
    4c38:	2023883a 	mov	r17,r4
    4c3c:	28001c16 	blt	r5,zero,4cb0 <__smakebuf_r+0xa4>
    4c40:	d80d883a 	mov	r6,sp
    4c44:	0004a280 	call	4a28 <_fstat_r>
    4c48:	10001816 	blt	r2,zero,4cac <__smakebuf_r+0xa0>
    4c4c:	d8800117 	ldw	r2,4(sp)
    4c50:	00e00014 	movui	r3,32768
    4c54:	10bc000c 	andi	r2,r2,61440
    4c58:	14c80020 	cmpeqi	r19,r2,8192
    4c5c:	10c03726 	beq	r2,r3,4d3c <__smakebuf_r+0x130>
    4c60:	80c0030b 	ldhu	r3,12(r16)
    4c64:	18c20014 	ori	r3,r3,2048
    4c68:	80c0030d 	sth	r3,12(r16)
    4c6c:	00c80004 	movi	r3,8192
    4c70:	10c0521e 	bne	r2,r3,4dbc <__smakebuf_r+0x1b0>
    4c74:	8140038f 	ldh	r5,14(r16)
    4c78:	8809883a 	mov	r4,r17
    4c7c:	000a35c0 	call	a35c <_isatty_r>
    4c80:	10004c26 	beq	r2,zero,4db4 <__smakebuf_r+0x1a8>
    4c84:	8080030b 	ldhu	r2,12(r16)
    4c88:	80c010c4 	addi	r3,r16,67
    4c8c:	80c00015 	stw	r3,0(r16)
    4c90:	10800054 	ori	r2,r2,1
    4c94:	8080030d 	sth	r2,12(r16)
    4c98:	00800044 	movi	r2,1
    4c9c:	80c00415 	stw	r3,16(r16)
    4ca0:	80800515 	stw	r2,20(r16)
    4ca4:	04810004 	movi	r18,1024
    4ca8:	00000706 	br	4cc8 <__smakebuf_r+0xbc>
    4cac:	8080030b 	ldhu	r2,12(r16)
    4cb0:	10c0200c 	andi	r3,r2,128
    4cb4:	18001f1e 	bne	r3,zero,4d34 <__smakebuf_r+0x128>
    4cb8:	04810004 	movi	r18,1024
    4cbc:	10820014 	ori	r2,r2,2048
    4cc0:	8080030d 	sth	r2,12(r16)
    4cc4:	0027883a 	mov	r19,zero
    4cc8:	900b883a 	mov	r5,r18
    4ccc:	8809883a 	mov	r4,r17
    4cd0:	0004dc80 	call	4dc8 <_malloc_r>
    4cd4:	10002c26 	beq	r2,zero,4d88 <__smakebuf_r+0x17c>
    4cd8:	80c0030b 	ldhu	r3,12(r16)
    4cdc:	01000034 	movhi	r4,0
    4ce0:	210e9404 	addi	r4,r4,14928
    4ce4:	89000f15 	stw	r4,60(r17)
    4ce8:	18c02014 	ori	r3,r3,128
    4cec:	80c0030d 	sth	r3,12(r16)
    4cf0:	80800015 	stw	r2,0(r16)
    4cf4:	80800415 	stw	r2,16(r16)
    4cf8:	84800515 	stw	r18,20(r16)
    4cfc:	98001a1e 	bne	r19,zero,4d68 <__smakebuf_r+0x15c>
    4d00:	dfc01317 	ldw	ra,76(sp)
    4d04:	dcc01217 	ldw	r19,72(sp)
    4d08:	dc801117 	ldw	r18,68(sp)
    4d0c:	dc401017 	ldw	r17,64(sp)
    4d10:	dc000f17 	ldw	r16,60(sp)
    4d14:	dec01404 	addi	sp,sp,80
    4d18:	f800283a 	ret
    4d1c:	288010c4 	addi	r2,r5,67
    4d20:	28800015 	stw	r2,0(r5)
    4d24:	28800415 	stw	r2,16(r5)
    4d28:	00800044 	movi	r2,1
    4d2c:	28800515 	stw	r2,20(r5)
    4d30:	f800283a 	ret
    4d34:	04801004 	movi	r18,64
    4d38:	003fe006 	br	4cbc <__alt_data_end+0xfffe4cbc>
    4d3c:	81000a17 	ldw	r4,40(r16)
    4d40:	00c00034 	movhi	r3,0
    4d44:	18d74004 	addi	r3,r3,23808
    4d48:	20ffc51e 	bne	r4,r3,4c60 <__alt_data_end+0xfffe4c60>
    4d4c:	8080030b 	ldhu	r2,12(r16)
    4d50:	04810004 	movi	r18,1024
    4d54:	84801315 	stw	r18,76(r16)
    4d58:	1484b03a 	or	r2,r2,r18
    4d5c:	8080030d 	sth	r2,12(r16)
    4d60:	0027883a 	mov	r19,zero
    4d64:	003fd806 	br	4cc8 <__alt_data_end+0xfffe4cc8>
    4d68:	8140038f 	ldh	r5,14(r16)
    4d6c:	8809883a 	mov	r4,r17
    4d70:	000a35c0 	call	a35c <_isatty_r>
    4d74:	103fe226 	beq	r2,zero,4d00 <__alt_data_end+0xfffe4d00>
    4d78:	8080030b 	ldhu	r2,12(r16)
    4d7c:	10800054 	ori	r2,r2,1
    4d80:	8080030d 	sth	r2,12(r16)
    4d84:	003fde06 	br	4d00 <__alt_data_end+0xfffe4d00>
    4d88:	8080030b 	ldhu	r2,12(r16)
    4d8c:	10c0800c 	andi	r3,r2,512
    4d90:	183fdb1e 	bne	r3,zero,4d00 <__alt_data_end+0xfffe4d00>
    4d94:	10800094 	ori	r2,r2,2
    4d98:	80c010c4 	addi	r3,r16,67
    4d9c:	8080030d 	sth	r2,12(r16)
    4da0:	00800044 	movi	r2,1
    4da4:	80c00015 	stw	r3,0(r16)
    4da8:	80c00415 	stw	r3,16(r16)
    4dac:	80800515 	stw	r2,20(r16)
    4db0:	003fd306 	br	4d00 <__alt_data_end+0xfffe4d00>
    4db4:	04810004 	movi	r18,1024
    4db8:	003fc306 	br	4cc8 <__alt_data_end+0xfffe4cc8>
    4dbc:	0027883a 	mov	r19,zero
    4dc0:	04810004 	movi	r18,1024
    4dc4:	003fc006 	br	4cc8 <__alt_data_end+0xfffe4cc8>

00004dc8 <_malloc_r>:
    4dc8:	defff504 	addi	sp,sp,-44
    4dcc:	dc800315 	stw	r18,12(sp)
    4dd0:	dfc00a15 	stw	ra,40(sp)
    4dd4:	df000915 	stw	fp,36(sp)
    4dd8:	ddc00815 	stw	r23,32(sp)
    4ddc:	dd800715 	stw	r22,28(sp)
    4de0:	dd400615 	stw	r21,24(sp)
    4de4:	dd000515 	stw	r20,20(sp)
    4de8:	dcc00415 	stw	r19,16(sp)
    4dec:	dc400215 	stw	r17,8(sp)
    4df0:	dc000115 	stw	r16,4(sp)
    4df4:	288002c4 	addi	r2,r5,11
    4df8:	00c00584 	movi	r3,22
    4dfc:	2025883a 	mov	r18,r4
    4e00:	18807f2e 	bgeu	r3,r2,5000 <_malloc_r+0x238>
    4e04:	047ffe04 	movi	r17,-8
    4e08:	1462703a 	and	r17,r2,r17
    4e0c:	8800a316 	blt	r17,zero,509c <_malloc_r+0x2d4>
    4e10:	8940a236 	bltu	r17,r5,509c <_malloc_r+0x2d4>
    4e14:	000f0480 	call	f048 <__malloc_lock>
    4e18:	00807dc4 	movi	r2,503
    4e1c:	1441e92e 	bgeu	r2,r17,55c4 <_malloc_r+0x7fc>
    4e20:	8804d27a 	srli	r2,r17,9
    4e24:	1000a126 	beq	r2,zero,50ac <_malloc_r+0x2e4>
    4e28:	00c00104 	movi	r3,4
    4e2c:	18811e36 	bltu	r3,r2,52a8 <_malloc_r+0x4e0>
    4e30:	8804d1ba 	srli	r2,r17,6
    4e34:	12000e44 	addi	r8,r2,57
    4e38:	11c00e04 	addi	r7,r2,56
    4e3c:	4209883a 	add	r4,r8,r8
    4e40:	04c00074 	movhi	r19,1
    4e44:	2109883a 	add	r4,r4,r4
    4e48:	9cc61404 	addi	r19,r19,6224
    4e4c:	2109883a 	add	r4,r4,r4
    4e50:	9909883a 	add	r4,r19,r4
    4e54:	24000117 	ldw	r16,4(r4)
    4e58:	213ffe04 	addi	r4,r4,-8
    4e5c:	24009726 	beq	r4,r16,50bc <_malloc_r+0x2f4>
    4e60:	80800117 	ldw	r2,4(r16)
    4e64:	01bfff04 	movi	r6,-4
    4e68:	014003c4 	movi	r5,15
    4e6c:	1184703a 	and	r2,r2,r6
    4e70:	1447c83a 	sub	r3,r2,r17
    4e74:	28c00716 	blt	r5,r3,4e94 <_malloc_r+0xcc>
    4e78:	1800920e 	bge	r3,zero,50c4 <_malloc_r+0x2fc>
    4e7c:	84000317 	ldw	r16,12(r16)
    4e80:	24008e26 	beq	r4,r16,50bc <_malloc_r+0x2f4>
    4e84:	80800117 	ldw	r2,4(r16)
    4e88:	1184703a 	and	r2,r2,r6
    4e8c:	1447c83a 	sub	r3,r2,r17
    4e90:	28fff90e 	bge	r5,r3,4e78 <__alt_data_end+0xfffe4e78>
    4e94:	3809883a 	mov	r4,r7
    4e98:	01800074 	movhi	r6,1
    4e9c:	9c000417 	ldw	r16,16(r19)
    4ea0:	31861404 	addi	r6,r6,6224
    4ea4:	32000204 	addi	r8,r6,8
    4ea8:	82013426 	beq	r16,r8,537c <_malloc_r+0x5b4>
    4eac:	80c00117 	ldw	r3,4(r16)
    4eb0:	00bfff04 	movi	r2,-4
    4eb4:	188e703a 	and	r7,r3,r2
    4eb8:	3c45c83a 	sub	r2,r7,r17
    4ebc:	00c003c4 	movi	r3,15
    4ec0:	18811f16 	blt	r3,r2,5340 <_malloc_r+0x578>
    4ec4:	32000515 	stw	r8,20(r6)
    4ec8:	32000415 	stw	r8,16(r6)
    4ecc:	10007f0e 	bge	r2,zero,50cc <_malloc_r+0x304>
    4ed0:	00807fc4 	movi	r2,511
    4ed4:	11c0fd36 	bltu	r2,r7,52cc <_malloc_r+0x504>
    4ed8:	3806d0fa 	srli	r3,r7,3
    4edc:	01c00044 	movi	r7,1
    4ee0:	30800117 	ldw	r2,4(r6)
    4ee4:	19400044 	addi	r5,r3,1
    4ee8:	294b883a 	add	r5,r5,r5
    4eec:	1807d0ba 	srai	r3,r3,2
    4ef0:	294b883a 	add	r5,r5,r5
    4ef4:	294b883a 	add	r5,r5,r5
    4ef8:	298b883a 	add	r5,r5,r6
    4efc:	38c6983a 	sll	r3,r7,r3
    4f00:	29c00017 	ldw	r7,0(r5)
    4f04:	2a7ffe04 	addi	r9,r5,-8
    4f08:	1886b03a 	or	r3,r3,r2
    4f0c:	82400315 	stw	r9,12(r16)
    4f10:	81c00215 	stw	r7,8(r16)
    4f14:	30c00115 	stw	r3,4(r6)
    4f18:	2c000015 	stw	r16,0(r5)
    4f1c:	3c000315 	stw	r16,12(r7)
    4f20:	2005d0ba 	srai	r2,r4,2
    4f24:	01400044 	movi	r5,1
    4f28:	288a983a 	sll	r5,r5,r2
    4f2c:	19406f36 	bltu	r3,r5,50ec <_malloc_r+0x324>
    4f30:	28c4703a 	and	r2,r5,r3
    4f34:	10000a1e 	bne	r2,zero,4f60 <_malloc_r+0x198>
    4f38:	00bfff04 	movi	r2,-4
    4f3c:	294b883a 	add	r5,r5,r5
    4f40:	2088703a 	and	r4,r4,r2
    4f44:	28c4703a 	and	r2,r5,r3
    4f48:	21000104 	addi	r4,r4,4
    4f4c:	1000041e 	bne	r2,zero,4f60 <_malloc_r+0x198>
    4f50:	294b883a 	add	r5,r5,r5
    4f54:	28c4703a 	and	r2,r5,r3
    4f58:	21000104 	addi	r4,r4,4
    4f5c:	103ffc26 	beq	r2,zero,4f50 <__alt_data_end+0xfffe4f50>
    4f60:	02bfff04 	movi	r10,-4
    4f64:	024003c4 	movi	r9,15
    4f68:	21800044 	addi	r6,r4,1
    4f6c:	318d883a 	add	r6,r6,r6
    4f70:	318d883a 	add	r6,r6,r6
    4f74:	318d883a 	add	r6,r6,r6
    4f78:	998d883a 	add	r6,r19,r6
    4f7c:	333ffe04 	addi	r12,r6,-8
    4f80:	2017883a 	mov	r11,r4
    4f84:	31800104 	addi	r6,r6,4
    4f88:	34000017 	ldw	r16,0(r6)
    4f8c:	31fffd04 	addi	r7,r6,-12
    4f90:	81c0041e 	bne	r16,r7,4fa4 <_malloc_r+0x1dc>
    4f94:	0000fb06 	br	5384 <_malloc_r+0x5bc>
    4f98:	1801030e 	bge	r3,zero,53a8 <_malloc_r+0x5e0>
    4f9c:	84000317 	ldw	r16,12(r16)
    4fa0:	81c0f826 	beq	r16,r7,5384 <_malloc_r+0x5bc>
    4fa4:	80800117 	ldw	r2,4(r16)
    4fa8:	1284703a 	and	r2,r2,r10
    4fac:	1447c83a 	sub	r3,r2,r17
    4fb0:	48fff90e 	bge	r9,r3,4f98 <__alt_data_end+0xfffe4f98>
    4fb4:	80800317 	ldw	r2,12(r16)
    4fb8:	81000217 	ldw	r4,8(r16)
    4fbc:	89400054 	ori	r5,r17,1
    4fc0:	81400115 	stw	r5,4(r16)
    4fc4:	20800315 	stw	r2,12(r4)
    4fc8:	11000215 	stw	r4,8(r2)
    4fcc:	8463883a 	add	r17,r16,r17
    4fd0:	9c400515 	stw	r17,20(r19)
    4fd4:	9c400415 	stw	r17,16(r19)
    4fd8:	18800054 	ori	r2,r3,1
    4fdc:	88800115 	stw	r2,4(r17)
    4fe0:	8a000315 	stw	r8,12(r17)
    4fe4:	8a000215 	stw	r8,8(r17)
    4fe8:	88e3883a 	add	r17,r17,r3
    4fec:	88c00015 	stw	r3,0(r17)
    4ff0:	9009883a 	mov	r4,r18
    4ff4:	000f06c0 	call	f06c <__malloc_unlock>
    4ff8:	80800204 	addi	r2,r16,8
    4ffc:	00001b06 	br	506c <_malloc_r+0x2a4>
    5000:	04400404 	movi	r17,16
    5004:	89402536 	bltu	r17,r5,509c <_malloc_r+0x2d4>
    5008:	000f0480 	call	f048 <__malloc_lock>
    500c:	00800184 	movi	r2,6
    5010:	01000084 	movi	r4,2
    5014:	04c00074 	movhi	r19,1
    5018:	1085883a 	add	r2,r2,r2
    501c:	9cc61404 	addi	r19,r19,6224
    5020:	1085883a 	add	r2,r2,r2
    5024:	9885883a 	add	r2,r19,r2
    5028:	14000117 	ldw	r16,4(r2)
    502c:	10fffe04 	addi	r3,r2,-8
    5030:	80c0d926 	beq	r16,r3,5398 <_malloc_r+0x5d0>
    5034:	80c00117 	ldw	r3,4(r16)
    5038:	81000317 	ldw	r4,12(r16)
    503c:	00bfff04 	movi	r2,-4
    5040:	1884703a 	and	r2,r3,r2
    5044:	81400217 	ldw	r5,8(r16)
    5048:	8085883a 	add	r2,r16,r2
    504c:	10c00117 	ldw	r3,4(r2)
    5050:	29000315 	stw	r4,12(r5)
    5054:	21400215 	stw	r5,8(r4)
    5058:	18c00054 	ori	r3,r3,1
    505c:	10c00115 	stw	r3,4(r2)
    5060:	9009883a 	mov	r4,r18
    5064:	000f06c0 	call	f06c <__malloc_unlock>
    5068:	80800204 	addi	r2,r16,8
    506c:	dfc00a17 	ldw	ra,40(sp)
    5070:	df000917 	ldw	fp,36(sp)
    5074:	ddc00817 	ldw	r23,32(sp)
    5078:	dd800717 	ldw	r22,28(sp)
    507c:	dd400617 	ldw	r21,24(sp)
    5080:	dd000517 	ldw	r20,20(sp)
    5084:	dcc00417 	ldw	r19,16(sp)
    5088:	dc800317 	ldw	r18,12(sp)
    508c:	dc400217 	ldw	r17,8(sp)
    5090:	dc000117 	ldw	r16,4(sp)
    5094:	dec00b04 	addi	sp,sp,44
    5098:	f800283a 	ret
    509c:	00800304 	movi	r2,12
    50a0:	90800015 	stw	r2,0(r18)
    50a4:	0005883a 	mov	r2,zero
    50a8:	003ff006 	br	506c <__alt_data_end+0xfffe506c>
    50ac:	01002004 	movi	r4,128
    50b0:	02001004 	movi	r8,64
    50b4:	01c00fc4 	movi	r7,63
    50b8:	003f6106 	br	4e40 <__alt_data_end+0xfffe4e40>
    50bc:	4009883a 	mov	r4,r8
    50c0:	003f7506 	br	4e98 <__alt_data_end+0xfffe4e98>
    50c4:	81000317 	ldw	r4,12(r16)
    50c8:	003fde06 	br	5044 <__alt_data_end+0xfffe5044>
    50cc:	81c5883a 	add	r2,r16,r7
    50d0:	11400117 	ldw	r5,4(r2)
    50d4:	9009883a 	mov	r4,r18
    50d8:	29400054 	ori	r5,r5,1
    50dc:	11400115 	stw	r5,4(r2)
    50e0:	000f06c0 	call	f06c <__malloc_unlock>
    50e4:	80800204 	addi	r2,r16,8
    50e8:	003fe006 	br	506c <__alt_data_end+0xfffe506c>
    50ec:	9c000217 	ldw	r16,8(r19)
    50f0:	00bfff04 	movi	r2,-4
    50f4:	85800117 	ldw	r22,4(r16)
    50f8:	b0ac703a 	and	r22,r22,r2
    50fc:	b4400336 	bltu	r22,r17,510c <_malloc_r+0x344>
    5100:	b445c83a 	sub	r2,r22,r17
    5104:	00c003c4 	movi	r3,15
    5108:	18805d16 	blt	r3,r2,5280 <_malloc_r+0x4b8>
    510c:	05c00074 	movhi	r23,1
    5110:	00800074 	movhi	r2,1
    5114:	10928404 	addi	r2,r2,18960
    5118:	bdcbb804 	addi	r23,r23,12000
    511c:	15400017 	ldw	r21,0(r2)
    5120:	b8c00017 	ldw	r3,0(r23)
    5124:	00bfffc4 	movi	r2,-1
    5128:	858d883a 	add	r6,r16,r22
    512c:	8d6b883a 	add	r21,r17,r21
    5130:	1880ea26 	beq	r3,r2,54dc <_malloc_r+0x714>
    5134:	ad4403c4 	addi	r21,r21,4111
    5138:	00bc0004 	movi	r2,-4096
    513c:	a8aa703a 	and	r21,r21,r2
    5140:	a80b883a 	mov	r5,r21
    5144:	9009883a 	mov	r4,r18
    5148:	d9800015 	stw	r6,0(sp)
    514c:	0005bd40 	call	5bd4 <_sbrk_r>
    5150:	1029883a 	mov	r20,r2
    5154:	00bfffc4 	movi	r2,-1
    5158:	d9800017 	ldw	r6,0(sp)
    515c:	a080e826 	beq	r20,r2,5500 <_malloc_r+0x738>
    5160:	a180a636 	bltu	r20,r6,53fc <_malloc_r+0x634>
    5164:	07000074 	movhi	fp,1
    5168:	e7128f04 	addi	fp,fp,19004
    516c:	e0800017 	ldw	r2,0(fp)
    5170:	a887883a 	add	r3,r21,r2
    5174:	e0c00015 	stw	r3,0(fp)
    5178:	3500e626 	beq	r6,r20,5514 <_malloc_r+0x74c>
    517c:	b9000017 	ldw	r4,0(r23)
    5180:	00bfffc4 	movi	r2,-1
    5184:	2080ee26 	beq	r4,r2,5540 <_malloc_r+0x778>
    5188:	a185c83a 	sub	r2,r20,r6
    518c:	10c5883a 	add	r2,r2,r3
    5190:	e0800015 	stw	r2,0(fp)
    5194:	a0c001cc 	andi	r3,r20,7
    5198:	1800bc26 	beq	r3,zero,548c <_malloc_r+0x6c4>
    519c:	a0e9c83a 	sub	r20,r20,r3
    51a0:	00840204 	movi	r2,4104
    51a4:	a5000204 	addi	r20,r20,8
    51a8:	10c7c83a 	sub	r3,r2,r3
    51ac:	a545883a 	add	r2,r20,r21
    51b0:	1083ffcc 	andi	r2,r2,4095
    51b4:	18abc83a 	sub	r21,r3,r2
    51b8:	a80b883a 	mov	r5,r21
    51bc:	9009883a 	mov	r4,r18
    51c0:	0005bd40 	call	5bd4 <_sbrk_r>
    51c4:	00ffffc4 	movi	r3,-1
    51c8:	10c0e126 	beq	r2,r3,5550 <_malloc_r+0x788>
    51cc:	1505c83a 	sub	r2,r2,r20
    51d0:	1545883a 	add	r2,r2,r21
    51d4:	10800054 	ori	r2,r2,1
    51d8:	e0c00017 	ldw	r3,0(fp)
    51dc:	9d000215 	stw	r20,8(r19)
    51e0:	a0800115 	stw	r2,4(r20)
    51e4:	a8c7883a 	add	r3,r21,r3
    51e8:	e0c00015 	stw	r3,0(fp)
    51ec:	84c00e26 	beq	r16,r19,5228 <_malloc_r+0x460>
    51f0:	018003c4 	movi	r6,15
    51f4:	3580a72e 	bgeu	r6,r22,5494 <_malloc_r+0x6cc>
    51f8:	81400117 	ldw	r5,4(r16)
    51fc:	013ffe04 	movi	r4,-8
    5200:	b0bffd04 	addi	r2,r22,-12
    5204:	1104703a 	and	r2,r2,r4
    5208:	2900004c 	andi	r4,r5,1
    520c:	2088b03a 	or	r4,r4,r2
    5210:	81000115 	stw	r4,4(r16)
    5214:	01400144 	movi	r5,5
    5218:	8089883a 	add	r4,r16,r2
    521c:	21400115 	stw	r5,4(r4)
    5220:	21400215 	stw	r5,8(r4)
    5224:	3080cd36 	bltu	r6,r2,555c <_malloc_r+0x794>
    5228:	00800074 	movhi	r2,1
    522c:	10928304 	addi	r2,r2,18956
    5230:	11000017 	ldw	r4,0(r2)
    5234:	20c0012e 	bgeu	r4,r3,523c <_malloc_r+0x474>
    5238:	10c00015 	stw	r3,0(r2)
    523c:	00800074 	movhi	r2,1
    5240:	10928204 	addi	r2,r2,18952
    5244:	11000017 	ldw	r4,0(r2)
    5248:	9c000217 	ldw	r16,8(r19)
    524c:	20c0012e 	bgeu	r4,r3,5254 <_malloc_r+0x48c>
    5250:	10c00015 	stw	r3,0(r2)
    5254:	80c00117 	ldw	r3,4(r16)
    5258:	00bfff04 	movi	r2,-4
    525c:	1886703a 	and	r3,r3,r2
    5260:	1c45c83a 	sub	r2,r3,r17
    5264:	1c400236 	bltu	r3,r17,5270 <_malloc_r+0x4a8>
    5268:	00c003c4 	movi	r3,15
    526c:	18800416 	blt	r3,r2,5280 <_malloc_r+0x4b8>
    5270:	9009883a 	mov	r4,r18
    5274:	000f06c0 	call	f06c <__malloc_unlock>
    5278:	0005883a 	mov	r2,zero
    527c:	003f7b06 	br	506c <__alt_data_end+0xfffe506c>
    5280:	88c00054 	ori	r3,r17,1
    5284:	80c00115 	stw	r3,4(r16)
    5288:	8463883a 	add	r17,r16,r17
    528c:	10800054 	ori	r2,r2,1
    5290:	9c400215 	stw	r17,8(r19)
    5294:	88800115 	stw	r2,4(r17)
    5298:	9009883a 	mov	r4,r18
    529c:	000f06c0 	call	f06c <__malloc_unlock>
    52a0:	80800204 	addi	r2,r16,8
    52a4:	003f7106 	br	506c <__alt_data_end+0xfffe506c>
    52a8:	00c00504 	movi	r3,20
    52ac:	18804a2e 	bgeu	r3,r2,53d8 <_malloc_r+0x610>
    52b0:	00c01504 	movi	r3,84
    52b4:	18806e36 	bltu	r3,r2,5470 <_malloc_r+0x6a8>
    52b8:	8804d33a 	srli	r2,r17,12
    52bc:	12001bc4 	addi	r8,r2,111
    52c0:	11c01b84 	addi	r7,r2,110
    52c4:	4209883a 	add	r4,r8,r8
    52c8:	003edd06 	br	4e40 <__alt_data_end+0xfffe4e40>
    52cc:	3804d27a 	srli	r2,r7,9
    52d0:	00c00104 	movi	r3,4
    52d4:	1880442e 	bgeu	r3,r2,53e8 <_malloc_r+0x620>
    52d8:	00c00504 	movi	r3,20
    52dc:	18808136 	bltu	r3,r2,54e4 <_malloc_r+0x71c>
    52e0:	11401704 	addi	r5,r2,92
    52e4:	10c016c4 	addi	r3,r2,91
    52e8:	294b883a 	add	r5,r5,r5
    52ec:	294b883a 	add	r5,r5,r5
    52f0:	294b883a 	add	r5,r5,r5
    52f4:	994b883a 	add	r5,r19,r5
    52f8:	28800017 	ldw	r2,0(r5)
    52fc:	01800074 	movhi	r6,1
    5300:	297ffe04 	addi	r5,r5,-8
    5304:	31861404 	addi	r6,r6,6224
    5308:	28806526 	beq	r5,r2,54a0 <_malloc_r+0x6d8>
    530c:	01bfff04 	movi	r6,-4
    5310:	10c00117 	ldw	r3,4(r2)
    5314:	1986703a 	and	r3,r3,r6
    5318:	38c0022e 	bgeu	r7,r3,5324 <_malloc_r+0x55c>
    531c:	10800217 	ldw	r2,8(r2)
    5320:	28bffb1e 	bne	r5,r2,5310 <__alt_data_end+0xfffe5310>
    5324:	11400317 	ldw	r5,12(r2)
    5328:	98c00117 	ldw	r3,4(r19)
    532c:	81400315 	stw	r5,12(r16)
    5330:	80800215 	stw	r2,8(r16)
    5334:	2c000215 	stw	r16,8(r5)
    5338:	14000315 	stw	r16,12(r2)
    533c:	003ef806 	br	4f20 <__alt_data_end+0xfffe4f20>
    5340:	88c00054 	ori	r3,r17,1
    5344:	80c00115 	stw	r3,4(r16)
    5348:	8463883a 	add	r17,r16,r17
    534c:	34400515 	stw	r17,20(r6)
    5350:	34400415 	stw	r17,16(r6)
    5354:	10c00054 	ori	r3,r2,1
    5358:	8a000315 	stw	r8,12(r17)
    535c:	8a000215 	stw	r8,8(r17)
    5360:	88c00115 	stw	r3,4(r17)
    5364:	88a3883a 	add	r17,r17,r2
    5368:	88800015 	stw	r2,0(r17)
    536c:	9009883a 	mov	r4,r18
    5370:	000f06c0 	call	f06c <__malloc_unlock>
    5374:	80800204 	addi	r2,r16,8
    5378:	003f3c06 	br	506c <__alt_data_end+0xfffe506c>
    537c:	30c00117 	ldw	r3,4(r6)
    5380:	003ee706 	br	4f20 <__alt_data_end+0xfffe4f20>
    5384:	5ac00044 	addi	r11,r11,1
    5388:	588000cc 	andi	r2,r11,3
    538c:	31800204 	addi	r6,r6,8
    5390:	103efd1e 	bne	r2,zero,4f88 <__alt_data_end+0xfffe4f88>
    5394:	00002406 	br	5428 <_malloc_r+0x660>
    5398:	14000317 	ldw	r16,12(r2)
    539c:	143f251e 	bne	r2,r16,5034 <__alt_data_end+0xfffe5034>
    53a0:	21000084 	addi	r4,r4,2
    53a4:	003ebc06 	br	4e98 <__alt_data_end+0xfffe4e98>
    53a8:	8085883a 	add	r2,r16,r2
    53ac:	10c00117 	ldw	r3,4(r2)
    53b0:	81000317 	ldw	r4,12(r16)
    53b4:	81400217 	ldw	r5,8(r16)
    53b8:	18c00054 	ori	r3,r3,1
    53bc:	10c00115 	stw	r3,4(r2)
    53c0:	29000315 	stw	r4,12(r5)
    53c4:	21400215 	stw	r5,8(r4)
    53c8:	9009883a 	mov	r4,r18
    53cc:	000f06c0 	call	f06c <__malloc_unlock>
    53d0:	80800204 	addi	r2,r16,8
    53d4:	003f2506 	br	506c <__alt_data_end+0xfffe506c>
    53d8:	12001704 	addi	r8,r2,92
    53dc:	11c016c4 	addi	r7,r2,91
    53e0:	4209883a 	add	r4,r8,r8
    53e4:	003e9606 	br	4e40 <__alt_data_end+0xfffe4e40>
    53e8:	3804d1ba 	srli	r2,r7,6
    53ec:	11400e44 	addi	r5,r2,57
    53f0:	10c00e04 	addi	r3,r2,56
    53f4:	294b883a 	add	r5,r5,r5
    53f8:	003fbc06 	br	52ec <__alt_data_end+0xfffe52ec>
    53fc:	84ff5926 	beq	r16,r19,5164 <__alt_data_end+0xfffe5164>
    5400:	00800074 	movhi	r2,1
    5404:	10861404 	addi	r2,r2,6224
    5408:	14000217 	ldw	r16,8(r2)
    540c:	00bfff04 	movi	r2,-4
    5410:	80c00117 	ldw	r3,4(r16)
    5414:	1886703a 	and	r3,r3,r2
    5418:	003f9106 	br	5260 <__alt_data_end+0xfffe5260>
    541c:	60800217 	ldw	r2,8(r12)
    5420:	213fffc4 	addi	r4,r4,-1
    5424:	1300651e 	bne	r2,r12,55bc <_malloc_r+0x7f4>
    5428:	208000cc 	andi	r2,r4,3
    542c:	633ffe04 	addi	r12,r12,-8
    5430:	103ffa1e 	bne	r2,zero,541c <__alt_data_end+0xfffe541c>
    5434:	98800117 	ldw	r2,4(r19)
    5438:	0146303a 	nor	r3,zero,r5
    543c:	1884703a 	and	r2,r3,r2
    5440:	98800115 	stw	r2,4(r19)
    5444:	294b883a 	add	r5,r5,r5
    5448:	117f2836 	bltu	r2,r5,50ec <__alt_data_end+0xfffe50ec>
    544c:	283f2726 	beq	r5,zero,50ec <__alt_data_end+0xfffe50ec>
    5450:	2886703a 	and	r3,r5,r2
    5454:	5809883a 	mov	r4,r11
    5458:	183ec31e 	bne	r3,zero,4f68 <__alt_data_end+0xfffe4f68>
    545c:	294b883a 	add	r5,r5,r5
    5460:	2886703a 	and	r3,r5,r2
    5464:	21000104 	addi	r4,r4,4
    5468:	183ffc26 	beq	r3,zero,545c <__alt_data_end+0xfffe545c>
    546c:	003ebe06 	br	4f68 <__alt_data_end+0xfffe4f68>
    5470:	00c05504 	movi	r3,340
    5474:	18801236 	bltu	r3,r2,54c0 <_malloc_r+0x6f8>
    5478:	8804d3fa 	srli	r2,r17,15
    547c:	12001e04 	addi	r8,r2,120
    5480:	11c01dc4 	addi	r7,r2,119
    5484:	4209883a 	add	r4,r8,r8
    5488:	003e6d06 	br	4e40 <__alt_data_end+0xfffe4e40>
    548c:	00c40004 	movi	r3,4096
    5490:	003f4606 	br	51ac <__alt_data_end+0xfffe51ac>
    5494:	00800044 	movi	r2,1
    5498:	a0800115 	stw	r2,4(r20)
    549c:	003f7406 	br	5270 <__alt_data_end+0xfffe5270>
    54a0:	1805d0ba 	srai	r2,r3,2
    54a4:	01c00044 	movi	r7,1
    54a8:	30c00117 	ldw	r3,4(r6)
    54ac:	388e983a 	sll	r7,r7,r2
    54b0:	2805883a 	mov	r2,r5
    54b4:	38c6b03a 	or	r3,r7,r3
    54b8:	30c00115 	stw	r3,4(r6)
    54bc:	003f9b06 	br	532c <__alt_data_end+0xfffe532c>
    54c0:	00c15504 	movi	r3,1364
    54c4:	18801a36 	bltu	r3,r2,5530 <_malloc_r+0x768>
    54c8:	8804d4ba 	srli	r2,r17,18
    54cc:	12001f44 	addi	r8,r2,125
    54d0:	11c01f04 	addi	r7,r2,124
    54d4:	4209883a 	add	r4,r8,r8
    54d8:	003e5906 	br	4e40 <__alt_data_end+0xfffe4e40>
    54dc:	ad400404 	addi	r21,r21,16
    54e0:	003f1706 	br	5140 <__alt_data_end+0xfffe5140>
    54e4:	00c01504 	movi	r3,84
    54e8:	18802336 	bltu	r3,r2,5578 <_malloc_r+0x7b0>
    54ec:	3804d33a 	srli	r2,r7,12
    54f0:	11401bc4 	addi	r5,r2,111
    54f4:	10c01b84 	addi	r3,r2,110
    54f8:	294b883a 	add	r5,r5,r5
    54fc:	003f7b06 	br	52ec <__alt_data_end+0xfffe52ec>
    5500:	9c000217 	ldw	r16,8(r19)
    5504:	00bfff04 	movi	r2,-4
    5508:	80c00117 	ldw	r3,4(r16)
    550c:	1886703a 	and	r3,r3,r2
    5510:	003f5306 	br	5260 <__alt_data_end+0xfffe5260>
    5514:	3083ffcc 	andi	r2,r6,4095
    5518:	103f181e 	bne	r2,zero,517c <__alt_data_end+0xfffe517c>
    551c:	99000217 	ldw	r4,8(r19)
    5520:	b545883a 	add	r2,r22,r21
    5524:	10800054 	ori	r2,r2,1
    5528:	20800115 	stw	r2,4(r4)
    552c:	003f3e06 	br	5228 <__alt_data_end+0xfffe5228>
    5530:	01003f84 	movi	r4,254
    5534:	02001fc4 	movi	r8,127
    5538:	01c01f84 	movi	r7,126
    553c:	003e4006 	br	4e40 <__alt_data_end+0xfffe4e40>
    5540:	00800074 	movhi	r2,1
    5544:	108bb804 	addi	r2,r2,12000
    5548:	15000015 	stw	r20,0(r2)
    554c:	003f1106 	br	5194 <__alt_data_end+0xfffe5194>
    5550:	00800044 	movi	r2,1
    5554:	002b883a 	mov	r21,zero
    5558:	003f1f06 	br	51d8 <__alt_data_end+0xfffe51d8>
    555c:	81400204 	addi	r5,r16,8
    5560:	9009883a 	mov	r4,r18
    5564:	00042980 	call	4298 <_free_r>
    5568:	00800074 	movhi	r2,1
    556c:	10928f04 	addi	r2,r2,19004
    5570:	10c00017 	ldw	r3,0(r2)
    5574:	003f2c06 	br	5228 <__alt_data_end+0xfffe5228>
    5578:	00c05504 	movi	r3,340
    557c:	18800536 	bltu	r3,r2,5594 <_malloc_r+0x7cc>
    5580:	3804d3fa 	srli	r2,r7,15
    5584:	11401e04 	addi	r5,r2,120
    5588:	10c01dc4 	addi	r3,r2,119
    558c:	294b883a 	add	r5,r5,r5
    5590:	003f5606 	br	52ec <__alt_data_end+0xfffe52ec>
    5594:	00c15504 	movi	r3,1364
    5598:	18800536 	bltu	r3,r2,55b0 <_malloc_r+0x7e8>
    559c:	3804d4ba 	srli	r2,r7,18
    55a0:	11401f44 	addi	r5,r2,125
    55a4:	10c01f04 	addi	r3,r2,124
    55a8:	294b883a 	add	r5,r5,r5
    55ac:	003f4f06 	br	52ec <__alt_data_end+0xfffe52ec>
    55b0:	01403f84 	movi	r5,254
    55b4:	00c01f84 	movi	r3,126
    55b8:	003f4c06 	br	52ec <__alt_data_end+0xfffe52ec>
    55bc:	98800117 	ldw	r2,4(r19)
    55c0:	003fa006 	br	5444 <__alt_data_end+0xfffe5444>
    55c4:	8808d0fa 	srli	r4,r17,3
    55c8:	20800044 	addi	r2,r4,1
    55cc:	1085883a 	add	r2,r2,r2
    55d0:	003e9006 	br	5014 <__alt_data_end+0xfffe5014>

000055d4 <memcpy>:
    55d4:	defffd04 	addi	sp,sp,-12
    55d8:	dfc00215 	stw	ra,8(sp)
    55dc:	dc400115 	stw	r17,4(sp)
    55e0:	dc000015 	stw	r16,0(sp)
    55e4:	00c003c4 	movi	r3,15
    55e8:	2005883a 	mov	r2,r4
    55ec:	1980452e 	bgeu	r3,r6,5704 <memcpy+0x130>
    55f0:	2906b03a 	or	r3,r5,r4
    55f4:	18c000cc 	andi	r3,r3,3
    55f8:	1800441e 	bne	r3,zero,570c <memcpy+0x138>
    55fc:	347ffc04 	addi	r17,r6,-16
    5600:	8822d13a 	srli	r17,r17,4
    5604:	28c00104 	addi	r3,r5,4
    5608:	23400104 	addi	r13,r4,4
    560c:	8820913a 	slli	r16,r17,4
    5610:	2b000204 	addi	r12,r5,8
    5614:	22c00204 	addi	r11,r4,8
    5618:	84000504 	addi	r16,r16,20
    561c:	2a800304 	addi	r10,r5,12
    5620:	22400304 	addi	r9,r4,12
    5624:	2c21883a 	add	r16,r5,r16
    5628:	2811883a 	mov	r8,r5
    562c:	200f883a 	mov	r7,r4
    5630:	41000017 	ldw	r4,0(r8)
    5634:	1fc00017 	ldw	ra,0(r3)
    5638:	63c00017 	ldw	r15,0(r12)
    563c:	39000015 	stw	r4,0(r7)
    5640:	53800017 	ldw	r14,0(r10)
    5644:	6fc00015 	stw	ra,0(r13)
    5648:	5bc00015 	stw	r15,0(r11)
    564c:	4b800015 	stw	r14,0(r9)
    5650:	18c00404 	addi	r3,r3,16
    5654:	39c00404 	addi	r7,r7,16
    5658:	42000404 	addi	r8,r8,16
    565c:	6b400404 	addi	r13,r13,16
    5660:	63000404 	addi	r12,r12,16
    5664:	5ac00404 	addi	r11,r11,16
    5668:	52800404 	addi	r10,r10,16
    566c:	4a400404 	addi	r9,r9,16
    5670:	1c3fef1e 	bne	r3,r16,5630 <__alt_data_end+0xfffe5630>
    5674:	89c00044 	addi	r7,r17,1
    5678:	380e913a 	slli	r7,r7,4
    567c:	310003cc 	andi	r4,r6,15
    5680:	02c000c4 	movi	r11,3
    5684:	11c7883a 	add	r3,r2,r7
    5688:	29cb883a 	add	r5,r5,r7
    568c:	5900212e 	bgeu	r11,r4,5714 <memcpy+0x140>
    5690:	1813883a 	mov	r9,r3
    5694:	2811883a 	mov	r8,r5
    5698:	200f883a 	mov	r7,r4
    569c:	42800017 	ldw	r10,0(r8)
    56a0:	4a400104 	addi	r9,r9,4
    56a4:	39ffff04 	addi	r7,r7,-4
    56a8:	4abfff15 	stw	r10,-4(r9)
    56ac:	42000104 	addi	r8,r8,4
    56b0:	59fffa36 	bltu	r11,r7,569c <__alt_data_end+0xfffe569c>
    56b4:	213fff04 	addi	r4,r4,-4
    56b8:	2008d0ba 	srli	r4,r4,2
    56bc:	318000cc 	andi	r6,r6,3
    56c0:	21000044 	addi	r4,r4,1
    56c4:	2109883a 	add	r4,r4,r4
    56c8:	2109883a 	add	r4,r4,r4
    56cc:	1907883a 	add	r3,r3,r4
    56d0:	290b883a 	add	r5,r5,r4
    56d4:	30000626 	beq	r6,zero,56f0 <memcpy+0x11c>
    56d8:	198d883a 	add	r6,r3,r6
    56dc:	29c00003 	ldbu	r7,0(r5)
    56e0:	18c00044 	addi	r3,r3,1
    56e4:	29400044 	addi	r5,r5,1
    56e8:	19ffffc5 	stb	r7,-1(r3)
    56ec:	19bffb1e 	bne	r3,r6,56dc <__alt_data_end+0xfffe56dc>
    56f0:	dfc00217 	ldw	ra,8(sp)
    56f4:	dc400117 	ldw	r17,4(sp)
    56f8:	dc000017 	ldw	r16,0(sp)
    56fc:	dec00304 	addi	sp,sp,12
    5700:	f800283a 	ret
    5704:	2007883a 	mov	r3,r4
    5708:	003ff206 	br	56d4 <__alt_data_end+0xfffe56d4>
    570c:	2007883a 	mov	r3,r4
    5710:	003ff106 	br	56d8 <__alt_data_end+0xfffe56d8>
    5714:	200d883a 	mov	r6,r4
    5718:	003fee06 	br	56d4 <__alt_data_end+0xfffe56d4>

0000571c <memset>:
    571c:	20c000cc 	andi	r3,r4,3
    5720:	2005883a 	mov	r2,r4
    5724:	18004426 	beq	r3,zero,5838 <memset+0x11c>
    5728:	31ffffc4 	addi	r7,r6,-1
    572c:	30004026 	beq	r6,zero,5830 <memset+0x114>
    5730:	2813883a 	mov	r9,r5
    5734:	200d883a 	mov	r6,r4
    5738:	2007883a 	mov	r3,r4
    573c:	00000406 	br	5750 <memset+0x34>
    5740:	3a3fffc4 	addi	r8,r7,-1
    5744:	31800044 	addi	r6,r6,1
    5748:	38003926 	beq	r7,zero,5830 <memset+0x114>
    574c:	400f883a 	mov	r7,r8
    5750:	18c00044 	addi	r3,r3,1
    5754:	32400005 	stb	r9,0(r6)
    5758:	1a0000cc 	andi	r8,r3,3
    575c:	403ff81e 	bne	r8,zero,5740 <__alt_data_end+0xfffe5740>
    5760:	010000c4 	movi	r4,3
    5764:	21c02d2e 	bgeu	r4,r7,581c <memset+0x100>
    5768:	29003fcc 	andi	r4,r5,255
    576c:	200c923a 	slli	r6,r4,8
    5770:	3108b03a 	or	r4,r6,r4
    5774:	200c943a 	slli	r6,r4,16
    5778:	218cb03a 	or	r6,r4,r6
    577c:	010003c4 	movi	r4,15
    5780:	21c0182e 	bgeu	r4,r7,57e4 <memset+0xc8>
    5784:	3b3ffc04 	addi	r12,r7,-16
    5788:	6018d13a 	srli	r12,r12,4
    578c:	1a000104 	addi	r8,r3,4
    5790:	1ac00204 	addi	r11,r3,8
    5794:	6008913a 	slli	r4,r12,4
    5798:	1a800304 	addi	r10,r3,12
    579c:	1813883a 	mov	r9,r3
    57a0:	21000504 	addi	r4,r4,20
    57a4:	1909883a 	add	r4,r3,r4
    57a8:	49800015 	stw	r6,0(r9)
    57ac:	41800015 	stw	r6,0(r8)
    57b0:	59800015 	stw	r6,0(r11)
    57b4:	51800015 	stw	r6,0(r10)
    57b8:	42000404 	addi	r8,r8,16
    57bc:	4a400404 	addi	r9,r9,16
    57c0:	5ac00404 	addi	r11,r11,16
    57c4:	52800404 	addi	r10,r10,16
    57c8:	413ff71e 	bne	r8,r4,57a8 <__alt_data_end+0xfffe57a8>
    57cc:	63000044 	addi	r12,r12,1
    57d0:	6018913a 	slli	r12,r12,4
    57d4:	39c003cc 	andi	r7,r7,15
    57d8:	010000c4 	movi	r4,3
    57dc:	1b07883a 	add	r3,r3,r12
    57e0:	21c00e2e 	bgeu	r4,r7,581c <memset+0x100>
    57e4:	1813883a 	mov	r9,r3
    57e8:	3811883a 	mov	r8,r7
    57ec:	010000c4 	movi	r4,3
    57f0:	49800015 	stw	r6,0(r9)
    57f4:	423fff04 	addi	r8,r8,-4
    57f8:	4a400104 	addi	r9,r9,4
    57fc:	223ffc36 	bltu	r4,r8,57f0 <__alt_data_end+0xfffe57f0>
    5800:	393fff04 	addi	r4,r7,-4
    5804:	2008d0ba 	srli	r4,r4,2
    5808:	39c000cc 	andi	r7,r7,3
    580c:	21000044 	addi	r4,r4,1
    5810:	2109883a 	add	r4,r4,r4
    5814:	2109883a 	add	r4,r4,r4
    5818:	1907883a 	add	r3,r3,r4
    581c:	38000526 	beq	r7,zero,5834 <memset+0x118>
    5820:	19cf883a 	add	r7,r3,r7
    5824:	19400005 	stb	r5,0(r3)
    5828:	18c00044 	addi	r3,r3,1
    582c:	38fffd1e 	bne	r7,r3,5824 <__alt_data_end+0xfffe5824>
    5830:	f800283a 	ret
    5834:	f800283a 	ret
    5838:	2007883a 	mov	r3,r4
    583c:	300f883a 	mov	r7,r6
    5840:	003fc706 	br	5760 <__alt_data_end+0xfffe5760>

00005844 <_open_r>:
    5844:	defffd04 	addi	sp,sp,-12
    5848:	2805883a 	mov	r2,r5
    584c:	dc000015 	stw	r16,0(sp)
    5850:	04000074 	movhi	r16,1
    5854:	dc400115 	stw	r17,4(sp)
    5858:	300b883a 	mov	r5,r6
    585c:	84128104 	addi	r16,r16,18948
    5860:	2023883a 	mov	r17,r4
    5864:	380d883a 	mov	r6,r7
    5868:	1009883a 	mov	r4,r2
    586c:	dfc00215 	stw	ra,8(sp)
    5870:	80000015 	stw	zero,0(r16)
    5874:	000f1b80 	call	f1b8 <open>
    5878:	00ffffc4 	movi	r3,-1
    587c:	10c00526 	beq	r2,r3,5894 <_open_r+0x50>
    5880:	dfc00217 	ldw	ra,8(sp)
    5884:	dc400117 	ldw	r17,4(sp)
    5888:	dc000017 	ldw	r16,0(sp)
    588c:	dec00304 	addi	sp,sp,12
    5890:	f800283a 	ret
    5894:	80c00017 	ldw	r3,0(r16)
    5898:	183ff926 	beq	r3,zero,5880 <__alt_data_end+0xfffe5880>
    589c:	88c00015 	stw	r3,0(r17)
    58a0:	003ff706 	br	5880 <__alt_data_end+0xfffe5880>

000058a4 <_printf_r>:
    58a4:	defffd04 	addi	sp,sp,-12
    58a8:	2805883a 	mov	r2,r5
    58ac:	dfc00015 	stw	ra,0(sp)
    58b0:	d9800115 	stw	r6,4(sp)
    58b4:	d9c00215 	stw	r7,8(sp)
    58b8:	21400217 	ldw	r5,8(r4)
    58bc:	d9c00104 	addi	r7,sp,4
    58c0:	100d883a 	mov	r6,r2
    58c4:	0005dfc0 	call	5dfc <___vfprintf_internal_r>
    58c8:	dfc00017 	ldw	ra,0(sp)
    58cc:	dec00304 	addi	sp,sp,12
    58d0:	f800283a 	ret

000058d4 <printf>:
    58d4:	defffc04 	addi	sp,sp,-16
    58d8:	dfc00015 	stw	ra,0(sp)
    58dc:	d9400115 	stw	r5,4(sp)
    58e0:	d9800215 	stw	r6,8(sp)
    58e4:	d9c00315 	stw	r7,12(sp)
    58e8:	00800074 	movhi	r2,1
    58ec:	108bb704 	addi	r2,r2,11996
    58f0:	10800017 	ldw	r2,0(r2)
    58f4:	200b883a 	mov	r5,r4
    58f8:	d9800104 	addi	r6,sp,4
    58fc:	11000217 	ldw	r4,8(r2)
    5900:	00080d80 	call	80d8 <__vfprintf_internal>
    5904:	dfc00017 	ldw	ra,0(sp)
    5908:	dec00404 	addi	sp,sp,16
    590c:	f800283a 	ret

00005910 <_puts_r>:
    5910:	defff604 	addi	sp,sp,-40
    5914:	dc000715 	stw	r16,28(sp)
    5918:	2021883a 	mov	r16,r4
    591c:	2809883a 	mov	r4,r5
    5920:	dc400815 	stw	r17,32(sp)
    5924:	dfc00915 	stw	ra,36(sp)
    5928:	2823883a 	mov	r17,r5
    592c:	0005d640 	call	5d64 <strlen>
    5930:	10c00044 	addi	r3,r2,1
    5934:	d8800115 	stw	r2,4(sp)
    5938:	00800074 	movhi	r2,1
    593c:	10848c04 	addi	r2,r2,4656
    5940:	d8800215 	stw	r2,8(sp)
    5944:	00800044 	movi	r2,1
    5948:	d8800315 	stw	r2,12(sp)
    594c:	00800084 	movi	r2,2
    5950:	dc400015 	stw	r17,0(sp)
    5954:	d8c00615 	stw	r3,24(sp)
    5958:	dec00415 	stw	sp,16(sp)
    595c:	d8800515 	stw	r2,20(sp)
    5960:	80000226 	beq	r16,zero,596c <_puts_r+0x5c>
    5964:	80800e17 	ldw	r2,56(r16)
    5968:	10001426 	beq	r2,zero,59bc <_puts_r+0xac>
    596c:	81400217 	ldw	r5,8(r16)
    5970:	2880030b 	ldhu	r2,12(r5)
    5974:	10c8000c 	andi	r3,r2,8192
    5978:	1800061e 	bne	r3,zero,5994 <_puts_r+0x84>
    597c:	29001917 	ldw	r4,100(r5)
    5980:	00f7ffc4 	movi	r3,-8193
    5984:	10880014 	ori	r2,r2,8192
    5988:	20c6703a 	and	r3,r4,r3
    598c:	2880030d 	sth	r2,12(r5)
    5990:	28c01915 	stw	r3,100(r5)
    5994:	d9800404 	addi	r6,sp,16
    5998:	8009883a 	mov	r4,r16
    599c:	0009e940 	call	9e94 <__sfvwrite_r>
    59a0:	1000091e 	bne	r2,zero,59c8 <_puts_r+0xb8>
    59a4:	00800284 	movi	r2,10
    59a8:	dfc00917 	ldw	ra,36(sp)
    59ac:	dc400817 	ldw	r17,32(sp)
    59b0:	dc000717 	ldw	r16,28(sp)
    59b4:	dec00a04 	addi	sp,sp,40
    59b8:	f800283a 	ret
    59bc:	8009883a 	mov	r4,r16
    59c0:	0003da80 	call	3da8 <__sinit>
    59c4:	003fe906 	br	596c <__alt_data_end+0xfffe596c>
    59c8:	00bfffc4 	movi	r2,-1
    59cc:	003ff606 	br	59a8 <__alt_data_end+0xfffe59a8>

000059d0 <puts>:
    59d0:	00800074 	movhi	r2,1
    59d4:	108bb704 	addi	r2,r2,11996
    59d8:	200b883a 	mov	r5,r4
    59dc:	11000017 	ldw	r4,0(r2)
    59e0:	00059101 	jmpi	5910 <_puts_r>

000059e4 <lflush>:
    59e4:	2080030b 	ldhu	r2,12(r4)
    59e8:	00c00244 	movi	r3,9
    59ec:	1080024c 	andi	r2,r2,9
    59f0:	10c00226 	beq	r2,r3,59fc <lflush+0x18>
    59f4:	0005883a 	mov	r2,zero
    59f8:	f800283a 	ret
    59fc:	0003a181 	jmpi	3a18 <fflush>

00005a00 <__srefill_r>:
    5a00:	defffc04 	addi	sp,sp,-16
    5a04:	dc400115 	stw	r17,4(sp)
    5a08:	dc000015 	stw	r16,0(sp)
    5a0c:	dfc00315 	stw	ra,12(sp)
    5a10:	dc800215 	stw	r18,8(sp)
    5a14:	2023883a 	mov	r17,r4
    5a18:	2821883a 	mov	r16,r5
    5a1c:	20000226 	beq	r4,zero,5a28 <__srefill_r+0x28>
    5a20:	20800e17 	ldw	r2,56(r4)
    5a24:	10003c26 	beq	r2,zero,5b18 <__srefill_r+0x118>
    5a28:	80c0030b 	ldhu	r3,12(r16)
    5a2c:	1908000c 	andi	r4,r3,8192
    5a30:	1805883a 	mov	r2,r3
    5a34:	2000071e 	bne	r4,zero,5a54 <__srefill_r+0x54>
    5a38:	81001917 	ldw	r4,100(r16)
    5a3c:	18880014 	ori	r2,r3,8192
    5a40:	00f7ffc4 	movi	r3,-8193
    5a44:	20c8703a 	and	r4,r4,r3
    5a48:	8080030d 	sth	r2,12(r16)
    5a4c:	1007883a 	mov	r3,r2
    5a50:	81001915 	stw	r4,100(r16)
    5a54:	80000115 	stw	zero,4(r16)
    5a58:	1100080c 	andi	r4,r2,32
    5a5c:	2000571e 	bne	r4,zero,5bbc <__srefill_r+0x1bc>
    5a60:	1100010c 	andi	r4,r2,4
    5a64:	20001f26 	beq	r4,zero,5ae4 <__srefill_r+0xe4>
    5a68:	81400c17 	ldw	r5,48(r16)
    5a6c:	28000826 	beq	r5,zero,5a90 <__srefill_r+0x90>
    5a70:	80801004 	addi	r2,r16,64
    5a74:	28800226 	beq	r5,r2,5a80 <__srefill_r+0x80>
    5a78:	8809883a 	mov	r4,r17
    5a7c:	00042980 	call	4298 <_free_r>
    5a80:	80800f17 	ldw	r2,60(r16)
    5a84:	80000c15 	stw	zero,48(r16)
    5a88:	80800115 	stw	r2,4(r16)
    5a8c:	1000391e 	bne	r2,zero,5b74 <__srefill_r+0x174>
    5a90:	80800417 	ldw	r2,16(r16)
    5a94:	10004b26 	beq	r2,zero,5bc4 <__srefill_r+0x1c4>
    5a98:	8480030b 	ldhu	r18,12(r16)
    5a9c:	908000cc 	andi	r2,r18,3
    5aa0:	10001f1e 	bne	r2,zero,5b20 <__srefill_r+0x120>
    5aa4:	81800417 	ldw	r6,16(r16)
    5aa8:	80800817 	ldw	r2,32(r16)
    5aac:	81c00517 	ldw	r7,20(r16)
    5ab0:	81400717 	ldw	r5,28(r16)
    5ab4:	81800015 	stw	r6,0(r16)
    5ab8:	8809883a 	mov	r4,r17
    5abc:	103ee83a 	callr	r2
    5ac0:	80800115 	stw	r2,4(r16)
    5ac4:	00800e0e 	bge	zero,r2,5b00 <__srefill_r+0x100>
    5ac8:	0005883a 	mov	r2,zero
    5acc:	dfc00317 	ldw	ra,12(sp)
    5ad0:	dc800217 	ldw	r18,8(sp)
    5ad4:	dc400117 	ldw	r17,4(sp)
    5ad8:	dc000017 	ldw	r16,0(sp)
    5adc:	dec00404 	addi	sp,sp,16
    5ae0:	f800283a 	ret
    5ae4:	1100040c 	andi	r4,r2,16
    5ae8:	20003026 	beq	r4,zero,5bac <__srefill_r+0x1ac>
    5aec:	1080020c 	andi	r2,r2,8
    5af0:	1000241e 	bne	r2,zero,5b84 <__srefill_r+0x184>
    5af4:	18c00114 	ori	r3,r3,4
    5af8:	80c0030d 	sth	r3,12(r16)
    5afc:	003fe406 	br	5a90 <__alt_data_end+0xfffe5a90>
    5b00:	80c0030b 	ldhu	r3,12(r16)
    5b04:	1000161e 	bne	r2,zero,5b60 <__srefill_r+0x160>
    5b08:	18c00814 	ori	r3,r3,32
    5b0c:	00bfffc4 	movi	r2,-1
    5b10:	80c0030d 	sth	r3,12(r16)
    5b14:	003fed06 	br	5acc <__alt_data_end+0xfffe5acc>
    5b18:	0003da80 	call	3da8 <__sinit>
    5b1c:	003fc206 	br	5a28 <__alt_data_end+0xfffe5a28>
    5b20:	00800074 	movhi	r2,1
    5b24:	108bb604 	addi	r2,r2,11992
    5b28:	11000017 	ldw	r4,0(r2)
    5b2c:	01400034 	movhi	r5,0
    5b30:	00800044 	movi	r2,1
    5b34:	29567904 	addi	r5,r5,23012
    5b38:	8080030d 	sth	r2,12(r16)
    5b3c:	0004a840 	call	4a84 <_fwalk>
    5b40:	00800244 	movi	r2,9
    5b44:	8480030d 	sth	r18,12(r16)
    5b48:	9480024c 	andi	r18,r18,9
    5b4c:	90bfd51e 	bne	r18,r2,5aa4 <__alt_data_end+0xfffe5aa4>
    5b50:	800b883a 	mov	r5,r16
    5b54:	8809883a 	mov	r4,r17
    5b58:	00037a00 	call	37a0 <__sflush_r>
    5b5c:	003fd106 	br	5aa4 <__alt_data_end+0xfffe5aa4>
    5b60:	18c01014 	ori	r3,r3,64
    5b64:	80000115 	stw	zero,4(r16)
    5b68:	00bfffc4 	movi	r2,-1
    5b6c:	80c0030d 	sth	r3,12(r16)
    5b70:	003fd606 	br	5acc <__alt_data_end+0xfffe5acc>
    5b74:	80c00e17 	ldw	r3,56(r16)
    5b78:	0005883a 	mov	r2,zero
    5b7c:	80c00015 	stw	r3,0(r16)
    5b80:	003fd206 	br	5acc <__alt_data_end+0xfffe5acc>
    5b84:	800b883a 	mov	r5,r16
    5b88:	8809883a 	mov	r4,r17
    5b8c:	00039bc0 	call	39bc <_fflush_r>
    5b90:	10000a1e 	bne	r2,zero,5bbc <__srefill_r+0x1bc>
    5b94:	8080030b 	ldhu	r2,12(r16)
    5b98:	00fffdc4 	movi	r3,-9
    5b9c:	80000215 	stw	zero,8(r16)
    5ba0:	1886703a 	and	r3,r3,r2
    5ba4:	80000615 	stw	zero,24(r16)
    5ba8:	003fd206 	br	5af4 <__alt_data_end+0xfffe5af4>
    5bac:	00800244 	movi	r2,9
    5bb0:	88800015 	stw	r2,0(r17)
    5bb4:	18c01014 	ori	r3,r3,64
    5bb8:	80c0030d 	sth	r3,12(r16)
    5bbc:	00bfffc4 	movi	r2,-1
    5bc0:	003fc206 	br	5acc <__alt_data_end+0xfffe5acc>
    5bc4:	800b883a 	mov	r5,r16
    5bc8:	8809883a 	mov	r4,r17
    5bcc:	0004c0c0 	call	4c0c <__smakebuf_r>
    5bd0:	003fb106 	br	5a98 <__alt_data_end+0xfffe5a98>

00005bd4 <_sbrk_r>:
    5bd4:	defffd04 	addi	sp,sp,-12
    5bd8:	dc000015 	stw	r16,0(sp)
    5bdc:	04000074 	movhi	r16,1
    5be0:	dc400115 	stw	r17,4(sp)
    5be4:	84128104 	addi	r16,r16,18948
    5be8:	2023883a 	mov	r17,r4
    5bec:	2809883a 	mov	r4,r5
    5bf0:	dfc00215 	stw	ra,8(sp)
    5bf4:	80000015 	stw	zero,0(r16)
    5bf8:	000f4d80 	call	f4d8 <sbrk>
    5bfc:	00ffffc4 	movi	r3,-1
    5c00:	10c00526 	beq	r2,r3,5c18 <_sbrk_r+0x44>
    5c04:	dfc00217 	ldw	ra,8(sp)
    5c08:	dc400117 	ldw	r17,4(sp)
    5c0c:	dc000017 	ldw	r16,0(sp)
    5c10:	dec00304 	addi	sp,sp,12
    5c14:	f800283a 	ret
    5c18:	80c00017 	ldw	r3,0(r16)
    5c1c:	183ff926 	beq	r3,zero,5c04 <__alt_data_end+0xfffe5c04>
    5c20:	88c00015 	stw	r3,0(r17)
    5c24:	003ff706 	br	5c04 <__alt_data_end+0xfffe5c04>

00005c28 <__sread>:
    5c28:	defffe04 	addi	sp,sp,-8
    5c2c:	dc000015 	stw	r16,0(sp)
    5c30:	2821883a 	mov	r16,r5
    5c34:	2940038f 	ldh	r5,14(r5)
    5c38:	dfc00115 	stw	ra,4(sp)
    5c3c:	000b7e40 	call	b7e4 <_read_r>
    5c40:	10000716 	blt	r2,zero,5c60 <__sread+0x38>
    5c44:	80c01417 	ldw	r3,80(r16)
    5c48:	1887883a 	add	r3,r3,r2
    5c4c:	80c01415 	stw	r3,80(r16)
    5c50:	dfc00117 	ldw	ra,4(sp)
    5c54:	dc000017 	ldw	r16,0(sp)
    5c58:	dec00204 	addi	sp,sp,8
    5c5c:	f800283a 	ret
    5c60:	80c0030b 	ldhu	r3,12(r16)
    5c64:	18fbffcc 	andi	r3,r3,61439
    5c68:	80c0030d 	sth	r3,12(r16)
    5c6c:	dfc00117 	ldw	ra,4(sp)
    5c70:	dc000017 	ldw	r16,0(sp)
    5c74:	dec00204 	addi	sp,sp,8
    5c78:	f800283a 	ret

00005c7c <__seofread>:
    5c7c:	0005883a 	mov	r2,zero
    5c80:	f800283a 	ret

00005c84 <__swrite>:
    5c84:	2880030b 	ldhu	r2,12(r5)
    5c88:	defffb04 	addi	sp,sp,-20
    5c8c:	dcc00315 	stw	r19,12(sp)
    5c90:	dc800215 	stw	r18,8(sp)
    5c94:	dc400115 	stw	r17,4(sp)
    5c98:	dc000015 	stw	r16,0(sp)
    5c9c:	dfc00415 	stw	ra,16(sp)
    5ca0:	10c0400c 	andi	r3,r2,256
    5ca4:	2821883a 	mov	r16,r5
    5ca8:	2023883a 	mov	r17,r4
    5cac:	3025883a 	mov	r18,r6
    5cb0:	3827883a 	mov	r19,r7
    5cb4:	18000526 	beq	r3,zero,5ccc <__swrite+0x48>
    5cb8:	2940038f 	ldh	r5,14(r5)
    5cbc:	01c00084 	movi	r7,2
    5cc0:	000d883a 	mov	r6,zero
    5cc4:	000a48c0 	call	a48c <_lseek_r>
    5cc8:	8080030b 	ldhu	r2,12(r16)
    5ccc:	8140038f 	ldh	r5,14(r16)
    5cd0:	10bbffcc 	andi	r2,r2,61439
    5cd4:	980f883a 	mov	r7,r19
    5cd8:	900d883a 	mov	r6,r18
    5cdc:	8809883a 	mov	r4,r17
    5ce0:	8080030d 	sth	r2,12(r16)
    5ce4:	dfc00417 	ldw	ra,16(sp)
    5ce8:	dcc00317 	ldw	r19,12(sp)
    5cec:	dc800217 	ldw	r18,8(sp)
    5cf0:	dc400117 	ldw	r17,4(sp)
    5cf4:	dc000017 	ldw	r16,0(sp)
    5cf8:	dec00504 	addi	sp,sp,20
    5cfc:	00081b01 	jmpi	81b0 <_write_r>

00005d00 <__sseek>:
    5d00:	defffe04 	addi	sp,sp,-8
    5d04:	dc000015 	stw	r16,0(sp)
    5d08:	2821883a 	mov	r16,r5
    5d0c:	2940038f 	ldh	r5,14(r5)
    5d10:	dfc00115 	stw	ra,4(sp)
    5d14:	000a48c0 	call	a48c <_lseek_r>
    5d18:	00ffffc4 	movi	r3,-1
    5d1c:	10c00826 	beq	r2,r3,5d40 <__sseek+0x40>
    5d20:	80c0030b 	ldhu	r3,12(r16)
    5d24:	80801415 	stw	r2,80(r16)
    5d28:	18c40014 	ori	r3,r3,4096
    5d2c:	80c0030d 	sth	r3,12(r16)
    5d30:	dfc00117 	ldw	ra,4(sp)
    5d34:	dc000017 	ldw	r16,0(sp)
    5d38:	dec00204 	addi	sp,sp,8
    5d3c:	f800283a 	ret
    5d40:	80c0030b 	ldhu	r3,12(r16)
    5d44:	18fbffcc 	andi	r3,r3,61439
    5d48:	80c0030d 	sth	r3,12(r16)
    5d4c:	dfc00117 	ldw	ra,4(sp)
    5d50:	dc000017 	ldw	r16,0(sp)
    5d54:	dec00204 	addi	sp,sp,8
    5d58:	f800283a 	ret

00005d5c <__sclose>:
    5d5c:	2940038f 	ldh	r5,14(r5)
    5d60:	00083641 	jmpi	8364 <_close_r>

00005d64 <strlen>:
    5d64:	208000cc 	andi	r2,r4,3
    5d68:	10002026 	beq	r2,zero,5dec <strlen+0x88>
    5d6c:	20800007 	ldb	r2,0(r4)
    5d70:	10002026 	beq	r2,zero,5df4 <strlen+0x90>
    5d74:	2005883a 	mov	r2,r4
    5d78:	00000206 	br	5d84 <strlen+0x20>
    5d7c:	10c00007 	ldb	r3,0(r2)
    5d80:	18001826 	beq	r3,zero,5de4 <strlen+0x80>
    5d84:	10800044 	addi	r2,r2,1
    5d88:	10c000cc 	andi	r3,r2,3
    5d8c:	183ffb1e 	bne	r3,zero,5d7c <__alt_data_end+0xfffe5d7c>
    5d90:	10c00017 	ldw	r3,0(r2)
    5d94:	01ffbff4 	movhi	r7,65279
    5d98:	39ffbfc4 	addi	r7,r7,-257
    5d9c:	00ca303a 	nor	r5,zero,r3
    5da0:	01a02074 	movhi	r6,32897
    5da4:	19c7883a 	add	r3,r3,r7
    5da8:	31a02004 	addi	r6,r6,-32640
    5dac:	1946703a 	and	r3,r3,r5
    5db0:	1986703a 	and	r3,r3,r6
    5db4:	1800091e 	bne	r3,zero,5ddc <strlen+0x78>
    5db8:	10800104 	addi	r2,r2,4
    5dbc:	10c00017 	ldw	r3,0(r2)
    5dc0:	19cb883a 	add	r5,r3,r7
    5dc4:	00c6303a 	nor	r3,zero,r3
    5dc8:	28c6703a 	and	r3,r5,r3
    5dcc:	1986703a 	and	r3,r3,r6
    5dd0:	183ff926 	beq	r3,zero,5db8 <__alt_data_end+0xfffe5db8>
    5dd4:	00000106 	br	5ddc <strlen+0x78>
    5dd8:	10800044 	addi	r2,r2,1
    5ddc:	10c00007 	ldb	r3,0(r2)
    5de0:	183ffd1e 	bne	r3,zero,5dd8 <__alt_data_end+0xfffe5dd8>
    5de4:	1105c83a 	sub	r2,r2,r4
    5de8:	f800283a 	ret
    5dec:	2005883a 	mov	r2,r4
    5df0:	003fe706 	br	5d90 <__alt_data_end+0xfffe5d90>
    5df4:	0005883a 	mov	r2,zero
    5df8:	f800283a 	ret

00005dfc <___vfprintf_internal_r>:
    5dfc:	deffb804 	addi	sp,sp,-288
    5e00:	dfc04715 	stw	ra,284(sp)
    5e04:	ddc04515 	stw	r23,276(sp)
    5e08:	dd404315 	stw	r21,268(sp)
    5e0c:	d9002d15 	stw	r4,180(sp)
    5e10:	282f883a 	mov	r23,r5
    5e14:	302b883a 	mov	r21,r6
    5e18:	d9c02e15 	stw	r7,184(sp)
    5e1c:	df004615 	stw	fp,280(sp)
    5e20:	dd804415 	stw	r22,272(sp)
    5e24:	dd004215 	stw	r20,264(sp)
    5e28:	dcc04115 	stw	r19,260(sp)
    5e2c:	dc804015 	stw	r18,256(sp)
    5e30:	dc403f15 	stw	r17,252(sp)
    5e34:	dc003e15 	stw	r16,248(sp)
    5e38:	000a45c0 	call	a45c <_localeconv_r>
    5e3c:	10800017 	ldw	r2,0(r2)
    5e40:	1009883a 	mov	r4,r2
    5e44:	d8803415 	stw	r2,208(sp)
    5e48:	0005d640 	call	5d64 <strlen>
    5e4c:	d8803715 	stw	r2,220(sp)
    5e50:	d8802d17 	ldw	r2,180(sp)
    5e54:	10000226 	beq	r2,zero,5e60 <___vfprintf_internal_r+0x64>
    5e58:	10800e17 	ldw	r2,56(r2)
    5e5c:	1000fb26 	beq	r2,zero,624c <___vfprintf_internal_r+0x450>
    5e60:	b880030b 	ldhu	r2,12(r23)
    5e64:	10c8000c 	andi	r3,r2,8192
    5e68:	1800061e 	bne	r3,zero,5e84 <___vfprintf_internal_r+0x88>
    5e6c:	b9001917 	ldw	r4,100(r23)
    5e70:	00f7ffc4 	movi	r3,-8193
    5e74:	10880014 	ori	r2,r2,8192
    5e78:	20c6703a 	and	r3,r4,r3
    5e7c:	b880030d 	sth	r2,12(r23)
    5e80:	b8c01915 	stw	r3,100(r23)
    5e84:	10c0020c 	andi	r3,r2,8
    5e88:	1800c326 	beq	r3,zero,6198 <___vfprintf_internal_r+0x39c>
    5e8c:	b8c00417 	ldw	r3,16(r23)
    5e90:	1800c126 	beq	r3,zero,6198 <___vfprintf_internal_r+0x39c>
    5e94:	1080068c 	andi	r2,r2,26
    5e98:	00c00284 	movi	r3,10
    5e9c:	10c0c626 	beq	r2,r3,61b8 <___vfprintf_internal_r+0x3bc>
    5ea0:	d8c00404 	addi	r3,sp,16
    5ea4:	05000074 	movhi	r20,1
    5ea8:	d9001e04 	addi	r4,sp,120
    5eac:	a5049d84 	addi	r20,r20,4726
    5eb0:	d8c01e15 	stw	r3,120(sp)
    5eb4:	d8002015 	stw	zero,128(sp)
    5eb8:	d8001f15 	stw	zero,124(sp)
    5ebc:	d8003315 	stw	zero,204(sp)
    5ec0:	d8003615 	stw	zero,216(sp)
    5ec4:	d8003815 	stw	zero,224(sp)
    5ec8:	1811883a 	mov	r8,r3
    5ecc:	d8003915 	stw	zero,228(sp)
    5ed0:	d8003a15 	stw	zero,232(sp)
    5ed4:	d8002f15 	stw	zero,188(sp)
    5ed8:	d9002815 	stw	r4,160(sp)
    5edc:	a8800007 	ldb	r2,0(r21)
    5ee0:	10028b26 	beq	r2,zero,6910 <___vfprintf_internal_r+0xb14>
    5ee4:	00c00944 	movi	r3,37
    5ee8:	a823883a 	mov	r17,r21
    5eec:	10c0021e 	bne	r2,r3,5ef8 <___vfprintf_internal_r+0xfc>
    5ef0:	00001406 	br	5f44 <___vfprintf_internal_r+0x148>
    5ef4:	10c00326 	beq	r2,r3,5f04 <___vfprintf_internal_r+0x108>
    5ef8:	8c400044 	addi	r17,r17,1
    5efc:	88800007 	ldb	r2,0(r17)
    5f00:	103ffc1e 	bne	r2,zero,5ef4 <__alt_data_end+0xfffe5ef4>
    5f04:	8d61c83a 	sub	r16,r17,r21
    5f08:	80000e26 	beq	r16,zero,5f44 <___vfprintf_internal_r+0x148>
    5f0c:	d8c02017 	ldw	r3,128(sp)
    5f10:	d8801f17 	ldw	r2,124(sp)
    5f14:	45400015 	stw	r21,0(r8)
    5f18:	1c07883a 	add	r3,r3,r16
    5f1c:	10800044 	addi	r2,r2,1
    5f20:	d8c02015 	stw	r3,128(sp)
    5f24:	44000115 	stw	r16,4(r8)
    5f28:	d8801f15 	stw	r2,124(sp)
    5f2c:	00c001c4 	movi	r3,7
    5f30:	1880a916 	blt	r3,r2,61d8 <___vfprintf_internal_r+0x3dc>
    5f34:	42000204 	addi	r8,r8,8
    5f38:	d9402f17 	ldw	r5,188(sp)
    5f3c:	2c0b883a 	add	r5,r5,r16
    5f40:	d9402f15 	stw	r5,188(sp)
    5f44:	88800007 	ldb	r2,0(r17)
    5f48:	1000aa26 	beq	r2,zero,61f4 <___vfprintf_internal_r+0x3f8>
    5f4c:	8d400044 	addi	r21,r17,1
    5f50:	8c400047 	ldb	r17,1(r17)
    5f54:	0021883a 	mov	r16,zero
    5f58:	00bfffc4 	movi	r2,-1
    5f5c:	0025883a 	mov	r18,zero
    5f60:	dc002905 	stb	r16,164(sp)
    5f64:	d8002785 	stb	zero,158(sp)
    5f68:	d8002b05 	stb	zero,172(sp)
    5f6c:	d8802a15 	stw	r2,168(sp)
    5f70:	d8003115 	stw	zero,196(sp)
    5f74:	04c01604 	movi	r19,88
    5f78:	05800244 	movi	r22,9
    5f7c:	9021883a 	mov	r16,r18
    5f80:	4039883a 	mov	fp,r8
    5f84:	ad400044 	addi	r21,r21,1
    5f88:	88bff804 	addi	r2,r17,-32
    5f8c:	98833236 	bltu	r19,r2,6c58 <___vfprintf_internal_r+0xe5c>
    5f90:	100490ba 	slli	r2,r2,2
    5f94:	00c00034 	movhi	r3,0
    5f98:	18d7ea04 	addi	r3,r3,24488
    5f9c:	10c5883a 	add	r2,r2,r3
    5fa0:	10800017 	ldw	r2,0(r2)
    5fa4:	1000683a 	jmp	r2
    5fa8:	00006b50 	cmplti	zero,zero,429
    5fac:	00006c58 	cmpnei	zero,zero,433
    5fb0:	00006c58 	cmpnei	zero,zero,433
    5fb4:	00006b70 	cmpltui	zero,zero,429
    5fb8:	00006c58 	cmpnei	zero,zero,433
    5fbc:	00006c58 	cmpnei	zero,zero,433
    5fc0:	00006c58 	cmpnei	zero,zero,433
    5fc4:	00006c58 	cmpnei	zero,zero,433
    5fc8:	00006c58 	cmpnei	zero,zero,433
    5fcc:	00006c58 	cmpnei	zero,zero,433
    5fd0:	00006258 	cmpnei	zero,zero,393
    5fd4:	00006a60 	cmpeqi	zero,zero,425
    5fd8:	00006c58 	cmpnei	zero,zero,433
    5fdc:	0000611c 	xori	zero,zero,388
    5fe0:	0000627c 	xorhi	zero,zero,393
    5fe4:	00006c58 	cmpnei	zero,zero,433
    5fe8:	000062cc 	andi	zero,zero,395
    5fec:	000062d8 	cmpnei	zero,zero,395
    5ff0:	000062d8 	cmpnei	zero,zero,395
    5ff4:	000062d8 	cmpnei	zero,zero,395
    5ff8:	000062d8 	cmpnei	zero,zero,395
    5ffc:	000062d8 	cmpnei	zero,zero,395
    6000:	000062d8 	cmpnei	zero,zero,395
    6004:	000062d8 	cmpnei	zero,zero,395
    6008:	000062d8 	cmpnei	zero,zero,395
    600c:	000062d8 	cmpnei	zero,zero,395
    6010:	00006c58 	cmpnei	zero,zero,433
    6014:	00006c58 	cmpnei	zero,zero,433
    6018:	00006c58 	cmpnei	zero,zero,433
    601c:	00006c58 	cmpnei	zero,zero,433
    6020:	00006c58 	cmpnei	zero,zero,433
    6024:	00006c58 	cmpnei	zero,zero,433
    6028:	00006c58 	cmpnei	zero,zero,433
    602c:	00006c58 	cmpnei	zero,zero,433
    6030:	00006c58 	cmpnei	zero,zero,433
    6034:	00006c58 	cmpnei	zero,zero,433
    6038:	00006314 	movui	zero,396
    603c:	000063dc 	xori	zero,zero,399
    6040:	00006c58 	cmpnei	zero,zero,433
    6044:	000063dc 	xori	zero,zero,399
    6048:	00006c58 	cmpnei	zero,zero,433
    604c:	00006c58 	cmpnei	zero,zero,433
    6050:	00006c58 	cmpnei	zero,zero,433
    6054:	00006c58 	cmpnei	zero,zero,433
    6058:	00006488 	cmpgei	zero,zero,402
    605c:	00006c58 	cmpnei	zero,zero,433
    6060:	00006c58 	cmpnei	zero,zero,433
    6064:	00006494 	movui	zero,402
    6068:	00006c58 	cmpnei	zero,zero,433
    606c:	00006c58 	cmpnei	zero,zero,433
    6070:	00006c58 	cmpnei	zero,zero,433
    6074:	00006c58 	cmpnei	zero,zero,433
    6078:	00006c58 	cmpnei	zero,zero,433
    607c:	00006918 	cmpnei	zero,zero,420
    6080:	00006c58 	cmpnei	zero,zero,433
    6084:	00006c58 	cmpnei	zero,zero,433
    6088:	00006984 	movi	zero,422
    608c:	00006c58 	cmpnei	zero,zero,433
    6090:	00006c58 	cmpnei	zero,zero,433
    6094:	00006c58 	cmpnei	zero,zero,433
    6098:	00006c58 	cmpnei	zero,zero,433
    609c:	00006c58 	cmpnei	zero,zero,433
    60a0:	00006c58 	cmpnei	zero,zero,433
    60a4:	00006c58 	cmpnei	zero,zero,433
    60a8:	00006c58 	cmpnei	zero,zero,433
    60ac:	00006c58 	cmpnei	zero,zero,433
    60b0:	00006c58 	cmpnei	zero,zero,433
    60b4:	00006bfc 	xorhi	zero,zero,431
    60b8:	00006b7c 	xorhi	zero,zero,429
    60bc:	000063dc 	xori	zero,zero,399
    60c0:	000063dc 	xori	zero,zero,399
    60c4:	000063dc 	xori	zero,zero,399
    60c8:	00006b9c 	xori	zero,zero,430
    60cc:	00006b7c 	xorhi	zero,zero,429
    60d0:	00006c58 	cmpnei	zero,zero,433
    60d4:	00006c58 	cmpnei	zero,zero,433
    60d8:	00006ba8 	cmpgeui	zero,zero,430
    60dc:	00006c58 	cmpnei	zero,zero,433
    60e0:	00006bbc 	xorhi	zero,zero,430
    60e4:	00006a40 	call	6a4 <calcCellOutput+0xf4>
    60e8:	00006128 	cmpgeui	zero,zero,388
    60ec:	00006a78 	rdprs	zero,zero,425
    60f0:	00006c58 	cmpnei	zero,zero,433
    60f4:	00006a84 	movi	zero,426
    60f8:	00006c58 	cmpnei	zero,zero,433
    60fc:	00006ae8 	cmpgeui	zero,zero,427
    6100:	00006c58 	cmpnei	zero,zero,433
    6104:	00006c58 	cmpnei	zero,zero,433
    6108:	00006b08 	cmpgei	zero,zero,428
    610c:	d8c03117 	ldw	r3,196(sp)
    6110:	d8802e15 	stw	r2,184(sp)
    6114:	00c7c83a 	sub	r3,zero,r3
    6118:	d8c03115 	stw	r3,196(sp)
    611c:	84000114 	ori	r16,r16,4
    6120:	ac400007 	ldb	r17,0(r21)
    6124:	003f9706 	br	5f84 <__alt_data_end+0xfffe5f84>
    6128:	00800c04 	movi	r2,48
    612c:	d8802705 	stb	r2,156(sp)
    6130:	00801e04 	movi	r2,120
    6134:	d8802745 	stb	r2,157(sp)
    6138:	d9002a17 	ldw	r4,168(sp)
    613c:	d8802e17 	ldw	r2,184(sp)
    6140:	d8002785 	stb	zero,158(sp)
    6144:	e011883a 	mov	r8,fp
    6148:	10c00104 	addi	r3,r2,4
    614c:	14c00017 	ldw	r19,0(r2)
    6150:	002d883a 	mov	r22,zero
    6154:	80800094 	ori	r2,r16,2
    6158:	2002ca16 	blt	r4,zero,6c84 <___vfprintf_internal_r+0xe88>
    615c:	00bfdfc4 	movi	r2,-129
    6160:	80a4703a 	and	r18,r16,r2
    6164:	d8c02e15 	stw	r3,184(sp)
    6168:	94800094 	ori	r18,r18,2
    616c:	9802b41e 	bne	r19,zero,6c40 <___vfprintf_internal_r+0xe44>
    6170:	01400074 	movhi	r5,1
    6174:	29449604 	addi	r5,r5,4696
    6178:	d9403915 	stw	r5,228(sp)
    617c:	04401e04 	movi	r17,120
    6180:	d8802a17 	ldw	r2,168(sp)
    6184:	0039883a 	mov	fp,zero
    6188:	1001fa26 	beq	r2,zero,6974 <___vfprintf_internal_r+0xb78>
    618c:	0027883a 	mov	r19,zero
    6190:	002d883a 	mov	r22,zero
    6194:	00021906 	br	69fc <___vfprintf_internal_r+0xc00>
    6198:	d9002d17 	ldw	r4,180(sp)
    619c:	b80b883a 	mov	r5,r23
    61a0:	00082100 	call	8210 <__swsetup_r>
    61a4:	1005dc1e 	bne	r2,zero,7918 <___vfprintf_internal_r+0x1b1c>
    61a8:	b880030b 	ldhu	r2,12(r23)
    61ac:	00c00284 	movi	r3,10
    61b0:	1080068c 	andi	r2,r2,26
    61b4:	10ff3a1e 	bne	r2,r3,5ea0 <__alt_data_end+0xfffe5ea0>
    61b8:	b880038f 	ldh	r2,14(r23)
    61bc:	103f3816 	blt	r2,zero,5ea0 <__alt_data_end+0xfffe5ea0>
    61c0:	d9c02e17 	ldw	r7,184(sp)
    61c4:	d9002d17 	ldw	r4,180(sp)
    61c8:	a80d883a 	mov	r6,r21
    61cc:	b80b883a 	mov	r5,r23
    61d0:	00080f40 	call	80f4 <__sbprintf>
    61d4:	00001106 	br	621c <___vfprintf_internal_r+0x420>
    61d8:	d9002d17 	ldw	r4,180(sp)
    61dc:	d9801e04 	addi	r6,sp,120
    61e0:	b80b883a 	mov	r5,r23
    61e4:	000bff40 	call	bff4 <__sprint_r>
    61e8:	1000081e 	bne	r2,zero,620c <___vfprintf_internal_r+0x410>
    61ec:	da000404 	addi	r8,sp,16
    61f0:	003f5106 	br	5f38 <__alt_data_end+0xfffe5f38>
    61f4:	d8802017 	ldw	r2,128(sp)
    61f8:	10000426 	beq	r2,zero,620c <___vfprintf_internal_r+0x410>
    61fc:	d9002d17 	ldw	r4,180(sp)
    6200:	d9801e04 	addi	r6,sp,120
    6204:	b80b883a 	mov	r5,r23
    6208:	000bff40 	call	bff4 <__sprint_r>
    620c:	b880030b 	ldhu	r2,12(r23)
    6210:	1080100c 	andi	r2,r2,64
    6214:	1005c01e 	bne	r2,zero,7918 <___vfprintf_internal_r+0x1b1c>
    6218:	d8802f17 	ldw	r2,188(sp)
    621c:	dfc04717 	ldw	ra,284(sp)
    6220:	df004617 	ldw	fp,280(sp)
    6224:	ddc04517 	ldw	r23,276(sp)
    6228:	dd804417 	ldw	r22,272(sp)
    622c:	dd404317 	ldw	r21,268(sp)
    6230:	dd004217 	ldw	r20,264(sp)
    6234:	dcc04117 	ldw	r19,260(sp)
    6238:	dc804017 	ldw	r18,256(sp)
    623c:	dc403f17 	ldw	r17,252(sp)
    6240:	dc003e17 	ldw	r16,248(sp)
    6244:	dec04804 	addi	sp,sp,288
    6248:	f800283a 	ret
    624c:	d9002d17 	ldw	r4,180(sp)
    6250:	0003da80 	call	3da8 <__sinit>
    6254:	003f0206 	br	5e60 <__alt_data_end+0xfffe5e60>
    6258:	d9002e17 	ldw	r4,184(sp)
    625c:	d9402e17 	ldw	r5,184(sp)
    6260:	21000017 	ldw	r4,0(r4)
    6264:	28800104 	addi	r2,r5,4
    6268:	d9003115 	stw	r4,196(sp)
    626c:	203fa716 	blt	r4,zero,610c <__alt_data_end+0xfffe610c>
    6270:	d8802e15 	stw	r2,184(sp)
    6274:	ac400007 	ldb	r17,0(r21)
    6278:	003f4206 	br	5f84 <__alt_data_end+0xfffe5f84>
    627c:	ac400007 	ldb	r17,0(r21)
    6280:	01000a84 	movi	r4,42
    6284:	a8c00044 	addi	r3,r21,1
    6288:	89075826 	beq	r17,r4,7fec <___vfprintf_internal_r+0x21f0>
    628c:	8cbff404 	addi	r18,r17,-48
    6290:	b486ae36 	bltu	r22,r18,7d4c <___vfprintf_internal_r+0x1f50>
    6294:	0009883a 	mov	r4,zero
    6298:	1823883a 	mov	r17,r3
    629c:	01400284 	movi	r5,10
    62a0:	0000e880 	call	e88 <__mulsi3>
    62a4:	88c00007 	ldb	r3,0(r17)
    62a8:	1489883a 	add	r4,r2,r18
    62ac:	8d400044 	addi	r21,r17,1
    62b0:	1cbff404 	addi	r18,r3,-48
    62b4:	a823883a 	mov	r17,r21
    62b8:	b4bff82e 	bgeu	r22,r18,629c <__alt_data_end+0xfffe629c>
    62bc:	1823883a 	mov	r17,r3
    62c0:	2005f616 	blt	r4,zero,7a9c <___vfprintf_internal_r+0x1ca0>
    62c4:	d9002a15 	stw	r4,168(sp)
    62c8:	003f2f06 	br	5f88 <__alt_data_end+0xfffe5f88>
    62cc:	84002014 	ori	r16,r16,128
    62d0:	ac400007 	ldb	r17,0(r21)
    62d4:	003f2b06 	br	5f84 <__alt_data_end+0xfffe5f84>
    62d8:	8cbff404 	addi	r18,r17,-48
    62dc:	d8003115 	stw	zero,196(sp)
    62e0:	0009883a 	mov	r4,zero
    62e4:	a823883a 	mov	r17,r21
    62e8:	01400284 	movi	r5,10
    62ec:	0000e880 	call	e88 <__mulsi3>
    62f0:	88c00007 	ldb	r3,0(r17)
    62f4:	9089883a 	add	r4,r18,r2
    62f8:	ad400044 	addi	r21,r21,1
    62fc:	1cbff404 	addi	r18,r3,-48
    6300:	a823883a 	mov	r17,r21
    6304:	b4bff82e 	bgeu	r22,r18,62e8 <__alt_data_end+0xfffe62e8>
    6308:	1823883a 	mov	r17,r3
    630c:	d9003115 	stw	r4,196(sp)
    6310:	003f1d06 	br	5f88 <__alt_data_end+0xfffe5f88>
    6314:	8025883a 	mov	r18,r16
    6318:	dc002903 	ldbu	r16,164(sp)
    631c:	e011883a 	mov	r8,fp
    6320:	84003fcc 	andi	r16,r16,255
    6324:	8007531e 	bne	r16,zero,8074 <___vfprintf_internal_r+0x2278>
    6328:	94800414 	ori	r18,r18,16
    632c:	9080080c 	andi	r2,r18,32
    6330:	1003a326 	beq	r2,zero,71c0 <___vfprintf_internal_r+0x13c4>
    6334:	d9002e17 	ldw	r4,184(sp)
    6338:	20800117 	ldw	r2,4(r4)
    633c:	24c00017 	ldw	r19,0(r4)
    6340:	21000204 	addi	r4,r4,8
    6344:	d9002e15 	stw	r4,184(sp)
    6348:	102d883a 	mov	r22,r2
    634c:	10047316 	blt	r2,zero,751c <___vfprintf_internal_r+0x1720>
    6350:	d9002a17 	ldw	r4,168(sp)
    6354:	df002783 	ldbu	fp,158(sp)
    6358:	2003e416 	blt	r4,zero,72ec <___vfprintf_internal_r+0x14f0>
    635c:	00ffdfc4 	movi	r3,-129
    6360:	9d84b03a 	or	r2,r19,r22
    6364:	90e4703a 	and	r18,r18,r3
    6368:	10018026 	beq	r2,zero,696c <___vfprintf_internal_r+0xb70>
    636c:	b003ab26 	beq	r22,zero,721c <___vfprintf_internal_r+0x1420>
    6370:	dc402915 	stw	r17,164(sp)
    6374:	dc001e04 	addi	r16,sp,120
    6378:	b023883a 	mov	r17,r22
    637c:	402d883a 	mov	r22,r8
    6380:	9809883a 	mov	r4,r19
    6384:	880b883a 	mov	r5,r17
    6388:	01800284 	movi	r6,10
    638c:	000f883a 	mov	r7,zero
    6390:	000e2100 	call	e210 <__umoddi3>
    6394:	10800c04 	addi	r2,r2,48
    6398:	843fffc4 	addi	r16,r16,-1
    639c:	9809883a 	mov	r4,r19
    63a0:	880b883a 	mov	r5,r17
    63a4:	80800005 	stb	r2,0(r16)
    63a8:	01800284 	movi	r6,10
    63ac:	000f883a 	mov	r7,zero
    63b0:	000dc140 	call	dc14 <__udivdi3>
    63b4:	1027883a 	mov	r19,r2
    63b8:	10c4b03a 	or	r2,r2,r3
    63bc:	1823883a 	mov	r17,r3
    63c0:	103fef1e 	bne	r2,zero,6380 <__alt_data_end+0xfffe6380>
    63c4:	d8c02817 	ldw	r3,160(sp)
    63c8:	dc402917 	ldw	r17,164(sp)
    63cc:	b011883a 	mov	r8,r22
    63d0:	1c07c83a 	sub	r3,r3,r16
    63d4:	d8c02b15 	stw	r3,172(sp)
    63d8:	00005f06 	br	6558 <___vfprintf_internal_r+0x75c>
    63dc:	8025883a 	mov	r18,r16
    63e0:	dc002903 	ldbu	r16,164(sp)
    63e4:	e011883a 	mov	r8,fp
    63e8:	84003fcc 	andi	r16,r16,255
    63ec:	80071e1e 	bne	r16,zero,8068 <___vfprintf_internal_r+0x226c>
    63f0:	9080020c 	andi	r2,r18,8
    63f4:	1004af26 	beq	r2,zero,76b4 <___vfprintf_internal_r+0x18b8>
    63f8:	d9002e17 	ldw	r4,184(sp)
    63fc:	d9402e17 	ldw	r5,184(sp)
    6400:	d8802e17 	ldw	r2,184(sp)
    6404:	21000017 	ldw	r4,0(r4)
    6408:	29400117 	ldw	r5,4(r5)
    640c:	10800204 	addi	r2,r2,8
    6410:	d9003615 	stw	r4,216(sp)
    6414:	d9403815 	stw	r5,224(sp)
    6418:	d8802e15 	stw	r2,184(sp)
    641c:	d9003617 	ldw	r4,216(sp)
    6420:	d9403817 	ldw	r5,224(sp)
    6424:	da003d15 	stw	r8,244(sp)
    6428:	04000044 	movi	r16,1
    642c:	000bda80 	call	bda8 <__fpclassifyd>
    6430:	da003d17 	ldw	r8,244(sp)
    6434:	1404441e 	bne	r2,r16,7548 <___vfprintf_internal_r+0x174c>
    6438:	d9003617 	ldw	r4,216(sp)
    643c:	d9403817 	ldw	r5,224(sp)
    6440:	000d883a 	mov	r6,zero
    6444:	000f883a 	mov	r7,zero
    6448:	000e85c0 	call	e85c <__ledf2>
    644c:	da003d17 	ldw	r8,244(sp)
    6450:	1005e316 	blt	r2,zero,7be0 <___vfprintf_internal_r+0x1de4>
    6454:	df002783 	ldbu	fp,158(sp)
    6458:	008011c4 	movi	r2,71
    645c:	1445580e 	bge	r2,r17,79c0 <___vfprintf_internal_r+0x1bc4>
    6460:	04000074 	movhi	r16,1
    6464:	84048e04 	addi	r16,r16,4664
    6468:	00c000c4 	movi	r3,3
    646c:	00bfdfc4 	movi	r2,-129
    6470:	d8c02915 	stw	r3,164(sp)
    6474:	90a4703a 	and	r18,r18,r2
    6478:	d8c02b15 	stw	r3,172(sp)
    647c:	d8002a15 	stw	zero,168(sp)
    6480:	d8003215 	stw	zero,200(sp)
    6484:	00003a06 	br	6570 <___vfprintf_internal_r+0x774>
    6488:	84000214 	ori	r16,r16,8
    648c:	ac400007 	ldb	r17,0(r21)
    6490:	003ebc06 	br	5f84 <__alt_data_end+0xfffe5f84>
    6494:	8025883a 	mov	r18,r16
    6498:	dc002903 	ldbu	r16,164(sp)
    649c:	e011883a 	mov	r8,fp
    64a0:	84003fcc 	andi	r16,r16,255
    64a4:	8007001e 	bne	r16,zero,80a8 <___vfprintf_internal_r+0x22ac>
    64a8:	94800414 	ori	r18,r18,16
    64ac:	9080080c 	andi	r2,r18,32
    64b0:	1002fa26 	beq	r2,zero,709c <___vfprintf_internal_r+0x12a0>
    64b4:	d9002e17 	ldw	r4,184(sp)
    64b8:	d9402a17 	ldw	r5,168(sp)
    64bc:	d8002785 	stb	zero,158(sp)
    64c0:	20800204 	addi	r2,r4,8
    64c4:	24c00017 	ldw	r19,0(r4)
    64c8:	25800117 	ldw	r22,4(r4)
    64cc:	2804b116 	blt	r5,zero,7794 <___vfprintf_internal_r+0x1998>
    64d0:	013fdfc4 	movi	r4,-129
    64d4:	9d86b03a 	or	r3,r19,r22
    64d8:	d8802e15 	stw	r2,184(sp)
    64dc:	9124703a 	and	r18,r18,r4
    64e0:	1802fb1e 	bne	r3,zero,70d0 <___vfprintf_internal_r+0x12d4>
    64e4:	d8c02a17 	ldw	r3,168(sp)
    64e8:	0039883a 	mov	fp,zero
    64ec:	1805e526 	beq	r3,zero,7c84 <___vfprintf_internal_r+0x1e88>
    64f0:	0027883a 	mov	r19,zero
    64f4:	002d883a 	mov	r22,zero
    64f8:	dc001e04 	addi	r16,sp,120
    64fc:	9806d0fa 	srli	r3,r19,3
    6500:	b008977a 	slli	r4,r22,29
    6504:	b02cd0fa 	srli	r22,r22,3
    6508:	9cc001cc 	andi	r19,r19,7
    650c:	98800c04 	addi	r2,r19,48
    6510:	843fffc4 	addi	r16,r16,-1
    6514:	20e6b03a 	or	r19,r4,r3
    6518:	80800005 	stb	r2,0(r16)
    651c:	9d86b03a 	or	r3,r19,r22
    6520:	183ff61e 	bne	r3,zero,64fc <__alt_data_end+0xfffe64fc>
    6524:	90c0004c 	andi	r3,r18,1
    6528:	18014126 	beq	r3,zero,6a30 <___vfprintf_internal_r+0xc34>
    652c:	10803fcc 	andi	r2,r2,255
    6530:	1080201c 	xori	r2,r2,128
    6534:	10bfe004 	addi	r2,r2,-128
    6538:	00c00c04 	movi	r3,48
    653c:	10c13c26 	beq	r2,r3,6a30 <___vfprintf_internal_r+0xc34>
    6540:	80ffffc5 	stb	r3,-1(r16)
    6544:	d8c02817 	ldw	r3,160(sp)
    6548:	80bfffc4 	addi	r2,r16,-1
    654c:	1021883a 	mov	r16,r2
    6550:	1887c83a 	sub	r3,r3,r2
    6554:	d8c02b15 	stw	r3,172(sp)
    6558:	d8802b17 	ldw	r2,172(sp)
    655c:	d9002a17 	ldw	r4,168(sp)
    6560:	1100010e 	bge	r2,r4,6568 <___vfprintf_internal_r+0x76c>
    6564:	2005883a 	mov	r2,r4
    6568:	d8802915 	stw	r2,164(sp)
    656c:	d8003215 	stw	zero,200(sp)
    6570:	e7003fcc 	andi	fp,fp,255
    6574:	e700201c 	xori	fp,fp,128
    6578:	e73fe004 	addi	fp,fp,-128
    657c:	e0000326 	beq	fp,zero,658c <___vfprintf_internal_r+0x790>
    6580:	d8c02917 	ldw	r3,164(sp)
    6584:	18c00044 	addi	r3,r3,1
    6588:	d8c02915 	stw	r3,164(sp)
    658c:	90c0008c 	andi	r3,r18,2
    6590:	d8c02c15 	stw	r3,176(sp)
    6594:	18000326 	beq	r3,zero,65a4 <___vfprintf_internal_r+0x7a8>
    6598:	d8c02917 	ldw	r3,164(sp)
    659c:	18c00084 	addi	r3,r3,2
    65a0:	d8c02915 	stw	r3,164(sp)
    65a4:	90c0210c 	andi	r3,r18,132
    65a8:	d8c03015 	stw	r3,192(sp)
    65ac:	1801c51e 	bne	r3,zero,6cc4 <___vfprintf_internal_r+0xec8>
    65b0:	d9003117 	ldw	r4,196(sp)
    65b4:	d8c02917 	ldw	r3,164(sp)
    65b8:	20e7c83a 	sub	r19,r4,r3
    65bc:	04c1c10e 	bge	zero,r19,6cc4 <___vfprintf_internal_r+0xec8>
    65c0:	02400404 	movi	r9,16
    65c4:	d8c02017 	ldw	r3,128(sp)
    65c8:	d8801f17 	ldw	r2,124(sp)
    65cc:	4cc52f0e 	bge	r9,r19,7a8c <___vfprintf_internal_r+0x1c90>
    65d0:	01400074 	movhi	r5,1
    65d4:	2944a184 	addi	r5,r5,4742
    65d8:	dc403b15 	stw	r17,236(sp)
    65dc:	d9403515 	stw	r5,212(sp)
    65e0:	9823883a 	mov	r17,r19
    65e4:	482d883a 	mov	r22,r9
    65e8:	9027883a 	mov	r19,r18
    65ec:	070001c4 	movi	fp,7
    65f0:	8025883a 	mov	r18,r16
    65f4:	dc002d17 	ldw	r16,180(sp)
    65f8:	00000306 	br	6608 <___vfprintf_internal_r+0x80c>
    65fc:	8c7ffc04 	addi	r17,r17,-16
    6600:	42000204 	addi	r8,r8,8
    6604:	b440130e 	bge	r22,r17,6654 <___vfprintf_internal_r+0x858>
    6608:	01000074 	movhi	r4,1
    660c:	18c00404 	addi	r3,r3,16
    6610:	10800044 	addi	r2,r2,1
    6614:	2104a184 	addi	r4,r4,4742
    6618:	41000015 	stw	r4,0(r8)
    661c:	45800115 	stw	r22,4(r8)
    6620:	d8c02015 	stw	r3,128(sp)
    6624:	d8801f15 	stw	r2,124(sp)
    6628:	e0bff40e 	bge	fp,r2,65fc <__alt_data_end+0xfffe65fc>
    662c:	d9801e04 	addi	r6,sp,120
    6630:	b80b883a 	mov	r5,r23
    6634:	8009883a 	mov	r4,r16
    6638:	000bff40 	call	bff4 <__sprint_r>
    663c:	103ef31e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    6640:	8c7ffc04 	addi	r17,r17,-16
    6644:	d8c02017 	ldw	r3,128(sp)
    6648:	d8801f17 	ldw	r2,124(sp)
    664c:	da000404 	addi	r8,sp,16
    6650:	b47fed16 	blt	r22,r17,6608 <__alt_data_end+0xfffe6608>
    6654:	9021883a 	mov	r16,r18
    6658:	9825883a 	mov	r18,r19
    665c:	8827883a 	mov	r19,r17
    6660:	dc403b17 	ldw	r17,236(sp)
    6664:	d9403517 	ldw	r5,212(sp)
    6668:	98c7883a 	add	r3,r19,r3
    666c:	10800044 	addi	r2,r2,1
    6670:	41400015 	stw	r5,0(r8)
    6674:	44c00115 	stw	r19,4(r8)
    6678:	d8c02015 	stw	r3,128(sp)
    667c:	d8801f15 	stw	r2,124(sp)
    6680:	010001c4 	movi	r4,7
    6684:	2082c516 	blt	r4,r2,719c <___vfprintf_internal_r+0x13a0>
    6688:	df002787 	ldb	fp,158(sp)
    668c:	42000204 	addi	r8,r8,8
    6690:	e0000c26 	beq	fp,zero,66c4 <___vfprintf_internal_r+0x8c8>
    6694:	d8801f17 	ldw	r2,124(sp)
    6698:	d9002784 	addi	r4,sp,158
    669c:	18c00044 	addi	r3,r3,1
    66a0:	10800044 	addi	r2,r2,1
    66a4:	41000015 	stw	r4,0(r8)
    66a8:	01000044 	movi	r4,1
    66ac:	41000115 	stw	r4,4(r8)
    66b0:	d8c02015 	stw	r3,128(sp)
    66b4:	d8801f15 	stw	r2,124(sp)
    66b8:	010001c4 	movi	r4,7
    66bc:	20825e16 	blt	r4,r2,7038 <___vfprintf_internal_r+0x123c>
    66c0:	42000204 	addi	r8,r8,8
    66c4:	d8802c17 	ldw	r2,176(sp)
    66c8:	10000c26 	beq	r2,zero,66fc <___vfprintf_internal_r+0x900>
    66cc:	d8801f17 	ldw	r2,124(sp)
    66d0:	d9002704 	addi	r4,sp,156
    66d4:	18c00084 	addi	r3,r3,2
    66d8:	10800044 	addi	r2,r2,1
    66dc:	41000015 	stw	r4,0(r8)
    66e0:	01000084 	movi	r4,2
    66e4:	41000115 	stw	r4,4(r8)
    66e8:	d8c02015 	stw	r3,128(sp)
    66ec:	d8801f15 	stw	r2,124(sp)
    66f0:	010001c4 	movi	r4,7
    66f4:	20825816 	blt	r4,r2,7058 <___vfprintf_internal_r+0x125c>
    66f8:	42000204 	addi	r8,r8,8
    66fc:	d9003017 	ldw	r4,192(sp)
    6700:	00802004 	movi	r2,128
    6704:	2081bb26 	beq	r4,r2,6df4 <___vfprintf_internal_r+0xff8>
    6708:	d9402a17 	ldw	r5,168(sp)
    670c:	d8802b17 	ldw	r2,172(sp)
    6710:	28adc83a 	sub	r22,r5,r2
    6714:	0580310e 	bge	zero,r22,67dc <___vfprintf_internal_r+0x9e0>
    6718:	07000404 	movi	fp,16
    671c:	d8801f17 	ldw	r2,124(sp)
    6720:	e584360e 	bge	fp,r22,77fc <___vfprintf_internal_r+0x1a00>
    6724:	01400074 	movhi	r5,1
    6728:	29449d84 	addi	r5,r5,4726
    672c:	dc402a15 	stw	r17,168(sp)
    6730:	d9402c15 	stw	r5,176(sp)
    6734:	b023883a 	mov	r17,r22
    6738:	04c001c4 	movi	r19,7
    673c:	a82d883a 	mov	r22,r21
    6740:	902b883a 	mov	r21,r18
    6744:	8025883a 	mov	r18,r16
    6748:	dc002d17 	ldw	r16,180(sp)
    674c:	00000306 	br	675c <___vfprintf_internal_r+0x960>
    6750:	8c7ffc04 	addi	r17,r17,-16
    6754:	42000204 	addi	r8,r8,8
    6758:	e440110e 	bge	fp,r17,67a0 <___vfprintf_internal_r+0x9a4>
    675c:	18c00404 	addi	r3,r3,16
    6760:	10800044 	addi	r2,r2,1
    6764:	45000015 	stw	r20,0(r8)
    6768:	47000115 	stw	fp,4(r8)
    676c:	d8c02015 	stw	r3,128(sp)
    6770:	d8801f15 	stw	r2,124(sp)
    6774:	98bff60e 	bge	r19,r2,6750 <__alt_data_end+0xfffe6750>
    6778:	d9801e04 	addi	r6,sp,120
    677c:	b80b883a 	mov	r5,r23
    6780:	8009883a 	mov	r4,r16
    6784:	000bff40 	call	bff4 <__sprint_r>
    6788:	103ea01e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    678c:	8c7ffc04 	addi	r17,r17,-16
    6790:	d8c02017 	ldw	r3,128(sp)
    6794:	d8801f17 	ldw	r2,124(sp)
    6798:	da000404 	addi	r8,sp,16
    679c:	e47fef16 	blt	fp,r17,675c <__alt_data_end+0xfffe675c>
    67a0:	9021883a 	mov	r16,r18
    67a4:	a825883a 	mov	r18,r21
    67a8:	b02b883a 	mov	r21,r22
    67ac:	882d883a 	mov	r22,r17
    67b0:	dc402a17 	ldw	r17,168(sp)
    67b4:	d9002c17 	ldw	r4,176(sp)
    67b8:	1d87883a 	add	r3,r3,r22
    67bc:	10800044 	addi	r2,r2,1
    67c0:	41000015 	stw	r4,0(r8)
    67c4:	45800115 	stw	r22,4(r8)
    67c8:	d8c02015 	stw	r3,128(sp)
    67cc:	d8801f15 	stw	r2,124(sp)
    67d0:	010001c4 	movi	r4,7
    67d4:	20821016 	blt	r4,r2,7018 <___vfprintf_internal_r+0x121c>
    67d8:	42000204 	addi	r8,r8,8
    67dc:	9080400c 	andi	r2,r18,256
    67e0:	10013a1e 	bne	r2,zero,6ccc <___vfprintf_internal_r+0xed0>
    67e4:	d9402b17 	ldw	r5,172(sp)
    67e8:	d8801f17 	ldw	r2,124(sp)
    67ec:	44000015 	stw	r16,0(r8)
    67f0:	1947883a 	add	r3,r3,r5
    67f4:	10800044 	addi	r2,r2,1
    67f8:	41400115 	stw	r5,4(r8)
    67fc:	d8c02015 	stw	r3,128(sp)
    6800:	d8801f15 	stw	r2,124(sp)
    6804:	010001c4 	movi	r4,7
    6808:	2081f516 	blt	r4,r2,6fe0 <___vfprintf_internal_r+0x11e4>
    680c:	42000204 	addi	r8,r8,8
    6810:	9480010c 	andi	r18,r18,4
    6814:	90003226 	beq	r18,zero,68e0 <___vfprintf_internal_r+0xae4>
    6818:	d9403117 	ldw	r5,196(sp)
    681c:	d8802917 	ldw	r2,164(sp)
    6820:	28a1c83a 	sub	r16,r5,r2
    6824:	04002e0e 	bge	zero,r16,68e0 <___vfprintf_internal_r+0xae4>
    6828:	04400404 	movi	r17,16
    682c:	d8801f17 	ldw	r2,124(sp)
    6830:	8c04c40e 	bge	r17,r16,7b44 <___vfprintf_internal_r+0x1d48>
    6834:	01400074 	movhi	r5,1
    6838:	2944a184 	addi	r5,r5,4742
    683c:	d9403515 	stw	r5,212(sp)
    6840:	048001c4 	movi	r18,7
    6844:	dcc02d17 	ldw	r19,180(sp)
    6848:	00000306 	br	6858 <___vfprintf_internal_r+0xa5c>
    684c:	843ffc04 	addi	r16,r16,-16
    6850:	42000204 	addi	r8,r8,8
    6854:	8c00130e 	bge	r17,r16,68a4 <___vfprintf_internal_r+0xaa8>
    6858:	01000074 	movhi	r4,1
    685c:	18c00404 	addi	r3,r3,16
    6860:	10800044 	addi	r2,r2,1
    6864:	2104a184 	addi	r4,r4,4742
    6868:	41000015 	stw	r4,0(r8)
    686c:	44400115 	stw	r17,4(r8)
    6870:	d8c02015 	stw	r3,128(sp)
    6874:	d8801f15 	stw	r2,124(sp)
    6878:	90bff40e 	bge	r18,r2,684c <__alt_data_end+0xfffe684c>
    687c:	d9801e04 	addi	r6,sp,120
    6880:	b80b883a 	mov	r5,r23
    6884:	9809883a 	mov	r4,r19
    6888:	000bff40 	call	bff4 <__sprint_r>
    688c:	103e5f1e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    6890:	843ffc04 	addi	r16,r16,-16
    6894:	d8c02017 	ldw	r3,128(sp)
    6898:	d8801f17 	ldw	r2,124(sp)
    689c:	da000404 	addi	r8,sp,16
    68a0:	8c3fed16 	blt	r17,r16,6858 <__alt_data_end+0xfffe6858>
    68a4:	d9403517 	ldw	r5,212(sp)
    68a8:	1c07883a 	add	r3,r3,r16
    68ac:	10800044 	addi	r2,r2,1
    68b0:	41400015 	stw	r5,0(r8)
    68b4:	44000115 	stw	r16,4(r8)
    68b8:	d8c02015 	stw	r3,128(sp)
    68bc:	d8801f15 	stw	r2,124(sp)
    68c0:	010001c4 	movi	r4,7
    68c4:	2080060e 	bge	r4,r2,68e0 <___vfprintf_internal_r+0xae4>
    68c8:	d9002d17 	ldw	r4,180(sp)
    68cc:	d9801e04 	addi	r6,sp,120
    68d0:	b80b883a 	mov	r5,r23
    68d4:	000bff40 	call	bff4 <__sprint_r>
    68d8:	103e4c1e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    68dc:	d8c02017 	ldw	r3,128(sp)
    68e0:	d8803117 	ldw	r2,196(sp)
    68e4:	d9002917 	ldw	r4,164(sp)
    68e8:	1100010e 	bge	r2,r4,68f0 <___vfprintf_internal_r+0xaf4>
    68ec:	2005883a 	mov	r2,r4
    68f0:	d9402f17 	ldw	r5,188(sp)
    68f4:	288b883a 	add	r5,r5,r2
    68f8:	d9402f15 	stw	r5,188(sp)
    68fc:	1801c01e 	bne	r3,zero,7000 <___vfprintf_internal_r+0x1204>
    6900:	a8800007 	ldb	r2,0(r21)
    6904:	d8001f15 	stw	zero,124(sp)
    6908:	da000404 	addi	r8,sp,16
    690c:	103d751e 	bne	r2,zero,5ee4 <__alt_data_end+0xfffe5ee4>
    6910:	a823883a 	mov	r17,r21
    6914:	003d8b06 	br	5f44 <__alt_data_end+0xfffe5f44>
    6918:	8025883a 	mov	r18,r16
    691c:	dc002903 	ldbu	r16,164(sp)
    6920:	e011883a 	mov	r8,fp
    6924:	84003fcc 	andi	r16,r16,255
    6928:	8005e51e 	bne	r16,zero,80c0 <___vfprintf_internal_r+0x22c4>
    692c:	94800414 	ori	r18,r18,16
    6930:	9080080c 	andi	r2,r18,32
    6934:	10022b26 	beq	r2,zero,71e4 <___vfprintf_internal_r+0x13e8>
    6938:	d9002e17 	ldw	r4,184(sp)
    693c:	d9402a17 	ldw	r5,168(sp)
    6940:	d8002785 	stb	zero,158(sp)
    6944:	20c00204 	addi	r3,r4,8
    6948:	24c00017 	ldw	r19,0(r4)
    694c:	25800117 	ldw	r22,4(r4)
    6950:	28042e16 	blt	r5,zero,7a0c <___vfprintf_internal_r+0x1c10>
    6954:	013fdfc4 	movi	r4,-129
    6958:	9d84b03a 	or	r2,r19,r22
    695c:	d8c02e15 	stw	r3,184(sp)
    6960:	9124703a 	and	r18,r18,r4
    6964:	0039883a 	mov	fp,zero
    6968:	103e801e 	bne	r2,zero,636c <__alt_data_end+0xfffe636c>
    696c:	d9002a17 	ldw	r4,168(sp)
    6970:	2002e01e 	bne	r4,zero,74f4 <___vfprintf_internal_r+0x16f8>
    6974:	d8002a15 	stw	zero,168(sp)
    6978:	d8002b15 	stw	zero,172(sp)
    697c:	dc001e04 	addi	r16,sp,120
    6980:	003ef506 	br	6558 <__alt_data_end+0xfffe6558>
    6984:	8025883a 	mov	r18,r16
    6988:	dc002903 	ldbu	r16,164(sp)
    698c:	e011883a 	mov	r8,fp
    6990:	84003fcc 	andi	r16,r16,255
    6994:	8005ba1e 	bne	r16,zero,8080 <___vfprintf_internal_r+0x2284>
    6998:	01000074 	movhi	r4,1
    699c:	21049104 	addi	r4,r4,4676
    69a0:	d9003915 	stw	r4,228(sp)
    69a4:	9080080c 	andi	r2,r18,32
    69a8:	10006126 	beq	r2,zero,6b30 <___vfprintf_internal_r+0xd34>
    69ac:	d9402e17 	ldw	r5,184(sp)
    69b0:	2cc00017 	ldw	r19,0(r5)
    69b4:	2d800117 	ldw	r22,4(r5)
    69b8:	29400204 	addi	r5,r5,8
    69bc:	d9402e15 	stw	r5,184(sp)
    69c0:	9080004c 	andi	r2,r18,1
    69c4:	1001ac26 	beq	r2,zero,7078 <___vfprintf_internal_r+0x127c>
    69c8:	9d84b03a 	or	r2,r19,r22
    69cc:	10038526 	beq	r2,zero,77e4 <___vfprintf_internal_r+0x19e8>
    69d0:	d8c02a17 	ldw	r3,168(sp)
    69d4:	00800c04 	movi	r2,48
    69d8:	d8802705 	stb	r2,156(sp)
    69dc:	dc402745 	stb	r17,157(sp)
    69e0:	d8002785 	stb	zero,158(sp)
    69e4:	90800094 	ori	r2,r18,2
    69e8:	18047916 	blt	r3,zero,7bd0 <___vfprintf_internal_r+0x1dd4>
    69ec:	00bfdfc4 	movi	r2,-129
    69f0:	90a4703a 	and	r18,r18,r2
    69f4:	94800094 	ori	r18,r18,2
    69f8:	0039883a 	mov	fp,zero
    69fc:	d9003917 	ldw	r4,228(sp)
    6a00:	dc001e04 	addi	r16,sp,120
    6a04:	988003cc 	andi	r2,r19,15
    6a08:	b006973a 	slli	r3,r22,28
    6a0c:	2085883a 	add	r2,r4,r2
    6a10:	9826d13a 	srli	r19,r19,4
    6a14:	10800003 	ldbu	r2,0(r2)
    6a18:	b02cd13a 	srli	r22,r22,4
    6a1c:	843fffc4 	addi	r16,r16,-1
    6a20:	1ce6b03a 	or	r19,r3,r19
    6a24:	80800005 	stb	r2,0(r16)
    6a28:	9d84b03a 	or	r2,r19,r22
    6a2c:	103ff51e 	bne	r2,zero,6a04 <__alt_data_end+0xfffe6a04>
    6a30:	d8c02817 	ldw	r3,160(sp)
    6a34:	1c07c83a 	sub	r3,r3,r16
    6a38:	d8c02b15 	stw	r3,172(sp)
    6a3c:	003ec606 	br	6558 <__alt_data_end+0xfffe6558>
    6a40:	8025883a 	mov	r18,r16
    6a44:	dc002903 	ldbu	r16,164(sp)
    6a48:	e011883a 	mov	r8,fp
    6a4c:	84003fcc 	andi	r16,r16,255
    6a50:	803e9626 	beq	r16,zero,64ac <__alt_data_end+0xfffe64ac>
    6a54:	d8c02b03 	ldbu	r3,172(sp)
    6a58:	d8c02785 	stb	r3,158(sp)
    6a5c:	003e9306 	br	64ac <__alt_data_end+0xfffe64ac>
    6a60:	00c00044 	movi	r3,1
    6a64:	d8c02905 	stb	r3,164(sp)
    6a68:	00c00ac4 	movi	r3,43
    6a6c:	d8c02b05 	stb	r3,172(sp)
    6a70:	ac400007 	ldb	r17,0(r21)
    6a74:	003d4306 	br	5f84 <__alt_data_end+0xfffe5f84>
    6a78:	84000814 	ori	r16,r16,32
    6a7c:	ac400007 	ldb	r17,0(r21)
    6a80:	003d4006 	br	5f84 <__alt_data_end+0xfffe5f84>
    6a84:	d8802e17 	ldw	r2,184(sp)
    6a88:	8025883a 	mov	r18,r16
    6a8c:	d8002785 	stb	zero,158(sp)
    6a90:	14000017 	ldw	r16,0(r2)
    6a94:	e011883a 	mov	r8,fp
    6a98:	14c00104 	addi	r19,r2,4
    6a9c:	80042d26 	beq	r16,zero,7b54 <___vfprintf_internal_r+0x1d58>
    6aa0:	d8c02a17 	ldw	r3,168(sp)
    6aa4:	1803e416 	blt	r3,zero,7a38 <___vfprintf_internal_r+0x1c3c>
    6aa8:	180d883a 	mov	r6,r3
    6aac:	000b883a 	mov	r5,zero
    6ab0:	8009883a 	mov	r4,r16
    6ab4:	df003d15 	stw	fp,244(sp)
    6ab8:	000a4ec0 	call	a4ec <memchr>
    6abc:	da003d17 	ldw	r8,244(sp)
    6ac0:	10046826 	beq	r2,zero,7c64 <___vfprintf_internal_r+0x1e68>
    6ac4:	1405c83a 	sub	r2,r2,r16
    6ac8:	d8802b15 	stw	r2,172(sp)
    6acc:	1003e016 	blt	r2,zero,7a50 <___vfprintf_internal_r+0x1c54>
    6ad0:	df002783 	ldbu	fp,158(sp)
    6ad4:	d8802915 	stw	r2,164(sp)
    6ad8:	dcc02e15 	stw	r19,184(sp)
    6adc:	d8002a15 	stw	zero,168(sp)
    6ae0:	d8003215 	stw	zero,200(sp)
    6ae4:	003ea206 	br	6570 <__alt_data_end+0xfffe6570>
    6ae8:	8025883a 	mov	r18,r16
    6aec:	dc002903 	ldbu	r16,164(sp)
    6af0:	e011883a 	mov	r8,fp
    6af4:	84003fcc 	andi	r16,r16,255
    6af8:	803f8d26 	beq	r16,zero,6930 <__alt_data_end+0xfffe6930>
    6afc:	d8c02b03 	ldbu	r3,172(sp)
    6b00:	d8c02785 	stb	r3,158(sp)
    6b04:	003f8a06 	br	6930 <__alt_data_end+0xfffe6930>
    6b08:	8025883a 	mov	r18,r16
    6b0c:	dc002903 	ldbu	r16,164(sp)
    6b10:	e011883a 	mov	r8,fp
    6b14:	84003fcc 	andi	r16,r16,255
    6b18:	8005661e 	bne	r16,zero,80b4 <___vfprintf_internal_r+0x22b8>
    6b1c:	01000074 	movhi	r4,1
    6b20:	21049604 	addi	r4,r4,4696
    6b24:	d9003915 	stw	r4,228(sp)
    6b28:	9080080c 	andi	r2,r18,32
    6b2c:	103f9f1e 	bne	r2,zero,69ac <__alt_data_end+0xfffe69ac>
    6b30:	9080040c 	andi	r2,r18,16
    6b34:	1002eb26 	beq	r2,zero,76e4 <___vfprintf_internal_r+0x18e8>
    6b38:	d8802e17 	ldw	r2,184(sp)
    6b3c:	002d883a 	mov	r22,zero
    6b40:	14c00017 	ldw	r19,0(r2)
    6b44:	10800104 	addi	r2,r2,4
    6b48:	d8802e15 	stw	r2,184(sp)
    6b4c:	003f9c06 	br	69c0 <__alt_data_end+0xfffe69c0>
    6b50:	d8802b07 	ldb	r2,172(sp)
    6b54:	1002e11e 	bne	r2,zero,76dc <___vfprintf_internal_r+0x18e0>
    6b58:	00c00044 	movi	r3,1
    6b5c:	d8c02905 	stb	r3,164(sp)
    6b60:	00c00804 	movi	r3,32
    6b64:	d8c02b05 	stb	r3,172(sp)
    6b68:	ac400007 	ldb	r17,0(r21)
    6b6c:	003d0506 	br	5f84 <__alt_data_end+0xfffe5f84>
    6b70:	84000054 	ori	r16,r16,1
    6b74:	ac400007 	ldb	r17,0(r21)
    6b78:	003d0206 	br	5f84 <__alt_data_end+0xfffe5f84>
    6b7c:	8025883a 	mov	r18,r16
    6b80:	dc002903 	ldbu	r16,164(sp)
    6b84:	e011883a 	mov	r8,fp
    6b88:	84003fcc 	andi	r16,r16,255
    6b8c:	803de726 	beq	r16,zero,632c <__alt_data_end+0xfffe632c>
    6b90:	d8c02b03 	ldbu	r3,172(sp)
    6b94:	d8c02785 	stb	r3,158(sp)
    6b98:	003de406 	br	632c <__alt_data_end+0xfffe632c>
    6b9c:	84001014 	ori	r16,r16,64
    6ba0:	ac400007 	ldb	r17,0(r21)
    6ba4:	003cf706 	br	5f84 <__alt_data_end+0xfffe5f84>
    6ba8:	ac400007 	ldb	r17,0(r21)
    6bac:	00801b04 	movi	r2,108
    6bb0:	88838f26 	beq	r17,r2,79f0 <___vfprintf_internal_r+0x1bf4>
    6bb4:	84000414 	ori	r16,r16,16
    6bb8:	003cf206 	br	5f84 <__alt_data_end+0xfffe5f84>
    6bbc:	8025883a 	mov	r18,r16
    6bc0:	dc002903 	ldbu	r16,164(sp)
    6bc4:	e011883a 	mov	r8,fp
    6bc8:	84003fcc 	andi	r16,r16,255
    6bcc:	80053f1e 	bne	r16,zero,80cc <___vfprintf_internal_r+0x22d0>
    6bd0:	9080080c 	andi	r2,r18,32
    6bd4:	1002d226 	beq	r2,zero,7720 <___vfprintf_internal_r+0x1924>
    6bd8:	d9002e17 	ldw	r4,184(sp)
    6bdc:	d9402f17 	ldw	r5,188(sp)
    6be0:	20800017 	ldw	r2,0(r4)
    6be4:	2807d7fa 	srai	r3,r5,31
    6be8:	21000104 	addi	r4,r4,4
    6bec:	d9002e15 	stw	r4,184(sp)
    6bf0:	11400015 	stw	r5,0(r2)
    6bf4:	10c00115 	stw	r3,4(r2)
    6bf8:	003cb806 	br	5edc <__alt_data_end+0xfffe5edc>
    6bfc:	d8c02e17 	ldw	r3,184(sp)
    6c00:	d9002e17 	ldw	r4,184(sp)
    6c04:	8025883a 	mov	r18,r16
    6c08:	18800017 	ldw	r2,0(r3)
    6c0c:	21000104 	addi	r4,r4,4
    6c10:	00c00044 	movi	r3,1
    6c14:	e011883a 	mov	r8,fp
    6c18:	d8c02915 	stw	r3,164(sp)
    6c1c:	d8002785 	stb	zero,158(sp)
    6c20:	d8801405 	stb	r2,80(sp)
    6c24:	d9002e15 	stw	r4,184(sp)
    6c28:	d8c02b15 	stw	r3,172(sp)
    6c2c:	d8002a15 	stw	zero,168(sp)
    6c30:	d8003215 	stw	zero,200(sp)
    6c34:	dc001404 	addi	r16,sp,80
    6c38:	0039883a 	mov	fp,zero
    6c3c:	003e5306 	br	658c <__alt_data_end+0xfffe658c>
    6c40:	01000074 	movhi	r4,1
    6c44:	21049604 	addi	r4,r4,4696
    6c48:	0039883a 	mov	fp,zero
    6c4c:	d9003915 	stw	r4,228(sp)
    6c50:	04401e04 	movi	r17,120
    6c54:	003f6906 	br	69fc <__alt_data_end+0xfffe69fc>
    6c58:	8025883a 	mov	r18,r16
    6c5c:	dc002903 	ldbu	r16,164(sp)
    6c60:	e011883a 	mov	r8,fp
    6c64:	84003fcc 	andi	r16,r16,255
    6c68:	8005081e 	bne	r16,zero,808c <___vfprintf_internal_r+0x2290>
    6c6c:	883d6126 	beq	r17,zero,61f4 <__alt_data_end+0xfffe61f4>
    6c70:	00c00044 	movi	r3,1
    6c74:	d8c02915 	stw	r3,164(sp)
    6c78:	dc401405 	stb	r17,80(sp)
    6c7c:	d8002785 	stb	zero,158(sp)
    6c80:	003fe906 	br	6c28 <__alt_data_end+0xfffe6c28>
    6c84:	01400074 	movhi	r5,1
    6c88:	29449604 	addi	r5,r5,4696
    6c8c:	d9403915 	stw	r5,228(sp)
    6c90:	d8c02e15 	stw	r3,184(sp)
    6c94:	1025883a 	mov	r18,r2
    6c98:	04401e04 	movi	r17,120
    6c9c:	9d84b03a 	or	r2,r19,r22
    6ca0:	1000fc1e 	bne	r2,zero,7094 <___vfprintf_internal_r+0x1298>
    6ca4:	0039883a 	mov	fp,zero
    6ca8:	00800084 	movi	r2,2
    6cac:	10803fcc 	andi	r2,r2,255
    6cb0:	00c00044 	movi	r3,1
    6cb4:	10c20f26 	beq	r2,r3,74f4 <___vfprintf_internal_r+0x16f8>
    6cb8:	00c00084 	movi	r3,2
    6cbc:	10fd3326 	beq	r2,r3,618c <__alt_data_end+0xfffe618c>
    6cc0:	003e0b06 	br	64f0 <__alt_data_end+0xfffe64f0>
    6cc4:	d8c02017 	ldw	r3,128(sp)
    6cc8:	003e7106 	br	6690 <__alt_data_end+0xfffe6690>
    6ccc:	00801944 	movi	r2,101
    6cd0:	14407e0e 	bge	r2,r17,6ecc <___vfprintf_internal_r+0x10d0>
    6cd4:	d9003617 	ldw	r4,216(sp)
    6cd8:	d9403817 	ldw	r5,224(sp)
    6cdc:	000d883a 	mov	r6,zero
    6ce0:	000f883a 	mov	r7,zero
    6ce4:	d8c03c15 	stw	r3,240(sp)
    6ce8:	da003d15 	stw	r8,244(sp)
    6cec:	000e7d40 	call	e7d4 <__eqdf2>
    6cf0:	d8c03c17 	ldw	r3,240(sp)
    6cf4:	da003d17 	ldw	r8,244(sp)
    6cf8:	1000f71e 	bne	r2,zero,70d8 <___vfprintf_internal_r+0x12dc>
    6cfc:	d8801f17 	ldw	r2,124(sp)
    6d00:	01000074 	movhi	r4,1
    6d04:	21049d04 	addi	r4,r4,4724
    6d08:	18c00044 	addi	r3,r3,1
    6d0c:	10800044 	addi	r2,r2,1
    6d10:	41000015 	stw	r4,0(r8)
    6d14:	01000044 	movi	r4,1
    6d18:	41000115 	stw	r4,4(r8)
    6d1c:	d8c02015 	stw	r3,128(sp)
    6d20:	d8801f15 	stw	r2,124(sp)
    6d24:	010001c4 	movi	r4,7
    6d28:	2082b816 	blt	r4,r2,780c <___vfprintf_internal_r+0x1a10>
    6d2c:	42000204 	addi	r8,r8,8
    6d30:	d8802617 	ldw	r2,152(sp)
    6d34:	d9403317 	ldw	r5,204(sp)
    6d38:	11400216 	blt	r2,r5,6d44 <___vfprintf_internal_r+0xf48>
    6d3c:	9080004c 	andi	r2,r18,1
    6d40:	103eb326 	beq	r2,zero,6810 <__alt_data_end+0xfffe6810>
    6d44:	d8803717 	ldw	r2,220(sp)
    6d48:	d9003417 	ldw	r4,208(sp)
    6d4c:	d9403717 	ldw	r5,220(sp)
    6d50:	1887883a 	add	r3,r3,r2
    6d54:	d8801f17 	ldw	r2,124(sp)
    6d58:	41000015 	stw	r4,0(r8)
    6d5c:	41400115 	stw	r5,4(r8)
    6d60:	10800044 	addi	r2,r2,1
    6d64:	d8c02015 	stw	r3,128(sp)
    6d68:	d8801f15 	stw	r2,124(sp)
    6d6c:	010001c4 	movi	r4,7
    6d70:	20832916 	blt	r4,r2,7a18 <___vfprintf_internal_r+0x1c1c>
    6d74:	42000204 	addi	r8,r8,8
    6d78:	d8803317 	ldw	r2,204(sp)
    6d7c:	143fffc4 	addi	r16,r2,-1
    6d80:	043ea30e 	bge	zero,r16,6810 <__alt_data_end+0xfffe6810>
    6d84:	04400404 	movi	r17,16
    6d88:	d8801f17 	ldw	r2,124(sp)
    6d8c:	8c00880e 	bge	r17,r16,6fb0 <___vfprintf_internal_r+0x11b4>
    6d90:	01400074 	movhi	r5,1
    6d94:	29449d84 	addi	r5,r5,4726
    6d98:	d9402c15 	stw	r5,176(sp)
    6d9c:	058001c4 	movi	r22,7
    6da0:	dcc02d17 	ldw	r19,180(sp)
    6da4:	00000306 	br	6db4 <___vfprintf_internal_r+0xfb8>
    6da8:	42000204 	addi	r8,r8,8
    6dac:	843ffc04 	addi	r16,r16,-16
    6db0:	8c00820e 	bge	r17,r16,6fbc <___vfprintf_internal_r+0x11c0>
    6db4:	18c00404 	addi	r3,r3,16
    6db8:	10800044 	addi	r2,r2,1
    6dbc:	45000015 	stw	r20,0(r8)
    6dc0:	44400115 	stw	r17,4(r8)
    6dc4:	d8c02015 	stw	r3,128(sp)
    6dc8:	d8801f15 	stw	r2,124(sp)
    6dcc:	b0bff60e 	bge	r22,r2,6da8 <__alt_data_end+0xfffe6da8>
    6dd0:	d9801e04 	addi	r6,sp,120
    6dd4:	b80b883a 	mov	r5,r23
    6dd8:	9809883a 	mov	r4,r19
    6ddc:	000bff40 	call	bff4 <__sprint_r>
    6de0:	103d0a1e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    6de4:	d8c02017 	ldw	r3,128(sp)
    6de8:	d8801f17 	ldw	r2,124(sp)
    6dec:	da000404 	addi	r8,sp,16
    6df0:	003fee06 	br	6dac <__alt_data_end+0xfffe6dac>
    6df4:	d9403117 	ldw	r5,196(sp)
    6df8:	d8802917 	ldw	r2,164(sp)
    6dfc:	28adc83a 	sub	r22,r5,r2
    6e00:	05be410e 	bge	zero,r22,6708 <__alt_data_end+0xfffe6708>
    6e04:	07000404 	movi	fp,16
    6e08:	d8801f17 	ldw	r2,124(sp)
    6e0c:	e5838f0e 	bge	fp,r22,7c4c <___vfprintf_internal_r+0x1e50>
    6e10:	01400074 	movhi	r5,1
    6e14:	29449d84 	addi	r5,r5,4726
    6e18:	dc403015 	stw	r17,192(sp)
    6e1c:	d9402c15 	stw	r5,176(sp)
    6e20:	b023883a 	mov	r17,r22
    6e24:	04c001c4 	movi	r19,7
    6e28:	a82d883a 	mov	r22,r21
    6e2c:	902b883a 	mov	r21,r18
    6e30:	8025883a 	mov	r18,r16
    6e34:	dc002d17 	ldw	r16,180(sp)
    6e38:	00000306 	br	6e48 <___vfprintf_internal_r+0x104c>
    6e3c:	8c7ffc04 	addi	r17,r17,-16
    6e40:	42000204 	addi	r8,r8,8
    6e44:	e440110e 	bge	fp,r17,6e8c <___vfprintf_internal_r+0x1090>
    6e48:	18c00404 	addi	r3,r3,16
    6e4c:	10800044 	addi	r2,r2,1
    6e50:	45000015 	stw	r20,0(r8)
    6e54:	47000115 	stw	fp,4(r8)
    6e58:	d8c02015 	stw	r3,128(sp)
    6e5c:	d8801f15 	stw	r2,124(sp)
    6e60:	98bff60e 	bge	r19,r2,6e3c <__alt_data_end+0xfffe6e3c>
    6e64:	d9801e04 	addi	r6,sp,120
    6e68:	b80b883a 	mov	r5,r23
    6e6c:	8009883a 	mov	r4,r16
    6e70:	000bff40 	call	bff4 <__sprint_r>
    6e74:	103ce51e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    6e78:	8c7ffc04 	addi	r17,r17,-16
    6e7c:	d8c02017 	ldw	r3,128(sp)
    6e80:	d8801f17 	ldw	r2,124(sp)
    6e84:	da000404 	addi	r8,sp,16
    6e88:	e47fef16 	blt	fp,r17,6e48 <__alt_data_end+0xfffe6e48>
    6e8c:	9021883a 	mov	r16,r18
    6e90:	a825883a 	mov	r18,r21
    6e94:	b02b883a 	mov	r21,r22
    6e98:	882d883a 	mov	r22,r17
    6e9c:	dc403017 	ldw	r17,192(sp)
    6ea0:	d9002c17 	ldw	r4,176(sp)
    6ea4:	1d87883a 	add	r3,r3,r22
    6ea8:	10800044 	addi	r2,r2,1
    6eac:	41000015 	stw	r4,0(r8)
    6eb0:	45800115 	stw	r22,4(r8)
    6eb4:	d8c02015 	stw	r3,128(sp)
    6eb8:	d8801f15 	stw	r2,124(sp)
    6ebc:	010001c4 	movi	r4,7
    6ec0:	20818e16 	blt	r4,r2,74fc <___vfprintf_internal_r+0x1700>
    6ec4:	42000204 	addi	r8,r8,8
    6ec8:	003e0f06 	br	6708 <__alt_data_end+0xfffe6708>
    6ecc:	d9403317 	ldw	r5,204(sp)
    6ed0:	00800044 	movi	r2,1
    6ed4:	18c00044 	addi	r3,r3,1
    6ed8:	1141530e 	bge	r2,r5,7428 <___vfprintf_internal_r+0x162c>
    6edc:	dc401f17 	ldw	r17,124(sp)
    6ee0:	00800044 	movi	r2,1
    6ee4:	40800115 	stw	r2,4(r8)
    6ee8:	8c400044 	addi	r17,r17,1
    6eec:	44000015 	stw	r16,0(r8)
    6ef0:	d8c02015 	stw	r3,128(sp)
    6ef4:	dc401f15 	stw	r17,124(sp)
    6ef8:	008001c4 	movi	r2,7
    6efc:	14416b16 	blt	r2,r17,74ac <___vfprintf_internal_r+0x16b0>
    6f00:	42000204 	addi	r8,r8,8
    6f04:	d8803717 	ldw	r2,220(sp)
    6f08:	d9003417 	ldw	r4,208(sp)
    6f0c:	8c400044 	addi	r17,r17,1
    6f10:	10c7883a 	add	r3,r2,r3
    6f14:	40800115 	stw	r2,4(r8)
    6f18:	41000015 	stw	r4,0(r8)
    6f1c:	d8c02015 	stw	r3,128(sp)
    6f20:	dc401f15 	stw	r17,124(sp)
    6f24:	008001c4 	movi	r2,7
    6f28:	14416916 	blt	r2,r17,74d0 <___vfprintf_internal_r+0x16d4>
    6f2c:	45800204 	addi	r22,r8,8
    6f30:	d9003617 	ldw	r4,216(sp)
    6f34:	d9403817 	ldw	r5,224(sp)
    6f38:	000d883a 	mov	r6,zero
    6f3c:	000f883a 	mov	r7,zero
    6f40:	d8c03c15 	stw	r3,240(sp)
    6f44:	000e7d40 	call	e7d4 <__eqdf2>
    6f48:	d8c03c17 	ldw	r3,240(sp)
    6f4c:	1000bc26 	beq	r2,zero,7240 <___vfprintf_internal_r+0x1444>
    6f50:	d9403317 	ldw	r5,204(sp)
    6f54:	84000044 	addi	r16,r16,1
    6f58:	8c400044 	addi	r17,r17,1
    6f5c:	28bfffc4 	addi	r2,r5,-1
    6f60:	1887883a 	add	r3,r3,r2
    6f64:	b0800115 	stw	r2,4(r22)
    6f68:	b4000015 	stw	r16,0(r22)
    6f6c:	d8c02015 	stw	r3,128(sp)
    6f70:	dc401f15 	stw	r17,124(sp)
    6f74:	008001c4 	movi	r2,7
    6f78:	14414316 	blt	r2,r17,7488 <___vfprintf_internal_r+0x168c>
    6f7c:	b5800204 	addi	r22,r22,8
    6f80:	d9003a17 	ldw	r4,232(sp)
    6f84:	df0022c4 	addi	fp,sp,139
    6f88:	8c400044 	addi	r17,r17,1
    6f8c:	20c7883a 	add	r3,r4,r3
    6f90:	b7000015 	stw	fp,0(r22)
    6f94:	b1000115 	stw	r4,4(r22)
    6f98:	d8c02015 	stw	r3,128(sp)
    6f9c:	dc401f15 	stw	r17,124(sp)
    6fa0:	008001c4 	movi	r2,7
    6fa4:	14400e16 	blt	r2,r17,6fe0 <___vfprintf_internal_r+0x11e4>
    6fa8:	b2000204 	addi	r8,r22,8
    6fac:	003e1806 	br	6810 <__alt_data_end+0xfffe6810>
    6fb0:	01000074 	movhi	r4,1
    6fb4:	21049d84 	addi	r4,r4,4726
    6fb8:	d9002c15 	stw	r4,176(sp)
    6fbc:	d9002c17 	ldw	r4,176(sp)
    6fc0:	1c07883a 	add	r3,r3,r16
    6fc4:	44000115 	stw	r16,4(r8)
    6fc8:	41000015 	stw	r4,0(r8)
    6fcc:	10800044 	addi	r2,r2,1
    6fd0:	d8c02015 	stw	r3,128(sp)
    6fd4:	d8801f15 	stw	r2,124(sp)
    6fd8:	010001c4 	movi	r4,7
    6fdc:	20be0b0e 	bge	r4,r2,680c <__alt_data_end+0xfffe680c>
    6fe0:	d9002d17 	ldw	r4,180(sp)
    6fe4:	d9801e04 	addi	r6,sp,120
    6fe8:	b80b883a 	mov	r5,r23
    6fec:	000bff40 	call	bff4 <__sprint_r>
    6ff0:	103c861e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    6ff4:	d8c02017 	ldw	r3,128(sp)
    6ff8:	da000404 	addi	r8,sp,16
    6ffc:	003e0406 	br	6810 <__alt_data_end+0xfffe6810>
    7000:	d9002d17 	ldw	r4,180(sp)
    7004:	d9801e04 	addi	r6,sp,120
    7008:	b80b883a 	mov	r5,r23
    700c:	000bff40 	call	bff4 <__sprint_r>
    7010:	103e3b26 	beq	r2,zero,6900 <__alt_data_end+0xfffe6900>
    7014:	003c7d06 	br	620c <__alt_data_end+0xfffe620c>
    7018:	d9002d17 	ldw	r4,180(sp)
    701c:	d9801e04 	addi	r6,sp,120
    7020:	b80b883a 	mov	r5,r23
    7024:	000bff40 	call	bff4 <__sprint_r>
    7028:	103c781e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    702c:	d8c02017 	ldw	r3,128(sp)
    7030:	da000404 	addi	r8,sp,16
    7034:	003de906 	br	67dc <__alt_data_end+0xfffe67dc>
    7038:	d9002d17 	ldw	r4,180(sp)
    703c:	d9801e04 	addi	r6,sp,120
    7040:	b80b883a 	mov	r5,r23
    7044:	000bff40 	call	bff4 <__sprint_r>
    7048:	103c701e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    704c:	d8c02017 	ldw	r3,128(sp)
    7050:	da000404 	addi	r8,sp,16
    7054:	003d9b06 	br	66c4 <__alt_data_end+0xfffe66c4>
    7058:	d9002d17 	ldw	r4,180(sp)
    705c:	d9801e04 	addi	r6,sp,120
    7060:	b80b883a 	mov	r5,r23
    7064:	000bff40 	call	bff4 <__sprint_r>
    7068:	103c681e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    706c:	d8c02017 	ldw	r3,128(sp)
    7070:	da000404 	addi	r8,sp,16
    7074:	003da106 	br	66fc <__alt_data_end+0xfffe66fc>
    7078:	d9402a17 	ldw	r5,168(sp)
    707c:	d8002785 	stb	zero,158(sp)
    7080:	283f0616 	blt	r5,zero,6c9c <__alt_data_end+0xfffe6c9c>
    7084:	00ffdfc4 	movi	r3,-129
    7088:	9d84b03a 	or	r2,r19,r22
    708c:	90e4703a 	and	r18,r18,r3
    7090:	103c3b26 	beq	r2,zero,6180 <__alt_data_end+0xfffe6180>
    7094:	0039883a 	mov	fp,zero
    7098:	003e5806 	br	69fc <__alt_data_end+0xfffe69fc>
    709c:	9080040c 	andi	r2,r18,16
    70a0:	1001b326 	beq	r2,zero,7770 <___vfprintf_internal_r+0x1974>
    70a4:	d8c02e17 	ldw	r3,184(sp)
    70a8:	d9002a17 	ldw	r4,168(sp)
    70ac:	d8002785 	stb	zero,158(sp)
    70b0:	18800104 	addi	r2,r3,4
    70b4:	1cc00017 	ldw	r19,0(r3)
    70b8:	002d883a 	mov	r22,zero
    70bc:	2001b516 	blt	r4,zero,7794 <___vfprintf_internal_r+0x1998>
    70c0:	00ffdfc4 	movi	r3,-129
    70c4:	d8802e15 	stw	r2,184(sp)
    70c8:	90e4703a 	and	r18,r18,r3
    70cc:	983d0526 	beq	r19,zero,64e4 <__alt_data_end+0xfffe64e4>
    70d0:	0039883a 	mov	fp,zero
    70d4:	003d0806 	br	64f8 <__alt_data_end+0xfffe64f8>
    70d8:	dc402617 	ldw	r17,152(sp)
    70dc:	0441d30e 	bge	zero,r17,782c <___vfprintf_internal_r+0x1a30>
    70e0:	dc403217 	ldw	r17,200(sp)
    70e4:	d8803317 	ldw	r2,204(sp)
    70e8:	1440010e 	bge	r2,r17,70f0 <___vfprintf_internal_r+0x12f4>
    70ec:	1023883a 	mov	r17,r2
    70f0:	04400a0e 	bge	zero,r17,711c <___vfprintf_internal_r+0x1320>
    70f4:	d8801f17 	ldw	r2,124(sp)
    70f8:	1c47883a 	add	r3,r3,r17
    70fc:	44000015 	stw	r16,0(r8)
    7100:	10800044 	addi	r2,r2,1
    7104:	44400115 	stw	r17,4(r8)
    7108:	d8c02015 	stw	r3,128(sp)
    710c:	d8801f15 	stw	r2,124(sp)
    7110:	010001c4 	movi	r4,7
    7114:	20826516 	blt	r4,r2,7aac <___vfprintf_internal_r+0x1cb0>
    7118:	42000204 	addi	r8,r8,8
    711c:	88026116 	blt	r17,zero,7aa4 <___vfprintf_internal_r+0x1ca8>
    7120:	d9003217 	ldw	r4,200(sp)
    7124:	2463c83a 	sub	r17,r4,r17
    7128:	04407b0e 	bge	zero,r17,7318 <___vfprintf_internal_r+0x151c>
    712c:	05800404 	movi	r22,16
    7130:	d8801f17 	ldw	r2,124(sp)
    7134:	b4419d0e 	bge	r22,r17,77ac <___vfprintf_internal_r+0x19b0>
    7138:	01000074 	movhi	r4,1
    713c:	21049d84 	addi	r4,r4,4726
    7140:	d9002c15 	stw	r4,176(sp)
    7144:	070001c4 	movi	fp,7
    7148:	dcc02d17 	ldw	r19,180(sp)
    714c:	00000306 	br	715c <___vfprintf_internal_r+0x1360>
    7150:	42000204 	addi	r8,r8,8
    7154:	8c7ffc04 	addi	r17,r17,-16
    7158:	b441970e 	bge	r22,r17,77b8 <___vfprintf_internal_r+0x19bc>
    715c:	18c00404 	addi	r3,r3,16
    7160:	10800044 	addi	r2,r2,1
    7164:	45000015 	stw	r20,0(r8)
    7168:	45800115 	stw	r22,4(r8)
    716c:	d8c02015 	stw	r3,128(sp)
    7170:	d8801f15 	stw	r2,124(sp)
    7174:	e0bff60e 	bge	fp,r2,7150 <__alt_data_end+0xfffe7150>
    7178:	d9801e04 	addi	r6,sp,120
    717c:	b80b883a 	mov	r5,r23
    7180:	9809883a 	mov	r4,r19
    7184:	000bff40 	call	bff4 <__sprint_r>
    7188:	103c201e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    718c:	d8c02017 	ldw	r3,128(sp)
    7190:	d8801f17 	ldw	r2,124(sp)
    7194:	da000404 	addi	r8,sp,16
    7198:	003fee06 	br	7154 <__alt_data_end+0xfffe7154>
    719c:	d9002d17 	ldw	r4,180(sp)
    71a0:	d9801e04 	addi	r6,sp,120
    71a4:	b80b883a 	mov	r5,r23
    71a8:	000bff40 	call	bff4 <__sprint_r>
    71ac:	103c171e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    71b0:	d8c02017 	ldw	r3,128(sp)
    71b4:	df002787 	ldb	fp,158(sp)
    71b8:	da000404 	addi	r8,sp,16
    71bc:	003d3406 	br	6690 <__alt_data_end+0xfffe6690>
    71c0:	9080040c 	andi	r2,r18,16
    71c4:	10016126 	beq	r2,zero,774c <___vfprintf_internal_r+0x1950>
    71c8:	d9402e17 	ldw	r5,184(sp)
    71cc:	2cc00017 	ldw	r19,0(r5)
    71d0:	29400104 	addi	r5,r5,4
    71d4:	d9402e15 	stw	r5,184(sp)
    71d8:	982dd7fa 	srai	r22,r19,31
    71dc:	b005883a 	mov	r2,r22
    71e0:	003c5a06 	br	634c <__alt_data_end+0xfffe634c>
    71e4:	9080040c 	andi	r2,r18,16
    71e8:	10003526 	beq	r2,zero,72c0 <___vfprintf_internal_r+0x14c4>
    71ec:	d8c02e17 	ldw	r3,184(sp)
    71f0:	d9002a17 	ldw	r4,168(sp)
    71f4:	d8002785 	stb	zero,158(sp)
    71f8:	18800104 	addi	r2,r3,4
    71fc:	1cc00017 	ldw	r19,0(r3)
    7200:	002d883a 	mov	r22,zero
    7204:	20003716 	blt	r4,zero,72e4 <___vfprintf_internal_r+0x14e8>
    7208:	00ffdfc4 	movi	r3,-129
    720c:	d8802e15 	stw	r2,184(sp)
    7210:	90e4703a 	and	r18,r18,r3
    7214:	0039883a 	mov	fp,zero
    7218:	983dd426 	beq	r19,zero,696c <__alt_data_end+0xfffe696c>
    721c:	00800244 	movi	r2,9
    7220:	14fc5336 	bltu	r2,r19,6370 <__alt_data_end+0xfffe6370>
    7224:	d8c02817 	ldw	r3,160(sp)
    7228:	dc001dc4 	addi	r16,sp,119
    722c:	9cc00c04 	addi	r19,r19,48
    7230:	1c07c83a 	sub	r3,r3,r16
    7234:	dcc01dc5 	stb	r19,119(sp)
    7238:	d8c02b15 	stw	r3,172(sp)
    723c:	003cc606 	br	6558 <__alt_data_end+0xfffe6558>
    7240:	d8803317 	ldw	r2,204(sp)
    7244:	143fffc4 	addi	r16,r2,-1
    7248:	043f4d0e 	bge	zero,r16,6f80 <__alt_data_end+0xfffe6f80>
    724c:	07000404 	movi	fp,16
    7250:	e400810e 	bge	fp,r16,7458 <___vfprintf_internal_r+0x165c>
    7254:	01400074 	movhi	r5,1
    7258:	29449d84 	addi	r5,r5,4726
    725c:	d9402c15 	stw	r5,176(sp)
    7260:	01c001c4 	movi	r7,7
    7264:	dcc02d17 	ldw	r19,180(sp)
    7268:	00000306 	br	7278 <___vfprintf_internal_r+0x147c>
    726c:	b5800204 	addi	r22,r22,8
    7270:	843ffc04 	addi	r16,r16,-16
    7274:	e4007b0e 	bge	fp,r16,7464 <___vfprintf_internal_r+0x1668>
    7278:	18c00404 	addi	r3,r3,16
    727c:	8c400044 	addi	r17,r17,1
    7280:	b5000015 	stw	r20,0(r22)
    7284:	b7000115 	stw	fp,4(r22)
    7288:	d8c02015 	stw	r3,128(sp)
    728c:	dc401f15 	stw	r17,124(sp)
    7290:	3c7ff60e 	bge	r7,r17,726c <__alt_data_end+0xfffe726c>
    7294:	d9801e04 	addi	r6,sp,120
    7298:	b80b883a 	mov	r5,r23
    729c:	9809883a 	mov	r4,r19
    72a0:	d9c03c15 	stw	r7,240(sp)
    72a4:	000bff40 	call	bff4 <__sprint_r>
    72a8:	d9c03c17 	ldw	r7,240(sp)
    72ac:	103bd71e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    72b0:	d8c02017 	ldw	r3,128(sp)
    72b4:	dc401f17 	ldw	r17,124(sp)
    72b8:	dd800404 	addi	r22,sp,16
    72bc:	003fec06 	br	7270 <__alt_data_end+0xfffe7270>
    72c0:	9080100c 	andi	r2,r18,64
    72c4:	d8002785 	stb	zero,158(sp)
    72c8:	10010e26 	beq	r2,zero,7704 <___vfprintf_internal_r+0x1908>
    72cc:	d9402e17 	ldw	r5,184(sp)
    72d0:	d8c02a17 	ldw	r3,168(sp)
    72d4:	002d883a 	mov	r22,zero
    72d8:	28800104 	addi	r2,r5,4
    72dc:	2cc0000b 	ldhu	r19,0(r5)
    72e0:	183fc90e 	bge	r3,zero,7208 <__alt_data_end+0xfffe7208>
    72e4:	d8802e15 	stw	r2,184(sp)
    72e8:	0039883a 	mov	fp,zero
    72ec:	9d84b03a 	or	r2,r19,r22
    72f0:	103c1e1e 	bne	r2,zero,636c <__alt_data_end+0xfffe636c>
    72f4:	00800044 	movi	r2,1
    72f8:	003e6c06 	br	6cac <__alt_data_end+0xfffe6cac>
    72fc:	d9002d17 	ldw	r4,180(sp)
    7300:	d9801e04 	addi	r6,sp,120
    7304:	b80b883a 	mov	r5,r23
    7308:	000bff40 	call	bff4 <__sprint_r>
    730c:	103bbf1e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    7310:	d8c02017 	ldw	r3,128(sp)
    7314:	da000404 	addi	r8,sp,16
    7318:	d9003217 	ldw	r4,200(sp)
    731c:	d8802617 	ldw	r2,152(sp)
    7320:	d9403317 	ldw	r5,204(sp)
    7324:	8123883a 	add	r17,r16,r4
    7328:	11400216 	blt	r2,r5,7334 <___vfprintf_internal_r+0x1538>
    732c:	9100004c 	andi	r4,r18,1
    7330:	20000d26 	beq	r4,zero,7368 <___vfprintf_internal_r+0x156c>
    7334:	d9003717 	ldw	r4,220(sp)
    7338:	d9403417 	ldw	r5,208(sp)
    733c:	1907883a 	add	r3,r3,r4
    7340:	d9001f17 	ldw	r4,124(sp)
    7344:	41400015 	stw	r5,0(r8)
    7348:	d9403717 	ldw	r5,220(sp)
    734c:	21000044 	addi	r4,r4,1
    7350:	d8c02015 	stw	r3,128(sp)
    7354:	41400115 	stw	r5,4(r8)
    7358:	d9001f15 	stw	r4,124(sp)
    735c:	014001c4 	movi	r5,7
    7360:	2901e816 	blt	r5,r4,7b04 <___vfprintf_internal_r+0x1d08>
    7364:	42000204 	addi	r8,r8,8
    7368:	d9003317 	ldw	r4,204(sp)
    736c:	8121883a 	add	r16,r16,r4
    7370:	2085c83a 	sub	r2,r4,r2
    7374:	8461c83a 	sub	r16,r16,r17
    7378:	1400010e 	bge	r2,r16,7380 <___vfprintf_internal_r+0x1584>
    737c:	1021883a 	mov	r16,r2
    7380:	04000a0e 	bge	zero,r16,73ac <___vfprintf_internal_r+0x15b0>
    7384:	d9001f17 	ldw	r4,124(sp)
    7388:	1c07883a 	add	r3,r3,r16
    738c:	44400015 	stw	r17,0(r8)
    7390:	21000044 	addi	r4,r4,1
    7394:	44000115 	stw	r16,4(r8)
    7398:	d8c02015 	stw	r3,128(sp)
    739c:	d9001f15 	stw	r4,124(sp)
    73a0:	014001c4 	movi	r5,7
    73a4:	2901fb16 	blt	r5,r4,7b94 <___vfprintf_internal_r+0x1d98>
    73a8:	42000204 	addi	r8,r8,8
    73ac:	8001f716 	blt	r16,zero,7b8c <___vfprintf_internal_r+0x1d90>
    73b0:	1421c83a 	sub	r16,r2,r16
    73b4:	043d160e 	bge	zero,r16,6810 <__alt_data_end+0xfffe6810>
    73b8:	04400404 	movi	r17,16
    73bc:	d8801f17 	ldw	r2,124(sp)
    73c0:	8c3efb0e 	bge	r17,r16,6fb0 <__alt_data_end+0xfffe6fb0>
    73c4:	01400074 	movhi	r5,1
    73c8:	29449d84 	addi	r5,r5,4726
    73cc:	d9402c15 	stw	r5,176(sp)
    73d0:	058001c4 	movi	r22,7
    73d4:	dcc02d17 	ldw	r19,180(sp)
    73d8:	00000306 	br	73e8 <___vfprintf_internal_r+0x15ec>
    73dc:	42000204 	addi	r8,r8,8
    73e0:	843ffc04 	addi	r16,r16,-16
    73e4:	8c3ef50e 	bge	r17,r16,6fbc <__alt_data_end+0xfffe6fbc>
    73e8:	18c00404 	addi	r3,r3,16
    73ec:	10800044 	addi	r2,r2,1
    73f0:	45000015 	stw	r20,0(r8)
    73f4:	44400115 	stw	r17,4(r8)
    73f8:	d8c02015 	stw	r3,128(sp)
    73fc:	d8801f15 	stw	r2,124(sp)
    7400:	b0bff60e 	bge	r22,r2,73dc <__alt_data_end+0xfffe73dc>
    7404:	d9801e04 	addi	r6,sp,120
    7408:	b80b883a 	mov	r5,r23
    740c:	9809883a 	mov	r4,r19
    7410:	000bff40 	call	bff4 <__sprint_r>
    7414:	103b7d1e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    7418:	d8c02017 	ldw	r3,128(sp)
    741c:	d8801f17 	ldw	r2,124(sp)
    7420:	da000404 	addi	r8,sp,16
    7424:	003fee06 	br	73e0 <__alt_data_end+0xfffe73e0>
    7428:	9088703a 	and	r4,r18,r2
    742c:	203eab1e 	bne	r4,zero,6edc <__alt_data_end+0xfffe6edc>
    7430:	dc401f17 	ldw	r17,124(sp)
    7434:	40800115 	stw	r2,4(r8)
    7438:	44000015 	stw	r16,0(r8)
    743c:	8c400044 	addi	r17,r17,1
    7440:	d8c02015 	stw	r3,128(sp)
    7444:	dc401f15 	stw	r17,124(sp)
    7448:	008001c4 	movi	r2,7
    744c:	14400e16 	blt	r2,r17,7488 <___vfprintf_internal_r+0x168c>
    7450:	45800204 	addi	r22,r8,8
    7454:	003eca06 	br	6f80 <__alt_data_end+0xfffe6f80>
    7458:	01000074 	movhi	r4,1
    745c:	21049d84 	addi	r4,r4,4726
    7460:	d9002c15 	stw	r4,176(sp)
    7464:	d8802c17 	ldw	r2,176(sp)
    7468:	1c07883a 	add	r3,r3,r16
    746c:	8c400044 	addi	r17,r17,1
    7470:	b0800015 	stw	r2,0(r22)
    7474:	b4000115 	stw	r16,4(r22)
    7478:	d8c02015 	stw	r3,128(sp)
    747c:	dc401f15 	stw	r17,124(sp)
    7480:	008001c4 	movi	r2,7
    7484:	147ebd0e 	bge	r2,r17,6f7c <__alt_data_end+0xfffe6f7c>
    7488:	d9002d17 	ldw	r4,180(sp)
    748c:	d9801e04 	addi	r6,sp,120
    7490:	b80b883a 	mov	r5,r23
    7494:	000bff40 	call	bff4 <__sprint_r>
    7498:	103b5c1e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    749c:	d8c02017 	ldw	r3,128(sp)
    74a0:	dc401f17 	ldw	r17,124(sp)
    74a4:	dd800404 	addi	r22,sp,16
    74a8:	003eb506 	br	6f80 <__alt_data_end+0xfffe6f80>
    74ac:	d9002d17 	ldw	r4,180(sp)
    74b0:	d9801e04 	addi	r6,sp,120
    74b4:	b80b883a 	mov	r5,r23
    74b8:	000bff40 	call	bff4 <__sprint_r>
    74bc:	103b531e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    74c0:	d8c02017 	ldw	r3,128(sp)
    74c4:	dc401f17 	ldw	r17,124(sp)
    74c8:	da000404 	addi	r8,sp,16
    74cc:	003e8d06 	br	6f04 <__alt_data_end+0xfffe6f04>
    74d0:	d9002d17 	ldw	r4,180(sp)
    74d4:	d9801e04 	addi	r6,sp,120
    74d8:	b80b883a 	mov	r5,r23
    74dc:	000bff40 	call	bff4 <__sprint_r>
    74e0:	103b4a1e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    74e4:	d8c02017 	ldw	r3,128(sp)
    74e8:	dc401f17 	ldw	r17,124(sp)
    74ec:	dd800404 	addi	r22,sp,16
    74f0:	003e8f06 	br	6f30 <__alt_data_end+0xfffe6f30>
    74f4:	0027883a 	mov	r19,zero
    74f8:	003f4a06 	br	7224 <__alt_data_end+0xfffe7224>
    74fc:	d9002d17 	ldw	r4,180(sp)
    7500:	d9801e04 	addi	r6,sp,120
    7504:	b80b883a 	mov	r5,r23
    7508:	000bff40 	call	bff4 <__sprint_r>
    750c:	103b3f1e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    7510:	d8c02017 	ldw	r3,128(sp)
    7514:	da000404 	addi	r8,sp,16
    7518:	003c7b06 	br	6708 <__alt_data_end+0xfffe6708>
    751c:	d9402a17 	ldw	r5,168(sp)
    7520:	04e7c83a 	sub	r19,zero,r19
    7524:	07000b44 	movi	fp,45
    7528:	9804c03a 	cmpne	r2,r19,zero
    752c:	05adc83a 	sub	r22,zero,r22
    7530:	df002785 	stb	fp,158(sp)
    7534:	b0adc83a 	sub	r22,r22,r2
    7538:	28017b16 	blt	r5,zero,7b28 <___vfprintf_internal_r+0x1d2c>
    753c:	00bfdfc4 	movi	r2,-129
    7540:	90a4703a 	and	r18,r18,r2
    7544:	003b8906 	br	636c <__alt_data_end+0xfffe636c>
    7548:	d9003617 	ldw	r4,216(sp)
    754c:	d9403817 	ldw	r5,224(sp)
    7550:	da003d15 	stw	r8,244(sp)
    7554:	000bda80 	call	bda8 <__fpclassifyd>
    7558:	da003d17 	ldw	r8,244(sp)
    755c:	1000f026 	beq	r2,zero,7920 <___vfprintf_internal_r+0x1b24>
    7560:	d9002a17 	ldw	r4,168(sp)
    7564:	05bff7c4 	movi	r22,-33
    7568:	00bfffc4 	movi	r2,-1
    756c:	8dac703a 	and	r22,r17,r22
    7570:	20820026 	beq	r4,r2,7d74 <___vfprintf_internal_r+0x1f78>
    7574:	008011c4 	movi	r2,71
    7578:	b081f726 	beq	r22,r2,7d58 <___vfprintf_internal_r+0x1f5c>
    757c:	d9003817 	ldw	r4,224(sp)
    7580:	90c04014 	ori	r3,r18,256
    7584:	d8c02c15 	stw	r3,176(sp)
    7588:	20021516 	blt	r4,zero,7de0 <___vfprintf_internal_r+0x1fe4>
    758c:	dcc03817 	ldw	r19,224(sp)
    7590:	d8002905 	stb	zero,164(sp)
    7594:	00801984 	movi	r2,102
    7598:	8881f926 	beq	r17,r2,7d80 <___vfprintf_internal_r+0x1f84>
    759c:	00801184 	movi	r2,70
    75a0:	88821c26 	beq	r17,r2,7e14 <___vfprintf_internal_r+0x2018>
    75a4:	00801144 	movi	r2,69
    75a8:	b081ef26 	beq	r22,r2,7d68 <___vfprintf_internal_r+0x1f6c>
    75ac:	d8c02a17 	ldw	r3,168(sp)
    75b0:	d8802104 	addi	r2,sp,132
    75b4:	d8800315 	stw	r2,12(sp)
    75b8:	d9403617 	ldw	r5,216(sp)
    75bc:	d8802504 	addi	r2,sp,148
    75c0:	d9002d17 	ldw	r4,180(sp)
    75c4:	d8800215 	stw	r2,8(sp)
    75c8:	d8802604 	addi	r2,sp,152
    75cc:	d8c00015 	stw	r3,0(sp)
    75d0:	d8800115 	stw	r2,4(sp)
    75d4:	01c00084 	movi	r7,2
    75d8:	980d883a 	mov	r6,r19
    75dc:	d8c03c15 	stw	r3,240(sp)
    75e0:	da003d15 	stw	r8,244(sp)
    75e4:	00087600 	call	8760 <_dtoa_r>
    75e8:	1021883a 	mov	r16,r2
    75ec:	008019c4 	movi	r2,103
    75f0:	d8c03c17 	ldw	r3,240(sp)
    75f4:	da003d17 	ldw	r8,244(sp)
    75f8:	88817126 	beq	r17,r2,7bc0 <___vfprintf_internal_r+0x1dc4>
    75fc:	008011c4 	movi	r2,71
    7600:	88829126 	beq	r17,r2,8048 <___vfprintf_internal_r+0x224c>
    7604:	80f9883a 	add	fp,r16,r3
    7608:	d9003617 	ldw	r4,216(sp)
    760c:	000d883a 	mov	r6,zero
    7610:	000f883a 	mov	r7,zero
    7614:	980b883a 	mov	r5,r19
    7618:	da003d15 	stw	r8,244(sp)
    761c:	000e7d40 	call	e7d4 <__eqdf2>
    7620:	da003d17 	ldw	r8,244(sp)
    7624:	10018d26 	beq	r2,zero,7c5c <___vfprintf_internal_r+0x1e60>
    7628:	d8802117 	ldw	r2,132(sp)
    762c:	1700062e 	bgeu	r2,fp,7648 <___vfprintf_internal_r+0x184c>
    7630:	01000c04 	movi	r4,48
    7634:	10c00044 	addi	r3,r2,1
    7638:	d8c02115 	stw	r3,132(sp)
    763c:	11000005 	stb	r4,0(r2)
    7640:	d8802117 	ldw	r2,132(sp)
    7644:	173ffb36 	bltu	r2,fp,7634 <__alt_data_end+0xfffe7634>
    7648:	1405c83a 	sub	r2,r2,r16
    764c:	d8803315 	stw	r2,204(sp)
    7650:	008011c4 	movi	r2,71
    7654:	b0817626 	beq	r22,r2,7c30 <___vfprintf_internal_r+0x1e34>
    7658:	00801944 	movi	r2,101
    765c:	1442800e 	bge	r2,r17,8060 <___vfprintf_internal_r+0x2264>
    7660:	d8c02617 	ldw	r3,152(sp)
    7664:	00801984 	movi	r2,102
    7668:	d8c03215 	stw	r3,200(sp)
    766c:	8881fe26 	beq	r17,r2,7e68 <___vfprintf_internal_r+0x206c>
    7670:	d8c03217 	ldw	r3,200(sp)
    7674:	d9003317 	ldw	r4,204(sp)
    7678:	1901dd16 	blt	r3,r4,7df0 <___vfprintf_internal_r+0x1ff4>
    767c:	9480004c 	andi	r18,r18,1
    7680:	90022b1e 	bne	r18,zero,7f30 <___vfprintf_internal_r+0x2134>
    7684:	1805883a 	mov	r2,r3
    7688:	18028316 	blt	r3,zero,8098 <___vfprintf_internal_r+0x229c>
    768c:	d8c03217 	ldw	r3,200(sp)
    7690:	044019c4 	movi	r17,103
    7694:	d8c02b15 	stw	r3,172(sp)
    7698:	df002907 	ldb	fp,164(sp)
    769c:	e001531e 	bne	fp,zero,7bec <___vfprintf_internal_r+0x1df0>
    76a0:	df002783 	ldbu	fp,158(sp)
    76a4:	d8802915 	stw	r2,164(sp)
    76a8:	dc802c17 	ldw	r18,176(sp)
    76ac:	d8002a15 	stw	zero,168(sp)
    76b0:	003baf06 	br	6570 <__alt_data_end+0xfffe6570>
    76b4:	d8c02e17 	ldw	r3,184(sp)
    76b8:	d9002e17 	ldw	r4,184(sp)
    76bc:	d9402e17 	ldw	r5,184(sp)
    76c0:	18c00017 	ldw	r3,0(r3)
    76c4:	21000117 	ldw	r4,4(r4)
    76c8:	29400204 	addi	r5,r5,8
    76cc:	d8c03615 	stw	r3,216(sp)
    76d0:	d9003815 	stw	r4,224(sp)
    76d4:	d9402e15 	stw	r5,184(sp)
    76d8:	003b5006 	br	641c <__alt_data_end+0xfffe641c>
    76dc:	ac400007 	ldb	r17,0(r21)
    76e0:	003a2806 	br	5f84 <__alt_data_end+0xfffe5f84>
    76e4:	9080100c 	andi	r2,r18,64
    76e8:	1000a826 	beq	r2,zero,798c <___vfprintf_internal_r+0x1b90>
    76ec:	d8c02e17 	ldw	r3,184(sp)
    76f0:	002d883a 	mov	r22,zero
    76f4:	1cc0000b 	ldhu	r19,0(r3)
    76f8:	18c00104 	addi	r3,r3,4
    76fc:	d8c02e15 	stw	r3,184(sp)
    7700:	003caf06 	br	69c0 <__alt_data_end+0xfffe69c0>
    7704:	d9002e17 	ldw	r4,184(sp)
    7708:	d9402a17 	ldw	r5,168(sp)
    770c:	002d883a 	mov	r22,zero
    7710:	20800104 	addi	r2,r4,4
    7714:	24c00017 	ldw	r19,0(r4)
    7718:	283ebb0e 	bge	r5,zero,7208 <__alt_data_end+0xfffe7208>
    771c:	003ef106 	br	72e4 <__alt_data_end+0xfffe72e4>
    7720:	9080040c 	andi	r2,r18,16
    7724:	1000921e 	bne	r2,zero,7970 <___vfprintf_internal_r+0x1b74>
    7728:	9480100c 	andi	r18,r18,64
    772c:	90013926 	beq	r18,zero,7c14 <___vfprintf_internal_r+0x1e18>
    7730:	d9402e17 	ldw	r5,184(sp)
    7734:	d8c02f17 	ldw	r3,188(sp)
    7738:	28800017 	ldw	r2,0(r5)
    773c:	29400104 	addi	r5,r5,4
    7740:	d9402e15 	stw	r5,184(sp)
    7744:	10c0000d 	sth	r3,0(r2)
    7748:	0039e406 	br	5edc <__alt_data_end+0xfffe5edc>
    774c:	9080100c 	andi	r2,r18,64
    7750:	10008026 	beq	r2,zero,7954 <___vfprintf_internal_r+0x1b58>
    7754:	d8802e17 	ldw	r2,184(sp)
    7758:	14c0000f 	ldh	r19,0(r2)
    775c:	10800104 	addi	r2,r2,4
    7760:	d8802e15 	stw	r2,184(sp)
    7764:	982dd7fa 	srai	r22,r19,31
    7768:	b005883a 	mov	r2,r22
    776c:	003af706 	br	634c <__alt_data_end+0xfffe634c>
    7770:	9080100c 	andi	r2,r18,64
    7774:	d8002785 	stb	zero,158(sp)
    7778:	10008a1e 	bne	r2,zero,79a4 <___vfprintf_internal_r+0x1ba8>
    777c:	d9002e17 	ldw	r4,184(sp)
    7780:	d9402a17 	ldw	r5,168(sp)
    7784:	002d883a 	mov	r22,zero
    7788:	20800104 	addi	r2,r4,4
    778c:	24c00017 	ldw	r19,0(r4)
    7790:	283e4b0e 	bge	r5,zero,70c0 <__alt_data_end+0xfffe70c0>
    7794:	9d86b03a 	or	r3,r19,r22
    7798:	d8802e15 	stw	r2,184(sp)
    779c:	183e4c1e 	bne	r3,zero,70d0 <__alt_data_end+0xfffe70d0>
    77a0:	0039883a 	mov	fp,zero
    77a4:	0005883a 	mov	r2,zero
    77a8:	003d4006 	br	6cac <__alt_data_end+0xfffe6cac>
    77ac:	01400074 	movhi	r5,1
    77b0:	29449d84 	addi	r5,r5,4726
    77b4:	d9402c15 	stw	r5,176(sp)
    77b8:	d9402c17 	ldw	r5,176(sp)
    77bc:	1c47883a 	add	r3,r3,r17
    77c0:	10800044 	addi	r2,r2,1
    77c4:	41400015 	stw	r5,0(r8)
    77c8:	44400115 	stw	r17,4(r8)
    77cc:	d8c02015 	stw	r3,128(sp)
    77d0:	d8801f15 	stw	r2,124(sp)
    77d4:	010001c4 	movi	r4,7
    77d8:	20bec816 	blt	r4,r2,72fc <__alt_data_end+0xfffe72fc>
    77dc:	42000204 	addi	r8,r8,8
    77e0:	003ecd06 	br	7318 <__alt_data_end+0xfffe7318>
    77e4:	d9002a17 	ldw	r4,168(sp)
    77e8:	d8002785 	stb	zero,158(sp)
    77ec:	203d2d16 	blt	r4,zero,6ca4 <__alt_data_end+0xfffe6ca4>
    77f0:	00bfdfc4 	movi	r2,-129
    77f4:	90a4703a 	and	r18,r18,r2
    77f8:	003a6106 	br	6180 <__alt_data_end+0xfffe6180>
    77fc:	01000074 	movhi	r4,1
    7800:	21049d84 	addi	r4,r4,4726
    7804:	d9002c15 	stw	r4,176(sp)
    7808:	003bea06 	br	67b4 <__alt_data_end+0xfffe67b4>
    780c:	d9002d17 	ldw	r4,180(sp)
    7810:	d9801e04 	addi	r6,sp,120
    7814:	b80b883a 	mov	r5,r23
    7818:	000bff40 	call	bff4 <__sprint_r>
    781c:	103a7b1e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    7820:	d8c02017 	ldw	r3,128(sp)
    7824:	da000404 	addi	r8,sp,16
    7828:	003d4106 	br	6d30 <__alt_data_end+0xfffe6d30>
    782c:	d8801f17 	ldw	r2,124(sp)
    7830:	01400074 	movhi	r5,1
    7834:	01000044 	movi	r4,1
    7838:	18c00044 	addi	r3,r3,1
    783c:	10800044 	addi	r2,r2,1
    7840:	29449d04 	addi	r5,r5,4724
    7844:	41000115 	stw	r4,4(r8)
    7848:	41400015 	stw	r5,0(r8)
    784c:	d8c02015 	stw	r3,128(sp)
    7850:	d8801f15 	stw	r2,124(sp)
    7854:	010001c4 	movi	r4,7
    7858:	20805c16 	blt	r4,r2,79cc <___vfprintf_internal_r+0x1bd0>
    785c:	42000204 	addi	r8,r8,8
    7860:	8800041e 	bne	r17,zero,7874 <___vfprintf_internal_r+0x1a78>
    7864:	d8803317 	ldw	r2,204(sp)
    7868:	1000021e 	bne	r2,zero,7874 <___vfprintf_internal_r+0x1a78>
    786c:	9080004c 	andi	r2,r18,1
    7870:	103be726 	beq	r2,zero,6810 <__alt_data_end+0xfffe6810>
    7874:	d9003717 	ldw	r4,220(sp)
    7878:	d8801f17 	ldw	r2,124(sp)
    787c:	d9403417 	ldw	r5,208(sp)
    7880:	20c7883a 	add	r3,r4,r3
    7884:	10800044 	addi	r2,r2,1
    7888:	41000115 	stw	r4,4(r8)
    788c:	41400015 	stw	r5,0(r8)
    7890:	d8c02015 	stw	r3,128(sp)
    7894:	d8801f15 	stw	r2,124(sp)
    7898:	010001c4 	movi	r4,7
    789c:	20812116 	blt	r4,r2,7d24 <___vfprintf_internal_r+0x1f28>
    78a0:	42000204 	addi	r8,r8,8
    78a4:	0463c83a 	sub	r17,zero,r17
    78a8:	0440730e 	bge	zero,r17,7a78 <___vfprintf_internal_r+0x1c7c>
    78ac:	05800404 	movi	r22,16
    78b0:	b440860e 	bge	r22,r17,7acc <___vfprintf_internal_r+0x1cd0>
    78b4:	01400074 	movhi	r5,1
    78b8:	29449d84 	addi	r5,r5,4726
    78bc:	d9402c15 	stw	r5,176(sp)
    78c0:	070001c4 	movi	fp,7
    78c4:	dcc02d17 	ldw	r19,180(sp)
    78c8:	00000306 	br	78d8 <___vfprintf_internal_r+0x1adc>
    78cc:	42000204 	addi	r8,r8,8
    78d0:	8c7ffc04 	addi	r17,r17,-16
    78d4:	b440800e 	bge	r22,r17,7ad8 <___vfprintf_internal_r+0x1cdc>
    78d8:	18c00404 	addi	r3,r3,16
    78dc:	10800044 	addi	r2,r2,1
    78e0:	45000015 	stw	r20,0(r8)
    78e4:	45800115 	stw	r22,4(r8)
    78e8:	d8c02015 	stw	r3,128(sp)
    78ec:	d8801f15 	stw	r2,124(sp)
    78f0:	e0bff60e 	bge	fp,r2,78cc <__alt_data_end+0xfffe78cc>
    78f4:	d9801e04 	addi	r6,sp,120
    78f8:	b80b883a 	mov	r5,r23
    78fc:	9809883a 	mov	r4,r19
    7900:	000bff40 	call	bff4 <__sprint_r>
    7904:	103a411e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    7908:	d8c02017 	ldw	r3,128(sp)
    790c:	d8801f17 	ldw	r2,124(sp)
    7910:	da000404 	addi	r8,sp,16
    7914:	003fee06 	br	78d0 <__alt_data_end+0xfffe78d0>
    7918:	00bfffc4 	movi	r2,-1
    791c:	003a3f06 	br	621c <__alt_data_end+0xfffe621c>
    7920:	008011c4 	movi	r2,71
    7924:	1440b816 	blt	r2,r17,7c08 <___vfprintf_internal_r+0x1e0c>
    7928:	04000074 	movhi	r16,1
    792c:	84048f04 	addi	r16,r16,4668
    7930:	00c000c4 	movi	r3,3
    7934:	00bfdfc4 	movi	r2,-129
    7938:	d8c02915 	stw	r3,164(sp)
    793c:	90a4703a 	and	r18,r18,r2
    7940:	df002783 	ldbu	fp,158(sp)
    7944:	d8c02b15 	stw	r3,172(sp)
    7948:	d8002a15 	stw	zero,168(sp)
    794c:	d8003215 	stw	zero,200(sp)
    7950:	003b0706 	br	6570 <__alt_data_end+0xfffe6570>
    7954:	d8c02e17 	ldw	r3,184(sp)
    7958:	1cc00017 	ldw	r19,0(r3)
    795c:	18c00104 	addi	r3,r3,4
    7960:	d8c02e15 	stw	r3,184(sp)
    7964:	982dd7fa 	srai	r22,r19,31
    7968:	b005883a 	mov	r2,r22
    796c:	003a7706 	br	634c <__alt_data_end+0xfffe634c>
    7970:	d8c02e17 	ldw	r3,184(sp)
    7974:	d9002f17 	ldw	r4,188(sp)
    7978:	18800017 	ldw	r2,0(r3)
    797c:	18c00104 	addi	r3,r3,4
    7980:	d8c02e15 	stw	r3,184(sp)
    7984:	11000015 	stw	r4,0(r2)
    7988:	00395406 	br	5edc <__alt_data_end+0xfffe5edc>
    798c:	d9002e17 	ldw	r4,184(sp)
    7990:	002d883a 	mov	r22,zero
    7994:	24c00017 	ldw	r19,0(r4)
    7998:	21000104 	addi	r4,r4,4
    799c:	d9002e15 	stw	r4,184(sp)
    79a0:	003c0706 	br	69c0 <__alt_data_end+0xfffe69c0>
    79a4:	d9402e17 	ldw	r5,184(sp)
    79a8:	d8c02a17 	ldw	r3,168(sp)
    79ac:	002d883a 	mov	r22,zero
    79b0:	28800104 	addi	r2,r5,4
    79b4:	2cc0000b 	ldhu	r19,0(r5)
    79b8:	183dc10e 	bge	r3,zero,70c0 <__alt_data_end+0xfffe70c0>
    79bc:	003f7506 	br	7794 <__alt_data_end+0xfffe7794>
    79c0:	04000074 	movhi	r16,1
    79c4:	84048d04 	addi	r16,r16,4660
    79c8:	003aa706 	br	6468 <__alt_data_end+0xfffe6468>
    79cc:	d9002d17 	ldw	r4,180(sp)
    79d0:	d9801e04 	addi	r6,sp,120
    79d4:	b80b883a 	mov	r5,r23
    79d8:	000bff40 	call	bff4 <__sprint_r>
    79dc:	103a0b1e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    79e0:	dc402617 	ldw	r17,152(sp)
    79e4:	d8c02017 	ldw	r3,128(sp)
    79e8:	da000404 	addi	r8,sp,16
    79ec:	003f9c06 	br	7860 <__alt_data_end+0xfffe7860>
    79f0:	ac400043 	ldbu	r17,1(r21)
    79f4:	84000814 	ori	r16,r16,32
    79f8:	ad400044 	addi	r21,r21,1
    79fc:	8c403fcc 	andi	r17,r17,255
    7a00:	8c40201c 	xori	r17,r17,128
    7a04:	8c7fe004 	addi	r17,r17,-128
    7a08:	00395e06 	br	5f84 <__alt_data_end+0xfffe5f84>
    7a0c:	d8c02e15 	stw	r3,184(sp)
    7a10:	0039883a 	mov	fp,zero
    7a14:	003e3506 	br	72ec <__alt_data_end+0xfffe72ec>
    7a18:	d9002d17 	ldw	r4,180(sp)
    7a1c:	d9801e04 	addi	r6,sp,120
    7a20:	b80b883a 	mov	r5,r23
    7a24:	000bff40 	call	bff4 <__sprint_r>
    7a28:	1039f81e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    7a2c:	d8c02017 	ldw	r3,128(sp)
    7a30:	da000404 	addi	r8,sp,16
    7a34:	003cd006 	br	6d78 <__alt_data_end+0xfffe6d78>
    7a38:	8009883a 	mov	r4,r16
    7a3c:	df003d15 	stw	fp,244(sp)
    7a40:	0005d640 	call	5d64 <strlen>
    7a44:	d8802b15 	stw	r2,172(sp)
    7a48:	da003d17 	ldw	r8,244(sp)
    7a4c:	103c200e 	bge	r2,zero,6ad0 <__alt_data_end+0xfffe6ad0>
    7a50:	0005883a 	mov	r2,zero
    7a54:	003c1e06 	br	6ad0 <__alt_data_end+0xfffe6ad0>
    7a58:	d9002d17 	ldw	r4,180(sp)
    7a5c:	d9801e04 	addi	r6,sp,120
    7a60:	b80b883a 	mov	r5,r23
    7a64:	000bff40 	call	bff4 <__sprint_r>
    7a68:	1039e81e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    7a6c:	d8c02017 	ldw	r3,128(sp)
    7a70:	d8801f17 	ldw	r2,124(sp)
    7a74:	da000404 	addi	r8,sp,16
    7a78:	d9403317 	ldw	r5,204(sp)
    7a7c:	10800044 	addi	r2,r2,1
    7a80:	44000015 	stw	r16,0(r8)
    7a84:	28c7883a 	add	r3,r5,r3
    7a88:	003b5b06 	br	67f8 <__alt_data_end+0xfffe67f8>
    7a8c:	01000074 	movhi	r4,1
    7a90:	2104a184 	addi	r4,r4,4742
    7a94:	d9003515 	stw	r4,212(sp)
    7a98:	003af206 	br	6664 <__alt_data_end+0xfffe6664>
    7a9c:	013fffc4 	movi	r4,-1
    7aa0:	003a0806 	br	62c4 <__alt_data_end+0xfffe62c4>
    7aa4:	0023883a 	mov	r17,zero
    7aa8:	003d9d06 	br	7120 <__alt_data_end+0xfffe7120>
    7aac:	d9002d17 	ldw	r4,180(sp)
    7ab0:	d9801e04 	addi	r6,sp,120
    7ab4:	b80b883a 	mov	r5,r23
    7ab8:	000bff40 	call	bff4 <__sprint_r>
    7abc:	1039d31e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    7ac0:	d8c02017 	ldw	r3,128(sp)
    7ac4:	da000404 	addi	r8,sp,16
    7ac8:	003d9406 	br	711c <__alt_data_end+0xfffe711c>
    7acc:	01000074 	movhi	r4,1
    7ad0:	21049d84 	addi	r4,r4,4726
    7ad4:	d9002c15 	stw	r4,176(sp)
    7ad8:	d9002c17 	ldw	r4,176(sp)
    7adc:	1c47883a 	add	r3,r3,r17
    7ae0:	10800044 	addi	r2,r2,1
    7ae4:	41000015 	stw	r4,0(r8)
    7ae8:	44400115 	stw	r17,4(r8)
    7aec:	d8c02015 	stw	r3,128(sp)
    7af0:	d8801f15 	stw	r2,124(sp)
    7af4:	010001c4 	movi	r4,7
    7af8:	20bfd716 	blt	r4,r2,7a58 <__alt_data_end+0xfffe7a58>
    7afc:	42000204 	addi	r8,r8,8
    7b00:	003fdd06 	br	7a78 <__alt_data_end+0xfffe7a78>
    7b04:	d9002d17 	ldw	r4,180(sp)
    7b08:	d9801e04 	addi	r6,sp,120
    7b0c:	b80b883a 	mov	r5,r23
    7b10:	000bff40 	call	bff4 <__sprint_r>
    7b14:	1039bd1e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    7b18:	d8802617 	ldw	r2,152(sp)
    7b1c:	d8c02017 	ldw	r3,128(sp)
    7b20:	da000404 	addi	r8,sp,16
    7b24:	003e1006 	br	7368 <__alt_data_end+0xfffe7368>
    7b28:	00800044 	movi	r2,1
    7b2c:	10803fcc 	andi	r2,r2,255
    7b30:	00c00044 	movi	r3,1
    7b34:	10fa0d26 	beq	r2,r3,636c <__alt_data_end+0xfffe636c>
    7b38:	00c00084 	movi	r3,2
    7b3c:	10fbaf26 	beq	r2,r3,69fc <__alt_data_end+0xfffe69fc>
    7b40:	003a6d06 	br	64f8 <__alt_data_end+0xfffe64f8>
    7b44:	01000074 	movhi	r4,1
    7b48:	2104a184 	addi	r4,r4,4742
    7b4c:	d9003515 	stw	r4,212(sp)
    7b50:	003b5406 	br	68a4 <__alt_data_end+0xfffe68a4>
    7b54:	d8802a17 	ldw	r2,168(sp)
    7b58:	00c00184 	movi	r3,6
    7b5c:	1880012e 	bgeu	r3,r2,7b64 <___vfprintf_internal_r+0x1d68>
    7b60:	1805883a 	mov	r2,r3
    7b64:	d8802b15 	stw	r2,172(sp)
    7b68:	1000ef16 	blt	r2,zero,7f28 <___vfprintf_internal_r+0x212c>
    7b6c:	04000074 	movhi	r16,1
    7b70:	d8802915 	stw	r2,164(sp)
    7b74:	dcc02e15 	stw	r19,184(sp)
    7b78:	d8002a15 	stw	zero,168(sp)
    7b7c:	d8003215 	stw	zero,200(sp)
    7b80:	84049b04 	addi	r16,r16,4716
    7b84:	0039883a 	mov	fp,zero
    7b88:	003a8006 	br	658c <__alt_data_end+0xfffe658c>
    7b8c:	0021883a 	mov	r16,zero
    7b90:	003e0706 	br	73b0 <__alt_data_end+0xfffe73b0>
    7b94:	d9002d17 	ldw	r4,180(sp)
    7b98:	d9801e04 	addi	r6,sp,120
    7b9c:	b80b883a 	mov	r5,r23
    7ba0:	000bff40 	call	bff4 <__sprint_r>
    7ba4:	1039991e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    7ba8:	d8802617 	ldw	r2,152(sp)
    7bac:	d9403317 	ldw	r5,204(sp)
    7bb0:	d8c02017 	ldw	r3,128(sp)
    7bb4:	da000404 	addi	r8,sp,16
    7bb8:	2885c83a 	sub	r2,r5,r2
    7bbc:	003dfb06 	br	73ac <__alt_data_end+0xfffe73ac>
    7bc0:	9080004c 	andi	r2,r18,1
    7bc4:	103e8f1e 	bne	r2,zero,7604 <__alt_data_end+0xfffe7604>
    7bc8:	d8802117 	ldw	r2,132(sp)
    7bcc:	003e9e06 	br	7648 <__alt_data_end+0xfffe7648>
    7bd0:	1025883a 	mov	r18,r2
    7bd4:	0039883a 	mov	fp,zero
    7bd8:	00800084 	movi	r2,2
    7bdc:	003fd306 	br	7b2c <__alt_data_end+0xfffe7b2c>
    7be0:	07000b44 	movi	fp,45
    7be4:	df002785 	stb	fp,158(sp)
    7be8:	003a1b06 	br	6458 <__alt_data_end+0xfffe6458>
    7bec:	00c00b44 	movi	r3,45
    7bf0:	d8c02785 	stb	r3,158(sp)
    7bf4:	d8802915 	stw	r2,164(sp)
    7bf8:	dc802c17 	ldw	r18,176(sp)
    7bfc:	d8002a15 	stw	zero,168(sp)
    7c00:	07000b44 	movi	fp,45
    7c04:	003a5e06 	br	6580 <__alt_data_end+0xfffe6580>
    7c08:	04000074 	movhi	r16,1
    7c0c:	84049004 	addi	r16,r16,4672
    7c10:	003f4706 	br	7930 <__alt_data_end+0xfffe7930>
    7c14:	d9002e17 	ldw	r4,184(sp)
    7c18:	d9402f17 	ldw	r5,188(sp)
    7c1c:	20800017 	ldw	r2,0(r4)
    7c20:	21000104 	addi	r4,r4,4
    7c24:	d9002e15 	stw	r4,184(sp)
    7c28:	11400015 	stw	r5,0(r2)
    7c2c:	0038ab06 	br	5edc <__alt_data_end+0xfffe5edc>
    7c30:	dd802617 	ldw	r22,152(sp)
    7c34:	00bfff44 	movi	r2,-3
    7c38:	b0801c16 	blt	r22,r2,7cac <___vfprintf_internal_r+0x1eb0>
    7c3c:	d9402a17 	ldw	r5,168(sp)
    7c40:	2d801a16 	blt	r5,r22,7cac <___vfprintf_internal_r+0x1eb0>
    7c44:	dd803215 	stw	r22,200(sp)
    7c48:	003e8906 	br	7670 <__alt_data_end+0xfffe7670>
    7c4c:	01000074 	movhi	r4,1
    7c50:	21049d84 	addi	r4,r4,4726
    7c54:	d9002c15 	stw	r4,176(sp)
    7c58:	003c9106 	br	6ea0 <__alt_data_end+0xfffe6ea0>
    7c5c:	e005883a 	mov	r2,fp
    7c60:	003e7906 	br	7648 <__alt_data_end+0xfffe7648>
    7c64:	d9002a17 	ldw	r4,168(sp)
    7c68:	df002783 	ldbu	fp,158(sp)
    7c6c:	dcc02e15 	stw	r19,184(sp)
    7c70:	d9002915 	stw	r4,164(sp)
    7c74:	d9002b15 	stw	r4,172(sp)
    7c78:	d8002a15 	stw	zero,168(sp)
    7c7c:	d8003215 	stw	zero,200(sp)
    7c80:	003a3b06 	br	6570 <__alt_data_end+0xfffe6570>
    7c84:	9080004c 	andi	r2,r18,1
    7c88:	0039883a 	mov	fp,zero
    7c8c:	10000426 	beq	r2,zero,7ca0 <___vfprintf_internal_r+0x1ea4>
    7c90:	00800c04 	movi	r2,48
    7c94:	dc001dc4 	addi	r16,sp,119
    7c98:	d8801dc5 	stb	r2,119(sp)
    7c9c:	003b6406 	br	6a30 <__alt_data_end+0xfffe6a30>
    7ca0:	d8002b15 	stw	zero,172(sp)
    7ca4:	dc001e04 	addi	r16,sp,120
    7ca8:	003a2b06 	br	6558 <__alt_data_end+0xfffe6558>
    7cac:	8c7fff84 	addi	r17,r17,-2
    7cb0:	b5bfffc4 	addi	r22,r22,-1
    7cb4:	dd802615 	stw	r22,152(sp)
    7cb8:	dc4022c5 	stb	r17,139(sp)
    7cbc:	b000bf16 	blt	r22,zero,7fbc <___vfprintf_internal_r+0x21c0>
    7cc0:	00800ac4 	movi	r2,43
    7cc4:	d8802305 	stb	r2,140(sp)
    7cc8:	00800244 	movi	r2,9
    7ccc:	15807016 	blt	r2,r22,7e90 <___vfprintf_internal_r+0x2094>
    7cd0:	00800c04 	movi	r2,48
    7cd4:	b5800c04 	addi	r22,r22,48
    7cd8:	d8802345 	stb	r2,141(sp)
    7cdc:	dd802385 	stb	r22,142(sp)
    7ce0:	d88023c4 	addi	r2,sp,143
    7ce4:	df0022c4 	addi	fp,sp,139
    7ce8:	d8c03317 	ldw	r3,204(sp)
    7cec:	1739c83a 	sub	fp,r2,fp
    7cf0:	d9003317 	ldw	r4,204(sp)
    7cf4:	e0c7883a 	add	r3,fp,r3
    7cf8:	df003a15 	stw	fp,232(sp)
    7cfc:	d8c02b15 	stw	r3,172(sp)
    7d00:	00800044 	movi	r2,1
    7d04:	1100b30e 	bge	r2,r4,7fd4 <___vfprintf_internal_r+0x21d8>
    7d08:	d8c02b17 	ldw	r3,172(sp)
    7d0c:	18c00044 	addi	r3,r3,1
    7d10:	d8c02b15 	stw	r3,172(sp)
    7d14:	1805883a 	mov	r2,r3
    7d18:	1800ac16 	blt	r3,zero,7fcc <___vfprintf_internal_r+0x21d0>
    7d1c:	d8003215 	stw	zero,200(sp)
    7d20:	003e5d06 	br	7698 <__alt_data_end+0xfffe7698>
    7d24:	d9002d17 	ldw	r4,180(sp)
    7d28:	d9801e04 	addi	r6,sp,120
    7d2c:	b80b883a 	mov	r5,r23
    7d30:	000bff40 	call	bff4 <__sprint_r>
    7d34:	1039351e 	bne	r2,zero,620c <__alt_data_end+0xfffe620c>
    7d38:	dc402617 	ldw	r17,152(sp)
    7d3c:	d8c02017 	ldw	r3,128(sp)
    7d40:	d8801f17 	ldw	r2,124(sp)
    7d44:	da000404 	addi	r8,sp,16
    7d48:	003ed606 	br	78a4 <__alt_data_end+0xfffe78a4>
    7d4c:	182b883a 	mov	r21,r3
    7d50:	d8002a15 	stw	zero,168(sp)
    7d54:	00388c06 	br	5f88 <__alt_data_end+0xfffe5f88>
    7d58:	d8802a17 	ldw	r2,168(sp)
    7d5c:	103e071e 	bne	r2,zero,757c <__alt_data_end+0xfffe757c>
    7d60:	dc002a15 	stw	r16,168(sp)
    7d64:	003e0506 	br	757c <__alt_data_end+0xfffe757c>
    7d68:	d9002a17 	ldw	r4,168(sp)
    7d6c:	20c00044 	addi	r3,r4,1
    7d70:	003e0f06 	br	75b0 <__alt_data_end+0xfffe75b0>
    7d74:	01400184 	movi	r5,6
    7d78:	d9402a15 	stw	r5,168(sp)
    7d7c:	003dff06 	br	757c <__alt_data_end+0xfffe757c>
    7d80:	d8802104 	addi	r2,sp,132
    7d84:	d8800315 	stw	r2,12(sp)
    7d88:	d8802504 	addi	r2,sp,148
    7d8c:	d8800215 	stw	r2,8(sp)
    7d90:	d8802604 	addi	r2,sp,152
    7d94:	d8800115 	stw	r2,4(sp)
    7d98:	d8802a17 	ldw	r2,168(sp)
    7d9c:	d9403617 	ldw	r5,216(sp)
    7da0:	d9002d17 	ldw	r4,180(sp)
    7da4:	d8800015 	stw	r2,0(sp)
    7da8:	01c000c4 	movi	r7,3
    7dac:	980d883a 	mov	r6,r19
    7db0:	da003d15 	stw	r8,244(sp)
    7db4:	00087600 	call	8760 <_dtoa_r>
    7db8:	d8c02a17 	ldw	r3,168(sp)
    7dbc:	da003d17 	ldw	r8,244(sp)
    7dc0:	1021883a 	mov	r16,r2
    7dc4:	10f9883a 	add	fp,r2,r3
    7dc8:	81000007 	ldb	r4,0(r16)
    7dcc:	00800c04 	movi	r2,48
    7dd0:	20805e26 	beq	r4,r2,7f4c <___vfprintf_internal_r+0x2150>
    7dd4:	d8c02617 	ldw	r3,152(sp)
    7dd8:	e0f9883a 	add	fp,fp,r3
    7ddc:	003e0a06 	br	7608 <__alt_data_end+0xfffe7608>
    7de0:	00c00b44 	movi	r3,45
    7de4:	24e0003c 	xorhi	r19,r4,32768
    7de8:	d8c02905 	stb	r3,164(sp)
    7dec:	003de906 	br	7594 <__alt_data_end+0xfffe7594>
    7df0:	d8c03217 	ldw	r3,200(sp)
    7df4:	00c07a0e 	bge	zero,r3,7fe0 <___vfprintf_internal_r+0x21e4>
    7df8:	00800044 	movi	r2,1
    7dfc:	d9003317 	ldw	r4,204(sp)
    7e00:	1105883a 	add	r2,r2,r4
    7e04:	d8802b15 	stw	r2,172(sp)
    7e08:	10004e16 	blt	r2,zero,7f44 <___vfprintf_internal_r+0x2148>
    7e0c:	044019c4 	movi	r17,103
    7e10:	003e2106 	br	7698 <__alt_data_end+0xfffe7698>
    7e14:	d9002a17 	ldw	r4,168(sp)
    7e18:	d8802104 	addi	r2,sp,132
    7e1c:	d8800315 	stw	r2,12(sp)
    7e20:	d9000015 	stw	r4,0(sp)
    7e24:	d8802504 	addi	r2,sp,148
    7e28:	d9403617 	ldw	r5,216(sp)
    7e2c:	d9002d17 	ldw	r4,180(sp)
    7e30:	d8800215 	stw	r2,8(sp)
    7e34:	d8802604 	addi	r2,sp,152
    7e38:	d8800115 	stw	r2,4(sp)
    7e3c:	01c000c4 	movi	r7,3
    7e40:	980d883a 	mov	r6,r19
    7e44:	da003d15 	stw	r8,244(sp)
    7e48:	00087600 	call	8760 <_dtoa_r>
    7e4c:	d8c02a17 	ldw	r3,168(sp)
    7e50:	da003d17 	ldw	r8,244(sp)
    7e54:	1021883a 	mov	r16,r2
    7e58:	00801184 	movi	r2,70
    7e5c:	80f9883a 	add	fp,r16,r3
    7e60:	88bfd926 	beq	r17,r2,7dc8 <__alt_data_end+0xfffe7dc8>
    7e64:	003de806 	br	7608 <__alt_data_end+0xfffe7608>
    7e68:	d9002a17 	ldw	r4,168(sp)
    7e6c:	00c04d0e 	bge	zero,r3,7fa4 <___vfprintf_internal_r+0x21a8>
    7e70:	2000441e 	bne	r4,zero,7f84 <___vfprintf_internal_r+0x2188>
    7e74:	9480004c 	andi	r18,r18,1
    7e78:	9000421e 	bne	r18,zero,7f84 <___vfprintf_internal_r+0x2188>
    7e7c:	1805883a 	mov	r2,r3
    7e80:	18006f16 	blt	r3,zero,8040 <___vfprintf_internal_r+0x2244>
    7e84:	d8c03217 	ldw	r3,200(sp)
    7e88:	d8c02b15 	stw	r3,172(sp)
    7e8c:	003e0206 	br	7698 <__alt_data_end+0xfffe7698>
    7e90:	df0022c4 	addi	fp,sp,139
    7e94:	dc002a15 	stw	r16,168(sp)
    7e98:	4027883a 	mov	r19,r8
    7e9c:	e021883a 	mov	r16,fp
    7ea0:	b009883a 	mov	r4,r22
    7ea4:	01400284 	movi	r5,10
    7ea8:	00035340 	call	3534 <__modsi3>
    7eac:	10800c04 	addi	r2,r2,48
    7eb0:	843fffc4 	addi	r16,r16,-1
    7eb4:	b009883a 	mov	r4,r22
    7eb8:	01400284 	movi	r5,10
    7ebc:	80800005 	stb	r2,0(r16)
    7ec0:	00034b00 	call	34b0 <__divsi3>
    7ec4:	102d883a 	mov	r22,r2
    7ec8:	00800244 	movi	r2,9
    7ecc:	15bff416 	blt	r2,r22,7ea0 <__alt_data_end+0xfffe7ea0>
    7ed0:	9811883a 	mov	r8,r19
    7ed4:	b0800c04 	addi	r2,r22,48
    7ed8:	8027883a 	mov	r19,r16
    7edc:	997fffc4 	addi	r5,r19,-1
    7ee0:	98bfffc5 	stb	r2,-1(r19)
    7ee4:	dc002a17 	ldw	r16,168(sp)
    7ee8:	2f006d2e 	bgeu	r5,fp,80a0 <___vfprintf_internal_r+0x22a4>
    7eec:	d9c02384 	addi	r7,sp,142
    7ef0:	3ccfc83a 	sub	r7,r7,r19
    7ef4:	d9002344 	addi	r4,sp,141
    7ef8:	e1cf883a 	add	r7,fp,r7
    7efc:	00000106 	br	7f04 <___vfprintf_internal_r+0x2108>
    7f00:	28800003 	ldbu	r2,0(r5)
    7f04:	20800005 	stb	r2,0(r4)
    7f08:	21000044 	addi	r4,r4,1
    7f0c:	29400044 	addi	r5,r5,1
    7f10:	393ffb1e 	bne	r7,r4,7f00 <__alt_data_end+0xfffe7f00>
    7f14:	d8802304 	addi	r2,sp,140
    7f18:	14c5c83a 	sub	r2,r2,r19
    7f1c:	d8c02344 	addi	r3,sp,141
    7f20:	1885883a 	add	r2,r3,r2
    7f24:	003f7006 	br	7ce8 <__alt_data_end+0xfffe7ce8>
    7f28:	0005883a 	mov	r2,zero
    7f2c:	003f0f06 	br	7b6c <__alt_data_end+0xfffe7b6c>
    7f30:	d8c03217 	ldw	r3,200(sp)
    7f34:	18c00044 	addi	r3,r3,1
    7f38:	d8c02b15 	stw	r3,172(sp)
    7f3c:	1805883a 	mov	r2,r3
    7f40:	183fb20e 	bge	r3,zero,7e0c <__alt_data_end+0xfffe7e0c>
    7f44:	0005883a 	mov	r2,zero
    7f48:	003fb006 	br	7e0c <__alt_data_end+0xfffe7e0c>
    7f4c:	d9003617 	ldw	r4,216(sp)
    7f50:	000d883a 	mov	r6,zero
    7f54:	000f883a 	mov	r7,zero
    7f58:	980b883a 	mov	r5,r19
    7f5c:	d8c03c15 	stw	r3,240(sp)
    7f60:	da003d15 	stw	r8,244(sp)
    7f64:	000e7d40 	call	e7d4 <__eqdf2>
    7f68:	d8c03c17 	ldw	r3,240(sp)
    7f6c:	da003d17 	ldw	r8,244(sp)
    7f70:	103f9826 	beq	r2,zero,7dd4 <__alt_data_end+0xfffe7dd4>
    7f74:	00800044 	movi	r2,1
    7f78:	10c7c83a 	sub	r3,r2,r3
    7f7c:	d8c02615 	stw	r3,152(sp)
    7f80:	003f9506 	br	7dd8 <__alt_data_end+0xfffe7dd8>
    7f84:	d9002a17 	ldw	r4,168(sp)
    7f88:	d8c03217 	ldw	r3,200(sp)
    7f8c:	20800044 	addi	r2,r4,1
    7f90:	1885883a 	add	r2,r3,r2
    7f94:	d8802b15 	stw	r2,172(sp)
    7f98:	103dbf0e 	bge	r2,zero,7698 <__alt_data_end+0xfffe7698>
    7f9c:	0005883a 	mov	r2,zero
    7fa0:	003dbd06 	br	7698 <__alt_data_end+0xfffe7698>
    7fa4:	2000201e 	bne	r4,zero,8028 <___vfprintf_internal_r+0x222c>
    7fa8:	9480004c 	andi	r18,r18,1
    7fac:	90001e1e 	bne	r18,zero,8028 <___vfprintf_internal_r+0x222c>
    7fb0:	00800044 	movi	r2,1
    7fb4:	d8802b15 	stw	r2,172(sp)
    7fb8:	003db706 	br	7698 <__alt_data_end+0xfffe7698>
    7fbc:	00800b44 	movi	r2,45
    7fc0:	05adc83a 	sub	r22,zero,r22
    7fc4:	d8802305 	stb	r2,140(sp)
    7fc8:	003f3f06 	br	7cc8 <__alt_data_end+0xfffe7cc8>
    7fcc:	0005883a 	mov	r2,zero
    7fd0:	003f5206 	br	7d1c <__alt_data_end+0xfffe7d1c>
    7fd4:	90a4703a 	and	r18,r18,r2
    7fd8:	903f4e26 	beq	r18,zero,7d14 <__alt_data_end+0xfffe7d14>
    7fdc:	003f4a06 	br	7d08 <__alt_data_end+0xfffe7d08>
    7fe0:	00800084 	movi	r2,2
    7fe4:	10c5c83a 	sub	r2,r2,r3
    7fe8:	003f8406 	br	7dfc <__alt_data_end+0xfffe7dfc>
    7fec:	d9402e17 	ldw	r5,184(sp)
    7ff0:	d9002e17 	ldw	r4,184(sp)
    7ff4:	ac400043 	ldbu	r17,1(r21)
    7ff8:	29400017 	ldw	r5,0(r5)
    7ffc:	20800104 	addi	r2,r4,4
    8000:	d8802e15 	stw	r2,184(sp)
    8004:	d9402a15 	stw	r5,168(sp)
    8008:	182b883a 	mov	r21,r3
    800c:	283e7b0e 	bge	r5,zero,79fc <__alt_data_end+0xfffe79fc>
    8010:	8c403fcc 	andi	r17,r17,255
    8014:	017fffc4 	movi	r5,-1
    8018:	8c40201c 	xori	r17,r17,128
    801c:	d9402a15 	stw	r5,168(sp)
    8020:	8c7fe004 	addi	r17,r17,-128
    8024:	0037d706 	br	5f84 <__alt_data_end+0xfffe5f84>
    8028:	d8c02a17 	ldw	r3,168(sp)
    802c:	18c00084 	addi	r3,r3,2
    8030:	d8c02b15 	stw	r3,172(sp)
    8034:	1805883a 	mov	r2,r3
    8038:	183d970e 	bge	r3,zero,7698 <__alt_data_end+0xfffe7698>
    803c:	003fd706 	br	7f9c <__alt_data_end+0xfffe7f9c>
    8040:	0005883a 	mov	r2,zero
    8044:	003f8f06 	br	7e84 <__alt_data_end+0xfffe7e84>
    8048:	9080004c 	andi	r2,r18,1
    804c:	103f821e 	bne	r2,zero,7e58 <__alt_data_end+0xfffe7e58>
    8050:	d8802117 	ldw	r2,132(sp)
    8054:	1405c83a 	sub	r2,r2,r16
    8058:	d8803315 	stw	r2,204(sp)
    805c:	b47ef426 	beq	r22,r17,7c30 <__alt_data_end+0xfffe7c30>
    8060:	dd802617 	ldw	r22,152(sp)
    8064:	003f1206 	br	7cb0 <__alt_data_end+0xfffe7cb0>
    8068:	d8c02b03 	ldbu	r3,172(sp)
    806c:	d8c02785 	stb	r3,158(sp)
    8070:	0038df06 	br	63f0 <__alt_data_end+0xfffe63f0>
    8074:	d8c02b03 	ldbu	r3,172(sp)
    8078:	d8c02785 	stb	r3,158(sp)
    807c:	0038aa06 	br	6328 <__alt_data_end+0xfffe6328>
    8080:	d8c02b03 	ldbu	r3,172(sp)
    8084:	d8c02785 	stb	r3,158(sp)
    8088:	003a4306 	br	6998 <__alt_data_end+0xfffe6998>
    808c:	d8c02b03 	ldbu	r3,172(sp)
    8090:	d8c02785 	stb	r3,158(sp)
    8094:	003af506 	br	6c6c <__alt_data_end+0xfffe6c6c>
    8098:	0005883a 	mov	r2,zero
    809c:	003d7b06 	br	768c <__alt_data_end+0xfffe768c>
    80a0:	d8802344 	addi	r2,sp,141
    80a4:	003f1006 	br	7ce8 <__alt_data_end+0xfffe7ce8>
    80a8:	d8c02b03 	ldbu	r3,172(sp)
    80ac:	d8c02785 	stb	r3,158(sp)
    80b0:	0038fd06 	br	64a8 <__alt_data_end+0xfffe64a8>
    80b4:	d8c02b03 	ldbu	r3,172(sp)
    80b8:	d8c02785 	stb	r3,158(sp)
    80bc:	003a9706 	br	6b1c <__alt_data_end+0xfffe6b1c>
    80c0:	d8c02b03 	ldbu	r3,172(sp)
    80c4:	d8c02785 	stb	r3,158(sp)
    80c8:	003a1806 	br	692c <__alt_data_end+0xfffe692c>
    80cc:	d8c02b03 	ldbu	r3,172(sp)
    80d0:	d8c02785 	stb	r3,158(sp)
    80d4:	003abe06 	br	6bd0 <__alt_data_end+0xfffe6bd0>

000080d8 <__vfprintf_internal>:
    80d8:	00800074 	movhi	r2,1
    80dc:	108bb704 	addi	r2,r2,11996
    80e0:	300f883a 	mov	r7,r6
    80e4:	280d883a 	mov	r6,r5
    80e8:	200b883a 	mov	r5,r4
    80ec:	11000017 	ldw	r4,0(r2)
    80f0:	0005dfc1 	jmpi	5dfc <___vfprintf_internal_r>

000080f4 <__sbprintf>:
    80f4:	2880030b 	ldhu	r2,12(r5)
    80f8:	2ac01917 	ldw	r11,100(r5)
    80fc:	2a80038b 	ldhu	r10,14(r5)
    8100:	2a400717 	ldw	r9,28(r5)
    8104:	2a000917 	ldw	r8,36(r5)
    8108:	defee204 	addi	sp,sp,-1144
    810c:	00c10004 	movi	r3,1024
    8110:	dc011a15 	stw	r16,1128(sp)
    8114:	10bfff4c 	andi	r2,r2,65533
    8118:	2821883a 	mov	r16,r5
    811c:	d8cb883a 	add	r5,sp,r3
    8120:	dc811c15 	stw	r18,1136(sp)
    8124:	dc411b15 	stw	r17,1132(sp)
    8128:	dfc11d15 	stw	ra,1140(sp)
    812c:	2025883a 	mov	r18,r4
    8130:	d881030d 	sth	r2,1036(sp)
    8134:	dac11915 	stw	r11,1124(sp)
    8138:	da81038d 	sth	r10,1038(sp)
    813c:	da410715 	stw	r9,1052(sp)
    8140:	da010915 	stw	r8,1060(sp)
    8144:	dec10015 	stw	sp,1024(sp)
    8148:	dec10415 	stw	sp,1040(sp)
    814c:	d8c10215 	stw	r3,1032(sp)
    8150:	d8c10515 	stw	r3,1044(sp)
    8154:	d8010615 	stw	zero,1048(sp)
    8158:	0005dfc0 	call	5dfc <___vfprintf_internal_r>
    815c:	1023883a 	mov	r17,r2
    8160:	10000416 	blt	r2,zero,8174 <__sbprintf+0x80>
    8164:	d9410004 	addi	r5,sp,1024
    8168:	9009883a 	mov	r4,r18
    816c:	00039bc0 	call	39bc <_fflush_r>
    8170:	10000d1e 	bne	r2,zero,81a8 <__sbprintf+0xb4>
    8174:	d881030b 	ldhu	r2,1036(sp)
    8178:	1080100c 	andi	r2,r2,64
    817c:	10000326 	beq	r2,zero,818c <__sbprintf+0x98>
    8180:	8080030b 	ldhu	r2,12(r16)
    8184:	10801014 	ori	r2,r2,64
    8188:	8080030d 	sth	r2,12(r16)
    818c:	8805883a 	mov	r2,r17
    8190:	dfc11d17 	ldw	ra,1140(sp)
    8194:	dc811c17 	ldw	r18,1136(sp)
    8198:	dc411b17 	ldw	r17,1132(sp)
    819c:	dc011a17 	ldw	r16,1128(sp)
    81a0:	dec11e04 	addi	sp,sp,1144
    81a4:	f800283a 	ret
    81a8:	047fffc4 	movi	r17,-1
    81ac:	003ff106 	br	8174 <__alt_data_end+0xfffe8174>

000081b0 <_write_r>:
    81b0:	defffd04 	addi	sp,sp,-12
    81b4:	2805883a 	mov	r2,r5
    81b8:	dc000015 	stw	r16,0(sp)
    81bc:	04000074 	movhi	r16,1
    81c0:	dc400115 	stw	r17,4(sp)
    81c4:	300b883a 	mov	r5,r6
    81c8:	84128104 	addi	r16,r16,18948
    81cc:	2023883a 	mov	r17,r4
    81d0:	380d883a 	mov	r6,r7
    81d4:	1009883a 	mov	r4,r2
    81d8:	dfc00215 	stw	ra,8(sp)
    81dc:	80000015 	stw	zero,0(r16)
    81e0:	000f5c40 	call	f5c4 <write>
    81e4:	00ffffc4 	movi	r3,-1
    81e8:	10c00526 	beq	r2,r3,8200 <_write_r+0x50>
    81ec:	dfc00217 	ldw	ra,8(sp)
    81f0:	dc400117 	ldw	r17,4(sp)
    81f4:	dc000017 	ldw	r16,0(sp)
    81f8:	dec00304 	addi	sp,sp,12
    81fc:	f800283a 	ret
    8200:	80c00017 	ldw	r3,0(r16)
    8204:	183ff926 	beq	r3,zero,81ec <__alt_data_end+0xfffe81ec>
    8208:	88c00015 	stw	r3,0(r17)
    820c:	003ff706 	br	81ec <__alt_data_end+0xfffe81ec>

00008210 <__swsetup_r>:
    8210:	00800074 	movhi	r2,1
    8214:	defffd04 	addi	sp,sp,-12
    8218:	108bb704 	addi	r2,r2,11996
    821c:	dc400115 	stw	r17,4(sp)
    8220:	2023883a 	mov	r17,r4
    8224:	11000017 	ldw	r4,0(r2)
    8228:	dc000015 	stw	r16,0(sp)
    822c:	dfc00215 	stw	ra,8(sp)
    8230:	2821883a 	mov	r16,r5
    8234:	20000226 	beq	r4,zero,8240 <__swsetup_r+0x30>
    8238:	20800e17 	ldw	r2,56(r4)
    823c:	10003126 	beq	r2,zero,8304 <__swsetup_r+0xf4>
    8240:	8080030b 	ldhu	r2,12(r16)
    8244:	10c0020c 	andi	r3,r2,8
    8248:	1009883a 	mov	r4,r2
    824c:	18000f26 	beq	r3,zero,828c <__swsetup_r+0x7c>
    8250:	80c00417 	ldw	r3,16(r16)
    8254:	18001526 	beq	r3,zero,82ac <__swsetup_r+0x9c>
    8258:	1100004c 	andi	r4,r2,1
    825c:	20001c1e 	bne	r4,zero,82d0 <__swsetup_r+0xc0>
    8260:	1080008c 	andi	r2,r2,2
    8264:	1000291e 	bne	r2,zero,830c <__swsetup_r+0xfc>
    8268:	80800517 	ldw	r2,20(r16)
    826c:	80800215 	stw	r2,8(r16)
    8270:	18001c26 	beq	r3,zero,82e4 <__swsetup_r+0xd4>
    8274:	0005883a 	mov	r2,zero
    8278:	dfc00217 	ldw	ra,8(sp)
    827c:	dc400117 	ldw	r17,4(sp)
    8280:	dc000017 	ldw	r16,0(sp)
    8284:	dec00304 	addi	sp,sp,12
    8288:	f800283a 	ret
    828c:	2080040c 	andi	r2,r4,16
    8290:	10002e26 	beq	r2,zero,834c <__swsetup_r+0x13c>
    8294:	2080010c 	andi	r2,r4,4
    8298:	10001e1e 	bne	r2,zero,8314 <__swsetup_r+0x104>
    829c:	80c00417 	ldw	r3,16(r16)
    82a0:	20800214 	ori	r2,r4,8
    82a4:	8080030d 	sth	r2,12(r16)
    82a8:	183feb1e 	bne	r3,zero,8258 <__alt_data_end+0xfffe8258>
    82ac:	1100a00c 	andi	r4,r2,640
    82b0:	01408004 	movi	r5,512
    82b4:	217fe826 	beq	r4,r5,8258 <__alt_data_end+0xfffe8258>
    82b8:	800b883a 	mov	r5,r16
    82bc:	8809883a 	mov	r4,r17
    82c0:	0004c0c0 	call	4c0c <__smakebuf_r>
    82c4:	8080030b 	ldhu	r2,12(r16)
    82c8:	80c00417 	ldw	r3,16(r16)
    82cc:	003fe206 	br	8258 <__alt_data_end+0xfffe8258>
    82d0:	80800517 	ldw	r2,20(r16)
    82d4:	80000215 	stw	zero,8(r16)
    82d8:	0085c83a 	sub	r2,zero,r2
    82dc:	80800615 	stw	r2,24(r16)
    82e0:	183fe41e 	bne	r3,zero,8274 <__alt_data_end+0xfffe8274>
    82e4:	80c0030b 	ldhu	r3,12(r16)
    82e8:	0005883a 	mov	r2,zero
    82ec:	1900200c 	andi	r4,r3,128
    82f0:	203fe126 	beq	r4,zero,8278 <__alt_data_end+0xfffe8278>
    82f4:	18c01014 	ori	r3,r3,64
    82f8:	80c0030d 	sth	r3,12(r16)
    82fc:	00bfffc4 	movi	r2,-1
    8300:	003fdd06 	br	8278 <__alt_data_end+0xfffe8278>
    8304:	0003da80 	call	3da8 <__sinit>
    8308:	003fcd06 	br	8240 <__alt_data_end+0xfffe8240>
    830c:	0005883a 	mov	r2,zero
    8310:	003fd606 	br	826c <__alt_data_end+0xfffe826c>
    8314:	81400c17 	ldw	r5,48(r16)
    8318:	28000626 	beq	r5,zero,8334 <__swsetup_r+0x124>
    831c:	80801004 	addi	r2,r16,64
    8320:	28800326 	beq	r5,r2,8330 <__swsetup_r+0x120>
    8324:	8809883a 	mov	r4,r17
    8328:	00042980 	call	4298 <_free_r>
    832c:	8100030b 	ldhu	r4,12(r16)
    8330:	80000c15 	stw	zero,48(r16)
    8334:	80c00417 	ldw	r3,16(r16)
    8338:	00bff6c4 	movi	r2,-37
    833c:	1108703a 	and	r4,r2,r4
    8340:	80000115 	stw	zero,4(r16)
    8344:	80c00015 	stw	r3,0(r16)
    8348:	003fd506 	br	82a0 <__alt_data_end+0xfffe82a0>
    834c:	00800244 	movi	r2,9
    8350:	88800015 	stw	r2,0(r17)
    8354:	20801014 	ori	r2,r4,64
    8358:	8080030d 	sth	r2,12(r16)
    835c:	00bfffc4 	movi	r2,-1
    8360:	003fc506 	br	8278 <__alt_data_end+0xfffe8278>

00008364 <_close_r>:
    8364:	defffd04 	addi	sp,sp,-12
    8368:	dc000015 	stw	r16,0(sp)
    836c:	04000074 	movhi	r16,1
    8370:	dc400115 	stw	r17,4(sp)
    8374:	84128104 	addi	r16,r16,18948
    8378:	2023883a 	mov	r17,r4
    837c:	2809883a 	mov	r4,r5
    8380:	dfc00215 	stw	ra,8(sp)
    8384:	80000015 	stw	zero,0(r16)
    8388:	000eab40 	call	eab4 <close>
    838c:	00ffffc4 	movi	r3,-1
    8390:	10c00526 	beq	r2,r3,83a8 <_close_r+0x44>
    8394:	dfc00217 	ldw	ra,8(sp)
    8398:	dc400117 	ldw	r17,4(sp)
    839c:	dc000017 	ldw	r16,0(sp)
    83a0:	dec00304 	addi	sp,sp,12
    83a4:	f800283a 	ret
    83a8:	80c00017 	ldw	r3,0(r16)
    83ac:	183ff926 	beq	r3,zero,8394 <__alt_data_end+0xfffe8394>
    83b0:	88c00015 	stw	r3,0(r17)
    83b4:	003ff706 	br	8394 <__alt_data_end+0xfffe8394>

000083b8 <__call_exitprocs>:
    83b8:	defff504 	addi	sp,sp,-44
    83bc:	df000915 	stw	fp,36(sp)
    83c0:	dd400615 	stw	r21,24(sp)
    83c4:	dc800315 	stw	r18,12(sp)
    83c8:	dfc00a15 	stw	ra,40(sp)
    83cc:	ddc00815 	stw	r23,32(sp)
    83d0:	dd800715 	stw	r22,28(sp)
    83d4:	dd000515 	stw	r20,20(sp)
    83d8:	dcc00415 	stw	r19,16(sp)
    83dc:	dc400215 	stw	r17,8(sp)
    83e0:	dc000115 	stw	r16,4(sp)
    83e4:	d9000015 	stw	r4,0(sp)
    83e8:	2839883a 	mov	fp,r5
    83ec:	04800044 	movi	r18,1
    83f0:	057fffc4 	movi	r21,-1
    83f4:	00800074 	movhi	r2,1
    83f8:	108bb604 	addi	r2,r2,11992
    83fc:	12000017 	ldw	r8,0(r2)
    8400:	45005217 	ldw	r20,328(r8)
    8404:	44c05204 	addi	r19,r8,328
    8408:	a0001c26 	beq	r20,zero,847c <__call_exitprocs+0xc4>
    840c:	a0800117 	ldw	r2,4(r20)
    8410:	15ffffc4 	addi	r23,r2,-1
    8414:	b8000d16 	blt	r23,zero,844c <__call_exitprocs+0x94>
    8418:	14000044 	addi	r16,r2,1
    841c:	8421883a 	add	r16,r16,r16
    8420:	8421883a 	add	r16,r16,r16
    8424:	84402004 	addi	r17,r16,128
    8428:	a463883a 	add	r17,r20,r17
    842c:	a421883a 	add	r16,r20,r16
    8430:	e0001e26 	beq	fp,zero,84ac <__call_exitprocs+0xf4>
    8434:	80804017 	ldw	r2,256(r16)
    8438:	e0801c26 	beq	fp,r2,84ac <__call_exitprocs+0xf4>
    843c:	bdffffc4 	addi	r23,r23,-1
    8440:	843fff04 	addi	r16,r16,-4
    8444:	8c7fff04 	addi	r17,r17,-4
    8448:	bd7ff91e 	bne	r23,r21,8430 <__alt_data_end+0xfffe8430>
    844c:	00800034 	movhi	r2,0
    8450:	10800004 	addi	r2,r2,0
    8454:	10000926 	beq	r2,zero,847c <__call_exitprocs+0xc4>
    8458:	a0800117 	ldw	r2,4(r20)
    845c:	1000301e 	bne	r2,zero,8520 <__call_exitprocs+0x168>
    8460:	a0800017 	ldw	r2,0(r20)
    8464:	10003226 	beq	r2,zero,8530 <__call_exitprocs+0x178>
    8468:	a009883a 	mov	r4,r20
    846c:	98800015 	stw	r2,0(r19)
    8470:	00000000 	call	0 <__reset>
    8474:	9d000017 	ldw	r20,0(r19)
    8478:	a03fe41e 	bne	r20,zero,840c <__alt_data_end+0xfffe840c>
    847c:	dfc00a17 	ldw	ra,40(sp)
    8480:	df000917 	ldw	fp,36(sp)
    8484:	ddc00817 	ldw	r23,32(sp)
    8488:	dd800717 	ldw	r22,28(sp)
    848c:	dd400617 	ldw	r21,24(sp)
    8490:	dd000517 	ldw	r20,20(sp)
    8494:	dcc00417 	ldw	r19,16(sp)
    8498:	dc800317 	ldw	r18,12(sp)
    849c:	dc400217 	ldw	r17,8(sp)
    84a0:	dc000117 	ldw	r16,4(sp)
    84a4:	dec00b04 	addi	sp,sp,44
    84a8:	f800283a 	ret
    84ac:	a0800117 	ldw	r2,4(r20)
    84b0:	80c00017 	ldw	r3,0(r16)
    84b4:	10bfffc4 	addi	r2,r2,-1
    84b8:	15c01426 	beq	r2,r23,850c <__call_exitprocs+0x154>
    84bc:	80000015 	stw	zero,0(r16)
    84c0:	183fde26 	beq	r3,zero,843c <__alt_data_end+0xfffe843c>
    84c4:	95c8983a 	sll	r4,r18,r23
    84c8:	a0806217 	ldw	r2,392(r20)
    84cc:	a5800117 	ldw	r22,4(r20)
    84d0:	2084703a 	and	r2,r4,r2
    84d4:	10000b26 	beq	r2,zero,8504 <__call_exitprocs+0x14c>
    84d8:	a0806317 	ldw	r2,396(r20)
    84dc:	2088703a 	and	r4,r4,r2
    84e0:	20000c1e 	bne	r4,zero,8514 <__call_exitprocs+0x15c>
    84e4:	89400017 	ldw	r5,0(r17)
    84e8:	d9000017 	ldw	r4,0(sp)
    84ec:	183ee83a 	callr	r3
    84f0:	a0800117 	ldw	r2,4(r20)
    84f4:	15bfbf1e 	bne	r2,r22,83f4 <__alt_data_end+0xfffe83f4>
    84f8:	98800017 	ldw	r2,0(r19)
    84fc:	153fcf26 	beq	r2,r20,843c <__alt_data_end+0xfffe843c>
    8500:	003fbc06 	br	83f4 <__alt_data_end+0xfffe83f4>
    8504:	183ee83a 	callr	r3
    8508:	003ff906 	br	84f0 <__alt_data_end+0xfffe84f0>
    850c:	a5c00115 	stw	r23,4(r20)
    8510:	003feb06 	br	84c0 <__alt_data_end+0xfffe84c0>
    8514:	89000017 	ldw	r4,0(r17)
    8518:	183ee83a 	callr	r3
    851c:	003ff406 	br	84f0 <__alt_data_end+0xfffe84f0>
    8520:	a0800017 	ldw	r2,0(r20)
    8524:	a027883a 	mov	r19,r20
    8528:	1029883a 	mov	r20,r2
    852c:	003fb606 	br	8408 <__alt_data_end+0xfffe8408>
    8530:	0005883a 	mov	r2,zero
    8534:	003ffb06 	br	8524 <__alt_data_end+0xfffe8524>

00008538 <quorem>:
    8538:	defff204 	addi	sp,sp,-56
    853c:	ddc00b15 	stw	r23,44(sp)
    8540:	20800417 	ldw	r2,16(r4)
    8544:	2dc00417 	ldw	r23,16(r5)
    8548:	dfc00d15 	stw	ra,52(sp)
    854c:	df000c15 	stw	fp,48(sp)
    8550:	dd800a15 	stw	r22,40(sp)
    8554:	dd400915 	stw	r21,36(sp)
    8558:	dd000815 	stw	r20,32(sp)
    855c:	dcc00715 	stw	r19,28(sp)
    8560:	dc800615 	stw	r18,24(sp)
    8564:	dc400515 	stw	r17,20(sp)
    8568:	dc000415 	stw	r16,16(sp)
    856c:	15c07a16 	blt	r2,r23,8758 <quorem+0x220>
    8570:	bdffffc4 	addi	r23,r23,-1
    8574:	bde9883a 	add	r20,r23,r23
    8578:	28c00504 	addi	r3,r5,20
    857c:	a529883a 	add	r20,r20,r20
    8580:	1d39883a 	add	fp,r3,r20
    8584:	24c00504 	addi	r19,r4,20
    8588:	d9400215 	stw	r5,8(sp)
    858c:	9d29883a 	add	r20,r19,r20
    8590:	e1400017 	ldw	r5,0(fp)
    8594:	d9000015 	stw	r4,0(sp)
    8598:	a1000017 	ldw	r4,0(r20)
    859c:	29400044 	addi	r5,r5,1
    85a0:	d8c00115 	stw	r3,4(sp)
    85a4:	dd000315 	stw	r20,12(sp)
    85a8:	00035a80 	call	35a8 <__udivsi3>
    85ac:	1025883a 	mov	r18,r2
    85b0:	10003026 	beq	r2,zero,8674 <quorem+0x13c>
    85b4:	dc400117 	ldw	r17,4(sp)
    85b8:	9829883a 	mov	r20,r19
    85bc:	002d883a 	mov	r22,zero
    85c0:	0021883a 	mov	r16,zero
    85c4:	8d400017 	ldw	r21,0(r17)
    85c8:	900b883a 	mov	r5,r18
    85cc:	8c400104 	addi	r17,r17,4
    85d0:	a93fffcc 	andi	r4,r21,65535
    85d4:	0000e880 	call	e88 <__mulsi3>
    85d8:	a808d43a 	srli	r4,r21,16
    85dc:	900b883a 	mov	r5,r18
    85e0:	15ad883a 	add	r22,r2,r22
    85e4:	0000e880 	call	e88 <__mulsi3>
    85e8:	a1000017 	ldw	r4,0(r20)
    85ec:	b00cd43a 	srli	r6,r22,16
    85f0:	b0ffffcc 	andi	r3,r22,65535
    85f4:	217fffcc 	andi	r5,r4,65535
    85f8:	2c21883a 	add	r16,r5,r16
    85fc:	80c7c83a 	sub	r3,r16,r3
    8600:	2008d43a 	srli	r4,r4,16
    8604:	1185883a 	add	r2,r2,r6
    8608:	1821d43a 	srai	r16,r3,16
    860c:	117fffcc 	andi	r5,r2,65535
    8610:	2149c83a 	sub	r4,r4,r5
    8614:	2421883a 	add	r16,r4,r16
    8618:	8008943a 	slli	r4,r16,16
    861c:	18ffffcc 	andi	r3,r3,65535
    8620:	102cd43a 	srli	r22,r2,16
    8624:	20c8b03a 	or	r4,r4,r3
    8628:	a1000015 	stw	r4,0(r20)
    862c:	8021d43a 	srai	r16,r16,16
    8630:	a5000104 	addi	r20,r20,4
    8634:	e47fe32e 	bgeu	fp,r17,85c4 <__alt_data_end+0xfffe85c4>
    8638:	d8c00317 	ldw	r3,12(sp)
    863c:	18800017 	ldw	r2,0(r3)
    8640:	10000c1e 	bne	r2,zero,8674 <quorem+0x13c>
    8644:	18bfff04 	addi	r2,r3,-4
    8648:	9880082e 	bgeu	r19,r2,866c <quorem+0x134>
    864c:	18ffff17 	ldw	r3,-4(r3)
    8650:	18000326 	beq	r3,zero,8660 <quorem+0x128>
    8654:	00000506 	br	866c <quorem+0x134>
    8658:	10c00017 	ldw	r3,0(r2)
    865c:	1800031e 	bne	r3,zero,866c <quorem+0x134>
    8660:	10bfff04 	addi	r2,r2,-4
    8664:	bdffffc4 	addi	r23,r23,-1
    8668:	98bffb36 	bltu	r19,r2,8658 <__alt_data_end+0xfffe8658>
    866c:	d8c00017 	ldw	r3,0(sp)
    8670:	1dc00415 	stw	r23,16(r3)
    8674:	d9400217 	ldw	r5,8(sp)
    8678:	d9000017 	ldw	r4,0(sp)
    867c:	000b0b00 	call	b0b0 <__mcmp>
    8680:	10002816 	blt	r2,zero,8724 <quorem+0x1ec>
    8684:	dc400117 	ldw	r17,4(sp)
    8688:	94800044 	addi	r18,r18,1
    868c:	980d883a 	mov	r6,r19
    8690:	0007883a 	mov	r3,zero
    8694:	31000017 	ldw	r4,0(r6)
    8698:	89400017 	ldw	r5,0(r17)
    869c:	31800104 	addi	r6,r6,4
    86a0:	20bfffcc 	andi	r2,r4,65535
    86a4:	10c7883a 	add	r3,r2,r3
    86a8:	28bfffcc 	andi	r2,r5,65535
    86ac:	1885c83a 	sub	r2,r3,r2
    86b0:	280ad43a 	srli	r5,r5,16
    86b4:	2008d43a 	srli	r4,r4,16
    86b8:	1007d43a 	srai	r3,r2,16
    86bc:	10bfffcc 	andi	r2,r2,65535
    86c0:	2149c83a 	sub	r4,r4,r5
    86c4:	20c9883a 	add	r4,r4,r3
    86c8:	200a943a 	slli	r5,r4,16
    86cc:	8c400104 	addi	r17,r17,4
    86d0:	2007d43a 	srai	r3,r4,16
    86d4:	2884b03a 	or	r2,r5,r2
    86d8:	30bfff15 	stw	r2,-4(r6)
    86dc:	e47fed2e 	bgeu	fp,r17,8694 <__alt_data_end+0xfffe8694>
    86e0:	bdc5883a 	add	r2,r23,r23
    86e4:	1085883a 	add	r2,r2,r2
    86e8:	9887883a 	add	r3,r19,r2
    86ec:	18800017 	ldw	r2,0(r3)
    86f0:	10000c1e 	bne	r2,zero,8724 <quorem+0x1ec>
    86f4:	18bfff04 	addi	r2,r3,-4
    86f8:	9880082e 	bgeu	r19,r2,871c <quorem+0x1e4>
    86fc:	18ffff17 	ldw	r3,-4(r3)
    8700:	18000326 	beq	r3,zero,8710 <quorem+0x1d8>
    8704:	00000506 	br	871c <quorem+0x1e4>
    8708:	10c00017 	ldw	r3,0(r2)
    870c:	1800031e 	bne	r3,zero,871c <quorem+0x1e4>
    8710:	10bfff04 	addi	r2,r2,-4
    8714:	bdffffc4 	addi	r23,r23,-1
    8718:	98bffb36 	bltu	r19,r2,8708 <__alt_data_end+0xfffe8708>
    871c:	d8c00017 	ldw	r3,0(sp)
    8720:	1dc00415 	stw	r23,16(r3)
    8724:	9005883a 	mov	r2,r18
    8728:	dfc00d17 	ldw	ra,52(sp)
    872c:	df000c17 	ldw	fp,48(sp)
    8730:	ddc00b17 	ldw	r23,44(sp)
    8734:	dd800a17 	ldw	r22,40(sp)
    8738:	dd400917 	ldw	r21,36(sp)
    873c:	dd000817 	ldw	r20,32(sp)
    8740:	dcc00717 	ldw	r19,28(sp)
    8744:	dc800617 	ldw	r18,24(sp)
    8748:	dc400517 	ldw	r17,20(sp)
    874c:	dc000417 	ldw	r16,16(sp)
    8750:	dec00e04 	addi	sp,sp,56
    8754:	f800283a 	ret
    8758:	0005883a 	mov	r2,zero
    875c:	003ff206 	br	8728 <__alt_data_end+0xfffe8728>

00008760 <_dtoa_r>:
    8760:	20801017 	ldw	r2,64(r4)
    8764:	deffde04 	addi	sp,sp,-136
    8768:	df002015 	stw	fp,128(sp)
    876c:	dcc01b15 	stw	r19,108(sp)
    8770:	dc801a15 	stw	r18,104(sp)
    8774:	dc401915 	stw	r17,100(sp)
    8778:	dc001815 	stw	r16,96(sp)
    877c:	dfc02115 	stw	ra,132(sp)
    8780:	ddc01f15 	stw	r23,124(sp)
    8784:	dd801e15 	stw	r22,120(sp)
    8788:	dd401d15 	stw	r21,116(sp)
    878c:	dd001c15 	stw	r20,112(sp)
    8790:	d9c00315 	stw	r7,12(sp)
    8794:	2039883a 	mov	fp,r4
    8798:	3023883a 	mov	r17,r6
    879c:	2825883a 	mov	r18,r5
    87a0:	dc002417 	ldw	r16,144(sp)
    87a4:	3027883a 	mov	r19,r6
    87a8:	10000826 	beq	r2,zero,87cc <_dtoa_r+0x6c>
    87ac:	21801117 	ldw	r6,68(r4)
    87b0:	00c00044 	movi	r3,1
    87b4:	100b883a 	mov	r5,r2
    87b8:	1986983a 	sll	r3,r3,r6
    87bc:	11800115 	stw	r6,4(r2)
    87c0:	10c00215 	stw	r3,8(r2)
    87c4:	000a7d40 	call	a7d4 <_Bfree>
    87c8:	e0001015 	stw	zero,64(fp)
    87cc:	88002e16 	blt	r17,zero,8888 <_dtoa_r+0x128>
    87d0:	80000015 	stw	zero,0(r16)
    87d4:	889ffc2c 	andhi	r2,r17,32752
    87d8:	00dffc34 	movhi	r3,32752
    87dc:	10c01c26 	beq	r2,r3,8850 <_dtoa_r+0xf0>
    87e0:	000d883a 	mov	r6,zero
    87e4:	000f883a 	mov	r7,zero
    87e8:	9009883a 	mov	r4,r18
    87ec:	980b883a 	mov	r5,r19
    87f0:	000e7d40 	call	e7d4 <__eqdf2>
    87f4:	10002b1e 	bne	r2,zero,88a4 <_dtoa_r+0x144>
    87f8:	d9c02317 	ldw	r7,140(sp)
    87fc:	00800044 	movi	r2,1
    8800:	38800015 	stw	r2,0(r7)
    8804:	d8802517 	ldw	r2,148(sp)
    8808:	10019e26 	beq	r2,zero,8e84 <_dtoa_r+0x724>
    880c:	d8c02517 	ldw	r3,148(sp)
    8810:	00800074 	movhi	r2,1
    8814:	10849d44 	addi	r2,r2,4725
    8818:	18800015 	stw	r2,0(r3)
    881c:	10bfffc4 	addi	r2,r2,-1
    8820:	dfc02117 	ldw	ra,132(sp)
    8824:	df002017 	ldw	fp,128(sp)
    8828:	ddc01f17 	ldw	r23,124(sp)
    882c:	dd801e17 	ldw	r22,120(sp)
    8830:	dd401d17 	ldw	r21,116(sp)
    8834:	dd001c17 	ldw	r20,112(sp)
    8838:	dcc01b17 	ldw	r19,108(sp)
    883c:	dc801a17 	ldw	r18,104(sp)
    8840:	dc401917 	ldw	r17,100(sp)
    8844:	dc001817 	ldw	r16,96(sp)
    8848:	dec02204 	addi	sp,sp,136
    884c:	f800283a 	ret
    8850:	d8c02317 	ldw	r3,140(sp)
    8854:	0089c3c4 	movi	r2,9999
    8858:	18800015 	stw	r2,0(r3)
    885c:	90017726 	beq	r18,zero,8e3c <_dtoa_r+0x6dc>
    8860:	00800074 	movhi	r2,1
    8864:	1084a904 	addi	r2,r2,4772
    8868:	d9002517 	ldw	r4,148(sp)
    886c:	203fec26 	beq	r4,zero,8820 <__alt_data_end+0xfffe8820>
    8870:	10c000c7 	ldb	r3,3(r2)
    8874:	1801781e 	bne	r3,zero,8e58 <_dtoa_r+0x6f8>
    8878:	10c000c4 	addi	r3,r2,3
    887c:	d9802517 	ldw	r6,148(sp)
    8880:	30c00015 	stw	r3,0(r6)
    8884:	003fe606 	br	8820 <__alt_data_end+0xfffe8820>
    8888:	04e00034 	movhi	r19,32768
    888c:	9cffffc4 	addi	r19,r19,-1
    8890:	00800044 	movi	r2,1
    8894:	8ce6703a 	and	r19,r17,r19
    8898:	80800015 	stw	r2,0(r16)
    889c:	9823883a 	mov	r17,r19
    88a0:	003fcc06 	br	87d4 <__alt_data_end+0xfffe87d4>
    88a4:	d8800204 	addi	r2,sp,8
    88a8:	d8800015 	stw	r2,0(sp)
    88ac:	d9c00104 	addi	r7,sp,4
    88b0:	900b883a 	mov	r5,r18
    88b4:	980d883a 	mov	r6,r19
    88b8:	e009883a 	mov	r4,fp
    88bc:	8820d53a 	srli	r16,r17,20
    88c0:	000b47c0 	call	b47c <__d2b>
    88c4:	d8800915 	stw	r2,36(sp)
    88c8:	8001651e 	bne	r16,zero,8e60 <_dtoa_r+0x700>
    88cc:	dd800217 	ldw	r22,8(sp)
    88d0:	dc000117 	ldw	r16,4(sp)
    88d4:	00800804 	movi	r2,32
    88d8:	b421883a 	add	r16,r22,r16
    88dc:	80c10c84 	addi	r3,r16,1074
    88e0:	10c2d10e 	bge	r2,r3,9428 <_dtoa_r+0xcc8>
    88e4:	00801004 	movi	r2,64
    88e8:	81010484 	addi	r4,r16,1042
    88ec:	10c7c83a 	sub	r3,r2,r3
    88f0:	9108d83a 	srl	r4,r18,r4
    88f4:	88e2983a 	sll	r17,r17,r3
    88f8:	2448b03a 	or	r4,r4,r17
    88fc:	000e9d00 	call	e9d0 <__floatunsidf>
    8900:	017f8434 	movhi	r5,65040
    8904:	01800044 	movi	r6,1
    8908:	1009883a 	mov	r4,r2
    890c:	194b883a 	add	r5,r3,r5
    8910:	843fffc4 	addi	r16,r16,-1
    8914:	d9801115 	stw	r6,68(sp)
    8918:	000d883a 	mov	r6,zero
    891c:	01cffe34 	movhi	r7,16376
    8920:	0002a740 	call	2a74 <__subdf3>
    8924:	0198dbf4 	movhi	r6,25455
    8928:	01cff4f4 	movhi	r7,16339
    892c:	3190d844 	addi	r6,r6,17249
    8930:	39e1e9c4 	addi	r7,r7,-30809
    8934:	1009883a 	mov	r4,r2
    8938:	180b883a 	mov	r5,r3
    893c:	00022080 	call	2208 <__muldf3>
    8940:	01a2d874 	movhi	r6,35681
    8944:	01cff1f4 	movhi	r7,16327
    8948:	31b22cc4 	addi	r6,r6,-14157
    894c:	39e28a04 	addi	r7,r7,-30168
    8950:	180b883a 	mov	r5,r3
    8954:	1009883a 	mov	r4,r2
    8958:	0000eb00 	call	eb0 <__adddf3>
    895c:	8009883a 	mov	r4,r16
    8960:	1029883a 	mov	r20,r2
    8964:	1823883a 	mov	r17,r3
    8968:	00033700 	call	3370 <__floatsidf>
    896c:	019427f4 	movhi	r6,20639
    8970:	01cff4f4 	movhi	r7,16339
    8974:	319e7ec4 	addi	r6,r6,31227
    8978:	39d104c4 	addi	r7,r7,17427
    897c:	1009883a 	mov	r4,r2
    8980:	180b883a 	mov	r5,r3
    8984:	00022080 	call	2208 <__muldf3>
    8988:	100d883a 	mov	r6,r2
    898c:	180f883a 	mov	r7,r3
    8990:	a009883a 	mov	r4,r20
    8994:	880b883a 	mov	r5,r17
    8998:	0000eb00 	call	eb0 <__adddf3>
    899c:	1009883a 	mov	r4,r2
    89a0:	180b883a 	mov	r5,r3
    89a4:	1029883a 	mov	r20,r2
    89a8:	1823883a 	mov	r17,r3
    89ac:	000e9500 	call	e950 <__fixdfsi>
    89b0:	000d883a 	mov	r6,zero
    89b4:	000f883a 	mov	r7,zero
    89b8:	a009883a 	mov	r4,r20
    89bc:	880b883a 	mov	r5,r17
    89c0:	d8800515 	stw	r2,20(sp)
    89c4:	000e85c0 	call	e85c <__ledf2>
    89c8:	10028716 	blt	r2,zero,93e8 <_dtoa_r+0xc88>
    89cc:	d8c00517 	ldw	r3,20(sp)
    89d0:	00800584 	movi	r2,22
    89d4:	10c27536 	bltu	r2,r3,93ac <_dtoa_r+0xc4c>
    89d8:	180490fa 	slli	r2,r3,3
    89dc:	00c00074 	movhi	r3,1
    89e0:	18c4c404 	addi	r3,r3,4880
    89e4:	1885883a 	add	r2,r3,r2
    89e8:	11000017 	ldw	r4,0(r2)
    89ec:	11400117 	ldw	r5,4(r2)
    89f0:	900d883a 	mov	r6,r18
    89f4:	980f883a 	mov	r7,r19
    89f8:	000212c0 	call	212c <__gedf2>
    89fc:	00828d0e 	bge	zero,r2,9434 <_dtoa_r+0xcd4>
    8a00:	d9000517 	ldw	r4,20(sp)
    8a04:	d8000e15 	stw	zero,56(sp)
    8a08:	213fffc4 	addi	r4,r4,-1
    8a0c:	d9000515 	stw	r4,20(sp)
    8a10:	b42dc83a 	sub	r22,r22,r16
    8a14:	b5bfffc4 	addi	r22,r22,-1
    8a18:	b0026f16 	blt	r22,zero,93d8 <_dtoa_r+0xc78>
    8a1c:	d8000815 	stw	zero,32(sp)
    8a20:	d9c00517 	ldw	r7,20(sp)
    8a24:	38026416 	blt	r7,zero,93b8 <_dtoa_r+0xc58>
    8a28:	b1ed883a 	add	r22,r22,r7
    8a2c:	d9c00d15 	stw	r7,52(sp)
    8a30:	d8000a15 	stw	zero,40(sp)
    8a34:	d9800317 	ldw	r6,12(sp)
    8a38:	00800244 	movi	r2,9
    8a3c:	11811436 	bltu	r2,r6,8e90 <_dtoa_r+0x730>
    8a40:	00800144 	movi	r2,5
    8a44:	1184e10e 	bge	r2,r6,9dcc <_dtoa_r+0x166c>
    8a48:	31bfff04 	addi	r6,r6,-4
    8a4c:	d9800315 	stw	r6,12(sp)
    8a50:	0023883a 	mov	r17,zero
    8a54:	d9800317 	ldw	r6,12(sp)
    8a58:	008000c4 	movi	r2,3
    8a5c:	30836726 	beq	r6,r2,97fc <_dtoa_r+0x109c>
    8a60:	1183410e 	bge	r2,r6,9768 <_dtoa_r+0x1008>
    8a64:	d9c00317 	ldw	r7,12(sp)
    8a68:	00800104 	movi	r2,4
    8a6c:	38827c26 	beq	r7,r2,9460 <_dtoa_r+0xd00>
    8a70:	00800144 	movi	r2,5
    8a74:	3884c41e 	bne	r7,r2,9d88 <_dtoa_r+0x1628>
    8a78:	00800044 	movi	r2,1
    8a7c:	d8800b15 	stw	r2,44(sp)
    8a80:	d8c00517 	ldw	r3,20(sp)
    8a84:	d9002217 	ldw	r4,136(sp)
    8a88:	1907883a 	add	r3,r3,r4
    8a8c:	19800044 	addi	r6,r3,1
    8a90:	d8c00c15 	stw	r3,48(sp)
    8a94:	d9800615 	stw	r6,24(sp)
    8a98:	0183a40e 	bge	zero,r6,992c <_dtoa_r+0x11cc>
    8a9c:	d9800617 	ldw	r6,24(sp)
    8aa0:	3021883a 	mov	r16,r6
    8aa4:	e0001115 	stw	zero,68(fp)
    8aa8:	008005c4 	movi	r2,23
    8aac:	1184c92e 	bgeu	r2,r6,9dd4 <_dtoa_r+0x1674>
    8ab0:	00c00044 	movi	r3,1
    8ab4:	00800104 	movi	r2,4
    8ab8:	1085883a 	add	r2,r2,r2
    8abc:	11000504 	addi	r4,r2,20
    8ac0:	180b883a 	mov	r5,r3
    8ac4:	18c00044 	addi	r3,r3,1
    8ac8:	313ffb2e 	bgeu	r6,r4,8ab8 <__alt_data_end+0xfffe8ab8>
    8acc:	e1401115 	stw	r5,68(fp)
    8ad0:	e009883a 	mov	r4,fp
    8ad4:	000a72c0 	call	a72c <_Balloc>
    8ad8:	d8800715 	stw	r2,28(sp)
    8adc:	e0801015 	stw	r2,64(fp)
    8ae0:	00800384 	movi	r2,14
    8ae4:	1400f736 	bltu	r2,r16,8ec4 <_dtoa_r+0x764>
    8ae8:	8800f626 	beq	r17,zero,8ec4 <_dtoa_r+0x764>
    8aec:	d9c00517 	ldw	r7,20(sp)
    8af0:	01c39a0e 	bge	zero,r7,995c <_dtoa_r+0x11fc>
    8af4:	388003cc 	andi	r2,r7,15
    8af8:	100490fa 	slli	r2,r2,3
    8afc:	382bd13a 	srai	r21,r7,4
    8b00:	00c00074 	movhi	r3,1
    8b04:	18c4c404 	addi	r3,r3,4880
    8b08:	1885883a 	add	r2,r3,r2
    8b0c:	a8c0040c 	andi	r3,r21,16
    8b10:	12400017 	ldw	r9,0(r2)
    8b14:	12000117 	ldw	r8,4(r2)
    8b18:	18037926 	beq	r3,zero,9900 <_dtoa_r+0x11a0>
    8b1c:	00800074 	movhi	r2,1
    8b20:	1084ba04 	addi	r2,r2,4840
    8b24:	11800817 	ldw	r6,32(r2)
    8b28:	11c00917 	ldw	r7,36(r2)
    8b2c:	9009883a 	mov	r4,r18
    8b30:	980b883a 	mov	r5,r19
    8b34:	da001715 	stw	r8,92(sp)
    8b38:	da401615 	stw	r9,88(sp)
    8b3c:	000175c0 	call	175c <__divdf3>
    8b40:	da001717 	ldw	r8,92(sp)
    8b44:	da401617 	ldw	r9,88(sp)
    8b48:	ad4003cc 	andi	r21,r21,15
    8b4c:	040000c4 	movi	r16,3
    8b50:	1023883a 	mov	r17,r2
    8b54:	1829883a 	mov	r20,r3
    8b58:	a8001126 	beq	r21,zero,8ba0 <_dtoa_r+0x440>
    8b5c:	05c00074 	movhi	r23,1
    8b60:	bdc4ba04 	addi	r23,r23,4840
    8b64:	4805883a 	mov	r2,r9
    8b68:	4007883a 	mov	r3,r8
    8b6c:	a980004c 	andi	r6,r21,1
    8b70:	1009883a 	mov	r4,r2
    8b74:	a82bd07a 	srai	r21,r21,1
    8b78:	180b883a 	mov	r5,r3
    8b7c:	30000426 	beq	r6,zero,8b90 <_dtoa_r+0x430>
    8b80:	b9800017 	ldw	r6,0(r23)
    8b84:	b9c00117 	ldw	r7,4(r23)
    8b88:	84000044 	addi	r16,r16,1
    8b8c:	00022080 	call	2208 <__muldf3>
    8b90:	bdc00204 	addi	r23,r23,8
    8b94:	a83ff51e 	bne	r21,zero,8b6c <__alt_data_end+0xfffe8b6c>
    8b98:	1013883a 	mov	r9,r2
    8b9c:	1811883a 	mov	r8,r3
    8ba0:	480d883a 	mov	r6,r9
    8ba4:	400f883a 	mov	r7,r8
    8ba8:	8809883a 	mov	r4,r17
    8bac:	a00b883a 	mov	r5,r20
    8bb0:	000175c0 	call	175c <__divdf3>
    8bb4:	d8800f15 	stw	r2,60(sp)
    8bb8:	d8c01015 	stw	r3,64(sp)
    8bbc:	d8c00e17 	ldw	r3,56(sp)
    8bc0:	18000626 	beq	r3,zero,8bdc <_dtoa_r+0x47c>
    8bc4:	d9000f17 	ldw	r4,60(sp)
    8bc8:	d9401017 	ldw	r5,64(sp)
    8bcc:	000d883a 	mov	r6,zero
    8bd0:	01cffc34 	movhi	r7,16368
    8bd4:	000e85c0 	call	e85c <__ledf2>
    8bd8:	10040b16 	blt	r2,zero,9c08 <_dtoa_r+0x14a8>
    8bdc:	8009883a 	mov	r4,r16
    8be0:	00033700 	call	3370 <__floatsidf>
    8be4:	d9800f17 	ldw	r6,60(sp)
    8be8:	d9c01017 	ldw	r7,64(sp)
    8bec:	1009883a 	mov	r4,r2
    8bf0:	180b883a 	mov	r5,r3
    8bf4:	00022080 	call	2208 <__muldf3>
    8bf8:	000d883a 	mov	r6,zero
    8bfc:	01d00734 	movhi	r7,16412
    8c00:	1009883a 	mov	r4,r2
    8c04:	180b883a 	mov	r5,r3
    8c08:	0000eb00 	call	eb0 <__adddf3>
    8c0c:	1021883a 	mov	r16,r2
    8c10:	d8800617 	ldw	r2,24(sp)
    8c14:	047f3034 	movhi	r17,64704
    8c18:	1c63883a 	add	r17,r3,r17
    8c1c:	10031826 	beq	r2,zero,9880 <_dtoa_r+0x1120>
    8c20:	d8c00517 	ldw	r3,20(sp)
    8c24:	db000617 	ldw	r12,24(sp)
    8c28:	d8c01315 	stw	r3,76(sp)
    8c2c:	d9000b17 	ldw	r4,44(sp)
    8c30:	20038f26 	beq	r4,zero,9a70 <_dtoa_r+0x1310>
    8c34:	60bfffc4 	addi	r2,r12,-1
    8c38:	100490fa 	slli	r2,r2,3
    8c3c:	00c00074 	movhi	r3,1
    8c40:	18c4c404 	addi	r3,r3,4880
    8c44:	1885883a 	add	r2,r3,r2
    8c48:	11800017 	ldw	r6,0(r2)
    8c4c:	11c00117 	ldw	r7,4(r2)
    8c50:	d8800717 	ldw	r2,28(sp)
    8c54:	0009883a 	mov	r4,zero
    8c58:	014ff834 	movhi	r5,16352
    8c5c:	db001615 	stw	r12,88(sp)
    8c60:	15c00044 	addi	r23,r2,1
    8c64:	000175c0 	call	175c <__divdf3>
    8c68:	800d883a 	mov	r6,r16
    8c6c:	880f883a 	mov	r7,r17
    8c70:	1009883a 	mov	r4,r2
    8c74:	180b883a 	mov	r5,r3
    8c78:	0002a740 	call	2a74 <__subdf3>
    8c7c:	d9401017 	ldw	r5,64(sp)
    8c80:	d9000f17 	ldw	r4,60(sp)
    8c84:	102b883a 	mov	r21,r2
    8c88:	d8c01215 	stw	r3,72(sp)
    8c8c:	000e9500 	call	e950 <__fixdfsi>
    8c90:	1009883a 	mov	r4,r2
    8c94:	1029883a 	mov	r20,r2
    8c98:	00033700 	call	3370 <__floatsidf>
    8c9c:	d9000f17 	ldw	r4,60(sp)
    8ca0:	d9401017 	ldw	r5,64(sp)
    8ca4:	100d883a 	mov	r6,r2
    8ca8:	180f883a 	mov	r7,r3
    8cac:	0002a740 	call	2a74 <__subdf3>
    8cb0:	1823883a 	mov	r17,r3
    8cb4:	d8c00717 	ldw	r3,28(sp)
    8cb8:	d9401217 	ldw	r5,72(sp)
    8cbc:	a2000c04 	addi	r8,r20,48
    8cc0:	1021883a 	mov	r16,r2
    8cc4:	1a000005 	stb	r8,0(r3)
    8cc8:	800d883a 	mov	r6,r16
    8ccc:	880f883a 	mov	r7,r17
    8cd0:	a809883a 	mov	r4,r21
    8cd4:	4029883a 	mov	r20,r8
    8cd8:	000212c0 	call	212c <__gedf2>
    8cdc:	00841d16 	blt	zero,r2,9d54 <_dtoa_r+0x15f4>
    8ce0:	800d883a 	mov	r6,r16
    8ce4:	880f883a 	mov	r7,r17
    8ce8:	0009883a 	mov	r4,zero
    8cec:	014ffc34 	movhi	r5,16368
    8cf0:	0002a740 	call	2a74 <__subdf3>
    8cf4:	d9401217 	ldw	r5,72(sp)
    8cf8:	100d883a 	mov	r6,r2
    8cfc:	180f883a 	mov	r7,r3
    8d00:	a809883a 	mov	r4,r21
    8d04:	000212c0 	call	212c <__gedf2>
    8d08:	db001617 	ldw	r12,88(sp)
    8d0c:	00840e16 	blt	zero,r2,9d48 <_dtoa_r+0x15e8>
    8d10:	00800044 	movi	r2,1
    8d14:	13006b0e 	bge	r2,r12,8ec4 <_dtoa_r+0x764>
    8d18:	d9000717 	ldw	r4,28(sp)
    8d1c:	dd800f15 	stw	r22,60(sp)
    8d20:	dcc01015 	stw	r19,64(sp)
    8d24:	2319883a 	add	r12,r4,r12
    8d28:	dcc01217 	ldw	r19,72(sp)
    8d2c:	602d883a 	mov	r22,r12
    8d30:	dc801215 	stw	r18,72(sp)
    8d34:	b825883a 	mov	r18,r23
    8d38:	00000906 	br	8d60 <_dtoa_r+0x600>
    8d3c:	0002a740 	call	2a74 <__subdf3>
    8d40:	a80d883a 	mov	r6,r21
    8d44:	980f883a 	mov	r7,r19
    8d48:	1009883a 	mov	r4,r2
    8d4c:	180b883a 	mov	r5,r3
    8d50:	000e85c0 	call	e85c <__ledf2>
    8d54:	1003e816 	blt	r2,zero,9cf8 <_dtoa_r+0x1598>
    8d58:	b825883a 	mov	r18,r23
    8d5c:	bd83e926 	beq	r23,r22,9d04 <_dtoa_r+0x15a4>
    8d60:	a809883a 	mov	r4,r21
    8d64:	980b883a 	mov	r5,r19
    8d68:	000d883a 	mov	r6,zero
    8d6c:	01d00934 	movhi	r7,16420
    8d70:	00022080 	call	2208 <__muldf3>
    8d74:	000d883a 	mov	r6,zero
    8d78:	01d00934 	movhi	r7,16420
    8d7c:	8009883a 	mov	r4,r16
    8d80:	880b883a 	mov	r5,r17
    8d84:	102b883a 	mov	r21,r2
    8d88:	1827883a 	mov	r19,r3
    8d8c:	00022080 	call	2208 <__muldf3>
    8d90:	180b883a 	mov	r5,r3
    8d94:	1009883a 	mov	r4,r2
    8d98:	1821883a 	mov	r16,r3
    8d9c:	1023883a 	mov	r17,r2
    8da0:	000e9500 	call	e950 <__fixdfsi>
    8da4:	1009883a 	mov	r4,r2
    8da8:	1029883a 	mov	r20,r2
    8dac:	00033700 	call	3370 <__floatsidf>
    8db0:	8809883a 	mov	r4,r17
    8db4:	800b883a 	mov	r5,r16
    8db8:	100d883a 	mov	r6,r2
    8dbc:	180f883a 	mov	r7,r3
    8dc0:	0002a740 	call	2a74 <__subdf3>
    8dc4:	a5000c04 	addi	r20,r20,48
    8dc8:	a80d883a 	mov	r6,r21
    8dcc:	980f883a 	mov	r7,r19
    8dd0:	1009883a 	mov	r4,r2
    8dd4:	180b883a 	mov	r5,r3
    8dd8:	95000005 	stb	r20,0(r18)
    8ddc:	1021883a 	mov	r16,r2
    8de0:	1823883a 	mov	r17,r3
    8de4:	000e85c0 	call	e85c <__ledf2>
    8de8:	bdc00044 	addi	r23,r23,1
    8dec:	800d883a 	mov	r6,r16
    8df0:	880f883a 	mov	r7,r17
    8df4:	0009883a 	mov	r4,zero
    8df8:	014ffc34 	movhi	r5,16368
    8dfc:	103fcf0e 	bge	r2,zero,8d3c <__alt_data_end+0xfffe8d3c>
    8e00:	d8c01317 	ldw	r3,76(sp)
    8e04:	d8c00515 	stw	r3,20(sp)
    8e08:	d9400917 	ldw	r5,36(sp)
    8e0c:	e009883a 	mov	r4,fp
    8e10:	000a7d40 	call	a7d4 <_Bfree>
    8e14:	d9000517 	ldw	r4,20(sp)
    8e18:	d9802317 	ldw	r6,140(sp)
    8e1c:	d9c02517 	ldw	r7,148(sp)
    8e20:	b8000005 	stb	zero,0(r23)
    8e24:	20800044 	addi	r2,r4,1
    8e28:	30800015 	stw	r2,0(r6)
    8e2c:	3802aa26 	beq	r7,zero,98d8 <_dtoa_r+0x1178>
    8e30:	3dc00015 	stw	r23,0(r7)
    8e34:	d8800717 	ldw	r2,28(sp)
    8e38:	003e7906 	br	8820 <__alt_data_end+0xfffe8820>
    8e3c:	00800434 	movhi	r2,16
    8e40:	10bfffc4 	addi	r2,r2,-1
    8e44:	88a2703a 	and	r17,r17,r2
    8e48:	883e851e 	bne	r17,zero,8860 <__alt_data_end+0xfffe8860>
    8e4c:	00800074 	movhi	r2,1
    8e50:	1084a604 	addi	r2,r2,4760
    8e54:	003e8406 	br	8868 <__alt_data_end+0xfffe8868>
    8e58:	10c00204 	addi	r3,r2,8
    8e5c:	003e8706 	br	887c <__alt_data_end+0xfffe887c>
    8e60:	01400434 	movhi	r5,16
    8e64:	297fffc4 	addi	r5,r5,-1
    8e68:	994a703a 	and	r5,r19,r5
    8e6c:	9009883a 	mov	r4,r18
    8e70:	843f0044 	addi	r16,r16,-1023
    8e74:	294ffc34 	orhi	r5,r5,16368
    8e78:	dd800217 	ldw	r22,8(sp)
    8e7c:	d8001115 	stw	zero,68(sp)
    8e80:	003ea506 	br	8918 <__alt_data_end+0xfffe8918>
    8e84:	00800074 	movhi	r2,1
    8e88:	10849d04 	addi	r2,r2,4724
    8e8c:	003e6406 	br	8820 <__alt_data_end+0xfffe8820>
    8e90:	e0001115 	stw	zero,68(fp)
    8e94:	000b883a 	mov	r5,zero
    8e98:	e009883a 	mov	r4,fp
    8e9c:	000a72c0 	call	a72c <_Balloc>
    8ea0:	01bfffc4 	movi	r6,-1
    8ea4:	01c00044 	movi	r7,1
    8ea8:	d8800715 	stw	r2,28(sp)
    8eac:	d9800c15 	stw	r6,48(sp)
    8eb0:	e0801015 	stw	r2,64(fp)
    8eb4:	d8000315 	stw	zero,12(sp)
    8eb8:	d9c00b15 	stw	r7,44(sp)
    8ebc:	d9800615 	stw	r6,24(sp)
    8ec0:	d8002215 	stw	zero,136(sp)
    8ec4:	d8800117 	ldw	r2,4(sp)
    8ec8:	10008916 	blt	r2,zero,90f0 <_dtoa_r+0x990>
    8ecc:	d9000517 	ldw	r4,20(sp)
    8ed0:	00c00384 	movi	r3,14
    8ed4:	19008616 	blt	r3,r4,90f0 <_dtoa_r+0x990>
    8ed8:	200490fa 	slli	r2,r4,3
    8edc:	00c00074 	movhi	r3,1
    8ee0:	d9802217 	ldw	r6,136(sp)
    8ee4:	18c4c404 	addi	r3,r3,4880
    8ee8:	1885883a 	add	r2,r3,r2
    8eec:	14000017 	ldw	r16,0(r2)
    8ef0:	14400117 	ldw	r17,4(r2)
    8ef4:	30016316 	blt	r6,zero,9484 <_dtoa_r+0xd24>
    8ef8:	800d883a 	mov	r6,r16
    8efc:	880f883a 	mov	r7,r17
    8f00:	9009883a 	mov	r4,r18
    8f04:	980b883a 	mov	r5,r19
    8f08:	000175c0 	call	175c <__divdf3>
    8f0c:	180b883a 	mov	r5,r3
    8f10:	1009883a 	mov	r4,r2
    8f14:	000e9500 	call	e950 <__fixdfsi>
    8f18:	1009883a 	mov	r4,r2
    8f1c:	102b883a 	mov	r21,r2
    8f20:	00033700 	call	3370 <__floatsidf>
    8f24:	800d883a 	mov	r6,r16
    8f28:	880f883a 	mov	r7,r17
    8f2c:	1009883a 	mov	r4,r2
    8f30:	180b883a 	mov	r5,r3
    8f34:	00022080 	call	2208 <__muldf3>
    8f38:	100d883a 	mov	r6,r2
    8f3c:	180f883a 	mov	r7,r3
    8f40:	9009883a 	mov	r4,r18
    8f44:	980b883a 	mov	r5,r19
    8f48:	0002a740 	call	2a74 <__subdf3>
    8f4c:	d9c00717 	ldw	r7,28(sp)
    8f50:	1009883a 	mov	r4,r2
    8f54:	a8800c04 	addi	r2,r21,48
    8f58:	38800005 	stb	r2,0(r7)
    8f5c:	3dc00044 	addi	r23,r7,1
    8f60:	d9c00617 	ldw	r7,24(sp)
    8f64:	01800044 	movi	r6,1
    8f68:	180b883a 	mov	r5,r3
    8f6c:	2005883a 	mov	r2,r4
    8f70:	39803826 	beq	r7,r6,9054 <_dtoa_r+0x8f4>
    8f74:	000d883a 	mov	r6,zero
    8f78:	01d00934 	movhi	r7,16420
    8f7c:	00022080 	call	2208 <__muldf3>
    8f80:	000d883a 	mov	r6,zero
    8f84:	000f883a 	mov	r7,zero
    8f88:	1009883a 	mov	r4,r2
    8f8c:	180b883a 	mov	r5,r3
    8f90:	1025883a 	mov	r18,r2
    8f94:	1827883a 	mov	r19,r3
    8f98:	000e7d40 	call	e7d4 <__eqdf2>
    8f9c:	103f9a26 	beq	r2,zero,8e08 <__alt_data_end+0xfffe8e08>
    8fa0:	d9c00617 	ldw	r7,24(sp)
    8fa4:	d8c00717 	ldw	r3,28(sp)
    8fa8:	b829883a 	mov	r20,r23
    8fac:	38bfffc4 	addi	r2,r7,-1
    8fb0:	18ad883a 	add	r22,r3,r2
    8fb4:	00000a06 	br	8fe0 <_dtoa_r+0x880>
    8fb8:	00022080 	call	2208 <__muldf3>
    8fbc:	000d883a 	mov	r6,zero
    8fc0:	000f883a 	mov	r7,zero
    8fc4:	1009883a 	mov	r4,r2
    8fc8:	180b883a 	mov	r5,r3
    8fcc:	1025883a 	mov	r18,r2
    8fd0:	1827883a 	mov	r19,r3
    8fd4:	b829883a 	mov	r20,r23
    8fd8:	000e7d40 	call	e7d4 <__eqdf2>
    8fdc:	103f8a26 	beq	r2,zero,8e08 <__alt_data_end+0xfffe8e08>
    8fe0:	800d883a 	mov	r6,r16
    8fe4:	880f883a 	mov	r7,r17
    8fe8:	9009883a 	mov	r4,r18
    8fec:	980b883a 	mov	r5,r19
    8ff0:	000175c0 	call	175c <__divdf3>
    8ff4:	180b883a 	mov	r5,r3
    8ff8:	1009883a 	mov	r4,r2
    8ffc:	000e9500 	call	e950 <__fixdfsi>
    9000:	1009883a 	mov	r4,r2
    9004:	102b883a 	mov	r21,r2
    9008:	00033700 	call	3370 <__floatsidf>
    900c:	800d883a 	mov	r6,r16
    9010:	880f883a 	mov	r7,r17
    9014:	1009883a 	mov	r4,r2
    9018:	180b883a 	mov	r5,r3
    901c:	00022080 	call	2208 <__muldf3>
    9020:	100d883a 	mov	r6,r2
    9024:	180f883a 	mov	r7,r3
    9028:	9009883a 	mov	r4,r18
    902c:	980b883a 	mov	r5,r19
    9030:	0002a740 	call	2a74 <__subdf3>
    9034:	aa000c04 	addi	r8,r21,48
    9038:	a2000005 	stb	r8,0(r20)
    903c:	000d883a 	mov	r6,zero
    9040:	01d00934 	movhi	r7,16420
    9044:	1009883a 	mov	r4,r2
    9048:	180b883a 	mov	r5,r3
    904c:	a5c00044 	addi	r23,r20,1
    9050:	b53fd91e 	bne	r22,r20,8fb8 <__alt_data_end+0xfffe8fb8>
    9054:	100d883a 	mov	r6,r2
    9058:	180f883a 	mov	r7,r3
    905c:	1009883a 	mov	r4,r2
    9060:	180b883a 	mov	r5,r3
    9064:	0000eb00 	call	eb0 <__adddf3>
    9068:	100d883a 	mov	r6,r2
    906c:	180f883a 	mov	r7,r3
    9070:	8009883a 	mov	r4,r16
    9074:	880b883a 	mov	r5,r17
    9078:	1027883a 	mov	r19,r2
    907c:	1825883a 	mov	r18,r3
    9080:	000e85c0 	call	e85c <__ledf2>
    9084:	10000816 	blt	r2,zero,90a8 <_dtoa_r+0x948>
    9088:	980d883a 	mov	r6,r19
    908c:	900f883a 	mov	r7,r18
    9090:	8009883a 	mov	r4,r16
    9094:	880b883a 	mov	r5,r17
    9098:	000e7d40 	call	e7d4 <__eqdf2>
    909c:	103f5a1e 	bne	r2,zero,8e08 <__alt_data_end+0xfffe8e08>
    90a0:	ad40004c 	andi	r21,r21,1
    90a4:	a83f5826 	beq	r21,zero,8e08 <__alt_data_end+0xfffe8e08>
    90a8:	bd3fffc3 	ldbu	r20,-1(r23)
    90ac:	b8bfffc4 	addi	r2,r23,-1
    90b0:	1007883a 	mov	r3,r2
    90b4:	01400e44 	movi	r5,57
    90b8:	d9800717 	ldw	r6,28(sp)
    90bc:	00000506 	br	90d4 <_dtoa_r+0x974>
    90c0:	18ffffc4 	addi	r3,r3,-1
    90c4:	11824726 	beq	r2,r6,99e4 <_dtoa_r+0x1284>
    90c8:	1d000003 	ldbu	r20,0(r3)
    90cc:	102f883a 	mov	r23,r2
    90d0:	10bfffc4 	addi	r2,r2,-1
    90d4:	a1003fcc 	andi	r4,r20,255
    90d8:	2100201c 	xori	r4,r4,128
    90dc:	213fe004 	addi	r4,r4,-128
    90e0:	217ff726 	beq	r4,r5,90c0 <__alt_data_end+0xfffe90c0>
    90e4:	a2000044 	addi	r8,r20,1
    90e8:	12000005 	stb	r8,0(r2)
    90ec:	003f4606 	br	8e08 <__alt_data_end+0xfffe8e08>
    90f0:	d9000b17 	ldw	r4,44(sp)
    90f4:	2000c826 	beq	r4,zero,9418 <_dtoa_r+0xcb8>
    90f8:	d9800317 	ldw	r6,12(sp)
    90fc:	00c00044 	movi	r3,1
    9100:	1980f90e 	bge	r3,r6,94e8 <_dtoa_r+0xd88>
    9104:	d8800617 	ldw	r2,24(sp)
    9108:	d8c00a17 	ldw	r3,40(sp)
    910c:	157fffc4 	addi	r21,r2,-1
    9110:	1d41f316 	blt	r3,r21,98e0 <_dtoa_r+0x1180>
    9114:	1d6bc83a 	sub	r21,r3,r21
    9118:	d9c00617 	ldw	r7,24(sp)
    911c:	3802aa16 	blt	r7,zero,9bc8 <_dtoa_r+0x1468>
    9120:	dd000817 	ldw	r20,32(sp)
    9124:	d8800617 	ldw	r2,24(sp)
    9128:	d8c00817 	ldw	r3,32(sp)
    912c:	01400044 	movi	r5,1
    9130:	e009883a 	mov	r4,fp
    9134:	1887883a 	add	r3,r3,r2
    9138:	d8c00815 	stw	r3,32(sp)
    913c:	b0ad883a 	add	r22,r22,r2
    9140:	000ab600 	call	ab60 <__i2b>
    9144:	1023883a 	mov	r17,r2
    9148:	a0000826 	beq	r20,zero,916c <_dtoa_r+0xa0c>
    914c:	0580070e 	bge	zero,r22,916c <_dtoa_r+0xa0c>
    9150:	a005883a 	mov	r2,r20
    9154:	b500b916 	blt	r22,r20,943c <_dtoa_r+0xcdc>
    9158:	d9000817 	ldw	r4,32(sp)
    915c:	a0a9c83a 	sub	r20,r20,r2
    9160:	b0adc83a 	sub	r22,r22,r2
    9164:	2089c83a 	sub	r4,r4,r2
    9168:	d9000815 	stw	r4,32(sp)
    916c:	d9800a17 	ldw	r6,40(sp)
    9170:	0181810e 	bge	zero,r6,9778 <_dtoa_r+0x1018>
    9174:	d9c00b17 	ldw	r7,44(sp)
    9178:	3800b326 	beq	r7,zero,9448 <_dtoa_r+0xce8>
    917c:	a800b226 	beq	r21,zero,9448 <_dtoa_r+0xce8>
    9180:	880b883a 	mov	r5,r17
    9184:	a80d883a 	mov	r6,r21
    9188:	e009883a 	mov	r4,fp
    918c:	000ae280 	call	ae28 <__pow5mult>
    9190:	d9800917 	ldw	r6,36(sp)
    9194:	100b883a 	mov	r5,r2
    9198:	e009883a 	mov	r4,fp
    919c:	1023883a 	mov	r17,r2
    91a0:	000ab9c0 	call	ab9c <__multiply>
    91a4:	1021883a 	mov	r16,r2
    91a8:	d8800a17 	ldw	r2,40(sp)
    91ac:	d9400917 	ldw	r5,36(sp)
    91b0:	e009883a 	mov	r4,fp
    91b4:	1545c83a 	sub	r2,r2,r21
    91b8:	d8800a15 	stw	r2,40(sp)
    91bc:	000a7d40 	call	a7d4 <_Bfree>
    91c0:	d8c00a17 	ldw	r3,40(sp)
    91c4:	18009f1e 	bne	r3,zero,9444 <_dtoa_r+0xce4>
    91c8:	05c00044 	movi	r23,1
    91cc:	e009883a 	mov	r4,fp
    91d0:	b80b883a 	mov	r5,r23
    91d4:	000ab600 	call	ab60 <__i2b>
    91d8:	d9000d17 	ldw	r4,52(sp)
    91dc:	102b883a 	mov	r21,r2
    91e0:	2000ce26 	beq	r4,zero,951c <_dtoa_r+0xdbc>
    91e4:	200d883a 	mov	r6,r4
    91e8:	100b883a 	mov	r5,r2
    91ec:	e009883a 	mov	r4,fp
    91f0:	000ae280 	call	ae28 <__pow5mult>
    91f4:	d9800317 	ldw	r6,12(sp)
    91f8:	102b883a 	mov	r21,r2
    91fc:	b981810e 	bge	r23,r6,9804 <_dtoa_r+0x10a4>
    9200:	0027883a 	mov	r19,zero
    9204:	a8800417 	ldw	r2,16(r21)
    9208:	05c00804 	movi	r23,32
    920c:	10800104 	addi	r2,r2,4
    9210:	1085883a 	add	r2,r2,r2
    9214:	1085883a 	add	r2,r2,r2
    9218:	a885883a 	add	r2,r21,r2
    921c:	11000017 	ldw	r4,0(r2)
    9220:	000aa480 	call	aa48 <__hi0bits>
    9224:	b885c83a 	sub	r2,r23,r2
    9228:	1585883a 	add	r2,r2,r22
    922c:	108007cc 	andi	r2,r2,31
    9230:	1000b326 	beq	r2,zero,9500 <_dtoa_r+0xda0>
    9234:	00c00804 	movi	r3,32
    9238:	1887c83a 	sub	r3,r3,r2
    923c:	01000104 	movi	r4,4
    9240:	20c2cd0e 	bge	r4,r3,9d78 <_dtoa_r+0x1618>
    9244:	00c00704 	movi	r3,28
    9248:	1885c83a 	sub	r2,r3,r2
    924c:	d8c00817 	ldw	r3,32(sp)
    9250:	a0a9883a 	add	r20,r20,r2
    9254:	b0ad883a 	add	r22,r22,r2
    9258:	1887883a 	add	r3,r3,r2
    925c:	d8c00815 	stw	r3,32(sp)
    9260:	d9800817 	ldw	r6,32(sp)
    9264:	0180040e 	bge	zero,r6,9278 <_dtoa_r+0xb18>
    9268:	800b883a 	mov	r5,r16
    926c:	e009883a 	mov	r4,fp
    9270:	000af680 	call	af68 <__lshift>
    9274:	1021883a 	mov	r16,r2
    9278:	0580050e 	bge	zero,r22,9290 <_dtoa_r+0xb30>
    927c:	a80b883a 	mov	r5,r21
    9280:	b00d883a 	mov	r6,r22
    9284:	e009883a 	mov	r4,fp
    9288:	000af680 	call	af68 <__lshift>
    928c:	102b883a 	mov	r21,r2
    9290:	d9c00e17 	ldw	r7,56(sp)
    9294:	3801211e 	bne	r7,zero,971c <_dtoa_r+0xfbc>
    9298:	d9800617 	ldw	r6,24(sp)
    929c:	0181380e 	bge	zero,r6,9780 <_dtoa_r+0x1020>
    92a0:	d8c00b17 	ldw	r3,44(sp)
    92a4:	1800ab1e 	bne	r3,zero,9554 <_dtoa_r+0xdf4>
    92a8:	dc800717 	ldw	r18,28(sp)
    92ac:	dcc00617 	ldw	r19,24(sp)
    92b0:	9029883a 	mov	r20,r18
    92b4:	00000206 	br	92c0 <_dtoa_r+0xb60>
    92b8:	000a7fc0 	call	a7fc <__multadd>
    92bc:	1021883a 	mov	r16,r2
    92c0:	a80b883a 	mov	r5,r21
    92c4:	8009883a 	mov	r4,r16
    92c8:	00085380 	call	8538 <quorem>
    92cc:	10800c04 	addi	r2,r2,48
    92d0:	90800005 	stb	r2,0(r18)
    92d4:	94800044 	addi	r18,r18,1
    92d8:	9507c83a 	sub	r3,r18,r20
    92dc:	000f883a 	mov	r7,zero
    92e0:	01800284 	movi	r6,10
    92e4:	800b883a 	mov	r5,r16
    92e8:	e009883a 	mov	r4,fp
    92ec:	1cfff216 	blt	r3,r19,92b8 <__alt_data_end+0xfffe92b8>
    92f0:	1011883a 	mov	r8,r2
    92f4:	d8800617 	ldw	r2,24(sp)
    92f8:	0082370e 	bge	zero,r2,9bd8 <_dtoa_r+0x1478>
    92fc:	d9000717 	ldw	r4,28(sp)
    9300:	0025883a 	mov	r18,zero
    9304:	20af883a 	add	r23,r4,r2
    9308:	01800044 	movi	r6,1
    930c:	800b883a 	mov	r5,r16
    9310:	e009883a 	mov	r4,fp
    9314:	da001715 	stw	r8,92(sp)
    9318:	000af680 	call	af68 <__lshift>
    931c:	a80b883a 	mov	r5,r21
    9320:	1009883a 	mov	r4,r2
    9324:	d8800915 	stw	r2,36(sp)
    9328:	000b0b00 	call	b0b0 <__mcmp>
    932c:	da001717 	ldw	r8,92(sp)
    9330:	0081800e 	bge	zero,r2,9934 <_dtoa_r+0x11d4>
    9334:	b93fffc3 	ldbu	r4,-1(r23)
    9338:	b8bfffc4 	addi	r2,r23,-1
    933c:	1007883a 	mov	r3,r2
    9340:	01800e44 	movi	r6,57
    9344:	d9c00717 	ldw	r7,28(sp)
    9348:	00000506 	br	9360 <_dtoa_r+0xc00>
    934c:	18ffffc4 	addi	r3,r3,-1
    9350:	11c12326 	beq	r2,r7,97e0 <_dtoa_r+0x1080>
    9354:	19000003 	ldbu	r4,0(r3)
    9358:	102f883a 	mov	r23,r2
    935c:	10bfffc4 	addi	r2,r2,-1
    9360:	21403fcc 	andi	r5,r4,255
    9364:	2940201c 	xori	r5,r5,128
    9368:	297fe004 	addi	r5,r5,-128
    936c:	29bff726 	beq	r5,r6,934c <__alt_data_end+0xfffe934c>
    9370:	21000044 	addi	r4,r4,1
    9374:	11000005 	stb	r4,0(r2)
    9378:	a80b883a 	mov	r5,r21
    937c:	e009883a 	mov	r4,fp
    9380:	000a7d40 	call	a7d4 <_Bfree>
    9384:	883ea026 	beq	r17,zero,8e08 <__alt_data_end+0xfffe8e08>
    9388:	90000426 	beq	r18,zero,939c <_dtoa_r+0xc3c>
    938c:	94400326 	beq	r18,r17,939c <_dtoa_r+0xc3c>
    9390:	900b883a 	mov	r5,r18
    9394:	e009883a 	mov	r4,fp
    9398:	000a7d40 	call	a7d4 <_Bfree>
    939c:	880b883a 	mov	r5,r17
    93a0:	e009883a 	mov	r4,fp
    93a4:	000a7d40 	call	a7d4 <_Bfree>
    93a8:	003e9706 	br	8e08 <__alt_data_end+0xfffe8e08>
    93ac:	01800044 	movi	r6,1
    93b0:	d9800e15 	stw	r6,56(sp)
    93b4:	003d9606 	br	8a10 <__alt_data_end+0xfffe8a10>
    93b8:	d8800817 	ldw	r2,32(sp)
    93bc:	d8c00517 	ldw	r3,20(sp)
    93c0:	d8000d15 	stw	zero,52(sp)
    93c4:	10c5c83a 	sub	r2,r2,r3
    93c8:	00c9c83a 	sub	r4,zero,r3
    93cc:	d8800815 	stw	r2,32(sp)
    93d0:	d9000a15 	stw	r4,40(sp)
    93d4:	003d9706 	br	8a34 <__alt_data_end+0xfffe8a34>
    93d8:	05adc83a 	sub	r22,zero,r22
    93dc:	dd800815 	stw	r22,32(sp)
    93e0:	002d883a 	mov	r22,zero
    93e4:	003d8e06 	br	8a20 <__alt_data_end+0xfffe8a20>
    93e8:	d9000517 	ldw	r4,20(sp)
    93ec:	00033700 	call	3370 <__floatsidf>
    93f0:	100d883a 	mov	r6,r2
    93f4:	180f883a 	mov	r7,r3
    93f8:	a009883a 	mov	r4,r20
    93fc:	880b883a 	mov	r5,r17
    9400:	000e7d40 	call	e7d4 <__eqdf2>
    9404:	103d7126 	beq	r2,zero,89cc <__alt_data_end+0xfffe89cc>
    9408:	d9c00517 	ldw	r7,20(sp)
    940c:	39ffffc4 	addi	r7,r7,-1
    9410:	d9c00515 	stw	r7,20(sp)
    9414:	003d6d06 	br	89cc <__alt_data_end+0xfffe89cc>
    9418:	dd400a17 	ldw	r21,40(sp)
    941c:	dd000817 	ldw	r20,32(sp)
    9420:	0023883a 	mov	r17,zero
    9424:	003f4806 	br	9148 <__alt_data_end+0xfffe9148>
    9428:	10e3c83a 	sub	r17,r2,r3
    942c:	9448983a 	sll	r4,r18,r17
    9430:	003d3206 	br	88fc <__alt_data_end+0xfffe88fc>
    9434:	d8000e15 	stw	zero,56(sp)
    9438:	003d7506 	br	8a10 <__alt_data_end+0xfffe8a10>
    943c:	b005883a 	mov	r2,r22
    9440:	003f4506 	br	9158 <__alt_data_end+0xfffe9158>
    9444:	dc000915 	stw	r16,36(sp)
    9448:	d9800a17 	ldw	r6,40(sp)
    944c:	d9400917 	ldw	r5,36(sp)
    9450:	e009883a 	mov	r4,fp
    9454:	000ae280 	call	ae28 <__pow5mult>
    9458:	1021883a 	mov	r16,r2
    945c:	003f5a06 	br	91c8 <__alt_data_end+0xfffe91c8>
    9460:	01c00044 	movi	r7,1
    9464:	d9c00b15 	stw	r7,44(sp)
    9468:	d8802217 	ldw	r2,136(sp)
    946c:	0081280e 	bge	zero,r2,9910 <_dtoa_r+0x11b0>
    9470:	100d883a 	mov	r6,r2
    9474:	1021883a 	mov	r16,r2
    9478:	d8800c15 	stw	r2,48(sp)
    947c:	d8800615 	stw	r2,24(sp)
    9480:	003d8806 	br	8aa4 <__alt_data_end+0xfffe8aa4>
    9484:	d8800617 	ldw	r2,24(sp)
    9488:	00be9b16 	blt	zero,r2,8ef8 <__alt_data_end+0xfffe8ef8>
    948c:	10010f1e 	bne	r2,zero,98cc <_dtoa_r+0x116c>
    9490:	880b883a 	mov	r5,r17
    9494:	000d883a 	mov	r6,zero
    9498:	01d00534 	movhi	r7,16404
    949c:	8009883a 	mov	r4,r16
    94a0:	00022080 	call	2208 <__muldf3>
    94a4:	900d883a 	mov	r6,r18
    94a8:	980f883a 	mov	r7,r19
    94ac:	1009883a 	mov	r4,r2
    94b0:	180b883a 	mov	r5,r3
    94b4:	000212c0 	call	212c <__gedf2>
    94b8:	002b883a 	mov	r21,zero
    94bc:	0023883a 	mov	r17,zero
    94c0:	1000bf16 	blt	r2,zero,97c0 <_dtoa_r+0x1060>
    94c4:	d9802217 	ldw	r6,136(sp)
    94c8:	ddc00717 	ldw	r23,28(sp)
    94cc:	018c303a 	nor	r6,zero,r6
    94d0:	d9800515 	stw	r6,20(sp)
    94d4:	a80b883a 	mov	r5,r21
    94d8:	e009883a 	mov	r4,fp
    94dc:	000a7d40 	call	a7d4 <_Bfree>
    94e0:	883e4926 	beq	r17,zero,8e08 <__alt_data_end+0xfffe8e08>
    94e4:	003fad06 	br	939c <__alt_data_end+0xfffe939c>
    94e8:	d9c01117 	ldw	r7,68(sp)
    94ec:	3801bc26 	beq	r7,zero,9be0 <_dtoa_r+0x1480>
    94f0:	10810cc4 	addi	r2,r2,1075
    94f4:	dd400a17 	ldw	r21,40(sp)
    94f8:	dd000817 	ldw	r20,32(sp)
    94fc:	003f0a06 	br	9128 <__alt_data_end+0xfffe9128>
    9500:	00800704 	movi	r2,28
    9504:	d9000817 	ldw	r4,32(sp)
    9508:	a0a9883a 	add	r20,r20,r2
    950c:	b0ad883a 	add	r22,r22,r2
    9510:	2089883a 	add	r4,r4,r2
    9514:	d9000815 	stw	r4,32(sp)
    9518:	003f5106 	br	9260 <__alt_data_end+0xfffe9260>
    951c:	d8c00317 	ldw	r3,12(sp)
    9520:	b8c1fc0e 	bge	r23,r3,9d14 <_dtoa_r+0x15b4>
    9524:	0027883a 	mov	r19,zero
    9528:	b805883a 	mov	r2,r23
    952c:	003f3e06 	br	9228 <__alt_data_end+0xfffe9228>
    9530:	880b883a 	mov	r5,r17
    9534:	e009883a 	mov	r4,fp
    9538:	000f883a 	mov	r7,zero
    953c:	01800284 	movi	r6,10
    9540:	000a7fc0 	call	a7fc <__multadd>
    9544:	d9000c17 	ldw	r4,48(sp)
    9548:	1023883a 	mov	r17,r2
    954c:	0102040e 	bge	zero,r4,9d60 <_dtoa_r+0x1600>
    9550:	d9000615 	stw	r4,24(sp)
    9554:	0500050e 	bge	zero,r20,956c <_dtoa_r+0xe0c>
    9558:	880b883a 	mov	r5,r17
    955c:	a00d883a 	mov	r6,r20
    9560:	e009883a 	mov	r4,fp
    9564:	000af680 	call	af68 <__lshift>
    9568:	1023883a 	mov	r17,r2
    956c:	9801241e 	bne	r19,zero,9a00 <_dtoa_r+0x12a0>
    9570:	8829883a 	mov	r20,r17
    9574:	d9000617 	ldw	r4,24(sp)
    9578:	dcc00717 	ldw	r19,28(sp)
    957c:	9480004c 	andi	r18,r18,1
    9580:	20bfffc4 	addi	r2,r4,-1
    9584:	9885883a 	add	r2,r19,r2
    9588:	d8800415 	stw	r2,16(sp)
    958c:	dc800615 	stw	r18,24(sp)
    9590:	a80b883a 	mov	r5,r21
    9594:	8009883a 	mov	r4,r16
    9598:	00085380 	call	8538 <quorem>
    959c:	880b883a 	mov	r5,r17
    95a0:	8009883a 	mov	r4,r16
    95a4:	102f883a 	mov	r23,r2
    95a8:	000b0b00 	call	b0b0 <__mcmp>
    95ac:	a80b883a 	mov	r5,r21
    95b0:	a00d883a 	mov	r6,r20
    95b4:	e009883a 	mov	r4,fp
    95b8:	102d883a 	mov	r22,r2
    95bc:	000b1100 	call	b110 <__mdiff>
    95c0:	1007883a 	mov	r3,r2
    95c4:	10800317 	ldw	r2,12(r2)
    95c8:	bc800c04 	addi	r18,r23,48
    95cc:	180b883a 	mov	r5,r3
    95d0:	10004e1e 	bne	r2,zero,970c <_dtoa_r+0xfac>
    95d4:	8009883a 	mov	r4,r16
    95d8:	d8c01615 	stw	r3,88(sp)
    95dc:	000b0b00 	call	b0b0 <__mcmp>
    95e0:	d8c01617 	ldw	r3,88(sp)
    95e4:	e009883a 	mov	r4,fp
    95e8:	d8801615 	stw	r2,88(sp)
    95ec:	180b883a 	mov	r5,r3
    95f0:	000a7d40 	call	a7d4 <_Bfree>
    95f4:	d8801617 	ldw	r2,88(sp)
    95f8:	1000041e 	bne	r2,zero,960c <_dtoa_r+0xeac>
    95fc:	d9800317 	ldw	r6,12(sp)
    9600:	3000021e 	bne	r6,zero,960c <_dtoa_r+0xeac>
    9604:	d8c00617 	ldw	r3,24(sp)
    9608:	18003726 	beq	r3,zero,96e8 <_dtoa_r+0xf88>
    960c:	b0002016 	blt	r22,zero,9690 <_dtoa_r+0xf30>
    9610:	b000041e 	bne	r22,zero,9624 <_dtoa_r+0xec4>
    9614:	d9000317 	ldw	r4,12(sp)
    9618:	2000021e 	bne	r4,zero,9624 <_dtoa_r+0xec4>
    961c:	d8c00617 	ldw	r3,24(sp)
    9620:	18001b26 	beq	r3,zero,9690 <_dtoa_r+0xf30>
    9624:	00810716 	blt	zero,r2,9a44 <_dtoa_r+0x12e4>
    9628:	d8c00417 	ldw	r3,16(sp)
    962c:	9d800044 	addi	r22,r19,1
    9630:	9c800005 	stb	r18,0(r19)
    9634:	b02f883a 	mov	r23,r22
    9638:	98c10626 	beq	r19,r3,9a54 <_dtoa_r+0x12f4>
    963c:	800b883a 	mov	r5,r16
    9640:	000f883a 	mov	r7,zero
    9644:	01800284 	movi	r6,10
    9648:	e009883a 	mov	r4,fp
    964c:	000a7fc0 	call	a7fc <__multadd>
    9650:	1021883a 	mov	r16,r2
    9654:	000f883a 	mov	r7,zero
    9658:	01800284 	movi	r6,10
    965c:	880b883a 	mov	r5,r17
    9660:	e009883a 	mov	r4,fp
    9664:	8d002526 	beq	r17,r20,96fc <_dtoa_r+0xf9c>
    9668:	000a7fc0 	call	a7fc <__multadd>
    966c:	a00b883a 	mov	r5,r20
    9670:	000f883a 	mov	r7,zero
    9674:	01800284 	movi	r6,10
    9678:	e009883a 	mov	r4,fp
    967c:	1023883a 	mov	r17,r2
    9680:	000a7fc0 	call	a7fc <__multadd>
    9684:	1029883a 	mov	r20,r2
    9688:	b027883a 	mov	r19,r22
    968c:	003fc006 	br	9590 <__alt_data_end+0xfffe9590>
    9690:	9011883a 	mov	r8,r18
    9694:	00800e0e 	bge	zero,r2,96d0 <_dtoa_r+0xf70>
    9698:	800b883a 	mov	r5,r16
    969c:	01800044 	movi	r6,1
    96a0:	e009883a 	mov	r4,fp
    96a4:	da001715 	stw	r8,92(sp)
    96a8:	000af680 	call	af68 <__lshift>
    96ac:	a80b883a 	mov	r5,r21
    96b0:	1009883a 	mov	r4,r2
    96b4:	1021883a 	mov	r16,r2
    96b8:	000b0b00 	call	b0b0 <__mcmp>
    96bc:	da001717 	ldw	r8,92(sp)
    96c0:	0081960e 	bge	zero,r2,9d1c <_dtoa_r+0x15bc>
    96c4:	00800e44 	movi	r2,57
    96c8:	40817026 	beq	r8,r2,9c8c <_dtoa_r+0x152c>
    96cc:	ba000c44 	addi	r8,r23,49
    96d0:	8825883a 	mov	r18,r17
    96d4:	9dc00044 	addi	r23,r19,1
    96d8:	9a000005 	stb	r8,0(r19)
    96dc:	a023883a 	mov	r17,r20
    96e0:	dc000915 	stw	r16,36(sp)
    96e4:	003f2406 	br	9378 <__alt_data_end+0xfffe9378>
    96e8:	00800e44 	movi	r2,57
    96ec:	9011883a 	mov	r8,r18
    96f0:	90816626 	beq	r18,r2,9c8c <_dtoa_r+0x152c>
    96f4:	05bff516 	blt	zero,r22,96cc <__alt_data_end+0xfffe96cc>
    96f8:	003ff506 	br	96d0 <__alt_data_end+0xfffe96d0>
    96fc:	000a7fc0 	call	a7fc <__multadd>
    9700:	1023883a 	mov	r17,r2
    9704:	1029883a 	mov	r20,r2
    9708:	003fdf06 	br	9688 <__alt_data_end+0xfffe9688>
    970c:	e009883a 	mov	r4,fp
    9710:	000a7d40 	call	a7d4 <_Bfree>
    9714:	00800044 	movi	r2,1
    9718:	003fbc06 	br	960c <__alt_data_end+0xfffe960c>
    971c:	a80b883a 	mov	r5,r21
    9720:	8009883a 	mov	r4,r16
    9724:	000b0b00 	call	b0b0 <__mcmp>
    9728:	103edb0e 	bge	r2,zero,9298 <__alt_data_end+0xfffe9298>
    972c:	800b883a 	mov	r5,r16
    9730:	000f883a 	mov	r7,zero
    9734:	01800284 	movi	r6,10
    9738:	e009883a 	mov	r4,fp
    973c:	000a7fc0 	call	a7fc <__multadd>
    9740:	1021883a 	mov	r16,r2
    9744:	d8800517 	ldw	r2,20(sp)
    9748:	d8c00b17 	ldw	r3,44(sp)
    974c:	10bfffc4 	addi	r2,r2,-1
    9750:	d8800515 	stw	r2,20(sp)
    9754:	183f761e 	bne	r3,zero,9530 <__alt_data_end+0xfffe9530>
    9758:	d9000c17 	ldw	r4,48(sp)
    975c:	0101730e 	bge	zero,r4,9d2c <_dtoa_r+0x15cc>
    9760:	d9000615 	stw	r4,24(sp)
    9764:	003ed006 	br	92a8 <__alt_data_end+0xfffe92a8>
    9768:	00800084 	movi	r2,2
    976c:	3081861e 	bne	r6,r2,9d88 <_dtoa_r+0x1628>
    9770:	d8000b15 	stw	zero,44(sp)
    9774:	003f3c06 	br	9468 <__alt_data_end+0xfffe9468>
    9778:	dc000917 	ldw	r16,36(sp)
    977c:	003e9206 	br	91c8 <__alt_data_end+0xfffe91c8>
    9780:	d9c00317 	ldw	r7,12(sp)
    9784:	00800084 	movi	r2,2
    9788:	11fec50e 	bge	r2,r7,92a0 <__alt_data_end+0xfffe92a0>
    978c:	d9000617 	ldw	r4,24(sp)
    9790:	20013c1e 	bne	r4,zero,9c84 <_dtoa_r+0x1524>
    9794:	a80b883a 	mov	r5,r21
    9798:	000f883a 	mov	r7,zero
    979c:	01800144 	movi	r6,5
    97a0:	e009883a 	mov	r4,fp
    97a4:	000a7fc0 	call	a7fc <__multadd>
    97a8:	100b883a 	mov	r5,r2
    97ac:	8009883a 	mov	r4,r16
    97b0:	102b883a 	mov	r21,r2
    97b4:	000b0b00 	call	b0b0 <__mcmp>
    97b8:	dc000915 	stw	r16,36(sp)
    97bc:	00bf410e 	bge	zero,r2,94c4 <__alt_data_end+0xfffe94c4>
    97c0:	d9c00717 	ldw	r7,28(sp)
    97c4:	00800c44 	movi	r2,49
    97c8:	38800005 	stb	r2,0(r7)
    97cc:	d8800517 	ldw	r2,20(sp)
    97d0:	3dc00044 	addi	r23,r7,1
    97d4:	10800044 	addi	r2,r2,1
    97d8:	d8800515 	stw	r2,20(sp)
    97dc:	003f3d06 	br	94d4 <__alt_data_end+0xfffe94d4>
    97e0:	d9800517 	ldw	r6,20(sp)
    97e4:	d9c00717 	ldw	r7,28(sp)
    97e8:	00800c44 	movi	r2,49
    97ec:	31800044 	addi	r6,r6,1
    97f0:	d9800515 	stw	r6,20(sp)
    97f4:	38800005 	stb	r2,0(r7)
    97f8:	003edf06 	br	9378 <__alt_data_end+0xfffe9378>
    97fc:	d8000b15 	stw	zero,44(sp)
    9800:	003c9f06 	br	8a80 <__alt_data_end+0xfffe8a80>
    9804:	903e7e1e 	bne	r18,zero,9200 <__alt_data_end+0xfffe9200>
    9808:	00800434 	movhi	r2,16
    980c:	10bfffc4 	addi	r2,r2,-1
    9810:	9884703a 	and	r2,r19,r2
    9814:	1000ea1e 	bne	r2,zero,9bc0 <_dtoa_r+0x1460>
    9818:	9cdffc2c 	andhi	r19,r19,32752
    981c:	9800e826 	beq	r19,zero,9bc0 <_dtoa_r+0x1460>
    9820:	d9c00817 	ldw	r7,32(sp)
    9824:	b5800044 	addi	r22,r22,1
    9828:	04c00044 	movi	r19,1
    982c:	39c00044 	addi	r7,r7,1
    9830:	d9c00815 	stw	r7,32(sp)
    9834:	d8800d17 	ldw	r2,52(sp)
    9838:	103e721e 	bne	r2,zero,9204 <__alt_data_end+0xfffe9204>
    983c:	00800044 	movi	r2,1
    9840:	003e7906 	br	9228 <__alt_data_end+0xfffe9228>
    9844:	8009883a 	mov	r4,r16
    9848:	00033700 	call	3370 <__floatsidf>
    984c:	d9800f17 	ldw	r6,60(sp)
    9850:	d9c01017 	ldw	r7,64(sp)
    9854:	1009883a 	mov	r4,r2
    9858:	180b883a 	mov	r5,r3
    985c:	00022080 	call	2208 <__muldf3>
    9860:	000d883a 	mov	r6,zero
    9864:	01d00734 	movhi	r7,16412
    9868:	1009883a 	mov	r4,r2
    986c:	180b883a 	mov	r5,r3
    9870:	0000eb00 	call	eb0 <__adddf3>
    9874:	047f3034 	movhi	r17,64704
    9878:	1021883a 	mov	r16,r2
    987c:	1c63883a 	add	r17,r3,r17
    9880:	d9000f17 	ldw	r4,60(sp)
    9884:	d9401017 	ldw	r5,64(sp)
    9888:	000d883a 	mov	r6,zero
    988c:	01d00534 	movhi	r7,16404
    9890:	0002a740 	call	2a74 <__subdf3>
    9894:	800d883a 	mov	r6,r16
    9898:	880f883a 	mov	r7,r17
    989c:	1009883a 	mov	r4,r2
    98a0:	180b883a 	mov	r5,r3
    98a4:	102b883a 	mov	r21,r2
    98a8:	1829883a 	mov	r20,r3
    98ac:	000212c0 	call	212c <__gedf2>
    98b0:	00806c16 	blt	zero,r2,9a64 <_dtoa_r+0x1304>
    98b4:	89e0003c 	xorhi	r7,r17,32768
    98b8:	800d883a 	mov	r6,r16
    98bc:	a809883a 	mov	r4,r21
    98c0:	a00b883a 	mov	r5,r20
    98c4:	000e85c0 	call	e85c <__ledf2>
    98c8:	103d7e0e 	bge	r2,zero,8ec4 <__alt_data_end+0xfffe8ec4>
    98cc:	002b883a 	mov	r21,zero
    98d0:	0023883a 	mov	r17,zero
    98d4:	003efb06 	br	94c4 <__alt_data_end+0xfffe94c4>
    98d8:	d8800717 	ldw	r2,28(sp)
    98dc:	003bd006 	br	8820 <__alt_data_end+0xfffe8820>
    98e0:	d9000a17 	ldw	r4,40(sp)
    98e4:	d9800d17 	ldw	r6,52(sp)
    98e8:	dd400a15 	stw	r21,40(sp)
    98ec:	a905c83a 	sub	r2,r21,r4
    98f0:	308d883a 	add	r6,r6,r2
    98f4:	d9800d15 	stw	r6,52(sp)
    98f8:	002b883a 	mov	r21,zero
    98fc:	003e0606 	br	9118 <__alt_data_end+0xfffe9118>
    9900:	9023883a 	mov	r17,r18
    9904:	9829883a 	mov	r20,r19
    9908:	04000084 	movi	r16,2
    990c:	003c9206 	br	8b58 <__alt_data_end+0xfffe8b58>
    9910:	04000044 	movi	r16,1
    9914:	dc000c15 	stw	r16,48(sp)
    9918:	dc000615 	stw	r16,24(sp)
    991c:	dc002215 	stw	r16,136(sp)
    9920:	e0001115 	stw	zero,68(fp)
    9924:	000b883a 	mov	r5,zero
    9928:	003c6906 	br	8ad0 <__alt_data_end+0xfffe8ad0>
    992c:	3021883a 	mov	r16,r6
    9930:	003ffb06 	br	9920 <__alt_data_end+0xfffe9920>
    9934:	1000021e 	bne	r2,zero,9940 <_dtoa_r+0x11e0>
    9938:	4200004c 	andi	r8,r8,1
    993c:	403e7d1e 	bne	r8,zero,9334 <__alt_data_end+0xfffe9334>
    9940:	01000c04 	movi	r4,48
    9944:	00000106 	br	994c <_dtoa_r+0x11ec>
    9948:	102f883a 	mov	r23,r2
    994c:	b8bfffc4 	addi	r2,r23,-1
    9950:	10c00007 	ldb	r3,0(r2)
    9954:	193ffc26 	beq	r3,r4,9948 <__alt_data_end+0xfffe9948>
    9958:	003e8706 	br	9378 <__alt_data_end+0xfffe9378>
    995c:	d8800517 	ldw	r2,20(sp)
    9960:	00a3c83a 	sub	r17,zero,r2
    9964:	8800a426 	beq	r17,zero,9bf8 <_dtoa_r+0x1498>
    9968:	888003cc 	andi	r2,r17,15
    996c:	100490fa 	slli	r2,r2,3
    9970:	00c00074 	movhi	r3,1
    9974:	18c4c404 	addi	r3,r3,4880
    9978:	1885883a 	add	r2,r3,r2
    997c:	11800017 	ldw	r6,0(r2)
    9980:	11c00117 	ldw	r7,4(r2)
    9984:	9009883a 	mov	r4,r18
    9988:	980b883a 	mov	r5,r19
    998c:	8823d13a 	srai	r17,r17,4
    9990:	00022080 	call	2208 <__muldf3>
    9994:	d8800f15 	stw	r2,60(sp)
    9998:	d8c01015 	stw	r3,64(sp)
    999c:	8800e826 	beq	r17,zero,9d40 <_dtoa_r+0x15e0>
    99a0:	05000074 	movhi	r20,1
    99a4:	a504ba04 	addi	r20,r20,4840
    99a8:	04000084 	movi	r16,2
    99ac:	8980004c 	andi	r6,r17,1
    99b0:	1009883a 	mov	r4,r2
    99b4:	8823d07a 	srai	r17,r17,1
    99b8:	180b883a 	mov	r5,r3
    99bc:	30000426 	beq	r6,zero,99d0 <_dtoa_r+0x1270>
    99c0:	a1800017 	ldw	r6,0(r20)
    99c4:	a1c00117 	ldw	r7,4(r20)
    99c8:	84000044 	addi	r16,r16,1
    99cc:	00022080 	call	2208 <__muldf3>
    99d0:	a5000204 	addi	r20,r20,8
    99d4:	883ff51e 	bne	r17,zero,99ac <__alt_data_end+0xfffe99ac>
    99d8:	d8800f15 	stw	r2,60(sp)
    99dc:	d8c01015 	stw	r3,64(sp)
    99e0:	003c7606 	br	8bbc <__alt_data_end+0xfffe8bbc>
    99e4:	00c00c04 	movi	r3,48
    99e8:	10c00005 	stb	r3,0(r2)
    99ec:	d8c00517 	ldw	r3,20(sp)
    99f0:	bd3fffc3 	ldbu	r20,-1(r23)
    99f4:	18c00044 	addi	r3,r3,1
    99f8:	d8c00515 	stw	r3,20(sp)
    99fc:	003db906 	br	90e4 <__alt_data_end+0xfffe90e4>
    9a00:	89400117 	ldw	r5,4(r17)
    9a04:	e009883a 	mov	r4,fp
    9a08:	000a72c0 	call	a72c <_Balloc>
    9a0c:	89800417 	ldw	r6,16(r17)
    9a10:	89400304 	addi	r5,r17,12
    9a14:	11000304 	addi	r4,r2,12
    9a18:	31800084 	addi	r6,r6,2
    9a1c:	318d883a 	add	r6,r6,r6
    9a20:	318d883a 	add	r6,r6,r6
    9a24:	1027883a 	mov	r19,r2
    9a28:	00055d40 	call	55d4 <memcpy>
    9a2c:	01800044 	movi	r6,1
    9a30:	980b883a 	mov	r5,r19
    9a34:	e009883a 	mov	r4,fp
    9a38:	000af680 	call	af68 <__lshift>
    9a3c:	1029883a 	mov	r20,r2
    9a40:	003ecc06 	br	9574 <__alt_data_end+0xfffe9574>
    9a44:	00800e44 	movi	r2,57
    9a48:	90809026 	beq	r18,r2,9c8c <_dtoa_r+0x152c>
    9a4c:	92000044 	addi	r8,r18,1
    9a50:	003f1f06 	br	96d0 <__alt_data_end+0xfffe96d0>
    9a54:	9011883a 	mov	r8,r18
    9a58:	8825883a 	mov	r18,r17
    9a5c:	a023883a 	mov	r17,r20
    9a60:	003e2906 	br	9308 <__alt_data_end+0xfffe9308>
    9a64:	002b883a 	mov	r21,zero
    9a68:	0023883a 	mov	r17,zero
    9a6c:	003f5406 	br	97c0 <__alt_data_end+0xfffe97c0>
    9a70:	61bfffc4 	addi	r6,r12,-1
    9a74:	300490fa 	slli	r2,r6,3
    9a78:	00c00074 	movhi	r3,1
    9a7c:	18c4c404 	addi	r3,r3,4880
    9a80:	1885883a 	add	r2,r3,r2
    9a84:	11000017 	ldw	r4,0(r2)
    9a88:	11400117 	ldw	r5,4(r2)
    9a8c:	d8800717 	ldw	r2,28(sp)
    9a90:	880f883a 	mov	r7,r17
    9a94:	d9801215 	stw	r6,72(sp)
    9a98:	800d883a 	mov	r6,r16
    9a9c:	db001615 	stw	r12,88(sp)
    9aa0:	15c00044 	addi	r23,r2,1
    9aa4:	00022080 	call	2208 <__muldf3>
    9aa8:	d9401017 	ldw	r5,64(sp)
    9aac:	d9000f17 	ldw	r4,60(sp)
    9ab0:	d8c01515 	stw	r3,84(sp)
    9ab4:	d8801415 	stw	r2,80(sp)
    9ab8:	000e9500 	call	e950 <__fixdfsi>
    9abc:	1009883a 	mov	r4,r2
    9ac0:	1021883a 	mov	r16,r2
    9ac4:	00033700 	call	3370 <__floatsidf>
    9ac8:	d9000f17 	ldw	r4,60(sp)
    9acc:	d9401017 	ldw	r5,64(sp)
    9ad0:	100d883a 	mov	r6,r2
    9ad4:	180f883a 	mov	r7,r3
    9ad8:	0002a740 	call	2a74 <__subdf3>
    9adc:	1829883a 	mov	r20,r3
    9ae0:	d8c00717 	ldw	r3,28(sp)
    9ae4:	84000c04 	addi	r16,r16,48
    9ae8:	1023883a 	mov	r17,r2
    9aec:	1c000005 	stb	r16,0(r3)
    9af0:	db001617 	ldw	r12,88(sp)
    9af4:	00800044 	movi	r2,1
    9af8:	60802226 	beq	r12,r2,9b84 <_dtoa_r+0x1424>
    9afc:	d9c00717 	ldw	r7,28(sp)
    9b00:	8805883a 	mov	r2,r17
    9b04:	b82b883a 	mov	r21,r23
    9b08:	3b19883a 	add	r12,r7,r12
    9b0c:	6023883a 	mov	r17,r12
    9b10:	a007883a 	mov	r3,r20
    9b14:	dc800f15 	stw	r18,60(sp)
    9b18:	000d883a 	mov	r6,zero
    9b1c:	01d00934 	movhi	r7,16420
    9b20:	1009883a 	mov	r4,r2
    9b24:	180b883a 	mov	r5,r3
    9b28:	00022080 	call	2208 <__muldf3>
    9b2c:	180b883a 	mov	r5,r3
    9b30:	1009883a 	mov	r4,r2
    9b34:	1829883a 	mov	r20,r3
    9b38:	1025883a 	mov	r18,r2
    9b3c:	000e9500 	call	e950 <__fixdfsi>
    9b40:	1009883a 	mov	r4,r2
    9b44:	1021883a 	mov	r16,r2
    9b48:	00033700 	call	3370 <__floatsidf>
    9b4c:	100d883a 	mov	r6,r2
    9b50:	180f883a 	mov	r7,r3
    9b54:	9009883a 	mov	r4,r18
    9b58:	a00b883a 	mov	r5,r20
    9b5c:	84000c04 	addi	r16,r16,48
    9b60:	0002a740 	call	2a74 <__subdf3>
    9b64:	ad400044 	addi	r21,r21,1
    9b68:	ac3fffc5 	stb	r16,-1(r21)
    9b6c:	ac7fea1e 	bne	r21,r17,9b18 <__alt_data_end+0xfffe9b18>
    9b70:	1023883a 	mov	r17,r2
    9b74:	d8801217 	ldw	r2,72(sp)
    9b78:	dc800f17 	ldw	r18,60(sp)
    9b7c:	1829883a 	mov	r20,r3
    9b80:	b8af883a 	add	r23,r23,r2
    9b84:	d9001417 	ldw	r4,80(sp)
    9b88:	d9401517 	ldw	r5,84(sp)
    9b8c:	000d883a 	mov	r6,zero
    9b90:	01cff834 	movhi	r7,16352
    9b94:	0000eb00 	call	eb0 <__adddf3>
    9b98:	880d883a 	mov	r6,r17
    9b9c:	a00f883a 	mov	r7,r20
    9ba0:	1009883a 	mov	r4,r2
    9ba4:	180b883a 	mov	r5,r3
    9ba8:	000e85c0 	call	e85c <__ledf2>
    9bac:	10003e0e 	bge	r2,zero,9ca8 <_dtoa_r+0x1548>
    9bb0:	d9001317 	ldw	r4,76(sp)
    9bb4:	bd3fffc3 	ldbu	r20,-1(r23)
    9bb8:	d9000515 	stw	r4,20(sp)
    9bbc:	003d3b06 	br	90ac <__alt_data_end+0xfffe90ac>
    9bc0:	0027883a 	mov	r19,zero
    9bc4:	003f1b06 	br	9834 <__alt_data_end+0xfffe9834>
    9bc8:	d8800817 	ldw	r2,32(sp)
    9bcc:	11e9c83a 	sub	r20,r2,r7
    9bd0:	0005883a 	mov	r2,zero
    9bd4:	003d5406 	br	9128 <__alt_data_end+0xfffe9128>
    9bd8:	00800044 	movi	r2,1
    9bdc:	003dc706 	br	92fc <__alt_data_end+0xfffe92fc>
    9be0:	d8c00217 	ldw	r3,8(sp)
    9be4:	00800d84 	movi	r2,54
    9be8:	dd400a17 	ldw	r21,40(sp)
    9bec:	10c5c83a 	sub	r2,r2,r3
    9bf0:	dd000817 	ldw	r20,32(sp)
    9bf4:	003d4c06 	br	9128 <__alt_data_end+0xfffe9128>
    9bf8:	dc800f15 	stw	r18,60(sp)
    9bfc:	dcc01015 	stw	r19,64(sp)
    9c00:	04000084 	movi	r16,2
    9c04:	003bed06 	br	8bbc <__alt_data_end+0xfffe8bbc>
    9c08:	d9000617 	ldw	r4,24(sp)
    9c0c:	203f0d26 	beq	r4,zero,9844 <__alt_data_end+0xfffe9844>
    9c10:	d9800c17 	ldw	r6,48(sp)
    9c14:	01bcab0e 	bge	zero,r6,8ec4 <__alt_data_end+0xfffe8ec4>
    9c18:	d9401017 	ldw	r5,64(sp)
    9c1c:	d9000f17 	ldw	r4,60(sp)
    9c20:	000d883a 	mov	r6,zero
    9c24:	01d00934 	movhi	r7,16420
    9c28:	00022080 	call	2208 <__muldf3>
    9c2c:	81000044 	addi	r4,r16,1
    9c30:	d8800f15 	stw	r2,60(sp)
    9c34:	d8c01015 	stw	r3,64(sp)
    9c38:	00033700 	call	3370 <__floatsidf>
    9c3c:	d9800f17 	ldw	r6,60(sp)
    9c40:	d9c01017 	ldw	r7,64(sp)
    9c44:	1009883a 	mov	r4,r2
    9c48:	180b883a 	mov	r5,r3
    9c4c:	00022080 	call	2208 <__muldf3>
    9c50:	01d00734 	movhi	r7,16412
    9c54:	000d883a 	mov	r6,zero
    9c58:	1009883a 	mov	r4,r2
    9c5c:	180b883a 	mov	r5,r3
    9c60:	0000eb00 	call	eb0 <__adddf3>
    9c64:	d9c00517 	ldw	r7,20(sp)
    9c68:	047f3034 	movhi	r17,64704
    9c6c:	1021883a 	mov	r16,r2
    9c70:	39ffffc4 	addi	r7,r7,-1
    9c74:	d9c01315 	stw	r7,76(sp)
    9c78:	1c63883a 	add	r17,r3,r17
    9c7c:	db000c17 	ldw	r12,48(sp)
    9c80:	003bea06 	br	8c2c <__alt_data_end+0xfffe8c2c>
    9c84:	dc000915 	stw	r16,36(sp)
    9c88:	003e0e06 	br	94c4 <__alt_data_end+0xfffe94c4>
    9c8c:	01000e44 	movi	r4,57
    9c90:	8825883a 	mov	r18,r17
    9c94:	9dc00044 	addi	r23,r19,1
    9c98:	99000005 	stb	r4,0(r19)
    9c9c:	a023883a 	mov	r17,r20
    9ca0:	dc000915 	stw	r16,36(sp)
    9ca4:	003da406 	br	9338 <__alt_data_end+0xfffe9338>
    9ca8:	d9801417 	ldw	r6,80(sp)
    9cac:	d9c01517 	ldw	r7,84(sp)
    9cb0:	0009883a 	mov	r4,zero
    9cb4:	014ff834 	movhi	r5,16352
    9cb8:	0002a740 	call	2a74 <__subdf3>
    9cbc:	880d883a 	mov	r6,r17
    9cc0:	a00f883a 	mov	r7,r20
    9cc4:	1009883a 	mov	r4,r2
    9cc8:	180b883a 	mov	r5,r3
    9ccc:	000212c0 	call	212c <__gedf2>
    9cd0:	00bc7c0e 	bge	zero,r2,8ec4 <__alt_data_end+0xfffe8ec4>
    9cd4:	01000c04 	movi	r4,48
    9cd8:	00000106 	br	9ce0 <_dtoa_r+0x1580>
    9cdc:	102f883a 	mov	r23,r2
    9ce0:	b8bfffc4 	addi	r2,r23,-1
    9ce4:	10c00007 	ldb	r3,0(r2)
    9ce8:	193ffc26 	beq	r3,r4,9cdc <__alt_data_end+0xfffe9cdc>
    9cec:	d9801317 	ldw	r6,76(sp)
    9cf0:	d9800515 	stw	r6,20(sp)
    9cf4:	003c4406 	br	8e08 <__alt_data_end+0xfffe8e08>
    9cf8:	d9801317 	ldw	r6,76(sp)
    9cfc:	d9800515 	stw	r6,20(sp)
    9d00:	003cea06 	br	90ac <__alt_data_end+0xfffe90ac>
    9d04:	dd800f17 	ldw	r22,60(sp)
    9d08:	dcc01017 	ldw	r19,64(sp)
    9d0c:	dc801217 	ldw	r18,72(sp)
    9d10:	003c6c06 	br	8ec4 <__alt_data_end+0xfffe8ec4>
    9d14:	903e031e 	bne	r18,zero,9524 <__alt_data_end+0xfffe9524>
    9d18:	003ebb06 	br	9808 <__alt_data_end+0xfffe9808>
    9d1c:	103e6c1e 	bne	r2,zero,96d0 <__alt_data_end+0xfffe96d0>
    9d20:	4080004c 	andi	r2,r8,1
    9d24:	103e6a26 	beq	r2,zero,96d0 <__alt_data_end+0xfffe96d0>
    9d28:	003e6606 	br	96c4 <__alt_data_end+0xfffe96c4>
    9d2c:	d8c00317 	ldw	r3,12(sp)
    9d30:	00800084 	movi	r2,2
    9d34:	10c02916 	blt	r2,r3,9ddc <_dtoa_r+0x167c>
    9d38:	d9000c17 	ldw	r4,48(sp)
    9d3c:	003e8806 	br	9760 <__alt_data_end+0xfffe9760>
    9d40:	04000084 	movi	r16,2
    9d44:	003b9d06 	br	8bbc <__alt_data_end+0xfffe8bbc>
    9d48:	d9001317 	ldw	r4,76(sp)
    9d4c:	d9000515 	stw	r4,20(sp)
    9d50:	003cd606 	br	90ac <__alt_data_end+0xfffe90ac>
    9d54:	d8801317 	ldw	r2,76(sp)
    9d58:	d8800515 	stw	r2,20(sp)
    9d5c:	003c2a06 	br	8e08 <__alt_data_end+0xfffe8e08>
    9d60:	d9800317 	ldw	r6,12(sp)
    9d64:	00800084 	movi	r2,2
    9d68:	11801516 	blt	r2,r6,9dc0 <_dtoa_r+0x1660>
    9d6c:	d9c00c17 	ldw	r7,48(sp)
    9d70:	d9c00615 	stw	r7,24(sp)
    9d74:	003df706 	br	9554 <__alt_data_end+0xfffe9554>
    9d78:	193d3926 	beq	r3,r4,9260 <__alt_data_end+0xfffe9260>
    9d7c:	00c00f04 	movi	r3,60
    9d80:	1885c83a 	sub	r2,r3,r2
    9d84:	003ddf06 	br	9504 <__alt_data_end+0xfffe9504>
    9d88:	e009883a 	mov	r4,fp
    9d8c:	e0001115 	stw	zero,68(fp)
    9d90:	000b883a 	mov	r5,zero
    9d94:	000a72c0 	call	a72c <_Balloc>
    9d98:	d8800715 	stw	r2,28(sp)
    9d9c:	d8c00717 	ldw	r3,28(sp)
    9da0:	00bfffc4 	movi	r2,-1
    9da4:	01000044 	movi	r4,1
    9da8:	d8800c15 	stw	r2,48(sp)
    9dac:	e0c01015 	stw	r3,64(fp)
    9db0:	d9000b15 	stw	r4,44(sp)
    9db4:	d8800615 	stw	r2,24(sp)
    9db8:	d8002215 	stw	zero,136(sp)
    9dbc:	003c4106 	br	8ec4 <__alt_data_end+0xfffe8ec4>
    9dc0:	d8c00c17 	ldw	r3,48(sp)
    9dc4:	d8c00615 	stw	r3,24(sp)
    9dc8:	003e7006 	br	978c <__alt_data_end+0xfffe978c>
    9dcc:	04400044 	movi	r17,1
    9dd0:	003b2006 	br	8a54 <__alt_data_end+0xfffe8a54>
    9dd4:	000b883a 	mov	r5,zero
    9dd8:	003b3d06 	br	8ad0 <__alt_data_end+0xfffe8ad0>
    9ddc:	d8800c17 	ldw	r2,48(sp)
    9de0:	d8800615 	stw	r2,24(sp)
    9de4:	003e6906 	br	978c <__alt_data_end+0xfffe978c>

00009de8 <__sflags>:
    9de8:	28800007 	ldb	r2,0(r5)
    9dec:	00c01c84 	movi	r3,114
    9df0:	10c02426 	beq	r2,r3,9e84 <__sflags+0x9c>
    9df4:	00c01dc4 	movi	r3,119
    9df8:	10c01e26 	beq	r2,r3,9e74 <__sflags+0x8c>
    9dfc:	00c01844 	movi	r3,97
    9e00:	10c00426 	beq	r2,r3,9e14 <__sflags+0x2c>
    9e04:	00800584 	movi	r2,22
    9e08:	20800015 	stw	r2,0(r4)
    9e0c:	0005883a 	mov	r2,zero
    9e10:	f800283a 	ret
    9e14:	02c08204 	movi	r11,520
    9e18:	01000044 	movi	r4,1
    9e1c:	00804204 	movi	r2,264
    9e20:	01c00ac4 	movi	r7,43
    9e24:	02bff8c4 	movi	r10,-29
    9e28:	027fff04 	movi	r9,-4
    9e2c:	02001e04 	movi	r8,120
    9e30:	29400044 	addi	r5,r5,1
    9e34:	28c00007 	ldb	r3,0(r5)
    9e38:	18000626 	beq	r3,zero,9e54 <__sflags+0x6c>
    9e3c:	19c00826 	beq	r3,r7,9e60 <__sflags+0x78>
    9e40:	1a3ffb1e 	bne	r3,r8,9e30 <__alt_data_end+0xfffe9e30>
    9e44:	29400044 	addi	r5,r5,1
    9e48:	28c00007 	ldb	r3,0(r5)
    9e4c:	21020014 	ori	r4,r4,2048
    9e50:	183ffa1e 	bne	r3,zero,9e3c <__alt_data_end+0xfffe9e3c>
    9e54:	22c8b03a 	or	r4,r4,r11
    9e58:	31000015 	stw	r4,0(r6)
    9e5c:	f800283a 	ret
    9e60:	1284703a 	and	r2,r2,r10
    9e64:	2248703a 	and	r4,r4,r9
    9e68:	10800414 	ori	r2,r2,16
    9e6c:	21000094 	ori	r4,r4,2
    9e70:	003fef06 	br	9e30 <__alt_data_end+0xfffe9e30>
    9e74:	02c18004 	movi	r11,1536
    9e78:	01000044 	movi	r4,1
    9e7c:	00800204 	movi	r2,8
    9e80:	003fe706 	br	9e20 <__alt_data_end+0xfffe9e20>
    9e84:	0017883a 	mov	r11,zero
    9e88:	0009883a 	mov	r4,zero
    9e8c:	00800104 	movi	r2,4
    9e90:	003fe306 	br	9e20 <__alt_data_end+0xfffe9e20>

00009e94 <__sfvwrite_r>:
    9e94:	30800217 	ldw	r2,8(r6)
    9e98:	10006726 	beq	r2,zero,a038 <__sfvwrite_r+0x1a4>
    9e9c:	28c0030b 	ldhu	r3,12(r5)
    9ea0:	defff404 	addi	sp,sp,-48
    9ea4:	dd400715 	stw	r21,28(sp)
    9ea8:	dd000615 	stw	r20,24(sp)
    9eac:	dc000215 	stw	r16,8(sp)
    9eb0:	dfc00b15 	stw	ra,44(sp)
    9eb4:	df000a15 	stw	fp,40(sp)
    9eb8:	ddc00915 	stw	r23,36(sp)
    9ebc:	dd800815 	stw	r22,32(sp)
    9ec0:	dcc00515 	stw	r19,20(sp)
    9ec4:	dc800415 	stw	r18,16(sp)
    9ec8:	dc400315 	stw	r17,12(sp)
    9ecc:	1880020c 	andi	r2,r3,8
    9ed0:	2821883a 	mov	r16,r5
    9ed4:	202b883a 	mov	r21,r4
    9ed8:	3029883a 	mov	r20,r6
    9edc:	10002726 	beq	r2,zero,9f7c <__sfvwrite_r+0xe8>
    9ee0:	28800417 	ldw	r2,16(r5)
    9ee4:	10002526 	beq	r2,zero,9f7c <__sfvwrite_r+0xe8>
    9ee8:	1880008c 	andi	r2,r3,2
    9eec:	a4400017 	ldw	r17,0(r20)
    9ef0:	10002a26 	beq	r2,zero,9f9c <__sfvwrite_r+0x108>
    9ef4:	05a00034 	movhi	r22,32768
    9ef8:	0027883a 	mov	r19,zero
    9efc:	0025883a 	mov	r18,zero
    9f00:	b5bf0004 	addi	r22,r22,-1024
    9f04:	980d883a 	mov	r6,r19
    9f08:	a809883a 	mov	r4,r21
    9f0c:	90004626 	beq	r18,zero,a028 <__sfvwrite_r+0x194>
    9f10:	900f883a 	mov	r7,r18
    9f14:	b480022e 	bgeu	r22,r18,9f20 <__sfvwrite_r+0x8c>
    9f18:	01e00034 	movhi	r7,32768
    9f1c:	39ff0004 	addi	r7,r7,-1024
    9f20:	80800917 	ldw	r2,36(r16)
    9f24:	81400717 	ldw	r5,28(r16)
    9f28:	103ee83a 	callr	r2
    9f2c:	00805a0e 	bge	zero,r2,a098 <__sfvwrite_r+0x204>
    9f30:	a0c00217 	ldw	r3,8(r20)
    9f34:	98a7883a 	add	r19,r19,r2
    9f38:	90a5c83a 	sub	r18,r18,r2
    9f3c:	1885c83a 	sub	r2,r3,r2
    9f40:	a0800215 	stw	r2,8(r20)
    9f44:	103fef1e 	bne	r2,zero,9f04 <__alt_data_end+0xfffe9f04>
    9f48:	0005883a 	mov	r2,zero
    9f4c:	dfc00b17 	ldw	ra,44(sp)
    9f50:	df000a17 	ldw	fp,40(sp)
    9f54:	ddc00917 	ldw	r23,36(sp)
    9f58:	dd800817 	ldw	r22,32(sp)
    9f5c:	dd400717 	ldw	r21,28(sp)
    9f60:	dd000617 	ldw	r20,24(sp)
    9f64:	dcc00517 	ldw	r19,20(sp)
    9f68:	dc800417 	ldw	r18,16(sp)
    9f6c:	dc400317 	ldw	r17,12(sp)
    9f70:	dc000217 	ldw	r16,8(sp)
    9f74:	dec00c04 	addi	sp,sp,48
    9f78:	f800283a 	ret
    9f7c:	800b883a 	mov	r5,r16
    9f80:	a809883a 	mov	r4,r21
    9f84:	00082100 	call	8210 <__swsetup_r>
    9f88:	1000ee1e 	bne	r2,zero,a344 <__sfvwrite_r+0x4b0>
    9f8c:	80c0030b 	ldhu	r3,12(r16)
    9f90:	a4400017 	ldw	r17,0(r20)
    9f94:	1880008c 	andi	r2,r3,2
    9f98:	103fd61e 	bne	r2,zero,9ef4 <__alt_data_end+0xfffe9ef4>
    9f9c:	1880004c 	andi	r2,r3,1
    9fa0:	1000421e 	bne	r2,zero,a0ac <__sfvwrite_r+0x218>
    9fa4:	0039883a 	mov	fp,zero
    9fa8:	0025883a 	mov	r18,zero
    9fac:	90001a26 	beq	r18,zero,a018 <__sfvwrite_r+0x184>
    9fb0:	1880800c 	andi	r2,r3,512
    9fb4:	84c00217 	ldw	r19,8(r16)
    9fb8:	10002126 	beq	r2,zero,a040 <__sfvwrite_r+0x1ac>
    9fbc:	982f883a 	mov	r23,r19
    9fc0:	94c09636 	bltu	r18,r19,a21c <__sfvwrite_r+0x388>
    9fc4:	1881200c 	andi	r2,r3,1152
    9fc8:	1000a11e 	bne	r2,zero,a250 <__sfvwrite_r+0x3bc>
    9fcc:	81000017 	ldw	r4,0(r16)
    9fd0:	b80d883a 	mov	r6,r23
    9fd4:	e00b883a 	mov	r5,fp
    9fd8:	000a5d00 	call	a5d0 <memmove>
    9fdc:	80c00217 	ldw	r3,8(r16)
    9fe0:	81000017 	ldw	r4,0(r16)
    9fe4:	9005883a 	mov	r2,r18
    9fe8:	1ce7c83a 	sub	r19,r3,r19
    9fec:	25cf883a 	add	r7,r4,r23
    9ff0:	84c00215 	stw	r19,8(r16)
    9ff4:	81c00015 	stw	r7,0(r16)
    9ff8:	a0c00217 	ldw	r3,8(r20)
    9ffc:	e0b9883a 	add	fp,fp,r2
    a000:	90a5c83a 	sub	r18,r18,r2
    a004:	18a7c83a 	sub	r19,r3,r2
    a008:	a4c00215 	stw	r19,8(r20)
    a00c:	983fce26 	beq	r19,zero,9f48 <__alt_data_end+0xfffe9f48>
    a010:	80c0030b 	ldhu	r3,12(r16)
    a014:	903fe61e 	bne	r18,zero,9fb0 <__alt_data_end+0xfffe9fb0>
    a018:	8f000017 	ldw	fp,0(r17)
    a01c:	8c800117 	ldw	r18,4(r17)
    a020:	8c400204 	addi	r17,r17,8
    a024:	003fe106 	br	9fac <__alt_data_end+0xfffe9fac>
    a028:	8cc00017 	ldw	r19,0(r17)
    a02c:	8c800117 	ldw	r18,4(r17)
    a030:	8c400204 	addi	r17,r17,8
    a034:	003fb306 	br	9f04 <__alt_data_end+0xfffe9f04>
    a038:	0005883a 	mov	r2,zero
    a03c:	f800283a 	ret
    a040:	81000017 	ldw	r4,0(r16)
    a044:	80800417 	ldw	r2,16(r16)
    a048:	11005a36 	bltu	r2,r4,a1b4 <__sfvwrite_r+0x320>
    a04c:	85c00517 	ldw	r23,20(r16)
    a050:	95c05836 	bltu	r18,r23,a1b4 <__sfvwrite_r+0x320>
    a054:	00a00034 	movhi	r2,32768
    a058:	10bfffc4 	addi	r2,r2,-1
    a05c:	9009883a 	mov	r4,r18
    a060:	1480012e 	bgeu	r2,r18,a068 <__sfvwrite_r+0x1d4>
    a064:	1009883a 	mov	r4,r2
    a068:	b80b883a 	mov	r5,r23
    a06c:	00034b00 	call	34b0 <__divsi3>
    a070:	b80b883a 	mov	r5,r23
    a074:	1009883a 	mov	r4,r2
    a078:	0000e880 	call	e88 <__mulsi3>
    a07c:	81400717 	ldw	r5,28(r16)
    a080:	80c00917 	ldw	r3,36(r16)
    a084:	100f883a 	mov	r7,r2
    a088:	e00d883a 	mov	r6,fp
    a08c:	a809883a 	mov	r4,r21
    a090:	183ee83a 	callr	r3
    a094:	00bfd816 	blt	zero,r2,9ff8 <__alt_data_end+0xfffe9ff8>
    a098:	8080030b 	ldhu	r2,12(r16)
    a09c:	10801014 	ori	r2,r2,64
    a0a0:	8080030d 	sth	r2,12(r16)
    a0a4:	00bfffc4 	movi	r2,-1
    a0a8:	003fa806 	br	9f4c <__alt_data_end+0xfffe9f4c>
    a0ac:	0027883a 	mov	r19,zero
    a0b0:	0011883a 	mov	r8,zero
    a0b4:	0039883a 	mov	fp,zero
    a0b8:	0025883a 	mov	r18,zero
    a0bc:	90001f26 	beq	r18,zero,a13c <__sfvwrite_r+0x2a8>
    a0c0:	40005a26 	beq	r8,zero,a22c <__sfvwrite_r+0x398>
    a0c4:	982d883a 	mov	r22,r19
    a0c8:	94c0012e 	bgeu	r18,r19,a0d0 <__sfvwrite_r+0x23c>
    a0cc:	902d883a 	mov	r22,r18
    a0d0:	81000017 	ldw	r4,0(r16)
    a0d4:	80800417 	ldw	r2,16(r16)
    a0d8:	b02f883a 	mov	r23,r22
    a0dc:	81c00517 	ldw	r7,20(r16)
    a0e0:	1100032e 	bgeu	r2,r4,a0f0 <__sfvwrite_r+0x25c>
    a0e4:	80c00217 	ldw	r3,8(r16)
    a0e8:	38c7883a 	add	r3,r7,r3
    a0ec:	1d801816 	blt	r3,r22,a150 <__sfvwrite_r+0x2bc>
    a0f0:	b1c03e16 	blt	r22,r7,a1ec <__sfvwrite_r+0x358>
    a0f4:	80800917 	ldw	r2,36(r16)
    a0f8:	81400717 	ldw	r5,28(r16)
    a0fc:	e00d883a 	mov	r6,fp
    a100:	da000115 	stw	r8,4(sp)
    a104:	a809883a 	mov	r4,r21
    a108:	103ee83a 	callr	r2
    a10c:	102f883a 	mov	r23,r2
    a110:	da000117 	ldw	r8,4(sp)
    a114:	00bfe00e 	bge	zero,r2,a098 <__alt_data_end+0xfffea098>
    a118:	9de7c83a 	sub	r19,r19,r23
    a11c:	98001f26 	beq	r19,zero,a19c <__sfvwrite_r+0x308>
    a120:	a0800217 	ldw	r2,8(r20)
    a124:	e5f9883a 	add	fp,fp,r23
    a128:	95e5c83a 	sub	r18,r18,r23
    a12c:	15efc83a 	sub	r23,r2,r23
    a130:	a5c00215 	stw	r23,8(r20)
    a134:	b83f8426 	beq	r23,zero,9f48 <__alt_data_end+0xfffe9f48>
    a138:	903fe11e 	bne	r18,zero,a0c0 <__alt_data_end+0xfffea0c0>
    a13c:	8f000017 	ldw	fp,0(r17)
    a140:	8c800117 	ldw	r18,4(r17)
    a144:	0011883a 	mov	r8,zero
    a148:	8c400204 	addi	r17,r17,8
    a14c:	003fdb06 	br	a0bc <__alt_data_end+0xfffea0bc>
    a150:	180d883a 	mov	r6,r3
    a154:	e00b883a 	mov	r5,fp
    a158:	da000115 	stw	r8,4(sp)
    a15c:	d8c00015 	stw	r3,0(sp)
    a160:	000a5d00 	call	a5d0 <memmove>
    a164:	d8c00017 	ldw	r3,0(sp)
    a168:	80800017 	ldw	r2,0(r16)
    a16c:	800b883a 	mov	r5,r16
    a170:	a809883a 	mov	r4,r21
    a174:	10c5883a 	add	r2,r2,r3
    a178:	80800015 	stw	r2,0(r16)
    a17c:	d8c00015 	stw	r3,0(sp)
    a180:	00039bc0 	call	39bc <_fflush_r>
    a184:	d8c00017 	ldw	r3,0(sp)
    a188:	da000117 	ldw	r8,4(sp)
    a18c:	103fc21e 	bne	r2,zero,a098 <__alt_data_end+0xfffea098>
    a190:	182f883a 	mov	r23,r3
    a194:	9de7c83a 	sub	r19,r19,r23
    a198:	983fe11e 	bne	r19,zero,a120 <__alt_data_end+0xfffea120>
    a19c:	800b883a 	mov	r5,r16
    a1a0:	a809883a 	mov	r4,r21
    a1a4:	00039bc0 	call	39bc <_fflush_r>
    a1a8:	103fbb1e 	bne	r2,zero,a098 <__alt_data_end+0xfffea098>
    a1ac:	0011883a 	mov	r8,zero
    a1b0:	003fdb06 	br	a120 <__alt_data_end+0xfffea120>
    a1b4:	94c0012e 	bgeu	r18,r19,a1bc <__sfvwrite_r+0x328>
    a1b8:	9027883a 	mov	r19,r18
    a1bc:	980d883a 	mov	r6,r19
    a1c0:	e00b883a 	mov	r5,fp
    a1c4:	000a5d00 	call	a5d0 <memmove>
    a1c8:	80800217 	ldw	r2,8(r16)
    a1cc:	80c00017 	ldw	r3,0(r16)
    a1d0:	14c5c83a 	sub	r2,r2,r19
    a1d4:	1cc7883a 	add	r3,r3,r19
    a1d8:	80800215 	stw	r2,8(r16)
    a1dc:	80c00015 	stw	r3,0(r16)
    a1e0:	10004326 	beq	r2,zero,a2f0 <__sfvwrite_r+0x45c>
    a1e4:	9805883a 	mov	r2,r19
    a1e8:	003f8306 	br	9ff8 <__alt_data_end+0xfffe9ff8>
    a1ec:	b00d883a 	mov	r6,r22
    a1f0:	e00b883a 	mov	r5,fp
    a1f4:	da000115 	stw	r8,4(sp)
    a1f8:	000a5d00 	call	a5d0 <memmove>
    a1fc:	80800217 	ldw	r2,8(r16)
    a200:	80c00017 	ldw	r3,0(r16)
    a204:	da000117 	ldw	r8,4(sp)
    a208:	1585c83a 	sub	r2,r2,r22
    a20c:	1dad883a 	add	r22,r3,r22
    a210:	80800215 	stw	r2,8(r16)
    a214:	85800015 	stw	r22,0(r16)
    a218:	003fbf06 	br	a118 <__alt_data_end+0xfffea118>
    a21c:	81000017 	ldw	r4,0(r16)
    a220:	9027883a 	mov	r19,r18
    a224:	902f883a 	mov	r23,r18
    a228:	003f6906 	br	9fd0 <__alt_data_end+0xfffe9fd0>
    a22c:	900d883a 	mov	r6,r18
    a230:	01400284 	movi	r5,10
    a234:	e009883a 	mov	r4,fp
    a238:	000a4ec0 	call	a4ec <memchr>
    a23c:	10003e26 	beq	r2,zero,a338 <__sfvwrite_r+0x4a4>
    a240:	10800044 	addi	r2,r2,1
    a244:	1727c83a 	sub	r19,r2,fp
    a248:	02000044 	movi	r8,1
    a24c:	003f9d06 	br	a0c4 <__alt_data_end+0xfffea0c4>
    a250:	80800517 	ldw	r2,20(r16)
    a254:	81400417 	ldw	r5,16(r16)
    a258:	81c00017 	ldw	r7,0(r16)
    a25c:	10a7883a 	add	r19,r2,r2
    a260:	9885883a 	add	r2,r19,r2
    a264:	1026d7fa 	srli	r19,r2,31
    a268:	396dc83a 	sub	r22,r7,r5
    a26c:	b1000044 	addi	r4,r22,1
    a270:	9885883a 	add	r2,r19,r2
    a274:	1027d07a 	srai	r19,r2,1
    a278:	2485883a 	add	r2,r4,r18
    a27c:	980d883a 	mov	r6,r19
    a280:	9880022e 	bgeu	r19,r2,a28c <__sfvwrite_r+0x3f8>
    a284:	1027883a 	mov	r19,r2
    a288:	100d883a 	mov	r6,r2
    a28c:	18c1000c 	andi	r3,r3,1024
    a290:	18001c26 	beq	r3,zero,a304 <__sfvwrite_r+0x470>
    a294:	300b883a 	mov	r5,r6
    a298:	a809883a 	mov	r4,r21
    a29c:	0004dc80 	call	4dc8 <_malloc_r>
    a2a0:	102f883a 	mov	r23,r2
    a2a4:	10002926 	beq	r2,zero,a34c <__sfvwrite_r+0x4b8>
    a2a8:	81400417 	ldw	r5,16(r16)
    a2ac:	b00d883a 	mov	r6,r22
    a2b0:	1009883a 	mov	r4,r2
    a2b4:	00055d40 	call	55d4 <memcpy>
    a2b8:	8080030b 	ldhu	r2,12(r16)
    a2bc:	00fedfc4 	movi	r3,-1153
    a2c0:	10c4703a 	and	r2,r2,r3
    a2c4:	10802014 	ori	r2,r2,128
    a2c8:	8080030d 	sth	r2,12(r16)
    a2cc:	bd89883a 	add	r4,r23,r22
    a2d0:	9d8fc83a 	sub	r7,r19,r22
    a2d4:	85c00415 	stw	r23,16(r16)
    a2d8:	84c00515 	stw	r19,20(r16)
    a2dc:	81000015 	stw	r4,0(r16)
    a2e0:	9027883a 	mov	r19,r18
    a2e4:	81c00215 	stw	r7,8(r16)
    a2e8:	902f883a 	mov	r23,r18
    a2ec:	003f3806 	br	9fd0 <__alt_data_end+0xfffe9fd0>
    a2f0:	800b883a 	mov	r5,r16
    a2f4:	a809883a 	mov	r4,r21
    a2f8:	00039bc0 	call	39bc <_fflush_r>
    a2fc:	103fb926 	beq	r2,zero,a1e4 <__alt_data_end+0xfffea1e4>
    a300:	003f6506 	br	a098 <__alt_data_end+0xfffea098>
    a304:	a809883a 	mov	r4,r21
    a308:	000b8440 	call	b844 <_realloc_r>
    a30c:	102f883a 	mov	r23,r2
    a310:	103fee1e 	bne	r2,zero,a2cc <__alt_data_end+0xfffea2cc>
    a314:	81400417 	ldw	r5,16(r16)
    a318:	a809883a 	mov	r4,r21
    a31c:	00042980 	call	4298 <_free_r>
    a320:	8080030b 	ldhu	r2,12(r16)
    a324:	00ffdfc4 	movi	r3,-129
    a328:	1884703a 	and	r2,r3,r2
    a32c:	00c00304 	movi	r3,12
    a330:	a8c00015 	stw	r3,0(r21)
    a334:	003f5906 	br	a09c <__alt_data_end+0xfffea09c>
    a338:	94c00044 	addi	r19,r18,1
    a33c:	02000044 	movi	r8,1
    a340:	003f6006 	br	a0c4 <__alt_data_end+0xfffea0c4>
    a344:	00bfffc4 	movi	r2,-1
    a348:	003f0006 	br	9f4c <__alt_data_end+0xfffe9f4c>
    a34c:	00800304 	movi	r2,12
    a350:	a8800015 	stw	r2,0(r21)
    a354:	8080030b 	ldhu	r2,12(r16)
    a358:	003f5006 	br	a09c <__alt_data_end+0xfffea09c>

0000a35c <_isatty_r>:
    a35c:	defffd04 	addi	sp,sp,-12
    a360:	dc000015 	stw	r16,0(sp)
    a364:	04000074 	movhi	r16,1
    a368:	dc400115 	stw	r17,4(sp)
    a36c:	84128104 	addi	r16,r16,18948
    a370:	2023883a 	mov	r17,r4
    a374:	2809883a 	mov	r4,r5
    a378:	dfc00215 	stw	ra,8(sp)
    a37c:	80000015 	stw	zero,0(r16)
    a380:	000ed1c0 	call	ed1c <isatty>
    a384:	00ffffc4 	movi	r3,-1
    a388:	10c00526 	beq	r2,r3,a3a0 <_isatty_r+0x44>
    a38c:	dfc00217 	ldw	ra,8(sp)
    a390:	dc400117 	ldw	r17,4(sp)
    a394:	dc000017 	ldw	r16,0(sp)
    a398:	dec00304 	addi	sp,sp,12
    a39c:	f800283a 	ret
    a3a0:	80c00017 	ldw	r3,0(r16)
    a3a4:	183ff926 	beq	r3,zero,a38c <__alt_data_end+0xfffea38c>
    a3a8:	88c00015 	stw	r3,0(r17)
    a3ac:	003ff706 	br	a38c <__alt_data_end+0xfffea38c>

0000a3b0 <_setlocale_r>:
    a3b0:	30001b26 	beq	r6,zero,a420 <_setlocale_r+0x70>
    a3b4:	01400074 	movhi	r5,1
    a3b8:	defffe04 	addi	sp,sp,-8
    a3bc:	2944aa04 	addi	r5,r5,4776
    a3c0:	3009883a 	mov	r4,r6
    a3c4:	dc000015 	stw	r16,0(sp)
    a3c8:	dfc00115 	stw	ra,4(sp)
    a3cc:	3021883a 	mov	r16,r6
    a3d0:	000be1c0 	call	be1c <strcmp>
    a3d4:	1000061e 	bne	r2,zero,a3f0 <_setlocale_r+0x40>
    a3d8:	00800074 	movhi	r2,1
    a3dc:	10848b04 	addi	r2,r2,4652
    a3e0:	dfc00117 	ldw	ra,4(sp)
    a3e4:	dc000017 	ldw	r16,0(sp)
    a3e8:	dec00204 	addi	sp,sp,8
    a3ec:	f800283a 	ret
    a3f0:	01400074 	movhi	r5,1
    a3f4:	29448b04 	addi	r5,r5,4652
    a3f8:	8009883a 	mov	r4,r16
    a3fc:	000be1c0 	call	be1c <strcmp>
    a400:	103ff526 	beq	r2,zero,a3d8 <__alt_data_end+0xfffea3d8>
    a404:	01400074 	movhi	r5,1
    a408:	29449504 	addi	r5,r5,4692
    a40c:	8009883a 	mov	r4,r16
    a410:	000be1c0 	call	be1c <strcmp>
    a414:	103ff026 	beq	r2,zero,a3d8 <__alt_data_end+0xfffea3d8>
    a418:	0005883a 	mov	r2,zero
    a41c:	003ff006 	br	a3e0 <__alt_data_end+0xfffea3e0>
    a420:	00800074 	movhi	r2,1
    a424:	10848b04 	addi	r2,r2,4652
    a428:	f800283a 	ret

0000a42c <__locale_charset>:
    a42c:	00800074 	movhi	r2,1
    a430:	10871e04 	addi	r2,r2,7288
    a434:	f800283a 	ret

0000a438 <__locale_mb_cur_max>:
    a438:	00800074 	movhi	r2,1
    a43c:	108bba04 	addi	r2,r2,12008
    a440:	10800017 	ldw	r2,0(r2)
    a444:	f800283a 	ret

0000a448 <__locale_msgcharset>:
    a448:	00800074 	movhi	r2,1
    a44c:	10871604 	addi	r2,r2,7256
    a450:	f800283a 	ret

0000a454 <__locale_cjk_lang>:
    a454:	0005883a 	mov	r2,zero
    a458:	f800283a 	ret

0000a45c <_localeconv_r>:
    a45c:	00800074 	movhi	r2,1
    a460:	10872604 	addi	r2,r2,7320
    a464:	f800283a 	ret

0000a468 <setlocale>:
    a468:	00800074 	movhi	r2,1
    a46c:	108bb704 	addi	r2,r2,11996
    a470:	280d883a 	mov	r6,r5
    a474:	200b883a 	mov	r5,r4
    a478:	11000017 	ldw	r4,0(r2)
    a47c:	000a3b01 	jmpi	a3b0 <_setlocale_r>

0000a480 <localeconv>:
    a480:	00800074 	movhi	r2,1
    a484:	10872604 	addi	r2,r2,7320
    a488:	f800283a 	ret

0000a48c <_lseek_r>:
    a48c:	defffd04 	addi	sp,sp,-12
    a490:	2805883a 	mov	r2,r5
    a494:	dc000015 	stw	r16,0(sp)
    a498:	04000074 	movhi	r16,1
    a49c:	dc400115 	stw	r17,4(sp)
    a4a0:	300b883a 	mov	r5,r6
    a4a4:	84128104 	addi	r16,r16,18948
    a4a8:	2023883a 	mov	r17,r4
    a4ac:	380d883a 	mov	r6,r7
    a4b0:	1009883a 	mov	r4,r2
    a4b4:	dfc00215 	stw	ra,8(sp)
    a4b8:	80000015 	stw	zero,0(r16)
    a4bc:	000eef00 	call	eef0 <lseek>
    a4c0:	00ffffc4 	movi	r3,-1
    a4c4:	10c00526 	beq	r2,r3,a4dc <_lseek_r+0x50>
    a4c8:	dfc00217 	ldw	ra,8(sp)
    a4cc:	dc400117 	ldw	r17,4(sp)
    a4d0:	dc000017 	ldw	r16,0(sp)
    a4d4:	dec00304 	addi	sp,sp,12
    a4d8:	f800283a 	ret
    a4dc:	80c00017 	ldw	r3,0(r16)
    a4e0:	183ff926 	beq	r3,zero,a4c8 <__alt_data_end+0xfffea4c8>
    a4e4:	88c00015 	stw	r3,0(r17)
    a4e8:	003ff706 	br	a4c8 <__alt_data_end+0xfffea4c8>

0000a4ec <memchr>:
    a4ec:	208000cc 	andi	r2,r4,3
    a4f0:	280f883a 	mov	r7,r5
    a4f4:	10003426 	beq	r2,zero,a5c8 <memchr+0xdc>
    a4f8:	30bfffc4 	addi	r2,r6,-1
    a4fc:	30001a26 	beq	r6,zero,a568 <memchr+0x7c>
    a500:	20c00003 	ldbu	r3,0(r4)
    a504:	29803fcc 	andi	r6,r5,255
    a508:	30c0051e 	bne	r6,r3,a520 <memchr+0x34>
    a50c:	00001806 	br	a570 <memchr+0x84>
    a510:	10001526 	beq	r2,zero,a568 <memchr+0x7c>
    a514:	20c00003 	ldbu	r3,0(r4)
    a518:	10bfffc4 	addi	r2,r2,-1
    a51c:	30c01426 	beq	r6,r3,a570 <memchr+0x84>
    a520:	21000044 	addi	r4,r4,1
    a524:	20c000cc 	andi	r3,r4,3
    a528:	183ff91e 	bne	r3,zero,a510 <__alt_data_end+0xfffea510>
    a52c:	020000c4 	movi	r8,3
    a530:	40801136 	bltu	r8,r2,a578 <memchr+0x8c>
    a534:	10000c26 	beq	r2,zero,a568 <memchr+0x7c>
    a538:	20c00003 	ldbu	r3,0(r4)
    a53c:	29403fcc 	andi	r5,r5,255
    a540:	28c00b26 	beq	r5,r3,a570 <memchr+0x84>
    a544:	20c00044 	addi	r3,r4,1
    a548:	39803fcc 	andi	r6,r7,255
    a54c:	2089883a 	add	r4,r4,r2
    a550:	00000306 	br	a560 <memchr+0x74>
    a554:	18c00044 	addi	r3,r3,1
    a558:	197fffc3 	ldbu	r5,-1(r3)
    a55c:	31400526 	beq	r6,r5,a574 <memchr+0x88>
    a560:	1805883a 	mov	r2,r3
    a564:	20fffb1e 	bne	r4,r3,a554 <__alt_data_end+0xfffea554>
    a568:	0005883a 	mov	r2,zero
    a56c:	f800283a 	ret
    a570:	2005883a 	mov	r2,r4
    a574:	f800283a 	ret
    a578:	28c03fcc 	andi	r3,r5,255
    a57c:	1812923a 	slli	r9,r3,8
    a580:	02ffbff4 	movhi	r11,65279
    a584:	02a02074 	movhi	r10,32897
    a588:	48d2b03a 	or	r9,r9,r3
    a58c:	4806943a 	slli	r3,r9,16
    a590:	5affbfc4 	addi	r11,r11,-257
    a594:	52a02004 	addi	r10,r10,-32640
    a598:	48d2b03a 	or	r9,r9,r3
    a59c:	20c00017 	ldw	r3,0(r4)
    a5a0:	48c6f03a 	xor	r3,r9,r3
    a5a4:	1acd883a 	add	r6,r3,r11
    a5a8:	00c6303a 	nor	r3,zero,r3
    a5ac:	30c6703a 	and	r3,r6,r3
    a5b0:	1a86703a 	and	r3,r3,r10
    a5b4:	183fe01e 	bne	r3,zero,a538 <__alt_data_end+0xfffea538>
    a5b8:	10bfff04 	addi	r2,r2,-4
    a5bc:	21000104 	addi	r4,r4,4
    a5c0:	40bff636 	bltu	r8,r2,a59c <__alt_data_end+0xfffea59c>
    a5c4:	003fdb06 	br	a534 <__alt_data_end+0xfffea534>
    a5c8:	3005883a 	mov	r2,r6
    a5cc:	003fd706 	br	a52c <__alt_data_end+0xfffea52c>

0000a5d0 <memmove>:
    a5d0:	2005883a 	mov	r2,r4
    a5d4:	29000b2e 	bgeu	r5,r4,a604 <memmove+0x34>
    a5d8:	298f883a 	add	r7,r5,r6
    a5dc:	21c0092e 	bgeu	r4,r7,a604 <memmove+0x34>
    a5e0:	2187883a 	add	r3,r4,r6
    a5e4:	198bc83a 	sub	r5,r3,r6
    a5e8:	30004826 	beq	r6,zero,a70c <memmove+0x13c>
    a5ec:	39ffffc4 	addi	r7,r7,-1
    a5f0:	39000003 	ldbu	r4,0(r7)
    a5f4:	18ffffc4 	addi	r3,r3,-1
    a5f8:	19000005 	stb	r4,0(r3)
    a5fc:	28fffb1e 	bne	r5,r3,a5ec <__alt_data_end+0xfffea5ec>
    a600:	f800283a 	ret
    a604:	00c003c4 	movi	r3,15
    a608:	1980412e 	bgeu	r3,r6,a710 <memmove+0x140>
    a60c:	2886b03a 	or	r3,r5,r2
    a610:	18c000cc 	andi	r3,r3,3
    a614:	1800401e 	bne	r3,zero,a718 <memmove+0x148>
    a618:	33fffc04 	addi	r15,r6,-16
    a61c:	781ed13a 	srli	r15,r15,4
    a620:	28c00104 	addi	r3,r5,4
    a624:	13400104 	addi	r13,r2,4
    a628:	781c913a 	slli	r14,r15,4
    a62c:	2b000204 	addi	r12,r5,8
    a630:	12c00204 	addi	r11,r2,8
    a634:	73800504 	addi	r14,r14,20
    a638:	2a800304 	addi	r10,r5,12
    a63c:	12400304 	addi	r9,r2,12
    a640:	2b9d883a 	add	r14,r5,r14
    a644:	2811883a 	mov	r8,r5
    a648:	100f883a 	mov	r7,r2
    a64c:	41000017 	ldw	r4,0(r8)
    a650:	39c00404 	addi	r7,r7,16
    a654:	18c00404 	addi	r3,r3,16
    a658:	393ffc15 	stw	r4,-16(r7)
    a65c:	193ffc17 	ldw	r4,-16(r3)
    a660:	6b400404 	addi	r13,r13,16
    a664:	5ac00404 	addi	r11,r11,16
    a668:	693ffc15 	stw	r4,-16(r13)
    a66c:	61000017 	ldw	r4,0(r12)
    a670:	4a400404 	addi	r9,r9,16
    a674:	42000404 	addi	r8,r8,16
    a678:	593ffc15 	stw	r4,-16(r11)
    a67c:	51000017 	ldw	r4,0(r10)
    a680:	63000404 	addi	r12,r12,16
    a684:	52800404 	addi	r10,r10,16
    a688:	493ffc15 	stw	r4,-16(r9)
    a68c:	1bbfef1e 	bne	r3,r14,a64c <__alt_data_end+0xfffea64c>
    a690:	79000044 	addi	r4,r15,1
    a694:	2008913a 	slli	r4,r4,4
    a698:	328003cc 	andi	r10,r6,15
    a69c:	02c000c4 	movi	r11,3
    a6a0:	1107883a 	add	r3,r2,r4
    a6a4:	290b883a 	add	r5,r5,r4
    a6a8:	5a801e2e 	bgeu	r11,r10,a724 <memmove+0x154>
    a6ac:	1813883a 	mov	r9,r3
    a6b0:	2811883a 	mov	r8,r5
    a6b4:	500f883a 	mov	r7,r10
    a6b8:	41000017 	ldw	r4,0(r8)
    a6bc:	4a400104 	addi	r9,r9,4
    a6c0:	39ffff04 	addi	r7,r7,-4
    a6c4:	493fff15 	stw	r4,-4(r9)
    a6c8:	42000104 	addi	r8,r8,4
    a6cc:	59fffa36 	bltu	r11,r7,a6b8 <__alt_data_end+0xfffea6b8>
    a6d0:	513fff04 	addi	r4,r10,-4
    a6d4:	2008d0ba 	srli	r4,r4,2
    a6d8:	318000cc 	andi	r6,r6,3
    a6dc:	21000044 	addi	r4,r4,1
    a6e0:	2109883a 	add	r4,r4,r4
    a6e4:	2109883a 	add	r4,r4,r4
    a6e8:	1907883a 	add	r3,r3,r4
    a6ec:	290b883a 	add	r5,r5,r4
    a6f0:	30000b26 	beq	r6,zero,a720 <memmove+0x150>
    a6f4:	198d883a 	add	r6,r3,r6
    a6f8:	29c00003 	ldbu	r7,0(r5)
    a6fc:	18c00044 	addi	r3,r3,1
    a700:	29400044 	addi	r5,r5,1
    a704:	19ffffc5 	stb	r7,-1(r3)
    a708:	19bffb1e 	bne	r3,r6,a6f8 <__alt_data_end+0xfffea6f8>
    a70c:	f800283a 	ret
    a710:	1007883a 	mov	r3,r2
    a714:	003ff606 	br	a6f0 <__alt_data_end+0xfffea6f0>
    a718:	1007883a 	mov	r3,r2
    a71c:	003ff506 	br	a6f4 <__alt_data_end+0xfffea6f4>
    a720:	f800283a 	ret
    a724:	500d883a 	mov	r6,r10
    a728:	003ff106 	br	a6f0 <__alt_data_end+0xfffea6f0>

0000a72c <_Balloc>:
    a72c:	20801317 	ldw	r2,76(r4)
    a730:	defffc04 	addi	sp,sp,-16
    a734:	dc400115 	stw	r17,4(sp)
    a738:	dc000015 	stw	r16,0(sp)
    a73c:	dfc00315 	stw	ra,12(sp)
    a740:	dc800215 	stw	r18,8(sp)
    a744:	2023883a 	mov	r17,r4
    a748:	2821883a 	mov	r16,r5
    a74c:	10000f26 	beq	r2,zero,a78c <_Balloc+0x60>
    a750:	8407883a 	add	r3,r16,r16
    a754:	18c7883a 	add	r3,r3,r3
    a758:	10c7883a 	add	r3,r2,r3
    a75c:	18800017 	ldw	r2,0(r3)
    a760:	10001126 	beq	r2,zero,a7a8 <_Balloc+0x7c>
    a764:	11000017 	ldw	r4,0(r2)
    a768:	19000015 	stw	r4,0(r3)
    a76c:	10000415 	stw	zero,16(r2)
    a770:	10000315 	stw	zero,12(r2)
    a774:	dfc00317 	ldw	ra,12(sp)
    a778:	dc800217 	ldw	r18,8(sp)
    a77c:	dc400117 	ldw	r17,4(sp)
    a780:	dc000017 	ldw	r16,0(sp)
    a784:	dec00404 	addi	sp,sp,16
    a788:	f800283a 	ret
    a78c:	01800844 	movi	r6,33
    a790:	01400104 	movi	r5,4
    a794:	000d5f00 	call	d5f0 <_calloc_r>
    a798:	88801315 	stw	r2,76(r17)
    a79c:	103fec1e 	bne	r2,zero,a750 <__alt_data_end+0xfffea750>
    a7a0:	0005883a 	mov	r2,zero
    a7a4:	003ff306 	br	a774 <__alt_data_end+0xfffea774>
    a7a8:	01400044 	movi	r5,1
    a7ac:	2c24983a 	sll	r18,r5,r16
    a7b0:	8809883a 	mov	r4,r17
    a7b4:	91800144 	addi	r6,r18,5
    a7b8:	318d883a 	add	r6,r6,r6
    a7bc:	318d883a 	add	r6,r6,r6
    a7c0:	000d5f00 	call	d5f0 <_calloc_r>
    a7c4:	103ff626 	beq	r2,zero,a7a0 <__alt_data_end+0xfffea7a0>
    a7c8:	14000115 	stw	r16,4(r2)
    a7cc:	14800215 	stw	r18,8(r2)
    a7d0:	003fe606 	br	a76c <__alt_data_end+0xfffea76c>

0000a7d4 <_Bfree>:
    a7d4:	28000826 	beq	r5,zero,a7f8 <_Bfree+0x24>
    a7d8:	28c00117 	ldw	r3,4(r5)
    a7dc:	20801317 	ldw	r2,76(r4)
    a7e0:	18c7883a 	add	r3,r3,r3
    a7e4:	18c7883a 	add	r3,r3,r3
    a7e8:	10c5883a 	add	r2,r2,r3
    a7ec:	10c00017 	ldw	r3,0(r2)
    a7f0:	28c00015 	stw	r3,0(r5)
    a7f4:	11400015 	stw	r5,0(r2)
    a7f8:	f800283a 	ret

0000a7fc <__multadd>:
    a7fc:	defff704 	addi	sp,sp,-36
    a800:	dc800215 	stw	r18,8(sp)
    a804:	2c800417 	ldw	r18,16(r5)
    a808:	dd800615 	stw	r22,24(sp)
    a80c:	dd400515 	stw	r21,20(sp)
    a810:	dd000415 	stw	r20,16(sp)
    a814:	dcc00315 	stw	r19,12(sp)
    a818:	dc400115 	stw	r17,4(sp)
    a81c:	dc000015 	stw	r16,0(sp)
    a820:	dfc00815 	stw	ra,32(sp)
    a824:	ddc00715 	stw	r23,28(sp)
    a828:	2827883a 	mov	r19,r5
    a82c:	2029883a 	mov	r20,r4
    a830:	3023883a 	mov	r17,r6
    a834:	3821883a 	mov	r16,r7
    a838:	2d400504 	addi	r21,r5,20
    a83c:	002d883a 	mov	r22,zero
    a840:	adc00017 	ldw	r23,0(r21)
    a844:	880b883a 	mov	r5,r17
    a848:	ad400104 	addi	r21,r21,4
    a84c:	b93fffcc 	andi	r4,r23,65535
    a850:	0000e880 	call	e88 <__mulsi3>
    a854:	b808d43a 	srli	r4,r23,16
    a858:	880b883a 	mov	r5,r17
    a85c:	1421883a 	add	r16,r2,r16
    a860:	0000e880 	call	e88 <__mulsi3>
    a864:	800ed43a 	srli	r7,r16,16
    a868:	80ffffcc 	andi	r3,r16,65535
    a86c:	b5800044 	addi	r22,r22,1
    a870:	11c5883a 	add	r2,r2,r7
    a874:	100e943a 	slli	r7,r2,16
    a878:	1020d43a 	srli	r16,r2,16
    a87c:	38c7883a 	add	r3,r7,r3
    a880:	a8ffff15 	stw	r3,-4(r21)
    a884:	b4bfee16 	blt	r22,r18,a840 <__alt_data_end+0xfffea840>
    a888:	80000926 	beq	r16,zero,a8b0 <__multadd+0xb4>
    a88c:	98800217 	ldw	r2,8(r19)
    a890:	9080130e 	bge	r18,r2,a8e0 <__multadd+0xe4>
    a894:	90800144 	addi	r2,r18,5
    a898:	1085883a 	add	r2,r2,r2
    a89c:	1085883a 	add	r2,r2,r2
    a8a0:	9885883a 	add	r2,r19,r2
    a8a4:	14000015 	stw	r16,0(r2)
    a8a8:	94800044 	addi	r18,r18,1
    a8ac:	9c800415 	stw	r18,16(r19)
    a8b0:	9805883a 	mov	r2,r19
    a8b4:	dfc00817 	ldw	ra,32(sp)
    a8b8:	ddc00717 	ldw	r23,28(sp)
    a8bc:	dd800617 	ldw	r22,24(sp)
    a8c0:	dd400517 	ldw	r21,20(sp)
    a8c4:	dd000417 	ldw	r20,16(sp)
    a8c8:	dcc00317 	ldw	r19,12(sp)
    a8cc:	dc800217 	ldw	r18,8(sp)
    a8d0:	dc400117 	ldw	r17,4(sp)
    a8d4:	dc000017 	ldw	r16,0(sp)
    a8d8:	dec00904 	addi	sp,sp,36
    a8dc:	f800283a 	ret
    a8e0:	99400117 	ldw	r5,4(r19)
    a8e4:	a009883a 	mov	r4,r20
    a8e8:	29400044 	addi	r5,r5,1
    a8ec:	000a72c0 	call	a72c <_Balloc>
    a8f0:	99800417 	ldw	r6,16(r19)
    a8f4:	99400304 	addi	r5,r19,12
    a8f8:	11000304 	addi	r4,r2,12
    a8fc:	31800084 	addi	r6,r6,2
    a900:	318d883a 	add	r6,r6,r6
    a904:	318d883a 	add	r6,r6,r6
    a908:	1023883a 	mov	r17,r2
    a90c:	00055d40 	call	55d4 <memcpy>
    a910:	98000a26 	beq	r19,zero,a93c <__multadd+0x140>
    a914:	98c00117 	ldw	r3,4(r19)
    a918:	a0801317 	ldw	r2,76(r20)
    a91c:	18c7883a 	add	r3,r3,r3
    a920:	18c7883a 	add	r3,r3,r3
    a924:	10c5883a 	add	r2,r2,r3
    a928:	10c00017 	ldw	r3,0(r2)
    a92c:	98c00015 	stw	r3,0(r19)
    a930:	14c00015 	stw	r19,0(r2)
    a934:	8827883a 	mov	r19,r17
    a938:	003fd606 	br	a894 <__alt_data_end+0xfffea894>
    a93c:	8827883a 	mov	r19,r17
    a940:	003fd406 	br	a894 <__alt_data_end+0xfffea894>

0000a944 <__s2b>:
    a944:	defff904 	addi	sp,sp,-28
    a948:	dc400115 	stw	r17,4(sp)
    a94c:	dc000015 	stw	r16,0(sp)
    a950:	2023883a 	mov	r17,r4
    a954:	2821883a 	mov	r16,r5
    a958:	39000204 	addi	r4,r7,8
    a95c:	01400244 	movi	r5,9
    a960:	dcc00315 	stw	r19,12(sp)
    a964:	dc800215 	stw	r18,8(sp)
    a968:	dfc00615 	stw	ra,24(sp)
    a96c:	dd400515 	stw	r21,20(sp)
    a970:	dd000415 	stw	r20,16(sp)
    a974:	3825883a 	mov	r18,r7
    a978:	3027883a 	mov	r19,r6
    a97c:	00034b00 	call	34b0 <__divsi3>
    a980:	00c00044 	movi	r3,1
    a984:	000b883a 	mov	r5,zero
    a988:	1880030e 	bge	r3,r2,a998 <__s2b+0x54>
    a98c:	18c7883a 	add	r3,r3,r3
    a990:	29400044 	addi	r5,r5,1
    a994:	18bffd16 	blt	r3,r2,a98c <__alt_data_end+0xfffea98c>
    a998:	8809883a 	mov	r4,r17
    a99c:	000a72c0 	call	a72c <_Balloc>
    a9a0:	d8c00717 	ldw	r3,28(sp)
    a9a4:	10c00515 	stw	r3,20(r2)
    a9a8:	00c00044 	movi	r3,1
    a9ac:	10c00415 	stw	r3,16(r2)
    a9b0:	00c00244 	movi	r3,9
    a9b4:	1cc0210e 	bge	r3,r19,aa3c <__s2b+0xf8>
    a9b8:	80eb883a 	add	r21,r16,r3
    a9bc:	a829883a 	mov	r20,r21
    a9c0:	84e1883a 	add	r16,r16,r19
    a9c4:	a1c00007 	ldb	r7,0(r20)
    a9c8:	01800284 	movi	r6,10
    a9cc:	a5000044 	addi	r20,r20,1
    a9d0:	100b883a 	mov	r5,r2
    a9d4:	39fff404 	addi	r7,r7,-48
    a9d8:	8809883a 	mov	r4,r17
    a9dc:	000a7fc0 	call	a7fc <__multadd>
    a9e0:	a43ff81e 	bne	r20,r16,a9c4 <__alt_data_end+0xfffea9c4>
    a9e4:	ace1883a 	add	r16,r21,r19
    a9e8:	843ffe04 	addi	r16,r16,-8
    a9ec:	9c800a0e 	bge	r19,r18,aa18 <__s2b+0xd4>
    a9f0:	94e5c83a 	sub	r18,r18,r19
    a9f4:	84a5883a 	add	r18,r16,r18
    a9f8:	81c00007 	ldb	r7,0(r16)
    a9fc:	01800284 	movi	r6,10
    aa00:	84000044 	addi	r16,r16,1
    aa04:	100b883a 	mov	r5,r2
    aa08:	39fff404 	addi	r7,r7,-48
    aa0c:	8809883a 	mov	r4,r17
    aa10:	000a7fc0 	call	a7fc <__multadd>
    aa14:	84bff81e 	bne	r16,r18,a9f8 <__alt_data_end+0xfffea9f8>
    aa18:	dfc00617 	ldw	ra,24(sp)
    aa1c:	dd400517 	ldw	r21,20(sp)
    aa20:	dd000417 	ldw	r20,16(sp)
    aa24:	dcc00317 	ldw	r19,12(sp)
    aa28:	dc800217 	ldw	r18,8(sp)
    aa2c:	dc400117 	ldw	r17,4(sp)
    aa30:	dc000017 	ldw	r16,0(sp)
    aa34:	dec00704 	addi	sp,sp,28
    aa38:	f800283a 	ret
    aa3c:	84000284 	addi	r16,r16,10
    aa40:	1827883a 	mov	r19,r3
    aa44:	003fe906 	br	a9ec <__alt_data_end+0xfffea9ec>

0000aa48 <__hi0bits>:
    aa48:	20bfffec 	andhi	r2,r4,65535
    aa4c:	1000141e 	bne	r2,zero,aaa0 <__hi0bits+0x58>
    aa50:	2008943a 	slli	r4,r4,16
    aa54:	00800404 	movi	r2,16
    aa58:	20ffc02c 	andhi	r3,r4,65280
    aa5c:	1800021e 	bne	r3,zero,aa68 <__hi0bits+0x20>
    aa60:	2008923a 	slli	r4,r4,8
    aa64:	10800204 	addi	r2,r2,8
    aa68:	20fc002c 	andhi	r3,r4,61440
    aa6c:	1800021e 	bne	r3,zero,aa78 <__hi0bits+0x30>
    aa70:	2008913a 	slli	r4,r4,4
    aa74:	10800104 	addi	r2,r2,4
    aa78:	20f0002c 	andhi	r3,r4,49152
    aa7c:	1800031e 	bne	r3,zero,aa8c <__hi0bits+0x44>
    aa80:	2109883a 	add	r4,r4,r4
    aa84:	10800084 	addi	r2,r2,2
    aa88:	2109883a 	add	r4,r4,r4
    aa8c:	20000316 	blt	r4,zero,aa9c <__hi0bits+0x54>
    aa90:	2110002c 	andhi	r4,r4,16384
    aa94:	2000041e 	bne	r4,zero,aaa8 <__hi0bits+0x60>
    aa98:	00800804 	movi	r2,32
    aa9c:	f800283a 	ret
    aaa0:	0005883a 	mov	r2,zero
    aaa4:	003fec06 	br	aa58 <__alt_data_end+0xfffeaa58>
    aaa8:	10800044 	addi	r2,r2,1
    aaac:	f800283a 	ret

0000aab0 <__lo0bits>:
    aab0:	20c00017 	ldw	r3,0(r4)
    aab4:	188001cc 	andi	r2,r3,7
    aab8:	10000826 	beq	r2,zero,aadc <__lo0bits+0x2c>
    aabc:	1880004c 	andi	r2,r3,1
    aac0:	1000211e 	bne	r2,zero,ab48 <__lo0bits+0x98>
    aac4:	1880008c 	andi	r2,r3,2
    aac8:	1000211e 	bne	r2,zero,ab50 <__lo0bits+0xa0>
    aacc:	1806d0ba 	srli	r3,r3,2
    aad0:	00800084 	movi	r2,2
    aad4:	20c00015 	stw	r3,0(r4)
    aad8:	f800283a 	ret
    aadc:	18bfffcc 	andi	r2,r3,65535
    aae0:	10001326 	beq	r2,zero,ab30 <__lo0bits+0x80>
    aae4:	0005883a 	mov	r2,zero
    aae8:	19403fcc 	andi	r5,r3,255
    aaec:	2800021e 	bne	r5,zero,aaf8 <__lo0bits+0x48>
    aaf0:	1806d23a 	srli	r3,r3,8
    aaf4:	10800204 	addi	r2,r2,8
    aaf8:	194003cc 	andi	r5,r3,15
    aafc:	2800021e 	bne	r5,zero,ab08 <__lo0bits+0x58>
    ab00:	1806d13a 	srli	r3,r3,4
    ab04:	10800104 	addi	r2,r2,4
    ab08:	194000cc 	andi	r5,r3,3
    ab0c:	2800021e 	bne	r5,zero,ab18 <__lo0bits+0x68>
    ab10:	1806d0ba 	srli	r3,r3,2
    ab14:	10800084 	addi	r2,r2,2
    ab18:	1940004c 	andi	r5,r3,1
    ab1c:	2800081e 	bne	r5,zero,ab40 <__lo0bits+0x90>
    ab20:	1806d07a 	srli	r3,r3,1
    ab24:	1800051e 	bne	r3,zero,ab3c <__lo0bits+0x8c>
    ab28:	00800804 	movi	r2,32
    ab2c:	f800283a 	ret
    ab30:	1806d43a 	srli	r3,r3,16
    ab34:	00800404 	movi	r2,16
    ab38:	003feb06 	br	aae8 <__alt_data_end+0xfffeaae8>
    ab3c:	10800044 	addi	r2,r2,1
    ab40:	20c00015 	stw	r3,0(r4)
    ab44:	f800283a 	ret
    ab48:	0005883a 	mov	r2,zero
    ab4c:	f800283a 	ret
    ab50:	1806d07a 	srli	r3,r3,1
    ab54:	00800044 	movi	r2,1
    ab58:	20c00015 	stw	r3,0(r4)
    ab5c:	f800283a 	ret

0000ab60 <__i2b>:
    ab60:	defffd04 	addi	sp,sp,-12
    ab64:	dc000015 	stw	r16,0(sp)
    ab68:	04000044 	movi	r16,1
    ab6c:	dc400115 	stw	r17,4(sp)
    ab70:	2823883a 	mov	r17,r5
    ab74:	800b883a 	mov	r5,r16
    ab78:	dfc00215 	stw	ra,8(sp)
    ab7c:	000a72c0 	call	a72c <_Balloc>
    ab80:	14400515 	stw	r17,20(r2)
    ab84:	14000415 	stw	r16,16(r2)
    ab88:	dfc00217 	ldw	ra,8(sp)
    ab8c:	dc400117 	ldw	r17,4(sp)
    ab90:	dc000017 	ldw	r16,0(sp)
    ab94:	dec00304 	addi	sp,sp,12
    ab98:	f800283a 	ret

0000ab9c <__multiply>:
    ab9c:	deffef04 	addi	sp,sp,-68
    aba0:	dc400815 	stw	r17,32(sp)
    aba4:	dc000715 	stw	r16,28(sp)
    aba8:	34400417 	ldw	r17,16(r6)
    abac:	2c000417 	ldw	r16,16(r5)
    abb0:	dd800d15 	stw	r22,52(sp)
    abb4:	dc800915 	stw	r18,36(sp)
    abb8:	dfc01015 	stw	ra,64(sp)
    abbc:	df000f15 	stw	fp,60(sp)
    abc0:	ddc00e15 	stw	r23,56(sp)
    abc4:	dd400c15 	stw	r21,48(sp)
    abc8:	dd000b15 	stw	r20,44(sp)
    abcc:	dcc00a15 	stw	r19,40(sp)
    abd0:	2825883a 	mov	r18,r5
    abd4:	302d883a 	mov	r22,r6
    abd8:	8440050e 	bge	r16,r17,abf0 <__multiply+0x54>
    abdc:	8007883a 	mov	r3,r16
    abe0:	3025883a 	mov	r18,r6
    abe4:	8821883a 	mov	r16,r17
    abe8:	282d883a 	mov	r22,r5
    abec:	1823883a 	mov	r17,r3
    abf0:	90800217 	ldw	r2,8(r18)
    abf4:	8447883a 	add	r3,r16,r17
    abf8:	d8c00215 	stw	r3,8(sp)
    abfc:	91400117 	ldw	r5,4(r18)
    ac00:	10c0010e 	bge	r2,r3,ac08 <__multiply+0x6c>
    ac04:	29400044 	addi	r5,r5,1
    ac08:	000a72c0 	call	a72c <_Balloc>
    ac0c:	d8c00217 	ldw	r3,8(sp)
    ac10:	d8800615 	stw	r2,24(sp)
    ac14:	18eb883a 	add	r21,r3,r3
    ac18:	ad6b883a 	add	r21,r21,r21
    ac1c:	10c00504 	addi	r3,r2,20
    ac20:	1d6b883a 	add	r21,r3,r21
    ac24:	d8c00115 	stw	r3,4(sp)
    ac28:	dd400315 	stw	r21,12(sp)
    ac2c:	1805883a 	mov	r2,r3
    ac30:	1d40042e 	bgeu	r3,r21,ac44 <__multiply+0xa8>
    ac34:	d8c00317 	ldw	r3,12(sp)
    ac38:	10000015 	stw	zero,0(r2)
    ac3c:	10800104 	addi	r2,r2,4
    ac40:	10fffc36 	bltu	r2,r3,ac34 <__alt_data_end+0xfffeac34>
    ac44:	8c63883a 	add	r17,r17,r17
    ac48:	b5800504 	addi	r22,r22,20
    ac4c:	8c63883a 	add	r17,r17,r17
    ac50:	94800504 	addi	r18,r18,20
    ac54:	8421883a 	add	r16,r16,r16
    ac58:	b463883a 	add	r17,r22,r17
    ac5c:	8421883a 	add	r16,r16,r16
    ac60:	dd800015 	stw	r22,0(sp)
    ac64:	dc800415 	stw	r18,16(sp)
    ac68:	dc400515 	stw	r17,20(sp)
    ac6c:	9429883a 	add	r20,r18,r16
    ac70:	b4404f2e 	bgeu	r22,r17,adb0 <__multiply+0x214>
    ac74:	d8c00017 	ldw	r3,0(sp)
    ac78:	1c800017 	ldw	r18,0(r3)
    ac7c:	947fffcc 	andi	r17,r18,65535
    ac80:	88001e26 	beq	r17,zero,acfc <__multiply+0x160>
    ac84:	dd800117 	ldw	r22,4(sp)
    ac88:	dd400417 	ldw	r21,16(sp)
    ac8c:	0027883a 	mov	r19,zero
    ac90:	ac800017 	ldw	r18,0(r21)
    ac94:	b4000017 	ldw	r16,0(r22)
    ac98:	880b883a 	mov	r5,r17
    ac9c:	913fffcc 	andi	r4,r18,65535
    aca0:	0000e880 	call	e88 <__mulsi3>
    aca4:	9008d43a 	srli	r4,r18,16
    aca8:	84bfffcc 	andi	r18,r16,65535
    acac:	1485883a 	add	r2,r2,r18
    acb0:	14e5883a 	add	r18,r2,r19
    acb4:	8020d43a 	srli	r16,r16,16
    acb8:	9026d43a 	srli	r19,r18,16
    acbc:	880b883a 	mov	r5,r17
    acc0:	0000e880 	call	e88 <__mulsi3>
    acc4:	1405883a 	add	r2,r2,r16
    acc8:	14e1883a 	add	r16,r2,r19
    accc:	90ffffcc 	andi	r3,r18,65535
    acd0:	8024943a 	slli	r18,r16,16
    acd4:	ad400104 	addi	r21,r21,4
    acd8:	b005883a 	mov	r2,r22
    acdc:	90c6b03a 	or	r3,r18,r3
    ace0:	b0c00015 	stw	r3,0(r22)
    ace4:	8026d43a 	srli	r19,r16,16
    ace8:	b5800104 	addi	r22,r22,4
    acec:	ad3fe836 	bltu	r21,r20,ac90 <__alt_data_end+0xfffeac90>
    acf0:	d8c00017 	ldw	r3,0(sp)
    acf4:	14c00115 	stw	r19,4(r2)
    acf8:	1c800017 	ldw	r18,0(r3)
    acfc:	9024d43a 	srli	r18,r18,16
    ad00:	90002226 	beq	r18,zero,ad8c <__multiply+0x1f0>
    ad04:	d8c00117 	ldw	r3,4(sp)
    ad08:	dd800417 	ldw	r22,16(sp)
    ad0c:	002f883a 	mov	r23,zero
    ad10:	1f000017 	ldw	fp,0(r3)
    ad14:	1823883a 	mov	r17,r3
    ad18:	182b883a 	mov	r21,r3
    ad1c:	e021883a 	mov	r16,fp
    ad20:	00000106 	br	ad28 <__multiply+0x18c>
    ad24:	982b883a 	mov	r21,r19
    ad28:	b100000b 	ldhu	r4,0(r22)
    ad2c:	8020d43a 	srli	r16,r16,16
    ad30:	900b883a 	mov	r5,r18
    ad34:	0000e880 	call	e88 <__mulsi3>
    ad38:	1405883a 	add	r2,r2,r16
    ad3c:	15ef883a 	add	r23,r2,r23
    ad40:	b804943a 	slli	r2,r23,16
    ad44:	e0ffffcc 	andi	r3,fp,65535
    ad48:	8c400104 	addi	r17,r17,4
    ad4c:	10c6b03a 	or	r3,r2,r3
    ad50:	88ffff15 	stw	r3,-4(r17)
    ad54:	b5800104 	addi	r22,r22,4
    ad58:	b13fff17 	ldw	r4,-4(r22)
    ad5c:	acc00104 	addi	r19,r21,4
    ad60:	900b883a 	mov	r5,r18
    ad64:	2008d43a 	srli	r4,r4,16
    ad68:	9c000017 	ldw	r16,0(r19)
    ad6c:	0000e880 	call	e88 <__mulsi3>
    ad70:	b806d43a 	srli	r3,r23,16
    ad74:	813fffcc 	andi	r4,r16,65535
    ad78:	1105883a 	add	r2,r2,r4
    ad7c:	10f9883a 	add	fp,r2,r3
    ad80:	e02ed43a 	srli	r23,fp,16
    ad84:	b53fe736 	bltu	r22,r20,ad24 <__alt_data_end+0xfffead24>
    ad88:	af000115 	stw	fp,4(r21)
    ad8c:	d8c00017 	ldw	r3,0(sp)
    ad90:	d9000517 	ldw	r4,20(sp)
    ad94:	18c00104 	addi	r3,r3,4
    ad98:	d8c00015 	stw	r3,0(sp)
    ad9c:	d8c00117 	ldw	r3,4(sp)
    ada0:	18c00104 	addi	r3,r3,4
    ada4:	d8c00115 	stw	r3,4(sp)
    ada8:	d8c00017 	ldw	r3,0(sp)
    adac:	193fb136 	bltu	r3,r4,ac74 <__alt_data_end+0xfffeac74>
    adb0:	d8c00217 	ldw	r3,8(sp)
    adb4:	00c00c0e 	bge	zero,r3,ade8 <__multiply+0x24c>
    adb8:	d8c00317 	ldw	r3,12(sp)
    adbc:	18bfff17 	ldw	r2,-4(r3)
    adc0:	1d7fff04 	addi	r21,r3,-4
    adc4:	10000326 	beq	r2,zero,add4 <__multiply+0x238>
    adc8:	00000706 	br	ade8 <__multiply+0x24c>
    adcc:	a8800017 	ldw	r2,0(r21)
    add0:	1000051e 	bne	r2,zero,ade8 <__multiply+0x24c>
    add4:	d8c00217 	ldw	r3,8(sp)
    add8:	ad7fff04 	addi	r21,r21,-4
    addc:	18ffffc4 	addi	r3,r3,-1
    ade0:	d8c00215 	stw	r3,8(sp)
    ade4:	183ff91e 	bne	r3,zero,adcc <__alt_data_end+0xfffeadcc>
    ade8:	d8c00617 	ldw	r3,24(sp)
    adec:	d9000217 	ldw	r4,8(sp)
    adf0:	1805883a 	mov	r2,r3
    adf4:	19000415 	stw	r4,16(r3)
    adf8:	dfc01017 	ldw	ra,64(sp)
    adfc:	df000f17 	ldw	fp,60(sp)
    ae00:	ddc00e17 	ldw	r23,56(sp)
    ae04:	dd800d17 	ldw	r22,52(sp)
    ae08:	dd400c17 	ldw	r21,48(sp)
    ae0c:	dd000b17 	ldw	r20,44(sp)
    ae10:	dcc00a17 	ldw	r19,40(sp)
    ae14:	dc800917 	ldw	r18,36(sp)
    ae18:	dc400817 	ldw	r17,32(sp)
    ae1c:	dc000717 	ldw	r16,28(sp)
    ae20:	dec01104 	addi	sp,sp,68
    ae24:	f800283a 	ret

0000ae28 <__pow5mult>:
    ae28:	defffa04 	addi	sp,sp,-24
    ae2c:	dcc00315 	stw	r19,12(sp)
    ae30:	dc000015 	stw	r16,0(sp)
    ae34:	dfc00515 	stw	ra,20(sp)
    ae38:	dd000415 	stw	r20,16(sp)
    ae3c:	dc800215 	stw	r18,8(sp)
    ae40:	dc400115 	stw	r17,4(sp)
    ae44:	308000cc 	andi	r2,r6,3
    ae48:	3021883a 	mov	r16,r6
    ae4c:	2027883a 	mov	r19,r4
    ae50:	10002f1e 	bne	r2,zero,af10 <__pow5mult+0xe8>
    ae54:	2825883a 	mov	r18,r5
    ae58:	8021d0ba 	srai	r16,r16,2
    ae5c:	80001a26 	beq	r16,zero,aec8 <__pow5mult+0xa0>
    ae60:	9c401217 	ldw	r17,72(r19)
    ae64:	8800061e 	bne	r17,zero,ae80 <__pow5mult+0x58>
    ae68:	00003406 	br	af3c <__pow5mult+0x114>
    ae6c:	8021d07a 	srai	r16,r16,1
    ae70:	80001526 	beq	r16,zero,aec8 <__pow5mult+0xa0>
    ae74:	88800017 	ldw	r2,0(r17)
    ae78:	10001c26 	beq	r2,zero,aeec <__pow5mult+0xc4>
    ae7c:	1023883a 	mov	r17,r2
    ae80:	8080004c 	andi	r2,r16,1
    ae84:	103ff926 	beq	r2,zero,ae6c <__alt_data_end+0xfffeae6c>
    ae88:	880d883a 	mov	r6,r17
    ae8c:	900b883a 	mov	r5,r18
    ae90:	9809883a 	mov	r4,r19
    ae94:	000ab9c0 	call	ab9c <__multiply>
    ae98:	90001b26 	beq	r18,zero,af08 <__pow5mult+0xe0>
    ae9c:	91000117 	ldw	r4,4(r18)
    aea0:	98c01317 	ldw	r3,76(r19)
    aea4:	8021d07a 	srai	r16,r16,1
    aea8:	2109883a 	add	r4,r4,r4
    aeac:	2109883a 	add	r4,r4,r4
    aeb0:	1907883a 	add	r3,r3,r4
    aeb4:	19000017 	ldw	r4,0(r3)
    aeb8:	91000015 	stw	r4,0(r18)
    aebc:	1c800015 	stw	r18,0(r3)
    aec0:	1025883a 	mov	r18,r2
    aec4:	803feb1e 	bne	r16,zero,ae74 <__alt_data_end+0xfffeae74>
    aec8:	9005883a 	mov	r2,r18
    aecc:	dfc00517 	ldw	ra,20(sp)
    aed0:	dd000417 	ldw	r20,16(sp)
    aed4:	dcc00317 	ldw	r19,12(sp)
    aed8:	dc800217 	ldw	r18,8(sp)
    aedc:	dc400117 	ldw	r17,4(sp)
    aee0:	dc000017 	ldw	r16,0(sp)
    aee4:	dec00604 	addi	sp,sp,24
    aee8:	f800283a 	ret
    aeec:	880d883a 	mov	r6,r17
    aef0:	880b883a 	mov	r5,r17
    aef4:	9809883a 	mov	r4,r19
    aef8:	000ab9c0 	call	ab9c <__multiply>
    aefc:	88800015 	stw	r2,0(r17)
    af00:	10000015 	stw	zero,0(r2)
    af04:	003fdd06 	br	ae7c <__alt_data_end+0xfffeae7c>
    af08:	1025883a 	mov	r18,r2
    af0c:	003fd706 	br	ae6c <__alt_data_end+0xfffeae6c>
    af10:	10bfffc4 	addi	r2,r2,-1
    af14:	1085883a 	add	r2,r2,r2
    af18:	00c00074 	movhi	r3,1
    af1c:	18c4ad04 	addi	r3,r3,4788
    af20:	1085883a 	add	r2,r2,r2
    af24:	1885883a 	add	r2,r3,r2
    af28:	11800017 	ldw	r6,0(r2)
    af2c:	000f883a 	mov	r7,zero
    af30:	000a7fc0 	call	a7fc <__multadd>
    af34:	1025883a 	mov	r18,r2
    af38:	003fc706 	br	ae58 <__alt_data_end+0xfffeae58>
    af3c:	05000044 	movi	r20,1
    af40:	a00b883a 	mov	r5,r20
    af44:	9809883a 	mov	r4,r19
    af48:	000a72c0 	call	a72c <_Balloc>
    af4c:	1023883a 	mov	r17,r2
    af50:	00809c44 	movi	r2,625
    af54:	88800515 	stw	r2,20(r17)
    af58:	8d000415 	stw	r20,16(r17)
    af5c:	9c401215 	stw	r17,72(r19)
    af60:	88000015 	stw	zero,0(r17)
    af64:	003fc606 	br	ae80 <__alt_data_end+0xfffeae80>

0000af68 <__lshift>:
    af68:	defff904 	addi	sp,sp,-28
    af6c:	dd400515 	stw	r21,20(sp)
    af70:	dcc00315 	stw	r19,12(sp)
    af74:	302bd17a 	srai	r21,r6,5
    af78:	2cc00417 	ldw	r19,16(r5)
    af7c:	28800217 	ldw	r2,8(r5)
    af80:	dd000415 	stw	r20,16(sp)
    af84:	ace7883a 	add	r19,r21,r19
    af88:	dc800215 	stw	r18,8(sp)
    af8c:	dc400115 	stw	r17,4(sp)
    af90:	dc000015 	stw	r16,0(sp)
    af94:	dfc00615 	stw	ra,24(sp)
    af98:	9c000044 	addi	r16,r19,1
    af9c:	2823883a 	mov	r17,r5
    afa0:	3029883a 	mov	r20,r6
    afa4:	2025883a 	mov	r18,r4
    afa8:	29400117 	ldw	r5,4(r5)
    afac:	1400030e 	bge	r2,r16,afbc <__lshift+0x54>
    afb0:	1085883a 	add	r2,r2,r2
    afb4:	29400044 	addi	r5,r5,1
    afb8:	143ffd16 	blt	r2,r16,afb0 <__alt_data_end+0xfffeafb0>
    afbc:	9009883a 	mov	r4,r18
    afc0:	000a72c0 	call	a72c <_Balloc>
    afc4:	10c00504 	addi	r3,r2,20
    afc8:	0540070e 	bge	zero,r21,afe8 <__lshift+0x80>
    afcc:	ad6b883a 	add	r21,r21,r21
    afd0:	ad6b883a 	add	r21,r21,r21
    afd4:	1809883a 	mov	r4,r3
    afd8:	1d47883a 	add	r3,r3,r21
    afdc:	20000015 	stw	zero,0(r4)
    afe0:	21000104 	addi	r4,r4,4
    afe4:	193ffd1e 	bne	r3,r4,afdc <__alt_data_end+0xfffeafdc>
    afe8:	8a000417 	ldw	r8,16(r17)
    afec:	89000504 	addi	r4,r17,20
    aff0:	a18007cc 	andi	r6,r20,31
    aff4:	4211883a 	add	r8,r8,r8
    aff8:	4211883a 	add	r8,r8,r8
    affc:	2211883a 	add	r8,r4,r8
    b000:	30002326 	beq	r6,zero,b090 <__lshift+0x128>
    b004:	02400804 	movi	r9,32
    b008:	4993c83a 	sub	r9,r9,r6
    b00c:	000b883a 	mov	r5,zero
    b010:	21c00017 	ldw	r7,0(r4)
    b014:	1815883a 	mov	r10,r3
    b018:	18c00104 	addi	r3,r3,4
    b01c:	398e983a 	sll	r7,r7,r6
    b020:	21000104 	addi	r4,r4,4
    b024:	394ab03a 	or	r5,r7,r5
    b028:	197fff15 	stw	r5,-4(r3)
    b02c:	217fff17 	ldw	r5,-4(r4)
    b030:	2a4ad83a 	srl	r5,r5,r9
    b034:	223ff636 	bltu	r4,r8,b010 <__alt_data_end+0xfffeb010>
    b038:	51400115 	stw	r5,4(r10)
    b03c:	28001a1e 	bne	r5,zero,b0a8 <__lshift+0x140>
    b040:	843fffc4 	addi	r16,r16,-1
    b044:	14000415 	stw	r16,16(r2)
    b048:	88000826 	beq	r17,zero,b06c <__lshift+0x104>
    b04c:	89000117 	ldw	r4,4(r17)
    b050:	90c01317 	ldw	r3,76(r18)
    b054:	2109883a 	add	r4,r4,r4
    b058:	2109883a 	add	r4,r4,r4
    b05c:	1907883a 	add	r3,r3,r4
    b060:	19000017 	ldw	r4,0(r3)
    b064:	89000015 	stw	r4,0(r17)
    b068:	1c400015 	stw	r17,0(r3)
    b06c:	dfc00617 	ldw	ra,24(sp)
    b070:	dd400517 	ldw	r21,20(sp)
    b074:	dd000417 	ldw	r20,16(sp)
    b078:	dcc00317 	ldw	r19,12(sp)
    b07c:	dc800217 	ldw	r18,8(sp)
    b080:	dc400117 	ldw	r17,4(sp)
    b084:	dc000017 	ldw	r16,0(sp)
    b088:	dec00704 	addi	sp,sp,28
    b08c:	f800283a 	ret
    b090:	21400017 	ldw	r5,0(r4)
    b094:	18c00104 	addi	r3,r3,4
    b098:	21000104 	addi	r4,r4,4
    b09c:	197fff15 	stw	r5,-4(r3)
    b0a0:	223ffb36 	bltu	r4,r8,b090 <__alt_data_end+0xfffeb090>
    b0a4:	003fe606 	br	b040 <__alt_data_end+0xfffeb040>
    b0a8:	9c000084 	addi	r16,r19,2
    b0ac:	003fe406 	br	b040 <__alt_data_end+0xfffeb040>

0000b0b0 <__mcmp>:
    b0b0:	20800417 	ldw	r2,16(r4)
    b0b4:	28c00417 	ldw	r3,16(r5)
    b0b8:	10c5c83a 	sub	r2,r2,r3
    b0bc:	1000111e 	bne	r2,zero,b104 <__mcmp+0x54>
    b0c0:	18c7883a 	add	r3,r3,r3
    b0c4:	18c7883a 	add	r3,r3,r3
    b0c8:	21000504 	addi	r4,r4,20
    b0cc:	29400504 	addi	r5,r5,20
    b0d0:	20c5883a 	add	r2,r4,r3
    b0d4:	28cb883a 	add	r5,r5,r3
    b0d8:	00000106 	br	b0e0 <__mcmp+0x30>
    b0dc:	20800a2e 	bgeu	r4,r2,b108 <__mcmp+0x58>
    b0e0:	10bfff04 	addi	r2,r2,-4
    b0e4:	297fff04 	addi	r5,r5,-4
    b0e8:	11800017 	ldw	r6,0(r2)
    b0ec:	28c00017 	ldw	r3,0(r5)
    b0f0:	30fffa26 	beq	r6,r3,b0dc <__alt_data_end+0xfffeb0dc>
    b0f4:	30c00236 	bltu	r6,r3,b100 <__mcmp+0x50>
    b0f8:	00800044 	movi	r2,1
    b0fc:	f800283a 	ret
    b100:	00bfffc4 	movi	r2,-1
    b104:	f800283a 	ret
    b108:	0005883a 	mov	r2,zero
    b10c:	f800283a 	ret

0000b110 <__mdiff>:
    b110:	28c00417 	ldw	r3,16(r5)
    b114:	30800417 	ldw	r2,16(r6)
    b118:	defffa04 	addi	sp,sp,-24
    b11c:	dcc00315 	stw	r19,12(sp)
    b120:	dc800215 	stw	r18,8(sp)
    b124:	dfc00515 	stw	ra,20(sp)
    b128:	dd000415 	stw	r20,16(sp)
    b12c:	dc400115 	stw	r17,4(sp)
    b130:	dc000015 	stw	r16,0(sp)
    b134:	1887c83a 	sub	r3,r3,r2
    b138:	2825883a 	mov	r18,r5
    b13c:	3027883a 	mov	r19,r6
    b140:	1800141e 	bne	r3,zero,b194 <__mdiff+0x84>
    b144:	1085883a 	add	r2,r2,r2
    b148:	1085883a 	add	r2,r2,r2
    b14c:	2a000504 	addi	r8,r5,20
    b150:	34000504 	addi	r16,r6,20
    b154:	4087883a 	add	r3,r8,r2
    b158:	8085883a 	add	r2,r16,r2
    b15c:	00000106 	br	b164 <__mdiff+0x54>
    b160:	40c0592e 	bgeu	r8,r3,b2c8 <__mdiff+0x1b8>
    b164:	18ffff04 	addi	r3,r3,-4
    b168:	10bfff04 	addi	r2,r2,-4
    b16c:	19c00017 	ldw	r7,0(r3)
    b170:	11400017 	ldw	r5,0(r2)
    b174:	397ffa26 	beq	r7,r5,b160 <__alt_data_end+0xfffeb160>
    b178:	3940592e 	bgeu	r7,r5,b2e0 <__mdiff+0x1d0>
    b17c:	9005883a 	mov	r2,r18
    b180:	4023883a 	mov	r17,r8
    b184:	9825883a 	mov	r18,r19
    b188:	05000044 	movi	r20,1
    b18c:	1027883a 	mov	r19,r2
    b190:	00000406 	br	b1a4 <__mdiff+0x94>
    b194:	18005616 	blt	r3,zero,b2f0 <__mdiff+0x1e0>
    b198:	34400504 	addi	r17,r6,20
    b19c:	2c000504 	addi	r16,r5,20
    b1a0:	0029883a 	mov	r20,zero
    b1a4:	91400117 	ldw	r5,4(r18)
    b1a8:	000a72c0 	call	a72c <_Balloc>
    b1ac:	92400417 	ldw	r9,16(r18)
    b1b0:	9b000417 	ldw	r12,16(r19)
    b1b4:	12c00504 	addi	r11,r2,20
    b1b8:	4a51883a 	add	r8,r9,r9
    b1bc:	6319883a 	add	r12,r12,r12
    b1c0:	4211883a 	add	r8,r8,r8
    b1c4:	6319883a 	add	r12,r12,r12
    b1c8:	15000315 	stw	r20,12(r2)
    b1cc:	8211883a 	add	r8,r16,r8
    b1d0:	8b19883a 	add	r12,r17,r12
    b1d4:	0007883a 	mov	r3,zero
    b1d8:	81400017 	ldw	r5,0(r16)
    b1dc:	89c00017 	ldw	r7,0(r17)
    b1e0:	59800104 	addi	r6,r11,4
    b1e4:	293fffcc 	andi	r4,r5,65535
    b1e8:	20c7883a 	add	r3,r4,r3
    b1ec:	393fffcc 	andi	r4,r7,65535
    b1f0:	1909c83a 	sub	r4,r3,r4
    b1f4:	280ad43a 	srli	r5,r5,16
    b1f8:	380ed43a 	srli	r7,r7,16
    b1fc:	2007d43a 	srai	r3,r4,16
    b200:	213fffcc 	andi	r4,r4,65535
    b204:	29cbc83a 	sub	r5,r5,r7
    b208:	28c7883a 	add	r3,r5,r3
    b20c:	180a943a 	slli	r5,r3,16
    b210:	8c400104 	addi	r17,r17,4
    b214:	84000104 	addi	r16,r16,4
    b218:	2908b03a 	or	r4,r5,r4
    b21c:	59000015 	stw	r4,0(r11)
    b220:	1807d43a 	srai	r3,r3,16
    b224:	3015883a 	mov	r10,r6
    b228:	3017883a 	mov	r11,r6
    b22c:	8b3fea36 	bltu	r17,r12,b1d8 <__alt_data_end+0xfffeb1d8>
    b230:	8200162e 	bgeu	r16,r8,b28c <__mdiff+0x17c>
    b234:	8017883a 	mov	r11,r16
    b238:	59400017 	ldw	r5,0(r11)
    b23c:	31800104 	addi	r6,r6,4
    b240:	5ac00104 	addi	r11,r11,4
    b244:	293fffcc 	andi	r4,r5,65535
    b248:	20c7883a 	add	r3,r4,r3
    b24c:	280ed43a 	srli	r7,r5,16
    b250:	180bd43a 	srai	r5,r3,16
    b254:	193fffcc 	andi	r4,r3,65535
    b258:	3947883a 	add	r3,r7,r5
    b25c:	180a943a 	slli	r5,r3,16
    b260:	1807d43a 	srai	r3,r3,16
    b264:	2908b03a 	or	r4,r5,r4
    b268:	313fff15 	stw	r4,-4(r6)
    b26c:	5a3ff236 	bltu	r11,r8,b238 <__alt_data_end+0xfffeb238>
    b270:	0406303a 	nor	r3,zero,r16
    b274:	1a07883a 	add	r3,r3,r8
    b278:	1806d0ba 	srli	r3,r3,2
    b27c:	18c00044 	addi	r3,r3,1
    b280:	18c7883a 	add	r3,r3,r3
    b284:	18c7883a 	add	r3,r3,r3
    b288:	50d5883a 	add	r10,r10,r3
    b28c:	50ffff04 	addi	r3,r10,-4
    b290:	2000041e 	bne	r4,zero,b2a4 <__mdiff+0x194>
    b294:	18ffff04 	addi	r3,r3,-4
    b298:	19000017 	ldw	r4,0(r3)
    b29c:	4a7fffc4 	addi	r9,r9,-1
    b2a0:	203ffc26 	beq	r4,zero,b294 <__alt_data_end+0xfffeb294>
    b2a4:	12400415 	stw	r9,16(r2)
    b2a8:	dfc00517 	ldw	ra,20(sp)
    b2ac:	dd000417 	ldw	r20,16(sp)
    b2b0:	dcc00317 	ldw	r19,12(sp)
    b2b4:	dc800217 	ldw	r18,8(sp)
    b2b8:	dc400117 	ldw	r17,4(sp)
    b2bc:	dc000017 	ldw	r16,0(sp)
    b2c0:	dec00604 	addi	sp,sp,24
    b2c4:	f800283a 	ret
    b2c8:	000b883a 	mov	r5,zero
    b2cc:	000a72c0 	call	a72c <_Balloc>
    b2d0:	00c00044 	movi	r3,1
    b2d4:	10c00415 	stw	r3,16(r2)
    b2d8:	10000515 	stw	zero,20(r2)
    b2dc:	003ff206 	br	b2a8 <__alt_data_end+0xfffeb2a8>
    b2e0:	8023883a 	mov	r17,r16
    b2e4:	0029883a 	mov	r20,zero
    b2e8:	4021883a 	mov	r16,r8
    b2ec:	003fad06 	br	b1a4 <__alt_data_end+0xfffeb1a4>
    b2f0:	9005883a 	mov	r2,r18
    b2f4:	94400504 	addi	r17,r18,20
    b2f8:	9c000504 	addi	r16,r19,20
    b2fc:	9825883a 	mov	r18,r19
    b300:	05000044 	movi	r20,1
    b304:	1027883a 	mov	r19,r2
    b308:	003fa606 	br	b1a4 <__alt_data_end+0xfffeb1a4>

0000b30c <__ulp>:
    b30c:	295ffc2c 	andhi	r5,r5,32752
    b310:	00bf3034 	movhi	r2,64704
    b314:	2887883a 	add	r3,r5,r2
    b318:	00c0020e 	bge	zero,r3,b324 <__ulp+0x18>
    b31c:	0005883a 	mov	r2,zero
    b320:	f800283a 	ret
    b324:	00c7c83a 	sub	r3,zero,r3
    b328:	1807d53a 	srai	r3,r3,20
    b32c:	008004c4 	movi	r2,19
    b330:	10c00b0e 	bge	r2,r3,b360 <__ulp+0x54>
    b334:	18bffb04 	addi	r2,r3,-20
    b338:	01000784 	movi	r4,30
    b33c:	0007883a 	mov	r3,zero
    b340:	20800516 	blt	r4,r2,b358 <__ulp+0x4c>
    b344:	010007c4 	movi	r4,31
    b348:	2089c83a 	sub	r4,r4,r2
    b34c:	00800044 	movi	r2,1
    b350:	1104983a 	sll	r2,r2,r4
    b354:	f800283a 	ret
    b358:	00800044 	movi	r2,1
    b35c:	f800283a 	ret
    b360:	01400234 	movhi	r5,8
    b364:	28c7d83a 	sra	r3,r5,r3
    b368:	0005883a 	mov	r2,zero
    b36c:	f800283a 	ret

0000b370 <__b2d>:
    b370:	defffa04 	addi	sp,sp,-24
    b374:	dc000015 	stw	r16,0(sp)
    b378:	24000417 	ldw	r16,16(r4)
    b37c:	dc400115 	stw	r17,4(sp)
    b380:	24400504 	addi	r17,r4,20
    b384:	8421883a 	add	r16,r16,r16
    b388:	8421883a 	add	r16,r16,r16
    b38c:	8c21883a 	add	r16,r17,r16
    b390:	dc800215 	stw	r18,8(sp)
    b394:	84bfff17 	ldw	r18,-4(r16)
    b398:	dd000415 	stw	r20,16(sp)
    b39c:	dcc00315 	stw	r19,12(sp)
    b3a0:	9009883a 	mov	r4,r18
    b3a4:	2829883a 	mov	r20,r5
    b3a8:	dfc00515 	stw	ra,20(sp)
    b3ac:	000aa480 	call	aa48 <__hi0bits>
    b3b0:	00c00804 	movi	r3,32
    b3b4:	1889c83a 	sub	r4,r3,r2
    b3b8:	a1000015 	stw	r4,0(r20)
    b3bc:	01000284 	movi	r4,10
    b3c0:	84ffff04 	addi	r19,r16,-4
    b3c4:	20801216 	blt	r4,r2,b410 <__b2d+0xa0>
    b3c8:	018002c4 	movi	r6,11
    b3cc:	308dc83a 	sub	r6,r6,r2
    b3d0:	9186d83a 	srl	r3,r18,r6
    b3d4:	18cffc34 	orhi	r3,r3,16368
    b3d8:	8cc0212e 	bgeu	r17,r19,b460 <__b2d+0xf0>
    b3dc:	813ffe17 	ldw	r4,-8(r16)
    b3e0:	218cd83a 	srl	r6,r4,r6
    b3e4:	10800544 	addi	r2,r2,21
    b3e8:	9084983a 	sll	r2,r18,r2
    b3ec:	1184b03a 	or	r2,r2,r6
    b3f0:	dfc00517 	ldw	ra,20(sp)
    b3f4:	dd000417 	ldw	r20,16(sp)
    b3f8:	dcc00317 	ldw	r19,12(sp)
    b3fc:	dc800217 	ldw	r18,8(sp)
    b400:	dc400117 	ldw	r17,4(sp)
    b404:	dc000017 	ldw	r16,0(sp)
    b408:	dec00604 	addi	sp,sp,24
    b40c:	f800283a 	ret
    b410:	8cc00f2e 	bgeu	r17,r19,b450 <__b2d+0xe0>
    b414:	117ffd44 	addi	r5,r2,-11
    b418:	80bffe17 	ldw	r2,-8(r16)
    b41c:	28000e26 	beq	r5,zero,b458 <__b2d+0xe8>
    b420:	1949c83a 	sub	r4,r3,r5
    b424:	9164983a 	sll	r18,r18,r5
    b428:	1106d83a 	srl	r3,r2,r4
    b42c:	81bffe04 	addi	r6,r16,-8
    b430:	948ffc34 	orhi	r18,r18,16368
    b434:	90c6b03a 	or	r3,r18,r3
    b438:	89800e2e 	bgeu	r17,r6,b474 <__b2d+0x104>
    b43c:	81bffd17 	ldw	r6,-12(r16)
    b440:	1144983a 	sll	r2,r2,r5
    b444:	310ad83a 	srl	r5,r6,r4
    b448:	2884b03a 	or	r2,r5,r2
    b44c:	003fe806 	br	b3f0 <__alt_data_end+0xfffeb3f0>
    b450:	10bffd44 	addi	r2,r2,-11
    b454:	1000041e 	bne	r2,zero,b468 <__b2d+0xf8>
    b458:	90cffc34 	orhi	r3,r18,16368
    b45c:	003fe406 	br	b3f0 <__alt_data_end+0xfffeb3f0>
    b460:	000d883a 	mov	r6,zero
    b464:	003fdf06 	br	b3e4 <__alt_data_end+0xfffeb3e4>
    b468:	90a4983a 	sll	r18,r18,r2
    b46c:	0005883a 	mov	r2,zero
    b470:	003ff906 	br	b458 <__alt_data_end+0xfffeb458>
    b474:	1144983a 	sll	r2,r2,r5
    b478:	003fdd06 	br	b3f0 <__alt_data_end+0xfffeb3f0>

0000b47c <__d2b>:
    b47c:	defff804 	addi	sp,sp,-32
    b480:	dc000215 	stw	r16,8(sp)
    b484:	3021883a 	mov	r16,r6
    b488:	dc400315 	stw	r17,12(sp)
    b48c:	8022907a 	slli	r17,r16,1
    b490:	dd000615 	stw	r20,24(sp)
    b494:	2829883a 	mov	r20,r5
    b498:	01400044 	movi	r5,1
    b49c:	dcc00515 	stw	r19,20(sp)
    b4a0:	dc800415 	stw	r18,16(sp)
    b4a4:	dfc00715 	stw	ra,28(sp)
    b4a8:	3825883a 	mov	r18,r7
    b4ac:	8822d57a 	srli	r17,r17,21
    b4b0:	000a72c0 	call	a72c <_Balloc>
    b4b4:	1027883a 	mov	r19,r2
    b4b8:	00800434 	movhi	r2,16
    b4bc:	10bfffc4 	addi	r2,r2,-1
    b4c0:	808c703a 	and	r6,r16,r2
    b4c4:	88000126 	beq	r17,zero,b4cc <__d2b+0x50>
    b4c8:	31800434 	orhi	r6,r6,16
    b4cc:	d9800015 	stw	r6,0(sp)
    b4d0:	a0002426 	beq	r20,zero,b564 <__d2b+0xe8>
    b4d4:	d9000104 	addi	r4,sp,4
    b4d8:	dd000115 	stw	r20,4(sp)
    b4dc:	000aab00 	call	aab0 <__lo0bits>
    b4e0:	d8c00017 	ldw	r3,0(sp)
    b4e4:	10002f1e 	bne	r2,zero,b5a4 <__d2b+0x128>
    b4e8:	d9000117 	ldw	r4,4(sp)
    b4ec:	99000515 	stw	r4,20(r19)
    b4f0:	1821003a 	cmpeq	r16,r3,zero
    b4f4:	01000084 	movi	r4,2
    b4f8:	2421c83a 	sub	r16,r4,r16
    b4fc:	98c00615 	stw	r3,24(r19)
    b500:	9c000415 	stw	r16,16(r19)
    b504:	88001f1e 	bne	r17,zero,b584 <__d2b+0x108>
    b508:	10bef384 	addi	r2,r2,-1074
    b50c:	90800015 	stw	r2,0(r18)
    b510:	00900034 	movhi	r2,16384
    b514:	10bfffc4 	addi	r2,r2,-1
    b518:	8085883a 	add	r2,r16,r2
    b51c:	1085883a 	add	r2,r2,r2
    b520:	1085883a 	add	r2,r2,r2
    b524:	9885883a 	add	r2,r19,r2
    b528:	11000517 	ldw	r4,20(r2)
    b52c:	8020917a 	slli	r16,r16,5
    b530:	000aa480 	call	aa48 <__hi0bits>
    b534:	d8c00817 	ldw	r3,32(sp)
    b538:	8085c83a 	sub	r2,r16,r2
    b53c:	18800015 	stw	r2,0(r3)
    b540:	9805883a 	mov	r2,r19
    b544:	dfc00717 	ldw	ra,28(sp)
    b548:	dd000617 	ldw	r20,24(sp)
    b54c:	dcc00517 	ldw	r19,20(sp)
    b550:	dc800417 	ldw	r18,16(sp)
    b554:	dc400317 	ldw	r17,12(sp)
    b558:	dc000217 	ldw	r16,8(sp)
    b55c:	dec00804 	addi	sp,sp,32
    b560:	f800283a 	ret
    b564:	d809883a 	mov	r4,sp
    b568:	000aab00 	call	aab0 <__lo0bits>
    b56c:	d8c00017 	ldw	r3,0(sp)
    b570:	04000044 	movi	r16,1
    b574:	9c000415 	stw	r16,16(r19)
    b578:	98c00515 	stw	r3,20(r19)
    b57c:	10800804 	addi	r2,r2,32
    b580:	883fe126 	beq	r17,zero,b508 <__alt_data_end+0xfffeb508>
    b584:	00c00d44 	movi	r3,53
    b588:	8c7ef344 	addi	r17,r17,-1075
    b58c:	88a3883a 	add	r17,r17,r2
    b590:	1885c83a 	sub	r2,r3,r2
    b594:	d8c00817 	ldw	r3,32(sp)
    b598:	94400015 	stw	r17,0(r18)
    b59c:	18800015 	stw	r2,0(r3)
    b5a0:	003fe706 	br	b540 <__alt_data_end+0xfffeb540>
    b5a4:	01000804 	movi	r4,32
    b5a8:	2089c83a 	sub	r4,r4,r2
    b5ac:	1908983a 	sll	r4,r3,r4
    b5b0:	d9400117 	ldw	r5,4(sp)
    b5b4:	1886d83a 	srl	r3,r3,r2
    b5b8:	2148b03a 	or	r4,r4,r5
    b5bc:	99000515 	stw	r4,20(r19)
    b5c0:	d8c00015 	stw	r3,0(sp)
    b5c4:	003fca06 	br	b4f0 <__alt_data_end+0xfffeb4f0>

0000b5c8 <__ratio>:
    b5c8:	defff904 	addi	sp,sp,-28
    b5cc:	dc400315 	stw	r17,12(sp)
    b5d0:	2823883a 	mov	r17,r5
    b5d4:	d9400104 	addi	r5,sp,4
    b5d8:	dfc00615 	stw	ra,24(sp)
    b5dc:	dcc00515 	stw	r19,20(sp)
    b5e0:	dc800415 	stw	r18,16(sp)
    b5e4:	2027883a 	mov	r19,r4
    b5e8:	dc000215 	stw	r16,8(sp)
    b5ec:	000b3700 	call	b370 <__b2d>
    b5f0:	d80b883a 	mov	r5,sp
    b5f4:	8809883a 	mov	r4,r17
    b5f8:	1025883a 	mov	r18,r2
    b5fc:	1821883a 	mov	r16,r3
    b600:	000b3700 	call	b370 <__b2d>
    b604:	8a000417 	ldw	r8,16(r17)
    b608:	99000417 	ldw	r4,16(r19)
    b60c:	d9400117 	ldw	r5,4(sp)
    b610:	2209c83a 	sub	r4,r4,r8
    b614:	2010917a 	slli	r8,r4,5
    b618:	d9000017 	ldw	r4,0(sp)
    b61c:	2909c83a 	sub	r4,r5,r4
    b620:	4109883a 	add	r4,r8,r4
    b624:	01000e0e 	bge	zero,r4,b660 <__ratio+0x98>
    b628:	2008953a 	slli	r4,r4,20
    b62c:	2421883a 	add	r16,r4,r16
    b630:	100d883a 	mov	r6,r2
    b634:	180f883a 	mov	r7,r3
    b638:	9009883a 	mov	r4,r18
    b63c:	800b883a 	mov	r5,r16
    b640:	000175c0 	call	175c <__divdf3>
    b644:	dfc00617 	ldw	ra,24(sp)
    b648:	dcc00517 	ldw	r19,20(sp)
    b64c:	dc800417 	ldw	r18,16(sp)
    b650:	dc400317 	ldw	r17,12(sp)
    b654:	dc000217 	ldw	r16,8(sp)
    b658:	dec00704 	addi	sp,sp,28
    b65c:	f800283a 	ret
    b660:	2008953a 	slli	r4,r4,20
    b664:	1907c83a 	sub	r3,r3,r4
    b668:	003ff106 	br	b630 <__alt_data_end+0xfffeb630>

0000b66c <_mprec_log10>:
    b66c:	defffe04 	addi	sp,sp,-8
    b670:	dc000015 	stw	r16,0(sp)
    b674:	dfc00115 	stw	ra,4(sp)
    b678:	008005c4 	movi	r2,23
    b67c:	2021883a 	mov	r16,r4
    b680:	11000d0e 	bge	r2,r4,b6b8 <_mprec_log10+0x4c>
    b684:	0005883a 	mov	r2,zero
    b688:	00cffc34 	movhi	r3,16368
    b68c:	843fffc4 	addi	r16,r16,-1
    b690:	000d883a 	mov	r6,zero
    b694:	01d00934 	movhi	r7,16420
    b698:	1009883a 	mov	r4,r2
    b69c:	180b883a 	mov	r5,r3
    b6a0:	00022080 	call	2208 <__muldf3>
    b6a4:	803ff91e 	bne	r16,zero,b68c <__alt_data_end+0xfffeb68c>
    b6a8:	dfc00117 	ldw	ra,4(sp)
    b6ac:	dc000017 	ldw	r16,0(sp)
    b6b0:	dec00204 	addi	sp,sp,8
    b6b4:	f800283a 	ret
    b6b8:	202090fa 	slli	r16,r4,3
    b6bc:	00800074 	movhi	r2,1
    b6c0:	1084c404 	addi	r2,r2,4880
    b6c4:	1421883a 	add	r16,r2,r16
    b6c8:	80800017 	ldw	r2,0(r16)
    b6cc:	80c00117 	ldw	r3,4(r16)
    b6d0:	dfc00117 	ldw	ra,4(sp)
    b6d4:	dc000017 	ldw	r16,0(sp)
    b6d8:	dec00204 	addi	sp,sp,8
    b6dc:	f800283a 	ret

0000b6e0 <__copybits>:
    b6e0:	297fffc4 	addi	r5,r5,-1
    b6e4:	280fd17a 	srai	r7,r5,5
    b6e8:	30c00417 	ldw	r3,16(r6)
    b6ec:	30800504 	addi	r2,r6,20
    b6f0:	39c00044 	addi	r7,r7,1
    b6f4:	18c7883a 	add	r3,r3,r3
    b6f8:	39cf883a 	add	r7,r7,r7
    b6fc:	18c7883a 	add	r3,r3,r3
    b700:	39cf883a 	add	r7,r7,r7
    b704:	10c7883a 	add	r3,r2,r3
    b708:	21cf883a 	add	r7,r4,r7
    b70c:	10c00d2e 	bgeu	r2,r3,b744 <__copybits+0x64>
    b710:	200b883a 	mov	r5,r4
    b714:	12000017 	ldw	r8,0(r2)
    b718:	29400104 	addi	r5,r5,4
    b71c:	10800104 	addi	r2,r2,4
    b720:	2a3fff15 	stw	r8,-4(r5)
    b724:	10fffb36 	bltu	r2,r3,b714 <__alt_data_end+0xfffeb714>
    b728:	1985c83a 	sub	r2,r3,r6
    b72c:	10bffac4 	addi	r2,r2,-21
    b730:	1004d0ba 	srli	r2,r2,2
    b734:	10800044 	addi	r2,r2,1
    b738:	1085883a 	add	r2,r2,r2
    b73c:	1085883a 	add	r2,r2,r2
    b740:	2089883a 	add	r4,r4,r2
    b744:	21c0032e 	bgeu	r4,r7,b754 <__copybits+0x74>
    b748:	20000015 	stw	zero,0(r4)
    b74c:	21000104 	addi	r4,r4,4
    b750:	21fffd36 	bltu	r4,r7,b748 <__alt_data_end+0xfffeb748>
    b754:	f800283a 	ret

0000b758 <__any_on>:
    b758:	20c00417 	ldw	r3,16(r4)
    b75c:	2805d17a 	srai	r2,r5,5
    b760:	21000504 	addi	r4,r4,20
    b764:	18800d0e 	bge	r3,r2,b79c <__any_on+0x44>
    b768:	18c7883a 	add	r3,r3,r3
    b76c:	18c7883a 	add	r3,r3,r3
    b770:	20c7883a 	add	r3,r4,r3
    b774:	20c0192e 	bgeu	r4,r3,b7dc <__any_on+0x84>
    b778:	18bfff17 	ldw	r2,-4(r3)
    b77c:	18ffff04 	addi	r3,r3,-4
    b780:	1000041e 	bne	r2,zero,b794 <__any_on+0x3c>
    b784:	20c0142e 	bgeu	r4,r3,b7d8 <__any_on+0x80>
    b788:	18ffff04 	addi	r3,r3,-4
    b78c:	19400017 	ldw	r5,0(r3)
    b790:	283ffc26 	beq	r5,zero,b784 <__alt_data_end+0xfffeb784>
    b794:	00800044 	movi	r2,1
    b798:	f800283a 	ret
    b79c:	10c00a0e 	bge	r2,r3,b7c8 <__any_on+0x70>
    b7a0:	1085883a 	add	r2,r2,r2
    b7a4:	1085883a 	add	r2,r2,r2
    b7a8:	294007cc 	andi	r5,r5,31
    b7ac:	2087883a 	add	r3,r4,r2
    b7b0:	283ff026 	beq	r5,zero,b774 <__alt_data_end+0xfffeb774>
    b7b4:	19800017 	ldw	r6,0(r3)
    b7b8:	3144d83a 	srl	r2,r6,r5
    b7bc:	114a983a 	sll	r5,r2,r5
    b7c0:	317ff41e 	bne	r6,r5,b794 <__alt_data_end+0xfffeb794>
    b7c4:	003feb06 	br	b774 <__alt_data_end+0xfffeb774>
    b7c8:	1085883a 	add	r2,r2,r2
    b7cc:	1085883a 	add	r2,r2,r2
    b7d0:	2087883a 	add	r3,r4,r2
    b7d4:	003fe706 	br	b774 <__alt_data_end+0xfffeb774>
    b7d8:	f800283a 	ret
    b7dc:	0005883a 	mov	r2,zero
    b7e0:	f800283a 	ret

0000b7e4 <_read_r>:
    b7e4:	defffd04 	addi	sp,sp,-12
    b7e8:	2805883a 	mov	r2,r5
    b7ec:	dc000015 	stw	r16,0(sp)
    b7f0:	04000074 	movhi	r16,1
    b7f4:	dc400115 	stw	r17,4(sp)
    b7f8:	300b883a 	mov	r5,r6
    b7fc:	84128104 	addi	r16,r16,18948
    b800:	2023883a 	mov	r17,r4
    b804:	380d883a 	mov	r6,r7
    b808:	1009883a 	mov	r4,r2
    b80c:	dfc00215 	stw	ra,8(sp)
    b810:	80000015 	stw	zero,0(r16)
    b814:	000f3500 	call	f350 <read>
    b818:	00ffffc4 	movi	r3,-1
    b81c:	10c00526 	beq	r2,r3,b834 <_read_r+0x50>
    b820:	dfc00217 	ldw	ra,8(sp)
    b824:	dc400117 	ldw	r17,4(sp)
    b828:	dc000017 	ldw	r16,0(sp)
    b82c:	dec00304 	addi	sp,sp,12
    b830:	f800283a 	ret
    b834:	80c00017 	ldw	r3,0(r16)
    b838:	183ff926 	beq	r3,zero,b820 <__alt_data_end+0xfffeb820>
    b83c:	88c00015 	stw	r3,0(r17)
    b840:	003ff706 	br	b820 <__alt_data_end+0xfffeb820>

0000b844 <_realloc_r>:
    b844:	defff604 	addi	sp,sp,-40
    b848:	dc800215 	stw	r18,8(sp)
    b84c:	dfc00915 	stw	ra,36(sp)
    b850:	df000815 	stw	fp,32(sp)
    b854:	ddc00715 	stw	r23,28(sp)
    b858:	dd800615 	stw	r22,24(sp)
    b85c:	dd400515 	stw	r21,20(sp)
    b860:	dd000415 	stw	r20,16(sp)
    b864:	dcc00315 	stw	r19,12(sp)
    b868:	dc400115 	stw	r17,4(sp)
    b86c:	dc000015 	stw	r16,0(sp)
    b870:	3025883a 	mov	r18,r6
    b874:	2800b726 	beq	r5,zero,bb54 <_realloc_r+0x310>
    b878:	282b883a 	mov	r21,r5
    b87c:	2029883a 	mov	r20,r4
    b880:	000f0480 	call	f048 <__malloc_lock>
    b884:	a8bfff17 	ldw	r2,-4(r21)
    b888:	043fff04 	movi	r16,-4
    b88c:	90c002c4 	addi	r3,r18,11
    b890:	01000584 	movi	r4,22
    b894:	acfffe04 	addi	r19,r21,-8
    b898:	1420703a 	and	r16,r2,r16
    b89c:	20c0332e 	bgeu	r4,r3,b96c <_realloc_r+0x128>
    b8a0:	047ffe04 	movi	r17,-8
    b8a4:	1c62703a 	and	r17,r3,r17
    b8a8:	8807883a 	mov	r3,r17
    b8ac:	88005816 	blt	r17,zero,ba10 <_realloc_r+0x1cc>
    b8b0:	8c805736 	bltu	r17,r18,ba10 <_realloc_r+0x1cc>
    b8b4:	80c0300e 	bge	r16,r3,b978 <_realloc_r+0x134>
    b8b8:	07000074 	movhi	fp,1
    b8bc:	e7061404 	addi	fp,fp,6224
    b8c0:	e1c00217 	ldw	r7,8(fp)
    b8c4:	9c09883a 	add	r4,r19,r16
    b8c8:	22000117 	ldw	r8,4(r4)
    b8cc:	21c06326 	beq	r4,r7,ba5c <_realloc_r+0x218>
    b8d0:	017fff84 	movi	r5,-2
    b8d4:	414a703a 	and	r5,r8,r5
    b8d8:	214b883a 	add	r5,r4,r5
    b8dc:	29800117 	ldw	r6,4(r5)
    b8e0:	3180004c 	andi	r6,r6,1
    b8e4:	30003f26 	beq	r6,zero,b9e4 <_realloc_r+0x1a0>
    b8e8:	1080004c 	andi	r2,r2,1
    b8ec:	10008326 	beq	r2,zero,bafc <_realloc_r+0x2b8>
    b8f0:	900b883a 	mov	r5,r18
    b8f4:	a009883a 	mov	r4,r20
    b8f8:	0004dc80 	call	4dc8 <_malloc_r>
    b8fc:	1025883a 	mov	r18,r2
    b900:	10011e26 	beq	r2,zero,bd7c <_realloc_r+0x538>
    b904:	a93fff17 	ldw	r4,-4(r21)
    b908:	10fffe04 	addi	r3,r2,-8
    b90c:	00bfff84 	movi	r2,-2
    b910:	2084703a 	and	r2,r4,r2
    b914:	9885883a 	add	r2,r19,r2
    b918:	1880ee26 	beq	r3,r2,bcd4 <_realloc_r+0x490>
    b91c:	81bfff04 	addi	r6,r16,-4
    b920:	00800904 	movi	r2,36
    b924:	1180b836 	bltu	r2,r6,bc08 <_realloc_r+0x3c4>
    b928:	00c004c4 	movi	r3,19
    b92c:	19809636 	bltu	r3,r6,bb88 <_realloc_r+0x344>
    b930:	9005883a 	mov	r2,r18
    b934:	a807883a 	mov	r3,r21
    b938:	19000017 	ldw	r4,0(r3)
    b93c:	11000015 	stw	r4,0(r2)
    b940:	19000117 	ldw	r4,4(r3)
    b944:	11000115 	stw	r4,4(r2)
    b948:	18c00217 	ldw	r3,8(r3)
    b94c:	10c00215 	stw	r3,8(r2)
    b950:	a80b883a 	mov	r5,r21
    b954:	a009883a 	mov	r4,r20
    b958:	00042980 	call	4298 <_free_r>
    b95c:	a009883a 	mov	r4,r20
    b960:	000f06c0 	call	f06c <__malloc_unlock>
    b964:	9005883a 	mov	r2,r18
    b968:	00001206 	br	b9b4 <_realloc_r+0x170>
    b96c:	00c00404 	movi	r3,16
    b970:	1823883a 	mov	r17,r3
    b974:	003fce06 	br	b8b0 <__alt_data_end+0xfffeb8b0>
    b978:	a825883a 	mov	r18,r21
    b97c:	8445c83a 	sub	r2,r16,r17
    b980:	00c003c4 	movi	r3,15
    b984:	18802636 	bltu	r3,r2,ba20 <_realloc_r+0x1dc>
    b988:	99800117 	ldw	r6,4(r19)
    b98c:	9c07883a 	add	r3,r19,r16
    b990:	3180004c 	andi	r6,r6,1
    b994:	3420b03a 	or	r16,r6,r16
    b998:	9c000115 	stw	r16,4(r19)
    b99c:	18800117 	ldw	r2,4(r3)
    b9a0:	10800054 	ori	r2,r2,1
    b9a4:	18800115 	stw	r2,4(r3)
    b9a8:	a009883a 	mov	r4,r20
    b9ac:	000f06c0 	call	f06c <__malloc_unlock>
    b9b0:	9005883a 	mov	r2,r18
    b9b4:	dfc00917 	ldw	ra,36(sp)
    b9b8:	df000817 	ldw	fp,32(sp)
    b9bc:	ddc00717 	ldw	r23,28(sp)
    b9c0:	dd800617 	ldw	r22,24(sp)
    b9c4:	dd400517 	ldw	r21,20(sp)
    b9c8:	dd000417 	ldw	r20,16(sp)
    b9cc:	dcc00317 	ldw	r19,12(sp)
    b9d0:	dc800217 	ldw	r18,8(sp)
    b9d4:	dc400117 	ldw	r17,4(sp)
    b9d8:	dc000017 	ldw	r16,0(sp)
    b9dc:	dec00a04 	addi	sp,sp,40
    b9e0:	f800283a 	ret
    b9e4:	017fff04 	movi	r5,-4
    b9e8:	414a703a 	and	r5,r8,r5
    b9ec:	814d883a 	add	r6,r16,r5
    b9f0:	30c01f16 	blt	r6,r3,ba70 <_realloc_r+0x22c>
    b9f4:	20800317 	ldw	r2,12(r4)
    b9f8:	20c00217 	ldw	r3,8(r4)
    b9fc:	a825883a 	mov	r18,r21
    ba00:	3021883a 	mov	r16,r6
    ba04:	18800315 	stw	r2,12(r3)
    ba08:	10c00215 	stw	r3,8(r2)
    ba0c:	003fdb06 	br	b97c <__alt_data_end+0xfffeb97c>
    ba10:	00800304 	movi	r2,12
    ba14:	a0800015 	stw	r2,0(r20)
    ba18:	0005883a 	mov	r2,zero
    ba1c:	003fe506 	br	b9b4 <__alt_data_end+0xfffeb9b4>
    ba20:	98c00117 	ldw	r3,4(r19)
    ba24:	9c4b883a 	add	r5,r19,r17
    ba28:	11000054 	ori	r4,r2,1
    ba2c:	18c0004c 	andi	r3,r3,1
    ba30:	1c62b03a 	or	r17,r3,r17
    ba34:	9c400115 	stw	r17,4(r19)
    ba38:	29000115 	stw	r4,4(r5)
    ba3c:	2885883a 	add	r2,r5,r2
    ba40:	10c00117 	ldw	r3,4(r2)
    ba44:	29400204 	addi	r5,r5,8
    ba48:	a009883a 	mov	r4,r20
    ba4c:	18c00054 	ori	r3,r3,1
    ba50:	10c00115 	stw	r3,4(r2)
    ba54:	00042980 	call	4298 <_free_r>
    ba58:	003fd306 	br	b9a8 <__alt_data_end+0xfffeb9a8>
    ba5c:	017fff04 	movi	r5,-4
    ba60:	414a703a 	and	r5,r8,r5
    ba64:	89800404 	addi	r6,r17,16
    ba68:	8151883a 	add	r8,r16,r5
    ba6c:	4180590e 	bge	r8,r6,bbd4 <_realloc_r+0x390>
    ba70:	1080004c 	andi	r2,r2,1
    ba74:	103f9e1e 	bne	r2,zero,b8f0 <__alt_data_end+0xfffeb8f0>
    ba78:	adbffe17 	ldw	r22,-8(r21)
    ba7c:	00bfff04 	movi	r2,-4
    ba80:	9dadc83a 	sub	r22,r19,r22
    ba84:	b1800117 	ldw	r6,4(r22)
    ba88:	3084703a 	and	r2,r6,r2
    ba8c:	20002026 	beq	r4,zero,bb10 <_realloc_r+0x2cc>
    ba90:	80af883a 	add	r23,r16,r2
    ba94:	b96f883a 	add	r23,r23,r5
    ba98:	21c05f26 	beq	r4,r7,bc18 <_realloc_r+0x3d4>
    ba9c:	b8c01c16 	blt	r23,r3,bb10 <_realloc_r+0x2cc>
    baa0:	20800317 	ldw	r2,12(r4)
    baa4:	20c00217 	ldw	r3,8(r4)
    baa8:	81bfff04 	addi	r6,r16,-4
    baac:	01000904 	movi	r4,36
    bab0:	18800315 	stw	r2,12(r3)
    bab4:	10c00215 	stw	r3,8(r2)
    bab8:	b0c00217 	ldw	r3,8(r22)
    babc:	b0800317 	ldw	r2,12(r22)
    bac0:	b4800204 	addi	r18,r22,8
    bac4:	18800315 	stw	r2,12(r3)
    bac8:	10c00215 	stw	r3,8(r2)
    bacc:	21801b36 	bltu	r4,r6,bb3c <_realloc_r+0x2f8>
    bad0:	008004c4 	movi	r2,19
    bad4:	1180352e 	bgeu	r2,r6,bbac <_realloc_r+0x368>
    bad8:	a8800017 	ldw	r2,0(r21)
    badc:	b0800215 	stw	r2,8(r22)
    bae0:	a8800117 	ldw	r2,4(r21)
    bae4:	b0800315 	stw	r2,12(r22)
    bae8:	008006c4 	movi	r2,27
    baec:	11807f36 	bltu	r2,r6,bcec <_realloc_r+0x4a8>
    baf0:	b0800404 	addi	r2,r22,16
    baf4:	ad400204 	addi	r21,r21,8
    baf8:	00002d06 	br	bbb0 <_realloc_r+0x36c>
    bafc:	adbffe17 	ldw	r22,-8(r21)
    bb00:	00bfff04 	movi	r2,-4
    bb04:	9dadc83a 	sub	r22,r19,r22
    bb08:	b1000117 	ldw	r4,4(r22)
    bb0c:	2084703a 	and	r2,r4,r2
    bb10:	b03f7726 	beq	r22,zero,b8f0 <__alt_data_end+0xfffeb8f0>
    bb14:	80af883a 	add	r23,r16,r2
    bb18:	b8ff7516 	blt	r23,r3,b8f0 <__alt_data_end+0xfffeb8f0>
    bb1c:	b0800317 	ldw	r2,12(r22)
    bb20:	b0c00217 	ldw	r3,8(r22)
    bb24:	81bfff04 	addi	r6,r16,-4
    bb28:	01000904 	movi	r4,36
    bb2c:	18800315 	stw	r2,12(r3)
    bb30:	10c00215 	stw	r3,8(r2)
    bb34:	b4800204 	addi	r18,r22,8
    bb38:	21bfe52e 	bgeu	r4,r6,bad0 <__alt_data_end+0xfffebad0>
    bb3c:	a80b883a 	mov	r5,r21
    bb40:	9009883a 	mov	r4,r18
    bb44:	000a5d00 	call	a5d0 <memmove>
    bb48:	b821883a 	mov	r16,r23
    bb4c:	b027883a 	mov	r19,r22
    bb50:	003f8a06 	br	b97c <__alt_data_end+0xfffeb97c>
    bb54:	300b883a 	mov	r5,r6
    bb58:	dfc00917 	ldw	ra,36(sp)
    bb5c:	df000817 	ldw	fp,32(sp)
    bb60:	ddc00717 	ldw	r23,28(sp)
    bb64:	dd800617 	ldw	r22,24(sp)
    bb68:	dd400517 	ldw	r21,20(sp)
    bb6c:	dd000417 	ldw	r20,16(sp)
    bb70:	dcc00317 	ldw	r19,12(sp)
    bb74:	dc800217 	ldw	r18,8(sp)
    bb78:	dc400117 	ldw	r17,4(sp)
    bb7c:	dc000017 	ldw	r16,0(sp)
    bb80:	dec00a04 	addi	sp,sp,40
    bb84:	0004dc81 	jmpi	4dc8 <_malloc_r>
    bb88:	a8c00017 	ldw	r3,0(r21)
    bb8c:	90c00015 	stw	r3,0(r18)
    bb90:	a8c00117 	ldw	r3,4(r21)
    bb94:	90c00115 	stw	r3,4(r18)
    bb98:	00c006c4 	movi	r3,27
    bb9c:	19804536 	bltu	r3,r6,bcb4 <_realloc_r+0x470>
    bba0:	90800204 	addi	r2,r18,8
    bba4:	a8c00204 	addi	r3,r21,8
    bba8:	003f6306 	br	b938 <__alt_data_end+0xfffeb938>
    bbac:	9005883a 	mov	r2,r18
    bbb0:	a8c00017 	ldw	r3,0(r21)
    bbb4:	b821883a 	mov	r16,r23
    bbb8:	b027883a 	mov	r19,r22
    bbbc:	10c00015 	stw	r3,0(r2)
    bbc0:	a8c00117 	ldw	r3,4(r21)
    bbc4:	10c00115 	stw	r3,4(r2)
    bbc8:	a8c00217 	ldw	r3,8(r21)
    bbcc:	10c00215 	stw	r3,8(r2)
    bbd0:	003f6a06 	br	b97c <__alt_data_end+0xfffeb97c>
    bbd4:	9c67883a 	add	r19,r19,r17
    bbd8:	4445c83a 	sub	r2,r8,r17
    bbdc:	e4c00215 	stw	r19,8(fp)
    bbe0:	10800054 	ori	r2,r2,1
    bbe4:	98800115 	stw	r2,4(r19)
    bbe8:	a8bfff17 	ldw	r2,-4(r21)
    bbec:	a009883a 	mov	r4,r20
    bbf0:	1080004c 	andi	r2,r2,1
    bbf4:	1462b03a 	or	r17,r2,r17
    bbf8:	ac7fff15 	stw	r17,-4(r21)
    bbfc:	000f06c0 	call	f06c <__malloc_unlock>
    bc00:	a805883a 	mov	r2,r21
    bc04:	003f6b06 	br	b9b4 <__alt_data_end+0xfffeb9b4>
    bc08:	a80b883a 	mov	r5,r21
    bc0c:	9009883a 	mov	r4,r18
    bc10:	000a5d00 	call	a5d0 <memmove>
    bc14:	003f4e06 	br	b950 <__alt_data_end+0xfffeb950>
    bc18:	89000404 	addi	r4,r17,16
    bc1c:	b93fbc16 	blt	r23,r4,bb10 <__alt_data_end+0xfffebb10>
    bc20:	b0800317 	ldw	r2,12(r22)
    bc24:	b0c00217 	ldw	r3,8(r22)
    bc28:	81bfff04 	addi	r6,r16,-4
    bc2c:	01000904 	movi	r4,36
    bc30:	18800315 	stw	r2,12(r3)
    bc34:	10c00215 	stw	r3,8(r2)
    bc38:	b4800204 	addi	r18,r22,8
    bc3c:	21804336 	bltu	r4,r6,bd4c <_realloc_r+0x508>
    bc40:	008004c4 	movi	r2,19
    bc44:	11803f2e 	bgeu	r2,r6,bd44 <_realloc_r+0x500>
    bc48:	a8800017 	ldw	r2,0(r21)
    bc4c:	b0800215 	stw	r2,8(r22)
    bc50:	a8800117 	ldw	r2,4(r21)
    bc54:	b0800315 	stw	r2,12(r22)
    bc58:	008006c4 	movi	r2,27
    bc5c:	11803f36 	bltu	r2,r6,bd5c <_realloc_r+0x518>
    bc60:	b0800404 	addi	r2,r22,16
    bc64:	ad400204 	addi	r21,r21,8
    bc68:	a8c00017 	ldw	r3,0(r21)
    bc6c:	10c00015 	stw	r3,0(r2)
    bc70:	a8c00117 	ldw	r3,4(r21)
    bc74:	10c00115 	stw	r3,4(r2)
    bc78:	a8c00217 	ldw	r3,8(r21)
    bc7c:	10c00215 	stw	r3,8(r2)
    bc80:	b447883a 	add	r3,r22,r17
    bc84:	bc45c83a 	sub	r2,r23,r17
    bc88:	e0c00215 	stw	r3,8(fp)
    bc8c:	10800054 	ori	r2,r2,1
    bc90:	18800115 	stw	r2,4(r3)
    bc94:	b0800117 	ldw	r2,4(r22)
    bc98:	a009883a 	mov	r4,r20
    bc9c:	1080004c 	andi	r2,r2,1
    bca0:	1462b03a 	or	r17,r2,r17
    bca4:	b4400115 	stw	r17,4(r22)
    bca8:	000f06c0 	call	f06c <__malloc_unlock>
    bcac:	9005883a 	mov	r2,r18
    bcb0:	003f4006 	br	b9b4 <__alt_data_end+0xfffeb9b4>
    bcb4:	a8c00217 	ldw	r3,8(r21)
    bcb8:	90c00215 	stw	r3,8(r18)
    bcbc:	a8c00317 	ldw	r3,12(r21)
    bcc0:	90c00315 	stw	r3,12(r18)
    bcc4:	30801126 	beq	r6,r2,bd0c <_realloc_r+0x4c8>
    bcc8:	90800404 	addi	r2,r18,16
    bccc:	a8c00404 	addi	r3,r21,16
    bcd0:	003f1906 	br	b938 <__alt_data_end+0xfffeb938>
    bcd4:	90ffff17 	ldw	r3,-4(r18)
    bcd8:	00bfff04 	movi	r2,-4
    bcdc:	a825883a 	mov	r18,r21
    bce0:	1884703a 	and	r2,r3,r2
    bce4:	80a1883a 	add	r16,r16,r2
    bce8:	003f2406 	br	b97c <__alt_data_end+0xfffeb97c>
    bcec:	a8800217 	ldw	r2,8(r21)
    bcf0:	b0800415 	stw	r2,16(r22)
    bcf4:	a8800317 	ldw	r2,12(r21)
    bcf8:	b0800515 	stw	r2,20(r22)
    bcfc:	31000a26 	beq	r6,r4,bd28 <_realloc_r+0x4e4>
    bd00:	b0800604 	addi	r2,r22,24
    bd04:	ad400404 	addi	r21,r21,16
    bd08:	003fa906 	br	bbb0 <__alt_data_end+0xfffebbb0>
    bd0c:	a9000417 	ldw	r4,16(r21)
    bd10:	90800604 	addi	r2,r18,24
    bd14:	a8c00604 	addi	r3,r21,24
    bd18:	91000415 	stw	r4,16(r18)
    bd1c:	a9000517 	ldw	r4,20(r21)
    bd20:	91000515 	stw	r4,20(r18)
    bd24:	003f0406 	br	b938 <__alt_data_end+0xfffeb938>
    bd28:	a8c00417 	ldw	r3,16(r21)
    bd2c:	ad400604 	addi	r21,r21,24
    bd30:	b0800804 	addi	r2,r22,32
    bd34:	b0c00615 	stw	r3,24(r22)
    bd38:	a8ffff17 	ldw	r3,-4(r21)
    bd3c:	b0c00715 	stw	r3,28(r22)
    bd40:	003f9b06 	br	bbb0 <__alt_data_end+0xfffebbb0>
    bd44:	9005883a 	mov	r2,r18
    bd48:	003fc706 	br	bc68 <__alt_data_end+0xfffebc68>
    bd4c:	a80b883a 	mov	r5,r21
    bd50:	9009883a 	mov	r4,r18
    bd54:	000a5d00 	call	a5d0 <memmove>
    bd58:	003fc906 	br	bc80 <__alt_data_end+0xfffebc80>
    bd5c:	a8800217 	ldw	r2,8(r21)
    bd60:	b0800415 	stw	r2,16(r22)
    bd64:	a8800317 	ldw	r2,12(r21)
    bd68:	b0800515 	stw	r2,20(r22)
    bd6c:	31000726 	beq	r6,r4,bd8c <_realloc_r+0x548>
    bd70:	b0800604 	addi	r2,r22,24
    bd74:	ad400404 	addi	r21,r21,16
    bd78:	003fbb06 	br	bc68 <__alt_data_end+0xfffebc68>
    bd7c:	a009883a 	mov	r4,r20
    bd80:	000f06c0 	call	f06c <__malloc_unlock>
    bd84:	0005883a 	mov	r2,zero
    bd88:	003f0a06 	br	b9b4 <__alt_data_end+0xfffeb9b4>
    bd8c:	a8c00417 	ldw	r3,16(r21)
    bd90:	ad400604 	addi	r21,r21,24
    bd94:	b0800804 	addi	r2,r22,32
    bd98:	b0c00615 	stw	r3,24(r22)
    bd9c:	a8ffff17 	ldw	r3,-4(r21)
    bda0:	b0c00715 	stw	r3,28(r22)
    bda4:	003fb006 	br	bc68 <__alt_data_end+0xfffebc68>

0000bda8 <__fpclassifyd>:
    bda8:	00a00034 	movhi	r2,32768
    bdac:	10bfffc4 	addi	r2,r2,-1
    bdb0:	2884703a 	and	r2,r5,r2
    bdb4:	10000726 	beq	r2,zero,bdd4 <__fpclassifyd+0x2c>
    bdb8:	00fffc34 	movhi	r3,65520
    bdbc:	019ff834 	movhi	r6,32736
    bdc0:	28c7883a 	add	r3,r5,r3
    bdc4:	31bfffc4 	addi	r6,r6,-1
    bdc8:	30c00536 	bltu	r6,r3,bde0 <__fpclassifyd+0x38>
    bdcc:	00800104 	movi	r2,4
    bdd0:	f800283a 	ret
    bdd4:	2000021e 	bne	r4,zero,bde0 <__fpclassifyd+0x38>
    bdd8:	00800084 	movi	r2,2
    bddc:	f800283a 	ret
    bde0:	00dffc34 	movhi	r3,32752
    bde4:	019ff834 	movhi	r6,32736
    bde8:	28cb883a 	add	r5,r5,r3
    bdec:	31bfffc4 	addi	r6,r6,-1
    bdf0:	317ff62e 	bgeu	r6,r5,bdcc <__alt_data_end+0xfffebdcc>
    bdf4:	01400434 	movhi	r5,16
    bdf8:	297fffc4 	addi	r5,r5,-1
    bdfc:	28800236 	bltu	r5,r2,be08 <__fpclassifyd+0x60>
    be00:	008000c4 	movi	r2,3
    be04:	f800283a 	ret
    be08:	10c00226 	beq	r2,r3,be14 <__fpclassifyd+0x6c>
    be0c:	0005883a 	mov	r2,zero
    be10:	f800283a 	ret
    be14:	2005003a 	cmpeq	r2,r4,zero
    be18:	f800283a 	ret

0000be1c <strcmp>:
    be1c:	2144b03a 	or	r2,r4,r5
    be20:	108000cc 	andi	r2,r2,3
    be24:	1000171e 	bne	r2,zero,be84 <strcmp+0x68>
    be28:	20800017 	ldw	r2,0(r4)
    be2c:	28c00017 	ldw	r3,0(r5)
    be30:	10c0141e 	bne	r2,r3,be84 <strcmp+0x68>
    be34:	027fbff4 	movhi	r9,65279
    be38:	4a7fbfc4 	addi	r9,r9,-257
    be3c:	0086303a 	nor	r3,zero,r2
    be40:	02202074 	movhi	r8,32897
    be44:	1245883a 	add	r2,r2,r9
    be48:	42202004 	addi	r8,r8,-32640
    be4c:	10c4703a 	and	r2,r2,r3
    be50:	1204703a 	and	r2,r2,r8
    be54:	10000226 	beq	r2,zero,be60 <strcmp+0x44>
    be58:	00002306 	br	bee8 <strcmp+0xcc>
    be5c:	1000221e 	bne	r2,zero,bee8 <strcmp+0xcc>
    be60:	21000104 	addi	r4,r4,4
    be64:	20c00017 	ldw	r3,0(r4)
    be68:	29400104 	addi	r5,r5,4
    be6c:	29800017 	ldw	r6,0(r5)
    be70:	1a4f883a 	add	r7,r3,r9
    be74:	00c4303a 	nor	r2,zero,r3
    be78:	3884703a 	and	r2,r7,r2
    be7c:	1204703a 	and	r2,r2,r8
    be80:	19bff626 	beq	r3,r6,be5c <__alt_data_end+0xfffebe5c>
    be84:	20800003 	ldbu	r2,0(r4)
    be88:	10c03fcc 	andi	r3,r2,255
    be8c:	18c0201c 	xori	r3,r3,128
    be90:	18ffe004 	addi	r3,r3,-128
    be94:	18000c26 	beq	r3,zero,bec8 <strcmp+0xac>
    be98:	29800007 	ldb	r6,0(r5)
    be9c:	19800326 	beq	r3,r6,beac <strcmp+0x90>
    bea0:	00001306 	br	bef0 <strcmp+0xd4>
    bea4:	29800007 	ldb	r6,0(r5)
    bea8:	11800b1e 	bne	r2,r6,bed8 <strcmp+0xbc>
    beac:	21000044 	addi	r4,r4,1
    beb0:	20c00003 	ldbu	r3,0(r4)
    beb4:	29400044 	addi	r5,r5,1
    beb8:	18803fcc 	andi	r2,r3,255
    bebc:	1080201c 	xori	r2,r2,128
    bec0:	10bfe004 	addi	r2,r2,-128
    bec4:	103ff71e 	bne	r2,zero,bea4 <__alt_data_end+0xfffebea4>
    bec8:	0007883a 	mov	r3,zero
    becc:	28800003 	ldbu	r2,0(r5)
    bed0:	1885c83a 	sub	r2,r3,r2
    bed4:	f800283a 	ret
    bed8:	28800003 	ldbu	r2,0(r5)
    bedc:	18c03fcc 	andi	r3,r3,255
    bee0:	1885c83a 	sub	r2,r3,r2
    bee4:	f800283a 	ret
    bee8:	0005883a 	mov	r2,zero
    beec:	f800283a 	ret
    bef0:	10c03fcc 	andi	r3,r2,255
    bef4:	003ff506 	br	becc <__alt_data_end+0xfffebecc>

0000bef8 <__sprint_r.part.0>:
    bef8:	28801917 	ldw	r2,100(r5)
    befc:	defff604 	addi	sp,sp,-40
    bf00:	dd400515 	stw	r21,20(sp)
    bf04:	dfc00915 	stw	ra,36(sp)
    bf08:	df000815 	stw	fp,32(sp)
    bf0c:	ddc00715 	stw	r23,28(sp)
    bf10:	dd800615 	stw	r22,24(sp)
    bf14:	dd000415 	stw	r20,16(sp)
    bf18:	dcc00315 	stw	r19,12(sp)
    bf1c:	dc800215 	stw	r18,8(sp)
    bf20:	dc400115 	stw	r17,4(sp)
    bf24:	dc000015 	stw	r16,0(sp)
    bf28:	1088000c 	andi	r2,r2,8192
    bf2c:	302b883a 	mov	r21,r6
    bf30:	10002e26 	beq	r2,zero,bfec <__sprint_r.part.0+0xf4>
    bf34:	30800217 	ldw	r2,8(r6)
    bf38:	35800017 	ldw	r22,0(r6)
    bf3c:	10002926 	beq	r2,zero,bfe4 <__sprint_r.part.0+0xec>
    bf40:	2827883a 	mov	r19,r5
    bf44:	2029883a 	mov	r20,r4
    bf48:	b5c00104 	addi	r23,r22,4
    bf4c:	04bfffc4 	movi	r18,-1
    bf50:	bc400017 	ldw	r17,0(r23)
    bf54:	b4000017 	ldw	r16,0(r22)
    bf58:	0039883a 	mov	fp,zero
    bf5c:	8822d0ba 	srli	r17,r17,2
    bf60:	8800031e 	bne	r17,zero,bf70 <__sprint_r.part.0+0x78>
    bf64:	00001806 	br	bfc8 <__sprint_r.part.0+0xd0>
    bf68:	84000104 	addi	r16,r16,4
    bf6c:	8f001526 	beq	r17,fp,bfc4 <__sprint_r.part.0+0xcc>
    bf70:	81400017 	ldw	r5,0(r16)
    bf74:	980d883a 	mov	r6,r19
    bf78:	a009883a 	mov	r4,r20
    bf7c:	000d8300 	call	d830 <_fputwc_r>
    bf80:	e7000044 	addi	fp,fp,1
    bf84:	14bff81e 	bne	r2,r18,bf68 <__alt_data_end+0xfffebf68>
    bf88:	9005883a 	mov	r2,r18
    bf8c:	a8000215 	stw	zero,8(r21)
    bf90:	a8000115 	stw	zero,4(r21)
    bf94:	dfc00917 	ldw	ra,36(sp)
    bf98:	df000817 	ldw	fp,32(sp)
    bf9c:	ddc00717 	ldw	r23,28(sp)
    bfa0:	dd800617 	ldw	r22,24(sp)
    bfa4:	dd400517 	ldw	r21,20(sp)
    bfa8:	dd000417 	ldw	r20,16(sp)
    bfac:	dcc00317 	ldw	r19,12(sp)
    bfb0:	dc800217 	ldw	r18,8(sp)
    bfb4:	dc400117 	ldw	r17,4(sp)
    bfb8:	dc000017 	ldw	r16,0(sp)
    bfbc:	dec00a04 	addi	sp,sp,40
    bfc0:	f800283a 	ret
    bfc4:	a8800217 	ldw	r2,8(r21)
    bfc8:	8c63883a 	add	r17,r17,r17
    bfcc:	8c63883a 	add	r17,r17,r17
    bfd0:	1445c83a 	sub	r2,r2,r17
    bfd4:	a8800215 	stw	r2,8(r21)
    bfd8:	b5800204 	addi	r22,r22,8
    bfdc:	bdc00204 	addi	r23,r23,8
    bfe0:	103fdb1e 	bne	r2,zero,bf50 <__alt_data_end+0xfffebf50>
    bfe4:	0005883a 	mov	r2,zero
    bfe8:	003fe806 	br	bf8c <__alt_data_end+0xfffebf8c>
    bfec:	0009e940 	call	9e94 <__sfvwrite_r>
    bff0:	003fe606 	br	bf8c <__alt_data_end+0xfffebf8c>

0000bff4 <__sprint_r>:
    bff4:	30c00217 	ldw	r3,8(r6)
    bff8:	18000126 	beq	r3,zero,c000 <__sprint_r+0xc>
    bffc:	000bef81 	jmpi	bef8 <__sprint_r.part.0>
    c000:	30000115 	stw	zero,4(r6)
    c004:	0005883a 	mov	r2,zero
    c008:	f800283a 	ret

0000c00c <___vfiprintf_internal_r>:
    c00c:	deffca04 	addi	sp,sp,-216
    c010:	dd403115 	stw	r21,196(sp)
    c014:	dfc03515 	stw	ra,212(sp)
    c018:	df003415 	stw	fp,208(sp)
    c01c:	ddc03315 	stw	r23,204(sp)
    c020:	dd803215 	stw	r22,200(sp)
    c024:	dd003015 	stw	r20,192(sp)
    c028:	dcc02f15 	stw	r19,188(sp)
    c02c:	dc802e15 	stw	r18,184(sp)
    c030:	dc402d15 	stw	r17,180(sp)
    c034:	dc002c15 	stw	r16,176(sp)
    c038:	d9002115 	stw	r4,132(sp)
    c03c:	d9402015 	stw	r5,128(sp)
    c040:	d9c02215 	stw	r7,136(sp)
    c044:	302b883a 	mov	r21,r6
    c048:	20000226 	beq	r4,zero,c054 <___vfiprintf_internal_r+0x48>
    c04c:	20800e17 	ldw	r2,56(r4)
    c050:	1000cf26 	beq	r2,zero,c390 <___vfiprintf_internal_r+0x384>
    c054:	d8c02017 	ldw	r3,128(sp)
    c058:	1880030b 	ldhu	r2,12(r3)
    c05c:	10c8000c 	andi	r3,r2,8192
    c060:	1800071e 	bne	r3,zero,c080 <___vfiprintf_internal_r+0x74>
    c064:	d9402017 	ldw	r5,128(sp)
    c068:	00f7ffc4 	movi	r3,-8193
    c06c:	10880014 	ori	r2,r2,8192
    c070:	29001917 	ldw	r4,100(r5)
    c074:	2880030d 	sth	r2,12(r5)
    c078:	20c6703a 	and	r3,r4,r3
    c07c:	28c01915 	stw	r3,100(r5)
    c080:	10c0020c 	andi	r3,r2,8
    c084:	1800a526 	beq	r3,zero,c31c <___vfiprintf_internal_r+0x310>
    c088:	d9002017 	ldw	r4,128(sp)
    c08c:	20c00417 	ldw	r3,16(r4)
    c090:	1800a226 	beq	r3,zero,c31c <___vfiprintf_internal_r+0x310>
    c094:	1080068c 	andi	r2,r2,26
    c098:	00c00284 	movi	r3,10
    c09c:	10c0a826 	beq	r2,r3,c340 <___vfiprintf_internal_r+0x334>
    c0a0:	d9001a04 	addi	r4,sp,104
    c0a4:	d94019c4 	addi	r5,sp,103
    c0a8:	04800074 	movhi	r18,1
    c0ac:	2145c83a 	sub	r2,r4,r5
    c0b0:	9484f604 	addi	r18,r18,5080
    c0b4:	d9001e15 	stw	r4,120(sp)
    c0b8:	d9401f15 	stw	r5,124(sp)
    c0bc:	dec01a15 	stw	sp,104(sp)
    c0c0:	d8001c15 	stw	zero,112(sp)
    c0c4:	d8001b15 	stw	zero,108(sp)
    c0c8:	d811883a 	mov	r8,sp
    c0cc:	d8002615 	stw	zero,152(sp)
    c0d0:	d8002415 	stw	zero,144(sp)
    c0d4:	d8802815 	stw	r2,160(sp)
    c0d8:	a82d883a 	mov	r22,r21
    c0dc:	b0800007 	ldb	r2,0(r22)
    c0e0:	10040d26 	beq	r2,zero,d118 <___vfiprintf_internal_r+0x110c>
    c0e4:	00c00944 	movi	r3,37
    c0e8:	b029883a 	mov	r20,r22
    c0ec:	10c0021e 	bne	r2,r3,c0f8 <___vfiprintf_internal_r+0xec>
    c0f0:	00001606 	br	c14c <___vfiprintf_internal_r+0x140>
    c0f4:	10c00326 	beq	r2,r3,c104 <___vfiprintf_internal_r+0xf8>
    c0f8:	a5000044 	addi	r20,r20,1
    c0fc:	a0800007 	ldb	r2,0(r20)
    c100:	103ffc1e 	bne	r2,zero,c0f4 <__alt_data_end+0xfffec0f4>
    c104:	a5a1c83a 	sub	r16,r20,r22
    c108:	80001026 	beq	r16,zero,c14c <___vfiprintf_internal_r+0x140>
    c10c:	d8c01c17 	ldw	r3,112(sp)
    c110:	d8801b17 	ldw	r2,108(sp)
    c114:	45800015 	stw	r22,0(r8)
    c118:	80c7883a 	add	r3,r16,r3
    c11c:	10800044 	addi	r2,r2,1
    c120:	44000115 	stw	r16,4(r8)
    c124:	d8c01c15 	stw	r3,112(sp)
    c128:	d8801b15 	stw	r2,108(sp)
    c12c:	010001c4 	movi	r4,7
    c130:	2080750e 	bge	r4,r2,c308 <___vfiprintf_internal_r+0x2fc>
    c134:	1803951e 	bne	r3,zero,cf8c <___vfiprintf_internal_r+0xf80>
    c138:	d8c02417 	ldw	r3,144(sp)
    c13c:	d8001b15 	stw	zero,108(sp)
    c140:	d811883a 	mov	r8,sp
    c144:	1c07883a 	add	r3,r3,r16
    c148:	d8c02415 	stw	r3,144(sp)
    c14c:	a0800007 	ldb	r2,0(r20)
    c150:	1002e026 	beq	r2,zero,ccd4 <___vfiprintf_internal_r+0xcc8>
    c154:	a5800044 	addi	r22,r20,1
    c158:	a0c00047 	ldb	r3,1(r20)
    c15c:	d8001d85 	stb	zero,118(sp)
    c160:	0027883a 	mov	r19,zero
    c164:	d8002305 	stb	zero,140(sp)
    c168:	043fffc4 	movi	r16,-1
    c16c:	d8002515 	stw	zero,148(sp)
    c170:	0023883a 	mov	r17,zero
    c174:	05001604 	movi	r20,88
    c178:	05400244 	movi	r21,9
    c17c:	402f883a 	mov	r23,r8
    c180:	b5800044 	addi	r22,r22,1
    c184:	18bff804 	addi	r2,r3,-32
    c188:	a0827736 	bltu	r20,r2,cb68 <___vfiprintf_internal_r+0xb5c>
    c18c:	100490ba 	slli	r2,r2,2
    c190:	01000074 	movhi	r4,1
    c194:	21306904 	addi	r4,r4,-15964
    c198:	1105883a 	add	r2,r2,r4
    c19c:	10800017 	ldw	r2,0(r2)
    c1a0:	1000683a 	jmp	r2
    c1a4:	0000c868 	cmpgeui	zero,zero,801
    c1a8:	0000cb68 	cmpgeui	zero,zero,813
    c1ac:	0000cb68 	cmpgeui	zero,zero,813
    c1b0:	0000c884 	movi	zero,802
    c1b4:	0000cb68 	cmpgeui	zero,zero,813
    c1b8:	0000cb68 	cmpgeui	zero,zero,813
    c1bc:	0000cb68 	cmpgeui	zero,zero,813
    c1c0:	0000cb68 	cmpgeui	zero,zero,813
    c1c4:	0000cb68 	cmpgeui	zero,zero,813
    c1c8:	0000cb68 	cmpgeui	zero,zero,813
    c1cc:	0000ca8c 	andi	zero,zero,810
    c1d0:	0000cab0 	cmpltui	zero,zero,810
    c1d4:	0000cb68 	cmpgeui	zero,zero,813
    c1d8:	0000c3a8 	cmpgeui	zero,zero,782
    c1dc:	0000cac4 	movi	zero,811
    c1e0:	0000cb68 	cmpgeui	zero,zero,813
    c1e4:	0000c890 	cmplti	zero,zero,802
    c1e8:	0000c89c 	xori	zero,zero,802
    c1ec:	0000c89c 	xori	zero,zero,802
    c1f0:	0000c89c 	xori	zero,zero,802
    c1f4:	0000c89c 	xori	zero,zero,802
    c1f8:	0000c89c 	xori	zero,zero,802
    c1fc:	0000c89c 	xori	zero,zero,802
    c200:	0000c89c 	xori	zero,zero,802
    c204:	0000c89c 	xori	zero,zero,802
    c208:	0000c89c 	xori	zero,zero,802
    c20c:	0000cb68 	cmpgeui	zero,zero,813
    c210:	0000cb68 	cmpgeui	zero,zero,813
    c214:	0000cb68 	cmpgeui	zero,zero,813
    c218:	0000cb68 	cmpgeui	zero,zero,813
    c21c:	0000cb68 	cmpgeui	zero,zero,813
    c220:	0000cb68 	cmpgeui	zero,zero,813
    c224:	0000cb68 	cmpgeui	zero,zero,813
    c228:	0000cb68 	cmpgeui	zero,zero,813
    c22c:	0000cb68 	cmpgeui	zero,zero,813
    c230:	0000cb68 	cmpgeui	zero,zero,813
    c234:	0000c8dc 	xori	zero,zero,803
    c238:	0000cb68 	cmpgeui	zero,zero,813
    c23c:	0000cb68 	cmpgeui	zero,zero,813
    c240:	0000cb68 	cmpgeui	zero,zero,813
    c244:	0000cb68 	cmpgeui	zero,zero,813
    c248:	0000cb68 	cmpgeui	zero,zero,813
    c24c:	0000cb68 	cmpgeui	zero,zero,813
    c250:	0000cb68 	cmpgeui	zero,zero,813
    c254:	0000cb68 	cmpgeui	zero,zero,813
    c258:	0000cb68 	cmpgeui	zero,zero,813
    c25c:	0000cb68 	cmpgeui	zero,zero,813
    c260:	0000c918 	cmpnei	zero,zero,804
    c264:	0000cb68 	cmpgeui	zero,zero,813
    c268:	0000cb68 	cmpgeui	zero,zero,813
    c26c:	0000cb68 	cmpgeui	zero,zero,813
    c270:	0000cb68 	cmpgeui	zero,zero,813
    c274:	0000cb68 	cmpgeui	zero,zero,813
    c278:	0000c974 	movhi	zero,805
    c27c:	0000cb68 	cmpgeui	zero,zero,813
    c280:	0000cb68 	cmpgeui	zero,zero,813
    c284:	0000c9e8 	cmpgeui	zero,zero,807
    c288:	0000cb68 	cmpgeui	zero,zero,813
    c28c:	0000cb68 	cmpgeui	zero,zero,813
    c290:	0000cb68 	cmpgeui	zero,zero,813
    c294:	0000cb68 	cmpgeui	zero,zero,813
    c298:	0000cb68 	cmpgeui	zero,zero,813
    c29c:	0000cb68 	cmpgeui	zero,zero,813
    c2a0:	0000cb68 	cmpgeui	zero,zero,813
    c2a4:	0000cb68 	cmpgeui	zero,zero,813
    c2a8:	0000cb68 	cmpgeui	zero,zero,813
    c2ac:	0000cb68 	cmpgeui	zero,zero,813
    c2b0:	0000c790 	cmplti	zero,zero,798
    c2b4:	0000c7c0 	call	c7c <readLabelFileHeader+0x70>
    c2b8:	0000cb68 	cmpgeui	zero,zero,813
    c2bc:	0000cb68 	cmpgeui	zero,zero,813
    c2c0:	0000cb68 	cmpgeui	zero,zero,813
    c2c4:	0000cb10 	cmplti	zero,zero,812
    c2c8:	0000c7c0 	call	c7c <readLabelFileHeader+0x70>
    c2cc:	0000cb68 	cmpgeui	zero,zero,813
    c2d0:	0000cb68 	cmpgeui	zero,zero,813
    c2d4:	0000c668 	cmpgeui	zero,zero,793
    c2d8:	0000cb68 	cmpgeui	zero,zero,813
    c2dc:	0000c67c 	xorhi	zero,zero,793
    c2e0:	0000c6b4 	movhi	zero,794
    c2e4:	0000c3b4 	movhi	zero,782
    c2e8:	0000c65c 	xori	zero,zero,793
    c2ec:	0000cb68 	cmpgeui	zero,zero,813
    c2f0:	0000ca28 	cmpgeui	zero,zero,808
    c2f4:	0000cb68 	cmpgeui	zero,zero,813
    c2f8:	0000ca74 	movhi	zero,809
    c2fc:	0000cb68 	cmpgeui	zero,zero,813
    c300:	0000cb68 	cmpgeui	zero,zero,813
    c304:	0000c738 	rdprs	zero,zero,796
    c308:	42000204 	addi	r8,r8,8
    c30c:	d8c02417 	ldw	r3,144(sp)
    c310:	1c07883a 	add	r3,r3,r16
    c314:	d8c02415 	stw	r3,144(sp)
    c318:	003f8c06 	br	c14c <__alt_data_end+0xfffec14c>
    c31c:	d9402017 	ldw	r5,128(sp)
    c320:	d9002117 	ldw	r4,132(sp)
    c324:	00082100 	call	8210 <__swsetup_r>
    c328:	1003c11e 	bne	r2,zero,d230 <___vfiprintf_internal_r+0x1224>
    c32c:	d9402017 	ldw	r5,128(sp)
    c330:	00c00284 	movi	r3,10
    c334:	2880030b 	ldhu	r2,12(r5)
    c338:	1080068c 	andi	r2,r2,26
    c33c:	10ff581e 	bne	r2,r3,c0a0 <__alt_data_end+0xfffec0a0>
    c340:	d8c02017 	ldw	r3,128(sp)
    c344:	1880038f 	ldh	r2,14(r3)
    c348:	103f5516 	blt	r2,zero,c0a0 <__alt_data_end+0xfffec0a0>
    c34c:	d9c02217 	ldw	r7,136(sp)
    c350:	d9002117 	ldw	r4,132(sp)
    c354:	a80d883a 	mov	r6,r21
    c358:	180b883a 	mov	r5,r3
    c35c:	000d5340 	call	d534 <__sbprintf>
    c360:	dfc03517 	ldw	ra,212(sp)
    c364:	df003417 	ldw	fp,208(sp)
    c368:	ddc03317 	ldw	r23,204(sp)
    c36c:	dd803217 	ldw	r22,200(sp)
    c370:	dd403117 	ldw	r21,196(sp)
    c374:	dd003017 	ldw	r20,192(sp)
    c378:	dcc02f17 	ldw	r19,188(sp)
    c37c:	dc802e17 	ldw	r18,184(sp)
    c380:	dc402d17 	ldw	r17,180(sp)
    c384:	dc002c17 	ldw	r16,176(sp)
    c388:	dec03604 	addi	sp,sp,216
    c38c:	f800283a 	ret
    c390:	0003da80 	call	3da8 <__sinit>
    c394:	003f2f06 	br	c054 <__alt_data_end+0xfffec054>
    c398:	d8c02517 	ldw	r3,148(sp)
    c39c:	d8802215 	stw	r2,136(sp)
    c3a0:	00c7c83a 	sub	r3,zero,r3
    c3a4:	d8c02515 	stw	r3,148(sp)
    c3a8:	8c400114 	ori	r17,r17,4
    c3ac:	b0c00007 	ldb	r3,0(r22)
    c3b0:	003f7306 	br	c180 <__alt_data_end+0xfffec180>
    c3b4:	00800c04 	movi	r2,48
    c3b8:	d9402217 	ldw	r5,136(sp)
    c3bc:	d8801d05 	stb	r2,116(sp)
    c3c0:	00801e04 	movi	r2,120
    c3c4:	d8801d45 	stb	r2,117(sp)
    c3c8:	d8001d85 	stb	zero,118(sp)
    c3cc:	b811883a 	mov	r8,r23
    c3d0:	28c00104 	addi	r3,r5,4
    c3d4:	2cc00017 	ldw	r19,0(r5)
    c3d8:	0029883a 	mov	r20,zero
    c3dc:	88800094 	ori	r2,r17,2
    c3e0:	80032516 	blt	r16,zero,d078 <___vfiprintf_internal_r+0x106c>
    c3e4:	00bfdfc4 	movi	r2,-129
    c3e8:	88a2703a 	and	r17,r17,r2
    c3ec:	d8c02215 	stw	r3,136(sp)
    c3f0:	8c400094 	ori	r17,r17,2
    c3f4:	98032a1e 	bne	r19,zero,d0a0 <___vfiprintf_internal_r+0x1094>
    c3f8:	00800074 	movhi	r2,1
    c3fc:	10849604 	addi	r2,r2,4696
    c400:	d8802615 	stw	r2,152(sp)
    c404:	002b883a 	mov	r21,zero
    c408:	8001741e 	bne	r16,zero,c9dc <___vfiprintf_internal_r+0x9d0>
    c40c:	0021883a 	mov	r16,zero
    c410:	0029883a 	mov	r20,zero
    c414:	ddc01a04 	addi	r23,sp,104
    c418:	8027883a 	mov	r19,r16
    c41c:	8500010e 	bge	r16,r20,c424 <___vfiprintf_internal_r+0x418>
    c420:	a027883a 	mov	r19,r20
    c424:	ad403fcc 	andi	r21,r21,255
    c428:	ad40201c 	xori	r21,r21,128
    c42c:	ad7fe004 	addi	r21,r21,-128
    c430:	a8000126 	beq	r21,zero,c438 <___vfiprintf_internal_r+0x42c>
    c434:	9cc00044 	addi	r19,r19,1
    c438:	89c0008c 	andi	r7,r17,2
    c43c:	38000126 	beq	r7,zero,c444 <___vfiprintf_internal_r+0x438>
    c440:	9cc00084 	addi	r19,r19,2
    c444:	88c0210c 	andi	r3,r17,132
    c448:	1801dd1e 	bne	r3,zero,cbc0 <___vfiprintf_internal_r+0xbb4>
    c44c:	d9402517 	ldw	r5,148(sp)
    c450:	2cebc83a 	sub	r21,r5,r19
    c454:	0541da0e 	bge	zero,r21,cbc0 <___vfiprintf_internal_r+0xbb4>
    c458:	07000404 	movi	fp,16
    c45c:	d8801c17 	ldw	r2,112(sp)
    c460:	e543be0e 	bge	fp,r21,d35c <___vfiprintf_internal_r+0x1350>
    c464:	01400074 	movhi	r5,1
    c468:	2944fa04 	addi	r5,r5,5096
    c46c:	dc002715 	stw	r16,156(sp)
    c470:	d9801b17 	ldw	r6,108(sp)
    c474:	a821883a 	mov	r16,r21
    c478:	d9402315 	stw	r5,140(sp)
    c47c:	028001c4 	movi	r10,7
    c480:	d9c02915 	stw	r7,164(sp)
    c484:	182b883a 	mov	r21,r3
    c488:	00000506 	br	c4a0 <___vfiprintf_internal_r+0x494>
    c48c:	31000084 	addi	r4,r6,2
    c490:	42000204 	addi	r8,r8,8
    c494:	180d883a 	mov	r6,r3
    c498:	843ffc04 	addi	r16,r16,-16
    c49c:	e4000f0e 	bge	fp,r16,c4dc <___vfiprintf_internal_r+0x4d0>
    c4a0:	01000074 	movhi	r4,1
    c4a4:	10800404 	addi	r2,r2,16
    c4a8:	30c00044 	addi	r3,r6,1
    c4ac:	2104fa04 	addi	r4,r4,5096
    c4b0:	41000015 	stw	r4,0(r8)
    c4b4:	47000115 	stw	fp,4(r8)
    c4b8:	d8801c15 	stw	r2,112(sp)
    c4bc:	d8c01b15 	stw	r3,108(sp)
    c4c0:	50fff20e 	bge	r10,r3,c48c <__alt_data_end+0xfffec48c>
    c4c4:	1001b21e 	bne	r2,zero,cb90 <___vfiprintf_internal_r+0xb84>
    c4c8:	843ffc04 	addi	r16,r16,-16
    c4cc:	000d883a 	mov	r6,zero
    c4d0:	01000044 	movi	r4,1
    c4d4:	d811883a 	mov	r8,sp
    c4d8:	e43ff116 	blt	fp,r16,c4a0 <__alt_data_end+0xfffec4a0>
    c4dc:	a807883a 	mov	r3,r21
    c4e0:	d9c02917 	ldw	r7,164(sp)
    c4e4:	802b883a 	mov	r21,r16
    c4e8:	dc002717 	ldw	r16,156(sp)
    c4ec:	d9402317 	ldw	r5,140(sp)
    c4f0:	a885883a 	add	r2,r21,r2
    c4f4:	45400115 	stw	r21,4(r8)
    c4f8:	41400015 	stw	r5,0(r8)
    c4fc:	d8801c15 	stw	r2,112(sp)
    c500:	d9001b15 	stw	r4,108(sp)
    c504:	014001c4 	movi	r5,7
    c508:	29026216 	blt	r5,r4,ce94 <___vfiprintf_internal_r+0xe88>
    c50c:	d9801d87 	ldb	r6,118(sp)
    c510:	42000204 	addi	r8,r8,8
    c514:	21400044 	addi	r5,r4,1
    c518:	3001ae1e 	bne	r6,zero,cbd4 <___vfiprintf_internal_r+0xbc8>
    c51c:	3801bb26 	beq	r7,zero,cc0c <___vfiprintf_internal_r+0xc00>
    c520:	d9001d04 	addi	r4,sp,116
    c524:	10800084 	addi	r2,r2,2
    c528:	41000015 	stw	r4,0(r8)
    c52c:	01000084 	movi	r4,2
    c530:	41000115 	stw	r4,4(r8)
    c534:	d8801c15 	stw	r2,112(sp)
    c538:	d9401b15 	stw	r5,108(sp)
    c53c:	010001c4 	movi	r4,7
    c540:	2142680e 	bge	r4,r5,cee4 <___vfiprintf_internal_r+0xed8>
    c544:	1002b11e 	bne	r2,zero,d00c <___vfiprintf_internal_r+0x1000>
    c548:	01802004 	movi	r6,128
    c54c:	01400044 	movi	r5,1
    c550:	0009883a 	mov	r4,zero
    c554:	d811883a 	mov	r8,sp
    c558:	1981ae1e 	bne	r3,r6,cc14 <___vfiprintf_internal_r+0xc08>
    c55c:	d8c02517 	ldw	r3,148(sp)
    c560:	1cf9c83a 	sub	fp,r3,r19
    c564:	0701ab0e 	bge	zero,fp,cc14 <___vfiprintf_internal_r+0xc08>
    c568:	05400404 	movi	r21,16
    c56c:	af03a90e 	bge	r21,fp,d414 <___vfiprintf_internal_r+0x1408>
    c570:	01400074 	movhi	r5,1
    c574:	2944f604 	addi	r5,r5,5080
    c578:	d9402315 	stw	r5,140(sp)
    c57c:	01c001c4 	movi	r7,7
    c580:	00000506 	br	c598 <___vfiprintf_internal_r+0x58c>
    c584:	21800084 	addi	r6,r4,2
    c588:	42000204 	addi	r8,r8,8
    c58c:	1809883a 	mov	r4,r3
    c590:	e73ffc04 	addi	fp,fp,-16
    c594:	af000d0e 	bge	r21,fp,c5cc <___vfiprintf_internal_r+0x5c0>
    c598:	10800404 	addi	r2,r2,16
    c59c:	20c00044 	addi	r3,r4,1
    c5a0:	44800015 	stw	r18,0(r8)
    c5a4:	45400115 	stw	r21,4(r8)
    c5a8:	d8801c15 	stw	r2,112(sp)
    c5ac:	d8c01b15 	stw	r3,108(sp)
    c5b0:	38fff40e 	bge	r7,r3,c584 <__alt_data_end+0xfffec584>
    c5b4:	10022b1e 	bne	r2,zero,ce64 <___vfiprintf_internal_r+0xe58>
    c5b8:	e73ffc04 	addi	fp,fp,-16
    c5bc:	01800044 	movi	r6,1
    c5c0:	0009883a 	mov	r4,zero
    c5c4:	d811883a 	mov	r8,sp
    c5c8:	af3ff316 	blt	r21,fp,c598 <__alt_data_end+0xfffec598>
    c5cc:	d8c02317 	ldw	r3,140(sp)
    c5d0:	1705883a 	add	r2,r2,fp
    c5d4:	47000115 	stw	fp,4(r8)
    c5d8:	40c00015 	stw	r3,0(r8)
    c5dc:	d8801c15 	stw	r2,112(sp)
    c5e0:	d9801b15 	stw	r6,108(sp)
    c5e4:	00c001c4 	movi	r3,7
    c5e8:	19829416 	blt	r3,r6,d03c <___vfiprintf_internal_r+0x1030>
    c5ec:	8521c83a 	sub	r16,r16,r20
    c5f0:	42000204 	addi	r8,r8,8
    c5f4:	31400044 	addi	r5,r6,1
    c5f8:	3009883a 	mov	r4,r6
    c5fc:	04018716 	blt	zero,r16,cc1c <___vfiprintf_internal_r+0xc10>
    c600:	a085883a 	add	r2,r20,r2
    c604:	45c00015 	stw	r23,0(r8)
    c608:	45000115 	stw	r20,4(r8)
    c60c:	d8801c15 	stw	r2,112(sp)
    c610:	d9401b15 	stw	r5,108(sp)
    c614:	00c001c4 	movi	r3,7
    c618:	1941c20e 	bge	r3,r5,cd24 <___vfiprintf_internal_r+0xd18>
    c61c:	1002531e 	bne	r2,zero,cf6c <___vfiprintf_internal_r+0xf60>
    c620:	d8001b15 	stw	zero,108(sp)
    c624:	8c40010c 	andi	r17,r17,4
    c628:	88023226 	beq	r17,zero,cef4 <___vfiprintf_internal_r+0xee8>
    c62c:	d9002517 	ldw	r4,148(sp)
    c630:	24e3c83a 	sub	r17,r4,r19
    c634:	04432916 	blt	zero,r17,d2dc <___vfiprintf_internal_r+0x12d0>
    c638:	d8802517 	ldw	r2,148(sp)
    c63c:	14c0010e 	bge	r2,r19,c644 <___vfiprintf_internal_r+0x638>
    c640:	9805883a 	mov	r2,r19
    c644:	d8c02417 	ldw	r3,144(sp)
    c648:	1887883a 	add	r3,r3,r2
    c64c:	d8c02415 	stw	r3,144(sp)
    c650:	d8001b15 	stw	zero,108(sp)
    c654:	d811883a 	mov	r8,sp
    c658:	003ea006 	br	c0dc <__alt_data_end+0xfffec0dc>
    c65c:	8c400814 	ori	r17,r17,32
    c660:	b0c00007 	ldb	r3,0(r22)
    c664:	003ec606 	br	c180 <__alt_data_end+0xfffec180>
    c668:	b0c00007 	ldb	r3,0(r22)
    c66c:	00801b04 	movi	r2,108
    c670:	18832026 	beq	r3,r2,d2f4 <___vfiprintf_internal_r+0x12e8>
    c674:	8c400414 	ori	r17,r17,16
    c678:	003ec106 	br	c180 <__alt_data_end+0xfffec180>
    c67c:	9cc03fcc 	andi	r19,r19,255
    c680:	b811883a 	mov	r8,r23
    c684:	9803981e 	bne	r19,zero,d4e8 <___vfiprintf_internal_r+0x14dc>
    c688:	8880080c 	andi	r2,r17,32
    c68c:	1002be26 	beq	r2,zero,d188 <___vfiprintf_internal_r+0x117c>
    c690:	d9002217 	ldw	r4,136(sp)
    c694:	d9402417 	ldw	r5,144(sp)
    c698:	20800017 	ldw	r2,0(r4)
    c69c:	2807d7fa 	srai	r3,r5,31
    c6a0:	21000104 	addi	r4,r4,4
    c6a4:	d9002215 	stw	r4,136(sp)
    c6a8:	11400015 	stw	r5,0(r2)
    c6ac:	10c00115 	stw	r3,4(r2)
    c6b0:	003e8a06 	br	c0dc <__alt_data_end+0xfffec0dc>
    c6b4:	9cc03fcc 	andi	r19,r19,255
    c6b8:	b811883a 	mov	r8,r23
    c6bc:	9803871e 	bne	r19,zero,d4dc <___vfiprintf_internal_r+0x14d0>
    c6c0:	8880080c 	andi	r2,r17,32
    c6c4:	10009a26 	beq	r2,zero,c930 <___vfiprintf_internal_r+0x924>
    c6c8:	d9002217 	ldw	r4,136(sp)
    c6cc:	d8001d85 	stb	zero,118(sp)
    c6d0:	20800204 	addi	r2,r4,8
    c6d4:	24c00017 	ldw	r19,0(r4)
    c6d8:	25000117 	ldw	r20,4(r4)
    c6dc:	8002a416 	blt	r16,zero,d170 <___vfiprintf_internal_r+0x1164>
    c6e0:	013fdfc4 	movi	r4,-129
    c6e4:	9d06b03a 	or	r3,r19,r20
    c6e8:	d8802215 	stw	r2,136(sp)
    c6ec:	8922703a 	and	r17,r17,r4
    c6f0:	18009b26 	beq	r3,zero,c960 <___vfiprintf_internal_r+0x954>
    c6f4:	002b883a 	mov	r21,zero
    c6f8:	ddc01a04 	addi	r23,sp,104
    c6fc:	9806d0fa 	srli	r3,r19,3
    c700:	a008977a 	slli	r4,r20,29
    c704:	a028d0fa 	srli	r20,r20,3
    c708:	9cc001cc 	andi	r19,r19,7
    c70c:	98800c04 	addi	r2,r19,48
    c710:	bdffffc4 	addi	r23,r23,-1
    c714:	20e6b03a 	or	r19,r4,r3
    c718:	b8800005 	stb	r2,0(r23)
    c71c:	9d06b03a 	or	r3,r19,r20
    c720:	183ff61e 	bne	r3,zero,c6fc <__alt_data_end+0xfffec6fc>
    c724:	88c0004c 	andi	r3,r17,1
    c728:	18021f1e 	bne	r3,zero,cfa8 <___vfiprintf_internal_r+0xf9c>
    c72c:	d9401e17 	ldw	r5,120(sp)
    c730:	2de9c83a 	sub	r20,r5,r23
    c734:	003f3806 	br	c418 <__alt_data_end+0xfffec418>
    c738:	9cc03fcc 	andi	r19,r19,255
    c73c:	b811883a 	mov	r8,r23
    c740:	98034f1e 	bne	r19,zero,d480 <___vfiprintf_internal_r+0x1474>
    c744:	00800074 	movhi	r2,1
    c748:	10849604 	addi	r2,r2,4696
    c74c:	d8802615 	stw	r2,152(sp)
    c750:	8880080c 	andi	r2,r17,32
    c754:	1000ac26 	beq	r2,zero,ca08 <___vfiprintf_internal_r+0x9fc>
    c758:	d9002217 	ldw	r4,136(sp)
    c75c:	24c00017 	ldw	r19,0(r4)
    c760:	25000117 	ldw	r20,4(r4)
    c764:	21000204 	addi	r4,r4,8
    c768:	d9002215 	stw	r4,136(sp)
    c76c:	8880004c 	andi	r2,r17,1
    c770:	1001e726 	beq	r2,zero,cf10 <___vfiprintf_internal_r+0xf04>
    c774:	9d04b03a 	or	r2,r19,r20
    c778:	10025c1e 	bne	r2,zero,d0ec <___vfiprintf_internal_r+0x10e0>
    c77c:	d8001d85 	stb	zero,118(sp)
    c780:	80024416 	blt	r16,zero,d094 <___vfiprintf_internal_r+0x1088>
    c784:	00bfdfc4 	movi	r2,-129
    c788:	88a2703a 	and	r17,r17,r2
    c78c:	003f1d06 	br	c404 <__alt_data_end+0xfffec404>
    c790:	d8c02217 	ldw	r3,136(sp)
    c794:	04c00044 	movi	r19,1
    c798:	b811883a 	mov	r8,r23
    c79c:	18800017 	ldw	r2,0(r3)
    c7a0:	18c00104 	addi	r3,r3,4
    c7a4:	d8001d85 	stb	zero,118(sp)
    c7a8:	d8801005 	stb	r2,64(sp)
    c7ac:	d8c02215 	stw	r3,136(sp)
    c7b0:	9829883a 	mov	r20,r19
    c7b4:	ddc01004 	addi	r23,sp,64
    c7b8:	0021883a 	mov	r16,zero
    c7bc:	003f1e06 	br	c438 <__alt_data_end+0xfffec438>
    c7c0:	9cc03fcc 	andi	r19,r19,255
    c7c4:	b811883a 	mov	r8,r23
    c7c8:	9803331e 	bne	r19,zero,d498 <___vfiprintf_internal_r+0x148c>
    c7cc:	8880080c 	andi	r2,r17,32
    c7d0:	10004826 	beq	r2,zero,c8f4 <___vfiprintf_internal_r+0x8e8>
    c7d4:	d9002217 	ldw	r4,136(sp)
    c7d8:	20800117 	ldw	r2,4(r4)
    c7dc:	24c00017 	ldw	r19,0(r4)
    c7e0:	21000204 	addi	r4,r4,8
    c7e4:	d9002215 	stw	r4,136(sp)
    c7e8:	1029883a 	mov	r20,r2
    c7ec:	10024c16 	blt	r2,zero,d120 <___vfiprintf_internal_r+0x1114>
    c7f0:	dd401d83 	ldbu	r21,118(sp)
    c7f4:	80007116 	blt	r16,zero,c9bc <___vfiprintf_internal_r+0x9b0>
    c7f8:	00ffdfc4 	movi	r3,-129
    c7fc:	9d04b03a 	or	r2,r19,r20
    c800:	88e2703a 	and	r17,r17,r3
    c804:	1000d126 	beq	r2,zero,cb4c <___vfiprintf_internal_r+0xb40>
    c808:	a0023526 	beq	r20,zero,d0e0 <___vfiprintf_internal_r+0x10d4>
    c80c:	ddc01a04 	addi	r23,sp,104
    c810:	4039883a 	mov	fp,r8
    c814:	9809883a 	mov	r4,r19
    c818:	a00b883a 	mov	r5,r20
    c81c:	01800284 	movi	r6,10
    c820:	000f883a 	mov	r7,zero
    c824:	000e2100 	call	e210 <__umoddi3>
    c828:	10800c04 	addi	r2,r2,48
    c82c:	bdffffc4 	addi	r23,r23,-1
    c830:	9809883a 	mov	r4,r19
    c834:	a00b883a 	mov	r5,r20
    c838:	b8800005 	stb	r2,0(r23)
    c83c:	01800284 	movi	r6,10
    c840:	000f883a 	mov	r7,zero
    c844:	000dc140 	call	dc14 <__udivdi3>
    c848:	1027883a 	mov	r19,r2
    c84c:	10c4b03a 	or	r2,r2,r3
    c850:	1829883a 	mov	r20,r3
    c854:	103fef1e 	bne	r2,zero,c814 <__alt_data_end+0xfffec814>
    c858:	d9001e17 	ldw	r4,120(sp)
    c85c:	e011883a 	mov	r8,fp
    c860:	25e9c83a 	sub	r20,r4,r23
    c864:	003eec06 	br	c418 <__alt_data_end+0xfffec418>
    c868:	d8802307 	ldb	r2,140(sp)
    c86c:	1002361e 	bne	r2,zero,d148 <___vfiprintf_internal_r+0x113c>
    c870:	00c00804 	movi	r3,32
    c874:	d8c02305 	stb	r3,140(sp)
    c878:	04c00044 	movi	r19,1
    c87c:	b0c00007 	ldb	r3,0(r22)
    c880:	003e3f06 	br	c180 <__alt_data_end+0xfffec180>
    c884:	8c400054 	ori	r17,r17,1
    c888:	b0c00007 	ldb	r3,0(r22)
    c88c:	003e3c06 	br	c180 <__alt_data_end+0xfffec180>
    c890:	8c402014 	ori	r17,r17,128
    c894:	b0c00007 	ldb	r3,0(r22)
    c898:	003e3906 	br	c180 <__alt_data_end+0xfffec180>
    c89c:	dc002715 	stw	r16,156(sp)
    c8a0:	d8002515 	stw	zero,148(sp)
    c8a4:	1f3ff404 	addi	fp,r3,-48
    c8a8:	0009883a 	mov	r4,zero
    c8ac:	b021883a 	mov	r16,r22
    c8b0:	01400284 	movi	r5,10
    c8b4:	0000e880 	call	e88 <__mulsi3>
    c8b8:	80c00007 	ldb	r3,0(r16)
    c8bc:	e089883a 	add	r4,fp,r2
    c8c0:	b5800044 	addi	r22,r22,1
    c8c4:	1f3ff404 	addi	fp,r3,-48
    c8c8:	b021883a 	mov	r16,r22
    c8cc:	af3ff82e 	bgeu	r21,fp,c8b0 <__alt_data_end+0xfffec8b0>
    c8d0:	d9002515 	stw	r4,148(sp)
    c8d4:	dc002717 	ldw	r16,156(sp)
    c8d8:	003e2a06 	br	c184 <__alt_data_end+0xfffec184>
    c8dc:	9cc03fcc 	andi	r19,r19,255
    c8e0:	b811883a 	mov	r8,r23
    c8e4:	9802e91e 	bne	r19,zero,d48c <___vfiprintf_internal_r+0x1480>
    c8e8:	8c400414 	ori	r17,r17,16
    c8ec:	8880080c 	andi	r2,r17,32
    c8f0:	103fb81e 	bne	r2,zero,c7d4 <__alt_data_end+0xfffec7d4>
    c8f4:	8880040c 	andi	r2,r17,16
    c8f8:	10022e26 	beq	r2,zero,d1b4 <___vfiprintf_internal_r+0x11a8>
    c8fc:	d9402217 	ldw	r5,136(sp)
    c900:	2cc00017 	ldw	r19,0(r5)
    c904:	29400104 	addi	r5,r5,4
    c908:	d9402215 	stw	r5,136(sp)
    c90c:	9829d7fa 	srai	r20,r19,31
    c910:	a005883a 	mov	r2,r20
    c914:	003fb506 	br	c7ec <__alt_data_end+0xfffec7ec>
    c918:	9cc03fcc 	andi	r19,r19,255
    c91c:	b811883a 	mov	r8,r23
    c920:	9802fa1e 	bne	r19,zero,d50c <___vfiprintf_internal_r+0x1500>
    c924:	8c400414 	ori	r17,r17,16
    c928:	8880080c 	andi	r2,r17,32
    c92c:	103f661e 	bne	r2,zero,c6c8 <__alt_data_end+0xfffec6c8>
    c930:	8880040c 	andi	r2,r17,16
    c934:	10020626 	beq	r2,zero,d150 <___vfiprintf_internal_r+0x1144>
    c938:	d9402217 	ldw	r5,136(sp)
    c93c:	d8001d85 	stb	zero,118(sp)
    c940:	0029883a 	mov	r20,zero
    c944:	28800104 	addi	r2,r5,4
    c948:	2cc00017 	ldw	r19,0(r5)
    c94c:	80020816 	blt	r16,zero,d170 <___vfiprintf_internal_r+0x1164>
    c950:	00ffdfc4 	movi	r3,-129
    c954:	d8802215 	stw	r2,136(sp)
    c958:	88e2703a 	and	r17,r17,r3
    c95c:	983f651e 	bne	r19,zero,c6f4 <__alt_data_end+0xfffec6f4>
    c960:	002b883a 	mov	r21,zero
    c964:	8002cf26 	beq	r16,zero,d4a4 <___vfiprintf_internal_r+0x1498>
    c968:	0027883a 	mov	r19,zero
    c96c:	0029883a 	mov	r20,zero
    c970:	003f6106 	br	c6f8 <__alt_data_end+0xfffec6f8>
    c974:	9cc03fcc 	andi	r19,r19,255
    c978:	b811883a 	mov	r8,r23
    c97c:	9802e01e 	bne	r19,zero,d500 <___vfiprintf_internal_r+0x14f4>
    c980:	8c400414 	ori	r17,r17,16
    c984:	8880080c 	andi	r2,r17,32
    c988:	1000641e 	bne	r2,zero,cb1c <___vfiprintf_internal_r+0xb10>
    c98c:	8880040c 	andi	r2,r17,16
    c990:	1001c81e 	bne	r2,zero,d0b4 <___vfiprintf_internal_r+0x10a8>
    c994:	8880100c 	andi	r2,r17,64
    c998:	d8001d85 	stb	zero,118(sp)
    c99c:	1002281e 	bne	r2,zero,d240 <___vfiprintf_internal_r+0x1234>
    c9a0:	d9002217 	ldw	r4,136(sp)
    c9a4:	0029883a 	mov	r20,zero
    c9a8:	20800104 	addi	r2,r4,4
    c9ac:	24c00017 	ldw	r19,0(r4)
    c9b0:	8001c60e 	bge	r16,zero,d0cc <___vfiprintf_internal_r+0x10c0>
    c9b4:	d8802215 	stw	r2,136(sp)
    c9b8:	002b883a 	mov	r21,zero
    c9bc:	9d04b03a 	or	r2,r19,r20
    c9c0:	103f911e 	bne	r2,zero,c808 <__alt_data_end+0xfffec808>
    c9c4:	00800044 	movi	r2,1
    c9c8:	10803fcc 	andi	r2,r2,255
    c9cc:	00c00044 	movi	r3,1
    c9d0:	10c05f26 	beq	r2,r3,cb50 <___vfiprintf_internal_r+0xb44>
    c9d4:	00c00084 	movi	r3,2
    c9d8:	10ffe31e 	bne	r2,r3,c968 <__alt_data_end+0xfffec968>
    c9dc:	0027883a 	mov	r19,zero
    c9e0:	0029883a 	mov	r20,zero
    c9e4:	00015106 	br	cf2c <___vfiprintf_internal_r+0xf20>
    c9e8:	9cc03fcc 	andi	r19,r19,255
    c9ec:	b811883a 	mov	r8,r23
    c9f0:	9802c01e 	bne	r19,zero,d4f4 <___vfiprintf_internal_r+0x14e8>
    c9f4:	01400074 	movhi	r5,1
    c9f8:	29449104 	addi	r5,r5,4676
    c9fc:	d9402615 	stw	r5,152(sp)
    ca00:	8880080c 	andi	r2,r17,32
    ca04:	103f541e 	bne	r2,zero,c758 <__alt_data_end+0xfffec758>
    ca08:	8880040c 	andi	r2,r17,16
    ca0c:	1001f226 	beq	r2,zero,d1d8 <___vfiprintf_internal_r+0x11cc>
    ca10:	d9402217 	ldw	r5,136(sp)
    ca14:	0029883a 	mov	r20,zero
    ca18:	2cc00017 	ldw	r19,0(r5)
    ca1c:	29400104 	addi	r5,r5,4
    ca20:	d9402215 	stw	r5,136(sp)
    ca24:	003f5106 	br	c76c <__alt_data_end+0xfffec76c>
    ca28:	d8c02217 	ldw	r3,136(sp)
    ca2c:	b811883a 	mov	r8,r23
    ca30:	d8001d85 	stb	zero,118(sp)
    ca34:	1dc00017 	ldw	r23,0(r3)
    ca38:	1f000104 	addi	fp,r3,4
    ca3c:	b8025926 	beq	r23,zero,d3a4 <___vfiprintf_internal_r+0x1398>
    ca40:	80023316 	blt	r16,zero,d310 <___vfiprintf_internal_r+0x1304>
    ca44:	800d883a 	mov	r6,r16
    ca48:	000b883a 	mov	r5,zero
    ca4c:	b809883a 	mov	r4,r23
    ca50:	da002a15 	stw	r8,168(sp)
    ca54:	000a4ec0 	call	a4ec <memchr>
    ca58:	da002a17 	ldw	r8,168(sp)
    ca5c:	10026826 	beq	r2,zero,d400 <___vfiprintf_internal_r+0x13f4>
    ca60:	15e9c83a 	sub	r20,r2,r23
    ca64:	dd401d83 	ldbu	r21,118(sp)
    ca68:	df002215 	stw	fp,136(sp)
    ca6c:	0021883a 	mov	r16,zero
    ca70:	003e6906 	br	c418 <__alt_data_end+0xfffec418>
    ca74:	9cc03fcc 	andi	r19,r19,255
    ca78:	b811883a 	mov	r8,r23
    ca7c:	983fc126 	beq	r19,zero,c984 <__alt_data_end+0xfffec984>
    ca80:	d8c02303 	ldbu	r3,140(sp)
    ca84:	d8c01d85 	stb	r3,118(sp)
    ca88:	003fbe06 	br	c984 <__alt_data_end+0xfffec984>
    ca8c:	d9002217 	ldw	r4,136(sp)
    ca90:	d9402217 	ldw	r5,136(sp)
    ca94:	21000017 	ldw	r4,0(r4)
    ca98:	28800104 	addi	r2,r5,4
    ca9c:	d9002515 	stw	r4,148(sp)
    caa0:	203e3d16 	blt	r4,zero,c398 <__alt_data_end+0xfffec398>
    caa4:	d8802215 	stw	r2,136(sp)
    caa8:	b0c00007 	ldb	r3,0(r22)
    caac:	003db406 	br	c180 <__alt_data_end+0xfffec180>
    cab0:	00c00ac4 	movi	r3,43
    cab4:	d8c02305 	stb	r3,140(sp)
    cab8:	04c00044 	movi	r19,1
    cabc:	b0c00007 	ldb	r3,0(r22)
    cac0:	003daf06 	br	c180 <__alt_data_end+0xfffec180>
    cac4:	b0c00007 	ldb	r3,0(r22)
    cac8:	01000a84 	movi	r4,42
    cacc:	b4000044 	addi	r16,r22,1
    cad0:	19025e26 	beq	r3,r4,d44c <___vfiprintf_internal_r+0x1440>
    cad4:	1f3ff404 	addi	fp,r3,-48
    cad8:	0009883a 	mov	r4,zero
    cadc:	af025236 	bltu	r21,fp,d428 <___vfiprintf_internal_r+0x141c>
    cae0:	01400284 	movi	r5,10
    cae4:	0000e880 	call	e88 <__mulsi3>
    cae8:	80c00007 	ldb	r3,0(r16)
    caec:	1709883a 	add	r4,r2,fp
    caf0:	85800044 	addi	r22,r16,1
    caf4:	1f3ff404 	addi	fp,r3,-48
    caf8:	b021883a 	mov	r16,r22
    cafc:	af3ff82e 	bgeu	r21,fp,cae0 <__alt_data_end+0xfffecae0>
    cb00:	2021883a 	mov	r16,r4
    cb04:	203d9f0e 	bge	r4,zero,c184 <__alt_data_end+0xfffec184>
    cb08:	043fffc4 	movi	r16,-1
    cb0c:	003d9d06 	br	c184 <__alt_data_end+0xfffec184>
    cb10:	8c401014 	ori	r17,r17,64
    cb14:	b0c00007 	ldb	r3,0(r22)
    cb18:	003d9906 	br	c180 <__alt_data_end+0xfffec180>
    cb1c:	d9002217 	ldw	r4,136(sp)
    cb20:	d8001d85 	stb	zero,118(sp)
    cb24:	20c00204 	addi	r3,r4,8
    cb28:	24c00017 	ldw	r19,0(r4)
    cb2c:	25000117 	ldw	r20,4(r4)
    cb30:	8001e716 	blt	r16,zero,d2d0 <___vfiprintf_internal_r+0x12c4>
    cb34:	013fdfc4 	movi	r4,-129
    cb38:	9d04b03a 	or	r2,r19,r20
    cb3c:	d8c02215 	stw	r3,136(sp)
    cb40:	8922703a 	and	r17,r17,r4
    cb44:	002b883a 	mov	r21,zero
    cb48:	103f2f1e 	bne	r2,zero,c808 <__alt_data_end+0xfffec808>
    cb4c:	803e2f26 	beq	r16,zero,c40c <__alt_data_end+0xfffec40c>
    cb50:	0027883a 	mov	r19,zero
    cb54:	9cc00c04 	addi	r19,r19,48
    cb58:	dcc019c5 	stb	r19,103(sp)
    cb5c:	dd002817 	ldw	r20,160(sp)
    cb60:	ddc019c4 	addi	r23,sp,103
    cb64:	003e2c06 	br	c418 <__alt_data_end+0xfffec418>
    cb68:	9cc03fcc 	andi	r19,r19,255
    cb6c:	b811883a 	mov	r8,r23
    cb70:	9802571e 	bne	r19,zero,d4d0 <___vfiprintf_internal_r+0x14c4>
    cb74:	18005726 	beq	r3,zero,ccd4 <___vfiprintf_internal_r+0xcc8>
    cb78:	04c00044 	movi	r19,1
    cb7c:	d8c01005 	stb	r3,64(sp)
    cb80:	d8001d85 	stb	zero,118(sp)
    cb84:	9829883a 	mov	r20,r19
    cb88:	ddc01004 	addi	r23,sp,64
    cb8c:	003f0a06 	br	c7b8 <__alt_data_end+0xfffec7b8>
    cb90:	d9402017 	ldw	r5,128(sp)
    cb94:	d9002117 	ldw	r4,132(sp)
    cb98:	d9801a04 	addi	r6,sp,104
    cb9c:	da802a15 	stw	r10,168(sp)
    cba0:	000bef80 	call	bef8 <__sprint_r.part.0>
    cba4:	da802a17 	ldw	r10,168(sp)
    cba8:	1000501e 	bne	r2,zero,ccec <___vfiprintf_internal_r+0xce0>
    cbac:	d9801b17 	ldw	r6,108(sp)
    cbb0:	d8801c17 	ldw	r2,112(sp)
    cbb4:	d811883a 	mov	r8,sp
    cbb8:	31000044 	addi	r4,r6,1
    cbbc:	003e3606 	br	c498 <__alt_data_end+0xfffec498>
    cbc0:	d9001b17 	ldw	r4,108(sp)
    cbc4:	d8801c17 	ldw	r2,112(sp)
    cbc8:	21400044 	addi	r5,r4,1
    cbcc:	d9801d87 	ldb	r6,118(sp)
    cbd0:	303e5226 	beq	r6,zero,c51c <__alt_data_end+0xfffec51c>
    cbd4:	01800044 	movi	r6,1
    cbd8:	d9001d84 	addi	r4,sp,118
    cbdc:	1185883a 	add	r2,r2,r6
    cbe0:	41000015 	stw	r4,0(r8)
    cbe4:	41800115 	stw	r6,4(r8)
    cbe8:	d8801c15 	stw	r2,112(sp)
    cbec:	d9401b15 	stw	r5,108(sp)
    cbf0:	010001c4 	movi	r4,7
    cbf4:	2140b00e 	bge	r4,r5,ceb8 <___vfiprintf_internal_r+0xeac>
    cbf8:	1000f61e 	bne	r2,zero,cfd4 <___vfiprintf_internal_r+0xfc8>
    cbfc:	3800b31e 	bne	r7,zero,cecc <___vfiprintf_internal_r+0xec0>
    cc00:	0009883a 	mov	r4,zero
    cc04:	300b883a 	mov	r5,r6
    cc08:	d811883a 	mov	r8,sp
    cc0c:	01802004 	movi	r6,128
    cc10:	19be5226 	beq	r3,r6,c55c <__alt_data_end+0xfffec55c>
    cc14:	8521c83a 	sub	r16,r16,r20
    cc18:	043e790e 	bge	zero,r16,c600 <__alt_data_end+0xfffec600>
    cc1c:	05400404 	movi	r21,16
    cc20:	ac01b00e 	bge	r21,r16,d2e4 <___vfiprintf_internal_r+0x12d8>
    cc24:	01400074 	movhi	r5,1
    cc28:	2944f604 	addi	r5,r5,5080
    cc2c:	d9402315 	stw	r5,140(sp)
    cc30:	070001c4 	movi	fp,7
    cc34:	00000506 	br	cc4c <___vfiprintf_internal_r+0xc40>
    cc38:	21400084 	addi	r5,r4,2
    cc3c:	42000204 	addi	r8,r8,8
    cc40:	1809883a 	mov	r4,r3
    cc44:	843ffc04 	addi	r16,r16,-16
    cc48:	ac000d0e 	bge	r21,r16,cc80 <___vfiprintf_internal_r+0xc74>
    cc4c:	10800404 	addi	r2,r2,16
    cc50:	20c00044 	addi	r3,r4,1
    cc54:	44800015 	stw	r18,0(r8)
    cc58:	45400115 	stw	r21,4(r8)
    cc5c:	d8801c15 	stw	r2,112(sp)
    cc60:	d8c01b15 	stw	r3,108(sp)
    cc64:	e0fff40e 	bge	fp,r3,cc38 <__alt_data_end+0xfffecc38>
    cc68:	1000101e 	bne	r2,zero,ccac <___vfiprintf_internal_r+0xca0>
    cc6c:	843ffc04 	addi	r16,r16,-16
    cc70:	01400044 	movi	r5,1
    cc74:	0009883a 	mov	r4,zero
    cc78:	d811883a 	mov	r8,sp
    cc7c:	ac3ff316 	blt	r21,r16,cc4c <__alt_data_end+0xfffecc4c>
    cc80:	d8c02317 	ldw	r3,140(sp)
    cc84:	1405883a 	add	r2,r2,r16
    cc88:	44000115 	stw	r16,4(r8)
    cc8c:	40c00015 	stw	r3,0(r8)
    cc90:	d8801c15 	stw	r2,112(sp)
    cc94:	d9401b15 	stw	r5,108(sp)
    cc98:	00c001c4 	movi	r3,7
    cc9c:	19401916 	blt	r3,r5,cd04 <___vfiprintf_internal_r+0xcf8>
    cca0:	42000204 	addi	r8,r8,8
    cca4:	29400044 	addi	r5,r5,1
    cca8:	003e5506 	br	c600 <__alt_data_end+0xfffec600>
    ccac:	d9402017 	ldw	r5,128(sp)
    ccb0:	d9002117 	ldw	r4,132(sp)
    ccb4:	d9801a04 	addi	r6,sp,104
    ccb8:	000bef80 	call	bef8 <__sprint_r.part.0>
    ccbc:	10000b1e 	bne	r2,zero,ccec <___vfiprintf_internal_r+0xce0>
    ccc0:	d9001b17 	ldw	r4,108(sp)
    ccc4:	d8801c17 	ldw	r2,112(sp)
    ccc8:	d811883a 	mov	r8,sp
    cccc:	21400044 	addi	r5,r4,1
    ccd0:	003fdc06 	br	cc44 <__alt_data_end+0xfffecc44>
    ccd4:	d8801c17 	ldw	r2,112(sp)
    ccd8:	10000426 	beq	r2,zero,ccec <___vfiprintf_internal_r+0xce0>
    ccdc:	d9402017 	ldw	r5,128(sp)
    cce0:	d9002117 	ldw	r4,132(sp)
    cce4:	d9801a04 	addi	r6,sp,104
    cce8:	000bef80 	call	bef8 <__sprint_r.part.0>
    ccec:	d9402017 	ldw	r5,128(sp)
    ccf0:	2880030b 	ldhu	r2,12(r5)
    ccf4:	1080100c 	andi	r2,r2,64
    ccf8:	10014d1e 	bne	r2,zero,d230 <___vfiprintf_internal_r+0x1224>
    ccfc:	d8802417 	ldw	r2,144(sp)
    cd00:	003d9706 	br	c360 <__alt_data_end+0xfffec360>
    cd04:	1000d21e 	bne	r2,zero,d050 <___vfiprintf_internal_r+0x1044>
    cd08:	00c00044 	movi	r3,1
    cd0c:	a005883a 	mov	r2,r20
    cd10:	ddc00015 	stw	r23,0(sp)
    cd14:	dd000115 	stw	r20,4(sp)
    cd18:	dd001c15 	stw	r20,112(sp)
    cd1c:	d8c01b15 	stw	r3,108(sp)
    cd20:	d811883a 	mov	r8,sp
    cd24:	42000204 	addi	r8,r8,8
    cd28:	8c40010c 	andi	r17,r17,4
    cd2c:	88004026 	beq	r17,zero,ce30 <___vfiprintf_internal_r+0xe24>
    cd30:	d9002517 	ldw	r4,148(sp)
    cd34:	24e3c83a 	sub	r17,r4,r19
    cd38:	04403d0e 	bge	zero,r17,ce30 <___vfiprintf_internal_r+0xe24>
    cd3c:	04000404 	movi	r16,16
    cd40:	8441a90e 	bge	r16,r17,d3e8 <___vfiprintf_internal_r+0x13dc>
    cd44:	00c00074 	movhi	r3,1
    cd48:	18c4fa04 	addi	r3,r3,5096
    cd4c:	d9001b17 	ldw	r4,108(sp)
    cd50:	d8c02315 	stw	r3,140(sp)
    cd54:	050001c4 	movi	r20,7
    cd58:	dd402117 	ldw	r21,132(sp)
    cd5c:	ddc02017 	ldw	r23,128(sp)
    cd60:	00000506 	br	cd78 <___vfiprintf_internal_r+0xd6c>
    cd64:	21400084 	addi	r5,r4,2
    cd68:	42000204 	addi	r8,r8,8
    cd6c:	1809883a 	mov	r4,r3
    cd70:	8c7ffc04 	addi	r17,r17,-16
    cd74:	84400f0e 	bge	r16,r17,cdb4 <___vfiprintf_internal_r+0xda8>
    cd78:	01400074 	movhi	r5,1
    cd7c:	10800404 	addi	r2,r2,16
    cd80:	20c00044 	addi	r3,r4,1
    cd84:	2944fa04 	addi	r5,r5,5096
    cd88:	41400015 	stw	r5,0(r8)
    cd8c:	44000115 	stw	r16,4(r8)
    cd90:	d8801c15 	stw	r2,112(sp)
    cd94:	d8c01b15 	stw	r3,108(sp)
    cd98:	a0fff20e 	bge	r20,r3,cd64 <__alt_data_end+0xfffecd64>
    cd9c:	1000141e 	bne	r2,zero,cdf0 <___vfiprintf_internal_r+0xde4>
    cda0:	8c7ffc04 	addi	r17,r17,-16
    cda4:	01400044 	movi	r5,1
    cda8:	0009883a 	mov	r4,zero
    cdac:	d811883a 	mov	r8,sp
    cdb0:	847ff116 	blt	r16,r17,cd78 <__alt_data_end+0xfffecd78>
    cdb4:	d8c02317 	ldw	r3,140(sp)
    cdb8:	1445883a 	add	r2,r2,r17
    cdbc:	44400115 	stw	r17,4(r8)
    cdc0:	40c00015 	stw	r3,0(r8)
    cdc4:	d8801c15 	stw	r2,112(sp)
    cdc8:	d9401b15 	stw	r5,108(sp)
    cdcc:	00c001c4 	movi	r3,7
    cdd0:	1940170e 	bge	r3,r5,ce30 <___vfiprintf_internal_r+0xe24>
    cdd4:	1000101e 	bne	r2,zero,ce18 <___vfiprintf_internal_r+0xe0c>
    cdd8:	d8802517 	ldw	r2,148(sp)
    cddc:	14c11616 	blt	r2,r19,d238 <___vfiprintf_internal_r+0x122c>
    cde0:	d9002417 	ldw	r4,144(sp)
    cde4:	2089883a 	add	r4,r4,r2
    cde8:	d9002415 	stw	r4,144(sp)
    cdec:	003e1806 	br	c650 <__alt_data_end+0xfffec650>
    cdf0:	d9801a04 	addi	r6,sp,104
    cdf4:	b80b883a 	mov	r5,r23
    cdf8:	a809883a 	mov	r4,r21
    cdfc:	000bef80 	call	bef8 <__sprint_r.part.0>
    ce00:	103fba1e 	bne	r2,zero,ccec <__alt_data_end+0xfffeccec>
    ce04:	d9001b17 	ldw	r4,108(sp)
    ce08:	d8801c17 	ldw	r2,112(sp)
    ce0c:	d811883a 	mov	r8,sp
    ce10:	21400044 	addi	r5,r4,1
    ce14:	003fd606 	br	cd70 <__alt_data_end+0xfffecd70>
    ce18:	d9402017 	ldw	r5,128(sp)
    ce1c:	d9002117 	ldw	r4,132(sp)
    ce20:	d9801a04 	addi	r6,sp,104
    ce24:	000bef80 	call	bef8 <__sprint_r.part.0>
    ce28:	103fb01e 	bne	r2,zero,ccec <__alt_data_end+0xfffeccec>
    ce2c:	d8801c17 	ldw	r2,112(sp)
    ce30:	d8c02517 	ldw	r3,148(sp)
    ce34:	1cc0010e 	bge	r3,r19,ce3c <___vfiprintf_internal_r+0xe30>
    ce38:	9807883a 	mov	r3,r19
    ce3c:	d9002417 	ldw	r4,144(sp)
    ce40:	20c9883a 	add	r4,r4,r3
    ce44:	d9002415 	stw	r4,144(sp)
    ce48:	103e0126 	beq	r2,zero,c650 <__alt_data_end+0xfffec650>
    ce4c:	d9402017 	ldw	r5,128(sp)
    ce50:	d9002117 	ldw	r4,132(sp)
    ce54:	d9801a04 	addi	r6,sp,104
    ce58:	000bef80 	call	bef8 <__sprint_r.part.0>
    ce5c:	103dfc26 	beq	r2,zero,c650 <__alt_data_end+0xfffec650>
    ce60:	003fa206 	br	ccec <__alt_data_end+0xfffeccec>
    ce64:	d9402017 	ldw	r5,128(sp)
    ce68:	d9002117 	ldw	r4,132(sp)
    ce6c:	d9801a04 	addi	r6,sp,104
    ce70:	d9c02b15 	stw	r7,172(sp)
    ce74:	000bef80 	call	bef8 <__sprint_r.part.0>
    ce78:	d9c02b17 	ldw	r7,172(sp)
    ce7c:	103f9b1e 	bne	r2,zero,ccec <__alt_data_end+0xfffeccec>
    ce80:	d9001b17 	ldw	r4,108(sp)
    ce84:	d8801c17 	ldw	r2,112(sp)
    ce88:	d811883a 	mov	r8,sp
    ce8c:	21800044 	addi	r6,r4,1
    ce90:	003dbf06 	br	c590 <__alt_data_end+0xfffec590>
    ce94:	1000d81e 	bne	r2,zero,d1f8 <___vfiprintf_internal_r+0x11ec>
    ce98:	d9001d87 	ldb	r4,118(sp)
    ce9c:	20000a26 	beq	r4,zero,cec8 <___vfiprintf_internal_r+0xebc>
    cea0:	00800044 	movi	r2,1
    cea4:	d9001d84 	addi	r4,sp,118
    cea8:	100b883a 	mov	r5,r2
    ceac:	d9000015 	stw	r4,0(sp)
    ceb0:	d8800115 	stw	r2,4(sp)
    ceb4:	d811883a 	mov	r8,sp
    ceb8:	2809883a 	mov	r4,r5
    cebc:	42000204 	addi	r8,r8,8
    cec0:	29400044 	addi	r5,r5,1
    cec4:	003d9506 	br	c51c <__alt_data_end+0xfffec51c>
    cec8:	3800fd26 	beq	r7,zero,d2c0 <___vfiprintf_internal_r+0x12b4>
    cecc:	00800084 	movi	r2,2
    ced0:	d9001d04 	addi	r4,sp,116
    ced4:	d9000015 	stw	r4,0(sp)
    ced8:	d8800115 	stw	r2,4(sp)
    cedc:	01400044 	movi	r5,1
    cee0:	d811883a 	mov	r8,sp
    cee4:	2809883a 	mov	r4,r5
    cee8:	42000204 	addi	r8,r8,8
    ceec:	29400044 	addi	r5,r5,1
    cef0:	003f4606 	br	cc0c <__alt_data_end+0xfffecc0c>
    cef4:	d8802517 	ldw	r2,148(sp)
    cef8:	14c0010e 	bge	r2,r19,cf00 <___vfiprintf_internal_r+0xef4>
    cefc:	9805883a 	mov	r2,r19
    cf00:	d9402417 	ldw	r5,144(sp)
    cf04:	288b883a 	add	r5,r5,r2
    cf08:	d9402415 	stw	r5,144(sp)
    cf0c:	003dd006 	br	c650 <__alt_data_end+0xfffec650>
    cf10:	d8001d85 	stb	zero,118(sp)
    cf14:	80005d16 	blt	r16,zero,d08c <___vfiprintf_internal_r+0x1080>
    cf18:	00ffdfc4 	movi	r3,-129
    cf1c:	9d04b03a 	or	r2,r19,r20
    cf20:	88e2703a 	and	r17,r17,r3
    cf24:	103d3726 	beq	r2,zero,c404 <__alt_data_end+0xfffec404>
    cf28:	002b883a 	mov	r21,zero
    cf2c:	d9002617 	ldw	r4,152(sp)
    cf30:	ddc01a04 	addi	r23,sp,104
    cf34:	988003cc 	andi	r2,r19,15
    cf38:	a006973a 	slli	r3,r20,28
    cf3c:	2085883a 	add	r2,r4,r2
    cf40:	9826d13a 	srli	r19,r19,4
    cf44:	10800003 	ldbu	r2,0(r2)
    cf48:	a028d13a 	srli	r20,r20,4
    cf4c:	bdffffc4 	addi	r23,r23,-1
    cf50:	1ce6b03a 	or	r19,r3,r19
    cf54:	b8800005 	stb	r2,0(r23)
    cf58:	9d04b03a 	or	r2,r19,r20
    cf5c:	103ff51e 	bne	r2,zero,cf34 <__alt_data_end+0xfffecf34>
    cf60:	d8801e17 	ldw	r2,120(sp)
    cf64:	15e9c83a 	sub	r20,r2,r23
    cf68:	003d2b06 	br	c418 <__alt_data_end+0xfffec418>
    cf6c:	d9402017 	ldw	r5,128(sp)
    cf70:	d9002117 	ldw	r4,132(sp)
    cf74:	d9801a04 	addi	r6,sp,104
    cf78:	000bef80 	call	bef8 <__sprint_r.part.0>
    cf7c:	103f5b1e 	bne	r2,zero,ccec <__alt_data_end+0xfffeccec>
    cf80:	d8801c17 	ldw	r2,112(sp)
    cf84:	d811883a 	mov	r8,sp
    cf88:	003f6706 	br	cd28 <__alt_data_end+0xfffecd28>
    cf8c:	d9402017 	ldw	r5,128(sp)
    cf90:	d9002117 	ldw	r4,132(sp)
    cf94:	d9801a04 	addi	r6,sp,104
    cf98:	000bef80 	call	bef8 <__sprint_r.part.0>
    cf9c:	103f531e 	bne	r2,zero,ccec <__alt_data_end+0xfffeccec>
    cfa0:	d811883a 	mov	r8,sp
    cfa4:	003cd906 	br	c30c <__alt_data_end+0xfffec30c>
    cfa8:	10803fcc 	andi	r2,r2,255
    cfac:	1080201c 	xori	r2,r2,128
    cfb0:	10bfe004 	addi	r2,r2,-128
    cfb4:	00c00c04 	movi	r3,48
    cfb8:	10ffe926 	beq	r2,r3,cf60 <__alt_data_end+0xfffecf60>
    cfbc:	b8ffffc5 	stb	r3,-1(r23)
    cfc0:	d8c01e17 	ldw	r3,120(sp)
    cfc4:	b8bfffc4 	addi	r2,r23,-1
    cfc8:	102f883a 	mov	r23,r2
    cfcc:	18a9c83a 	sub	r20,r3,r2
    cfd0:	003d1106 	br	c418 <__alt_data_end+0xfffec418>
    cfd4:	d9402017 	ldw	r5,128(sp)
    cfd8:	d9002117 	ldw	r4,132(sp)
    cfdc:	d9801a04 	addi	r6,sp,104
    cfe0:	d8c02a15 	stw	r3,168(sp)
    cfe4:	d9c02b15 	stw	r7,172(sp)
    cfe8:	000bef80 	call	bef8 <__sprint_r.part.0>
    cfec:	d8c02a17 	ldw	r3,168(sp)
    cff0:	d9c02b17 	ldw	r7,172(sp)
    cff4:	103f3d1e 	bne	r2,zero,ccec <__alt_data_end+0xfffeccec>
    cff8:	d9001b17 	ldw	r4,108(sp)
    cffc:	d8801c17 	ldw	r2,112(sp)
    d000:	d811883a 	mov	r8,sp
    d004:	21400044 	addi	r5,r4,1
    d008:	003d4406 	br	c51c <__alt_data_end+0xfffec51c>
    d00c:	d9402017 	ldw	r5,128(sp)
    d010:	d9002117 	ldw	r4,132(sp)
    d014:	d9801a04 	addi	r6,sp,104
    d018:	d8c02a15 	stw	r3,168(sp)
    d01c:	000bef80 	call	bef8 <__sprint_r.part.0>
    d020:	d8c02a17 	ldw	r3,168(sp)
    d024:	103f311e 	bne	r2,zero,ccec <__alt_data_end+0xfffeccec>
    d028:	d9001b17 	ldw	r4,108(sp)
    d02c:	d8801c17 	ldw	r2,112(sp)
    d030:	d811883a 	mov	r8,sp
    d034:	21400044 	addi	r5,r4,1
    d038:	003ef406 	br	cc0c <__alt_data_end+0xfffecc0c>
    d03c:	1000bd1e 	bne	r2,zero,d334 <___vfiprintf_internal_r+0x1328>
    d040:	01400044 	movi	r5,1
    d044:	0009883a 	mov	r4,zero
    d048:	d811883a 	mov	r8,sp
    d04c:	003ef106 	br	cc14 <__alt_data_end+0xfffecc14>
    d050:	d9402017 	ldw	r5,128(sp)
    d054:	d9002117 	ldw	r4,132(sp)
    d058:	d9801a04 	addi	r6,sp,104
    d05c:	000bef80 	call	bef8 <__sprint_r.part.0>
    d060:	103f221e 	bne	r2,zero,ccec <__alt_data_end+0xfffeccec>
    d064:	d9401b17 	ldw	r5,108(sp)
    d068:	d8801c17 	ldw	r2,112(sp)
    d06c:	d811883a 	mov	r8,sp
    d070:	29400044 	addi	r5,r5,1
    d074:	003d6206 	br	c600 <__alt_data_end+0xfffec600>
    d078:	01400074 	movhi	r5,1
    d07c:	29449604 	addi	r5,r5,4696
    d080:	d9402615 	stw	r5,152(sp)
    d084:	d8c02215 	stw	r3,136(sp)
    d088:	1023883a 	mov	r17,r2
    d08c:	9d04b03a 	or	r2,r19,r20
    d090:	103fa51e 	bne	r2,zero,cf28 <__alt_data_end+0xfffecf28>
    d094:	002b883a 	mov	r21,zero
    d098:	00800084 	movi	r2,2
    d09c:	003e4a06 	br	c9c8 <__alt_data_end+0xfffec9c8>
    d0a0:	01400074 	movhi	r5,1
    d0a4:	29449604 	addi	r5,r5,4696
    d0a8:	002b883a 	mov	r21,zero
    d0ac:	d9402615 	stw	r5,152(sp)
    d0b0:	003f9e06 	br	cf2c <__alt_data_end+0xfffecf2c>
    d0b4:	d9402217 	ldw	r5,136(sp)
    d0b8:	d8001d85 	stb	zero,118(sp)
    d0bc:	0029883a 	mov	r20,zero
    d0c0:	28800104 	addi	r2,r5,4
    d0c4:	2cc00017 	ldw	r19,0(r5)
    d0c8:	803e3a16 	blt	r16,zero,c9b4 <__alt_data_end+0xfffec9b4>
    d0cc:	00ffdfc4 	movi	r3,-129
    d0d0:	d8802215 	stw	r2,136(sp)
    d0d4:	88e2703a 	and	r17,r17,r3
    d0d8:	002b883a 	mov	r21,zero
    d0dc:	983e9b26 	beq	r19,zero,cb4c <__alt_data_end+0xfffecb4c>
    d0e0:	00800244 	movi	r2,9
    d0e4:	14fdc936 	bltu	r2,r19,c80c <__alt_data_end+0xfffec80c>
    d0e8:	003e9a06 	br	cb54 <__alt_data_end+0xfffecb54>
    d0ec:	00800c04 	movi	r2,48
    d0f0:	d8c01d45 	stb	r3,117(sp)
    d0f4:	d8801d05 	stb	r2,116(sp)
    d0f8:	d8001d85 	stb	zero,118(sp)
    d0fc:	88c00094 	ori	r3,r17,2
    d100:	80009c16 	blt	r16,zero,d374 <___vfiprintf_internal_r+0x1368>
    d104:	00bfdfc4 	movi	r2,-129
    d108:	88a2703a 	and	r17,r17,r2
    d10c:	8c400094 	ori	r17,r17,2
    d110:	002b883a 	mov	r21,zero
    d114:	003f8506 	br	cf2c <__alt_data_end+0xfffecf2c>
    d118:	b029883a 	mov	r20,r22
    d11c:	003c0b06 	br	c14c <__alt_data_end+0xfffec14c>
    d120:	04e7c83a 	sub	r19,zero,r19
    d124:	05400b44 	movi	r21,45
    d128:	9804c03a 	cmpne	r2,r19,zero
    d12c:	0529c83a 	sub	r20,zero,r20
    d130:	dd401d85 	stb	r21,118(sp)
    d134:	a0a9c83a 	sub	r20,r20,r2
    d138:	80009716 	blt	r16,zero,d398 <___vfiprintf_internal_r+0x138c>
    d13c:	00bfdfc4 	movi	r2,-129
    d140:	88a2703a 	and	r17,r17,r2
    d144:	003db006 	br	c808 <__alt_data_end+0xfffec808>
    d148:	b0c00007 	ldb	r3,0(r22)
    d14c:	003c0c06 	br	c180 <__alt_data_end+0xfffec180>
    d150:	8880100c 	andi	r2,r17,64
    d154:	d8001d85 	stb	zero,118(sp)
    d158:	1000461e 	bne	r2,zero,d274 <___vfiprintf_internal_r+0x1268>
    d15c:	d9002217 	ldw	r4,136(sp)
    d160:	0029883a 	mov	r20,zero
    d164:	20800104 	addi	r2,r4,4
    d168:	24c00017 	ldw	r19,0(r4)
    d16c:	803df80e 	bge	r16,zero,c950 <__alt_data_end+0xfffec950>
    d170:	9d06b03a 	or	r3,r19,r20
    d174:	d8802215 	stw	r2,136(sp)
    d178:	183d5e1e 	bne	r3,zero,c6f4 <__alt_data_end+0xfffec6f4>
    d17c:	002b883a 	mov	r21,zero
    d180:	0005883a 	mov	r2,zero
    d184:	003e1006 	br	c9c8 <__alt_data_end+0xfffec9c8>
    d188:	8880040c 	andi	r2,r17,16
    d18c:	1000321e 	bne	r2,zero,d258 <___vfiprintf_internal_r+0x124c>
    d190:	8c40100c 	andi	r17,r17,64
    d194:	88008d26 	beq	r17,zero,d3cc <___vfiprintf_internal_r+0x13c0>
    d198:	d9402217 	ldw	r5,136(sp)
    d19c:	d8c02417 	ldw	r3,144(sp)
    d1a0:	28800017 	ldw	r2,0(r5)
    d1a4:	29400104 	addi	r5,r5,4
    d1a8:	d9402215 	stw	r5,136(sp)
    d1ac:	10c0000d 	sth	r3,0(r2)
    d1b0:	003bca06 	br	c0dc <__alt_data_end+0xfffec0dc>
    d1b4:	8880100c 	andi	r2,r17,64
    d1b8:	10003a26 	beq	r2,zero,d2a4 <___vfiprintf_internal_r+0x1298>
    d1bc:	d8802217 	ldw	r2,136(sp)
    d1c0:	14c0000f 	ldh	r19,0(r2)
    d1c4:	10800104 	addi	r2,r2,4
    d1c8:	d8802215 	stw	r2,136(sp)
    d1cc:	9829d7fa 	srai	r20,r19,31
    d1d0:	a005883a 	mov	r2,r20
    d1d4:	003d8506 	br	c7ec <__alt_data_end+0xfffec7ec>
    d1d8:	8880100c 	andi	r2,r17,64
    d1dc:	10002b26 	beq	r2,zero,d28c <___vfiprintf_internal_r+0x1280>
    d1e0:	d8802217 	ldw	r2,136(sp)
    d1e4:	0029883a 	mov	r20,zero
    d1e8:	14c0000b 	ldhu	r19,0(r2)
    d1ec:	10800104 	addi	r2,r2,4
    d1f0:	d8802215 	stw	r2,136(sp)
    d1f4:	003d5d06 	br	c76c <__alt_data_end+0xfffec76c>
    d1f8:	d9402017 	ldw	r5,128(sp)
    d1fc:	d9002117 	ldw	r4,132(sp)
    d200:	d9801a04 	addi	r6,sp,104
    d204:	d8c02a15 	stw	r3,168(sp)
    d208:	d9c02b15 	stw	r7,172(sp)
    d20c:	000bef80 	call	bef8 <__sprint_r.part.0>
    d210:	d8c02a17 	ldw	r3,168(sp)
    d214:	d9c02b17 	ldw	r7,172(sp)
    d218:	103eb41e 	bne	r2,zero,ccec <__alt_data_end+0xfffeccec>
    d21c:	d9001b17 	ldw	r4,108(sp)
    d220:	d8801c17 	ldw	r2,112(sp)
    d224:	d811883a 	mov	r8,sp
    d228:	21400044 	addi	r5,r4,1
    d22c:	003e6706 	br	cbcc <__alt_data_end+0xfffecbcc>
    d230:	00bfffc4 	movi	r2,-1
    d234:	003c4a06 	br	c360 <__alt_data_end+0xfffec360>
    d238:	9805883a 	mov	r2,r19
    d23c:	003ee806 	br	cde0 <__alt_data_end+0xfffecde0>
    d240:	d8c02217 	ldw	r3,136(sp)
    d244:	0029883a 	mov	r20,zero
    d248:	18800104 	addi	r2,r3,4
    d24c:	1cc0000b 	ldhu	r19,0(r3)
    d250:	803f9e0e 	bge	r16,zero,d0cc <__alt_data_end+0xfffed0cc>
    d254:	003dd706 	br	c9b4 <__alt_data_end+0xfffec9b4>
    d258:	d8c02217 	ldw	r3,136(sp)
    d25c:	d9002417 	ldw	r4,144(sp)
    d260:	18800017 	ldw	r2,0(r3)
    d264:	18c00104 	addi	r3,r3,4
    d268:	d8c02215 	stw	r3,136(sp)
    d26c:	11000015 	stw	r4,0(r2)
    d270:	003b9a06 	br	c0dc <__alt_data_end+0xfffec0dc>
    d274:	d8c02217 	ldw	r3,136(sp)
    d278:	0029883a 	mov	r20,zero
    d27c:	18800104 	addi	r2,r3,4
    d280:	1cc0000b 	ldhu	r19,0(r3)
    d284:	803db20e 	bge	r16,zero,c950 <__alt_data_end+0xfffec950>
    d288:	003fb906 	br	d170 <__alt_data_end+0xfffed170>
    d28c:	d9002217 	ldw	r4,136(sp)
    d290:	0029883a 	mov	r20,zero
    d294:	24c00017 	ldw	r19,0(r4)
    d298:	21000104 	addi	r4,r4,4
    d29c:	d9002215 	stw	r4,136(sp)
    d2a0:	003d3206 	br	c76c <__alt_data_end+0xfffec76c>
    d2a4:	d8c02217 	ldw	r3,136(sp)
    d2a8:	1cc00017 	ldw	r19,0(r3)
    d2ac:	18c00104 	addi	r3,r3,4
    d2b0:	d8c02215 	stw	r3,136(sp)
    d2b4:	9829d7fa 	srai	r20,r19,31
    d2b8:	a005883a 	mov	r2,r20
    d2bc:	003d4b06 	br	c7ec <__alt_data_end+0xfffec7ec>
    d2c0:	0009883a 	mov	r4,zero
    d2c4:	01400044 	movi	r5,1
    d2c8:	d811883a 	mov	r8,sp
    d2cc:	003e4f06 	br	cc0c <__alt_data_end+0xfffecc0c>
    d2d0:	d8c02215 	stw	r3,136(sp)
    d2d4:	002b883a 	mov	r21,zero
    d2d8:	003db806 	br	c9bc <__alt_data_end+0xfffec9bc>
    d2dc:	d811883a 	mov	r8,sp
    d2e0:	003e9606 	br	cd3c <__alt_data_end+0xfffecd3c>
    d2e4:	01000074 	movhi	r4,1
    d2e8:	2104f604 	addi	r4,r4,5080
    d2ec:	d9002315 	stw	r4,140(sp)
    d2f0:	003e6306 	br	cc80 <__alt_data_end+0xfffecc80>
    d2f4:	b0c00043 	ldbu	r3,1(r22)
    d2f8:	8c400814 	ori	r17,r17,32
    d2fc:	b5800044 	addi	r22,r22,1
    d300:	18c03fcc 	andi	r3,r3,255
    d304:	18c0201c 	xori	r3,r3,128
    d308:	18ffe004 	addi	r3,r3,-128
    d30c:	003b9c06 	br	c180 <__alt_data_end+0xfffec180>
    d310:	b809883a 	mov	r4,r23
    d314:	da002a15 	stw	r8,168(sp)
    d318:	0005d640 	call	5d64 <strlen>
    d31c:	1029883a 	mov	r20,r2
    d320:	dd401d83 	ldbu	r21,118(sp)
    d324:	df002215 	stw	fp,136(sp)
    d328:	0021883a 	mov	r16,zero
    d32c:	da002a17 	ldw	r8,168(sp)
    d330:	003c3906 	br	c418 <__alt_data_end+0xfffec418>
    d334:	d9402017 	ldw	r5,128(sp)
    d338:	d9002117 	ldw	r4,132(sp)
    d33c:	d9801a04 	addi	r6,sp,104
    d340:	000bef80 	call	bef8 <__sprint_r.part.0>
    d344:	103e691e 	bne	r2,zero,ccec <__alt_data_end+0xfffeccec>
    d348:	d9001b17 	ldw	r4,108(sp)
    d34c:	d8801c17 	ldw	r2,112(sp)
    d350:	d811883a 	mov	r8,sp
    d354:	21400044 	addi	r5,r4,1
    d358:	003e2e06 	br	cc14 <__alt_data_end+0xfffecc14>
    d35c:	01000074 	movhi	r4,1
    d360:	2104fa04 	addi	r4,r4,5096
    d364:	d9002315 	stw	r4,140(sp)
    d368:	d9001b17 	ldw	r4,108(sp)
    d36c:	21000044 	addi	r4,r4,1
    d370:	003c5e06 	br	c4ec <__alt_data_end+0xfffec4ec>
    d374:	002b883a 	mov	r21,zero
    d378:	00800084 	movi	r2,2
    d37c:	10803fcc 	andi	r2,r2,255
    d380:	01000044 	movi	r4,1
    d384:	11002b26 	beq	r2,r4,d434 <___vfiprintf_internal_r+0x1428>
    d388:	01000084 	movi	r4,2
    d38c:	11002b1e 	bne	r2,r4,d43c <___vfiprintf_internal_r+0x1430>
    d390:	1823883a 	mov	r17,r3
    d394:	003ee506 	br	cf2c <__alt_data_end+0xfffecf2c>
    d398:	8807883a 	mov	r3,r17
    d39c:	00800044 	movi	r2,1
    d3a0:	003ff606 	br	d37c <__alt_data_end+0xfffed37c>
    d3a4:	00800184 	movi	r2,6
    d3a8:	1400012e 	bgeu	r2,r16,d3b0 <___vfiprintf_internal_r+0x13a4>
    d3ac:	1021883a 	mov	r16,r2
    d3b0:	8029883a 	mov	r20,r16
    d3b4:	8027883a 	mov	r19,r16
    d3b8:	80002216 	blt	r16,zero,d444 <___vfiprintf_internal_r+0x1438>
    d3bc:	05c00074 	movhi	r23,1
    d3c0:	df002215 	stw	fp,136(sp)
    d3c4:	bdc49b04 	addi	r23,r23,4716
    d3c8:	003cfb06 	br	c7b8 <__alt_data_end+0xfffec7b8>
    d3cc:	d9002217 	ldw	r4,136(sp)
    d3d0:	d9402417 	ldw	r5,144(sp)
    d3d4:	20800017 	ldw	r2,0(r4)
    d3d8:	21000104 	addi	r4,r4,4
    d3dc:	d9002215 	stw	r4,136(sp)
    d3e0:	11400015 	stw	r5,0(r2)
    d3e4:	003b3d06 	br	c0dc <__alt_data_end+0xfffec0dc>
    d3e8:	01400074 	movhi	r5,1
    d3ec:	2944fa04 	addi	r5,r5,5096
    d3f0:	d9402315 	stw	r5,140(sp)
    d3f4:	d9401b17 	ldw	r5,108(sp)
    d3f8:	29400044 	addi	r5,r5,1
    d3fc:	003e6d06 	br	cdb4 <__alt_data_end+0xfffecdb4>
    d400:	8029883a 	mov	r20,r16
    d404:	dd401d83 	ldbu	r21,118(sp)
    d408:	df002215 	stw	fp,136(sp)
    d40c:	0021883a 	mov	r16,zero
    d410:	003c0106 	br	c418 <__alt_data_end+0xfffec418>
    d414:	00c00074 	movhi	r3,1
    d418:	18c4f604 	addi	r3,r3,5080
    d41c:	d8c02315 	stw	r3,140(sp)
    d420:	280d883a 	mov	r6,r5
    d424:	003c6906 	br	c5cc <__alt_data_end+0xfffec5cc>
    d428:	802d883a 	mov	r22,r16
    d42c:	0021883a 	mov	r16,zero
    d430:	003b5406 	br	c184 <__alt_data_end+0xfffec184>
    d434:	1823883a 	mov	r17,r3
    d438:	003cf306 	br	c808 <__alt_data_end+0xfffec808>
    d43c:	1823883a 	mov	r17,r3
    d440:	003cad06 	br	c6f8 <__alt_data_end+0xfffec6f8>
    d444:	0027883a 	mov	r19,zero
    d448:	003fdc06 	br	d3bc <__alt_data_end+0xfffed3bc>
    d44c:	d9402217 	ldw	r5,136(sp)
    d450:	8005883a 	mov	r2,r16
    d454:	b0c00043 	ldbu	r3,1(r22)
    d458:	2c000017 	ldw	r16,0(r5)
    d45c:	29000104 	addi	r4,r5,4
    d460:	d9002215 	stw	r4,136(sp)
    d464:	102d883a 	mov	r22,r2
    d468:	803fa50e 	bge	r16,zero,d300 <__alt_data_end+0xfffed300>
    d46c:	18c03fcc 	andi	r3,r3,255
    d470:	18c0201c 	xori	r3,r3,128
    d474:	043fffc4 	movi	r16,-1
    d478:	18ffe004 	addi	r3,r3,-128
    d47c:	003b4006 	br	c180 <__alt_data_end+0xfffec180>
    d480:	d9402303 	ldbu	r5,140(sp)
    d484:	d9401d85 	stb	r5,118(sp)
    d488:	003cae06 	br	c744 <__alt_data_end+0xfffec744>
    d48c:	d8c02303 	ldbu	r3,140(sp)
    d490:	d8c01d85 	stb	r3,118(sp)
    d494:	003d1406 	br	c8e8 <__alt_data_end+0xfffec8e8>
    d498:	d8c02303 	ldbu	r3,140(sp)
    d49c:	d8c01d85 	stb	r3,118(sp)
    d4a0:	003cca06 	br	c7cc <__alt_data_end+0xfffec7cc>
    d4a4:	8880004c 	andi	r2,r17,1
    d4a8:	002b883a 	mov	r21,zero
    d4ac:	10000526 	beq	r2,zero,d4c4 <___vfiprintf_internal_r+0x14b8>
    d4b0:	00800c04 	movi	r2,48
    d4b4:	d88019c5 	stb	r2,103(sp)
    d4b8:	dd002817 	ldw	r20,160(sp)
    d4bc:	ddc019c4 	addi	r23,sp,103
    d4c0:	003bd506 	br	c418 <__alt_data_end+0xfffec418>
    d4c4:	0029883a 	mov	r20,zero
    d4c8:	ddc01a04 	addi	r23,sp,104
    d4cc:	003bd206 	br	c418 <__alt_data_end+0xfffec418>
    d4d0:	d9002303 	ldbu	r4,140(sp)
    d4d4:	d9001d85 	stb	r4,118(sp)
    d4d8:	003da606 	br	cb74 <__alt_data_end+0xfffecb74>
    d4dc:	d8c02303 	ldbu	r3,140(sp)
    d4e0:	d8c01d85 	stb	r3,118(sp)
    d4e4:	003c7606 	br	c6c0 <__alt_data_end+0xfffec6c0>
    d4e8:	d8c02303 	ldbu	r3,140(sp)
    d4ec:	d8c01d85 	stb	r3,118(sp)
    d4f0:	003c6506 	br	c688 <__alt_data_end+0xfffec688>
    d4f4:	d9002303 	ldbu	r4,140(sp)
    d4f8:	d9001d85 	stb	r4,118(sp)
    d4fc:	003d3d06 	br	c9f4 <__alt_data_end+0xfffec9f4>
    d500:	d8c02303 	ldbu	r3,140(sp)
    d504:	d8c01d85 	stb	r3,118(sp)
    d508:	003d1d06 	br	c980 <__alt_data_end+0xfffec980>
    d50c:	d8c02303 	ldbu	r3,140(sp)
    d510:	d8c01d85 	stb	r3,118(sp)
    d514:	003d0306 	br	c924 <__alt_data_end+0xfffec924>

0000d518 <__vfiprintf_internal>:
    d518:	00800074 	movhi	r2,1
    d51c:	108bb704 	addi	r2,r2,11996
    d520:	300f883a 	mov	r7,r6
    d524:	280d883a 	mov	r6,r5
    d528:	200b883a 	mov	r5,r4
    d52c:	11000017 	ldw	r4,0(r2)
    d530:	000c00c1 	jmpi	c00c <___vfiprintf_internal_r>

0000d534 <__sbprintf>:
    d534:	2880030b 	ldhu	r2,12(r5)
    d538:	2ac01917 	ldw	r11,100(r5)
    d53c:	2a80038b 	ldhu	r10,14(r5)
    d540:	2a400717 	ldw	r9,28(r5)
    d544:	2a000917 	ldw	r8,36(r5)
    d548:	defee204 	addi	sp,sp,-1144
    d54c:	00c10004 	movi	r3,1024
    d550:	dc011a15 	stw	r16,1128(sp)
    d554:	10bfff4c 	andi	r2,r2,65533
    d558:	2821883a 	mov	r16,r5
    d55c:	d8cb883a 	add	r5,sp,r3
    d560:	dc811c15 	stw	r18,1136(sp)
    d564:	dc411b15 	stw	r17,1132(sp)
    d568:	dfc11d15 	stw	ra,1140(sp)
    d56c:	2025883a 	mov	r18,r4
    d570:	d881030d 	sth	r2,1036(sp)
    d574:	dac11915 	stw	r11,1124(sp)
    d578:	da81038d 	sth	r10,1038(sp)
    d57c:	da410715 	stw	r9,1052(sp)
    d580:	da010915 	stw	r8,1060(sp)
    d584:	dec10015 	stw	sp,1024(sp)
    d588:	dec10415 	stw	sp,1040(sp)
    d58c:	d8c10215 	stw	r3,1032(sp)
    d590:	d8c10515 	stw	r3,1044(sp)
    d594:	d8010615 	stw	zero,1048(sp)
    d598:	000c00c0 	call	c00c <___vfiprintf_internal_r>
    d59c:	1023883a 	mov	r17,r2
    d5a0:	10000416 	blt	r2,zero,d5b4 <__sbprintf+0x80>
    d5a4:	d9410004 	addi	r5,sp,1024
    d5a8:	9009883a 	mov	r4,r18
    d5ac:	00039bc0 	call	39bc <_fflush_r>
    d5b0:	10000d1e 	bne	r2,zero,d5e8 <__sbprintf+0xb4>
    d5b4:	d881030b 	ldhu	r2,1036(sp)
    d5b8:	1080100c 	andi	r2,r2,64
    d5bc:	10000326 	beq	r2,zero,d5cc <__sbprintf+0x98>
    d5c0:	8080030b 	ldhu	r2,12(r16)
    d5c4:	10801014 	ori	r2,r2,64
    d5c8:	8080030d 	sth	r2,12(r16)
    d5cc:	8805883a 	mov	r2,r17
    d5d0:	dfc11d17 	ldw	ra,1140(sp)
    d5d4:	dc811c17 	ldw	r18,1136(sp)
    d5d8:	dc411b17 	ldw	r17,1132(sp)
    d5dc:	dc011a17 	ldw	r16,1128(sp)
    d5e0:	dec11e04 	addi	sp,sp,1144
    d5e4:	f800283a 	ret
    d5e8:	047fffc4 	movi	r17,-1
    d5ec:	003ff106 	br	d5b4 <__alt_data_end+0xfffed5b4>

0000d5f0 <_calloc_r>:
    d5f0:	defffe04 	addi	sp,sp,-8
    d5f4:	2805883a 	mov	r2,r5
    d5f8:	dc000015 	stw	r16,0(sp)
    d5fc:	300b883a 	mov	r5,r6
    d600:	2021883a 	mov	r16,r4
    d604:	1009883a 	mov	r4,r2
    d608:	dfc00115 	stw	ra,4(sp)
    d60c:	0000e880 	call	e88 <__mulsi3>
    d610:	100b883a 	mov	r5,r2
    d614:	8009883a 	mov	r4,r16
    d618:	0004dc80 	call	4dc8 <_malloc_r>
    d61c:	10002926 	beq	r2,zero,d6c4 <_calloc_r+0xd4>
    d620:	11bfff17 	ldw	r6,-4(r2)
    d624:	1021883a 	mov	r16,r2
    d628:	00bfff04 	movi	r2,-4
    d62c:	308c703a 	and	r6,r6,r2
    d630:	00c00904 	movi	r3,36
    d634:	308d883a 	add	r6,r6,r2
    d638:	19801636 	bltu	r3,r6,d694 <_calloc_r+0xa4>
    d63c:	008004c4 	movi	r2,19
    d640:	11800b2e 	bgeu	r2,r6,d670 <_calloc_r+0x80>
    d644:	80000015 	stw	zero,0(r16)
    d648:	80000115 	stw	zero,4(r16)
    d64c:	008006c4 	movi	r2,27
    d650:	11801a2e 	bgeu	r2,r6,d6bc <_calloc_r+0xcc>
    d654:	80000215 	stw	zero,8(r16)
    d658:	80000315 	stw	zero,12(r16)
    d65c:	30c0151e 	bne	r6,r3,d6b4 <_calloc_r+0xc4>
    d660:	80000415 	stw	zero,16(r16)
    d664:	80800604 	addi	r2,r16,24
    d668:	80000515 	stw	zero,20(r16)
    d66c:	00000106 	br	d674 <_calloc_r+0x84>
    d670:	8005883a 	mov	r2,r16
    d674:	10000015 	stw	zero,0(r2)
    d678:	10000115 	stw	zero,4(r2)
    d67c:	10000215 	stw	zero,8(r2)
    d680:	8005883a 	mov	r2,r16
    d684:	dfc00117 	ldw	ra,4(sp)
    d688:	dc000017 	ldw	r16,0(sp)
    d68c:	dec00204 	addi	sp,sp,8
    d690:	f800283a 	ret
    d694:	000b883a 	mov	r5,zero
    d698:	8009883a 	mov	r4,r16
    d69c:	000571c0 	call	571c <memset>
    d6a0:	8005883a 	mov	r2,r16
    d6a4:	dfc00117 	ldw	ra,4(sp)
    d6a8:	dc000017 	ldw	r16,0(sp)
    d6ac:	dec00204 	addi	sp,sp,8
    d6b0:	f800283a 	ret
    d6b4:	80800404 	addi	r2,r16,16
    d6b8:	003fee06 	br	d674 <__alt_data_end+0xfffed674>
    d6bc:	80800204 	addi	r2,r16,8
    d6c0:	003fec06 	br	d674 <__alt_data_end+0xfffed674>
    d6c4:	0005883a 	mov	r2,zero
    d6c8:	003fee06 	br	d684 <__alt_data_end+0xfffed684>

0000d6cc <__fputwc>:
    d6cc:	defff804 	addi	sp,sp,-32
    d6d0:	dcc00415 	stw	r19,16(sp)
    d6d4:	dc800315 	stw	r18,12(sp)
    d6d8:	dc000115 	stw	r16,4(sp)
    d6dc:	dfc00715 	stw	ra,28(sp)
    d6e0:	dd400615 	stw	r21,24(sp)
    d6e4:	dd000515 	stw	r20,20(sp)
    d6e8:	dc400215 	stw	r17,8(sp)
    d6ec:	2027883a 	mov	r19,r4
    d6f0:	2825883a 	mov	r18,r5
    d6f4:	3021883a 	mov	r16,r6
    d6f8:	000a4380 	call	a438 <__locale_mb_cur_max>
    d6fc:	00c00044 	movi	r3,1
    d700:	10c03e26 	beq	r2,r3,d7fc <__fputwc+0x130>
    d704:	81c01704 	addi	r7,r16,92
    d708:	900d883a 	mov	r6,r18
    d70c:	d80b883a 	mov	r5,sp
    d710:	9809883a 	mov	r4,r19
    d714:	000da2c0 	call	da2c <_wcrtomb_r>
    d718:	1029883a 	mov	r20,r2
    d71c:	00bfffc4 	movi	r2,-1
    d720:	a0802026 	beq	r20,r2,d7a4 <__fputwc+0xd8>
    d724:	d9400003 	ldbu	r5,0(sp)
    d728:	a0001c26 	beq	r20,zero,d79c <__fputwc+0xd0>
    d72c:	0023883a 	mov	r17,zero
    d730:	05400284 	movi	r21,10
    d734:	00000906 	br	d75c <__fputwc+0x90>
    d738:	80800017 	ldw	r2,0(r16)
    d73c:	11400005 	stb	r5,0(r2)
    d740:	80c00017 	ldw	r3,0(r16)
    d744:	18c00044 	addi	r3,r3,1
    d748:	80c00015 	stw	r3,0(r16)
    d74c:	8c400044 	addi	r17,r17,1
    d750:	dc45883a 	add	r2,sp,r17
    d754:	8d00112e 	bgeu	r17,r20,d79c <__fputwc+0xd0>
    d758:	11400003 	ldbu	r5,0(r2)
    d75c:	80c00217 	ldw	r3,8(r16)
    d760:	18ffffc4 	addi	r3,r3,-1
    d764:	80c00215 	stw	r3,8(r16)
    d768:	183ff30e 	bge	r3,zero,d738 <__alt_data_end+0xfffed738>
    d76c:	80800617 	ldw	r2,24(r16)
    d770:	18801916 	blt	r3,r2,d7d8 <__fputwc+0x10c>
    d774:	80800017 	ldw	r2,0(r16)
    d778:	11400005 	stb	r5,0(r2)
    d77c:	80800017 	ldw	r2,0(r16)
    d780:	10c00003 	ldbu	r3,0(r2)
    d784:	10800044 	addi	r2,r2,1
    d788:	1d402326 	beq	r3,r21,d818 <__fputwc+0x14c>
    d78c:	80800015 	stw	r2,0(r16)
    d790:	8c400044 	addi	r17,r17,1
    d794:	dc45883a 	add	r2,sp,r17
    d798:	8d3fef36 	bltu	r17,r20,d758 <__alt_data_end+0xfffed758>
    d79c:	9005883a 	mov	r2,r18
    d7a0:	00000406 	br	d7b4 <__fputwc+0xe8>
    d7a4:	80c0030b 	ldhu	r3,12(r16)
    d7a8:	a005883a 	mov	r2,r20
    d7ac:	18c01014 	ori	r3,r3,64
    d7b0:	80c0030d 	sth	r3,12(r16)
    d7b4:	dfc00717 	ldw	ra,28(sp)
    d7b8:	dd400617 	ldw	r21,24(sp)
    d7bc:	dd000517 	ldw	r20,20(sp)
    d7c0:	dcc00417 	ldw	r19,16(sp)
    d7c4:	dc800317 	ldw	r18,12(sp)
    d7c8:	dc400217 	ldw	r17,8(sp)
    d7cc:	dc000117 	ldw	r16,4(sp)
    d7d0:	dec00804 	addi	sp,sp,32
    d7d4:	f800283a 	ret
    d7d8:	800d883a 	mov	r6,r16
    d7dc:	29403fcc 	andi	r5,r5,255
    d7e0:	9809883a 	mov	r4,r19
    d7e4:	000d8d40 	call	d8d4 <__swbuf_r>
    d7e8:	10bfffe0 	cmpeqi	r2,r2,-1
    d7ec:	10803fcc 	andi	r2,r2,255
    d7f0:	103fd626 	beq	r2,zero,d74c <__alt_data_end+0xfffed74c>
    d7f4:	00bfffc4 	movi	r2,-1
    d7f8:	003fee06 	br	d7b4 <__alt_data_end+0xfffed7b4>
    d7fc:	90ffffc4 	addi	r3,r18,-1
    d800:	01003f84 	movi	r4,254
    d804:	20ffbf36 	bltu	r4,r3,d704 <__alt_data_end+0xfffed704>
    d808:	900b883a 	mov	r5,r18
    d80c:	dc800005 	stb	r18,0(sp)
    d810:	1029883a 	mov	r20,r2
    d814:	003fc506 	br	d72c <__alt_data_end+0xfffed72c>
    d818:	800d883a 	mov	r6,r16
    d81c:	a80b883a 	mov	r5,r21
    d820:	9809883a 	mov	r4,r19
    d824:	000d8d40 	call	d8d4 <__swbuf_r>
    d828:	10bfffe0 	cmpeqi	r2,r2,-1
    d82c:	003fef06 	br	d7ec <__alt_data_end+0xfffed7ec>

0000d830 <_fputwc_r>:
    d830:	3080030b 	ldhu	r2,12(r6)
    d834:	10c8000c 	andi	r3,r2,8192
    d838:	1800051e 	bne	r3,zero,d850 <_fputwc_r+0x20>
    d83c:	30c01917 	ldw	r3,100(r6)
    d840:	10880014 	ori	r2,r2,8192
    d844:	3080030d 	sth	r2,12(r6)
    d848:	18880014 	ori	r2,r3,8192
    d84c:	30801915 	stw	r2,100(r6)
    d850:	000d6cc1 	jmpi	d6cc <__fputwc>

0000d854 <fputwc>:
    d854:	00800074 	movhi	r2,1
    d858:	defffc04 	addi	sp,sp,-16
    d85c:	108bb704 	addi	r2,r2,11996
    d860:	dc000115 	stw	r16,4(sp)
    d864:	14000017 	ldw	r16,0(r2)
    d868:	dc400215 	stw	r17,8(sp)
    d86c:	dfc00315 	stw	ra,12(sp)
    d870:	2023883a 	mov	r17,r4
    d874:	80000226 	beq	r16,zero,d880 <fputwc+0x2c>
    d878:	80800e17 	ldw	r2,56(r16)
    d87c:	10001026 	beq	r2,zero,d8c0 <fputwc+0x6c>
    d880:	2880030b 	ldhu	r2,12(r5)
    d884:	10c8000c 	andi	r3,r2,8192
    d888:	1800051e 	bne	r3,zero,d8a0 <fputwc+0x4c>
    d88c:	28c01917 	ldw	r3,100(r5)
    d890:	10880014 	ori	r2,r2,8192
    d894:	2880030d 	sth	r2,12(r5)
    d898:	18880014 	ori	r2,r3,8192
    d89c:	28801915 	stw	r2,100(r5)
    d8a0:	280d883a 	mov	r6,r5
    d8a4:	8009883a 	mov	r4,r16
    d8a8:	880b883a 	mov	r5,r17
    d8ac:	dfc00317 	ldw	ra,12(sp)
    d8b0:	dc400217 	ldw	r17,8(sp)
    d8b4:	dc000117 	ldw	r16,4(sp)
    d8b8:	dec00404 	addi	sp,sp,16
    d8bc:	000d6cc1 	jmpi	d6cc <__fputwc>
    d8c0:	8009883a 	mov	r4,r16
    d8c4:	d9400015 	stw	r5,0(sp)
    d8c8:	0003da80 	call	3da8 <__sinit>
    d8cc:	d9400017 	ldw	r5,0(sp)
    d8d0:	003feb06 	br	d880 <__alt_data_end+0xfffed880>

0000d8d4 <__swbuf_r>:
    d8d4:	defffb04 	addi	sp,sp,-20
    d8d8:	dcc00315 	stw	r19,12(sp)
    d8dc:	dc800215 	stw	r18,8(sp)
    d8e0:	dc000015 	stw	r16,0(sp)
    d8e4:	dfc00415 	stw	ra,16(sp)
    d8e8:	dc400115 	stw	r17,4(sp)
    d8ec:	2025883a 	mov	r18,r4
    d8f0:	2827883a 	mov	r19,r5
    d8f4:	3021883a 	mov	r16,r6
    d8f8:	20000226 	beq	r4,zero,d904 <__swbuf_r+0x30>
    d8fc:	20800e17 	ldw	r2,56(r4)
    d900:	10004226 	beq	r2,zero,da0c <__swbuf_r+0x138>
    d904:	80800617 	ldw	r2,24(r16)
    d908:	8100030b 	ldhu	r4,12(r16)
    d90c:	80800215 	stw	r2,8(r16)
    d910:	2080020c 	andi	r2,r4,8
    d914:	10003626 	beq	r2,zero,d9f0 <__swbuf_r+0x11c>
    d918:	80c00417 	ldw	r3,16(r16)
    d91c:	18003426 	beq	r3,zero,d9f0 <__swbuf_r+0x11c>
    d920:	2088000c 	andi	r2,r4,8192
    d924:	9c403fcc 	andi	r17,r19,255
    d928:	10001a26 	beq	r2,zero,d994 <__swbuf_r+0xc0>
    d92c:	80800017 	ldw	r2,0(r16)
    d930:	81000517 	ldw	r4,20(r16)
    d934:	10c7c83a 	sub	r3,r2,r3
    d938:	1900200e 	bge	r3,r4,d9bc <__swbuf_r+0xe8>
    d93c:	18c00044 	addi	r3,r3,1
    d940:	81000217 	ldw	r4,8(r16)
    d944:	11400044 	addi	r5,r2,1
    d948:	81400015 	stw	r5,0(r16)
    d94c:	213fffc4 	addi	r4,r4,-1
    d950:	81000215 	stw	r4,8(r16)
    d954:	14c00005 	stb	r19,0(r2)
    d958:	80800517 	ldw	r2,20(r16)
    d95c:	10c01e26 	beq	r2,r3,d9d8 <__swbuf_r+0x104>
    d960:	8080030b 	ldhu	r2,12(r16)
    d964:	1080004c 	andi	r2,r2,1
    d968:	10000226 	beq	r2,zero,d974 <__swbuf_r+0xa0>
    d96c:	00800284 	movi	r2,10
    d970:	88801926 	beq	r17,r2,d9d8 <__swbuf_r+0x104>
    d974:	8805883a 	mov	r2,r17
    d978:	dfc00417 	ldw	ra,16(sp)
    d97c:	dcc00317 	ldw	r19,12(sp)
    d980:	dc800217 	ldw	r18,8(sp)
    d984:	dc400117 	ldw	r17,4(sp)
    d988:	dc000017 	ldw	r16,0(sp)
    d98c:	dec00504 	addi	sp,sp,20
    d990:	f800283a 	ret
    d994:	81401917 	ldw	r5,100(r16)
    d998:	00b7ffc4 	movi	r2,-8193
    d99c:	21080014 	ori	r4,r4,8192
    d9a0:	2884703a 	and	r2,r5,r2
    d9a4:	80801915 	stw	r2,100(r16)
    d9a8:	80800017 	ldw	r2,0(r16)
    d9ac:	8100030d 	sth	r4,12(r16)
    d9b0:	81000517 	ldw	r4,20(r16)
    d9b4:	10c7c83a 	sub	r3,r2,r3
    d9b8:	193fe016 	blt	r3,r4,d93c <__alt_data_end+0xfffed93c>
    d9bc:	800b883a 	mov	r5,r16
    d9c0:	9009883a 	mov	r4,r18
    d9c4:	00039bc0 	call	39bc <_fflush_r>
    d9c8:	1000071e 	bne	r2,zero,d9e8 <__swbuf_r+0x114>
    d9cc:	80800017 	ldw	r2,0(r16)
    d9d0:	00c00044 	movi	r3,1
    d9d4:	003fda06 	br	d940 <__alt_data_end+0xfffed940>
    d9d8:	800b883a 	mov	r5,r16
    d9dc:	9009883a 	mov	r4,r18
    d9e0:	00039bc0 	call	39bc <_fflush_r>
    d9e4:	103fe326 	beq	r2,zero,d974 <__alt_data_end+0xfffed974>
    d9e8:	00bfffc4 	movi	r2,-1
    d9ec:	003fe206 	br	d978 <__alt_data_end+0xfffed978>
    d9f0:	800b883a 	mov	r5,r16
    d9f4:	9009883a 	mov	r4,r18
    d9f8:	00082100 	call	8210 <__swsetup_r>
    d9fc:	103ffa1e 	bne	r2,zero,d9e8 <__alt_data_end+0xfffed9e8>
    da00:	8100030b 	ldhu	r4,12(r16)
    da04:	80c00417 	ldw	r3,16(r16)
    da08:	003fc506 	br	d920 <__alt_data_end+0xfffed920>
    da0c:	0003da80 	call	3da8 <__sinit>
    da10:	003fbc06 	br	d904 <__alt_data_end+0xfffed904>

0000da14 <__swbuf>:
    da14:	00800074 	movhi	r2,1
    da18:	108bb704 	addi	r2,r2,11996
    da1c:	280d883a 	mov	r6,r5
    da20:	200b883a 	mov	r5,r4
    da24:	11000017 	ldw	r4,0(r2)
    da28:	000d8d41 	jmpi	d8d4 <__swbuf_r>

0000da2c <_wcrtomb_r>:
    da2c:	defff604 	addi	sp,sp,-40
    da30:	00800074 	movhi	r2,1
    da34:	dc800815 	stw	r18,32(sp)
    da38:	dc400715 	stw	r17,28(sp)
    da3c:	dc000615 	stw	r16,24(sp)
    da40:	108bbb04 	addi	r2,r2,12012
    da44:	dfc00915 	stw	ra,36(sp)
    da48:	2021883a 	mov	r16,r4
    da4c:	3823883a 	mov	r17,r7
    da50:	14800017 	ldw	r18,0(r2)
    da54:	28001426 	beq	r5,zero,daa8 <_wcrtomb_r+0x7c>
    da58:	d9400415 	stw	r5,16(sp)
    da5c:	d9800515 	stw	r6,20(sp)
    da60:	000a42c0 	call	a42c <__locale_charset>
    da64:	d9800517 	ldw	r6,20(sp)
    da68:	d9400417 	ldw	r5,16(sp)
    da6c:	100f883a 	mov	r7,r2
    da70:	dc400015 	stw	r17,0(sp)
    da74:	8009883a 	mov	r4,r16
    da78:	903ee83a 	callr	r18
    da7c:	00ffffc4 	movi	r3,-1
    da80:	10c0031e 	bne	r2,r3,da90 <_wcrtomb_r+0x64>
    da84:	88000015 	stw	zero,0(r17)
    da88:	00c02284 	movi	r3,138
    da8c:	80c00015 	stw	r3,0(r16)
    da90:	dfc00917 	ldw	ra,36(sp)
    da94:	dc800817 	ldw	r18,32(sp)
    da98:	dc400717 	ldw	r17,28(sp)
    da9c:	dc000617 	ldw	r16,24(sp)
    daa0:	dec00a04 	addi	sp,sp,40
    daa4:	f800283a 	ret
    daa8:	000a42c0 	call	a42c <__locale_charset>
    daac:	100f883a 	mov	r7,r2
    dab0:	dc400015 	stw	r17,0(sp)
    dab4:	000d883a 	mov	r6,zero
    dab8:	d9400104 	addi	r5,sp,4
    dabc:	8009883a 	mov	r4,r16
    dac0:	903ee83a 	callr	r18
    dac4:	003fed06 	br	da7c <__alt_data_end+0xfffeda7c>

0000dac8 <wcrtomb>:
    dac8:	defff604 	addi	sp,sp,-40
    dacc:	00800074 	movhi	r2,1
    dad0:	dc800615 	stw	r18,24(sp)
    dad4:	dc400515 	stw	r17,20(sp)
    dad8:	108bb704 	addi	r2,r2,11996
    dadc:	dfc00915 	stw	ra,36(sp)
    dae0:	dd000815 	stw	r20,32(sp)
    dae4:	dcc00715 	stw	r19,28(sp)
    dae8:	dc000415 	stw	r16,16(sp)
    daec:	3025883a 	mov	r18,r6
    daf0:	14400017 	ldw	r17,0(r2)
    daf4:	20001926 	beq	r4,zero,db5c <wcrtomb+0x94>
    daf8:	00800074 	movhi	r2,1
    dafc:	108bbb04 	addi	r2,r2,12012
    db00:	15000017 	ldw	r20,0(r2)
    db04:	2021883a 	mov	r16,r4
    db08:	2827883a 	mov	r19,r5
    db0c:	000a42c0 	call	a42c <__locale_charset>
    db10:	100f883a 	mov	r7,r2
    db14:	dc800015 	stw	r18,0(sp)
    db18:	980d883a 	mov	r6,r19
    db1c:	800b883a 	mov	r5,r16
    db20:	8809883a 	mov	r4,r17
    db24:	a03ee83a 	callr	r20
    db28:	00ffffc4 	movi	r3,-1
    db2c:	10c0031e 	bne	r2,r3,db3c <wcrtomb+0x74>
    db30:	90000015 	stw	zero,0(r18)
    db34:	00c02284 	movi	r3,138
    db38:	88c00015 	stw	r3,0(r17)
    db3c:	dfc00917 	ldw	ra,36(sp)
    db40:	dd000817 	ldw	r20,32(sp)
    db44:	dcc00717 	ldw	r19,28(sp)
    db48:	dc800617 	ldw	r18,24(sp)
    db4c:	dc400517 	ldw	r17,20(sp)
    db50:	dc000417 	ldw	r16,16(sp)
    db54:	dec00a04 	addi	sp,sp,40
    db58:	f800283a 	ret
    db5c:	00800074 	movhi	r2,1
    db60:	108bbb04 	addi	r2,r2,12012
    db64:	14000017 	ldw	r16,0(r2)
    db68:	000a42c0 	call	a42c <__locale_charset>
    db6c:	100f883a 	mov	r7,r2
    db70:	dc800015 	stw	r18,0(sp)
    db74:	000d883a 	mov	r6,zero
    db78:	d9400104 	addi	r5,sp,4
    db7c:	8809883a 	mov	r4,r17
    db80:	803ee83a 	callr	r16
    db84:	003fe806 	br	db28 <__alt_data_end+0xfffedb28>

0000db88 <__ascii_wctomb>:
    db88:	28000526 	beq	r5,zero,dba0 <__ascii_wctomb+0x18>
    db8c:	00803fc4 	movi	r2,255
    db90:	11800536 	bltu	r2,r6,dba8 <__ascii_wctomb+0x20>
    db94:	29800005 	stb	r6,0(r5)
    db98:	00800044 	movi	r2,1
    db9c:	f800283a 	ret
    dba0:	0005883a 	mov	r2,zero
    dba4:	f800283a 	ret
    dba8:	00802284 	movi	r2,138
    dbac:	20800015 	stw	r2,0(r4)
    dbb0:	00bfffc4 	movi	r2,-1
    dbb4:	f800283a 	ret

0000dbb8 <_wctomb_r>:
    dbb8:	00800074 	movhi	r2,1
    dbbc:	defff904 	addi	sp,sp,-28
    dbc0:	108bbb04 	addi	r2,r2,12012
    dbc4:	dfc00615 	stw	ra,24(sp)
    dbc8:	dc400515 	stw	r17,20(sp)
    dbcc:	dc000415 	stw	r16,16(sp)
    dbd0:	3823883a 	mov	r17,r7
    dbd4:	14000017 	ldw	r16,0(r2)
    dbd8:	d9000115 	stw	r4,4(sp)
    dbdc:	d9400215 	stw	r5,8(sp)
    dbe0:	d9800315 	stw	r6,12(sp)
    dbe4:	000a42c0 	call	a42c <__locale_charset>
    dbe8:	d9800317 	ldw	r6,12(sp)
    dbec:	d9400217 	ldw	r5,8(sp)
    dbf0:	d9000117 	ldw	r4,4(sp)
    dbf4:	100f883a 	mov	r7,r2
    dbf8:	dc400015 	stw	r17,0(sp)
    dbfc:	803ee83a 	callr	r16
    dc00:	dfc00617 	ldw	ra,24(sp)
    dc04:	dc400517 	ldw	r17,20(sp)
    dc08:	dc000417 	ldw	r16,16(sp)
    dc0c:	dec00704 	addi	sp,sp,28
    dc10:	f800283a 	ret

0000dc14 <__udivdi3>:
    dc14:	defff404 	addi	sp,sp,-48
    dc18:	dcc00515 	stw	r19,20(sp)
    dc1c:	dc000215 	stw	r16,8(sp)
    dc20:	dfc00b15 	stw	ra,44(sp)
    dc24:	df000a15 	stw	fp,40(sp)
    dc28:	ddc00915 	stw	r23,36(sp)
    dc2c:	dd800815 	stw	r22,32(sp)
    dc30:	dd400715 	stw	r21,28(sp)
    dc34:	dd000615 	stw	r20,24(sp)
    dc38:	dc800415 	stw	r18,16(sp)
    dc3c:	dc400315 	stw	r17,12(sp)
    dc40:	2027883a 	mov	r19,r4
    dc44:	2821883a 	mov	r16,r5
    dc48:	3800461e 	bne	r7,zero,dd64 <__udivdi3+0x150>
    dc4c:	3023883a 	mov	r17,r6
    dc50:	2025883a 	mov	r18,r4
    dc54:	2980572e 	bgeu	r5,r6,ddb4 <__udivdi3+0x1a0>
    dc58:	00bfffd4 	movui	r2,65535
    dc5c:	282d883a 	mov	r22,r5
    dc60:	1180b236 	bltu	r2,r6,df2c <__udivdi3+0x318>
    dc64:	00803fc4 	movi	r2,255
    dc68:	1185803a 	cmpltu	r2,r2,r6
    dc6c:	100490fa 	slli	r2,r2,3
    dc70:	3086d83a 	srl	r3,r6,r2
    dc74:	01000074 	movhi	r4,1
    dc78:	21044ac4 	addi	r4,r4,4395
    dc7c:	20c7883a 	add	r3,r4,r3
    dc80:	18c00003 	ldbu	r3,0(r3)
    dc84:	1885883a 	add	r2,r3,r2
    dc88:	00c00804 	movi	r3,32
    dc8c:	1887c83a 	sub	r3,r3,r2
    dc90:	18000526 	beq	r3,zero,dca8 <__udivdi3+0x94>
    dc94:	80e0983a 	sll	r16,r16,r3
    dc98:	9884d83a 	srl	r2,r19,r2
    dc9c:	30e2983a 	sll	r17,r6,r3
    dca0:	98e4983a 	sll	r18,r19,r3
    dca4:	142cb03a 	or	r22,r2,r16
    dca8:	882ad43a 	srli	r21,r17,16
    dcac:	b009883a 	mov	r4,r22
    dcb0:	8d3fffcc 	andi	r20,r17,65535
    dcb4:	a80b883a 	mov	r5,r21
    dcb8:	000360c0 	call	360c <__umodsi3>
    dcbc:	b009883a 	mov	r4,r22
    dcc0:	a80b883a 	mov	r5,r21
    dcc4:	1027883a 	mov	r19,r2
    dcc8:	00035a80 	call	35a8 <__udivsi3>
    dccc:	100b883a 	mov	r5,r2
    dcd0:	a009883a 	mov	r4,r20
    dcd4:	102d883a 	mov	r22,r2
    dcd8:	0000e880 	call	e88 <__mulsi3>
    dcdc:	9826943a 	slli	r19,r19,16
    dce0:	9006d43a 	srli	r3,r18,16
    dce4:	1cc6b03a 	or	r3,r3,r19
    dce8:	1880052e 	bgeu	r3,r2,dd00 <__udivdi3+0xec>
    dcec:	1c47883a 	add	r3,r3,r17
    dcf0:	b13fffc4 	addi	r4,r22,-1
    dcf4:	1c400136 	bltu	r3,r17,dcfc <__udivdi3+0xe8>
    dcf8:	18814236 	bltu	r3,r2,e204 <__udivdi3+0x5f0>
    dcfc:	202d883a 	mov	r22,r4
    dd00:	18a1c83a 	sub	r16,r3,r2
    dd04:	8009883a 	mov	r4,r16
    dd08:	a80b883a 	mov	r5,r21
    dd0c:	000360c0 	call	360c <__umodsi3>
    dd10:	1027883a 	mov	r19,r2
    dd14:	8009883a 	mov	r4,r16
    dd18:	a80b883a 	mov	r5,r21
    dd1c:	9826943a 	slli	r19,r19,16
    dd20:	00035a80 	call	35a8 <__udivsi3>
    dd24:	100b883a 	mov	r5,r2
    dd28:	a009883a 	mov	r4,r20
    dd2c:	94bfffcc 	andi	r18,r18,65535
    dd30:	1021883a 	mov	r16,r2
    dd34:	94e4b03a 	or	r18,r18,r19
    dd38:	0000e880 	call	e88 <__mulsi3>
    dd3c:	9080052e 	bgeu	r18,r2,dd54 <__udivdi3+0x140>
    dd40:	8ca5883a 	add	r18,r17,r18
    dd44:	80ffffc4 	addi	r3,r16,-1
    dd48:	94410c36 	bltu	r18,r17,e17c <__udivdi3+0x568>
    dd4c:	90810b2e 	bgeu	r18,r2,e17c <__udivdi3+0x568>
    dd50:	843fff84 	addi	r16,r16,-2
    dd54:	b004943a 	slli	r2,r22,16
    dd58:	0007883a 	mov	r3,zero
    dd5c:	1404b03a 	or	r2,r2,r16
    dd60:	00005e06 	br	dedc <__udivdi3+0x2c8>
    dd64:	29c05b36 	bltu	r5,r7,ded4 <__udivdi3+0x2c0>
    dd68:	00bfffd4 	movui	r2,65535
    dd6c:	11c0672e 	bgeu	r2,r7,df0c <__udivdi3+0x2f8>
    dd70:	00804034 	movhi	r2,256
    dd74:	10bfffc4 	addi	r2,r2,-1
    dd78:	11c10a36 	bltu	r2,r7,e1a4 <__udivdi3+0x590>
    dd7c:	00800404 	movi	r2,16
    dd80:	3886d83a 	srl	r3,r7,r2
    dd84:	01000074 	movhi	r4,1
    dd88:	21044ac4 	addi	r4,r4,4395
    dd8c:	20c7883a 	add	r3,r4,r3
    dd90:	18c00003 	ldbu	r3,0(r3)
    dd94:	05c00804 	movi	r23,32
    dd98:	1885883a 	add	r2,r3,r2
    dd9c:	b8afc83a 	sub	r23,r23,r2
    dda0:	b800671e 	bne	r23,zero,df40 <__udivdi3+0x32c>
    dda4:	3c010536 	bltu	r7,r16,e1bc <__udivdi3+0x5a8>
    dda8:	9985403a 	cmpgeu	r2,r19,r6
    ddac:	0007883a 	mov	r3,zero
    ddb0:	00004a06 	br	dedc <__udivdi3+0x2c8>
    ddb4:	3000041e 	bne	r6,zero,ddc8 <__udivdi3+0x1b4>
    ddb8:	000b883a 	mov	r5,zero
    ddbc:	01000044 	movi	r4,1
    ddc0:	00035a80 	call	35a8 <__udivsi3>
    ddc4:	1023883a 	mov	r17,r2
    ddc8:	00bfffd4 	movui	r2,65535
    ddcc:	1440532e 	bgeu	r2,r17,df1c <__udivdi3+0x308>
    ddd0:	00804034 	movhi	r2,256
    ddd4:	10bfffc4 	addi	r2,r2,-1
    ddd8:	1440f436 	bltu	r2,r17,e1ac <__udivdi3+0x598>
    dddc:	00800404 	movi	r2,16
    dde0:	8886d83a 	srl	r3,r17,r2
    dde4:	01000074 	movhi	r4,1
    dde8:	21044ac4 	addi	r4,r4,4395
    ddec:	20c7883a 	add	r3,r4,r3
    ddf0:	18c00003 	ldbu	r3,0(r3)
    ddf4:	1885883a 	add	r2,r3,r2
    ddf8:	00c00804 	movi	r3,32
    ddfc:	1887c83a 	sub	r3,r3,r2
    de00:	1800a51e 	bne	r3,zero,e098 <__udivdi3+0x484>
    de04:	882ad43a 	srli	r21,r17,16
    de08:	8461c83a 	sub	r16,r16,r17
    de0c:	8d3fffcc 	andi	r20,r17,65535
    de10:	00c00044 	movi	r3,1
    de14:	a80b883a 	mov	r5,r21
    de18:	8009883a 	mov	r4,r16
    de1c:	d8c00115 	stw	r3,4(sp)
    de20:	000360c0 	call	360c <__umodsi3>
    de24:	a80b883a 	mov	r5,r21
    de28:	8009883a 	mov	r4,r16
    de2c:	1027883a 	mov	r19,r2
    de30:	00035a80 	call	35a8 <__udivsi3>
    de34:	a00b883a 	mov	r5,r20
    de38:	1009883a 	mov	r4,r2
    de3c:	102d883a 	mov	r22,r2
    de40:	0000e880 	call	e88 <__mulsi3>
    de44:	9826943a 	slli	r19,r19,16
    de48:	900ed43a 	srli	r7,r18,16
    de4c:	d8c00117 	ldw	r3,4(sp)
    de50:	3cceb03a 	or	r7,r7,r19
    de54:	3880052e 	bgeu	r7,r2,de6c <__udivdi3+0x258>
    de58:	3c4f883a 	add	r7,r7,r17
    de5c:	b13fffc4 	addi	r4,r22,-1
    de60:	3c400136 	bltu	r7,r17,de68 <__udivdi3+0x254>
    de64:	3880e436 	bltu	r7,r2,e1f8 <__udivdi3+0x5e4>
    de68:	202d883a 	mov	r22,r4
    de6c:	38a1c83a 	sub	r16,r7,r2
    de70:	8009883a 	mov	r4,r16
    de74:	a80b883a 	mov	r5,r21
    de78:	d8c00115 	stw	r3,4(sp)
    de7c:	000360c0 	call	360c <__umodsi3>
    de80:	1027883a 	mov	r19,r2
    de84:	8009883a 	mov	r4,r16
    de88:	a80b883a 	mov	r5,r21
    de8c:	9826943a 	slli	r19,r19,16
    de90:	00035a80 	call	35a8 <__udivsi3>
    de94:	a00b883a 	mov	r5,r20
    de98:	1009883a 	mov	r4,r2
    de9c:	94bfffcc 	andi	r18,r18,65535
    dea0:	1021883a 	mov	r16,r2
    dea4:	94e4b03a 	or	r18,r18,r19
    dea8:	0000e880 	call	e88 <__mulsi3>
    deac:	d8c00117 	ldw	r3,4(sp)
    deb0:	9080052e 	bgeu	r18,r2,dec8 <__udivdi3+0x2b4>
    deb4:	8ca5883a 	add	r18,r17,r18
    deb8:	813fffc4 	addi	r4,r16,-1
    debc:	9440ad36 	bltu	r18,r17,e174 <__udivdi3+0x560>
    dec0:	9080ac2e 	bgeu	r18,r2,e174 <__udivdi3+0x560>
    dec4:	843fff84 	addi	r16,r16,-2
    dec8:	b004943a 	slli	r2,r22,16
    decc:	1404b03a 	or	r2,r2,r16
    ded0:	00000206 	br	dedc <__udivdi3+0x2c8>
    ded4:	0007883a 	mov	r3,zero
    ded8:	0005883a 	mov	r2,zero
    dedc:	dfc00b17 	ldw	ra,44(sp)
    dee0:	df000a17 	ldw	fp,40(sp)
    dee4:	ddc00917 	ldw	r23,36(sp)
    dee8:	dd800817 	ldw	r22,32(sp)
    deec:	dd400717 	ldw	r21,28(sp)
    def0:	dd000617 	ldw	r20,24(sp)
    def4:	dcc00517 	ldw	r19,20(sp)
    def8:	dc800417 	ldw	r18,16(sp)
    defc:	dc400317 	ldw	r17,12(sp)
    df00:	dc000217 	ldw	r16,8(sp)
    df04:	dec00c04 	addi	sp,sp,48
    df08:	f800283a 	ret
    df0c:	00803fc4 	movi	r2,255
    df10:	11c5803a 	cmpltu	r2,r2,r7
    df14:	100490fa 	slli	r2,r2,3
    df18:	003f9906 	br	dd80 <__alt_data_end+0xfffedd80>
    df1c:	00803fc4 	movi	r2,255
    df20:	1445803a 	cmpltu	r2,r2,r17
    df24:	100490fa 	slli	r2,r2,3
    df28:	003fad06 	br	dde0 <__alt_data_end+0xfffedde0>
    df2c:	00804034 	movhi	r2,256
    df30:	10bfffc4 	addi	r2,r2,-1
    df34:	11809f36 	bltu	r2,r6,e1b4 <__udivdi3+0x5a0>
    df38:	00800404 	movi	r2,16
    df3c:	003f4c06 	br	dc70 <__alt_data_end+0xfffedc70>
    df40:	3dce983a 	sll	r7,r7,r23
    df44:	30b8d83a 	srl	fp,r6,r2
    df48:	80a2d83a 	srl	r17,r16,r2
    df4c:	35cc983a 	sll	r6,r6,r23
    df50:	3f38b03a 	or	fp,r7,fp
    df54:	e024d43a 	srli	r18,fp,16
    df58:	9884d83a 	srl	r2,r19,r2
    df5c:	85e0983a 	sll	r16,r16,r23
    df60:	8809883a 	mov	r4,r17
    df64:	900b883a 	mov	r5,r18
    df68:	d9800015 	stw	r6,0(sp)
    df6c:	1420b03a 	or	r16,r2,r16
    df70:	000360c0 	call	360c <__umodsi3>
    df74:	900b883a 	mov	r5,r18
    df78:	8809883a 	mov	r4,r17
    df7c:	1029883a 	mov	r20,r2
    df80:	e5bfffcc 	andi	r22,fp,65535
    df84:	00035a80 	call	35a8 <__udivsi3>
    df88:	100b883a 	mov	r5,r2
    df8c:	b009883a 	mov	r4,r22
    df90:	102b883a 	mov	r21,r2
    df94:	0000e880 	call	e88 <__mulsi3>
    df98:	a028943a 	slli	r20,r20,16
    df9c:	8006d43a 	srli	r3,r16,16
    dfa0:	1d06b03a 	or	r3,r3,r20
    dfa4:	1880042e 	bgeu	r3,r2,dfb8 <__udivdi3+0x3a4>
    dfa8:	1f07883a 	add	r3,r3,fp
    dfac:	a93fffc4 	addi	r4,r21,-1
    dfb0:	1f00892e 	bgeu	r3,fp,e1d8 <__udivdi3+0x5c4>
    dfb4:	202b883a 	mov	r21,r4
    dfb8:	18a3c83a 	sub	r17,r3,r2
    dfbc:	8809883a 	mov	r4,r17
    dfc0:	900b883a 	mov	r5,r18
    dfc4:	000360c0 	call	360c <__umodsi3>
    dfc8:	1029883a 	mov	r20,r2
    dfcc:	8809883a 	mov	r4,r17
    dfd0:	900b883a 	mov	r5,r18
    dfd4:	a028943a 	slli	r20,r20,16
    dfd8:	00035a80 	call	35a8 <__udivsi3>
    dfdc:	100b883a 	mov	r5,r2
    dfe0:	b009883a 	mov	r4,r22
    dfe4:	843fffcc 	andi	r16,r16,65535
    dfe8:	1023883a 	mov	r17,r2
    dfec:	8520b03a 	or	r16,r16,r20
    dff0:	0000e880 	call	e88 <__mulsi3>
    dff4:	8080042e 	bgeu	r16,r2,e008 <__udivdi3+0x3f4>
    dff8:	8721883a 	add	r16,r16,fp
    dffc:	88ffffc4 	addi	r3,r17,-1
    e000:	8700712e 	bgeu	r16,fp,e1c8 <__udivdi3+0x5b4>
    e004:	1823883a 	mov	r17,r3
    e008:	a80e943a 	slli	r7,r21,16
    e00c:	d8c00017 	ldw	r3,0(sp)
    e010:	80a1c83a 	sub	r16,r16,r2
    e014:	3c64b03a 	or	r18,r7,r17
    e018:	1d3fffcc 	andi	r20,r3,65535
    e01c:	9022d43a 	srli	r17,r18,16
    e020:	95bfffcc 	andi	r22,r18,65535
    e024:	a00b883a 	mov	r5,r20
    e028:	b009883a 	mov	r4,r22
    e02c:	182ad43a 	srli	r21,r3,16
    e030:	0000e880 	call	e88 <__mulsi3>
    e034:	a00b883a 	mov	r5,r20
    e038:	8809883a 	mov	r4,r17
    e03c:	1039883a 	mov	fp,r2
    e040:	0000e880 	call	e88 <__mulsi3>
    e044:	8809883a 	mov	r4,r17
    e048:	a80b883a 	mov	r5,r21
    e04c:	1029883a 	mov	r20,r2
    e050:	0000e880 	call	e88 <__mulsi3>
    e054:	a80b883a 	mov	r5,r21
    e058:	b009883a 	mov	r4,r22
    e05c:	1023883a 	mov	r17,r2
    e060:	0000e880 	call	e88 <__mulsi3>
    e064:	e006d43a 	srli	r3,fp,16
    e068:	1505883a 	add	r2,r2,r20
    e06c:	1887883a 	add	r3,r3,r2
    e070:	1d00022e 	bgeu	r3,r20,e07c <__udivdi3+0x468>
    e074:	00800074 	movhi	r2,1
    e078:	88a3883a 	add	r17,r17,r2
    e07c:	1804d43a 	srli	r2,r3,16
    e080:	1463883a 	add	r17,r2,r17
    e084:	84404436 	bltu	r16,r17,e198 <__udivdi3+0x584>
    e088:	84403e26 	beq	r16,r17,e184 <__udivdi3+0x570>
    e08c:	9005883a 	mov	r2,r18
    e090:	0007883a 	mov	r3,zero
    e094:	003f9106 	br	dedc <__alt_data_end+0xfffededc>
    e098:	88e2983a 	sll	r17,r17,r3
    e09c:	80aed83a 	srl	r23,r16,r2
    e0a0:	80e0983a 	sll	r16,r16,r3
    e0a4:	882ad43a 	srli	r21,r17,16
    e0a8:	9884d83a 	srl	r2,r19,r2
    e0ac:	b809883a 	mov	r4,r23
    e0b0:	a80b883a 	mov	r5,r21
    e0b4:	98e4983a 	sll	r18,r19,r3
    e0b8:	142cb03a 	or	r22,r2,r16
    e0bc:	000360c0 	call	360c <__umodsi3>
    e0c0:	b809883a 	mov	r4,r23
    e0c4:	a80b883a 	mov	r5,r21
    e0c8:	1027883a 	mov	r19,r2
    e0cc:	8d3fffcc 	andi	r20,r17,65535
    e0d0:	00035a80 	call	35a8 <__udivsi3>
    e0d4:	a009883a 	mov	r4,r20
    e0d8:	100b883a 	mov	r5,r2
    e0dc:	102f883a 	mov	r23,r2
    e0e0:	0000e880 	call	e88 <__mulsi3>
    e0e4:	9826943a 	slli	r19,r19,16
    e0e8:	b008d43a 	srli	r4,r22,16
    e0ec:	24c8b03a 	or	r4,r4,r19
    e0f0:	2080062e 	bgeu	r4,r2,e10c <__udivdi3+0x4f8>
    e0f4:	2449883a 	add	r4,r4,r17
    e0f8:	b8ffffc4 	addi	r3,r23,-1
    e0fc:	24403c36 	bltu	r4,r17,e1f0 <__udivdi3+0x5dc>
    e100:	20803b2e 	bgeu	r4,r2,e1f0 <__udivdi3+0x5dc>
    e104:	bdffff84 	addi	r23,r23,-2
    e108:	2449883a 	add	r4,r4,r17
    e10c:	20a1c83a 	sub	r16,r4,r2
    e110:	a80b883a 	mov	r5,r21
    e114:	8009883a 	mov	r4,r16
    e118:	000360c0 	call	360c <__umodsi3>
    e11c:	a80b883a 	mov	r5,r21
    e120:	8009883a 	mov	r4,r16
    e124:	1027883a 	mov	r19,r2
    e128:	00035a80 	call	35a8 <__udivsi3>
    e12c:	a009883a 	mov	r4,r20
    e130:	100b883a 	mov	r5,r2
    e134:	9826943a 	slli	r19,r19,16
    e138:	1039883a 	mov	fp,r2
    e13c:	0000e880 	call	e88 <__mulsi3>
    e140:	b13fffcc 	andi	r4,r22,65535
    e144:	24c8b03a 	or	r4,r4,r19
    e148:	2080062e 	bgeu	r4,r2,e164 <__udivdi3+0x550>
    e14c:	2449883a 	add	r4,r4,r17
    e150:	e0ffffc4 	addi	r3,fp,-1
    e154:	24402436 	bltu	r4,r17,e1e8 <__udivdi3+0x5d4>
    e158:	2080232e 	bgeu	r4,r2,e1e8 <__udivdi3+0x5d4>
    e15c:	e73fff84 	addi	fp,fp,-2
    e160:	2449883a 	add	r4,r4,r17
    e164:	b82e943a 	slli	r23,r23,16
    e168:	20a1c83a 	sub	r16,r4,r2
    e16c:	bf06b03a 	or	r3,r23,fp
    e170:	003f2806 	br	de14 <__alt_data_end+0xfffede14>
    e174:	2021883a 	mov	r16,r4
    e178:	003f5306 	br	dec8 <__alt_data_end+0xfffedec8>
    e17c:	1821883a 	mov	r16,r3
    e180:	003ef406 	br	dd54 <__alt_data_end+0xfffedd54>
    e184:	1806943a 	slli	r3,r3,16
    e188:	9de6983a 	sll	r19,r19,r23
    e18c:	e73fffcc 	andi	fp,fp,65535
    e190:	1f07883a 	add	r3,r3,fp
    e194:	98ffbd2e 	bgeu	r19,r3,e08c <__alt_data_end+0xfffee08c>
    e198:	90bfffc4 	addi	r2,r18,-1
    e19c:	0007883a 	mov	r3,zero
    e1a0:	003f4e06 	br	dedc <__alt_data_end+0xfffededc>
    e1a4:	00800604 	movi	r2,24
    e1a8:	003ef506 	br	dd80 <__alt_data_end+0xfffedd80>
    e1ac:	00800604 	movi	r2,24
    e1b0:	003f0b06 	br	dde0 <__alt_data_end+0xfffedde0>
    e1b4:	00800604 	movi	r2,24
    e1b8:	003ead06 	br	dc70 <__alt_data_end+0xfffedc70>
    e1bc:	0007883a 	mov	r3,zero
    e1c0:	00800044 	movi	r2,1
    e1c4:	003f4506 	br	dedc <__alt_data_end+0xfffededc>
    e1c8:	80bf8e2e 	bgeu	r16,r2,e004 <__alt_data_end+0xfffee004>
    e1cc:	8c7fff84 	addi	r17,r17,-2
    e1d0:	8721883a 	add	r16,r16,fp
    e1d4:	003f8c06 	br	e008 <__alt_data_end+0xfffee008>
    e1d8:	18bf762e 	bgeu	r3,r2,dfb4 <__alt_data_end+0xfffedfb4>
    e1dc:	ad7fff84 	addi	r21,r21,-2
    e1e0:	1f07883a 	add	r3,r3,fp
    e1e4:	003f7406 	br	dfb8 <__alt_data_end+0xfffedfb8>
    e1e8:	1839883a 	mov	fp,r3
    e1ec:	003fdd06 	br	e164 <__alt_data_end+0xfffee164>
    e1f0:	182f883a 	mov	r23,r3
    e1f4:	003fc506 	br	e10c <__alt_data_end+0xfffee10c>
    e1f8:	b5bfff84 	addi	r22,r22,-2
    e1fc:	3c4f883a 	add	r7,r7,r17
    e200:	003f1a06 	br	de6c <__alt_data_end+0xfffede6c>
    e204:	b5bfff84 	addi	r22,r22,-2
    e208:	1c47883a 	add	r3,r3,r17
    e20c:	003ebc06 	br	dd00 <__alt_data_end+0xfffedd00>

0000e210 <__umoddi3>:
    e210:	defff304 	addi	sp,sp,-52
    e214:	df000b15 	stw	fp,44(sp)
    e218:	dc400415 	stw	r17,16(sp)
    e21c:	dc000315 	stw	r16,12(sp)
    e220:	dfc00c15 	stw	ra,48(sp)
    e224:	ddc00a15 	stw	r23,40(sp)
    e228:	dd800915 	stw	r22,36(sp)
    e22c:	dd400815 	stw	r21,32(sp)
    e230:	dd000715 	stw	r20,28(sp)
    e234:	dcc00615 	stw	r19,24(sp)
    e238:	dc800515 	stw	r18,20(sp)
    e23c:	2021883a 	mov	r16,r4
    e240:	2823883a 	mov	r17,r5
    e244:	2839883a 	mov	fp,r5
    e248:	3800401e 	bne	r7,zero,e34c <__umoddi3+0x13c>
    e24c:	3027883a 	mov	r19,r6
    e250:	2029883a 	mov	r20,r4
    e254:	2980552e 	bgeu	r5,r6,e3ac <__umoddi3+0x19c>
    e258:	00bfffd4 	movui	r2,65535
    e25c:	1180a236 	bltu	r2,r6,e4e8 <__umoddi3+0x2d8>
    e260:	01003fc4 	movi	r4,255
    e264:	2189803a 	cmpltu	r4,r4,r6
    e268:	200890fa 	slli	r4,r4,3
    e26c:	3104d83a 	srl	r2,r6,r4
    e270:	00c00074 	movhi	r3,1
    e274:	18c44ac4 	addi	r3,r3,4395
    e278:	1885883a 	add	r2,r3,r2
    e27c:	10c00003 	ldbu	r3,0(r2)
    e280:	00800804 	movi	r2,32
    e284:	1909883a 	add	r4,r3,r4
    e288:	1125c83a 	sub	r18,r2,r4
    e28c:	90000526 	beq	r18,zero,e2a4 <__umoddi3+0x94>
    e290:	8ca2983a 	sll	r17,r17,r18
    e294:	8108d83a 	srl	r4,r16,r4
    e298:	34a6983a 	sll	r19,r6,r18
    e29c:	84a8983a 	sll	r20,r16,r18
    e2a0:	2478b03a 	or	fp,r4,r17
    e2a4:	982cd43a 	srli	r22,r19,16
    e2a8:	e009883a 	mov	r4,fp
    e2ac:	9dffffcc 	andi	r23,r19,65535
    e2b0:	b00b883a 	mov	r5,r22
    e2b4:	000360c0 	call	360c <__umodsi3>
    e2b8:	b00b883a 	mov	r5,r22
    e2bc:	e009883a 	mov	r4,fp
    e2c0:	102b883a 	mov	r21,r2
    e2c4:	00035a80 	call	35a8 <__udivsi3>
    e2c8:	100b883a 	mov	r5,r2
    e2cc:	b809883a 	mov	r4,r23
    e2d0:	0000e880 	call	e88 <__mulsi3>
    e2d4:	a82a943a 	slli	r21,r21,16
    e2d8:	a006d43a 	srli	r3,r20,16
    e2dc:	1d46b03a 	or	r3,r3,r21
    e2e0:	1880032e 	bgeu	r3,r2,e2f0 <__umoddi3+0xe0>
    e2e4:	1cc7883a 	add	r3,r3,r19
    e2e8:	1cc00136 	bltu	r3,r19,e2f0 <__umoddi3+0xe0>
    e2ec:	18813136 	bltu	r3,r2,e7b4 <__umoddi3+0x5a4>
    e2f0:	18a1c83a 	sub	r16,r3,r2
    e2f4:	b00b883a 	mov	r5,r22
    e2f8:	8009883a 	mov	r4,r16
    e2fc:	000360c0 	call	360c <__umodsi3>
    e300:	b00b883a 	mov	r5,r22
    e304:	8009883a 	mov	r4,r16
    e308:	1023883a 	mov	r17,r2
    e30c:	00035a80 	call	35a8 <__udivsi3>
    e310:	100b883a 	mov	r5,r2
    e314:	b809883a 	mov	r4,r23
    e318:	8822943a 	slli	r17,r17,16
    e31c:	0000e880 	call	e88 <__mulsi3>
    e320:	a0ffffcc 	andi	r3,r20,65535
    e324:	1c46b03a 	or	r3,r3,r17
    e328:	1880042e 	bgeu	r3,r2,e33c <__umoddi3+0x12c>
    e32c:	1cc7883a 	add	r3,r3,r19
    e330:	1cc00236 	bltu	r3,r19,e33c <__umoddi3+0x12c>
    e334:	1880012e 	bgeu	r3,r2,e33c <__umoddi3+0x12c>
    e338:	1cc7883a 	add	r3,r3,r19
    e33c:	1885c83a 	sub	r2,r3,r2
    e340:	1484d83a 	srl	r2,r2,r18
    e344:	0007883a 	mov	r3,zero
    e348:	00005306 	br	e498 <__umoddi3+0x288>
    e34c:	29c05036 	bltu	r5,r7,e490 <__umoddi3+0x280>
    e350:	00bfffd4 	movui	r2,65535
    e354:	11c05c2e 	bgeu	r2,r7,e4c8 <__umoddi3+0x2b8>
    e358:	00804034 	movhi	r2,256
    e35c:	10bfffc4 	addi	r2,r2,-1
    e360:	11c10636 	bltu	r2,r7,e77c <__umoddi3+0x56c>
    e364:	01000404 	movi	r4,16
    e368:	3904d83a 	srl	r2,r7,r4
    e36c:	00c00074 	movhi	r3,1
    e370:	18c44ac4 	addi	r3,r3,4395
    e374:	1885883a 	add	r2,r3,r2
    e378:	14c00003 	ldbu	r19,0(r2)
    e37c:	00c00804 	movi	r3,32
    e380:	9927883a 	add	r19,r19,r4
    e384:	1ce9c83a 	sub	r20,r3,r19
    e388:	a0005c1e 	bne	r20,zero,e4fc <__umoddi3+0x2ec>
    e38c:	3c400136 	bltu	r7,r17,e394 <__umoddi3+0x184>
    e390:	81810a36 	bltu	r16,r6,e7bc <__umoddi3+0x5ac>
    e394:	8185c83a 	sub	r2,r16,r6
    e398:	89e3c83a 	sub	r17,r17,r7
    e39c:	8089803a 	cmpltu	r4,r16,r2
    e3a0:	8939c83a 	sub	fp,r17,r4
    e3a4:	e007883a 	mov	r3,fp
    e3a8:	00003b06 	br	e498 <__umoddi3+0x288>
    e3ac:	3000041e 	bne	r6,zero,e3c0 <__umoddi3+0x1b0>
    e3b0:	000b883a 	mov	r5,zero
    e3b4:	01000044 	movi	r4,1
    e3b8:	00035a80 	call	35a8 <__udivsi3>
    e3bc:	1027883a 	mov	r19,r2
    e3c0:	00bfffd4 	movui	r2,65535
    e3c4:	14c0442e 	bgeu	r2,r19,e4d8 <__umoddi3+0x2c8>
    e3c8:	00804034 	movhi	r2,256
    e3cc:	10bfffc4 	addi	r2,r2,-1
    e3d0:	14c0ec36 	bltu	r2,r19,e784 <__umoddi3+0x574>
    e3d4:	00800404 	movi	r2,16
    e3d8:	9886d83a 	srl	r3,r19,r2
    e3dc:	01000074 	movhi	r4,1
    e3e0:	21044ac4 	addi	r4,r4,4395
    e3e4:	20c7883a 	add	r3,r4,r3
    e3e8:	18c00003 	ldbu	r3,0(r3)
    e3ec:	1887883a 	add	r3,r3,r2
    e3f0:	00800804 	movi	r2,32
    e3f4:	10e5c83a 	sub	r18,r2,r3
    e3f8:	9000ab1e 	bne	r18,zero,e6a8 <__umoddi3+0x498>
    e3fc:	982cd43a 	srli	r22,r19,16
    e400:	8ce3c83a 	sub	r17,r17,r19
    e404:	9dffffcc 	andi	r23,r19,65535
    e408:	b00b883a 	mov	r5,r22
    e40c:	8809883a 	mov	r4,r17
    e410:	000360c0 	call	360c <__umodsi3>
    e414:	b00b883a 	mov	r5,r22
    e418:	8809883a 	mov	r4,r17
    e41c:	102b883a 	mov	r21,r2
    e420:	00035a80 	call	35a8 <__udivsi3>
    e424:	b80b883a 	mov	r5,r23
    e428:	1009883a 	mov	r4,r2
    e42c:	0000e880 	call	e88 <__mulsi3>
    e430:	a82a943a 	slli	r21,r21,16
    e434:	a006d43a 	srli	r3,r20,16
    e438:	1d46b03a 	or	r3,r3,r21
    e43c:	1880042e 	bgeu	r3,r2,e450 <__umoddi3+0x240>
    e440:	1cc7883a 	add	r3,r3,r19
    e444:	1cc00236 	bltu	r3,r19,e450 <__umoddi3+0x240>
    e448:	1880012e 	bgeu	r3,r2,e450 <__umoddi3+0x240>
    e44c:	1cc7883a 	add	r3,r3,r19
    e450:	18a1c83a 	sub	r16,r3,r2
    e454:	b00b883a 	mov	r5,r22
    e458:	8009883a 	mov	r4,r16
    e45c:	000360c0 	call	360c <__umodsi3>
    e460:	1023883a 	mov	r17,r2
    e464:	b00b883a 	mov	r5,r22
    e468:	8009883a 	mov	r4,r16
    e46c:	00035a80 	call	35a8 <__udivsi3>
    e470:	8822943a 	slli	r17,r17,16
    e474:	b80b883a 	mov	r5,r23
    e478:	1009883a 	mov	r4,r2
    e47c:	0000e880 	call	e88 <__mulsi3>
    e480:	a53fffcc 	andi	r20,r20,65535
    e484:	a446b03a 	or	r3,r20,r17
    e488:	18bfac2e 	bgeu	r3,r2,e33c <__alt_data_end+0xfffee33c>
    e48c:	003fa706 	br	e32c <__alt_data_end+0xfffee32c>
    e490:	2005883a 	mov	r2,r4
    e494:	2807883a 	mov	r3,r5
    e498:	dfc00c17 	ldw	ra,48(sp)
    e49c:	df000b17 	ldw	fp,44(sp)
    e4a0:	ddc00a17 	ldw	r23,40(sp)
    e4a4:	dd800917 	ldw	r22,36(sp)
    e4a8:	dd400817 	ldw	r21,32(sp)
    e4ac:	dd000717 	ldw	r20,28(sp)
    e4b0:	dcc00617 	ldw	r19,24(sp)
    e4b4:	dc800517 	ldw	r18,20(sp)
    e4b8:	dc400417 	ldw	r17,16(sp)
    e4bc:	dc000317 	ldw	r16,12(sp)
    e4c0:	dec00d04 	addi	sp,sp,52
    e4c4:	f800283a 	ret
    e4c8:	04c03fc4 	movi	r19,255
    e4cc:	99c9803a 	cmpltu	r4,r19,r7
    e4d0:	200890fa 	slli	r4,r4,3
    e4d4:	003fa406 	br	e368 <__alt_data_end+0xfffee368>
    e4d8:	00803fc4 	movi	r2,255
    e4dc:	14c5803a 	cmpltu	r2,r2,r19
    e4e0:	100490fa 	slli	r2,r2,3
    e4e4:	003fbc06 	br	e3d8 <__alt_data_end+0xfffee3d8>
    e4e8:	00804034 	movhi	r2,256
    e4ec:	10bfffc4 	addi	r2,r2,-1
    e4f0:	1180a636 	bltu	r2,r6,e78c <__umoddi3+0x57c>
    e4f4:	01000404 	movi	r4,16
    e4f8:	003f5c06 	br	e26c <__alt_data_end+0xfffee26c>
    e4fc:	3d0e983a 	sll	r7,r7,r20
    e500:	34ead83a 	srl	r21,r6,r19
    e504:	8cc6d83a 	srl	r3,r17,r19
    e508:	8d10983a 	sll	r8,r17,r20
    e50c:	3d6ab03a 	or	r21,r7,r21
    e510:	a82cd43a 	srli	r22,r21,16
    e514:	84e2d83a 	srl	r17,r16,r19
    e518:	1809883a 	mov	r4,r3
    e51c:	b00b883a 	mov	r5,r22
    e520:	8a22b03a 	or	r17,r17,r8
    e524:	3524983a 	sll	r18,r6,r20
    e528:	dc400015 	stw	r17,0(sp)
    e52c:	d8c00115 	stw	r3,4(sp)
    e530:	000360c0 	call	360c <__umodsi3>
    e534:	d8c00117 	ldw	r3,4(sp)
    e538:	b00b883a 	mov	r5,r22
    e53c:	1039883a 	mov	fp,r2
    e540:	1809883a 	mov	r4,r3
    e544:	00035a80 	call	35a8 <__udivsi3>
    e548:	adffffcc 	andi	r23,r21,65535
    e54c:	100b883a 	mov	r5,r2
    e550:	b809883a 	mov	r4,r23
    e554:	1023883a 	mov	r17,r2
    e558:	0000e880 	call	e88 <__mulsi3>
    e55c:	d9400017 	ldw	r5,0(sp)
    e560:	e008943a 	slli	r4,fp,16
    e564:	8520983a 	sll	r16,r16,r20
    e568:	2806d43a 	srli	r3,r5,16
    e56c:	1906b03a 	or	r3,r3,r4
    e570:	1880042e 	bgeu	r3,r2,e584 <__umoddi3+0x374>
    e574:	1d47883a 	add	r3,r3,r21
    e578:	893fffc4 	addi	r4,r17,-1
    e57c:	1d40892e 	bgeu	r3,r21,e7a4 <__umoddi3+0x594>
    e580:	2023883a 	mov	r17,r4
    e584:	18b9c83a 	sub	fp,r3,r2
    e588:	b00b883a 	mov	r5,r22
    e58c:	e009883a 	mov	r4,fp
    e590:	000360c0 	call	360c <__umodsi3>
    e594:	b00b883a 	mov	r5,r22
    e598:	e009883a 	mov	r4,fp
    e59c:	d8800215 	stw	r2,8(sp)
    e5a0:	00035a80 	call	35a8 <__udivsi3>
    e5a4:	100b883a 	mov	r5,r2
    e5a8:	b809883a 	mov	r4,r23
    e5ac:	102d883a 	mov	r22,r2
    e5b0:	0000e880 	call	e88 <__mulsi3>
    e5b4:	d9800217 	ldw	r6,8(sp)
    e5b8:	d8c00017 	ldw	r3,0(sp)
    e5bc:	300c943a 	slli	r6,r6,16
    e5c0:	1a3fffcc 	andi	r8,r3,65535
    e5c4:	4190b03a 	or	r8,r8,r6
    e5c8:	4080042e 	bgeu	r8,r2,e5dc <__umoddi3+0x3cc>
    e5cc:	4551883a 	add	r8,r8,r21
    e5d0:	b0ffffc4 	addi	r3,r22,-1
    e5d4:	45406f2e 	bgeu	r8,r21,e794 <__umoddi3+0x584>
    e5d8:	182d883a 	mov	r22,r3
    e5dc:	880e943a 	slli	r7,r17,16
    e5e0:	9006d43a 	srli	r3,r18,16
    e5e4:	91bfffcc 	andi	r6,r18,65535
    e5e8:	3dacb03a 	or	r22,r7,r22
    e5ec:	b02ed43a 	srli	r23,r22,16
    e5f0:	b5bfffcc 	andi	r22,r22,65535
    e5f4:	300b883a 	mov	r5,r6
    e5f8:	b009883a 	mov	r4,r22
    e5fc:	40a3c83a 	sub	r17,r8,r2
    e600:	d8c00115 	stw	r3,4(sp)
    e604:	d9800215 	stw	r6,8(sp)
    e608:	0000e880 	call	e88 <__mulsi3>
    e60c:	d9800217 	ldw	r6,8(sp)
    e610:	b809883a 	mov	r4,r23
    e614:	1039883a 	mov	fp,r2
    e618:	300b883a 	mov	r5,r6
    e61c:	0000e880 	call	e88 <__mulsi3>
    e620:	d8c00117 	ldw	r3,4(sp)
    e624:	b809883a 	mov	r4,r23
    e628:	d8800215 	stw	r2,8(sp)
    e62c:	180b883a 	mov	r5,r3
    e630:	0000e880 	call	e88 <__mulsi3>
    e634:	d8c00117 	ldw	r3,4(sp)
    e638:	b009883a 	mov	r4,r22
    e63c:	102f883a 	mov	r23,r2
    e640:	180b883a 	mov	r5,r3
    e644:	0000e880 	call	e88 <__mulsi3>
    e648:	d9800217 	ldw	r6,8(sp)
    e64c:	e006d43a 	srli	r3,fp,16
    e650:	1185883a 	add	r2,r2,r6
    e654:	1885883a 	add	r2,r3,r2
    e658:	1180022e 	bgeu	r2,r6,e664 <__umoddi3+0x454>
    e65c:	00c00074 	movhi	r3,1
    e660:	b8ef883a 	add	r23,r23,r3
    e664:	1006d43a 	srli	r3,r2,16
    e668:	1004943a 	slli	r2,r2,16
    e66c:	e73fffcc 	andi	fp,fp,65535
    e670:	1dc7883a 	add	r3,r3,r23
    e674:	1739883a 	add	fp,r2,fp
    e678:	88c03a36 	bltu	r17,r3,e764 <__umoddi3+0x554>
    e67c:	88c05126 	beq	r17,r3,e7c4 <__umoddi3+0x5b4>
    e680:	88c9c83a 	sub	r4,r17,r3
    e684:	e00f883a 	mov	r7,fp
    e688:	81cfc83a 	sub	r7,r16,r7
    e68c:	81c7803a 	cmpltu	r3,r16,r7
    e690:	20c7c83a 	sub	r3,r4,r3
    e694:	1cc4983a 	sll	r2,r3,r19
    e698:	3d0ed83a 	srl	r7,r7,r20
    e69c:	1d06d83a 	srl	r3,r3,r20
    e6a0:	11c4b03a 	or	r2,r2,r7
    e6a4:	003f7c06 	br	e498 <__alt_data_end+0xfffee498>
    e6a8:	9ca6983a 	sll	r19,r19,r18
    e6ac:	88f8d83a 	srl	fp,r17,r3
    e6b0:	80c4d83a 	srl	r2,r16,r3
    e6b4:	982cd43a 	srli	r22,r19,16
    e6b8:	8ca2983a 	sll	r17,r17,r18
    e6bc:	e009883a 	mov	r4,fp
    e6c0:	b00b883a 	mov	r5,r22
    e6c4:	146ab03a 	or	r21,r2,r17
    e6c8:	000360c0 	call	360c <__umodsi3>
    e6cc:	b00b883a 	mov	r5,r22
    e6d0:	e009883a 	mov	r4,fp
    e6d4:	1029883a 	mov	r20,r2
    e6d8:	9dffffcc 	andi	r23,r19,65535
    e6dc:	00035a80 	call	35a8 <__udivsi3>
    e6e0:	b809883a 	mov	r4,r23
    e6e4:	100b883a 	mov	r5,r2
    e6e8:	0000e880 	call	e88 <__mulsi3>
    e6ec:	a008943a 	slli	r4,r20,16
    e6f0:	a806d43a 	srli	r3,r21,16
    e6f4:	84a8983a 	sll	r20,r16,r18
    e6f8:	1906b03a 	or	r3,r3,r4
    e6fc:	1880042e 	bgeu	r3,r2,e710 <__umoddi3+0x500>
    e700:	1cc7883a 	add	r3,r3,r19
    e704:	1cc00236 	bltu	r3,r19,e710 <__umoddi3+0x500>
    e708:	1880012e 	bgeu	r3,r2,e710 <__umoddi3+0x500>
    e70c:	1cc7883a 	add	r3,r3,r19
    e710:	18a3c83a 	sub	r17,r3,r2
    e714:	b00b883a 	mov	r5,r22
    e718:	8809883a 	mov	r4,r17
    e71c:	000360c0 	call	360c <__umodsi3>
    e720:	b00b883a 	mov	r5,r22
    e724:	8809883a 	mov	r4,r17
    e728:	1021883a 	mov	r16,r2
    e72c:	00035a80 	call	35a8 <__udivsi3>
    e730:	100b883a 	mov	r5,r2
    e734:	b809883a 	mov	r4,r23
    e738:	8020943a 	slli	r16,r16,16
    e73c:	0000e880 	call	e88 <__mulsi3>
    e740:	a8ffffcc 	andi	r3,r21,65535
    e744:	1c06b03a 	or	r3,r3,r16
    e748:	1880042e 	bgeu	r3,r2,e75c <__umoddi3+0x54c>
    e74c:	1cc7883a 	add	r3,r3,r19
    e750:	1cc00236 	bltu	r3,r19,e75c <__umoddi3+0x54c>
    e754:	1880012e 	bgeu	r3,r2,e75c <__umoddi3+0x54c>
    e758:	1cc7883a 	add	r3,r3,r19
    e75c:	18a3c83a 	sub	r17,r3,r2
    e760:	003f2906 	br	e408 <__alt_data_end+0xfffee408>
    e764:	e48fc83a 	sub	r7,fp,r18
    e768:	1d49c83a 	sub	r4,r3,r21
    e76c:	e1f9803a 	cmpltu	fp,fp,r7
    e770:	2739c83a 	sub	fp,r4,fp
    e774:	8f09c83a 	sub	r4,r17,fp
    e778:	003fc306 	br	e688 <__alt_data_end+0xfffee688>
    e77c:	01000604 	movi	r4,24
    e780:	003ef906 	br	e368 <__alt_data_end+0xfffee368>
    e784:	00800604 	movi	r2,24
    e788:	003f1306 	br	e3d8 <__alt_data_end+0xfffee3d8>
    e78c:	01000604 	movi	r4,24
    e790:	003eb606 	br	e26c <__alt_data_end+0xfffee26c>
    e794:	40bf902e 	bgeu	r8,r2,e5d8 <__alt_data_end+0xfffee5d8>
    e798:	b5bfff84 	addi	r22,r22,-2
    e79c:	4551883a 	add	r8,r8,r21
    e7a0:	003f8e06 	br	e5dc <__alt_data_end+0xfffee5dc>
    e7a4:	18bf762e 	bgeu	r3,r2,e580 <__alt_data_end+0xfffee580>
    e7a8:	8c7fff84 	addi	r17,r17,-2
    e7ac:	1d47883a 	add	r3,r3,r21
    e7b0:	003f7406 	br	e584 <__alt_data_end+0xfffee584>
    e7b4:	1cc7883a 	add	r3,r3,r19
    e7b8:	003ecd06 	br	e2f0 <__alt_data_end+0xfffee2f0>
    e7bc:	8005883a 	mov	r2,r16
    e7c0:	003ef806 	br	e3a4 <__alt_data_end+0xfffee3a4>
    e7c4:	873fe736 	bltu	r16,fp,e764 <__alt_data_end+0xfffee764>
    e7c8:	e00f883a 	mov	r7,fp
    e7cc:	0009883a 	mov	r4,zero
    e7d0:	003fad06 	br	e688 <__alt_data_end+0xfffee688>

0000e7d4 <__eqdf2>:
    e7d4:	2804d53a 	srli	r2,r5,20
    e7d8:	3806d53a 	srli	r3,r7,20
    e7dc:	02000434 	movhi	r8,16
    e7e0:	423fffc4 	addi	r8,r8,-1
    e7e4:	1081ffcc 	andi	r2,r2,2047
    e7e8:	0281ffc4 	movi	r10,2047
    e7ec:	2a12703a 	and	r9,r5,r8
    e7f0:	18c1ffcc 	andi	r3,r3,2047
    e7f4:	3a10703a 	and	r8,r7,r8
    e7f8:	280ad7fa 	srli	r5,r5,31
    e7fc:	380ed7fa 	srli	r7,r7,31
    e800:	12801026 	beq	r2,r10,e844 <__eqdf2+0x70>
    e804:	0281ffc4 	movi	r10,2047
    e808:	1a800a26 	beq	r3,r10,e834 <__eqdf2+0x60>
    e80c:	10c00226 	beq	r2,r3,e818 <__eqdf2+0x44>
    e810:	00800044 	movi	r2,1
    e814:	f800283a 	ret
    e818:	4a3ffd1e 	bne	r9,r8,e810 <__alt_data_end+0xfffee810>
    e81c:	21bffc1e 	bne	r4,r6,e810 <__alt_data_end+0xfffee810>
    e820:	29c00c26 	beq	r5,r7,e854 <__eqdf2+0x80>
    e824:	103ffa1e 	bne	r2,zero,e810 <__alt_data_end+0xfffee810>
    e828:	2244b03a 	or	r2,r4,r9
    e82c:	1004c03a 	cmpne	r2,r2,zero
    e830:	f800283a 	ret
    e834:	3214b03a 	or	r10,r6,r8
    e838:	503ff426 	beq	r10,zero,e80c <__alt_data_end+0xfffee80c>
    e83c:	00800044 	movi	r2,1
    e840:	f800283a 	ret
    e844:	2254b03a 	or	r10,r4,r9
    e848:	503fee26 	beq	r10,zero,e804 <__alt_data_end+0xfffee804>
    e84c:	00800044 	movi	r2,1
    e850:	f800283a 	ret
    e854:	0005883a 	mov	r2,zero
    e858:	f800283a 	ret

0000e85c <__ledf2>:
    e85c:	2804d53a 	srli	r2,r5,20
    e860:	3810d53a 	srli	r8,r7,20
    e864:	00c00434 	movhi	r3,16
    e868:	18ffffc4 	addi	r3,r3,-1
    e86c:	1081ffcc 	andi	r2,r2,2047
    e870:	0241ffc4 	movi	r9,2047
    e874:	28d4703a 	and	r10,r5,r3
    e878:	4201ffcc 	andi	r8,r8,2047
    e87c:	38c6703a 	and	r3,r7,r3
    e880:	280ad7fa 	srli	r5,r5,31
    e884:	380ed7fa 	srli	r7,r7,31
    e888:	12401f26 	beq	r2,r9,e908 <__ledf2+0xac>
    e88c:	0241ffc4 	movi	r9,2047
    e890:	42401426 	beq	r8,r9,e8e4 <__ledf2+0x88>
    e894:	1000091e 	bne	r2,zero,e8bc <__ledf2+0x60>
    e898:	2296b03a 	or	r11,r4,r10
    e89c:	5813003a 	cmpeq	r9,r11,zero
    e8a0:	29403fcc 	andi	r5,r5,255
    e8a4:	40000a1e 	bne	r8,zero,e8d0 <__ledf2+0x74>
    e8a8:	30d8b03a 	or	r12,r6,r3
    e8ac:	6000081e 	bne	r12,zero,e8d0 <__ledf2+0x74>
    e8b0:	0005883a 	mov	r2,zero
    e8b4:	5800111e 	bne	r11,zero,e8fc <__ledf2+0xa0>
    e8b8:	f800283a 	ret
    e8bc:	29403fcc 	andi	r5,r5,255
    e8c0:	40000c1e 	bne	r8,zero,e8f4 <__ledf2+0x98>
    e8c4:	30d2b03a 	or	r9,r6,r3
    e8c8:	48000c26 	beq	r9,zero,e8fc <__ledf2+0xa0>
    e8cc:	0013883a 	mov	r9,zero
    e8d0:	39c03fcc 	andi	r7,r7,255
    e8d4:	48000826 	beq	r9,zero,e8f8 <__ledf2+0x9c>
    e8d8:	38001126 	beq	r7,zero,e920 <__ledf2+0xc4>
    e8dc:	00800044 	movi	r2,1
    e8e0:	f800283a 	ret
    e8e4:	30d2b03a 	or	r9,r6,r3
    e8e8:	483fea26 	beq	r9,zero,e894 <__alt_data_end+0xfffee894>
    e8ec:	00800084 	movi	r2,2
    e8f0:	f800283a 	ret
    e8f4:	39c03fcc 	andi	r7,r7,255
    e8f8:	39400726 	beq	r7,r5,e918 <__ledf2+0xbc>
    e8fc:	2800081e 	bne	r5,zero,e920 <__ledf2+0xc4>
    e900:	00800044 	movi	r2,1
    e904:	f800283a 	ret
    e908:	2292b03a 	or	r9,r4,r10
    e90c:	483fdf26 	beq	r9,zero,e88c <__alt_data_end+0xfffee88c>
    e910:	00800084 	movi	r2,2
    e914:	f800283a 	ret
    e918:	4080030e 	bge	r8,r2,e928 <__ledf2+0xcc>
    e91c:	383fef26 	beq	r7,zero,e8dc <__alt_data_end+0xfffee8dc>
    e920:	00bfffc4 	movi	r2,-1
    e924:	f800283a 	ret
    e928:	123feb16 	blt	r2,r8,e8d8 <__alt_data_end+0xfffee8d8>
    e92c:	1abff336 	bltu	r3,r10,e8fc <__alt_data_end+0xfffee8fc>
    e930:	50c00326 	beq	r10,r3,e940 <__ledf2+0xe4>
    e934:	50c0042e 	bgeu	r10,r3,e948 <__ledf2+0xec>
    e938:	283fe81e 	bne	r5,zero,e8dc <__alt_data_end+0xfffee8dc>
    e93c:	003ff806 	br	e920 <__alt_data_end+0xfffee920>
    e940:	313fee36 	bltu	r6,r4,e8fc <__alt_data_end+0xfffee8fc>
    e944:	21bffc36 	bltu	r4,r6,e938 <__alt_data_end+0xfffee938>
    e948:	0005883a 	mov	r2,zero
    e94c:	f800283a 	ret

0000e950 <__fixdfsi>:
    e950:	280cd53a 	srli	r6,r5,20
    e954:	00c00434 	movhi	r3,16
    e958:	18ffffc4 	addi	r3,r3,-1
    e95c:	3181ffcc 	andi	r6,r6,2047
    e960:	01c0ff84 	movi	r7,1022
    e964:	28c6703a 	and	r3,r5,r3
    e968:	280ad7fa 	srli	r5,r5,31
    e96c:	3980120e 	bge	r7,r6,e9b8 <__fixdfsi+0x68>
    e970:	00810744 	movi	r2,1053
    e974:	11800c16 	blt	r2,r6,e9a8 <__fixdfsi+0x58>
    e978:	00810cc4 	movi	r2,1075
    e97c:	1185c83a 	sub	r2,r2,r6
    e980:	01c007c4 	movi	r7,31
    e984:	18c00434 	orhi	r3,r3,16
    e988:	38800d16 	blt	r7,r2,e9c0 <__fixdfsi+0x70>
    e98c:	31befb44 	addi	r6,r6,-1043
    e990:	2084d83a 	srl	r2,r4,r2
    e994:	1986983a 	sll	r3,r3,r6
    e998:	1884b03a 	or	r2,r3,r2
    e99c:	28000726 	beq	r5,zero,e9bc <__fixdfsi+0x6c>
    e9a0:	0085c83a 	sub	r2,zero,r2
    e9a4:	f800283a 	ret
    e9a8:	00a00034 	movhi	r2,32768
    e9ac:	10bfffc4 	addi	r2,r2,-1
    e9b0:	2885883a 	add	r2,r5,r2
    e9b4:	f800283a 	ret
    e9b8:	0005883a 	mov	r2,zero
    e9bc:	f800283a 	ret
    e9c0:	008104c4 	movi	r2,1043
    e9c4:	1185c83a 	sub	r2,r2,r6
    e9c8:	1884d83a 	srl	r2,r3,r2
    e9cc:	003ff306 	br	e99c <__alt_data_end+0xfffee99c>

0000e9d0 <__floatunsidf>:
    e9d0:	defffe04 	addi	sp,sp,-8
    e9d4:	dc000015 	stw	r16,0(sp)
    e9d8:	dfc00115 	stw	ra,4(sp)
    e9dc:	2021883a 	mov	r16,r4
    e9e0:	20002226 	beq	r4,zero,ea6c <__floatunsidf+0x9c>
    e9e4:	000344c0 	call	344c <__clzsi2>
    e9e8:	01010784 	movi	r4,1054
    e9ec:	2089c83a 	sub	r4,r4,r2
    e9f0:	01810cc4 	movi	r6,1075
    e9f4:	310dc83a 	sub	r6,r6,r4
    e9f8:	00c007c4 	movi	r3,31
    e9fc:	1980120e 	bge	r3,r6,ea48 <__floatunsidf+0x78>
    ea00:	00c104c4 	movi	r3,1043
    ea04:	1907c83a 	sub	r3,r3,r4
    ea08:	80ca983a 	sll	r5,r16,r3
    ea0c:	00800434 	movhi	r2,16
    ea10:	10bfffc4 	addi	r2,r2,-1
    ea14:	2101ffcc 	andi	r4,r4,2047
    ea18:	0021883a 	mov	r16,zero
    ea1c:	288a703a 	and	r5,r5,r2
    ea20:	2008953a 	slli	r4,r4,20
    ea24:	00c00434 	movhi	r3,16
    ea28:	18ffffc4 	addi	r3,r3,-1
    ea2c:	28c6703a 	and	r3,r5,r3
    ea30:	8005883a 	mov	r2,r16
    ea34:	1906b03a 	or	r3,r3,r4
    ea38:	dfc00117 	ldw	ra,4(sp)
    ea3c:	dc000017 	ldw	r16,0(sp)
    ea40:	dec00204 	addi	sp,sp,8
    ea44:	f800283a 	ret
    ea48:	00c002c4 	movi	r3,11
    ea4c:	188bc83a 	sub	r5,r3,r2
    ea50:	814ad83a 	srl	r5,r16,r5
    ea54:	00c00434 	movhi	r3,16
    ea58:	18ffffc4 	addi	r3,r3,-1
    ea5c:	81a0983a 	sll	r16,r16,r6
    ea60:	2101ffcc 	andi	r4,r4,2047
    ea64:	28ca703a 	and	r5,r5,r3
    ea68:	003fed06 	br	ea20 <__alt_data_end+0xfffeea20>
    ea6c:	0009883a 	mov	r4,zero
    ea70:	000b883a 	mov	r5,zero
    ea74:	003fea06 	br	ea20 <__alt_data_end+0xfffeea20>

0000ea78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ea78:	defffe04 	addi	sp,sp,-8
    ea7c:	dfc00115 	stw	ra,4(sp)
    ea80:	df000015 	stw	fp,0(sp)
    ea84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ea88:	d0a00b17 	ldw	r2,-32724(gp)
    ea8c:	10000326 	beq	r2,zero,ea9c <alt_get_errno+0x24>
    ea90:	d0a00b17 	ldw	r2,-32724(gp)
    ea94:	103ee83a 	callr	r2
    ea98:	00000106 	br	eaa0 <alt_get_errno+0x28>
    ea9c:	d0a6cb04 	addi	r2,gp,-25812
}
    eaa0:	e037883a 	mov	sp,fp
    eaa4:	dfc00117 	ldw	ra,4(sp)
    eaa8:	df000017 	ldw	fp,0(sp)
    eaac:	dec00204 	addi	sp,sp,8
    eab0:	f800283a 	ret

0000eab4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    eab4:	defffb04 	addi	sp,sp,-20
    eab8:	dfc00415 	stw	ra,16(sp)
    eabc:	df000315 	stw	fp,12(sp)
    eac0:	df000304 	addi	fp,sp,12
    eac4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    eac8:	e0bfff17 	ldw	r2,-4(fp)
    eacc:	10000816 	blt	r2,zero,eaf0 <close+0x3c>
    ead0:	01400304 	movi	r5,12
    ead4:	e13fff17 	ldw	r4,-4(fp)
    ead8:	0000e880 	call	e88 <__mulsi3>
    eadc:	1007883a 	mov	r3,r2
    eae0:	00800074 	movhi	r2,1
    eae4:	10873e04 	addi	r2,r2,7416
    eae8:	1885883a 	add	r2,r3,r2
    eaec:	00000106 	br	eaf4 <close+0x40>
    eaf0:	0005883a 	mov	r2,zero
    eaf4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    eaf8:	e0bffd17 	ldw	r2,-12(fp)
    eafc:	10001926 	beq	r2,zero,eb64 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    eb00:	e0bffd17 	ldw	r2,-12(fp)
    eb04:	10800017 	ldw	r2,0(r2)
    eb08:	10800417 	ldw	r2,16(r2)
    eb0c:	10000626 	beq	r2,zero,eb28 <close+0x74>
    eb10:	e0bffd17 	ldw	r2,-12(fp)
    eb14:	10800017 	ldw	r2,0(r2)
    eb18:	10800417 	ldw	r2,16(r2)
    eb1c:	e13ffd17 	ldw	r4,-12(fp)
    eb20:	103ee83a 	callr	r2
    eb24:	00000106 	br	eb2c <close+0x78>
    eb28:	0005883a 	mov	r2,zero
    eb2c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    eb30:	e13fff17 	ldw	r4,-4(fp)
    eb34:	000f4540 	call	f454 <alt_release_fd>
    if (rval < 0)
    eb38:	e0bffe17 	ldw	r2,-8(fp)
    eb3c:	1000070e 	bge	r2,zero,eb5c <close+0xa8>
    {
      ALT_ERRNO = -rval;
    eb40:	000ea780 	call	ea78 <alt_get_errno>
    eb44:	1007883a 	mov	r3,r2
    eb48:	e0bffe17 	ldw	r2,-8(fp)
    eb4c:	0085c83a 	sub	r2,zero,r2
    eb50:	18800015 	stw	r2,0(r3)
      return -1;
    eb54:	00bfffc4 	movi	r2,-1
    eb58:	00000706 	br	eb78 <close+0xc4>
    }
    return 0;
    eb5c:	0005883a 	mov	r2,zero
    eb60:	00000506 	br	eb78 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    eb64:	000ea780 	call	ea78 <alt_get_errno>
    eb68:	1007883a 	mov	r3,r2
    eb6c:	00801444 	movi	r2,81
    eb70:	18800015 	stw	r2,0(r3)
    return -1;
    eb74:	00bfffc4 	movi	r2,-1
  }
}
    eb78:	e037883a 	mov	sp,fp
    eb7c:	dfc00117 	ldw	ra,4(sp)
    eb80:	df000017 	ldw	fp,0(sp)
    eb84:	dec00204 	addi	sp,sp,8
    eb88:	f800283a 	ret

0000eb8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    eb8c:	defffc04 	addi	sp,sp,-16
    eb90:	df000315 	stw	fp,12(sp)
    eb94:	df000304 	addi	fp,sp,12
    eb98:	e13ffd15 	stw	r4,-12(fp)
    eb9c:	e17ffe15 	stw	r5,-8(fp)
    eba0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    eba4:	e0bfff17 	ldw	r2,-4(fp)
}
    eba8:	e037883a 	mov	sp,fp
    ebac:	df000017 	ldw	fp,0(sp)
    ebb0:	dec00104 	addi	sp,sp,4
    ebb4:	f800283a 	ret

0000ebb8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ebb8:	defffd04 	addi	sp,sp,-12
    ebbc:	df000215 	stw	fp,8(sp)
    ebc0:	df000204 	addi	fp,sp,8
    ebc4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    ebc8:	0001883a 	nop
    ebcc:	e0bfff17 	ldw	r2,-4(fp)
    ebd0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    ebd4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ebd8:	10000226 	beq	r2,zero,ebe4 <_exit+0x2c>
    ALT_SIM_FAIL();
    ebdc:	002af070 	cmpltui	zero,zero,43969
    ebe0:	00000106 	br	ebe8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    ebe4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    ebe8:	003fff06 	br	ebe8 <__alt_data_end+0xfffeebe8>

0000ebec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ebec:	defffe04 	addi	sp,sp,-8
    ebf0:	dfc00115 	stw	ra,4(sp)
    ebf4:	df000015 	stw	fp,0(sp)
    ebf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ebfc:	d0a00b17 	ldw	r2,-32724(gp)
    ec00:	10000326 	beq	r2,zero,ec10 <alt_get_errno+0x24>
    ec04:	d0a00b17 	ldw	r2,-32724(gp)
    ec08:	103ee83a 	callr	r2
    ec0c:	00000106 	br	ec14 <alt_get_errno+0x28>
    ec10:	d0a6cb04 	addi	r2,gp,-25812
}
    ec14:	e037883a 	mov	sp,fp
    ec18:	dfc00117 	ldw	ra,4(sp)
    ec1c:	df000017 	ldw	fp,0(sp)
    ec20:	dec00204 	addi	sp,sp,8
    ec24:	f800283a 	ret

0000ec28 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ec28:	defffb04 	addi	sp,sp,-20
    ec2c:	dfc00415 	stw	ra,16(sp)
    ec30:	df000315 	stw	fp,12(sp)
    ec34:	df000304 	addi	fp,sp,12
    ec38:	e13ffe15 	stw	r4,-8(fp)
    ec3c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ec40:	e0bffe17 	ldw	r2,-8(fp)
    ec44:	10000816 	blt	r2,zero,ec68 <fstat+0x40>
    ec48:	01400304 	movi	r5,12
    ec4c:	e13ffe17 	ldw	r4,-8(fp)
    ec50:	0000e880 	call	e88 <__mulsi3>
    ec54:	1007883a 	mov	r3,r2
    ec58:	00800074 	movhi	r2,1
    ec5c:	10873e04 	addi	r2,r2,7416
    ec60:	1885883a 	add	r2,r3,r2
    ec64:	00000106 	br	ec6c <fstat+0x44>
    ec68:	0005883a 	mov	r2,zero
    ec6c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    ec70:	e0bffd17 	ldw	r2,-12(fp)
    ec74:	10001026 	beq	r2,zero,ecb8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    ec78:	e0bffd17 	ldw	r2,-12(fp)
    ec7c:	10800017 	ldw	r2,0(r2)
    ec80:	10800817 	ldw	r2,32(r2)
    ec84:	10000726 	beq	r2,zero,eca4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    ec88:	e0bffd17 	ldw	r2,-12(fp)
    ec8c:	10800017 	ldw	r2,0(r2)
    ec90:	10800817 	ldw	r2,32(r2)
    ec94:	e17fff17 	ldw	r5,-4(fp)
    ec98:	e13ffd17 	ldw	r4,-12(fp)
    ec9c:	103ee83a 	callr	r2
    eca0:	00000a06 	br	eccc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    eca4:	e0bfff17 	ldw	r2,-4(fp)
    eca8:	00c80004 	movi	r3,8192
    ecac:	10c00115 	stw	r3,4(r2)
      return 0;
    ecb0:	0005883a 	mov	r2,zero
    ecb4:	00000506 	br	eccc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ecb8:	000ebec0 	call	ebec <alt_get_errno>
    ecbc:	1007883a 	mov	r3,r2
    ecc0:	00801444 	movi	r2,81
    ecc4:	18800015 	stw	r2,0(r3)
    return -1;
    ecc8:	00bfffc4 	movi	r2,-1
  }
}
    eccc:	e037883a 	mov	sp,fp
    ecd0:	dfc00117 	ldw	ra,4(sp)
    ecd4:	df000017 	ldw	fp,0(sp)
    ecd8:	dec00204 	addi	sp,sp,8
    ecdc:	f800283a 	ret

0000ece0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ece0:	defffe04 	addi	sp,sp,-8
    ece4:	dfc00115 	stw	ra,4(sp)
    ece8:	df000015 	stw	fp,0(sp)
    ecec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ecf0:	d0a00b17 	ldw	r2,-32724(gp)
    ecf4:	10000326 	beq	r2,zero,ed04 <alt_get_errno+0x24>
    ecf8:	d0a00b17 	ldw	r2,-32724(gp)
    ecfc:	103ee83a 	callr	r2
    ed00:	00000106 	br	ed08 <alt_get_errno+0x28>
    ed04:	d0a6cb04 	addi	r2,gp,-25812
}
    ed08:	e037883a 	mov	sp,fp
    ed0c:	dfc00117 	ldw	ra,4(sp)
    ed10:	df000017 	ldw	fp,0(sp)
    ed14:	dec00204 	addi	sp,sp,8
    ed18:	f800283a 	ret

0000ed1c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ed1c:	deffed04 	addi	sp,sp,-76
    ed20:	dfc01215 	stw	ra,72(sp)
    ed24:	df001115 	stw	fp,68(sp)
    ed28:	df001104 	addi	fp,sp,68
    ed2c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ed30:	e0bfff17 	ldw	r2,-4(fp)
    ed34:	10000816 	blt	r2,zero,ed58 <isatty+0x3c>
    ed38:	01400304 	movi	r5,12
    ed3c:	e13fff17 	ldw	r4,-4(fp)
    ed40:	0000e880 	call	e88 <__mulsi3>
    ed44:	1007883a 	mov	r3,r2
    ed48:	00800074 	movhi	r2,1
    ed4c:	10873e04 	addi	r2,r2,7416
    ed50:	1885883a 	add	r2,r3,r2
    ed54:	00000106 	br	ed5c <isatty+0x40>
    ed58:	0005883a 	mov	r2,zero
    ed5c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    ed60:	e0bfef17 	ldw	r2,-68(fp)
    ed64:	10000e26 	beq	r2,zero,eda0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ed68:	e0bfef17 	ldw	r2,-68(fp)
    ed6c:	10800017 	ldw	r2,0(r2)
    ed70:	10800817 	ldw	r2,32(r2)
    ed74:	1000021e 	bne	r2,zero,ed80 <isatty+0x64>
    {
      return 1;
    ed78:	00800044 	movi	r2,1
    ed7c:	00000d06 	br	edb4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ed80:	e0bff004 	addi	r2,fp,-64
    ed84:	100b883a 	mov	r5,r2
    ed88:	e13fff17 	ldw	r4,-4(fp)
    ed8c:	000ec280 	call	ec28 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ed90:	e0bff117 	ldw	r2,-60(fp)
    ed94:	10880020 	cmpeqi	r2,r2,8192
    ed98:	10803fcc 	andi	r2,r2,255
    ed9c:	00000506 	br	edb4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    eda0:	000ece00 	call	ece0 <alt_get_errno>
    eda4:	1007883a 	mov	r3,r2
    eda8:	00801444 	movi	r2,81
    edac:	18800015 	stw	r2,0(r3)
    return 0;
    edb0:	0005883a 	mov	r2,zero
  }
}
    edb4:	e037883a 	mov	sp,fp
    edb8:	dfc00117 	ldw	ra,4(sp)
    edbc:	df000017 	ldw	fp,0(sp)
    edc0:	dec00204 	addi	sp,sp,8
    edc4:	f800283a 	ret

0000edc8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    edc8:	defffc04 	addi	sp,sp,-16
    edcc:	df000315 	stw	fp,12(sp)
    edd0:	df000304 	addi	fp,sp,12
    edd4:	e13ffd15 	stw	r4,-12(fp)
    edd8:	e17ffe15 	stw	r5,-8(fp)
    eddc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ede0:	e0fffe17 	ldw	r3,-8(fp)
    ede4:	e0bffd17 	ldw	r2,-12(fp)
    ede8:	18800c26 	beq	r3,r2,ee1c <alt_load_section+0x54>
  {
    while( to != end )
    edec:	00000806 	br	ee10 <alt_load_section+0x48>
    {
      *to++ = *from++;
    edf0:	e0bffe17 	ldw	r2,-8(fp)
    edf4:	10c00104 	addi	r3,r2,4
    edf8:	e0fffe15 	stw	r3,-8(fp)
    edfc:	e0fffd17 	ldw	r3,-12(fp)
    ee00:	19000104 	addi	r4,r3,4
    ee04:	e13ffd15 	stw	r4,-12(fp)
    ee08:	18c00017 	ldw	r3,0(r3)
    ee0c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ee10:	e0fffe17 	ldw	r3,-8(fp)
    ee14:	e0bfff17 	ldw	r2,-4(fp)
    ee18:	18bff51e 	bne	r3,r2,edf0 <__alt_data_end+0xfffeedf0>
    {
      *to++ = *from++;
    }
  }
}
    ee1c:	0001883a 	nop
    ee20:	e037883a 	mov	sp,fp
    ee24:	df000017 	ldw	fp,0(sp)
    ee28:	dec00104 	addi	sp,sp,4
    ee2c:	f800283a 	ret

0000ee30 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ee30:	defffe04 	addi	sp,sp,-8
    ee34:	dfc00115 	stw	ra,4(sp)
    ee38:	df000015 	stw	fp,0(sp)
    ee3c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ee40:	01800074 	movhi	r6,1
    ee44:	318bc604 	addi	r6,r6,12056
    ee48:	01400074 	movhi	r5,1
    ee4c:	29450b04 	addi	r5,r5,5164
    ee50:	01000074 	movhi	r4,1
    ee54:	210bc604 	addi	r4,r4,12056
    ee58:	000edc80 	call	edc8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ee5c:	01800034 	movhi	r6,0
    ee60:	31808c04 	addi	r6,r6,560
    ee64:	01400034 	movhi	r5,0
    ee68:	29400804 	addi	r5,r5,32
    ee6c:	01000034 	movhi	r4,0
    ee70:	21000804 	addi	r4,r4,32
    ee74:	000edc80 	call	edc8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ee78:	01800074 	movhi	r6,1
    ee7c:	31850b04 	addi	r6,r6,5164
    ee80:	01400074 	movhi	r5,1
    ee84:	29441904 	addi	r5,r5,4196
    ee88:	01000074 	movhi	r4,1
    ee8c:	21041904 	addi	r4,r4,4196
    ee90:	000edc80 	call	edc8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ee94:	001041c0 	call	1041c <alt_dcache_flush_all>
  alt_icache_flush_all();
    ee98:	00108380 	call	10838 <alt_icache_flush_all>
}
    ee9c:	0001883a 	nop
    eea0:	e037883a 	mov	sp,fp
    eea4:	dfc00117 	ldw	ra,4(sp)
    eea8:	df000017 	ldw	fp,0(sp)
    eeac:	dec00204 	addi	sp,sp,8
    eeb0:	f800283a 	ret

0000eeb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eeb4:	defffe04 	addi	sp,sp,-8
    eeb8:	dfc00115 	stw	ra,4(sp)
    eebc:	df000015 	stw	fp,0(sp)
    eec0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eec4:	d0a00b17 	ldw	r2,-32724(gp)
    eec8:	10000326 	beq	r2,zero,eed8 <alt_get_errno+0x24>
    eecc:	d0a00b17 	ldw	r2,-32724(gp)
    eed0:	103ee83a 	callr	r2
    eed4:	00000106 	br	eedc <alt_get_errno+0x28>
    eed8:	d0a6cb04 	addi	r2,gp,-25812
}
    eedc:	e037883a 	mov	sp,fp
    eee0:	dfc00117 	ldw	ra,4(sp)
    eee4:	df000017 	ldw	fp,0(sp)
    eee8:	dec00204 	addi	sp,sp,8
    eeec:	f800283a 	ret

0000eef0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    eef0:	defff904 	addi	sp,sp,-28
    eef4:	dfc00615 	stw	ra,24(sp)
    eef8:	df000515 	stw	fp,20(sp)
    eefc:	df000504 	addi	fp,sp,20
    ef00:	e13ffd15 	stw	r4,-12(fp)
    ef04:	e17ffe15 	stw	r5,-8(fp)
    ef08:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    ef0c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ef10:	e0bffd17 	ldw	r2,-12(fp)
    ef14:	10000816 	blt	r2,zero,ef38 <lseek+0x48>
    ef18:	01400304 	movi	r5,12
    ef1c:	e13ffd17 	ldw	r4,-12(fp)
    ef20:	0000e880 	call	e88 <__mulsi3>
    ef24:	1007883a 	mov	r3,r2
    ef28:	00800074 	movhi	r2,1
    ef2c:	10873e04 	addi	r2,r2,7416
    ef30:	1885883a 	add	r2,r3,r2
    ef34:	00000106 	br	ef3c <lseek+0x4c>
    ef38:	0005883a 	mov	r2,zero
    ef3c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    ef40:	e0bffc17 	ldw	r2,-16(fp)
    ef44:	10001026 	beq	r2,zero,ef88 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ef48:	e0bffc17 	ldw	r2,-16(fp)
    ef4c:	10800017 	ldw	r2,0(r2)
    ef50:	10800717 	ldw	r2,28(r2)
    ef54:	10000926 	beq	r2,zero,ef7c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ef58:	e0bffc17 	ldw	r2,-16(fp)
    ef5c:	10800017 	ldw	r2,0(r2)
    ef60:	10800717 	ldw	r2,28(r2)
    ef64:	e1bfff17 	ldw	r6,-4(fp)
    ef68:	e17ffe17 	ldw	r5,-8(fp)
    ef6c:	e13ffc17 	ldw	r4,-16(fp)
    ef70:	103ee83a 	callr	r2
    ef74:	e0bffb15 	stw	r2,-20(fp)
    ef78:	00000506 	br	ef90 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ef7c:	00bfde84 	movi	r2,-134
    ef80:	e0bffb15 	stw	r2,-20(fp)
    ef84:	00000206 	br	ef90 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    ef88:	00bfebc4 	movi	r2,-81
    ef8c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    ef90:	e0bffb17 	ldw	r2,-20(fp)
    ef94:	1000070e 	bge	r2,zero,efb4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    ef98:	000eeb40 	call	eeb4 <alt_get_errno>
    ef9c:	1007883a 	mov	r3,r2
    efa0:	e0bffb17 	ldw	r2,-20(fp)
    efa4:	0085c83a 	sub	r2,zero,r2
    efa8:	18800015 	stw	r2,0(r3)
    rc = -1;
    efac:	00bfffc4 	movi	r2,-1
    efb0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    efb4:	e0bffb17 	ldw	r2,-20(fp)
}
    efb8:	e037883a 	mov	sp,fp
    efbc:	dfc00117 	ldw	ra,4(sp)
    efc0:	df000017 	ldw	fp,0(sp)
    efc4:	dec00204 	addi	sp,sp,8
    efc8:	f800283a 	ret

0000efcc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    efcc:	defffd04 	addi	sp,sp,-12
    efd0:	dfc00215 	stw	ra,8(sp)
    efd4:	df000115 	stw	fp,4(sp)
    efd8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    efdc:	0009883a 	mov	r4,zero
    efe0:	000f6f80 	call	f6f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    efe4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    efe8:	000f7300 	call	f730 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    efec:	01800074 	movhi	r6,1
    eff0:	31850104 	addi	r6,r6,5124
    eff4:	01400074 	movhi	r5,1
    eff8:	29450104 	addi	r5,r5,5124
    effc:	01000074 	movhi	r4,1
    f000:	21050104 	addi	r4,r4,5124
    f004:	0010bdc0 	call	10bdc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f008:	001051c0 	call	1051c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f00c:	01000074 	movhi	r4,1
    f010:	21015f04 	addi	r4,r4,1404
    f014:	0010ebc0 	call	10ebc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f018:	d0a6d217 	ldw	r2,-25784(gp)
    f01c:	d0e6d317 	ldw	r3,-25780(gp)
    f020:	d126d417 	ldw	r4,-25776(gp)
    f024:	200d883a 	mov	r6,r4
    f028:	180b883a 	mov	r5,r3
    f02c:	1009883a 	mov	r4,r2
    f030:	00009f00 	call	9f0 <main>
    f034:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f038:	01000044 	movi	r4,1
    f03c:	000eab40 	call	eab4 <close>
  exit (result);
    f040:	e13fff17 	ldw	r4,-4(fp)
    f044:	00036640 	call	3664 <exit>

0000f048 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f048:	defffe04 	addi	sp,sp,-8
    f04c:	df000115 	stw	fp,4(sp)
    f050:	df000104 	addi	fp,sp,4
    f054:	e13fff15 	stw	r4,-4(fp)
}
    f058:	0001883a 	nop
    f05c:	e037883a 	mov	sp,fp
    f060:	df000017 	ldw	fp,0(sp)
    f064:	dec00104 	addi	sp,sp,4
    f068:	f800283a 	ret

0000f06c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f06c:	defffe04 	addi	sp,sp,-8
    f070:	df000115 	stw	fp,4(sp)
    f074:	df000104 	addi	fp,sp,4
    f078:	e13fff15 	stw	r4,-4(fp)
}
    f07c:	0001883a 	nop
    f080:	e037883a 	mov	sp,fp
    f084:	df000017 	ldw	fp,0(sp)
    f088:	dec00104 	addi	sp,sp,4
    f08c:	f800283a 	ret

0000f090 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f090:	defffe04 	addi	sp,sp,-8
    f094:	dfc00115 	stw	ra,4(sp)
    f098:	df000015 	stw	fp,0(sp)
    f09c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f0a0:	d0a00b17 	ldw	r2,-32724(gp)
    f0a4:	10000326 	beq	r2,zero,f0b4 <alt_get_errno+0x24>
    f0a8:	d0a00b17 	ldw	r2,-32724(gp)
    f0ac:	103ee83a 	callr	r2
    f0b0:	00000106 	br	f0b8 <alt_get_errno+0x28>
    f0b4:	d0a6cb04 	addi	r2,gp,-25812
}
    f0b8:	e037883a 	mov	sp,fp
    f0bc:	dfc00117 	ldw	ra,4(sp)
    f0c0:	df000017 	ldw	fp,0(sp)
    f0c4:	dec00204 	addi	sp,sp,8
    f0c8:	f800283a 	ret

0000f0cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f0cc:	defffb04 	addi	sp,sp,-20
    f0d0:	dfc00415 	stw	ra,16(sp)
    f0d4:	df000315 	stw	fp,12(sp)
    f0d8:	dc000215 	stw	r16,8(sp)
    f0dc:	df000304 	addi	fp,sp,12
    f0e0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f0e4:	e0bffe17 	ldw	r2,-8(fp)
    f0e8:	10800217 	ldw	r2,8(r2)
    f0ec:	10d00034 	orhi	r3,r2,16384
    f0f0:	e0bffe17 	ldw	r2,-8(fp)
    f0f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f0f8:	e03ffd15 	stw	zero,-12(fp)
    f0fc:	00002306 	br	f18c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f100:	04000074 	movhi	r16,1
    f104:	84073e04 	addi	r16,r16,7416
    f108:	e0bffd17 	ldw	r2,-12(fp)
    f10c:	01400304 	movi	r5,12
    f110:	1009883a 	mov	r4,r2
    f114:	0000e880 	call	e88 <__mulsi3>
    f118:	8085883a 	add	r2,r16,r2
    f11c:	10c00017 	ldw	r3,0(r2)
    f120:	e0bffe17 	ldw	r2,-8(fp)
    f124:	10800017 	ldw	r2,0(r2)
    f128:	1880151e 	bne	r3,r2,f180 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f12c:	04000074 	movhi	r16,1
    f130:	84073e04 	addi	r16,r16,7416
    f134:	e0bffd17 	ldw	r2,-12(fp)
    f138:	01400304 	movi	r5,12
    f13c:	1009883a 	mov	r4,r2
    f140:	0000e880 	call	e88 <__mulsi3>
    f144:	8085883a 	add	r2,r16,r2
    f148:	10800204 	addi	r2,r2,8
    f14c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f150:	10000b0e 	bge	r2,zero,f180 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f154:	01400304 	movi	r5,12
    f158:	e13ffd17 	ldw	r4,-12(fp)
    f15c:	0000e880 	call	e88 <__mulsi3>
    f160:	1007883a 	mov	r3,r2
    f164:	00800074 	movhi	r2,1
    f168:	10873e04 	addi	r2,r2,7416
    f16c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f170:	e0bffe17 	ldw	r2,-8(fp)
    f174:	18800226 	beq	r3,r2,f180 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f178:	00bffcc4 	movi	r2,-13
    f17c:	00000806 	br	f1a0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f180:	e0bffd17 	ldw	r2,-12(fp)
    f184:	10800044 	addi	r2,r2,1
    f188:	e0bffd15 	stw	r2,-12(fp)
    f18c:	d0a00a17 	ldw	r2,-32728(gp)
    f190:	1007883a 	mov	r3,r2
    f194:	e0bffd17 	ldw	r2,-12(fp)
    f198:	18bfd92e 	bgeu	r3,r2,f100 <__alt_data_end+0xfffef100>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f19c:	0005883a 	mov	r2,zero
}
    f1a0:	e6ffff04 	addi	sp,fp,-4
    f1a4:	dfc00217 	ldw	ra,8(sp)
    f1a8:	df000117 	ldw	fp,4(sp)
    f1ac:	dc000017 	ldw	r16,0(sp)
    f1b0:	dec00304 	addi	sp,sp,12
    f1b4:	f800283a 	ret

0000f1b8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f1b8:	defff604 	addi	sp,sp,-40
    f1bc:	dfc00915 	stw	ra,36(sp)
    f1c0:	df000815 	stw	fp,32(sp)
    f1c4:	df000804 	addi	fp,sp,32
    f1c8:	e13ffd15 	stw	r4,-12(fp)
    f1cc:	e17ffe15 	stw	r5,-8(fp)
    f1d0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f1d4:	00bfffc4 	movi	r2,-1
    f1d8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f1dc:	00bffb44 	movi	r2,-19
    f1e0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f1e4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f1e8:	d1600804 	addi	r5,gp,-32736
    f1ec:	e13ffd17 	ldw	r4,-12(fp)
    f1f0:	00105dc0 	call	105dc <alt_find_dev>
    f1f4:	e0bff815 	stw	r2,-32(fp)
    f1f8:	e0bff817 	ldw	r2,-32(fp)
    f1fc:	1000051e 	bne	r2,zero,f214 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f200:	e13ffd17 	ldw	r4,-12(fp)
    f204:	001066c0 	call	1066c <alt_find_file>
    f208:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f20c:	00800044 	movi	r2,1
    f210:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f214:	e0bff817 	ldw	r2,-32(fp)
    f218:	10002b26 	beq	r2,zero,f2c8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f21c:	e13ff817 	ldw	r4,-32(fp)
    f220:	00107740 	call	10774 <alt_get_fd>
    f224:	e0bff915 	stw	r2,-28(fp)
    f228:	e0bff917 	ldw	r2,-28(fp)
    f22c:	1000030e 	bge	r2,zero,f23c <open+0x84>
    {
      status = index;
    f230:	e0bff917 	ldw	r2,-28(fp)
    f234:	e0bffa15 	stw	r2,-24(fp)
    f238:	00002506 	br	f2d0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    f23c:	01400304 	movi	r5,12
    f240:	e13ff917 	ldw	r4,-28(fp)
    f244:	0000e880 	call	e88 <__mulsi3>
    f248:	1007883a 	mov	r3,r2
    f24c:	00800074 	movhi	r2,1
    f250:	10873e04 	addi	r2,r2,7416
    f254:	1885883a 	add	r2,r3,r2
    f258:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f25c:	e0fffe17 	ldw	r3,-8(fp)
    f260:	00900034 	movhi	r2,16384
    f264:	10bfffc4 	addi	r2,r2,-1
    f268:	1886703a 	and	r3,r3,r2
    f26c:	e0bffc17 	ldw	r2,-16(fp)
    f270:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f274:	e0bffb17 	ldw	r2,-20(fp)
    f278:	1000051e 	bne	r2,zero,f290 <open+0xd8>
    f27c:	e13ffc17 	ldw	r4,-16(fp)
    f280:	000f0cc0 	call	f0cc <alt_file_locked>
    f284:	e0bffa15 	stw	r2,-24(fp)
    f288:	e0bffa17 	ldw	r2,-24(fp)
    f28c:	10001016 	blt	r2,zero,f2d0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f290:	e0bff817 	ldw	r2,-32(fp)
    f294:	10800317 	ldw	r2,12(r2)
    f298:	10000826 	beq	r2,zero,f2bc <open+0x104>
    f29c:	e0bff817 	ldw	r2,-32(fp)
    f2a0:	10800317 	ldw	r2,12(r2)
    f2a4:	e1ffff17 	ldw	r7,-4(fp)
    f2a8:	e1bffe17 	ldw	r6,-8(fp)
    f2ac:	e17ffd17 	ldw	r5,-12(fp)
    f2b0:	e13ffc17 	ldw	r4,-16(fp)
    f2b4:	103ee83a 	callr	r2
    f2b8:	00000106 	br	f2c0 <open+0x108>
    f2bc:	0005883a 	mov	r2,zero
    f2c0:	e0bffa15 	stw	r2,-24(fp)
    f2c4:	00000206 	br	f2d0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f2c8:	00bffb44 	movi	r2,-19
    f2cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f2d0:	e0bffa17 	ldw	r2,-24(fp)
    f2d4:	1000090e 	bge	r2,zero,f2fc <open+0x144>
  {
    alt_release_fd (index);  
    f2d8:	e13ff917 	ldw	r4,-28(fp)
    f2dc:	000f4540 	call	f454 <alt_release_fd>
    ALT_ERRNO = -status;
    f2e0:	000f0900 	call	f090 <alt_get_errno>
    f2e4:	1007883a 	mov	r3,r2
    f2e8:	e0bffa17 	ldw	r2,-24(fp)
    f2ec:	0085c83a 	sub	r2,zero,r2
    f2f0:	18800015 	stw	r2,0(r3)
    return -1;
    f2f4:	00bfffc4 	movi	r2,-1
    f2f8:	00000106 	br	f300 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    f2fc:	e0bff917 	ldw	r2,-28(fp)
}
    f300:	e037883a 	mov	sp,fp
    f304:	dfc00117 	ldw	ra,4(sp)
    f308:	df000017 	ldw	fp,0(sp)
    f30c:	dec00204 	addi	sp,sp,8
    f310:	f800283a 	ret

0000f314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f314:	defffe04 	addi	sp,sp,-8
    f318:	dfc00115 	stw	ra,4(sp)
    f31c:	df000015 	stw	fp,0(sp)
    f320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f324:	d0a00b17 	ldw	r2,-32724(gp)
    f328:	10000326 	beq	r2,zero,f338 <alt_get_errno+0x24>
    f32c:	d0a00b17 	ldw	r2,-32724(gp)
    f330:	103ee83a 	callr	r2
    f334:	00000106 	br	f33c <alt_get_errno+0x28>
    f338:	d0a6cb04 	addi	r2,gp,-25812
}
    f33c:	e037883a 	mov	sp,fp
    f340:	dfc00117 	ldw	ra,4(sp)
    f344:	df000017 	ldw	fp,0(sp)
    f348:	dec00204 	addi	sp,sp,8
    f34c:	f800283a 	ret

0000f350 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f350:	defff904 	addi	sp,sp,-28
    f354:	dfc00615 	stw	ra,24(sp)
    f358:	df000515 	stw	fp,20(sp)
    f35c:	df000504 	addi	fp,sp,20
    f360:	e13ffd15 	stw	r4,-12(fp)
    f364:	e17ffe15 	stw	r5,-8(fp)
    f368:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f36c:	e0bffd17 	ldw	r2,-12(fp)
    f370:	10000816 	blt	r2,zero,f394 <read+0x44>
    f374:	01400304 	movi	r5,12
    f378:	e13ffd17 	ldw	r4,-12(fp)
    f37c:	0000e880 	call	e88 <__mulsi3>
    f380:	1007883a 	mov	r3,r2
    f384:	00800074 	movhi	r2,1
    f388:	10873e04 	addi	r2,r2,7416
    f38c:	1885883a 	add	r2,r3,r2
    f390:	00000106 	br	f398 <read+0x48>
    f394:	0005883a 	mov	r2,zero
    f398:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f39c:	e0bffb17 	ldw	r2,-20(fp)
    f3a0:	10002226 	beq	r2,zero,f42c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f3a4:	e0bffb17 	ldw	r2,-20(fp)
    f3a8:	10800217 	ldw	r2,8(r2)
    f3ac:	108000cc 	andi	r2,r2,3
    f3b0:	10800060 	cmpeqi	r2,r2,1
    f3b4:	1000181e 	bne	r2,zero,f418 <read+0xc8>
        (fd->dev->read))
    f3b8:	e0bffb17 	ldw	r2,-20(fp)
    f3bc:	10800017 	ldw	r2,0(r2)
    f3c0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f3c4:	10001426 	beq	r2,zero,f418 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f3c8:	e0bffb17 	ldw	r2,-20(fp)
    f3cc:	10800017 	ldw	r2,0(r2)
    f3d0:	10800517 	ldw	r2,20(r2)
    f3d4:	e0ffff17 	ldw	r3,-4(fp)
    f3d8:	180d883a 	mov	r6,r3
    f3dc:	e17ffe17 	ldw	r5,-8(fp)
    f3e0:	e13ffb17 	ldw	r4,-20(fp)
    f3e4:	103ee83a 	callr	r2
    f3e8:	e0bffc15 	stw	r2,-16(fp)
    f3ec:	e0bffc17 	ldw	r2,-16(fp)
    f3f0:	1000070e 	bge	r2,zero,f410 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    f3f4:	000f3140 	call	f314 <alt_get_errno>
    f3f8:	1007883a 	mov	r3,r2
    f3fc:	e0bffc17 	ldw	r2,-16(fp)
    f400:	0085c83a 	sub	r2,zero,r2
    f404:	18800015 	stw	r2,0(r3)
          return -1;
    f408:	00bfffc4 	movi	r2,-1
    f40c:	00000c06 	br	f440 <read+0xf0>
        }
        return rval;
    f410:	e0bffc17 	ldw	r2,-16(fp)
    f414:	00000a06 	br	f440 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f418:	000f3140 	call	f314 <alt_get_errno>
    f41c:	1007883a 	mov	r3,r2
    f420:	00800344 	movi	r2,13
    f424:	18800015 	stw	r2,0(r3)
    f428:	00000406 	br	f43c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f42c:	000f3140 	call	f314 <alt_get_errno>
    f430:	1007883a 	mov	r3,r2
    f434:	00801444 	movi	r2,81
    f438:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f43c:	00bfffc4 	movi	r2,-1
}
    f440:	e037883a 	mov	sp,fp
    f444:	dfc00117 	ldw	ra,4(sp)
    f448:	df000017 	ldw	fp,0(sp)
    f44c:	dec00204 	addi	sp,sp,8
    f450:	f800283a 	ret

0000f454 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f454:	defffc04 	addi	sp,sp,-16
    f458:	dfc00315 	stw	ra,12(sp)
    f45c:	df000215 	stw	fp,8(sp)
    f460:	dc000115 	stw	r16,4(sp)
    f464:	df000204 	addi	fp,sp,8
    f468:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    f46c:	e0bffe17 	ldw	r2,-8(fp)
    f470:	108000d0 	cmplti	r2,r2,3
    f474:	1000111e 	bne	r2,zero,f4bc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    f478:	04000074 	movhi	r16,1
    f47c:	84073e04 	addi	r16,r16,7416
    f480:	e0bffe17 	ldw	r2,-8(fp)
    f484:	01400304 	movi	r5,12
    f488:	1009883a 	mov	r4,r2
    f48c:	0000e880 	call	e88 <__mulsi3>
    f490:	8085883a 	add	r2,r16,r2
    f494:	10800204 	addi	r2,r2,8
    f498:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f49c:	04000074 	movhi	r16,1
    f4a0:	84073e04 	addi	r16,r16,7416
    f4a4:	e0bffe17 	ldw	r2,-8(fp)
    f4a8:	01400304 	movi	r5,12
    f4ac:	1009883a 	mov	r4,r2
    f4b0:	0000e880 	call	e88 <__mulsi3>
    f4b4:	8085883a 	add	r2,r16,r2
    f4b8:	10000015 	stw	zero,0(r2)
  }
}
    f4bc:	0001883a 	nop
    f4c0:	e6ffff04 	addi	sp,fp,-4
    f4c4:	dfc00217 	ldw	ra,8(sp)
    f4c8:	df000117 	ldw	fp,4(sp)
    f4cc:	dc000017 	ldw	r16,0(sp)
    f4d0:	dec00304 	addi	sp,sp,12
    f4d4:	f800283a 	ret

0000f4d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f4d8:	defff904 	addi	sp,sp,-28
    f4dc:	df000615 	stw	fp,24(sp)
    f4e0:	df000604 	addi	fp,sp,24
    f4e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f4e8:	0005303a 	rdctl	r2,status
    f4ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f4f0:	e0fffe17 	ldw	r3,-8(fp)
    f4f4:	00bfff84 	movi	r2,-2
    f4f8:	1884703a 	and	r2,r3,r2
    f4fc:	1001703a 	wrctl	status,r2
  
  return context;
    f500:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f504:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f508:	d0a00c17 	ldw	r2,-32720(gp)
    f50c:	10c000c4 	addi	r3,r2,3
    f510:	00bfff04 	movi	r2,-4
    f514:	1884703a 	and	r2,r3,r2
    f518:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f51c:	d0e00c17 	ldw	r3,-32720(gp)
    f520:	e0bfff17 	ldw	r2,-4(fp)
    f524:	1887883a 	add	r3,r3,r2
    f528:	008000b4 	movhi	r2,2
    f52c:	10800004 	addi	r2,r2,0
    f530:	10c0062e 	bgeu	r2,r3,f54c <sbrk+0x74>
    f534:	e0bffb17 	ldw	r2,-20(fp)
    f538:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f53c:	e0bffa17 	ldw	r2,-24(fp)
    f540:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f544:	00bfffc4 	movi	r2,-1
    f548:	00000b06 	br	f578 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f54c:	d0a00c17 	ldw	r2,-32720(gp)
    f550:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f554:	d0e00c17 	ldw	r3,-32720(gp)
    f558:	e0bfff17 	ldw	r2,-4(fp)
    f55c:	1885883a 	add	r2,r3,r2
    f560:	d0a00c15 	stw	r2,-32720(gp)
    f564:	e0bffb17 	ldw	r2,-20(fp)
    f568:	e0bffc15 	stw	r2,-16(fp)
    f56c:	e0bffc17 	ldw	r2,-16(fp)
    f570:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f574:	e0bffd17 	ldw	r2,-12(fp)
} 
    f578:	e037883a 	mov	sp,fp
    f57c:	df000017 	ldw	fp,0(sp)
    f580:	dec00104 	addi	sp,sp,4
    f584:	f800283a 	ret

0000f588 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f588:	defffe04 	addi	sp,sp,-8
    f58c:	dfc00115 	stw	ra,4(sp)
    f590:	df000015 	stw	fp,0(sp)
    f594:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f598:	d0a00b17 	ldw	r2,-32724(gp)
    f59c:	10000326 	beq	r2,zero,f5ac <alt_get_errno+0x24>
    f5a0:	d0a00b17 	ldw	r2,-32724(gp)
    f5a4:	103ee83a 	callr	r2
    f5a8:	00000106 	br	f5b0 <alt_get_errno+0x28>
    f5ac:	d0a6cb04 	addi	r2,gp,-25812
}
    f5b0:	e037883a 	mov	sp,fp
    f5b4:	dfc00117 	ldw	ra,4(sp)
    f5b8:	df000017 	ldw	fp,0(sp)
    f5bc:	dec00204 	addi	sp,sp,8
    f5c0:	f800283a 	ret

0000f5c4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f5c4:	defff904 	addi	sp,sp,-28
    f5c8:	dfc00615 	stw	ra,24(sp)
    f5cc:	df000515 	stw	fp,20(sp)
    f5d0:	df000504 	addi	fp,sp,20
    f5d4:	e13ffd15 	stw	r4,-12(fp)
    f5d8:	e17ffe15 	stw	r5,-8(fp)
    f5dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f5e0:	e0bffd17 	ldw	r2,-12(fp)
    f5e4:	10000816 	blt	r2,zero,f608 <write+0x44>
    f5e8:	01400304 	movi	r5,12
    f5ec:	e13ffd17 	ldw	r4,-12(fp)
    f5f0:	0000e880 	call	e88 <__mulsi3>
    f5f4:	1007883a 	mov	r3,r2
    f5f8:	00800074 	movhi	r2,1
    f5fc:	10873e04 	addi	r2,r2,7416
    f600:	1885883a 	add	r2,r3,r2
    f604:	00000106 	br	f60c <write+0x48>
    f608:	0005883a 	mov	r2,zero
    f60c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f610:	e0bffb17 	ldw	r2,-20(fp)
    f614:	10002126 	beq	r2,zero,f69c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f618:	e0bffb17 	ldw	r2,-20(fp)
    f61c:	10800217 	ldw	r2,8(r2)
    f620:	108000cc 	andi	r2,r2,3
    f624:	10001826 	beq	r2,zero,f688 <write+0xc4>
    f628:	e0bffb17 	ldw	r2,-20(fp)
    f62c:	10800017 	ldw	r2,0(r2)
    f630:	10800617 	ldw	r2,24(r2)
    f634:	10001426 	beq	r2,zero,f688 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f638:	e0bffb17 	ldw	r2,-20(fp)
    f63c:	10800017 	ldw	r2,0(r2)
    f640:	10800617 	ldw	r2,24(r2)
    f644:	e0ffff17 	ldw	r3,-4(fp)
    f648:	180d883a 	mov	r6,r3
    f64c:	e17ffe17 	ldw	r5,-8(fp)
    f650:	e13ffb17 	ldw	r4,-20(fp)
    f654:	103ee83a 	callr	r2
    f658:	e0bffc15 	stw	r2,-16(fp)
    f65c:	e0bffc17 	ldw	r2,-16(fp)
    f660:	1000070e 	bge	r2,zero,f680 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    f664:	000f5880 	call	f588 <alt_get_errno>
    f668:	1007883a 	mov	r3,r2
    f66c:	e0bffc17 	ldw	r2,-16(fp)
    f670:	0085c83a 	sub	r2,zero,r2
    f674:	18800015 	stw	r2,0(r3)
        return -1;
    f678:	00bfffc4 	movi	r2,-1
    f67c:	00000c06 	br	f6b0 <write+0xec>
      }
      return rval;
    f680:	e0bffc17 	ldw	r2,-16(fp)
    f684:	00000a06 	br	f6b0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f688:	000f5880 	call	f588 <alt_get_errno>
    f68c:	1007883a 	mov	r3,r2
    f690:	00800344 	movi	r2,13
    f694:	18800015 	stw	r2,0(r3)
    f698:	00000406 	br	f6ac <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f69c:	000f5880 	call	f588 <alt_get_errno>
    f6a0:	1007883a 	mov	r3,r2
    f6a4:	00801444 	movi	r2,81
    f6a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f6ac:	00bfffc4 	movi	r2,-1
}
    f6b0:	e037883a 	mov	sp,fp
    f6b4:	dfc00117 	ldw	ra,4(sp)
    f6b8:	df000017 	ldw	fp,0(sp)
    f6bc:	dec00204 	addi	sp,sp,8
    f6c0:	f800283a 	ret

0000f6c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f6c4:	defffd04 	addi	sp,sp,-12
    f6c8:	dfc00215 	stw	ra,8(sp)
    f6cc:	df000115 	stw	fp,4(sp)
    f6d0:	df000104 	addi	fp,sp,4
    f6d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f6d8:	d1600804 	addi	r5,gp,-32736
    f6dc:	e13fff17 	ldw	r4,-4(fp)
    f6e0:	00104780 	call	10478 <alt_dev_llist_insert>
}
    f6e4:	e037883a 	mov	sp,fp
    f6e8:	dfc00117 	ldw	ra,4(sp)
    f6ec:	df000017 	ldw	fp,0(sp)
    f6f0:	dec00204 	addi	sp,sp,8
    f6f4:	f800283a 	ret

0000f6f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f6f8:	defffd04 	addi	sp,sp,-12
    f6fc:	dfc00215 	stw	ra,8(sp)
    f700:	df000115 	stw	fp,4(sp)
    f704:	df000104 	addi	fp,sp,4
    f708:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROC, proc);
    f70c:	0010dfc0 	call	10dfc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f710:	00800044 	movi	r2,1
    f714:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f718:	0001883a 	nop
    f71c:	e037883a 	mov	sp,fp
    f720:	dfc00117 	ldw	ra,4(sp)
    f724:	df000017 	ldw	fp,0(sp)
    f728:	dec00204 	addi	sp,sp,8
    f72c:	f800283a 	ret

0000f730 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f730:	defffe04 	addi	sp,sp,-8
    f734:	dfc00115 	stw	ra,4(sp)
    f738:	df000015 	stw	fp,0(sp)
    f73c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    f740:	01c0fa04 	movi	r7,1000
    f744:	01800044 	movi	r6,1
    f748:	000b883a 	mov	r5,zero
    f74c:	01000134 	movhi	r4,4
    f750:	21040804 	addi	r4,r4,4128
    f754:	00102740 	call	10274 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( WATCHDOG, watchdog);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    f758:	000d883a 	mov	r6,zero
    f75c:	000b883a 	mov	r5,zero
    f760:	01000074 	movhi	r4,1
    f764:	2107a804 	addi	r4,r4,7840
    f768:	000f8f80 	call	f8f8 <altera_avalon_jtag_uart_init>
    f76c:	01000074 	movhi	r4,1
    f770:	21079e04 	addi	r4,r4,7800
    f774:	000f6c40 	call	f6c4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    f778:	0001883a 	nop
}
    f77c:	0001883a 	nop
    f780:	e037883a 	mov	sp,fp
    f784:	dfc00117 	ldw	ra,4(sp)
    f788:	df000017 	ldw	fp,0(sp)
    f78c:	dec00204 	addi	sp,sp,8
    f790:	f800283a 	ret

0000f794 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f794:	defffa04 	addi	sp,sp,-24
    f798:	dfc00515 	stw	ra,20(sp)
    f79c:	df000415 	stw	fp,16(sp)
    f7a0:	df000404 	addi	fp,sp,16
    f7a4:	e13ffd15 	stw	r4,-12(fp)
    f7a8:	e17ffe15 	stw	r5,-8(fp)
    f7ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f7b0:	e0bffd17 	ldw	r2,-12(fp)
    f7b4:	10800017 	ldw	r2,0(r2)
    f7b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f7bc:	e0bffc17 	ldw	r2,-16(fp)
    f7c0:	10c00a04 	addi	r3,r2,40
    f7c4:	e0bffd17 	ldw	r2,-12(fp)
    f7c8:	10800217 	ldw	r2,8(r2)
    f7cc:	100f883a 	mov	r7,r2
    f7d0:	e1bfff17 	ldw	r6,-4(fp)
    f7d4:	e17ffe17 	ldw	r5,-8(fp)
    f7d8:	1809883a 	mov	r4,r3
    f7dc:	000fdbc0 	call	fdbc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f7e0:	e037883a 	mov	sp,fp
    f7e4:	dfc00117 	ldw	ra,4(sp)
    f7e8:	df000017 	ldw	fp,0(sp)
    f7ec:	dec00204 	addi	sp,sp,8
    f7f0:	f800283a 	ret

0000f7f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f7f4:	defffa04 	addi	sp,sp,-24
    f7f8:	dfc00515 	stw	ra,20(sp)
    f7fc:	df000415 	stw	fp,16(sp)
    f800:	df000404 	addi	fp,sp,16
    f804:	e13ffd15 	stw	r4,-12(fp)
    f808:	e17ffe15 	stw	r5,-8(fp)
    f80c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f810:	e0bffd17 	ldw	r2,-12(fp)
    f814:	10800017 	ldw	r2,0(r2)
    f818:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f81c:	e0bffc17 	ldw	r2,-16(fp)
    f820:	10c00a04 	addi	r3,r2,40
    f824:	e0bffd17 	ldw	r2,-12(fp)
    f828:	10800217 	ldw	r2,8(r2)
    f82c:	100f883a 	mov	r7,r2
    f830:	e1bfff17 	ldw	r6,-4(fp)
    f834:	e17ffe17 	ldw	r5,-8(fp)
    f838:	1809883a 	mov	r4,r3
    f83c:	000ffd80 	call	ffd8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f840:	e037883a 	mov	sp,fp
    f844:	dfc00117 	ldw	ra,4(sp)
    f848:	df000017 	ldw	fp,0(sp)
    f84c:	dec00204 	addi	sp,sp,8
    f850:	f800283a 	ret

0000f854 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f854:	defffc04 	addi	sp,sp,-16
    f858:	dfc00315 	stw	ra,12(sp)
    f85c:	df000215 	stw	fp,8(sp)
    f860:	df000204 	addi	fp,sp,8
    f864:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f868:	e0bfff17 	ldw	r2,-4(fp)
    f86c:	10800017 	ldw	r2,0(r2)
    f870:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f874:	e0bffe17 	ldw	r2,-8(fp)
    f878:	10c00a04 	addi	r3,r2,40
    f87c:	e0bfff17 	ldw	r2,-4(fp)
    f880:	10800217 	ldw	r2,8(r2)
    f884:	100b883a 	mov	r5,r2
    f888:	1809883a 	mov	r4,r3
    f88c:	000fc640 	call	fc64 <altera_avalon_jtag_uart_close>
}
    f890:	e037883a 	mov	sp,fp
    f894:	dfc00117 	ldw	ra,4(sp)
    f898:	df000017 	ldw	fp,0(sp)
    f89c:	dec00204 	addi	sp,sp,8
    f8a0:	f800283a 	ret

0000f8a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f8a4:	defffa04 	addi	sp,sp,-24
    f8a8:	dfc00515 	stw	ra,20(sp)
    f8ac:	df000415 	stw	fp,16(sp)
    f8b0:	df000404 	addi	fp,sp,16
    f8b4:	e13ffd15 	stw	r4,-12(fp)
    f8b8:	e17ffe15 	stw	r5,-8(fp)
    f8bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f8c0:	e0bffd17 	ldw	r2,-12(fp)
    f8c4:	10800017 	ldw	r2,0(r2)
    f8c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f8cc:	e0bffc17 	ldw	r2,-16(fp)
    f8d0:	10800a04 	addi	r2,r2,40
    f8d4:	e1bfff17 	ldw	r6,-4(fp)
    f8d8:	e17ffe17 	ldw	r5,-8(fp)
    f8dc:	1009883a 	mov	r4,r2
    f8e0:	000fccc0 	call	fccc <altera_avalon_jtag_uart_ioctl>
}
    f8e4:	e037883a 	mov	sp,fp
    f8e8:	dfc00117 	ldw	ra,4(sp)
    f8ec:	df000017 	ldw	fp,0(sp)
    f8f0:	dec00204 	addi	sp,sp,8
    f8f4:	f800283a 	ret

0000f8f8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f8f8:	defffa04 	addi	sp,sp,-24
    f8fc:	dfc00515 	stw	ra,20(sp)
    f900:	df000415 	stw	fp,16(sp)
    f904:	df000404 	addi	fp,sp,16
    f908:	e13ffd15 	stw	r4,-12(fp)
    f90c:	e17ffe15 	stw	r5,-8(fp)
    f910:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f914:	e0bffd17 	ldw	r2,-12(fp)
    f918:	00c00044 	movi	r3,1
    f91c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f920:	e0bffd17 	ldw	r2,-12(fp)
    f924:	10800017 	ldw	r2,0(r2)
    f928:	10800104 	addi	r2,r2,4
    f92c:	1007883a 	mov	r3,r2
    f930:	e0bffd17 	ldw	r2,-12(fp)
    f934:	10800817 	ldw	r2,32(r2)
    f938:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f93c:	e0bffe17 	ldw	r2,-8(fp)
    f940:	e0ffff17 	ldw	r3,-4(fp)
    f944:	d8000015 	stw	zero,0(sp)
    f948:	e1fffd17 	ldw	r7,-12(fp)
    f94c:	01800074 	movhi	r6,1
    f950:	31be6e04 	addi	r6,r6,-1608
    f954:	180b883a 	mov	r5,r3
    f958:	1009883a 	mov	r4,r2
    f95c:	00108580 	call	10858 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f960:	e0bffd17 	ldw	r2,-12(fp)
    f964:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f968:	e0bffd17 	ldw	r2,-12(fp)
    f96c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f970:	d0e6d617 	ldw	r3,-25768(gp)
    f974:	e1fffd17 	ldw	r7,-12(fp)
    f978:	01800074 	movhi	r6,1
    f97c:	31bef104 	addi	r6,r6,-1084
    f980:	180b883a 	mov	r5,r3
    f984:	1009883a 	mov	r4,r2
    f988:	00102f00 	call	102f0 <alt_alarm_start>
    f98c:	1000040e 	bge	r2,zero,f9a0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f990:	e0fffd17 	ldw	r3,-12(fp)
    f994:	00a00034 	movhi	r2,32768
    f998:	10bfffc4 	addi	r2,r2,-1
    f99c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f9a0:	0001883a 	nop
    f9a4:	e037883a 	mov	sp,fp
    f9a8:	dfc00117 	ldw	ra,4(sp)
    f9ac:	df000017 	ldw	fp,0(sp)
    f9b0:	dec00204 	addi	sp,sp,8
    f9b4:	f800283a 	ret

0000f9b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f9b8:	defff804 	addi	sp,sp,-32
    f9bc:	df000715 	stw	fp,28(sp)
    f9c0:	df000704 	addi	fp,sp,28
    f9c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f9c8:	e0bfff17 	ldw	r2,-4(fp)
    f9cc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f9d0:	e0bffb17 	ldw	r2,-20(fp)
    f9d4:	10800017 	ldw	r2,0(r2)
    f9d8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f9dc:	e0bffc17 	ldw	r2,-16(fp)
    f9e0:	10800104 	addi	r2,r2,4
    f9e4:	10800037 	ldwio	r2,0(r2)
    f9e8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f9ec:	e0bffd17 	ldw	r2,-12(fp)
    f9f0:	1080c00c 	andi	r2,r2,768
    f9f4:	10006d26 	beq	r2,zero,fbac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f9f8:	e0bffd17 	ldw	r2,-12(fp)
    f9fc:	1080400c 	andi	r2,r2,256
    fa00:	10003526 	beq	r2,zero,fad8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    fa04:	00800074 	movhi	r2,1
    fa08:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fa0c:	e0bffb17 	ldw	r2,-20(fp)
    fa10:	10800a17 	ldw	r2,40(r2)
    fa14:	10800044 	addi	r2,r2,1
    fa18:	1081ffcc 	andi	r2,r2,2047
    fa1c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    fa20:	e0bffb17 	ldw	r2,-20(fp)
    fa24:	10c00b17 	ldw	r3,44(r2)
    fa28:	e0bffe17 	ldw	r2,-8(fp)
    fa2c:	18801526 	beq	r3,r2,fa84 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    fa30:	e0bffc17 	ldw	r2,-16(fp)
    fa34:	10800037 	ldwio	r2,0(r2)
    fa38:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    fa3c:	e0bff917 	ldw	r2,-28(fp)
    fa40:	10a0000c 	andi	r2,r2,32768
    fa44:	10001126 	beq	r2,zero,fa8c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    fa48:	e0bffb17 	ldw	r2,-20(fp)
    fa4c:	10800a17 	ldw	r2,40(r2)
    fa50:	e0fff917 	ldw	r3,-28(fp)
    fa54:	1809883a 	mov	r4,r3
    fa58:	e0fffb17 	ldw	r3,-20(fp)
    fa5c:	1885883a 	add	r2,r3,r2
    fa60:	10800e04 	addi	r2,r2,56
    fa64:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fa68:	e0bffb17 	ldw	r2,-20(fp)
    fa6c:	10800a17 	ldw	r2,40(r2)
    fa70:	10800044 	addi	r2,r2,1
    fa74:	10c1ffcc 	andi	r3,r2,2047
    fa78:	e0bffb17 	ldw	r2,-20(fp)
    fa7c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    fa80:	003fe206 	br	fa0c <__alt_data_end+0xfffefa0c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    fa84:	0001883a 	nop
    fa88:	00000106 	br	fa90 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    fa8c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    fa90:	e0bff917 	ldw	r2,-28(fp)
    fa94:	10bfffec 	andhi	r2,r2,65535
    fa98:	10000f26 	beq	r2,zero,fad8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fa9c:	e0bffb17 	ldw	r2,-20(fp)
    faa0:	10c00817 	ldw	r3,32(r2)
    faa4:	00bfff84 	movi	r2,-2
    faa8:	1886703a 	and	r3,r3,r2
    faac:	e0bffb17 	ldw	r2,-20(fp)
    fab0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    fab4:	e0bffc17 	ldw	r2,-16(fp)
    fab8:	10800104 	addi	r2,r2,4
    fabc:	1007883a 	mov	r3,r2
    fac0:	e0bffb17 	ldw	r2,-20(fp)
    fac4:	10800817 	ldw	r2,32(r2)
    fac8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    facc:	e0bffc17 	ldw	r2,-16(fp)
    fad0:	10800104 	addi	r2,r2,4
    fad4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    fad8:	e0bffd17 	ldw	r2,-12(fp)
    fadc:	1080800c 	andi	r2,r2,512
    fae0:	103fbe26 	beq	r2,zero,f9dc <__alt_data_end+0xfffef9dc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    fae4:	e0bffd17 	ldw	r2,-12(fp)
    fae8:	1004d43a 	srli	r2,r2,16
    faec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    faf0:	00001406 	br	fb44 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    faf4:	e0bffc17 	ldw	r2,-16(fp)
    faf8:	e0fffb17 	ldw	r3,-20(fp)
    fafc:	18c00d17 	ldw	r3,52(r3)
    fb00:	e13ffb17 	ldw	r4,-20(fp)
    fb04:	20c7883a 	add	r3,r4,r3
    fb08:	18c20e04 	addi	r3,r3,2104
    fb0c:	18c00003 	ldbu	r3,0(r3)
    fb10:	18c03fcc 	andi	r3,r3,255
    fb14:	18c0201c 	xori	r3,r3,128
    fb18:	18ffe004 	addi	r3,r3,-128
    fb1c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fb20:	e0bffb17 	ldw	r2,-20(fp)
    fb24:	10800d17 	ldw	r2,52(r2)
    fb28:	10800044 	addi	r2,r2,1
    fb2c:	10c1ffcc 	andi	r3,r2,2047
    fb30:	e0bffb17 	ldw	r2,-20(fp)
    fb34:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    fb38:	e0bffa17 	ldw	r2,-24(fp)
    fb3c:	10bfffc4 	addi	r2,r2,-1
    fb40:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    fb44:	e0bffa17 	ldw	r2,-24(fp)
    fb48:	10000526 	beq	r2,zero,fb60 <altera_avalon_jtag_uart_irq+0x1a8>
    fb4c:	e0bffb17 	ldw	r2,-20(fp)
    fb50:	10c00d17 	ldw	r3,52(r2)
    fb54:	e0bffb17 	ldw	r2,-20(fp)
    fb58:	10800c17 	ldw	r2,48(r2)
    fb5c:	18bfe51e 	bne	r3,r2,faf4 <__alt_data_end+0xfffefaf4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    fb60:	e0bffa17 	ldw	r2,-24(fp)
    fb64:	103f9d26 	beq	r2,zero,f9dc <__alt_data_end+0xfffef9dc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fb68:	e0bffb17 	ldw	r2,-20(fp)
    fb6c:	10c00817 	ldw	r3,32(r2)
    fb70:	00bfff44 	movi	r2,-3
    fb74:	1886703a 	and	r3,r3,r2
    fb78:	e0bffb17 	ldw	r2,-20(fp)
    fb7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fb80:	e0bffb17 	ldw	r2,-20(fp)
    fb84:	10800017 	ldw	r2,0(r2)
    fb88:	10800104 	addi	r2,r2,4
    fb8c:	1007883a 	mov	r3,r2
    fb90:	e0bffb17 	ldw	r2,-20(fp)
    fb94:	10800817 	ldw	r2,32(r2)
    fb98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fb9c:	e0bffc17 	ldw	r2,-16(fp)
    fba0:	10800104 	addi	r2,r2,4
    fba4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    fba8:	003f8c06 	br	f9dc <__alt_data_end+0xfffef9dc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    fbac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    fbb0:	0001883a 	nop
    fbb4:	e037883a 	mov	sp,fp
    fbb8:	df000017 	ldw	fp,0(sp)
    fbbc:	dec00104 	addi	sp,sp,4
    fbc0:	f800283a 	ret

0000fbc4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    fbc4:	defff804 	addi	sp,sp,-32
    fbc8:	df000715 	stw	fp,28(sp)
    fbcc:	df000704 	addi	fp,sp,28
    fbd0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    fbd4:	e0bffb17 	ldw	r2,-20(fp)
    fbd8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    fbdc:	e0bff917 	ldw	r2,-28(fp)
    fbe0:	10800017 	ldw	r2,0(r2)
    fbe4:	10800104 	addi	r2,r2,4
    fbe8:	10800037 	ldwio	r2,0(r2)
    fbec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    fbf0:	e0bffa17 	ldw	r2,-24(fp)
    fbf4:	1081000c 	andi	r2,r2,1024
    fbf8:	10000b26 	beq	r2,zero,fc28 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    fbfc:	e0bff917 	ldw	r2,-28(fp)
    fc00:	10800017 	ldw	r2,0(r2)
    fc04:	10800104 	addi	r2,r2,4
    fc08:	1007883a 	mov	r3,r2
    fc0c:	e0bff917 	ldw	r2,-28(fp)
    fc10:	10800817 	ldw	r2,32(r2)
    fc14:	10810014 	ori	r2,r2,1024
    fc18:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    fc1c:	e0bff917 	ldw	r2,-28(fp)
    fc20:	10000915 	stw	zero,36(r2)
    fc24:	00000a06 	br	fc50 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    fc28:	e0bff917 	ldw	r2,-28(fp)
    fc2c:	10c00917 	ldw	r3,36(r2)
    fc30:	00a00034 	movhi	r2,32768
    fc34:	10bfff04 	addi	r2,r2,-4
    fc38:	10c00536 	bltu	r2,r3,fc50 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    fc3c:	e0bff917 	ldw	r2,-28(fp)
    fc40:	10800917 	ldw	r2,36(r2)
    fc44:	10c00044 	addi	r3,r2,1
    fc48:	e0bff917 	ldw	r2,-28(fp)
    fc4c:	10c00915 	stw	r3,36(r2)
    fc50:	d0a6d617 	ldw	r2,-25768(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    fc54:	e037883a 	mov	sp,fp
    fc58:	df000017 	ldw	fp,0(sp)
    fc5c:	dec00104 	addi	sp,sp,4
    fc60:	f800283a 	ret

0000fc64 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    fc64:	defffd04 	addi	sp,sp,-12
    fc68:	df000215 	stw	fp,8(sp)
    fc6c:	df000204 	addi	fp,sp,8
    fc70:	e13ffe15 	stw	r4,-8(fp)
    fc74:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fc78:	00000506 	br	fc90 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    fc7c:	e0bfff17 	ldw	r2,-4(fp)
    fc80:	1090000c 	andi	r2,r2,16384
    fc84:	10000226 	beq	r2,zero,fc90 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    fc88:	00bffd44 	movi	r2,-11
    fc8c:	00000b06 	br	fcbc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fc90:	e0bffe17 	ldw	r2,-8(fp)
    fc94:	10c00d17 	ldw	r3,52(r2)
    fc98:	e0bffe17 	ldw	r2,-8(fp)
    fc9c:	10800c17 	ldw	r2,48(r2)
    fca0:	18800526 	beq	r3,r2,fcb8 <altera_avalon_jtag_uart_close+0x54>
    fca4:	e0bffe17 	ldw	r2,-8(fp)
    fca8:	10c00917 	ldw	r3,36(r2)
    fcac:	e0bffe17 	ldw	r2,-8(fp)
    fcb0:	10800117 	ldw	r2,4(r2)
    fcb4:	18bff136 	bltu	r3,r2,fc7c <__alt_data_end+0xfffefc7c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    fcb8:	0005883a 	mov	r2,zero
}
    fcbc:	e037883a 	mov	sp,fp
    fcc0:	df000017 	ldw	fp,0(sp)
    fcc4:	dec00104 	addi	sp,sp,4
    fcc8:	f800283a 	ret

0000fccc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    fccc:	defffa04 	addi	sp,sp,-24
    fcd0:	df000515 	stw	fp,20(sp)
    fcd4:	df000504 	addi	fp,sp,20
    fcd8:	e13ffd15 	stw	r4,-12(fp)
    fcdc:	e17ffe15 	stw	r5,-8(fp)
    fce0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    fce4:	00bff9c4 	movi	r2,-25
    fce8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    fcec:	e0bffe17 	ldw	r2,-8(fp)
    fcf0:	10da8060 	cmpeqi	r3,r2,27137
    fcf4:	1800031e 	bne	r3,zero,fd04 <altera_avalon_jtag_uart_ioctl+0x38>
    fcf8:	109a80a0 	cmpeqi	r2,r2,27138
    fcfc:	1000181e 	bne	r2,zero,fd60 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    fd00:	00002906 	br	fda8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    fd04:	e0bffd17 	ldw	r2,-12(fp)
    fd08:	10c00117 	ldw	r3,4(r2)
    fd0c:	00a00034 	movhi	r2,32768
    fd10:	10bfffc4 	addi	r2,r2,-1
    fd14:	18802126 	beq	r3,r2,fd9c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    fd18:	e0bfff17 	ldw	r2,-4(fp)
    fd1c:	10800017 	ldw	r2,0(r2)
    fd20:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    fd24:	e0bffc17 	ldw	r2,-16(fp)
    fd28:	10800090 	cmplti	r2,r2,2
    fd2c:	1000061e 	bne	r2,zero,fd48 <altera_avalon_jtag_uart_ioctl+0x7c>
    fd30:	e0fffc17 	ldw	r3,-16(fp)
    fd34:	00a00034 	movhi	r2,32768
    fd38:	10bfffc4 	addi	r2,r2,-1
    fd3c:	18800226 	beq	r3,r2,fd48 <altera_avalon_jtag_uart_ioctl+0x7c>
    fd40:	e0bffc17 	ldw	r2,-16(fp)
    fd44:	00000206 	br	fd50 <altera_avalon_jtag_uart_ioctl+0x84>
    fd48:	00a00034 	movhi	r2,32768
    fd4c:	10bfff84 	addi	r2,r2,-2
    fd50:	e0fffd17 	ldw	r3,-12(fp)
    fd54:	18800115 	stw	r2,4(r3)
      rc = 0;
    fd58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fd5c:	00000f06 	br	fd9c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    fd60:	e0bffd17 	ldw	r2,-12(fp)
    fd64:	10c00117 	ldw	r3,4(r2)
    fd68:	00a00034 	movhi	r2,32768
    fd6c:	10bfffc4 	addi	r2,r2,-1
    fd70:	18800c26 	beq	r3,r2,fda4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    fd74:	e0bffd17 	ldw	r2,-12(fp)
    fd78:	10c00917 	ldw	r3,36(r2)
    fd7c:	e0bffd17 	ldw	r2,-12(fp)
    fd80:	10800117 	ldw	r2,4(r2)
    fd84:	1885803a 	cmpltu	r2,r3,r2
    fd88:	10c03fcc 	andi	r3,r2,255
    fd8c:	e0bfff17 	ldw	r2,-4(fp)
    fd90:	10c00015 	stw	r3,0(r2)
      rc = 0;
    fd94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fd98:	00000206 	br	fda4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    fd9c:	0001883a 	nop
    fda0:	00000106 	br	fda8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    fda4:	0001883a 	nop

  default:
    break;
  }

  return rc;
    fda8:	e0bffb17 	ldw	r2,-20(fp)
}
    fdac:	e037883a 	mov	sp,fp
    fdb0:	df000017 	ldw	fp,0(sp)
    fdb4:	dec00104 	addi	sp,sp,4
    fdb8:	f800283a 	ret

0000fdbc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fdbc:	defff304 	addi	sp,sp,-52
    fdc0:	dfc00c15 	stw	ra,48(sp)
    fdc4:	df000b15 	stw	fp,44(sp)
    fdc8:	df000b04 	addi	fp,sp,44
    fdcc:	e13ffc15 	stw	r4,-16(fp)
    fdd0:	e17ffd15 	stw	r5,-12(fp)
    fdd4:	e1bffe15 	stw	r6,-8(fp)
    fdd8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fddc:	e0bffd17 	ldw	r2,-12(fp)
    fde0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fde4:	00004706 	br	ff04 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fde8:	e0bffc17 	ldw	r2,-16(fp)
    fdec:	10800a17 	ldw	r2,40(r2)
    fdf0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fdf4:	e0bffc17 	ldw	r2,-16(fp)
    fdf8:	10800b17 	ldw	r2,44(r2)
    fdfc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fe00:	e0fff717 	ldw	r3,-36(fp)
    fe04:	e0bff817 	ldw	r2,-32(fp)
    fe08:	18800536 	bltu	r3,r2,fe20 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    fe0c:	e0fff717 	ldw	r3,-36(fp)
    fe10:	e0bff817 	ldw	r2,-32(fp)
    fe14:	1885c83a 	sub	r2,r3,r2
    fe18:	e0bff615 	stw	r2,-40(fp)
    fe1c:	00000406 	br	fe30 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fe20:	00c20004 	movi	r3,2048
    fe24:	e0bff817 	ldw	r2,-32(fp)
    fe28:	1885c83a 	sub	r2,r3,r2
    fe2c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fe30:	e0bff617 	ldw	r2,-40(fp)
    fe34:	10001e26 	beq	r2,zero,feb0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    fe38:	e0fffe17 	ldw	r3,-8(fp)
    fe3c:	e0bff617 	ldw	r2,-40(fp)
    fe40:	1880022e 	bgeu	r3,r2,fe4c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    fe44:	e0bffe17 	ldw	r2,-8(fp)
    fe48:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fe4c:	e0bffc17 	ldw	r2,-16(fp)
    fe50:	10c00e04 	addi	r3,r2,56
    fe54:	e0bff817 	ldw	r2,-32(fp)
    fe58:	1885883a 	add	r2,r3,r2
    fe5c:	e1bff617 	ldw	r6,-40(fp)
    fe60:	100b883a 	mov	r5,r2
    fe64:	e13ff517 	ldw	r4,-44(fp)
    fe68:	00055d40 	call	55d4 <memcpy>
      ptr   += n;
    fe6c:	e0fff517 	ldw	r3,-44(fp)
    fe70:	e0bff617 	ldw	r2,-40(fp)
    fe74:	1885883a 	add	r2,r3,r2
    fe78:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    fe7c:	e0fffe17 	ldw	r3,-8(fp)
    fe80:	e0bff617 	ldw	r2,-40(fp)
    fe84:	1885c83a 	sub	r2,r3,r2
    fe88:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fe8c:	e0fff817 	ldw	r3,-32(fp)
    fe90:	e0bff617 	ldw	r2,-40(fp)
    fe94:	1885883a 	add	r2,r3,r2
    fe98:	10c1ffcc 	andi	r3,r2,2047
    fe9c:	e0bffc17 	ldw	r2,-16(fp)
    fea0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    fea4:	e0bffe17 	ldw	r2,-8(fp)
    fea8:	00bfcf16 	blt	zero,r2,fde8 <__alt_data_end+0xfffefde8>
    feac:	00000106 	br	feb4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    feb0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    feb4:	e0fff517 	ldw	r3,-44(fp)
    feb8:	e0bffd17 	ldw	r2,-12(fp)
    febc:	1880141e 	bne	r3,r2,ff10 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fec0:	e0bfff17 	ldw	r2,-4(fp)
    fec4:	1090000c 	andi	r2,r2,16384
    fec8:	1000131e 	bne	r2,zero,ff18 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fecc:	0001883a 	nop
    fed0:	e0bffc17 	ldw	r2,-16(fp)
    fed4:	10c00a17 	ldw	r3,40(r2)
    fed8:	e0bff717 	ldw	r2,-36(fp)
    fedc:	1880051e 	bne	r3,r2,fef4 <altera_avalon_jtag_uart_read+0x138>
    fee0:	e0bffc17 	ldw	r2,-16(fp)
    fee4:	10c00917 	ldw	r3,36(r2)
    fee8:	e0bffc17 	ldw	r2,-16(fp)
    feec:	10800117 	ldw	r2,4(r2)
    fef0:	18bff736 	bltu	r3,r2,fed0 <__alt_data_end+0xfffefed0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fef4:	e0bffc17 	ldw	r2,-16(fp)
    fef8:	10c00a17 	ldw	r3,40(r2)
    fefc:	e0bff717 	ldw	r2,-36(fp)
    ff00:	18800726 	beq	r3,r2,ff20 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ff04:	e0bffe17 	ldw	r2,-8(fp)
    ff08:	00bfb716 	blt	zero,r2,fde8 <__alt_data_end+0xfffefde8>
    ff0c:	00000506 	br	ff24 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    ff10:	0001883a 	nop
    ff14:	00000306 	br	ff24 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    ff18:	0001883a 	nop
    ff1c:	00000106 	br	ff24 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    ff20:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ff24:	e0fff517 	ldw	r3,-44(fp)
    ff28:	e0bffd17 	ldw	r2,-12(fp)
    ff2c:	18801826 	beq	r3,r2,ff90 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff30:	0005303a 	rdctl	r2,status
    ff34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff38:	e0fffb17 	ldw	r3,-20(fp)
    ff3c:	00bfff84 	movi	r2,-2
    ff40:	1884703a 	and	r2,r3,r2
    ff44:	1001703a 	wrctl	status,r2
  
  return context;
    ff48:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ff4c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ff50:	e0bffc17 	ldw	r2,-16(fp)
    ff54:	10800817 	ldw	r2,32(r2)
    ff58:	10c00054 	ori	r3,r2,1
    ff5c:	e0bffc17 	ldw	r2,-16(fp)
    ff60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ff64:	e0bffc17 	ldw	r2,-16(fp)
    ff68:	10800017 	ldw	r2,0(r2)
    ff6c:	10800104 	addi	r2,r2,4
    ff70:	1007883a 	mov	r3,r2
    ff74:	e0bffc17 	ldw	r2,-16(fp)
    ff78:	10800817 	ldw	r2,32(r2)
    ff7c:	18800035 	stwio	r2,0(r3)
    ff80:	e0bffa17 	ldw	r2,-24(fp)
    ff84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff88:	e0bff917 	ldw	r2,-28(fp)
    ff8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ff90:	e0fff517 	ldw	r3,-44(fp)
    ff94:	e0bffd17 	ldw	r2,-12(fp)
    ff98:	18800426 	beq	r3,r2,ffac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    ff9c:	e0fff517 	ldw	r3,-44(fp)
    ffa0:	e0bffd17 	ldw	r2,-12(fp)
    ffa4:	1885c83a 	sub	r2,r3,r2
    ffa8:	00000606 	br	ffc4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    ffac:	e0bfff17 	ldw	r2,-4(fp)
    ffb0:	1090000c 	andi	r2,r2,16384
    ffb4:	10000226 	beq	r2,zero,ffc0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    ffb8:	00bffd44 	movi	r2,-11
    ffbc:	00000106 	br	ffc4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    ffc0:	00bffec4 	movi	r2,-5
}
    ffc4:	e037883a 	mov	sp,fp
    ffc8:	dfc00117 	ldw	ra,4(sp)
    ffcc:	df000017 	ldw	fp,0(sp)
    ffd0:	dec00204 	addi	sp,sp,8
    ffd4:	f800283a 	ret

0000ffd8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ffd8:	defff304 	addi	sp,sp,-52
    ffdc:	dfc00c15 	stw	ra,48(sp)
    ffe0:	df000b15 	stw	fp,44(sp)
    ffe4:	df000b04 	addi	fp,sp,44
    ffe8:	e13ffc15 	stw	r4,-16(fp)
    ffec:	e17ffd15 	stw	r5,-12(fp)
    fff0:	e1bffe15 	stw	r6,-8(fp)
    fff4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    fff8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    fffc:	e0bffd17 	ldw	r2,-12(fp)
   10000:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10004:	00003706 	br	100e4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10008:	e0bffc17 	ldw	r2,-16(fp)
   1000c:	10800c17 	ldw	r2,48(r2)
   10010:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   10014:	e0bffc17 	ldw	r2,-16(fp)
   10018:	10800d17 	ldw	r2,52(r2)
   1001c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10020:	e0fff917 	ldw	r3,-28(fp)
   10024:	e0bff517 	ldw	r2,-44(fp)
   10028:	1880062e 	bgeu	r3,r2,10044 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1002c:	e0fff517 	ldw	r3,-44(fp)
   10030:	e0bff917 	ldw	r2,-28(fp)
   10034:	1885c83a 	sub	r2,r3,r2
   10038:	10bfffc4 	addi	r2,r2,-1
   1003c:	e0bff615 	stw	r2,-40(fp)
   10040:	00000b06 	br	10070 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10044:	e0bff517 	ldw	r2,-44(fp)
   10048:	10000526 	beq	r2,zero,10060 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1004c:	00c20004 	movi	r3,2048
   10050:	e0bff917 	ldw	r2,-28(fp)
   10054:	1885c83a 	sub	r2,r3,r2
   10058:	e0bff615 	stw	r2,-40(fp)
   1005c:	00000406 	br	10070 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10060:	00c1ffc4 	movi	r3,2047
   10064:	e0bff917 	ldw	r2,-28(fp)
   10068:	1885c83a 	sub	r2,r3,r2
   1006c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10070:	e0bff617 	ldw	r2,-40(fp)
   10074:	10001e26 	beq	r2,zero,100f0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10078:	e0fffe17 	ldw	r3,-8(fp)
   1007c:	e0bff617 	ldw	r2,-40(fp)
   10080:	1880022e 	bgeu	r3,r2,1008c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10084:	e0bffe17 	ldw	r2,-8(fp)
   10088:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1008c:	e0bffc17 	ldw	r2,-16(fp)
   10090:	10c20e04 	addi	r3,r2,2104
   10094:	e0bff917 	ldw	r2,-28(fp)
   10098:	1885883a 	add	r2,r3,r2
   1009c:	e1bff617 	ldw	r6,-40(fp)
   100a0:	e17ffd17 	ldw	r5,-12(fp)
   100a4:	1009883a 	mov	r4,r2
   100a8:	00055d40 	call	55d4 <memcpy>
      ptr   += n;
   100ac:	e0fffd17 	ldw	r3,-12(fp)
   100b0:	e0bff617 	ldw	r2,-40(fp)
   100b4:	1885883a 	add	r2,r3,r2
   100b8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   100bc:	e0fffe17 	ldw	r3,-8(fp)
   100c0:	e0bff617 	ldw	r2,-40(fp)
   100c4:	1885c83a 	sub	r2,r3,r2
   100c8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   100cc:	e0fff917 	ldw	r3,-28(fp)
   100d0:	e0bff617 	ldw	r2,-40(fp)
   100d4:	1885883a 	add	r2,r3,r2
   100d8:	10c1ffcc 	andi	r3,r2,2047
   100dc:	e0bffc17 	ldw	r2,-16(fp)
   100e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   100e4:	e0bffe17 	ldw	r2,-8(fp)
   100e8:	00bfc716 	blt	zero,r2,10008 <__alt_data_end+0xffff0008>
   100ec:	00000106 	br	100f4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   100f0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   100f4:	0005303a 	rdctl	r2,status
   100f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   100fc:	e0fffb17 	ldw	r3,-20(fp)
   10100:	00bfff84 	movi	r2,-2
   10104:	1884703a 	and	r2,r3,r2
   10108:	1001703a 	wrctl	status,r2
  
  return context;
   1010c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10110:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10114:	e0bffc17 	ldw	r2,-16(fp)
   10118:	10800817 	ldw	r2,32(r2)
   1011c:	10c00094 	ori	r3,r2,2
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10128:	e0bffc17 	ldw	r2,-16(fp)
   1012c:	10800017 	ldw	r2,0(r2)
   10130:	10800104 	addi	r2,r2,4
   10134:	1007883a 	mov	r3,r2
   10138:	e0bffc17 	ldw	r2,-16(fp)
   1013c:	10800817 	ldw	r2,32(r2)
   10140:	18800035 	stwio	r2,0(r3)
   10144:	e0bffa17 	ldw	r2,-24(fp)
   10148:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1014c:	e0bff817 	ldw	r2,-32(fp)
   10150:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10154:	e0bffe17 	ldw	r2,-8(fp)
   10158:	0080100e 	bge	zero,r2,1019c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1015c:	e0bfff17 	ldw	r2,-4(fp)
   10160:	1090000c 	andi	r2,r2,16384
   10164:	1000101e 	bne	r2,zero,101a8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10168:	0001883a 	nop
   1016c:	e0bffc17 	ldw	r2,-16(fp)
   10170:	10c00d17 	ldw	r3,52(r2)
   10174:	e0bff517 	ldw	r2,-44(fp)
   10178:	1880051e 	bne	r3,r2,10190 <altera_avalon_jtag_uart_write+0x1b8>
   1017c:	e0bffc17 	ldw	r2,-16(fp)
   10180:	10c00917 	ldw	r3,36(r2)
   10184:	e0bffc17 	ldw	r2,-16(fp)
   10188:	10800117 	ldw	r2,4(r2)
   1018c:	18bff736 	bltu	r3,r2,1016c <__alt_data_end+0xffff016c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	10800917 	ldw	r2,36(r2)
   10198:	1000051e 	bne	r2,zero,101b0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1019c:	e0bffe17 	ldw	r2,-8(fp)
   101a0:	00bfd016 	blt	zero,r2,100e4 <__alt_data_end+0xffff00e4>
   101a4:	00000306 	br	101b4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   101a8:	0001883a 	nop
   101ac:	00000106 	br	101b4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   101b0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   101b4:	e0fffd17 	ldw	r3,-12(fp)
   101b8:	e0bff717 	ldw	r2,-36(fp)
   101bc:	18800426 	beq	r3,r2,101d0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   101c0:	e0fffd17 	ldw	r3,-12(fp)
   101c4:	e0bff717 	ldw	r2,-36(fp)
   101c8:	1885c83a 	sub	r2,r3,r2
   101cc:	00000606 	br	101e8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   101d0:	e0bfff17 	ldw	r2,-4(fp)
   101d4:	1090000c 	andi	r2,r2,16384
   101d8:	10000226 	beq	r2,zero,101e4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   101dc:	00bffd44 	movi	r2,-11
   101e0:	00000106 	br	101e8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   101e4:	00bffec4 	movi	r2,-5
}
   101e8:	e037883a 	mov	sp,fp
   101ec:	dfc00117 	ldw	ra,4(sp)
   101f0:	df000017 	ldw	fp,0(sp)
   101f4:	dec00204 	addi	sp,sp,8
   101f8:	f800283a 	ret

000101fc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   101fc:	defffa04 	addi	sp,sp,-24
   10200:	dfc00515 	stw	ra,20(sp)
   10204:	df000415 	stw	fp,16(sp)
   10208:	df000404 	addi	fp,sp,16
   1020c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10210:	0007883a 	mov	r3,zero
   10214:	e0bfff17 	ldw	r2,-4(fp)
   10218:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1021c:	e0bfff17 	ldw	r2,-4(fp)
   10220:	10800104 	addi	r2,r2,4
   10224:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10228:	0005303a 	rdctl	r2,status
   1022c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10230:	e0fffd17 	ldw	r3,-12(fp)
   10234:	00bfff84 	movi	r2,-2
   10238:	1884703a 	and	r2,r3,r2
   1023c:	1001703a 	wrctl	status,r2
  
  return context;
   10240:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10244:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   10248:	0010cf40 	call	10cf4 <alt_tick>
   1024c:	e0bffc17 	ldw	r2,-16(fp)
   10250:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10254:	e0bffe17 	ldw	r2,-8(fp)
   10258:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1025c:	0001883a 	nop
   10260:	e037883a 	mov	sp,fp
   10264:	dfc00117 	ldw	ra,4(sp)
   10268:	df000017 	ldw	fp,0(sp)
   1026c:	dec00204 	addi	sp,sp,8
   10270:	f800283a 	ret

00010274 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10274:	defff804 	addi	sp,sp,-32
   10278:	dfc00715 	stw	ra,28(sp)
   1027c:	df000615 	stw	fp,24(sp)
   10280:	df000604 	addi	fp,sp,24
   10284:	e13ffc15 	stw	r4,-16(fp)
   10288:	e17ffd15 	stw	r5,-12(fp)
   1028c:	e1bffe15 	stw	r6,-8(fp)
   10290:	e1ffff15 	stw	r7,-4(fp)
   10294:	e0bfff17 	ldw	r2,-4(fp)
   10298:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1029c:	d0a6d617 	ldw	r2,-25768(gp)
   102a0:	1000021e 	bne	r2,zero,102ac <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   102a4:	e0bffb17 	ldw	r2,-20(fp)
   102a8:	d0a6d615 	stw	r2,-25768(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   102ac:	e0bffc17 	ldw	r2,-16(fp)
   102b0:	10800104 	addi	r2,r2,4
   102b4:	00c001c4 	movi	r3,7
   102b8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   102bc:	d8000015 	stw	zero,0(sp)
   102c0:	e1fffc17 	ldw	r7,-16(fp)
   102c4:	01800074 	movhi	r6,1
   102c8:	31807f04 	addi	r6,r6,508
   102cc:	e17ffe17 	ldw	r5,-8(fp)
   102d0:	e13ffd17 	ldw	r4,-12(fp)
   102d4:	00108580 	call	10858 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   102d8:	0001883a 	nop
   102dc:	e037883a 	mov	sp,fp
   102e0:	dfc00117 	ldw	ra,4(sp)
   102e4:	df000017 	ldw	fp,0(sp)
   102e8:	dec00204 	addi	sp,sp,8
   102ec:	f800283a 	ret

000102f0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   102f0:	defff504 	addi	sp,sp,-44
   102f4:	df000a15 	stw	fp,40(sp)
   102f8:	df000a04 	addi	fp,sp,40
   102fc:	e13ffc15 	stw	r4,-16(fp)
   10300:	e17ffd15 	stw	r5,-12(fp)
   10304:	e1bffe15 	stw	r6,-8(fp)
   10308:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1030c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10310:	d0a6d617 	ldw	r2,-25768(gp)
  
  if (alt_ticks_per_second ())
   10314:	10003c26 	beq	r2,zero,10408 <alt_alarm_start+0x118>
  {
    if (alarm)
   10318:	e0bffc17 	ldw	r2,-16(fp)
   1031c:	10003826 	beq	r2,zero,10400 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10320:	e0bffc17 	ldw	r2,-16(fp)
   10324:	e0fffe17 	ldw	r3,-8(fp)
   10328:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1032c:	e0bffc17 	ldw	r2,-16(fp)
   10330:	e0ffff17 	ldw	r3,-4(fp)
   10334:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10338:	0005303a 	rdctl	r2,status
   1033c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10340:	e0fff917 	ldw	r3,-28(fp)
   10344:	00bfff84 	movi	r2,-2
   10348:	1884703a 	and	r2,r3,r2
   1034c:	1001703a 	wrctl	status,r2
  
  return context;
   10350:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10354:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10358:	d0a6d717 	ldw	r2,-25764(gp)
      
      current_nticks = alt_nticks();
   1035c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10360:	e0fffd17 	ldw	r3,-12(fp)
   10364:	e0bff617 	ldw	r2,-40(fp)
   10368:	1885883a 	add	r2,r3,r2
   1036c:	10c00044 	addi	r3,r2,1
   10370:	e0bffc17 	ldw	r2,-16(fp)
   10374:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10378:	e0bffc17 	ldw	r2,-16(fp)
   1037c:	10c00217 	ldw	r3,8(r2)
   10380:	e0bff617 	ldw	r2,-40(fp)
   10384:	1880042e 	bgeu	r3,r2,10398 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10388:	e0bffc17 	ldw	r2,-16(fp)
   1038c:	00c00044 	movi	r3,1
   10390:	10c00405 	stb	r3,16(r2)
   10394:	00000206 	br	103a0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10398:	e0bffc17 	ldw	r2,-16(fp)
   1039c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   103a0:	e0bffc17 	ldw	r2,-16(fp)
   103a4:	d0e00e04 	addi	r3,gp,-32712
   103a8:	e0fffa15 	stw	r3,-24(fp)
   103ac:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   103b0:	e0bffb17 	ldw	r2,-20(fp)
   103b4:	e0fffa17 	ldw	r3,-24(fp)
   103b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   103bc:	e0bffa17 	ldw	r2,-24(fp)
   103c0:	10c00017 	ldw	r3,0(r2)
   103c4:	e0bffb17 	ldw	r2,-20(fp)
   103c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   103cc:	e0bffa17 	ldw	r2,-24(fp)
   103d0:	10800017 	ldw	r2,0(r2)
   103d4:	e0fffb17 	ldw	r3,-20(fp)
   103d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   103dc:	e0bffa17 	ldw	r2,-24(fp)
   103e0:	e0fffb17 	ldw	r3,-20(fp)
   103e4:	10c00015 	stw	r3,0(r2)
   103e8:	e0bff817 	ldw	r2,-32(fp)
   103ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103f0:	e0bff717 	ldw	r2,-36(fp)
   103f4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   103f8:	0005883a 	mov	r2,zero
   103fc:	00000306 	br	1040c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10400:	00bffa84 	movi	r2,-22
   10404:	00000106 	br	1040c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10408:	00bfde84 	movi	r2,-134
  }
}
   1040c:	e037883a 	mov	sp,fp
   10410:	df000017 	ldw	fp,0(sp)
   10414:	dec00104 	addi	sp,sp,4
   10418:	f800283a 	ret

0001041c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1041c:	deffff04 	addi	sp,sp,-4
   10420:	df000015 	stw	fp,0(sp)
   10424:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10428:	0001883a 	nop
   1042c:	e037883a 	mov	sp,fp
   10430:	df000017 	ldw	fp,0(sp)
   10434:	dec00104 	addi	sp,sp,4
   10438:	f800283a 	ret

0001043c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1043c:	defffe04 	addi	sp,sp,-8
   10440:	dfc00115 	stw	ra,4(sp)
   10444:	df000015 	stw	fp,0(sp)
   10448:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1044c:	d0a00b17 	ldw	r2,-32724(gp)
   10450:	10000326 	beq	r2,zero,10460 <alt_get_errno+0x24>
   10454:	d0a00b17 	ldw	r2,-32724(gp)
   10458:	103ee83a 	callr	r2
   1045c:	00000106 	br	10464 <alt_get_errno+0x28>
   10460:	d0a6cb04 	addi	r2,gp,-25812
}
   10464:	e037883a 	mov	sp,fp
   10468:	dfc00117 	ldw	ra,4(sp)
   1046c:	df000017 	ldw	fp,0(sp)
   10470:	dec00204 	addi	sp,sp,8
   10474:	f800283a 	ret

00010478 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10478:	defffa04 	addi	sp,sp,-24
   1047c:	dfc00515 	stw	ra,20(sp)
   10480:	df000415 	stw	fp,16(sp)
   10484:	df000404 	addi	fp,sp,16
   10488:	e13ffe15 	stw	r4,-8(fp)
   1048c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10490:	e0bffe17 	ldw	r2,-8(fp)
   10494:	10000326 	beq	r2,zero,104a4 <alt_dev_llist_insert+0x2c>
   10498:	e0bffe17 	ldw	r2,-8(fp)
   1049c:	10800217 	ldw	r2,8(r2)
   104a0:	1000061e 	bne	r2,zero,104bc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   104a4:	001043c0 	call	1043c <alt_get_errno>
   104a8:	1007883a 	mov	r3,r2
   104ac:	00800584 	movi	r2,22
   104b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   104b4:	00bffa84 	movi	r2,-22
   104b8:	00001306 	br	10508 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   104bc:	e0bffe17 	ldw	r2,-8(fp)
   104c0:	e0ffff17 	ldw	r3,-4(fp)
   104c4:	e0fffc15 	stw	r3,-16(fp)
   104c8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   104cc:	e0bffd17 	ldw	r2,-12(fp)
   104d0:	e0fffc17 	ldw	r3,-16(fp)
   104d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   104d8:	e0bffc17 	ldw	r2,-16(fp)
   104dc:	10c00017 	ldw	r3,0(r2)
   104e0:	e0bffd17 	ldw	r2,-12(fp)
   104e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   104e8:	e0bffc17 	ldw	r2,-16(fp)
   104ec:	10800017 	ldw	r2,0(r2)
   104f0:	e0fffd17 	ldw	r3,-12(fp)
   104f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   104f8:	e0bffc17 	ldw	r2,-16(fp)
   104fc:	e0fffd17 	ldw	r3,-12(fp)
   10500:	10c00015 	stw	r3,0(r2)

  return 0;  
   10504:	0005883a 	mov	r2,zero
}
   10508:	e037883a 	mov	sp,fp
   1050c:	dfc00117 	ldw	ra,4(sp)
   10510:	df000017 	ldw	fp,0(sp)
   10514:	dec00204 	addi	sp,sp,8
   10518:	f800283a 	ret

0001051c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1051c:	defffd04 	addi	sp,sp,-12
   10520:	dfc00215 	stw	ra,8(sp)
   10524:	df000115 	stw	fp,4(sp)
   10528:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1052c:	00800074 	movhi	r2,1
   10530:	10841804 	addi	r2,r2,4192
   10534:	e0bfff15 	stw	r2,-4(fp)
   10538:	00000606 	br	10554 <_do_ctors+0x38>
        (*ctor) (); 
   1053c:	e0bfff17 	ldw	r2,-4(fp)
   10540:	10800017 	ldw	r2,0(r2)
   10544:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10548:	e0bfff17 	ldw	r2,-4(fp)
   1054c:	10bfff04 	addi	r2,r2,-4
   10550:	e0bfff15 	stw	r2,-4(fp)
   10554:	e0ffff17 	ldw	r3,-4(fp)
   10558:	00800074 	movhi	r2,1
   1055c:	10841904 	addi	r2,r2,4196
   10560:	18bff62e 	bgeu	r3,r2,1053c <__alt_data_end+0xffff053c>
        (*ctor) (); 
}
   10564:	0001883a 	nop
   10568:	e037883a 	mov	sp,fp
   1056c:	dfc00117 	ldw	ra,4(sp)
   10570:	df000017 	ldw	fp,0(sp)
   10574:	dec00204 	addi	sp,sp,8
   10578:	f800283a 	ret

0001057c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1057c:	defffd04 	addi	sp,sp,-12
   10580:	dfc00215 	stw	ra,8(sp)
   10584:	df000115 	stw	fp,4(sp)
   10588:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1058c:	00800074 	movhi	r2,1
   10590:	10841804 	addi	r2,r2,4192
   10594:	e0bfff15 	stw	r2,-4(fp)
   10598:	00000606 	br	105b4 <_do_dtors+0x38>
        (*dtor) (); 
   1059c:	e0bfff17 	ldw	r2,-4(fp)
   105a0:	10800017 	ldw	r2,0(r2)
   105a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   105a8:	e0bfff17 	ldw	r2,-4(fp)
   105ac:	10bfff04 	addi	r2,r2,-4
   105b0:	e0bfff15 	stw	r2,-4(fp)
   105b4:	e0ffff17 	ldw	r3,-4(fp)
   105b8:	00800074 	movhi	r2,1
   105bc:	10841904 	addi	r2,r2,4196
   105c0:	18bff62e 	bgeu	r3,r2,1059c <__alt_data_end+0xffff059c>
        (*dtor) (); 
}
   105c4:	0001883a 	nop
   105c8:	e037883a 	mov	sp,fp
   105cc:	dfc00117 	ldw	ra,4(sp)
   105d0:	df000017 	ldw	fp,0(sp)
   105d4:	dec00204 	addi	sp,sp,8
   105d8:	f800283a 	ret

000105dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   105dc:	defffa04 	addi	sp,sp,-24
   105e0:	dfc00515 	stw	ra,20(sp)
   105e4:	df000415 	stw	fp,16(sp)
   105e8:	df000404 	addi	fp,sp,16
   105ec:	e13ffe15 	stw	r4,-8(fp)
   105f0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   105f4:	e0bfff17 	ldw	r2,-4(fp)
   105f8:	10800017 	ldw	r2,0(r2)
   105fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10600:	e13ffe17 	ldw	r4,-8(fp)
   10604:	0005d640 	call	5d64 <strlen>
   10608:	10800044 	addi	r2,r2,1
   1060c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10610:	00000d06 	br	10648 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10614:	e0bffc17 	ldw	r2,-16(fp)
   10618:	10800217 	ldw	r2,8(r2)
   1061c:	e0fffd17 	ldw	r3,-12(fp)
   10620:	180d883a 	mov	r6,r3
   10624:	e17ffe17 	ldw	r5,-8(fp)
   10628:	1009883a 	mov	r4,r2
   1062c:	0010ed00 	call	10ed0 <memcmp>
   10630:	1000021e 	bne	r2,zero,1063c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10634:	e0bffc17 	ldw	r2,-16(fp)
   10638:	00000706 	br	10658 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1063c:	e0bffc17 	ldw	r2,-16(fp)
   10640:	10800017 	ldw	r2,0(r2)
   10644:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10648:	e0fffc17 	ldw	r3,-16(fp)
   1064c:	e0bfff17 	ldw	r2,-4(fp)
   10650:	18bff01e 	bne	r3,r2,10614 <__alt_data_end+0xffff0614>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10654:	0005883a 	mov	r2,zero
}
   10658:	e037883a 	mov	sp,fp
   1065c:	dfc00117 	ldw	ra,4(sp)
   10660:	df000017 	ldw	fp,0(sp)
   10664:	dec00204 	addi	sp,sp,8
   10668:	f800283a 	ret

0001066c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1066c:	defffb04 	addi	sp,sp,-20
   10670:	dfc00415 	stw	ra,16(sp)
   10674:	df000315 	stw	fp,12(sp)
   10678:	df000304 	addi	fp,sp,12
   1067c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10680:	d0a00617 	ldw	r2,-32744(gp)
   10684:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10688:	00003106 	br	10750 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1068c:	e0bffd17 	ldw	r2,-12(fp)
   10690:	10800217 	ldw	r2,8(r2)
   10694:	1009883a 	mov	r4,r2
   10698:	0005d640 	call	5d64 <strlen>
   1069c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   106a0:	e0bffd17 	ldw	r2,-12(fp)
   106a4:	10c00217 	ldw	r3,8(r2)
   106a8:	e0bffe17 	ldw	r2,-8(fp)
   106ac:	10bfffc4 	addi	r2,r2,-1
   106b0:	1885883a 	add	r2,r3,r2
   106b4:	10800003 	ldbu	r2,0(r2)
   106b8:	10803fcc 	andi	r2,r2,255
   106bc:	1080201c 	xori	r2,r2,128
   106c0:	10bfe004 	addi	r2,r2,-128
   106c4:	10800bd8 	cmpnei	r2,r2,47
   106c8:	1000031e 	bne	r2,zero,106d8 <alt_find_file+0x6c>
    {
      len -= 1;
   106cc:	e0bffe17 	ldw	r2,-8(fp)
   106d0:	10bfffc4 	addi	r2,r2,-1
   106d4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   106d8:	e0bffe17 	ldw	r2,-8(fp)
   106dc:	e0ffff17 	ldw	r3,-4(fp)
   106e0:	1885883a 	add	r2,r3,r2
   106e4:	10800003 	ldbu	r2,0(r2)
   106e8:	10803fcc 	andi	r2,r2,255
   106ec:	1080201c 	xori	r2,r2,128
   106f0:	10bfe004 	addi	r2,r2,-128
   106f4:	10800be0 	cmpeqi	r2,r2,47
   106f8:	1000081e 	bne	r2,zero,1071c <alt_find_file+0xb0>
   106fc:	e0bffe17 	ldw	r2,-8(fp)
   10700:	e0ffff17 	ldw	r3,-4(fp)
   10704:	1885883a 	add	r2,r3,r2
   10708:	10800003 	ldbu	r2,0(r2)
   1070c:	10803fcc 	andi	r2,r2,255
   10710:	1080201c 	xori	r2,r2,128
   10714:	10bfe004 	addi	r2,r2,-128
   10718:	10000a1e 	bne	r2,zero,10744 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1071c:	e0bffd17 	ldw	r2,-12(fp)
   10720:	10800217 	ldw	r2,8(r2)
   10724:	e0fffe17 	ldw	r3,-8(fp)
   10728:	180d883a 	mov	r6,r3
   1072c:	e17fff17 	ldw	r5,-4(fp)
   10730:	1009883a 	mov	r4,r2
   10734:	0010ed00 	call	10ed0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10738:	1000021e 	bne	r2,zero,10744 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1073c:	e0bffd17 	ldw	r2,-12(fp)
   10740:	00000706 	br	10760 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10744:	e0bffd17 	ldw	r2,-12(fp)
   10748:	10800017 	ldw	r2,0(r2)
   1074c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10750:	e0fffd17 	ldw	r3,-12(fp)
   10754:	d0a00604 	addi	r2,gp,-32744
   10758:	18bfcc1e 	bne	r3,r2,1068c <__alt_data_end+0xffff068c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1075c:	0005883a 	mov	r2,zero
}
   10760:	e037883a 	mov	sp,fp
   10764:	dfc00117 	ldw	ra,4(sp)
   10768:	df000017 	ldw	fp,0(sp)
   1076c:	dec00204 	addi	sp,sp,8
   10770:	f800283a 	ret

00010774 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10774:	defffa04 	addi	sp,sp,-24
   10778:	dfc00515 	stw	ra,20(sp)
   1077c:	df000415 	stw	fp,16(sp)
   10780:	dc000315 	stw	r16,12(sp)
   10784:	df000404 	addi	fp,sp,16
   10788:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   1078c:	00bffa04 	movi	r2,-24
   10790:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10794:	e03ffc15 	stw	zero,-16(fp)
   10798:	00001d06 	br	10810 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   1079c:	04000074 	movhi	r16,1
   107a0:	84073e04 	addi	r16,r16,7416
   107a4:	e0bffc17 	ldw	r2,-16(fp)
   107a8:	01400304 	movi	r5,12
   107ac:	1009883a 	mov	r4,r2
   107b0:	0000e880 	call	e88 <__mulsi3>
   107b4:	8085883a 	add	r2,r16,r2
   107b8:	10800017 	ldw	r2,0(r2)
   107bc:	1000111e 	bne	r2,zero,10804 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   107c0:	04000074 	movhi	r16,1
   107c4:	84073e04 	addi	r16,r16,7416
   107c8:	e0bffc17 	ldw	r2,-16(fp)
   107cc:	01400304 	movi	r5,12
   107d0:	1009883a 	mov	r4,r2
   107d4:	0000e880 	call	e88 <__mulsi3>
   107d8:	8085883a 	add	r2,r16,r2
   107dc:	e0fffe17 	ldw	r3,-8(fp)
   107e0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   107e4:	d0e00a17 	ldw	r3,-32728(gp)
   107e8:	e0bffc17 	ldw	r2,-16(fp)
   107ec:	1880020e 	bge	r3,r2,107f8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   107f0:	e0bffc17 	ldw	r2,-16(fp)
   107f4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   107f8:	e0bffc17 	ldw	r2,-16(fp)
   107fc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   10800:	00000606 	br	1081c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10804:	e0bffc17 	ldw	r2,-16(fp)
   10808:	10800044 	addi	r2,r2,1
   1080c:	e0bffc15 	stw	r2,-16(fp)
   10810:	e0bffc17 	ldw	r2,-16(fp)
   10814:	10800810 	cmplti	r2,r2,32
   10818:	103fe01e 	bne	r2,zero,1079c <__alt_data_end+0xffff079c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1081c:	e0bffd17 	ldw	r2,-12(fp)
}
   10820:	e6ffff04 	addi	sp,fp,-4
   10824:	dfc00217 	ldw	ra,8(sp)
   10828:	df000117 	ldw	fp,4(sp)
   1082c:	dc000017 	ldw	r16,0(sp)
   10830:	dec00304 	addi	sp,sp,12
   10834:	f800283a 	ret

00010838 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10838:	deffff04 	addi	sp,sp,-4
   1083c:	df000015 	stw	fp,0(sp)
   10840:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   10844:	0001883a 	nop
   10848:	e037883a 	mov	sp,fp
   1084c:	df000017 	ldw	fp,0(sp)
   10850:	dec00104 	addi	sp,sp,4
   10854:	f800283a 	ret

00010858 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10858:	defff904 	addi	sp,sp,-28
   1085c:	dfc00615 	stw	ra,24(sp)
   10860:	df000515 	stw	fp,20(sp)
   10864:	df000504 	addi	fp,sp,20
   10868:	e13ffc15 	stw	r4,-16(fp)
   1086c:	e17ffd15 	stw	r5,-12(fp)
   10870:	e1bffe15 	stw	r6,-8(fp)
   10874:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10878:	e0800217 	ldw	r2,8(fp)
   1087c:	d8800015 	stw	r2,0(sp)
   10880:	e1ffff17 	ldw	r7,-4(fp)
   10884:	e1bffe17 	ldw	r6,-8(fp)
   10888:	e17ffd17 	ldw	r5,-12(fp)
   1088c:	e13ffc17 	ldw	r4,-16(fp)
   10890:	0010a080 	call	10a08 <alt_iic_isr_register>
}  
   10894:	e037883a 	mov	sp,fp
   10898:	dfc00117 	ldw	ra,4(sp)
   1089c:	df000017 	ldw	fp,0(sp)
   108a0:	dec00204 	addi	sp,sp,8
   108a4:	f800283a 	ret

000108a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   108a8:	defff904 	addi	sp,sp,-28
   108ac:	df000615 	stw	fp,24(sp)
   108b0:	df000604 	addi	fp,sp,24
   108b4:	e13ffe15 	stw	r4,-8(fp)
   108b8:	e17fff15 	stw	r5,-4(fp)
   108bc:	e0bfff17 	ldw	r2,-4(fp)
   108c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108c4:	0005303a 	rdctl	r2,status
   108c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108cc:	e0fffb17 	ldw	r3,-20(fp)
   108d0:	00bfff84 	movi	r2,-2
   108d4:	1884703a 	and	r2,r3,r2
   108d8:	1001703a 	wrctl	status,r2
  
  return context;
   108dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   108e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   108e4:	00c00044 	movi	r3,1
   108e8:	e0bffa17 	ldw	r2,-24(fp)
   108ec:	1884983a 	sll	r2,r3,r2
   108f0:	1007883a 	mov	r3,r2
   108f4:	d0a6d517 	ldw	r2,-25772(gp)
   108f8:	1884b03a 	or	r2,r3,r2
   108fc:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10900:	d0a6d517 	ldw	r2,-25772(gp)
   10904:	100170fa 	wrctl	ienable,r2
   10908:	e0bffc17 	ldw	r2,-16(fp)
   1090c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10910:	e0bffd17 	ldw	r2,-12(fp)
   10914:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10918:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1091c:	0001883a 	nop
}
   10920:	e037883a 	mov	sp,fp
   10924:	df000017 	ldw	fp,0(sp)
   10928:	dec00104 	addi	sp,sp,4
   1092c:	f800283a 	ret

00010930 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10930:	defff904 	addi	sp,sp,-28
   10934:	df000615 	stw	fp,24(sp)
   10938:	df000604 	addi	fp,sp,24
   1093c:	e13ffe15 	stw	r4,-8(fp)
   10940:	e17fff15 	stw	r5,-4(fp)
   10944:	e0bfff17 	ldw	r2,-4(fp)
   10948:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1094c:	0005303a 	rdctl	r2,status
   10950:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10954:	e0fffb17 	ldw	r3,-20(fp)
   10958:	00bfff84 	movi	r2,-2
   1095c:	1884703a 	and	r2,r3,r2
   10960:	1001703a 	wrctl	status,r2
  
  return context;
   10964:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10968:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1096c:	00c00044 	movi	r3,1
   10970:	e0bffa17 	ldw	r2,-24(fp)
   10974:	1884983a 	sll	r2,r3,r2
   10978:	0084303a 	nor	r2,zero,r2
   1097c:	1007883a 	mov	r3,r2
   10980:	d0a6d517 	ldw	r2,-25772(gp)
   10984:	1884703a 	and	r2,r3,r2
   10988:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1098c:	d0a6d517 	ldw	r2,-25772(gp)
   10990:	100170fa 	wrctl	ienable,r2
   10994:	e0bffc17 	ldw	r2,-16(fp)
   10998:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1099c:	e0bffd17 	ldw	r2,-12(fp)
   109a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   109a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   109a8:	0001883a 	nop
}
   109ac:	e037883a 	mov	sp,fp
   109b0:	df000017 	ldw	fp,0(sp)
   109b4:	dec00104 	addi	sp,sp,4
   109b8:	f800283a 	ret

000109bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   109bc:	defffc04 	addi	sp,sp,-16
   109c0:	df000315 	stw	fp,12(sp)
   109c4:	df000304 	addi	fp,sp,12
   109c8:	e13ffe15 	stw	r4,-8(fp)
   109cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   109d0:	000530fa 	rdctl	r2,ienable
   109d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   109d8:	00c00044 	movi	r3,1
   109dc:	e0bfff17 	ldw	r2,-4(fp)
   109e0:	1884983a 	sll	r2,r3,r2
   109e4:	1007883a 	mov	r3,r2
   109e8:	e0bffd17 	ldw	r2,-12(fp)
   109ec:	1884703a 	and	r2,r3,r2
   109f0:	1004c03a 	cmpne	r2,r2,zero
   109f4:	10803fcc 	andi	r2,r2,255
}
   109f8:	e037883a 	mov	sp,fp
   109fc:	df000017 	ldw	fp,0(sp)
   10a00:	dec00104 	addi	sp,sp,4
   10a04:	f800283a 	ret

00010a08 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10a08:	defff504 	addi	sp,sp,-44
   10a0c:	dfc00a15 	stw	ra,40(sp)
   10a10:	df000915 	stw	fp,36(sp)
   10a14:	df000904 	addi	fp,sp,36
   10a18:	e13ffc15 	stw	r4,-16(fp)
   10a1c:	e17ffd15 	stw	r5,-12(fp)
   10a20:	e1bffe15 	stw	r6,-8(fp)
   10a24:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10a28:	00bffa84 	movi	r2,-22
   10a2c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10a30:	e0bffd17 	ldw	r2,-12(fp)
   10a34:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10a38:	e0bff817 	ldw	r2,-32(fp)
   10a3c:	10800808 	cmpgei	r2,r2,32
   10a40:	1000271e 	bne	r2,zero,10ae0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a44:	0005303a 	rdctl	r2,status
   10a48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a4c:	e0fffb17 	ldw	r3,-20(fp)
   10a50:	00bfff84 	movi	r2,-2
   10a54:	1884703a 	and	r2,r3,r2
   10a58:	1001703a 	wrctl	status,r2
  
  return context;
   10a5c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10a60:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10a64:	00800074 	movhi	r2,1
   10a68:	10929904 	addi	r2,r2,19044
   10a6c:	e0fff817 	ldw	r3,-32(fp)
   10a70:	180690fa 	slli	r3,r3,3
   10a74:	10c5883a 	add	r2,r2,r3
   10a78:	e0fffe17 	ldw	r3,-8(fp)
   10a7c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10a80:	00800074 	movhi	r2,1
   10a84:	10929904 	addi	r2,r2,19044
   10a88:	e0fff817 	ldw	r3,-32(fp)
   10a8c:	180690fa 	slli	r3,r3,3
   10a90:	10c5883a 	add	r2,r2,r3
   10a94:	10800104 	addi	r2,r2,4
   10a98:	e0ffff17 	ldw	r3,-4(fp)
   10a9c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10aa0:	e0bffe17 	ldw	r2,-8(fp)
   10aa4:	10000526 	beq	r2,zero,10abc <alt_iic_isr_register+0xb4>
   10aa8:	e0bff817 	ldw	r2,-32(fp)
   10aac:	100b883a 	mov	r5,r2
   10ab0:	e13ffc17 	ldw	r4,-16(fp)
   10ab4:	00108a80 	call	108a8 <alt_ic_irq_enable>
   10ab8:	00000406 	br	10acc <alt_iic_isr_register+0xc4>
   10abc:	e0bff817 	ldw	r2,-32(fp)
   10ac0:	100b883a 	mov	r5,r2
   10ac4:	e13ffc17 	ldw	r4,-16(fp)
   10ac8:	00109300 	call	10930 <alt_ic_irq_disable>
   10acc:	e0bff715 	stw	r2,-36(fp)
   10ad0:	e0bffa17 	ldw	r2,-24(fp)
   10ad4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ad8:	e0bff917 	ldw	r2,-28(fp)
   10adc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10ae0:	e0bff717 	ldw	r2,-36(fp)
}
   10ae4:	e037883a 	mov	sp,fp
   10ae8:	dfc00117 	ldw	ra,4(sp)
   10aec:	df000017 	ldw	fp,0(sp)
   10af0:	dec00204 	addi	sp,sp,8
   10af4:	f800283a 	ret

00010af8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10af8:	defff804 	addi	sp,sp,-32
   10afc:	dfc00715 	stw	ra,28(sp)
   10b00:	df000615 	stw	fp,24(sp)
   10b04:	dc000515 	stw	r16,20(sp)
   10b08:	df000604 	addi	fp,sp,24
   10b0c:	e13ffb15 	stw	r4,-20(fp)
   10b10:	e17ffc15 	stw	r5,-16(fp)
   10b14:	e1bffd15 	stw	r6,-12(fp)
   10b18:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   10b1c:	e1bffe17 	ldw	r6,-8(fp)
   10b20:	e17ffd17 	ldw	r5,-12(fp)
   10b24:	e13ffc17 	ldw	r4,-16(fp)
   10b28:	000f1b80 	call	f1b8 <open>
   10b2c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   10b30:	e0bffa17 	ldw	r2,-24(fp)
   10b34:	10002216 	blt	r2,zero,10bc0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   10b38:	04000074 	movhi	r16,1
   10b3c:	84073e04 	addi	r16,r16,7416
   10b40:	e0bffa17 	ldw	r2,-24(fp)
   10b44:	01400304 	movi	r5,12
   10b48:	1009883a 	mov	r4,r2
   10b4c:	0000e880 	call	e88 <__mulsi3>
   10b50:	8085883a 	add	r2,r16,r2
   10b54:	10c00017 	ldw	r3,0(r2)
   10b58:	e0bffb17 	ldw	r2,-20(fp)
   10b5c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10b60:	04000074 	movhi	r16,1
   10b64:	84073e04 	addi	r16,r16,7416
   10b68:	e0bffa17 	ldw	r2,-24(fp)
   10b6c:	01400304 	movi	r5,12
   10b70:	1009883a 	mov	r4,r2
   10b74:	0000e880 	call	e88 <__mulsi3>
   10b78:	8085883a 	add	r2,r16,r2
   10b7c:	10800104 	addi	r2,r2,4
   10b80:	10c00017 	ldw	r3,0(r2)
   10b84:	e0bffb17 	ldw	r2,-20(fp)
   10b88:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10b8c:	04000074 	movhi	r16,1
   10b90:	84073e04 	addi	r16,r16,7416
   10b94:	e0bffa17 	ldw	r2,-24(fp)
   10b98:	01400304 	movi	r5,12
   10b9c:	1009883a 	mov	r4,r2
   10ba0:	0000e880 	call	e88 <__mulsi3>
   10ba4:	8085883a 	add	r2,r16,r2
   10ba8:	10800204 	addi	r2,r2,8
   10bac:	10c00017 	ldw	r3,0(r2)
   10bb0:	e0bffb17 	ldw	r2,-20(fp)
   10bb4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10bb8:	e13ffa17 	ldw	r4,-24(fp)
   10bbc:	000f4540 	call	f454 <alt_release_fd>
  }
} 
   10bc0:	0001883a 	nop
   10bc4:	e6ffff04 	addi	sp,fp,-4
   10bc8:	dfc00217 	ldw	ra,8(sp)
   10bcc:	df000117 	ldw	fp,4(sp)
   10bd0:	dc000017 	ldw	r16,0(sp)
   10bd4:	dec00304 	addi	sp,sp,12
   10bd8:	f800283a 	ret

00010bdc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10bdc:	defffb04 	addi	sp,sp,-20
   10be0:	dfc00415 	stw	ra,16(sp)
   10be4:	df000315 	stw	fp,12(sp)
   10be8:	df000304 	addi	fp,sp,12
   10bec:	e13ffd15 	stw	r4,-12(fp)
   10bf0:	e17ffe15 	stw	r5,-8(fp)
   10bf4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10bf8:	01c07fc4 	movi	r7,511
   10bfc:	01800044 	movi	r6,1
   10c00:	e17ffd17 	ldw	r5,-12(fp)
   10c04:	01000074 	movhi	r4,1
   10c08:	21074104 	addi	r4,r4,7428
   10c0c:	0010af80 	call	10af8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10c10:	01c07fc4 	movi	r7,511
   10c14:	000d883a 	mov	r6,zero
   10c18:	e17ffe17 	ldw	r5,-8(fp)
   10c1c:	01000074 	movhi	r4,1
   10c20:	21073e04 	addi	r4,r4,7416
   10c24:	0010af80 	call	10af8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10c28:	01c07fc4 	movi	r7,511
   10c2c:	01800044 	movi	r6,1
   10c30:	e17fff17 	ldw	r5,-4(fp)
   10c34:	01000074 	movhi	r4,1
   10c38:	21074404 	addi	r4,r4,7440
   10c3c:	0010af80 	call	10af8 <alt_open_fd>
}  
   10c40:	0001883a 	nop
   10c44:	e037883a 	mov	sp,fp
   10c48:	dfc00117 	ldw	ra,4(sp)
   10c4c:	df000017 	ldw	fp,0(sp)
   10c50:	dec00204 	addi	sp,sp,8
   10c54:	f800283a 	ret

00010c58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10c58:	defffa04 	addi	sp,sp,-24
   10c5c:	df000515 	stw	fp,20(sp)
   10c60:	df000504 	addi	fp,sp,20
   10c64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c68:	0005303a 	rdctl	r2,status
   10c6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c70:	e0fffc17 	ldw	r3,-16(fp)
   10c74:	00bfff84 	movi	r2,-2
   10c78:	1884703a 	and	r2,r3,r2
   10c7c:	1001703a 	wrctl	status,r2
  
  return context;
   10c80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10c84:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10c88:	e0bfff17 	ldw	r2,-4(fp)
   10c8c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10c90:	e0bffd17 	ldw	r2,-12(fp)
   10c94:	10800017 	ldw	r2,0(r2)
   10c98:	e0fffd17 	ldw	r3,-12(fp)
   10c9c:	18c00117 	ldw	r3,4(r3)
   10ca0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10ca4:	e0bffd17 	ldw	r2,-12(fp)
   10ca8:	10800117 	ldw	r2,4(r2)
   10cac:	e0fffd17 	ldw	r3,-12(fp)
   10cb0:	18c00017 	ldw	r3,0(r3)
   10cb4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10cb8:	e0bffd17 	ldw	r2,-12(fp)
   10cbc:	e0fffd17 	ldw	r3,-12(fp)
   10cc0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10cc4:	e0bffd17 	ldw	r2,-12(fp)
   10cc8:	e0fffd17 	ldw	r3,-12(fp)
   10ccc:	10c00015 	stw	r3,0(r2)
   10cd0:	e0bffb17 	ldw	r2,-20(fp)
   10cd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cd8:	e0bffe17 	ldw	r2,-8(fp)
   10cdc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10ce0:	0001883a 	nop
   10ce4:	e037883a 	mov	sp,fp
   10ce8:	df000017 	ldw	fp,0(sp)
   10cec:	dec00104 	addi	sp,sp,4
   10cf0:	f800283a 	ret

00010cf4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10cf4:	defffb04 	addi	sp,sp,-20
   10cf8:	dfc00415 	stw	ra,16(sp)
   10cfc:	df000315 	stw	fp,12(sp)
   10d00:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10d04:	d0a00e17 	ldw	r2,-32712(gp)
   10d08:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10d0c:	d0a6d717 	ldw	r2,-25764(gp)
   10d10:	10800044 	addi	r2,r2,1
   10d14:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10d18:	00002e06 	br	10dd4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10d1c:	e0bffd17 	ldw	r2,-12(fp)
   10d20:	10800017 	ldw	r2,0(r2)
   10d24:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10d28:	e0bffd17 	ldw	r2,-12(fp)
   10d2c:	10800403 	ldbu	r2,16(r2)
   10d30:	10803fcc 	andi	r2,r2,255
   10d34:	10000426 	beq	r2,zero,10d48 <alt_tick+0x54>
   10d38:	d0a6d717 	ldw	r2,-25764(gp)
   10d3c:	1000021e 	bne	r2,zero,10d48 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10d40:	e0bffd17 	ldw	r2,-12(fp)
   10d44:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10d48:	e0bffd17 	ldw	r2,-12(fp)
   10d4c:	10800217 	ldw	r2,8(r2)
   10d50:	d0e6d717 	ldw	r3,-25764(gp)
   10d54:	18801d36 	bltu	r3,r2,10dcc <alt_tick+0xd8>
   10d58:	e0bffd17 	ldw	r2,-12(fp)
   10d5c:	10800403 	ldbu	r2,16(r2)
   10d60:	10803fcc 	andi	r2,r2,255
   10d64:	1000191e 	bne	r2,zero,10dcc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10d68:	e0bffd17 	ldw	r2,-12(fp)
   10d6c:	10800317 	ldw	r2,12(r2)
   10d70:	e0fffd17 	ldw	r3,-12(fp)
   10d74:	18c00517 	ldw	r3,20(r3)
   10d78:	1809883a 	mov	r4,r3
   10d7c:	103ee83a 	callr	r2
   10d80:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10d84:	e0bfff17 	ldw	r2,-4(fp)
   10d88:	1000031e 	bne	r2,zero,10d98 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10d8c:	e13ffd17 	ldw	r4,-12(fp)
   10d90:	0010c580 	call	10c58 <alt_alarm_stop>
   10d94:	00000d06 	br	10dcc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10d98:	e0bffd17 	ldw	r2,-12(fp)
   10d9c:	10c00217 	ldw	r3,8(r2)
   10da0:	e0bfff17 	ldw	r2,-4(fp)
   10da4:	1887883a 	add	r3,r3,r2
   10da8:	e0bffd17 	ldw	r2,-12(fp)
   10dac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10db0:	e0bffd17 	ldw	r2,-12(fp)
   10db4:	10c00217 	ldw	r3,8(r2)
   10db8:	d0a6d717 	ldw	r2,-25764(gp)
   10dbc:	1880032e 	bgeu	r3,r2,10dcc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10dc0:	e0bffd17 	ldw	r2,-12(fp)
   10dc4:	00c00044 	movi	r3,1
   10dc8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10dcc:	e0bffe17 	ldw	r2,-8(fp)
   10dd0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10dd4:	e0fffd17 	ldw	r3,-12(fp)
   10dd8:	d0a00e04 	addi	r2,gp,-32712
   10ddc:	18bfcf1e 	bne	r3,r2,10d1c <__alt_data_end+0xffff0d1c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10de0:	0001883a 	nop
}
   10de4:	0001883a 	nop
   10de8:	e037883a 	mov	sp,fp
   10dec:	dfc00117 	ldw	ra,4(sp)
   10df0:	df000017 	ldw	fp,0(sp)
   10df4:	dec00204 	addi	sp,sp,8
   10df8:	f800283a 	ret

00010dfc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10dfc:	deffff04 	addi	sp,sp,-4
   10e00:	df000015 	stw	fp,0(sp)
   10e04:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10e08:	000170fa 	wrctl	ienable,zero
}
   10e0c:	0001883a 	nop
   10e10:	e037883a 	mov	sp,fp
   10e14:	df000017 	ldw	fp,0(sp)
   10e18:	dec00104 	addi	sp,sp,4
   10e1c:	f800283a 	ret

00010e20 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10e20:	defffe04 	addi	sp,sp,-8
   10e24:	df000115 	stw	fp,4(sp)
   10e28:	df000104 	addi	fp,sp,4
   10e2c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10e30:	e0bfff17 	ldw	r2,-4(fp)
   10e34:	10bffe84 	addi	r2,r2,-6
   10e38:	10c00428 	cmpgeui	r3,r2,16
   10e3c:	18001a1e 	bne	r3,zero,10ea8 <alt_exception_cause_generated_bad_addr+0x88>
   10e40:	100690ba 	slli	r3,r2,2
   10e44:	00800074 	movhi	r2,1
   10e48:	10839604 	addi	r2,r2,3672
   10e4c:	1885883a 	add	r2,r3,r2
   10e50:	10800017 	ldw	r2,0(r2)
   10e54:	1000683a 	jmp	r2
   10e58:	00010e98 	cmpnei	zero,zero,1082
   10e5c:	00010e98 	cmpnei	zero,zero,1082
   10e60:	00010ea8 	cmpgeui	zero,zero,1082
   10e64:	00010ea8 	cmpgeui	zero,zero,1082
   10e68:	00010ea8 	cmpgeui	zero,zero,1082
   10e6c:	00010e98 	cmpnei	zero,zero,1082
   10e70:	00010ea0 	cmpeqi	zero,zero,1082
   10e74:	00010ea8 	cmpgeui	zero,zero,1082
   10e78:	00010e98 	cmpnei	zero,zero,1082
   10e7c:	00010e98 	cmpnei	zero,zero,1082
   10e80:	00010ea8 	cmpgeui	zero,zero,1082
   10e84:	00010e98 	cmpnei	zero,zero,1082
   10e88:	00010ea0 	cmpeqi	zero,zero,1082
   10e8c:	00010ea8 	cmpgeui	zero,zero,1082
   10e90:	00010ea8 	cmpgeui	zero,zero,1082
   10e94:	00010e98 	cmpnei	zero,zero,1082
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10e98:	00800044 	movi	r2,1
   10e9c:	00000306 	br	10eac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10ea0:	0005883a 	mov	r2,zero
   10ea4:	00000106 	br	10eac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10ea8:	0005883a 	mov	r2,zero
  }
}
   10eac:	e037883a 	mov	sp,fp
   10eb0:	df000017 	ldw	fp,0(sp)
   10eb4:	dec00104 	addi	sp,sp,4
   10eb8:	f800283a 	ret

00010ebc <atexit>:
   10ebc:	200b883a 	mov	r5,r4
   10ec0:	000f883a 	mov	r7,zero
   10ec4:	000d883a 	mov	r6,zero
   10ec8:	0009883a 	mov	r4,zero
   10ecc:	0010f4c1 	jmpi	10f4c <__register_exitproc>

00010ed0 <memcmp>:
   10ed0:	01c000c4 	movi	r7,3
   10ed4:	3980192e 	bgeu	r7,r6,10f3c <memcmp+0x6c>
   10ed8:	2144b03a 	or	r2,r4,r5
   10edc:	11c4703a 	and	r2,r2,r7
   10ee0:	10000f26 	beq	r2,zero,10f20 <memcmp+0x50>
   10ee4:	20800003 	ldbu	r2,0(r4)
   10ee8:	28c00003 	ldbu	r3,0(r5)
   10eec:	10c0151e 	bne	r2,r3,10f44 <memcmp+0x74>
   10ef0:	31bfff84 	addi	r6,r6,-2
   10ef4:	01ffffc4 	movi	r7,-1
   10ef8:	00000406 	br	10f0c <memcmp+0x3c>
   10efc:	20800003 	ldbu	r2,0(r4)
   10f00:	28c00003 	ldbu	r3,0(r5)
   10f04:	31bfffc4 	addi	r6,r6,-1
   10f08:	10c00e1e 	bne	r2,r3,10f44 <memcmp+0x74>
   10f0c:	21000044 	addi	r4,r4,1
   10f10:	29400044 	addi	r5,r5,1
   10f14:	31fff91e 	bne	r6,r7,10efc <__alt_data_end+0xffff0efc>
   10f18:	0005883a 	mov	r2,zero
   10f1c:	f800283a 	ret
   10f20:	20c00017 	ldw	r3,0(r4)
   10f24:	28800017 	ldw	r2,0(r5)
   10f28:	18bfee1e 	bne	r3,r2,10ee4 <__alt_data_end+0xffff0ee4>
   10f2c:	31bfff04 	addi	r6,r6,-4
   10f30:	21000104 	addi	r4,r4,4
   10f34:	29400104 	addi	r5,r5,4
   10f38:	39bff936 	bltu	r7,r6,10f20 <__alt_data_end+0xffff0f20>
   10f3c:	303fe91e 	bne	r6,zero,10ee4 <__alt_data_end+0xffff0ee4>
   10f40:	003ff506 	br	10f18 <__alt_data_end+0xffff0f18>
   10f44:	10c5c83a 	sub	r2,r2,r3
   10f48:	f800283a 	ret

00010f4c <__register_exitproc>:
   10f4c:	defffa04 	addi	sp,sp,-24
   10f50:	dc000315 	stw	r16,12(sp)
   10f54:	04000074 	movhi	r16,1
   10f58:	840bb604 	addi	r16,r16,11992
   10f5c:	80c00017 	ldw	r3,0(r16)
   10f60:	dc400415 	stw	r17,16(sp)
   10f64:	dfc00515 	stw	ra,20(sp)
   10f68:	18805217 	ldw	r2,328(r3)
   10f6c:	2023883a 	mov	r17,r4
   10f70:	10003726 	beq	r2,zero,11050 <__register_exitproc+0x104>
   10f74:	10c00117 	ldw	r3,4(r2)
   10f78:	010007c4 	movi	r4,31
   10f7c:	20c00e16 	blt	r4,r3,10fb8 <__register_exitproc+0x6c>
   10f80:	1a000044 	addi	r8,r3,1
   10f84:	8800221e 	bne	r17,zero,11010 <__register_exitproc+0xc4>
   10f88:	18c00084 	addi	r3,r3,2
   10f8c:	18c7883a 	add	r3,r3,r3
   10f90:	18c7883a 	add	r3,r3,r3
   10f94:	12000115 	stw	r8,4(r2)
   10f98:	10c7883a 	add	r3,r2,r3
   10f9c:	19400015 	stw	r5,0(r3)
   10fa0:	0005883a 	mov	r2,zero
   10fa4:	dfc00517 	ldw	ra,20(sp)
   10fa8:	dc400417 	ldw	r17,16(sp)
   10fac:	dc000317 	ldw	r16,12(sp)
   10fb0:	dec00604 	addi	sp,sp,24
   10fb4:	f800283a 	ret
   10fb8:	00800034 	movhi	r2,0
   10fbc:	10800004 	addi	r2,r2,0
   10fc0:	10002626 	beq	r2,zero,1105c <__register_exitproc+0x110>
   10fc4:	01006404 	movi	r4,400
   10fc8:	d9400015 	stw	r5,0(sp)
   10fcc:	d9800115 	stw	r6,4(sp)
   10fd0:	d9c00215 	stw	r7,8(sp)
   10fd4:	00000000 	call	0 <__reset>
   10fd8:	d9400017 	ldw	r5,0(sp)
   10fdc:	d9800117 	ldw	r6,4(sp)
   10fe0:	d9c00217 	ldw	r7,8(sp)
   10fe4:	10001d26 	beq	r2,zero,1105c <__register_exitproc+0x110>
   10fe8:	81000017 	ldw	r4,0(r16)
   10fec:	10000115 	stw	zero,4(r2)
   10ff0:	02000044 	movi	r8,1
   10ff4:	22405217 	ldw	r9,328(r4)
   10ff8:	0007883a 	mov	r3,zero
   10ffc:	12400015 	stw	r9,0(r2)
   11000:	20805215 	stw	r2,328(r4)
   11004:	10006215 	stw	zero,392(r2)
   11008:	10006315 	stw	zero,396(r2)
   1100c:	883fde26 	beq	r17,zero,10f88 <__alt_data_end+0xffff0f88>
   11010:	18c9883a 	add	r4,r3,r3
   11014:	2109883a 	add	r4,r4,r4
   11018:	1109883a 	add	r4,r2,r4
   1101c:	21802215 	stw	r6,136(r4)
   11020:	01800044 	movi	r6,1
   11024:	12406217 	ldw	r9,392(r2)
   11028:	30cc983a 	sll	r6,r6,r3
   1102c:	4992b03a 	or	r9,r9,r6
   11030:	12406215 	stw	r9,392(r2)
   11034:	21c04215 	stw	r7,264(r4)
   11038:	01000084 	movi	r4,2
   1103c:	893fd21e 	bne	r17,r4,10f88 <__alt_data_end+0xffff0f88>
   11040:	11006317 	ldw	r4,396(r2)
   11044:	218cb03a 	or	r6,r4,r6
   11048:	11806315 	stw	r6,396(r2)
   1104c:	003fce06 	br	10f88 <__alt_data_end+0xffff0f88>
   11050:	18805304 	addi	r2,r3,332
   11054:	18805215 	stw	r2,328(r3)
   11058:	003fc606 	br	10f74 <__alt_data_end+0xffff0f74>
   1105c:	00bfffc4 	movi	r2,-1
   11060:	003fd006 	br	10fa4 <__alt_data_end+0xffff0fa4>
